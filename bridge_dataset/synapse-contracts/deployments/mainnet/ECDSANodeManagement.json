{
  "address": "0x1BFE50bb2A8a75fefa46892dB10313898dDbFf8F",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "submittingMember",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "conflictingPublicKey",
          "type": "bytes"
        }
      ],
      "name": "ConflictingPublicKeySubmitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "KeepClosed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "KeepTerminated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "publicKey",
          "type": "bytes"
        }
      ],
      "name": "PublicKeyPublished",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "closeKeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMembers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOpenedTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPublicKey",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "honestThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_members",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_honestThreshold",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isClosed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isTerminated",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "members",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "publicKey",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_publicKey",
          "type": "bytes"
        }
      ],
      "name": "submitPublicKey",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5adaa39fe32e9358f9d55a1bd3370e52a8e16f76d6add66223dd53424841fc6d",
  "receipt": {
    "to": null,
    "from": "0x235AF07E770f474d24F5bf73074735892371b40D",
    "contractAddress": "0x1BFE50bb2A8a75fefa46892dB10313898dDbFf8F",
    "transactionIndex": 106,
    "gasUsed": "935193",
    "logsBloom": "0x
    "blockHash": "0x9490caa3c9348b9273863732adcc55f9142a9dbaadcb8edb301ce66f9be0c5e3",
    "transactionHash": "0x5adaa39fe32e9358f9d55a1bd3370e52a8e16f76d6add66223dd53424841fc6d",
    "logs": [],
    "blockNumber": 12688530,
    "cumulativeGasUsed": "8573388",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "1fbbd2d4de8ae41573b47d642f734797",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"submittingMember\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"conflictingPublicKey\",\"type\":\"bytes\"}],\"name\":\"ConflictingPublicKeySubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"KeepClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"KeepTerminated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"name\":\"PublicKeyPublished\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"closeKeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMembers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOpenedTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPublicKey\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"honestThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_members\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_honestThreshold\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isClosed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTerminated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"members\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicKey\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_publicKey\",\"type\":\"bytes\"}],\"name\":\"submitPublicKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"closeKeep()\":{\"details\":\"The function can be called only by the owner of the keep and only if the keep has not been already closed.\"},\"getMembers()\":{\"returns\":{\"_0\":\"List of the keep members' addresses.\"}},\"getOpenedTimestamp()\":{\"returns\":{\"_0\":\"Timestamp the keep was opened at.\"}},\"getOwner()\":{\"returns\":{\"_0\":\"Address of the keep owner.\"}},\"getPublicKey()\":{\"returns\":{\"_0\":\"Keep's ECDSA public key.\"}},\"initialize(address,address[],uint256)\":{\"details\":\"We use clone factory to create new keep. That is why this contract doesn't have a constructor. We provide keep parameters for each instance function after cloning instances from the master contract. Initialization must happen in the same transaction in which the clone is created.\",\"params\":{\"_honestThreshold\":\"Minimum number of honest keep members.\",\"_members\":\"Addresses of the keep members.\",\"_owner\":\"Address of the keep owner.\"}},\"isActive()\":{\"returns\":{\"_0\":\"true if the keep is active, false otherwise.\"}},\"isClosed()\":{\"returns\":{\"_0\":\"true if the keep is closed, false otherwise.\"}},\"isTerminated()\":{\"returns\":{\"_0\":\"true if the keep has been terminated, false otherwise.\"}},\"submitPublicKey(bytes)\":{\"details\":\"Public key is published successfully if all members submit the same value. In case of conflicts with others members submissions it will emit `ConflictingPublicKeySubmitted` event. When all submitted keys match it will store the key as keep's public key and emit a `PublicKeyPublished` event.\",\"params\":{\"_publicKey\":\"Signer's public key.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"closeKeep()\":{\"notice\":\"Closes keep when owner decides that they no longer need it. Releases bonds to the keep members.\"},\"getMembers()\":{\"notice\":\"Returns members of the keep.\"},\"getOpenedTimestamp()\":{\"notice\":\"Gets the timestamp the keep was opened at.\"},\"getOwner()\":{\"notice\":\"Gets the owner of the keep.\"},\"getPublicKey()\":{\"notice\":\"Returns keep's ECDSA public key.\"},\"initialize(address,address[],uint256)\":{\"notice\":\"Initialization function.\"},\"isActive()\":{\"notice\":\"Returns true if the keep is active.\"},\"isClosed()\":{\"notice\":\"Returns true if the keep is closed and members no longer support this keep.\"},\"isTerminated()\":{\"notice\":\"Returns true if the keep has been terminated. Keep is terminated when bonds are seized and members no longer support this keep.\"},\"submitPublicKey(bytes)\":{\"notice\":\"Submits a public key to the keep.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/synapse/ECDSANodeManagement.sol\":\"ECDSANodeManagement\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"contracts/synapse/ECDSANodeManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./utils/AddressArrayUtils.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\ncontract ECDSANodeManagement {\\n    using AddressArrayUtils for address[];\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    // Status of the keep.\\n    // Active means the keep is active.\\n    // Closed means the keep was closed happily.\\n    // Terminated means the keep was closed due to misbehavior.\\n    enum Status {Active, Closed, Terminated}\\n\\n    // Address of the keep's owner.\\n    address public owner;\\n\\n    // List of keep members' addresses.\\n    address[] public members;\\n\\n    // Minimum number of honest keep members required to produce a signature.\\n    uint256 public honestThreshold;\\n\\n    // Keep's ECDSA public key serialized to 64-bytes, where X and Y coordinates\\n    // are padded with zeros to 32-byte each.\\n    bytes public publicKey;\\n\\n    // The timestamp at which keep has been created and key generation process\\n    // started.\\n    uint256 internal keyGenerationStartTimestamp;\\n\\n     // Map stores public key by member addresses. All members should submit the\\n    // same public key.\\n    mapping(address => bytes) internal submittedPublicKeys;\\n\\n    // The current status of the keep.\\n    // If the keep is Active members monitor it and support requests from the\\n    // keep owner.\\n    // If the owner decides to close the keep the flag is set to Closed.\\n    // If the owner seizes member bonds the flag is set to Terminated.\\n    Status internal status;\\n\\n\\n    // Flags execution of contract initialization.\\n    bool internal isInitialized;\\n\\n    // Notification that the submitted public key does not match a key submitted\\n    // by other member. The event contains address of the member who tried to\\n    // submit a public key and a conflicting public key submitted already by other\\n    // member.\\n    event ConflictingPublicKeySubmitted(\\n        address indexed submittingMember,\\n        bytes conflictingPublicKey\\n    );\\n\\n    // Notification that keep's ECDSA public key has been successfully established.\\n    event PublicKeyPublished(bytes publicKey);\\n\\n    // Notification that the keep was closed by the owner.\\n    // Members no longer need to support this keep.\\n    event KeepClosed();\\n\\n    // Notification that the keep has been terminated by the owner.\\n    // Members no longer need to support this keep.\\n    event KeepTerminated();\\n\\n\\n    /// @notice Returns keep's ECDSA public key.\\n    /// @return Keep's ECDSA public key.\\n    function getPublicKey() external view returns (bytes memory) {\\n        return publicKey;\\n    }\\n\\n    /// @notice Submits a public key to the keep.\\n    /// @dev Public key is published successfully if all members submit the same\\n    /// value. In case of conflicts with others members submissions it will emit\\n    /// `ConflictingPublicKeySubmitted` event. When all submitted keys match\\n    /// it will store the key as keep's public key and emit a `PublicKeyPublished`\\n    /// event.\\n    /// @param _publicKey Signer's public key.\\n    function submitPublicKey(bytes calldata _publicKey) external onlyMember {\\n        require(\\n            !hasMemberSubmittedPublicKey(msg.sender),\\n            \\\"Member already submitted a public key\\\"\\n        );\\n\\n        require(_publicKey.length == 64, \\\"Public key must be 64 bytes long\\\");\\n\\n        submittedPublicKeys[msg.sender] = _publicKey;\\n\\n        // Check if public keys submitted by all keep members are the same as\\n        // the currently submitted one.\\n        uint256 matchingPublicKeysCount = 0;\\n        for (uint256 i = 0; i < members.length; i++) {\\n            if (\\n                keccak256(submittedPublicKeys[members[i]]) !=\\n                keccak256(_publicKey)\\n            ) {\\n                // Emit an event only if compared member already submitted a value.\\n                if (hasMemberSubmittedPublicKey(members[i])) {\\n                    emit ConflictingPublicKeySubmitted(\\n                        msg.sender,\\n                        submittedPublicKeys[members[i]]\\n                    );\\n                }\\n            } else {\\n                matchingPublicKeysCount++;\\n            }\\n        }\\n\\n        if (matchingPublicKeysCount != members.length) {\\n            return;\\n        }\\n\\n        // All submitted signatures match.\\n        publicKey = _publicKey;\\n        emit PublicKeyPublished(_publicKey);\\n    }\\n\\n\\n    /// @notice Gets the owner of the keep.\\n    /// @return Address of the keep owner.\\n    function getOwner() external view returns (address) {\\n        return owner;\\n    }\\n\\n   /// @notice Gets the timestamp the keep was opened at.\\n    /// @return Timestamp the keep was opened at.\\n    function getOpenedTimestamp() external view returns (uint256) {\\n        return keyGenerationStartTimestamp;\\n    }\\n\\n    /// @notice Closes keep when owner decides that they no longer need it.\\n    /// Releases bonds to the keep members.\\n    /// @dev The function can be called only by the owner of the keep and only\\n    /// if the keep has not been already closed.\\n    function closeKeep() public onlyOwner onlyWhenActive {\\n        markAsClosed();\\n    }\\n\\n    /// @notice Returns true if the keep is active.\\n    /// @return true if the keep is active, false otherwise.\\n    function isActive() public view returns (bool) {\\n        return status == Status.Active;\\n    }\\n\\n    /// @notice Returns true if the keep is closed and members no longer support\\n    /// this keep.\\n    /// @return true if the keep is closed, false otherwise.\\n    function isClosed() public view returns (bool) {\\n        return status == Status.Closed;\\n    }\\n\\n    /// @notice Returns true if the keep has been terminated.\\n    /// Keep is terminated when bonds are seized and members no longer support\\n    /// this keep.\\n    /// @return true if the keep has been terminated, false otherwise.\\n    function isTerminated() public view returns (bool) {\\n        return status == Status.Terminated;\\n    }\\n\\n    /// @notice Returns members of the keep.\\n    /// @return List of the keep members' addresses.\\n    function getMembers() public view returns (address[] memory) {\\n        return members;\\n    }\\n\\n    /// @notice Initialization function.\\n    /// @dev We use clone factory to create new keep. That is why this contract\\n    /// doesn't have a constructor. We provide keep parameters for each instance\\n    /// function after cloning instances from the master contract.\\n    /// Initialization must happen in the same transaction in which the clone is\\n    /// created.\\n    /// @param _owner Address of the keep owner.\\n    /// @param _members Addresses of the keep members.\\n    /// @param _honestThreshold Minimum number of honest keep members.\\n    function initialize(\\n        address _owner,\\n        address[] memory _members,\\n        uint256 _honestThreshold\\n    ) public {\\n        require(!isInitialized, \\\"Contract already initialized\\\");\\n\\n        owner = _owner;\\n        members = _members;\\n        honestThreshold = _honestThreshold;\\n\\n        status = Status.Active;\\n        isInitialized = true;\\n\\n        /* solium-disable-next-line security/no-block-members*/\\n        keyGenerationStartTimestamp = block.timestamp;\\n    }\\n\\n\\n    /// @notice Checks if the member already submitted a public key.\\n    /// @param _member Address of the member.\\n    /// @return True if member already submitted a public key, else false.\\n    function hasMemberSubmittedPublicKey(address _member)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return submittedPublicKeys[_member].length != 0;\\n    }\\n\\n\\n    /// @notice Marks the keep as closed.\\n    /// Keep can be marked as closed only when there is no signing in progress\\n    /// or the requested signing process has timed out.\\n    function markAsClosed() internal {\\n        status = Status.Closed;\\n        emit KeepClosed();\\n    }\\n\\n    /// @notice Marks the keep as terminated.\\n    /// Keep can be marked as terminated only when there is no signing in progress\\n    /// or the requested signing process has timed out.\\n    function markAsTerminated() internal {\\n        status = Status.Terminated;\\n        emit KeepTerminated();\\n    }\\n\\n\\n    /// @notice Coverts a public key to an ethereum address.\\n    /// @param _publicKey Public key provided as 64-bytes concatenation of\\n    /// X and Y coordinates (32-bytes each).\\n    /// @return Ethereum address.\\n    function publicKeyToAddress(bytes memory _publicKey)\\n        internal\\n        pure\\n        returns (address)\\n    {\\n        // We hash the public key and then truncate last 20 bytes of the digest\\n        // which is the ethereum address.\\n        return address(uint160(uint256(keccak256(_publicKey))));\\n    }\\n\\n\\n    /// @notice Terminates the keep.\\n    function terminateKeep() internal {\\n        markAsTerminated();\\n    }\\n\\n    /// @notice Checks if the caller is the keep's owner.\\n    /// @dev Throws an error if called by any account other than owner.\\n    modifier onlyOwner() {\\n        require(owner == msg.sender, \\\"Caller is not the keep owner\\\");\\n        _;\\n    }\\n\\n    /// @notice Checks if the caller is a keep member.\\n    /// @dev Throws an error if called by any account other than one of the members.\\n    modifier onlyMember() {\\n        require(members.contains(msg.sender), \\\"Caller is not the keep member\\\");\\n        _;\\n    }\\n\\n    /// @notice Checks if the keep is currently active.\\n    /// @dev Throws an error if called when the keep has been already closed.\\n    modifier onlyWhenActive() {\\n        require(isActive(), \\\"Keep is not active\\\");\\n        _;\\n    }\\n\\n}\",\"keccak256\":\"0x12081f3d098cb18b13ffa9956aa4402b3eb0a10d7f61cfda5d8e0336a4c88574\",\"license\":\"MIT\"},\"contracts/synapse/utils/AddressArrayUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nlibrary AddressArrayUtils {\\n    function contains(address[] memory self, address _address)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        for (uint256 i = 0; i < self.length; i++) {\\n            if (_address == self[i]) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n}\",\"keccak256\":\"0x610c693173bd44054f909faaaae53a4209c54af1e016fa0e95bfd8804d7d4c3e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611002806100206000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80638da5cb5b1161008c578063abd14f3711610066578063abd14f3714610324578063c2b6b58c14610394578063d1cc99761461039c578063f4c2b4c1146103a4576100ea565b80638da5cb5b146102bc5780639eab5253146102c4578063a15c3bbb1461031c576100ea565b80635daf08ca116100c85780635daf08ca1461024c57806363ffab31146102925780636806db1f1461029a578063893d20e8146102b4576100ea565b806322f3e2d4146100ef5780632e3344521461010b5780633ede50c614610188575b600080fd5b6100f76103ac565b604080519115158252519081900360200190f35b6101136103c7565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561014d578181015183820152602001610135565b50505050905090810190601f16801561017a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61024a6004803603606081101561019e57600080fd5b73ffffffffffffffffffffffffffffffffffffffff82351691908101906040810160208201356401000000008111156101d657600080fd5b8201836020820111156101e857600080fd5b8035906020019184602083028401116401000000008311171561020a57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550509135925061047b915050565b005b6102696004803603602081101561026257600080fd5b503561057d565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6101136105b1565b6102a261065d565b60408051918252519081900360200190f35b610269610663565b61026961067f565b6102cc61069b565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156103085781810151838201526020016102f0565b505050509050019250505060405180910390f35b61024a610709565b61024a6004803603602081101561033a57600080fd5b81019060208101813564010000000081111561035557600080fd5b82018360208201111561036757600080fd5b8035906020019184600183028401116401000000008311171561038957600080fd5b50909250905061080c565b6100f7610cfe565b6100f7610d07565b6102a2610d10565b6000805b60065460ff1660028111156103c157fe5b14905090565b60038054604080516020601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104715780601f1061044657610100808354040283529160200191610471565b820191906000526020600020905b81548152906001019060200180831161045457829003601f168201915b5050505050905090565b600654610100900460ff16156104f257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f436f6e747261637420616c726561647920696e697469616c697a656400000000604482015290519081900360640190fd5b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff85161790558151610545906001906020850190610e39565b506002555050600680547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001661010017905542600455565b6001818154811061058a57fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b6003805460408051602060026001851615610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190941693909304601f810184900484028201840190925281815292918301828280156106555780601f1061062a57610100808354040283529160200191610655565b820191906000526020600020905b81548152906001019060200180831161063857829003601f168201915b505050505081565b60025481565b60005473ffffffffffffffffffffffffffffffffffffffff1690565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b6060600180548060200260200160405190810160405280929190818152602001828054801561047157602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff1681526001909101906020018083116106d5575050505050905090565b60005473ffffffffffffffffffffffffffffffffffffffff16331461078f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f43616c6c6572206973206e6f7420746865206b656570206f776e657200000000604482015290519081900360640190fd5b6107976103ac565b61080257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f4b656570206973206e6f74206163746976650000000000000000000000000000604482015290519081900360640190fd5b61080a610d16565b565b61088633600180548060200260200160405190810160405280929190818152602001828054801561087357602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610848575b5050505050610d6c90919063ffffffff16565b6108f157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f43616c6c6572206973206e6f7420746865206b656570206d656d626572000000604482015290519081900360640190fd5b6108fa33610dde565b15610950576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526025815260200180610fa86025913960400191505060405180910390fd5b604081146109bf57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f5075626c6963206b6579206d757374206265203634206279746573206c6f6e67604482015290519081900360640190fd5b3360009081526005602052604090206109d9908383610ec3565b506000805b600154811015610c5d57838360405180838380828437808301925050509250505060405180910390206005600060018481548110610a1857fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518082805460018160011615610100020316600290048015610ad85780601f10610ab6576101008083540402835291820191610ad8565b820191906000526020600020905b815481529060010190602001808311610ac4575b5050915050604051809103902014610c4e57610b2160018281548110610afa57fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16610dde565b15610c49573373ffffffffffffffffffffffffffffffffffffffff167f99d98e35ad6445ac964c46a75c7f748e8f390ebdca5a924cd8f92d674fa34ff76005600060018581548110610b6f57fe5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff16835282810193909352604091820190208151838152815460027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60018316156101000201909116049381018490529092909182919082019084908015610c3a5780601f10610c0f57610100808354040283529160200191610c3a565b820191906000526020600020905b815481529060010190602001808311610c1d57829003601f168201915b50509250505060405180910390a25b610c55565b6001909101905b6001016109de565b506001548114610c6d5750610cfa565b610c7960038484610ec3565b507ff62bba8b270bef3e8d0fcebc1f86567664da8ccbd03e8509d6231cc8d63f4b31838360405180806020018281038252848482818152602001925080828437600083820152604051601f9091017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169092018290039550909350505050a1505b5050565b600060016103b0565b600060026103b0565b60045490565b600680547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790556040517f400fd7ee62b209afddce9dfbca204b2124c135597dff0ac92e9844e2b08927f690600090a1565b6000805b8351811015610dd257838181518110610d8557fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610dca576001915050610dd8565b600101610d70565b50600090505b92915050565b73ffffffffffffffffffffffffffffffffffffffff1660009081526005602052604090205460026001821615610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190911604151590565b828054828255906000526020600020908101928215610eb3579160200282015b82811115610eb357825182547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909116178255602090920191600190910190610e59565b50610ebf929150610f5b565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610f22578280017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00823516178555610f4f565b82800160010185558215610f4f579182015b82811115610f4f578235825591602001919060010190610f34565b50610ebf929150610f92565b5b80821115610ebf5780547fffffffffffffffffffffffff0000000000000000000000000000000000000000168155600101610f5c565b5b80821115610ebf5760008155600101610f9356fe4d656d62657220616c7265616479207375626d69747465642061207075626c6963206b6579a264697066735822122027cddce2da5ffb330c7442ba4c23c5ec3381f5bc4f94a47cf6e04af0a336141264736f6c634300060c0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "closeKeep()": {
        "details": "The function can be called only by the owner of the keep and only if the keep has not been already closed."
      },
      "getMembers()": {
        "returns": {
          "_0": "List of the keep members' addresses."
        }
      },
      "getOpenedTimestamp()": {
        "returns": {
          "_0": "Timestamp the keep was opened at."
        }
      },
      "getOwner()": {
        "returns": {
          "_0": "Address of the keep owner."
        }
      },
      "getPublicKey()": {
        "returns": {
          "_0": "Keep's ECDSA public key."
        }
      },
      "initialize(address,address[],uint256)": {
        "details": "We use clone factory to create new keep. That is why this contract doesn't have a constructor. We provide keep parameters for each instance function after cloning instances from the master contract. Initialization must happen in the same transaction in which the clone is created.",
        "params": {
          "_honestThreshold": "Minimum number of honest keep members.",
          "_members": "Addresses of the keep members.",
          "_owner": "Address of the keep owner."
        }
      },
      "isActive()": {
        "returns": {
          "_0": "true if the keep is active, false otherwise."
        }
      },
      "isClosed()": {
        "returns": {
          "_0": "true if the keep is closed, false otherwise."
        }
      },
      "isTerminated()": {
        "returns": {
          "_0": "true if the keep has been terminated, false otherwise."
        }
      },
      "submitPublicKey(bytes)": {
        "details": "Public key is published successfully if all members submit the same value. In case of conflicts with others members submissions it will emit `ConflictingPublicKeySubmitted` event. When all submitted keys match it will store the key as keep's public key and emit a `PublicKeyPublished` event.",
        "params": {
          "_publicKey": "Signer's public key."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "closeKeep()": {
        "notice": "Closes keep when owner decides that they no longer need it. Releases bonds to the keep members."
      },
      "getMembers()": {
        "notice": "Returns members of the keep."
      },
      "getOpenedTimestamp()": {
        "notice": "Gets the timestamp the keep was opened at."
      },
      "getOwner()": {
        "notice": "Gets the owner of the keep."
      },
      "getPublicKey()": {
        "notice": "Returns keep's ECDSA public key."
      },
      "initialize(address,address[],uint256)": {
        "notice": "Initialization function."
      },
      "isActive()": {
        "notice": "Returns true if the keep is active."
      },
      "isClosed()": {
        "notice": "Returns true if the keep is closed and members no longer support this keep."
      },
      "isTerminated()": {
        "notice": "Returns true if the keep has been terminated. Keep is terminated when bonds are seized and members no longer support this keep."
      },
      "submitPublicKey(bytes)": {
        "notice": "Submits a public key to the keep."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6451,
        "contract": "contracts/synapse/ECDSANodeManagement.sol:ECDSANodeManagement",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6454,
        "contract": "contracts/synapse/ECDSANodeManagement.sol:ECDSANodeManagement",
        "label": "members",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 6456,
        "contract": "contracts/synapse/ECDSANodeManagement.sol:ECDSANodeManagement",
        "label": "honestThreshold",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 6458,
        "contract": "contracts/synapse/ECDSANodeManagement.sol:ECDSANodeManagement",
        "label": "publicKey",
        "offset": 0,
        "slot": "3",
        "type": "t_bytes_storage"
      },
      {
        "astId": 6460,
        "contract": "contracts/synapse/ECDSANodeManagement.sol:ECDSANodeManagement",
        "label": "keyGenerationStartTimestamp",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 6464,
        "contract": "contracts/synapse/ECDSANodeManagement.sol:ECDSANodeManagement",
        "label": "submittedPublicKeys",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_bytes_storage)"
      },
      {
        "astId": 6466,
        "contract": "contracts/synapse/ECDSANodeManagement.sol:ECDSANodeManagement",
        "label": "status",
        "offset": 0,
        "slot": "6",
        "type": "t_enum(Status)6449"
      },
      {
        "astId": 6468,
        "contract": "contracts/synapse/ECDSANodeManagement.sol:ECDSANodeManagement",
        "label": "isInitialized",
        "offset": 1,
        "slot": "6",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_enum(Status)6449": {
        "encoding": "inplace",
        "label": "enum ECDSANodeManagement.Status",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}