{
  "address": "0x20A9DC684B4d0407EF8C9A302BEAaA18ee15F656",
  "abi": [
    {
      "inputs": [],
      "name": "bridge",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "burnFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gmx",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8b39d1f265639af6a3efa7fcaa21f80e0031f01256f5bcab3f940dfbf1f6bd99",
  "receipt": {
    "to": null,
    "from": "0x0AF91FA049A7e1894F480bFE5bBa20142C6c29a9",
    "contractAddress": "0x20A9DC684B4d0407EF8C9A302BEAaA18ee15F656",
    "transactionIndex": 44,
    "gasUsed": "605737",
    "logsBloom": "0x
    "blockHash": "0x250a0b433e5823d2a3dab524c143d2a937e7a2c20f477b83f4bda578fd7e35c2",
    "transactionHash": "0x8b39d1f265639af6a3efa7fcaa21f80e0031f01256f5bcab3f940dfbf1f6bd99",
    "logs": [],
    "blockNumber": 9677352,
    "cumulativeGasUsed": "5768030",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "9fd54f9447607882b6f6dbd801c9ce03",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gmx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/bridge/wrappers/GMXWrapper.sol\":\"GMXWrapper\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"contracts/bridge/wrappers/GMXWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\n\\npragma solidity 0.6.12;\\n\\ninterface IGMX {\\n    function burn(address _account, uint256 _amount) external;\\n    function balanceOf(address account) external view returns (uint256);\\n    function mint(address _account, uint256 _amount) external;\\n}\\n\\ncontract GMXWrapper {\\n    using SafeMath for uint256;\\n\\n    address constant public gmx = 0x62edc0692BD897D2295872a9FFCac5425011c661;\\n    address constant public bridge = 0xC05e61d0E7a63D27546389B7aD62FdFf5A91aACE;\\n\\n    function transfer(address _recipient, uint256 _amount) external returns (bool) {\\n        require(msg.sender == bridge);\\n        _transfer(msg.sender, _recipient, _amount);\\n        return true;\\n    }\\n\\n    function _transfer(address _sender, address _recipient, uint256 _amount) private {\\n        require(_sender != address(0), \\\"BaseToken: transfer from the zero address\\\");\\n        require(_recipient != address(0), \\\"BaseToken: transfer to the zero address\\\");\\n        IGMX(gmx).burn(_sender, _amount);\\n        IGMX(gmx).mint(_recipient, _amount);\\n    }\\n\\n    function mint(address _addr, uint256 _amount) external {\\n        require(msg.sender == bridge);\\n        uint256 preMint = IGMX(gmx).balanceOf(_addr);\\n        IGMX(gmx).mint(_addr, _amount);\\n        uint256 postMint = IGMX(gmx).balanceOf(_addr);\\n        require(preMint.add(_amount) == postMint, \\\"Mint incomplete\\\");\\n    }\\n\\n    function burnFrom(address _addr, uint256 _amount) external {\\n        require(msg.sender == bridge);\\n        uint256 preBurn = IGMX(gmx).balanceOf(_addr);\\n        IGMX(gmx).burn(_addr, _amount);\\n        uint256 postBurn = IGMX(gmx).balanceOf(_addr);\\n        require(postBurn.add(_amount) == preBurn, \\\"Burn incomplete\\\");\\n    }\\n}\",\"keccak256\":\"0x78a0b943f5f36df3c907bf5ac0d3abc56e550c1a57c32ec64fee74084f687f13\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610a0e806100206000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c806379cc67901161005057806379cc6790146100d8578063a9059cbb14610111578063e78cea921461015e57610067565b806331e67c711461006c57806340c10f191461009d575b600080fd5b610074610166565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6100d6600480360360408110156100b357600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813516906020013561017e565b005b6100d6600480360360408110156100ee57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135610413565b61014a6004803603604081101561012757600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356106a2565b604080519115158252519081900360200190f35b6100746106d8565b7362edc0692bd897d2295872a9ffcac5425011c66181565b3373c05e61d0e7a63d27546389b7ad62fdff5a91aace1461019e57600080fd5b60007362edc0692bd897d2295872a9ffcac5425011c66173ffffffffffffffffffffffffffffffffffffffff166370a08231846040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561021b57600080fd5b505afa15801561022f573d6000803e3d6000fd5b505050506040513d602081101561024557600080fd5b5051604080517f40c10f1900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff861660048201526024810185905290519192507362edc0692bd897d2295872a9ffcac5425011c661916340c10f199160448082019260009290919082900301818387803b1580156102d357600080fd5b505af11580156102e7573d6000803e3d6000fd5b5050505060007362edc0692bd897d2295872a9ffcac5425011c66173ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561036857600080fd5b505afa15801561037c573d6000803e3d6000fd5b505050506040513d602081101561039257600080fd5b50519050806103a183856106f0565b1461040d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4d696e7420696e636f6d706c6574650000000000000000000000000000000000604482015290519081900360640190fd5b50505050565b3373c05e61d0e7a63d27546389b7ad62fdff5a91aace1461043357600080fd5b60007362edc0692bd897d2295872a9ffcac5425011c66173ffffffffffffffffffffffffffffffffffffffff166370a08231846040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156104b057600080fd5b505afa1580156104c4573d6000803e3d6000fd5b505050506040513d60208110156104da57600080fd5b5051604080517f9dc29fac00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff861660048201526024810185905290519192507362edc0692bd897d2295872a9ffcac5425011c66191639dc29fac9160448082019260009290919082900301818387803b15801561056857600080fd5b505af115801561057c573d6000803e3d6000fd5b5050505060007362edc0692bd897d2295872a9ffcac5425011c66173ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156105fd57600080fd5b505afa158015610611573d6000803e3d6000fd5b505050506040513d602081101561062757600080fd5b505190508161063682856106f0565b1461040d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4275726e20696e636f6d706c6574650000000000000000000000000000000000604482015290519081900360640190fd5b60003373c05e61d0e7a63d27546389b7ad62fdff5a91aace146106c457600080fd5b6106cf33848461076b565b50600192915050565b73c05e61d0e7a63d27546389b7ad62fdff5a91aace81565b60008282018381101561076457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b73ffffffffffffffffffffffffffffffffffffffff83166107d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260298152602001806109b06029913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8216610843576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260278152602001806109896027913960400191505060405180910390fd5b604080517f9dc29fac00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff851660048201526024810183905290517362edc0692bd897d2295872a9ffcac5425011c66191639dc29fac91604480830192600092919082900301818387803b1580156108cb57600080fd5b505af11580156108df573d6000803e3d6000fd5b5050604080517f40c10f1900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff861660048201526024810185905290517362edc0692bd897d2295872a9ffcac5425011c66193506340c10f199250604480830192600092919082900301818387803b15801561096b57600080fd5b505af115801561097f573d6000803e3d6000fd5b5050505050505056fe42617365546f6b656e3a207472616e7366657220746f20746865207a65726f206164647265737342617365546f6b656e3a207472616e736665722066726f6d20746865207a65726f2061646472657373a26469706673582212200b492912c493e6fb6cd5528c3fedbd35e9abdaea791d85ad0675c458c3bca9f964736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100675760003560e01c806379cc67901161005057806379cc6790146100d8578063a9059cbb14610111578063e78cea921461015e57610067565b806331e67c711461006c57806340c10f191461009d575b600080fd5b610074610166565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6100d6600480360360408110156100b357600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813516906020013561017e565b005b6100d6600480360360408110156100ee57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135610413565b61014a6004803603604081101561012757600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356106a2565b604080519115158252519081900360200190f35b6100746106d8565b7362edc0692bd897d2295872a9ffcac5425011c66181565b3373c05e61d0e7a63d27546389b7ad62fdff5a91aace1461019e57600080fd5b60007362edc0692bd897d2295872a9ffcac5425011c66173ffffffffffffffffffffffffffffffffffffffff166370a08231846040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561021b57600080fd5b505afa15801561022f573d6000803e3d6000fd5b505050506040513d602081101561024557600080fd5b5051604080517f40c10f1900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff861660048201526024810185905290519192507362edc0692bd897d2295872a9ffcac5425011c661916340c10f199160448082019260009290919082900301818387803b1580156102d357600080fd5b505af11580156102e7573d6000803e3d6000fd5b5050505060007362edc0692bd897d2295872a9ffcac5425011c66173ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561036857600080fd5b505afa15801561037c573d6000803e3d6000fd5b505050506040513d602081101561039257600080fd5b50519050806103a183856106f0565b1461040d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4d696e7420696e636f6d706c6574650000000000000000000000000000000000604482015290519081900360640190fd5b50505050565b3373c05e61d0e7a63d27546389b7ad62fdff5a91aace1461043357600080fd5b60007362edc0692bd897d2295872a9ffcac5425011c66173ffffffffffffffffffffffffffffffffffffffff166370a08231846040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156104b057600080fd5b505afa1580156104c4573d6000803e3d6000fd5b505050506040513d60208110156104da57600080fd5b5051604080517f9dc29fac00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff861660048201526024810185905290519192507362edc0692bd897d2295872a9ffcac5425011c66191639dc29fac9160448082019260009290919082900301818387803b15801561056857600080fd5b505af115801561057c573d6000803e3d6000fd5b5050505060007362edc0692bd897d2295872a9ffcac5425011c66173ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156105fd57600080fd5b505afa158015610611573d6000803e3d6000fd5b505050506040513d602081101561062757600080fd5b505190508161063682856106f0565b1461040d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4275726e20696e636f6d706c6574650000000000000000000000000000000000604482015290519081900360640190fd5b60003373c05e61d0e7a63d27546389b7ad62fdff5a91aace146106c457600080fd5b6106cf33848461076b565b50600192915050565b73c05e61d0e7a63d27546389b7ad62fdff5a91aace81565b60008282018381101561076457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b73ffffffffffffffffffffffffffffffffffffffff83166107d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260298152602001806109b06029913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8216610843576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260278152602001806109896027913960400191505060405180910390fd5b604080517f9dc29fac00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff851660048201526024810183905290517362edc0692bd897d2295872a9ffcac5425011c66191639dc29fac91604480830192600092919082900301818387803b1580156108cb57600080fd5b505af11580156108df573d6000803e3d6000fd5b5050604080517f40c10f1900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff861660048201526024810185905290517362edc0692bd897d2295872a9ffcac5425011c66193506340c10f199250604480830192600092919082900301818387803b15801561096b57600080fd5b505af115801561097f573d6000803e3d6000fd5b5050505050505056fe42617365546f6b656e3a207472616e7366657220746f20746865207a65726f206164647265737342617365546f6b656e3a207472616e736665722066726f6d20746865207a65726f2061646472657373a26469706673582212200b492912c493e6fb6cd5528c3fedbd35e9abdaea791d85ad0675c458c3bca9f964736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}