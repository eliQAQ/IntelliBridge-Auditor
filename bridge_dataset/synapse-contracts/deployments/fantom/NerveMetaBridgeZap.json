{
  "address": "0xE910dfaa50094C6BC1bF68E3CD7B244E9eC09D57",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_wethAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_metaSwapOne",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOne",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_metaSwapTwo",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenTwo",
          "type": "address"
        },
        {
          "internalType": "contract ISynapseBridge",
          "name": "_synapseBridge",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "WETH_ADDRESS",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "tokenIndexFrom",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "tokenIndexTo",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "dx",
          "type": "uint256"
        }
      ],
      "name": "calculateSwap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "metaSwapMap",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "metaSwapTokensMap",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "redeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "liqTokenIndex",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "liqMinAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liqDeadline",
          "type": "uint256"
        }
      ],
      "name": "redeemAndRemove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "tokenIndexFrom",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "tokenIndexTo",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "minDy",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "redeemAndSwap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "tokenIndexFrom",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "tokenIndexTo",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "dx",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minDy",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapAndRedeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "tokenIndexFrom",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "tokenIndexTo",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "dx",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minDy",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "liqTokenIndex",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "liqMinAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liqDeadline",
          "type": "uint256"
        }
      ],
      "name": "swapAndRedeemAndRemove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "tokenIndexFrom",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "tokenIndexTo",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "dx",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minDy",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "swapTokenIndexFrom",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "swapTokenIndexTo",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "swapMinDy",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "swapDeadline",
          "type": "uint256"
        }
      ],
      "name": "swapAndRedeemAndSwap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "tokenIndexFrom",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "tokenIndexTo",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "dx",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minDy",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapETHAndRedeem",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7127a63657c80d642b0e7378f9265d0b3295f741cc51c381b2f9e15fcb524b1c",
  "receipt": {
    "to": null,
    "from": "0x0AF91FA049A7e1894F480bFE5bBa20142C6c29a9",
    "contractAddress": "0xE910dfaa50094C6BC1bF68E3CD7B244E9eC09D57",
    "transactionIndex": 1,
    "gasUsed": "2203254",
    "logsBloom": "0x
    "blockHash": "0x0000b8d60000059c8e4018926bec1152ffe5759d98c9c12639cb30173b2e47e5",
    "transactionHash": "0x7127a63657c80d642b0e7378f9265d0b3295f741cc51c381b2f9e15fcb524b1c",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 20173344,
        "transactionHash": "0x7127a63657c80d642b0e7378f9265d0b3295f741cc51c381b2f9e15fcb524b1c",
        "address": "0xED2a7edd7413021d440b09D654f3b87712abAB66",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000e910dfaa50094c6bc1bf68e3cd7b244e9ec09d57",
          "0x000000000000000000000000cef6c2e20898c2604886b888552ca6ccf66933b0"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 5,
        "blockHash": "0x0000b8d60000059c8e4018926bec1152ffe5759d98c9c12639cb30173b2e47e5"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 20173344,
        "transactionHash": "0x7127a63657c80d642b0e7378f9265d0b3295f741cc51c381b2f9e15fcb524b1c",
        "address": "0xED2a7edd7413021d440b09D654f3b87712abAB66",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000e910dfaa50094c6bc1bf68e3cd7b244e9ec09d57",
          "0x000000000000000000000000af41a65f786339e7911f4acdad6bd49426f2dc6b"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 6,
        "blockHash": "0x0000b8d60000059c8e4018926bec1152ffe5759d98c9c12639cb30173b2e47e5"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 20173344,
        "transactionHash": "0x7127a63657c80d642b0e7378f9265d0b3295f741cc51c381b2f9e15fcb524b1c",
        "address": "0x82f0B8B456c1A451378467398982d4834b6829c1",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000e910dfaa50094c6bc1bf68e3cd7b244e9ec09d57",
          "0x000000000000000000000000cef6c2e20898c2604886b888552ca6ccf66933b0"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 7,
        "blockHash": "0x0000b8d60000059c8e4018926bec1152ffe5759d98c9c12639cb30173b2e47e5"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 20173344,
        "transactionHash": "0x7127a63657c80d642b0e7378f9265d0b3295f741cc51c381b2f9e15fcb524b1c",
        "address": "0x82f0B8B456c1A451378467398982d4834b6829c1",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000e910dfaa50094c6bc1bf68e3cd7b244e9ec09d57",
          "0x000000000000000000000000af41a65f786339e7911f4acdad6bd49426f2dc6b"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 8,
        "blockHash": "0x0000b8d60000059c8e4018926bec1152ffe5759d98c9c12639cb30173b2e47e5"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 20173344,
        "transactionHash": "0x7127a63657c80d642b0e7378f9265d0b3295f741cc51c381b2f9e15fcb524b1c",
        "address": "0x04068DA6C83AFCFA0e13ba15A6696662335D5B75",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000e910dfaa50094c6bc1bf68e3cd7b244e9ec09d57",
          "0x000000000000000000000000cef6c2e20898c2604886b888552ca6ccf66933b0"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 9,
        "blockHash": "0x0000b8d60000059c8e4018926bec1152ffe5759d98c9c12639cb30173b2e47e5"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 20173344,
        "transactionHash": "0x7127a63657c80d642b0e7378f9265d0b3295f741cc51c381b2f9e15fcb524b1c",
        "address": "0x04068DA6C83AFCFA0e13ba15A6696662335D5B75",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000e910dfaa50094c6bc1bf68e3cd7b244e9ec09d57",
          "0x000000000000000000000000af41a65f786339e7911f4acdad6bd49426f2dc6b"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 10,
        "blockHash": "0x0000b8d60000059c8e4018926bec1152ffe5759d98c9c12639cb30173b2e47e5"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 20173344,
        "transactionHash": "0x7127a63657c80d642b0e7378f9265d0b3295f741cc51c381b2f9e15fcb524b1c",
        "address": "0x049d68029688eAbF473097a2fC38ef61633A3C7A",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000e910dfaa50094c6bc1bf68e3cd7b244e9ec09d57",
          "0x000000000000000000000000cef6c2e20898c2604886b888552ca6ccf66933b0"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 11,
        "blockHash": "0x0000b8d60000059c8e4018926bec1152ffe5759d98c9c12639cb30173b2e47e5"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 20173344,
        "transactionHash": "0x7127a63657c80d642b0e7378f9265d0b3295f741cc51c381b2f9e15fcb524b1c",
        "address": "0x049d68029688eAbF473097a2fC38ef61633A3C7A",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000e910dfaa50094c6bc1bf68e3cd7b244e9ec09d57",
          "0x000000000000000000000000af41a65f786339e7911f4acdad6bd49426f2dc6b"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 12,
        "blockHash": "0x0000b8d60000059c8e4018926bec1152ffe5759d98c9c12639cb30173b2e47e5"
      }
    ],
    "blockNumber": 20173344,
    "cumulativeGasUsed": "2304437",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0000000000000000000000000000000000000000",
    "0xcEf6C2e20898C2604886b888552CA6CcF66933B0",
    "0xED2a7edd7413021d440b09D654f3b87712abAB66",
    "0x0000000000000000000000000000000000000000",
    "0x0000000000000000000000000000000000000000",
    "0xAf41a65F786339e7911F4acDAD6BD49426F2Dc6b"
  ],
  "solcInputHash": "16412b2ab85ccb21af0b3507786005ed",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_wethAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_metaSwapOne\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOne\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_metaSwapTwo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenTwo\",\"type\":\"address\"},{\"internalType\":\"contract ISynapseBridge\",\"name\":\"_synapseBridge\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"WETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexFrom\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexTo\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"dx\",\"type\":\"uint256\"}],\"name\":\"calculateSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"metaSwapMap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"metaSwapTokensMap\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"liqTokenIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"liqMinAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liqDeadline\",\"type\":\"uint256\"}],\"name\":\"redeemAndRemove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexFrom\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexTo\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"minDy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"redeemAndSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexFrom\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexTo\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"dx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapAndRedeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexFrom\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexTo\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"dx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"liqTokenIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"liqMinAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liqDeadline\",\"type\":\"uint256\"}],\"name\":\"swapAndRedeemAndRemove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexFrom\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexTo\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"dx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"swapTokenIndexFrom\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"swapTokenIndexTo\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"swapMinDy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapDeadline\",\"type\":\"uint256\"}],\"name\":\"swapAndRedeemAndSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexFrom\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexTo\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"dx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapETHAndRedeem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"calculateSwap(address,uint8,uint8,uint256)\":{\"params\":{\"dx\":\"the amount of tokens the user wants to sell. If the token charges a fee on transfers, use the amount that gets transferred after the fee.\",\"tokenIndexFrom\":\"the token the user wants to sell\",\"tokenIndexTo\":\"the token the user wants to buy\"},\"returns\":{\"_0\":\"amount of tokens the user will receive\"}},\"deposit(address,uint256,address,uint256)\":{\"params\":{\"amount\":\"Amount in native token decimals to transfer cross-chain pre-fees*\",\"chainId\":\"which underlying chain to bridge assets onto\",\"to\":\"address on other chain to redeem underlying assets to\",\"token\":\"ERC20 compatible token to deposit into the bridge\"}},\"redeem(address,uint256,address,uint256)\":{\"params\":{\"amount\":\"Amount in native token decimals to transfer cross-chain pre-fees*\",\"chainId\":\"which underlying chain to bridge assets onto\",\"to\":\"address on other chain to redeem underlying assets to\",\"token\":\"ERC20 compatible token to deposit into the bridge\"}},\"redeemAndRemove(address,uint256,address,uint256,uint8,uint256,uint256)\":{\"params\":{\"amount\":\"Amount of (typically) LP token to pass to the nodes to attempt to removeLiquidity() with to redeem for the underlying assets of the LP token\",\"chainId\":\"which underlying chain to bridge assets onto\",\"liqDeadline\":\"Specificies the deadline that the nodes are allowed to try to redeem/swap the LP token*\",\"liqMinAmount\":\"Specifies the minimum amount of the underlying asset needed for the nodes to execute the redeem/swap\",\"liqTokenIndex\":\"Specifies which of the underlying LP assets the nodes should attempt to redeem for\",\"to\":\"address on other chain to redeem underlying assets to\",\"token\":\"ERC20 compatible token to deposit into the bridge\"}},\"redeemAndSwap(address,uint256,address,uint256,uint8,uint8,uint256,uint256)\":{\"params\":{\"amount\":\"Amount in native token decimals to transfer cross-chain pre-fees\",\"chainId\":\"which underlying chain to bridge assets onto\",\"deadline\":\"latest timestamp to accept this transaction*\",\"minDy\":\"the min amount the user would like to receive, or revert to only minting the SynERC20 token crosschain.\",\"to\":\"address on other chain to redeem underlying assets to\",\"token\":\"ERC20 compatible token to deposit into the bridge\",\"tokenIndexFrom\":\"the token the user wants to swap from\",\"tokenIndexTo\":\"the token the user wants to swap to\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"calculateSwap(address,uint8,uint8,uint256)\":{\"notice\":\"Calculate amount of tokens you receive on swap\"},\"deposit(address,uint256,address,uint256)\":{\"notice\":\"wraps SynapseBridge redeem()\"},\"redeem(address,uint256,address,uint256)\":{\"notice\":\"wraps SynapseBridge redeem()\"},\"redeemAndRemove(address,uint256,address,uint256,uint8,uint256,uint256)\":{\"notice\":\"Wraps redeemAndRemove on SynapseBridge Relays to nodes that (typically) a wrapped synAsset ERC20 token has been burned and the underlying needs to be redeeemed on the native chain. This function indicates to the nodes that they should attempt to redeem the LP token for the underlying assets (E.g \\\"swap\\\" out of the LP token)\"},\"redeemAndSwap(address,uint256,address,uint256,uint8,uint8,uint256,uint256)\":{\"notice\":\"Wraps redeemAndSwap on SynapseBridge.sol Relays to nodes that (typically) a wrapped synAsset ERC20 token has been burned and the underlying needs to be redeeemed on the native chain. This function indicates to the nodes that they should attempt to redeem the LP token for the underlying assets (E.g \\\"swap\\\" out of the LP token)\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/bridge/wrappers/NerveMetaBridgeZap.sol\":\"NerveMetaBridgeZap\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \\\"ERC20: burn amount exceeds allowance\\\");\\n\\n        _approve(account, _msgSender(), decreasedAllowance);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x9c0eb3b0e11d2480d49991dc384f1e5f9c9b9967cc81944d50916a9b9c6c4984\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/bridge/interfaces/IMetaSwapDeposit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\n\\n/**\\n * @title IMetaSwapDeposit interface\\n * @notice Interface for the meta swap contract.\\n * @dev implement this interface to develop a a factory-patterned ECDSA node management contract\\n **/\\ninterface IMetaSwapDeposit {\\n  // min return calculation functions\\n  function calculateSwap(\\n    uint8 tokenIndexFrom,\\n    uint8 tokenIndexTo,\\n    uint256 dx\\n  ) external view returns (uint256);\\n\\n  function swap(\\n    uint8 tokenIndexFrom,\\n    uint8 tokenIndexTo,\\n    uint256 dx,\\n    uint256 minDy,\\n    uint256 deadline\\n  ) external returns (uint256);\\n\\n  function getToken(uint256 index) external view returns (IERC20);\\n}\\n\",\"keccak256\":\"0xb9b7134b0e6b2292003d26cdeeab02648451665552c2509aa55369b836753413\",\"license\":\"MIT\"},\"contracts/bridge/interfaces/ISynapseBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol';\\n\\ninterface ISynapseBridge {\\n  using SafeERC20 for IERC20;\\n\\n  function deposit(\\n    address to,\\n    uint256 chainId,\\n    IERC20 token,\\n    uint256 amount\\n  ) external;\\n\\n  function depositAndSwap(\\n    address to,\\n    uint256 chainId,\\n    IERC20 token,\\n    uint256 amount,\\n    uint8 tokenIndexFrom,\\n    uint8 tokenIndexTo,\\n    uint256 minDy,\\n    uint256 deadline\\n  ) external;\\n\\n  function redeem(\\n    address to,\\n    uint256 chainId,\\n    IERC20 token,\\n    uint256 amount\\n  ) external;\\n\\n  function redeemAndSwap(\\n    address to,\\n    uint256 chainId,\\n    IERC20 token,\\n    uint256 amount,\\n    uint8 tokenIndexFrom,\\n    uint8 tokenIndexTo,\\n    uint256 minDy,\\n    uint256 deadline\\n  ) external;\\n\\n  function redeemAndRemove(\\n    address to,\\n    uint256 chainId,\\n    IERC20 token,\\n    uint256 amount,\\n    uint8 liqTokenIndex,\\n    uint256 liqMinAmount,\\n    uint256 liqDeadline\\n  ) external;\\n}\\n\",\"keccak256\":\"0x481ef0dfbfdf319518480c86f83fe6caea352ced4aa05f26389285af5c7e4c19\",\"license\":\"MIT\"},\"contracts/bridge/interfaces/IWETH9.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.4.0;\\n\\ninterface IWETH9 {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function allowance(address, address) external view returns (uint256);\\n\\n    receive() external payable;\\n\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 wad) external;\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function approve(address guy, uint256 wad) external returns (bool);\\n\\n    function transfer(address dst, uint256 wad) external returns (bool);\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 wad\\n    ) external returns (bool);\\n}\",\"keccak256\":\"0x081ebde11dad2210d382564d40336f914d3d621750645f23707ca1a92139dbe2\",\"license\":\"MIT\"},\"contracts/bridge/wrappers/NerveMetaBridgeZap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"../interfaces/IMetaSwapDeposit.sol\\\";\\nimport \\\"../interfaces/ISynapseBridge.sol\\\";\\nimport \\\"../interfaces/IWETH9.sol\\\";\\n\\ncontract NerveMetaBridgeZap {\\n    using SafeERC20 for IERC20;\\n\\n    ISynapseBridge synapseBridge;\\n    address payable public immutable WETH_ADDRESS;\\n\\n    mapping(address => address) public metaSwapMap;\\n    mapping(address => IERC20[]) public metaSwapTokensMap;\\n\\n    uint256 constant MAX_UINT256 = 2**256 - 1;\\n\\n    constructor(\\n        address payable _wethAddress,\\n        address _metaSwapOne,\\n        address tokenOne,\\n        address _metaSwapTwo,\\n        address tokenTwo,\\n        ISynapseBridge _synapseBridge\\n    ) public {\\n        WETH_ADDRESS = _wethAddress;\\n        synapseBridge = _synapseBridge;\\n        metaSwapMap[tokenOne] = _metaSwapOne;\\n        metaSwapMap[tokenTwo] = _metaSwapTwo;\\n\\n        if (address(_metaSwapOne) != address(0)) {\\n            {\\n                uint8 i;\\n                for (; i < 32; i++) {\\n                    try IMetaSwapDeposit(_metaSwapOne).getToken(i) returns (\\n                        IERC20 token\\n                    ) {\\n                        metaSwapTokensMap[_metaSwapOne].push(token);\\n                        token.safeApprove(address(_metaSwapOne), MAX_UINT256);\\n                        token.safeApprove(address(synapseBridge), MAX_UINT256);\\n                    } catch {\\n                        break;\\n                    }\\n                }\\n                require(i > 1, \\\"metaSwap must have at least 2 tokens\\\");\\n            }\\n        }\\n        if (address(_metaSwapTwo) != address(0)) {\\n            {\\n                uint8 i;\\n                for (; i < 32; i++) {\\n                    try IMetaSwapDeposit(_metaSwapTwo).getToken(i) returns (\\n                        IERC20 token\\n                    ) {\\n                        metaSwapTokensMap[_metaSwapTwo].push(token);\\n                        token.safeApprove(address(_metaSwapTwo), MAX_UINT256);\\n                        token.safeApprove(address(synapseBridge), MAX_UINT256);\\n                    } catch {\\n                        break;\\n                    }\\n                }\\n                require(i > 1, \\\"metaSwap must have at least 2 tokens\\\");\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculate amount of tokens you receive on swap\\n     * @param tokenIndexFrom the token the user wants to sell\\n     * @param tokenIndexTo the token the user wants to buy\\n     * @param dx the amount of tokens the user wants to sell. If the token charges\\n     * a fee on transfers, use the amount that gets transferred after the fee.\\n     * @return amount of tokens the user will receive\\n     */\\n    function calculateSwap(\\n        IERC20 token,\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx\\n    ) external view virtual returns (uint256) {\\n        IMetaSwapDeposit metaSwap = IMetaSwapDeposit(\\n            metaSwapMap[address(token)]\\n        );\\n        return metaSwap.calculateSwap(tokenIndexFrom, tokenIndexTo, dx);\\n    }\\n\\n    function swapAndRedeem(\\n        address to,\\n        uint256 chainId,\\n        IERC20 token,\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        uint256 deadline\\n    ) external {\\n        IMetaSwapDeposit metaSwap = IMetaSwapDeposit(\\n            metaSwapMap[address(token)]\\n        );\\n        require(address(metaSwap) != address(0), \\\"Metaswap is 0x00\\\");\\n        IERC20[] memory metaTokens = metaSwapTokensMap[address(metaSwap)];\\n        metaTokens[tokenIndexFrom].safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            dx\\n        );\\n        // swap\\n\\n        uint256 swappedAmount = metaSwap.swap(\\n            tokenIndexFrom,\\n            tokenIndexTo,\\n            dx,\\n            minDy,\\n            deadline\\n        );\\n        // deposit into bridge, gets nUSD\\n        if (\\n            token.allowance(address(this), address(synapseBridge)) <\\n            swappedAmount\\n        ) {\\n            token.safeApprove(address(synapseBridge), MAX_UINT256);\\n        }\\n        synapseBridge.redeem(to, chainId, token, swappedAmount);\\n    }\\n\\n    function swapAndRedeemAndSwap(\\n        address to,\\n        uint256 chainId,\\n        IERC20 token,\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        uint256 deadline,\\n        uint8 swapTokenIndexFrom,\\n        uint8 swapTokenIndexTo,\\n        uint256 swapMinDy,\\n        uint256 swapDeadline\\n    ) external {\\n        require(\\n            address(metaSwapMap[address(token)]) != address(0),\\n            \\\"Metaswap is 0x00\\\"\\n        );\\n        IERC20[] memory metaTokens = metaSwapTokensMap[\\n            metaSwapMap[address(token)]\\n        ];\\n        metaTokens[tokenIndexFrom].safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            dx\\n        );\\n        // swap\\n\\n        uint256 swappedAmount = IMetaSwapDeposit(metaSwapMap[address(token)])\\n        .swap(tokenIndexFrom, tokenIndexTo, dx, minDy, deadline);\\n        // deposit into bridge, gets nUSD\\n        if (\\n            token.allowance(address(this), address(synapseBridge)) <\\n            swappedAmount\\n        ) {\\n            token.safeApprove(address(synapseBridge), MAX_UINT256);\\n        }\\n        synapseBridge.redeemAndSwap(\\n            to,\\n            chainId,\\n            token,\\n            swappedAmount,\\n            swapTokenIndexFrom,\\n            swapTokenIndexTo,\\n            swapMinDy,\\n            swapDeadline\\n        );\\n    }\\n\\n    function swapAndRedeemAndRemove(\\n        address to,\\n        uint256 chainId,\\n        IERC20 token,\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        uint256 deadline,\\n        uint8 liqTokenIndex,\\n        uint256 liqMinAmount,\\n        uint256 liqDeadline\\n    ) external {\\n        IMetaSwapDeposit metaSwap = IMetaSwapDeposit(\\n            metaSwapMap[address(token)]\\n        );\\n        require(address(metaSwap) != address(0), \\\"Metaswap is 0x00\\\");\\n        IERC20[] memory metaTokens = metaSwapTokensMap[address(metaSwap)];\\n        metaTokens[tokenIndexFrom].safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            dx\\n        );\\n        // swap\\n\\n        uint256 swappedAmount = metaSwap.swap(\\n            tokenIndexFrom,\\n            tokenIndexTo,\\n            dx,\\n            minDy,\\n            deadline\\n        );\\n        // deposit into bridge, gets nUSD\\n        if (\\n            token.allowance(address(this), address(synapseBridge)) <\\n            swappedAmount\\n        ) {\\n            token.safeApprove(address(synapseBridge), MAX_UINT256);\\n        }\\n        synapseBridge.redeemAndRemove(\\n            to,\\n            chainId,\\n            token,\\n            swappedAmount,\\n            liqTokenIndex,\\n            liqMinAmount,\\n            liqDeadline\\n        );\\n    }\\n\\n    /**\\n     * @notice wraps SynapseBridge redeem()\\n     * @param to address on other chain to redeem underlying assets to\\n     * @param chainId which underlying chain to bridge assets onto\\n     * @param token ERC20 compatible token to deposit into the bridge\\n     * @param amount Amount in native token decimals to transfer cross-chain pre-fees\\n     **/\\n    function redeem(\\n        address to,\\n        uint256 chainId,\\n        IERC20 token,\\n        uint256 amount\\n    ) external {\\n        token.safeTransferFrom(msg.sender, address(this), amount);\\n        if (token.allowance(address(this), address(synapseBridge)) < amount) {\\n            token.safeApprove(address(synapseBridge), MAX_UINT256);\\n        }\\n        synapseBridge.redeem(to, chainId, token, amount);\\n    }\\n\\n    /**\\n     * @notice wraps SynapseBridge redeem()\\n     * @param to address on other chain to redeem underlying assets to\\n     * @param chainId which underlying chain to bridge assets onto\\n     * @param token ERC20 compatible token to deposit into the bridge\\n     * @param amount Amount in native token decimals to transfer cross-chain pre-fees\\n     **/\\n    function deposit(\\n        address to,\\n        uint256 chainId,\\n        IERC20 token,\\n        uint256 amount\\n    ) external {\\n        token.safeTransferFrom(msg.sender, address(this), amount);\\n        if (token.allowance(address(this), address(synapseBridge)) < amount) {\\n            token.safeApprove(address(synapseBridge), MAX_UINT256);\\n        }\\n        synapseBridge.deposit(to, chainId, token, amount);\\n    }\\n\\n    function swapETHAndRedeem(\\n        address to,\\n        uint256 chainId,\\n        IERC20 token,\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        uint256 deadline\\n    ) external payable {\\n        require(WETH_ADDRESS != address(0), \\\"WETH 0\\\");\\n        require(msg.value > 0 && msg.value == dx, \\\"INCORRECT MSG VALUE\\\");\\n        IMetaSwapDeposit metaSwap = IMetaSwapDeposit(\\n            metaSwapMap[address(token)]\\n        );\\n        require(address(metaSwap) != address(0), \\\"Metaswap is 0x00\\\");\\n        IWETH9(WETH_ADDRESS).deposit{value: msg.value}();\\n\\n        // swap\\n        uint256 swappedAmount = metaSwap.swap(\\n            tokenIndexFrom,\\n            tokenIndexTo,\\n            dx,\\n            minDy,\\n            deadline\\n        );\\n        synapseBridge.redeem(to, chainId, token, swappedAmount);\\n    }\\n\\n    /**\\n     * @notice Wraps redeemAndSwap on SynapseBridge.sol\\n     * Relays to nodes that (typically) a wrapped synAsset ERC20 token has been burned and the underlying needs to be redeeemed on the native chain. This function indicates to the nodes that they should attempt to redeem the LP token for the underlying assets (E.g \\\"swap\\\" out of the LP token)\\n     * @param to address on other chain to redeem underlying assets to\\n     * @param chainId which underlying chain to bridge assets onto\\n     * @param token ERC20 compatible token to deposit into the bridge\\n     * @param amount Amount in native token decimals to transfer cross-chain pre-fees\\n     * @param tokenIndexFrom the token the user wants to swap from\\n     * @param tokenIndexTo the token the user wants to swap to\\n     * @param minDy the min amount the user would like to receive, or revert to only minting the SynERC20 token crosschain.\\n     * @param deadline latest timestamp to accept this transaction\\n     **/\\n    function redeemAndSwap(\\n        address to,\\n        uint256 chainId,\\n        IERC20 token,\\n        uint256 amount,\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 minDy,\\n        uint256 deadline\\n    ) external {\\n        token.safeTransferFrom(msg.sender, address(this), amount);\\n        if (token.allowance(address(this), address(synapseBridge)) < amount) {\\n            token.safeApprove(address(synapseBridge), MAX_UINT256);\\n        }\\n        synapseBridge.redeemAndSwap(\\n            to,\\n            chainId,\\n            token,\\n            amount,\\n            tokenIndexFrom,\\n            tokenIndexTo,\\n            minDy,\\n            deadline\\n        );\\n    }\\n\\n    /**\\n     * @notice Wraps redeemAndRemove on SynapseBridge\\n     * Relays to nodes that (typically) a wrapped synAsset ERC20 token has been burned and the underlying needs to be redeeemed on the native chain. This function indicates to the nodes that they should attempt to redeem the LP token for the underlying assets (E.g \\\"swap\\\" out of the LP token)\\n     * @param to address on other chain to redeem underlying assets to\\n     * @param chainId which underlying chain to bridge assets onto\\n     * @param token ERC20 compatible token to deposit into the bridge\\n     * @param amount Amount of (typically) LP token to pass to the nodes to attempt to removeLiquidity() with to redeem for the underlying assets of the LP token\\n     * @param liqTokenIndex Specifies which of the underlying LP assets the nodes should attempt to redeem for\\n     * @param liqMinAmount Specifies the minimum amount of the underlying asset needed for the nodes to execute the redeem/swap\\n     * @param liqDeadline Specificies the deadline that the nodes are allowed to try to redeem/swap the LP token\\n     **/\\n    function redeemAndRemove(\\n        address to,\\n        uint256 chainId,\\n        IERC20 token,\\n        uint256 amount,\\n        uint8 liqTokenIndex,\\n        uint256 liqMinAmount,\\n        uint256 liqDeadline\\n    ) external {\\n        token.safeTransferFrom(msg.sender, address(this), amount);\\n        if (token.allowance(address(this), address(synapseBridge)) < amount) {\\n            token.safeApprove(address(synapseBridge), MAX_UINT256);\\n        }\\n        synapseBridge.redeemAndRemove(\\n            to,\\n            chainId,\\n            token,\\n            amount,\\n            liqTokenIndex,\\n            liqMinAmount,\\n            liqDeadline\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x251725e9caa7936ae9b4792131af8b34fb891d974ecedf98ff37f99514038bcc\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "calculateSwap(address,uint8,uint8,uint256)": {
        "params": {
          "dx": "the amount of tokens the user wants to sell. If the token charges a fee on transfers, use the amount that gets transferred after the fee.",
          "tokenIndexFrom": "the token the user wants to sell",
          "tokenIndexTo": "the token the user wants to buy"
        },
        "returns": {
          "_0": "amount of tokens the user will receive"
        }
      },
      "deposit(address,uint256,address,uint256)": {
        "params": {
          "amount": "Amount in native token decimals to transfer cross-chain pre-fees*",
          "chainId": "which underlying chain to bridge assets onto",
          "to": "address on other chain to redeem underlying assets to",
          "token": "ERC20 compatible token to deposit into the bridge"
        }
      },
      "redeem(address,uint256,address,uint256)": {
        "params": {
          "amount": "Amount in native token decimals to transfer cross-chain pre-fees*",
          "chainId": "which underlying chain to bridge assets onto",
          "to": "address on other chain to redeem underlying assets to",
          "token": "ERC20 compatible token to deposit into the bridge"
        }
      },
      "redeemAndRemove(address,uint256,address,uint256,uint8,uint256,uint256)": {
        "params": {
          "amount": "Amount of (typically) LP token to pass to the nodes to attempt to removeLiquidity() with to redeem for the underlying assets of the LP token",
          "chainId": "which underlying chain to bridge assets onto",
          "liqDeadline": "Specificies the deadline that the nodes are allowed to try to redeem/swap the LP token*",
          "liqMinAmount": "Specifies the minimum amount of the underlying asset needed for the nodes to execute the redeem/swap",
          "liqTokenIndex": "Specifies which of the underlying LP assets the nodes should attempt to redeem for",
          "to": "address on other chain to redeem underlying assets to",
          "token": "ERC20 compatible token to deposit into the bridge"
        }
      },
      "redeemAndSwap(address,uint256,address,uint256,uint8,uint8,uint256,uint256)": {
        "params": {
          "amount": "Amount in native token decimals to transfer cross-chain pre-fees",
          "chainId": "which underlying chain to bridge assets onto",
          "deadline": "latest timestamp to accept this transaction*",
          "minDy": "the min amount the user would like to receive, or revert to only minting the SynERC20 token crosschain.",
          "to": "address on other chain to redeem underlying assets to",
          "token": "ERC20 compatible token to deposit into the bridge",
          "tokenIndexFrom": "the token the user wants to swap from",
          "tokenIndexTo": "the token the user wants to swap to"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "calculateSwap(address,uint8,uint8,uint256)": {
        "notice": "Calculate amount of tokens you receive on swap"
      },
      "deposit(address,uint256,address,uint256)": {
        "notice": "wraps SynapseBridge redeem()"
      },
      "redeem(address,uint256,address,uint256)": {
        "notice": "wraps SynapseBridge redeem()"
      },
      "redeemAndRemove(address,uint256,address,uint256,uint8,uint256,uint256)": {
        "notice": "Wraps redeemAndRemove on SynapseBridge Relays to nodes that (typically) a wrapped synAsset ERC20 token has been burned and the underlying needs to be redeeemed on the native chain. This function indicates to the nodes that they should attempt to redeem the LP token for the underlying assets (E.g \"swap\" out of the LP token)"
      },
      "redeemAndSwap(address,uint256,address,uint256,uint8,uint8,uint256,uint256)": {
        "notice": "Wraps redeemAndSwap on SynapseBridge.sol Relays to nodes that (typically) a wrapped synAsset ERC20 token has been burned and the underlying needs to be redeeemed on the native chain. This function indicates to the nodes that they should attempt to redeem the LP token for the underlying assets (E.g \"swap\" out of the LP token)"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 22713,
        "contract": "contracts/bridge/wrappers/NerveMetaBridgeZap.sol:NerveMetaBridgeZap",
        "label": "synapseBridge",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ISynapseBridge)21194"
      },
      {
        "astId": 22719,
        "contract": "contracts/bridge/wrappers/NerveMetaBridgeZap.sol:NerveMetaBridgeZap",
        "label": "metaSwapMap",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 22724,
        "contract": "contracts/bridge/wrappers/NerveMetaBridgeZap.sol:NerveMetaBridgeZap",
        "label": "metaSwapTokensMap",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_array(t_contract(IERC20)4954)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(IERC20)4954)dyn_storage": {
        "base": "t_contract(IERC20)4954",
        "encoding": "dynamic_array",
        "label": "contract IERC20[]",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)4954": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(ISynapseBridge)21194": {
        "encoding": "inplace",
        "label": "contract ISynapseBridge",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_array(t_contract(IERC20)4954)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract IERC20[])",
        "numberOfBytes": "32",
        "value": "t_array(t_contract(IERC20)4954)dyn_storage"
      }
    }
  }
}