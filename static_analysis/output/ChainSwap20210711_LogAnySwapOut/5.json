{"Function call relationship": "ChainSwap20210711/AnyswapV4Router.AnyswapV4Router.anySwapOutUnderlyingWithTransferPermit->ChainSwap20210711/AnyswapV4Router.AnyswapV4Router._anySwapOut", "code": ["function anySwapOutUnderlyingWithTransferPermit(\n        address from,\n        address token,\n        address to,\n        uint amount,\n        uint deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s,\n        uint toChainID\n    ) external {\n        IERC20(AnyswapV1ERC20(token).underlying()).transferWithPermit(from, token, amount, deadline, v, r, s);\n        AnyswapV1ERC20(token).depositVault(amount, from);\n        _anySwapOut(from, token, to, amount, toChainID);\n    }", "function _anySwapOut(address from, address token, address to, uint amount, uint toChainID) internal {\n        AnyswapV1ERC20(token).burn(from, amount);\n        emit LogAnySwapOut(token, from, to, amount, cID(), toChainID);\n    }", "", "function _anySwapOut(address from, address token, address to, uint amount, uint toChainID) internal {\n        AnyswapV1ERC20(token).burn(from, amount);\n        emit LogAnySwapOut(token, from, to, amount, cID(), toChainID);\n    }", "function cID() public view returns (uint id) {\n        assembly {id := chainid()}\n    }", "function cID() public view returns (uint id) {\n        assembly {id := chainid()}\n    }"]}