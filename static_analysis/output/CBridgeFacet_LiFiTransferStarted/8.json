{"Function call relationship": "CBridgeFacet/src/Facets/WormholeFacet.WormholeFacet.swapAndStartBridgeTokensViaWormhole", "code": ["function swapAndStartBridgeTokensViaWormhole(\n        LiFiData memory _lifiData,\n        LibSwap.SwapData[] calldata _swapData,\n        WormholeData memory _wormholeData\n    ) public payable {\n        uint256 _fromTokenBalance = LibAsset.getOwnBalance(_wormholeData.token);\n\n        // Swap\n        for (uint8 i; i < _swapData.length; i++) {\n            LibSwap.swap(_lifiData.transactionId, _swapData[i]);\n        }\n\n        require(\n            LibAsset.getOwnBalance(_wormholeData.token) - _fromTokenBalance >= _wormholeData.amount,\n            \"ERR_INVALID_AMOUNT\"\n        );\n\n        uint256 _postSwapBalance = LibAsset.getOwnBalance(_wormholeData.token) - _fromTokenBalance;\n\n        require(_postSwapBalance > 0, \"ERR_INVALID_AMOUNT\");\n\n        _wormholeData.amount = _postSwapBalance;\n\n        _startBridge(_wormholeData);\n\n        emit LiFiTransferStarted(\n            _lifiData.transactionId,\n            _lifiData.integrator,\n            _lifiData.referrer,\n            _lifiData.sendingAssetId,\n            _lifiData.receivingAssetId,\n            _lifiData.receiver,\n            _lifiData.amount,\n            _lifiData.destinationChainId,\n            block.timestamp\n        );\n    }", "function _startBridge(WormholeData memory _wormholeData) internal {\n        Storage storage s = getStorage();\n\n        // Check chain id\n        require(block.chainid != _wormholeData.toChainId, \"Cannot bridge to the same network.\");\n\n        // Give Anyswap approval to bridge tokens\n        LibAsset.approveERC20(IERC20(_wormholeData.token), s.wormholeRouter, _wormholeData.amount);\n\n        IWormholeRouter(s.wormholeRouter).transferTokens(\n            _wormholeData.token,\n            _wormholeData.amount,\n            _wormholeData.toChainId,\n            bytes32(uint256(uint160(_wormholeData.recipient))),\n            0,\n            _wormholeData.nonce\n        );\n    }", "function getStorage() internal pure returns (Storage storage s) {\n        bytes32 namespace = NAMESPACE;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            s.slot := namespace\n        }\n    }"]}