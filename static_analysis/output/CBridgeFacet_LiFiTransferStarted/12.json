{"Function call relationship": "CBridgeFacet/src/Facets/BiconomyFacet.BiconomyFacet.swapAndStartBridgeTokensViaBiconomy", "code": ["function swapAndStartBridgeTokensViaBiconomy(\n        LiFiData memory _lifiData,\n        LibSwap.SwapData[] calldata _swapData,\n        BiconomyData memory _biconomyData\n    ) public payable {\n        if (_biconomyData.token != address(0)) {\n            uint256 _fromTokenBalance = LibAsset.getOwnBalance(_biconomyData.token);\n\n            // Swap\n            for (uint8 i; i < _swapData.length; i++) {\n                LibSwap.swap(_lifiData.transactionId, _swapData[i]);\n            }\n\n            uint256 _postSwapBalance = LibAsset.getOwnBalance(_biconomyData.token) - _fromTokenBalance;\n\n            require(_postSwapBalance > 0, \"ERR_INVALID_AMOUNT\");\n\n            _biconomyData.amount = _postSwapBalance;\n        } else {\n            uint256 _fromBalance = address(this).balance;\n\n            // Swap\n            for (uint8 i; i < _swapData.length; i++) {\n                LibSwap.swap(_lifiData.transactionId, _swapData[i]);\n            }\n\n            uint256 _postSwapBalance = address(this).balance - _fromBalance;\n\n            require(_postSwapBalance > 0, \"ERR_INVALID_AMOUNT\");\n\n            _biconomyData.amount = _postSwapBalance;\n        }\n        _startBridge(_biconomyData);\n\n        emit LiFiTransferStarted(\n            _lifiData.transactionId,\n            _lifiData.integrator,\n            _lifiData.referrer,\n            _lifiData.sendingAssetId,\n            _lifiData.receivingAssetId,\n            _lifiData.receiver,\n            _lifiData.amount,\n            _lifiData.destinationChainId,\n            block.timestamp\n        );\n    }", "function _startBridge(BiconomyData memory _biconomyData) internal {\n        Storage storage s = getStorage();\n\n        // Check chain id\n        require(block.chainid != _biconomyData.toChainId, \"Cannot bridge to the same network.\");\n\n        if (_biconomyData.token != address(0)) {\n            // Give Anyswap approval to bridge tokens\n            LibAsset.approveERC20(IERC20(_biconomyData.token), s.biconomyRouter, _biconomyData.amount);\n\n            IBiconomyRouter(s.biconomyRouter).depositErc20(\n                _biconomyData.token,\n                _biconomyData.recipient,\n                _biconomyData.amount,\n                _biconomyData.toChainId\n            );\n        } else {\n            IBiconomyRouter(s.biconomyRouter).depositNative{ value: _biconomyData.amount }(\n                _biconomyData.recipient,\n                _biconomyData.toChainId\n            );\n        }\n    }", "function getStorage() internal pure returns (Storage storage s) {\n        bytes32 namespace = NAMESPACE;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            s.slot := namespace\n        }\n    }"]}