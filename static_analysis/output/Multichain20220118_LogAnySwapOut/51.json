{"Function call relationship": "ERC20MessageGateway.SwapOut_and_call", "code": ["ERC20MessageGateway.SwapOut_and_call:function SwapOut_and_call(SwapOutArgs memory swapArgs, address callTo, bytes memory boundMessage) external payable returns (uint256 swapoutSeq) {\n        require(_swapout(swapArgs.amount, msg.sender));\n        swapoutSeq++;\n        bytes memory data = abi.encode(swapArgs, msg.sender, callTo, boundMessage, swapoutSeq);\n        _anyCall(peer[swapArgs.toChainID], data, address(0), swapArgs.toChainID);\n        emit LogAnySwapOut(swapArgs.amount, msg.sender, swapArgs.receiver, swapArgs.toChainID, swapoutSeq);\n        return swapoutSeq;\n    }", "ERC20MessageGateway._swapout:function _swapout(uint256 amount, address sender) internal virtual returns (bool);\n    function _swapin(uint256 amount, address receiver) internal virtual returns (bool);\n\n    event LogAnySwapOut(uint256 amount, address sender, address receiver, uint256 toChainID, uint256 swapoutSeq);\n\n    function setDecimals(uint256[] memory chainIDs, uint8[] memory decimals_) external onlyAdmin {\n        for (uint i = 0; i < chainIDs.length; i++) {\n            decimals[chainIDs[i]] = decimals_[i];\n        }\n    }"]}