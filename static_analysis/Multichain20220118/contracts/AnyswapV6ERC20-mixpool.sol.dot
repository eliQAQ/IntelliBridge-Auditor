digraph G {
  graph [ ratio = "auto", page = "100", compound =true ];
subgraph "clusterIERC20" {
  graph [ label = "IERC20  (iface)", color = "lightgray", style = "filled", bgcolor = "lightgray" ];
  "IERC20.totalSupply" [ label = "totalSupply", color = "blue" ];
  "IERC20.balanceOf" [ label = "balanceOf", color = "blue" ];
  "IERC20.transfer" [ label = "transfer", color = "blue" ];
  "IERC20.allowance" [ label = "allowance" ];
  "IERC20.approve" [ label = "approve", color = "blue" ];
  "IERC20.transferFrom" [ label = "transferFrom", color = "blue" ];
  "IERC20.functionCall" [ label = "functionCall" ];
}

subgraph "clusterAddress" {
  graph [ label = "Address  (lib)", color = "lightgray", style = "filled", bgcolor = "lightgray" ];
  "Address.isContract" [ label = "isContract" ];
  "Address.sendValue" [ label = "sendValue", color = "white" ];
  "Address.functionCall" [ label = "functionCall" ];
  "Address.functionCallWithValue" [ label = "functionCallWithValue" ];
  "Address.functionStaticCall" [ label = "functionStaticCall" ];
  "Address.functionDelegateCall" [ label = "functionDelegateCall" ];
  "Address.verifyCallResult" [ label = "verifyCallResult" ];
  "Address.address" [ label = "address" ];
}

subgraph "clusterSafeERC20" {
  graph [ label = "SafeERC20  (lib)", color = "lightgray", style = "filled", bgcolor = "lightgray" ];
  "SafeERC20.safeTransfer" [ label = "safeTransfer", color = "white" ];
  "SafeERC20.safeTransferFrom" [ label = "safeTransferFrom", color = "white" ];
  "SafeERC20.safeApprove" [ label = "safeApprove", color = "white" ];
  "SafeERC20.safeIncreaseAllowance" [ label = "safeIncreaseAllowance", color = "white" ];
  "SafeERC20.safeDecreaseAllowance" [ label = "safeDecreaseAllowance", color = "white" ];
  "SafeERC20._callOptionalReturn" [ label = "_callOptionalReturn" ];
  "SafeERC20.address" [ label = "address" ];
}

subgraph "clusterIAnyswapMixPool" {
  graph [ label = "IAnyswapMixPool  (iface)", color = "lightgray", style = "filled", bgcolor = "lightgray" ];
  "IAnyswapMixPool.tokenInfo" [ label = "tokenInfo", color = "blue" ];
  "IAnyswapMixPool.mint" [ label = "mint", color = "blue" ];
  "IAnyswapMixPool.burn" [ label = "burn", color = "blue" ];
  "IAnyswapMixPool.deposit" [ label = "deposit", color = "blue" ];
  "IAnyswapMixPool.withdraw" [ label = "withdraw", color = "blue" ];
  "IAnyswapMixPool.withdrawVault" [ label = "withdrawVault", color = "blue" ];
  "IAnyswapMixPool.balanceOf" [ label = "balanceOf", color = "blue" ];
}

subgraph "clusterTokenOperation" {
  graph [ label = "TokenOperation  (lib)", color = "lightgray", style = "filled", bgcolor = "lightgray" ];
  "TokenOperation.safeMint" [ label = "safeMint", color = "white" ];
  "TokenOperation.safeBurnFrom" [ label = "safeBurnFrom", color = "white" ];
  "TokenOperation._callOptionalReturn" [ label = "_callOptionalReturn" ];
}

subgraph "clusterAnyswapV6ERC20_MixPool" {
  graph [ label = "AnyswapV6ERC20_MixPool", color = "lightgray", style = "filled", bgcolor = "lightgray" ];
  "AnyswapV6ERC20_MixPool.onlyAuth" [ label = "onlyAuth", color = "yellow" ];
  "AnyswapV6ERC20_MixPool.onlyVault" [ label = "onlyVault", color = "yellow" ];
  "AnyswapV6ERC20_MixPool.onlyAuthToken" [ label = "onlyAuthToken", color = "yellow" ];
  "AnyswapV6ERC20_MixPool.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "AnyswapV6ERC20_MixPool.getAllMinters" [ label = "getAllMinters", color = "blue" ];
  "AnyswapV6ERC20_MixPool.initMinter" [ label = "initMinter", color = "blue" ];
  "AnyswapV6ERC20_MixPool.setMinter" [ label = "setMinter", color = "blue" ];
  "AnyswapV6ERC20_MixPool.applyMinter" [ label = "applyMinter", color = "blue" ];
  "AnyswapV6ERC20_MixPool.revokeMinter" [ label = "revokeMinter", color = "blue" ];
  "AnyswapV6ERC20_MixPool.changeVault" [ label = "changeVault", color = "blue" ];
  "AnyswapV6ERC20_MixPool.addAuthToken" [ label = "addAuthToken", color = "blue" ];
  "AnyswapV6ERC20_MixPool.removeAuthToken" [ label = "removeAuthToken", color = "blue" ];
  "AnyswapV6ERC20_MixPool.addAuthTokens" [ label = "addAuthTokens", color = "blue" ];
  "AnyswapV6ERC20_MixPool.removeAuthTokens" [ label = "removeAuthTokens", color = "blue" ];
  "AnyswapV6ERC20_MixPool.mint" [ label = "mint", color = "blue" ];
  "AnyswapV6ERC20_MixPool.burn" [ label = "burn", color = "blue" ];
  "AnyswapV6ERC20_MixPool.deposit" [ label = "deposit", color = "blue" ];
  "AnyswapV6ERC20_MixPool.withdraw" [ label = "withdraw", color = "blue" ];
  "AnyswapV6ERC20_MixPool.withdrawVault" [ label = "withdrawVault", color = "blue" ];
  "AnyswapV6ERC20_MixPool._mint" [ label = "_mint" ];
  "AnyswapV6ERC20_MixPool._burn" [ label = "_burn" ];
  "AnyswapV6ERC20_MixPool.address" [ label = "address" ];
}

subgraph "clustertarget" {
  graph [ label = "target", color = "lightgray" ];
  "target.staticcall" [ label = "staticcall" ];
  "target.delegatecall" [ label = "delegatecall" ];
}

subgraph "clustertoken" {
  graph [ label = "token", color = "lightgray" ];
  "token.functionCall" [ label = "functionCall" ];
}

  "Address.sendValue";
  "Address.address";
  "Address.functionCall";
  "Address.functionCallWithValue";
  "Address.isContract";
  "Address.verifyCallResult";
  "Address.functionStaticCall";
  "target.staticcall";
  "Address.functionDelegateCall";
  "target.delegatecall";
  "SafeERC20.safeTransfer";
  "SafeERC20._callOptionalReturn";
  "SafeERC20.safeTransferFrom";
  "SafeERC20.safeApprove";
  "IERC20.allowance";
  "SafeERC20.address";
  "SafeERC20.safeIncreaseAllowance";
  "SafeERC20.safeDecreaseAllowance";
  "IERC20.functionCall";
  "TokenOperation.safeMint";
  "TokenOperation._callOptionalReturn";
  "TokenOperation.safeBurnFrom";
  "token.functionCall";
  "AnyswapV6ERC20_MixPool.setMinter";
  "AnyswapV6ERC20_MixPool.address";
  "AnyswapV6ERC20_MixPool.applyMinter";
  "AnyswapV6ERC20_MixPool.changeVault";
  "AnyswapV6ERC20_MixPool.mint";
  "AnyswapV6ERC20_MixPool._mint";
  "AnyswapV6ERC20_MixPool.burn";
  "AnyswapV6ERC20_MixPool._burn";
  "AnyswapV6ERC20_MixPool.deposit";
  "AnyswapV6ERC20_MixPool.withdraw";
  "AnyswapV6ERC20_MixPool.withdrawVault";
  "Address.sendValue" -> "Address.address" [ color = "green" ];
  "Address.functionCall" -> "Address.functionCall" [ color = "green" ];
  "Address.functionCall" -> "Address.functionCallWithValue" [ color = "green" ];
  "Address.functionCallWithValue" -> "Address.functionCallWithValue" [ color = "green" ];
  "Address.functionCallWithValue" -> "Address.address" [ color = "green" ];
  "Address.functionCallWithValue" -> "Address.isContract" [ color = "green" ];
  "Address.functionCallWithValue" -> "Address.verifyCallResult" [ color = "green" ];
  "Address.functionStaticCall" -> "Address.functionStaticCall" [ color = "green" ];
  "Address.functionStaticCall" -> "Address.isContract" [ color = "green" ];
  "Address.functionStaticCall" -> "target.staticcall" [ color = "orange" ];
  "Address.functionStaticCall" -> "Address.verifyCallResult" [ color = "green" ];
  "Address.functionDelegateCall" -> "Address.functionDelegateCall" [ color = "green" ];
  "Address.functionDelegateCall" -> "Address.isContract" [ color = "green" ];
  "Address.functionDelegateCall" -> "target.delegatecall" [ color = "orange" ];
  "Address.functionDelegateCall" -> "Address.verifyCallResult" [ color = "green" ];
  "SafeERC20.safeTransfer" -> "SafeERC20._callOptionalReturn" [ color = "green" ];
  "SafeERC20.safeTransferFrom" -> "SafeERC20._callOptionalReturn" [ color = "green" ];
  "SafeERC20.safeApprove" -> "IERC20.allowance" [ color = "orange" ];
  "SafeERC20.safeApprove" -> "SafeERC20.address" [ color = "green" ];
  "SafeERC20.safeApprove" -> "SafeERC20._callOptionalReturn" [ color = "green" ];
  "SafeERC20.safeIncreaseAllowance" -> "IERC20.allowance" [ color = "orange" ];
  "SafeERC20.safeIncreaseAllowance" -> "SafeERC20.address" [ color = "green" ];
  "SafeERC20.safeIncreaseAllowance" -> "SafeERC20._callOptionalReturn" [ color = "green" ];
  "SafeERC20.safeDecreaseAllowance" -> "IERC20.allowance" [ color = "orange" ];
  "SafeERC20.safeDecreaseAllowance" -> "SafeERC20.address" [ color = "green" ];
  "SafeERC20.safeDecreaseAllowance" -> "SafeERC20._callOptionalReturn" [ color = "green" ];
  "SafeERC20._callOptionalReturn" -> "IERC20.functionCall" [ color = "orange" ];
  "SafeERC20._callOptionalReturn" -> "SafeERC20.address" [ color = "green" ];
  "TokenOperation.safeMint" -> "TokenOperation._callOptionalReturn" [ color = "green" ];
  "TokenOperation.safeBurnFrom" -> "TokenOperation._callOptionalReturn" [ color = "green" ];
  "TokenOperation._callOptionalReturn" -> "token.functionCall" [ color = "orange" ];
  "AnyswapV6ERC20_MixPool.setMinter" -> "AnyswapV6ERC20_MixPool.address" [ color = "green" ];
  "AnyswapV6ERC20_MixPool.applyMinter" -> "AnyswapV6ERC20_MixPool.address" [ color = "green" ];
  "AnyswapV6ERC20_MixPool.applyMinter" -> "AnyswapV6ERC20_MixPool.address" [ color = "green" ];
  "AnyswapV6ERC20_MixPool.changeVault" -> "AnyswapV6ERC20_MixPool.address" [ color = "green" ];
  "AnyswapV6ERC20_MixPool.mint" -> "AnyswapV6ERC20_MixPool._mint" [ color = "green" ];
  "AnyswapV6ERC20_MixPool.burn" -> "AnyswapV6ERC20_MixPool._burn" [ color = "green" ];
  "AnyswapV6ERC20_MixPool.deposit" -> "AnyswapV6ERC20_MixPool.address" [ color = "green" ];
  "AnyswapV6ERC20_MixPool.deposit" -> "AnyswapV6ERC20_MixPool._mint" [ color = "green" ];
  "AnyswapV6ERC20_MixPool.withdraw" -> "AnyswapV6ERC20_MixPool._burn" [ color = "green" ];
  "AnyswapV6ERC20_MixPool.withdrawVault" -> "AnyswapV6ERC20_MixPool.address" [ color = "green" ];
  "AnyswapV6ERC20_MixPool._mint" -> "AnyswapV6ERC20_MixPool.address" [ color = "green" ];
  "AnyswapV6ERC20_MixPool._mint" -> "AnyswapV6ERC20_MixPool.address" [ color = "green" ];
  "AnyswapV6ERC20_MixPool._mint" -> "TokenOperation.safeMint" [ color = "orange" ];
  "AnyswapV6ERC20_MixPool._mint" -> "AnyswapV6ERC20_MixPool.address" [ color = "green" ];
  "AnyswapV6ERC20_MixPool._burn" -> "AnyswapV6ERC20_MixPool.address" [ color = "green" ];
  "AnyswapV6ERC20_MixPool._burn" -> "AnyswapV6ERC20_MixPool.address" [ color = "green" ];
  "AnyswapV6ERC20_MixPool._burn" -> "TokenOperation.safeBurnFrom" [ color = "orange" ];
  "AnyswapV6ERC20_MixPool._burn" -> "AnyswapV6ERC20_MixPool.address" [ color = "green" ];


rankdir=LR
node [shape=plaintext]
subgraph cluster_01 { 
label = "Legend";
key [label=<<table border="0" cellpadding="2" cellspacing="0" cellborder="0">
  <tr><td align="right" port="i1">Internal Call</td></tr>
  <tr><td align="right" port="i2">External Call</td></tr>
  <tr><td align="right" port="i2">Custom Error Call</td></tr>
  <tr><td align="right" port="i3">Defined Contract</td></tr>
  <tr><td align="right" port="i4">Undefined Contract</td></tr>
  </table>>]
key2 [label=<<table border="0" cellpadding="2" cellspacing="0" cellborder="0">
  <tr><td port="i1">&nbsp;&nbsp;&nbsp;</td></tr>
  <tr><td port="i2">&nbsp;&nbsp;&nbsp;</td></tr>
  <tr><td port="i3" bgcolor="lightgray">&nbsp;&nbsp;&nbsp;</td></tr>
  <tr><td port="i4">
    <table border="1" cellborder="0" cellspacing="0" cellpadding="7" color="lightgray">
      <tr>
       <td></td>
      </tr>
     </table>
  </td></tr>
  </table>>]
key:i1:e -> key2:i1:w [color="green"]
key:i2:e -> key2:i2:w [color="orange"]
key:i2:e -> key2:i2:w [color="red"]
}
}

