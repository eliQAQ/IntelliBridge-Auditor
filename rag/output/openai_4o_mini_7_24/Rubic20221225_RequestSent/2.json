{"Function call relationship": "RubicProxy.routerCallNative", "code": ["RubicProxy.routerCallNative:function routerCallNative(BaseCrossChainParams calldata _params, bytes calldata _data)\n        external\n        payable\n        nonReentrant\n        whenNotPaused\n    {\n        if (!availableRouters.contains(_params.router)) {\n            revert RouterNotAvailable();\n        }\n\n        IntegratorFeeInfo memory _info = integratorToFeeInfo[_params.integrator];\n\n        uint256 _amountIn = accrueTokenFees(\n            _params.integrator,\n            _info,\n            accrueFixedCryptoFee(_params.integrator, _info),\n            0,\n            address(0)\n        );\n\n        AddressUpgradeable.functionCallWithValue(_params.router, _data, _amountIn);\n        emit RequestSent(_params);\n    }", "AddressUpgradeable.functionCallWithValue:function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }", "AddressUpgradeable.isContract:function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }", "AddressUpgradeable.verifyCallResult:function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }"]}