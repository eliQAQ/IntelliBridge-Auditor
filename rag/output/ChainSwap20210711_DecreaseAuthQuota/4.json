{"Function call relationship": "MappingBase.decreaseAuthQuotas->MappingBase.decreaseAuthQuota->MappingBase._decreaseAuthQuota", "code": ["MappingBase.decreaseAuthQuotas:function decreaseAuthQuotas(address[] memory signatories, uint[] memory decrements) virtual external returns (uint[] memory quotas) {\n        require(signatories.length == decrements.length, 'two array lenth not equal');\n        quotas = new uint[](signatories.length);\n        for(uint i=0; i<signatories.length; i++)\n            quotas[i] = decreaseAuthQuota(signatories[i], decrements[i]);\n    }", "MappingBase.decreaseAuthQuota:function decreaseAuthQuota(address signatory, uint decrement) virtual public onlyFactory returns (uint quota) {\n        quota = authQuotaOf(signatory);\n        if(quota < decrement)\n            decrement = quota;\n        return _decreaseAuthQuota(signatory, decrement);\n    }", "MappingBase._decreaseAuthQuota:function _decreaseAuthQuota(address signatory, uint decrement) virtual internal updateAutoQuota(signatory) returns (uint quota) {\n        quota = _authQuotas[signatory].sub(decrement);\n        _authQuotas[signatory] = quota;\n        emit DecreaseAuthQuota(signatory, decrement, quota);\n    }", "MappingBase.authQuotaOf:function authQuotaOf(address signatory) virtual public view returns (uint quota) {\n        quota = _authQuotas[signatory];\n        uint ratio  = autoQuotaRatio  != 0 ? autoQuotaRatio  : Factory(factory).getConfig(_autoQuotaRatio_);\n        uint period = autoQuotaPeriod != 0 ? autoQuotaPeriod : Factory(factory).getConfig(_autoQuotaPeriod_);\n        if(ratio == 0 || period == 0 || period == uint(-1))\n            return quota;\n        uint quotaCap = cap().mul(ratio).div(1e18);\n        uint delta = quotaCap.mul(now.sub(lasttimeUpdateQuotaOf[signatory])).div(period);\n        return Math.max(quota, Math.min(quotaCap, quota.add(delta)));\n    }", "MappingBase.cap:function cap() public view virtual returns (uint);\n\n    function increaseAuthQuotas(address[] memory signatories, uint[] memory increments) virtual external returns (uint[] memory quotas) {\n        require(signatories.length == increments.length, 'two array lenth not equal');\n        quotas = new uint[](signatories.length);\n        for(uint i=0; i<signatories.length; i++)\n            quotas[i] = increaseAuthQuota(signatories[i], increments[i]);\n    }", "Math.max:function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }", "Math.min:function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }", "ERC20CappedUpgradeSafe.cap:function cap() virtual public view returns (uint256) {\n        return _cap;\n    }"]}