{"Function call relationship": "MainchainGatewayV3.unlockWithdrawal", "code": ["MainchainGatewayV3.unlockWithdrawal:function unlockWithdrawal(Transfer.Receipt calldata receipt) external onlyRole(WITHDRAWAL_UNLOCKER_ROLE) {\n    bytes32 _receiptHash = receipt.hash();\n    if (withdrawalHash[receipt.id] != receipt.hash()) {\n      revert ErrInvalidReceipt();\n    }\n    if (!withdrawalLocked[receipt.id]) {\n      revert ErrQueryForApprovedWithdrawal();\n    }\n    delete withdrawalLocked[receipt.id];\n    emit WithdrawalUnlocked(_receiptHash, receipt);\n\n    address token = receipt.mainchain.tokenAddr;\n    if (receipt.info.erc == TokenStandard.ERC20) {\n      TokenInfo memory feeInfo = receipt.info;\n      feeInfo.quantity = _computeFeePercentage(receipt.info.quantity, unlockFeePercentages[token]);\n      TokenInfo memory withdrawInfo = receipt.info;\n      withdrawInfo.quantity = receipt.info.quantity - feeInfo.quantity;\n\n      feeInfo.handleAssetOut(payable(msg.sender), token, wrappedNativeToken);\n      withdrawInfo.handleAssetOut(payable(receipt.mainchain.addr), token, wrappedNativeToken);\n    } else {\n      receipt.info.handleAssetOut(payable(receipt.mainchain.addr), token, wrappedNativeToken);\n    }\n\n    emit Withdrew(_receiptHash, receipt);\n  }"]}