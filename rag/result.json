{
    "LibSwap.swap": {
        "swap": {
            "state_variables": {},
            "called_functions": [
                [
                    {
                        "visibility": "internal",
                        "content": "function maxApproveERC20( IERC20 assetId, address spender, uint256 amount ) internal{ if (isNativeAsset(address(assetId))){ return;} if (spender == NULL_ADDRESS){ revert NullAddrIsNotAValidSpender();} if (assetId.allowance(address(this), spender) < amount){ SafeERC20.safeApprove(IERC20(assetId), spender, 0); SafeERC20.safeApprove(IERC20(assetId), spender, MAX_UINT);}}",
                        "modifiers": [],
                        "parameters": [
                            {
                                "type": "IERC20",
                                "name": "assetId"
                            },
                            {
                                "type": "address",
                                "name": "spender"
                            },
                            {
                                "type": "uint256",
                                "name": "amount"
                            }
                        ],
                        "returns": [],
                        "reads": [
                            [
                                "NULL_ADDRESS",
                                "",
                                "LibAsset"
                            ]
                        ],
                        "writes": [],
                        "external_calls": {
                            "__set__": true,
                            "values": [
                                "LibAsset.IERC20",
                                "LibAsset.isNativeAsset",
                                "IERC20.allowance",
                                "SafeERC20.safeApprove",
                                "LibAsset.NullAddrIsNotAValidSpender"
                            ]
                        },
                        "is_payable": false,
                        "md5": "2763a92791c55d99853da524e26c2e6d"
                    }
                ],
                [
                    {
                        "visibility": "internal",
                        "content": "function isNativeAsset(address assetId) internal pure returns (bool){ return assetId == NATIVE_ASSETID;}",
                        "modifiers": [
                            "pure"
                        ],
                        "parameters": [
                            {
                                "type": "address",
                                "name": "assetId"
                            }
                        ],
                        "returns": [
                            {
                                "type": "bool",
                                "name": null
                            }
                        ],
                        "reads": [
                            [
                                "NATIVE_ASSETID",
                                "",
                                "LibAsset"
                            ]
                        ],
                        "writes": [],
                        "external_calls": [],
                        "is_payable": false,
                        "md5": "90f6c601dde5476497b7b77972e5160e"
                    }
                ],
                [
                    {
                        "visibility": "internal",
                        "content": "function getOwnBalance(address assetId) internal view returns (uint256){ return isNativeAsset(assetId) ? address(this).balance : IERC20(assetId).balanceOf(address(this));}",
                        "modifiers": [
                            "view"
                        ],
                        "parameters": [
                            {
                                "type": "address",
                                "name": "assetId"
                            }
                        ],
                        "returns": [
                            {
                                "type": "uint256",
                                "name": null
                            }
                        ],
                        "reads": [],
                        "writes": [],
                        "external_calls": {
                            "__set__": true,
                            "values": [
                                "LibAsset.IERC20",
                                "LibAsset.isNativeAsset"
                            ]
                        },
                        "is_payable": false,
                        "md5": "1b51ecb2290b6b3db4f241ddbeb65725"
                    }
                ],
                [
                    {
                        "visibility": "internal",
                        "content": "function revertWith(bytes memory data) internal pure{ assembly{ let dataSize := mload(data) let dataPtr := add(data, 0x20) revert(dataPtr, dataSize)}}",
                        "modifiers": [
                            "pure"
                        ],
                        "parameters": [
                            {
                                "type": "bytes memory",
                                "name": "data"
                            }
                        ],
                        "returns": [],
                        "reads": [],
                        "writes": [],
                        "external_calls": [],
                        "is_payable": false,
                        "md5": "d177dfe7eb3835c16af224d6f0b50345"
                    }
                ],
                [
                    {
                        "visibility": "internal",
                        "content": "function isContract(address _contractAddr) internal view returns (bool){ uint256 size; assembly{ size := extcodesize(_contractAddr)} return size > 0;}",
                        "modifiers": [
                            "view"
                        ],
                        "parameters": [
                            {
                                "type": "address",
                                "name": "_contractAddr"
                            }
                        ],
                        "returns": [
                            {
                                "type": "bool",
                                "name": null
                            }
                        ],
                        "reads": [],
                        "writes": [],
                        "external_calls": [],
                        "is_payable": false,
                        "md5": "bb78c763a9d80ce729c9d29604464b86"
                    }
                ]
            ],
            "md5": "c72e28a0b0bba4e62d9df514099bd3d5"
        },
        "isContract": {
            "state_variables": {},
            "called_functions": [],
            "md5": "d5972f1432570efe297b754cd2693d6f"
        },
        "isNativeAsset": {
            "state_variables": {
                "NATIVE_ASSETID": "address internal constant NATIVE_ASSETID = NULL_ADDRESS;"
            },
            "called_functions": [],
            "md5": "90f6c601dde5476497b7b77972e5160e"
        },
        "getOwnBalance": {
            "state_variables": {},
            "called_functions": [
                [
                    {
                        "visibility": "internal",
                        "content": "function isNativeAsset(address assetId) internal pure returns (bool){ return assetId == NATIVE_ASSETID;}",
                        "modifiers": [
                            "pure"
                        ],
                        "parameters": [
                            {
                                "type": "address",
                                "name": "assetId"
                            }
                        ],
                        "returns": [
                            {
                                "type": "bool",
                                "name": null
                            }
                        ],
                        "reads": [
                            [
                                "NATIVE_ASSETID",
                                "",
                                "LibAsset"
                            ]
                        ],
                        "writes": [],
                        "external_calls": [],
                        "is_payable": false,
                        "md5": "90f6c601dde5476497b7b77972e5160e"
                    }
                ]
            ],
            "md5": "1b51ecb2290b6b3db4f241ddbeb65725"
        },
        "maxApproveERC20": {
            "state_variables": {
                "NULL_ADDRESS": "address internal constant NULL_ADDRESS = address(0);"
            },
            "called_functions": [
                [
                    {
                        "visibility": "internal",
                        "content": "function isNativeAsset(address assetId) internal pure returns (bool){ return assetId == NATIVE_ASSETID;}",
                        "modifiers": [
                            "pure"
                        ],
                        "parameters": [
                            {
                                "type": "address",
                                "name": "assetId"
                            }
                        ],
                        "returns": [
                            {
                                "type": "bool",
                                "name": null
                            }
                        ],
                        "reads": [
                            [
                                "NATIVE_ASSETID",
                                "",
                                "LibAsset"
                            ]
                        ],
                        "writes": [],
                        "external_calls": [],
                        "is_payable": false,
                        "md5": "90f6c601dde5476497b7b77972e5160e"
                    }
                ],
                [
                    {
                        "visibility": "external",
                        "content": "function allowance(address owner, address spender) external view returns (uint256);",
                        "modifiers": [
                            "view"
                        ],
                        "parameters": [
                            {
                                "type": "address",
                                "name": "owner"
                            },
                            {
                                "type": "address",
                                "name": "spender"
                            }
                        ],
                        "returns": [
                            {
                                "type": "uint256",
                                "name": null
                            }
                        ],
                        "reads": [],
                        "writes": [],
                        "external_calls": [],
                        "is_payable": false,
                        "md5": "c93791d09d789aed33b9725d482af442"
                    }
                ],
                [
                    {
                        "visibility": "internal",
                        "content": "function safeApprove(IERC20 token, address spender, uint256 value) internal{ require( (value == 0) || (token.allowance(address(this), spender) == 0), \"SafeERC20: approve from non-zero to non-zero allowance\" ); _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));}",
                        "modifiers": [],
                        "parameters": [
                            {
                                "type": "IERC20",
                                "name": "token"
                            },
                            {
                                "type": "address",
                                "name": "spender"
                            },
                            {
                                "type": "uint256",
                                "name": "value"
                            }
                        ],
                        "returns": [],
                        "reads": [],
                        "writes": [],
                        "external_calls": {
                            "__set__": true,
                            "values": [
                                "IERC20.allowance",
                                "SafeERC20._callOptionalReturn"
                            ]
                        },
                        "is_payable": false,
                        "md5": "ab540675767ea7e50c2697d6cc9c103d"
                    }
                ]
            ],
            "md5": "2763a92791c55d99853da524e26c2e6d"
        },
        "revertWith": {
            "state_variables": {},
            "called_functions": [],
            "md5": "d177dfe7eb3835c16af224d6f0b50345"
        },
        "safeApprove": {
            "state_variables": {},
            "called_functions": [
                [
                    {
                        "visibility": "external",
                        "content": "function allowance(address owner, address spender) external view returns (uint256);",
                        "modifiers": [
                            "view"
                        ],
                        "parameters": [
                            {
                                "type": "address",
                                "name": "owner"
                            },
                            {
                                "type": "address",
                                "name": "spender"
                            }
                        ],
                        "returns": [
                            {
                                "type": "uint256",
                                "name": null
                            }
                        ],
                        "reads": [],
                        "writes": [],
                        "external_calls": [],
                        "is_payable": false,
                        "md5": "c93791d09d789aed33b9725d482af442"
                    }
                ],
                [
                    {
                        "visibility": "private",
                        "content": "function _callOptionalReturn(IERC20 token, bytes memory data) private{ bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\"); require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");}",
                        "modifiers": [],
                        "parameters": [
                            {
                                "type": "IERC20",
                                "name": "token"
                            },
                            {
                                "type": "bytes memory",
                                "name": "data"
                            }
                        ],
                        "returns": [],
                        "reads": [],
                        "writes": [],
                        "external_calls": {
                            "__set__": true,
                            "values": [
                                "IERC20.functionCall"
                            ]
                        },
                        "is_payable": false,
                        "md5": "bdd34585f40e945e74a5da840da04af7"
                    }
                ]
            ],
            "md5": "ab540675767ea7e50c2697d6cc9c103d"
        },
        "_callOptionalReturn": {
            "state_variables": {},
            "called_functions": [
                [
                    {
                        "visibility": "internal",
                        "content": "function functionCall(address target, bytes memory data) internal returns (bytes memory){ return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");}",
                        "modifiers": [],
                        "parameters": [
                            {
                                "type": "address",
                                "name": "target"
                            },
                            {
                                "type": "bytes memory",
                                "name": "data"
                            }
                        ],
                        "returns": [
                            {
                                "type": "bytes memory",
                                "name": null
                            }
                        ],
                        "reads": [],
                        "writes": [],
                        "external_calls": {
                            "__set__": true,
                            "values": [
                                "Address.functionCallWithValue"
                            ]
                        },
                        "is_payable": false,
                        "md5": "270e14dfa6c4d340344714fd6a36fd00"
                    },
                    {
                        "visibility": "internal",
                        "content": "function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory){ return functionCallWithValue(target, data, 0, errorMessage);}",
                        "modifiers": [],
                        "parameters": [
                            {
                                "type": "address",
                                "name": "target"
                            },
                            {
                                "type": "bytes memory",
                                "name": "data"
                            },
                            {
                                "type": "string memory",
                                "name": "errorMessage"
                            }
                        ],
                        "returns": [
                            {
                                "type": "bytes memory",
                                "name": null
                            }
                        ],
                        "reads": [],
                        "writes": [],
                        "external_calls": {
                            "__set__": true,
                            "values": [
                                "Address.functionCallWithValue"
                            ]
                        },
                        "is_payable": false,
                        "md5": "3deb235bd39105633ff4aa02a367005e"
                    }
                ]
            ],
            "md5": "bdd34585f40e945e74a5da840da04af7"
        },
        "functionCall": {
            "state_variables": {},
            "called_functions": [
                [
                    {
                        "visibility": "internal",
                        "content": "function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory){ return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");}",
                        "modifiers": [],
                        "parameters": [
                            {
                                "type": "address",
                                "name": "target"
                            },
                            {
                                "type": "bytes memory",
                                "name": "data"
                            },
                            {
                                "type": "uint256",
                                "name": "value"
                            }
                        ],
                        "returns": [
                            {
                                "type": "bytes memory",
                                "name": null
                            }
                        ],
                        "reads": [],
                        "writes": [],
                        "external_calls": {
                            "__set__": true,
                            "values": [
                                "Address.functionCallWithValue",
                                "Address.verifyCallResultFromTarget"
                            ]
                        },
                        "is_payable": false,
                        "md5": "9587564662cef65eec554844bed6f202"
                    },
                    {
                        "visibility": "internal",
                        "content": "function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory){ require(address(this).balance >= value, \"Address: insufficient balance for call\"); (bool success, bytes memory returndata) = target.call{ value: value} (data); return verifyCallResultFromTarget(target, success, returndata, errorMessage);}",
                        "modifiers": [],
                        "parameters": [
                            {
                                "type": "address",
                                "name": "target"
                            },
                            {
                                "type": "bytes memory",
                                "name": "data"
                            },
                            {
                                "type": "uint256",
                                "name": "value"
                            },
                            {
                                "type": "string memory",
                                "name": "errorMessage"
                            }
                        ],
                        "returns": [
                            {
                                "type": "bytes memory",
                                "name": null
                            }
                        ],
                        "reads": [],
                        "writes": [],
                        "external_calls": {
                            "__set__": true,
                            "values": [
                                "Address.functionCallWithValue",
                                "Address.verifyCallResultFromTarget"
                            ]
                        },
                        "is_payable": false,
                        "md5": "415fb10c2d7ae7d060a260635249aa7d"
                    }
                ]
            ],
            "md5": "270e14dfa6c4d340344714fd6a36fd00"
        },
        "functionCallWithValue": {
            "state_variables": {},
            "called_functions": [
                [
                    {
                        "visibility": "internal",
                        "content": "function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory){ return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");}",
                        "modifiers": [],
                        "parameters": [
                            {
                                "type": "address",
                                "name": "target"
                            },
                            {
                                "type": "bytes memory",
                                "name": "data"
                            },
                            {
                                "type": "uint256",
                                "name": "value"
                            }
                        ],
                        "returns": [
                            {
                                "type": "bytes memory",
                                "name": null
                            }
                        ],
                        "reads": [],
                        "writes": [],
                        "external_calls": {
                            "__set__": true,
                            "values": [
                                "Address.functionCallWithValue",
                                "Address.verifyCallResultFromTarget"
                            ]
                        },
                        "is_payable": false,
                        "md5": "9587564662cef65eec554844bed6f202"
                    },
                    {
                        "visibility": "internal",
                        "content": "function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory){ require(address(this).balance >= value, \"Address: insufficient balance for call\"); (bool success, bytes memory returndata) = target.call{ value: value} (data); return verifyCallResultFromTarget(target, success, returndata, errorMessage);}",
                        "modifiers": [],
                        "parameters": [
                            {
                                "type": "address",
                                "name": "target"
                            },
                            {
                                "type": "bytes memory",
                                "name": "data"
                            },
                            {
                                "type": "uint256",
                                "name": "value"
                            },
                            {
                                "type": "string memory",
                                "name": "errorMessage"
                            }
                        ],
                        "returns": [
                            {
                                "type": "bytes memory",
                                "name": null
                            }
                        ],
                        "reads": [],
                        "writes": [],
                        "external_calls": {
                            "__set__": true,
                            "values": [
                                "Address.functionCallWithValue",
                                "Address.verifyCallResultFromTarget"
                            ]
                        },
                        "is_payable": false,
                        "md5": "415fb10c2d7ae7d060a260635249aa7d"
                    }
                ],
                [
                    {
                        "visibility": "internal",
                        "content": "function verifyCallResultFromTarget( address target, bool success, bytes memory returndata, string memory errorMessage ) internal view returns (bytes memory){ if (success){ if (returndata.length == 0){ require(isContract(target), \"Address: call to non- contract \");} return returndata;} else{ _revert(returndata, errorMessage);}}",
                        "modifiers": [
                            "view"
                        ],
                        "parameters": [
                            {
                                "type": "address",
                                "name": "target"
                            },
                            {
                                "type": "bool",
                                "name": "success"
                            },
                            {
                                "type": "bytes memory",
                                "name": "returndata"
                            },
                            {
                                "type": "string memory",
                                "name": "errorMessage"
                            }
                        ],
                        "returns": [
                            {
                                "type": "bytes memory",
                                "name": null
                            }
                        ],
                        "reads": [],
                        "writes": [],
                        "external_calls": {
                            "__set__": true,
                            "values": [
                                "Address._revert",
                                "Address.isContract"
                            ]
                        },
                        "is_payable": false,
                        "md5": "970cb86012633b951e216a6e31e36148"
                    }
                ]
            ],
            "md5": "9587564662cef65eec554844bed6f202"
        },
        "_revert": {
            "state_variables": {},
            "called_functions": [],
            "md5": "8bb1093039f962e441f6f911e07a815f"
        }
    }
}