{
    "solidity_file": {
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\0x0aBCFbfA8e3Fda8B7FBA18721Caf7d5cf55cF5f5\\LtcSwapAsset.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\0x0aBCFbfA8e3Fda8B7FBA18721Caf7d5cf55cF5f5\\LtcSwapAsset.sol",
            "filename": "LtcSwapAsset.sol",
            "imported_contracts": {},
            "contracts": {
                "Context": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "internal",
                                "content": "constructor () internal{}",
                                "modifiers": [],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "2a23d0858cde090e7b199aa638ffd5dd"
                            }
                        ],
                        "_msgSender": [
                            {
                                "visibility": "internal",
                                "content": "function _msgSender() internal view returns (address payable){ return msg.sender;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address payable",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "a9b7db3c77abe3957815043d4f2458b9"
                            }
                        ],
                        "_msgData": [
                            {
                                "visibility": "internal",
                                "content": "function _msgData() internal view returns (bytes memory){ this; return msg.data;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "2b2ce6b0dd727ef0cc3f42de9b60e2df"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "IERC20": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "totalSupply": [
                            {
                                "visibility": "external",
                                "content": "function totalSupply() external view returns (uint256);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "5e1d12e61f4bf4b37161d9b684742570"
                            }
                        ],
                        "balanceOf": [
                            {
                                "visibility": "external",
                                "content": "function balanceOf(address account) external view returns (uint256);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "account"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "3ac17e7782366957c960d337a4a648cd"
                            }
                        ],
                        "transfer": [
                            {
                                "visibility": "external",
                                "content": "function transfer(address recipient, uint256 amount) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "recipient"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "98b540da9047ee99bce7fadde65d04b7"
                            }
                        ],
                        "allowance": [
                            {
                                "visibility": "external",
                                "content": "function allowance(address owner, address spender) external view returns (uint256);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "owner"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c93791d09d789aed33b9725d482af442"
                            }
                        ],
                        "approve": [
                            {
                                "visibility": "external",
                                "content": "function approve(address spender, uint256 amount) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "7c80d707df648dc123a10c69a1150edc"
                            }
                        ],
                        "transferFrom": [
                            {
                                "visibility": "external",
                                "content": "function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "sender"
                                    },
                                    {
                                        "type": "address",
                                        "name": "recipient"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c134d67e13a988b449de71dd226682ab"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {
                        "Transfer": {
                            "event": "Transfer",
                            "content": "Transfer(address indexed from, address indexed to, uint256 value)"
                        },
                        "Approval": {
                            "event": "Approval",
                            "content": "Approval(address indexed owner, address indexed spender, uint256 value)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": [
                        [
                            "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\0x0aBCFbfA8e3Fda8B7FBA18721Caf7d5cf55cF5f5\\LtcSwapAsset.sol",
                            "ERC20"
                        ],
                        [
                            "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\0x0aBCFbfA8e3Fda8B7FBA18721Caf7d5cf55cF5f5\\LtcSwapAsset.sol",
                            "ERC20Detailed"
                        ]
                    ]
                },
                "SafeMath": {
                    "type": {
                        "__CT__": true,
                        "value": 2
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "add": [
                            {
                                "visibility": "internal",
                                "content": "function add(uint256 a, uint256 b) internal pure returns (uint256){ uint256 c = a + b; require(c >= a, \"SafeMath: addition overflow\"); return c;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "a"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "b"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "b83a169007730f80a7fc79bee8748fff"
                            }
                        ],
                        "sub": [
                            {
                                "visibility": "internal",
                                "content": "function sub(uint256 a, uint256 b) internal pure returns (uint256){ return sub(a, b, \"SafeMath: subtraction overflow\");}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "a"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "b"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SafeMath.sub"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "972c2868144778b0617e55a6f97163a0"
                            },
                            {
                                "visibility": "internal",
                                "content": "function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256){ require(b <= a, errorMessage); uint256 c = a - b; return c;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "a"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "b"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "errorMessage"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SafeMath.sub"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "5005b7d925d95cb4c4c0f092235e9f5d"
                            }
                        ],
                        "mul": [
                            {
                                "visibility": "internal",
                                "content": "function mul(uint256 a, uint256 b) internal pure returns (uint256){ if (a == 0){ return 0;} uint256 c = a * b; require(c / a == b, \"SafeMath: multiplication overflow\"); return c;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "a"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "b"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "5622448ca508810ce734d0cb10517566"
                            }
                        ],
                        "div": [
                            {
                                "visibility": "internal",
                                "content": "function div(uint256 a, uint256 b) internal pure returns (uint256){ return div(a, b, \"SafeMath: division by zero\");}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "a"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "b"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SafeMath.div"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "371f945bc2211ac7c63e7277fb7222a7"
                            },
                            {
                                "visibility": "internal",
                                "content": "function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256){ require(b > 0, errorMessage); uint256 c = a / b; return c;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "a"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "b"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "errorMessage"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SafeMath.div"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "bff731811ec791ca1a5d6bc88d8d75a5"
                            }
                        ],
                        "mod": [
                            {
                                "visibility": "internal",
                                "content": "function mod(uint256 a, uint256 b) internal pure returns (uint256){ return mod(a, b, \"SafeMath: modulo by zero\");}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "a"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "b"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SafeMath.mod"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "50a3733021c21a71491ee85ffb90a2a4"
                            },
                            {
                                "visibility": "internal",
                                "content": "function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256){ require(b != 0, errorMessage); return a % b;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "a"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "b"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "errorMessage"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SafeMath.mod"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "8ec02abe488c084092f946ae1c4a8ccd"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "ERC20": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "Context",
                        "IERC20"
                    ],
                    "state_variables": {
                        "_balances": {
                            "type": "mapping (address => uint256)",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping (address => uint256) private _balances;"
                        },
                        "_allowances": {
                            "type": "mapping (address => mapping (address => uint256))",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping (address => mapping (address => uint256)) private _allowances;"
                        },
                        "_totalSupply": {
                            "type": "uint256",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256 private _totalSupply;"
                        }
                    },
                    "functions": {
                        "totalSupply": [
                            {
                                "visibility": "public",
                                "content": "function totalSupply() public view returns (uint256){ return _totalSupply;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_totalSupply",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "5e6ad72e6028056bb2255274ad077161"
                            }
                        ],
                        "balanceOf": [
                            {
                                "visibility": "public",
                                "content": "function balanceOf(address account) public view returns (uint256){ return _balances[account];}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "account"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_balances",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "ad4eae4ea23632ef2838d60fcaf49fde"
                            }
                        ],
                        "transfer": [
                            {
                                "visibility": "public",
                                "content": "function transfer(address recipient, uint256 amount) public returns (bool){ _transfer(_msgSender(), recipient, amount); return true;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "recipient"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20._msgSender",
                                        "ERC20._transfer"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "a2516d20ff5e2dfd4d99847fff76a3f2"
                            }
                        ],
                        "allowance": [
                            {
                                "visibility": "public",
                                "content": "function allowance(address owner, address spender) public view returns (uint256){ return _allowances[owner][spender];}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "owner"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_allowances",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "592bc064168755118c9f037687aa6211"
                            }
                        ],
                        "approve": [
                            {
                                "visibility": "public",
                                "content": "function approve(address spender, uint256 amount) public returns (bool){ _approve(_msgSender(), spender, amount); return true;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20._msgSender",
                                        "ERC20._approve"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "dde63135ec4b9e7ee1cc6eb25da3b8ba"
                            }
                        ],
                        "transferFrom": [
                            {
                                "visibility": "public",
                                "content": "function transferFrom(address sender, address recipient, uint256 amount) public returns (bool){ _transfer(sender, recipient, amount); _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\")); return true;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "sender"
                                    },
                                    {
                                        "type": "address",
                                        "name": "recipient"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_allowances",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20._msgSender",
                                        "ERC20._approve",
                                        "ERC20._transfer"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "3605d7f86a87c3d1b2a53d3f1493ae68"
                            }
                        ],
                        "increaseAllowance": [
                            {
                                "visibility": "public",
                                "content": "function increaseAllowance(address spender, uint256 addedValue) public returns (bool){ _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue)); return true;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "addedValue"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_allowances",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20._msgSender",
                                        "ERC20._approve"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "66af2c46d28cf0145304c631c700f803"
                            }
                        ],
                        "decreaseAllowance": [
                            {
                                "visibility": "public",
                                "content": "function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool){ _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\")); return true;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "subtractedValue"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_allowances",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20._msgSender",
                                        "ERC20._approve"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "9f3aa62efc251534839eaa0c93bba8b3"
                            }
                        ],
                        "_transfer": [
                            {
                                "visibility": "internal",
                                "content": "function _transfer(address sender, address recipient, uint256 amount) internal{ require(sender != address(0), \"ERC20: transfer from the zero address\"); require(recipient != address(0), \"ERC20: transfer to the zero address\"); _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\"); _balances[recipient] = _balances[recipient].add(amount); emit Transfer(sender, recipient, amount);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "sender"
                                    },
                                    {
                                        "type": "address",
                                        "name": "recipient"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_balances",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_balances",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "1ceaa1124f36ab43fd811f2d78d1431e"
                            }
                        ],
                        "_mint": [
                            {
                                "visibility": "internal",
                                "content": "function _mint(address account, uint256 amount) internal{ require(account != address(0), \"ERC20: mint to the zero address\"); _totalSupply = _totalSupply.add(amount); _balances[account] = _balances[account].add(amount); emit Transfer(address(0), account, amount);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "account"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_balances",
                                        "",
                                        "ERC20"
                                    ],
                                    [
                                        "_totalSupply",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_balances",
                                        "",
                                        "ERC20"
                                    ],
                                    [
                                        "_totalSupply",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "_totalSupply.add"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "1849059c445ce826b07aabafc80e1d59"
                            }
                        ],
                        "_burn": [
                            {
                                "visibility": "internal",
                                "content": "function _burn(address account, uint256 amount) internal{ require(account != address(0), \"ERC20: burn from the zero address\"); _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\"); _totalSupply = _totalSupply.sub(amount); emit Transfer(account, address(0), amount);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "account"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_balances",
                                        "",
                                        "ERC20"
                                    ],
                                    [
                                        "_totalSupply",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_balances",
                                        "",
                                        "ERC20"
                                    ],
                                    [
                                        "_totalSupply",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "_totalSupply.sub"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "dc244a93980fa244faa9d765efc9913a"
                            }
                        ],
                        "_approve": [
                            {
                                "visibility": "internal",
                                "content": "function _approve(address owner, address spender, uint256 amount) internal{ require(owner != address(0), \"ERC20: approve from the zero address\"); require(spender != address(0), \"ERC20: approve to the zero address\"); _allowances[owner][spender] = amount; emit Approval(owner, spender, amount);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "owner"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_allowances",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_allowances",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c73ffec8be8861a4433ee22a6bf25bb3"
                            }
                        ],
                        "_burnFrom": [
                            {
                                "visibility": "internal",
                                "content": "function _burnFrom(address account, uint256 amount) internal{ _burn(account, amount); _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "account"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_allowances",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20._burn",
                                        "ERC20._msgSender",
                                        "ERC20._approve"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "29791211cc2110eec5b89df326e8bbc1"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "uint256": "SafeMath"
                    }
                },
                "ERC20Detailed": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "IERC20"
                    ],
                    "state_variables": {
                        "_name": {
                            "type": "string",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "string private _name;"
                        },
                        "_symbol": {
                            "type": "string",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "string private _symbol;"
                        },
                        "_decimals": {
                            "type": "uint8",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint8 private _decimals;"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (string memory name, string memory symbol, uint8 decimals) public{ _name = name; _symbol = symbol; _decimals = decimals;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "string memory",
                                        "name": "name"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "symbol"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "decimals"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_name",
                                        "",
                                        "ERC20Detailed"
                                    ],
                                    [
                                        "_symbol",
                                        "",
                                        "ERC20Detailed"
                                    ],
                                    [
                                        "_decimals",
                                        "",
                                        "ERC20Detailed"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_name",
                                        "",
                                        "ERC20Detailed"
                                    ],
                                    [
                                        "_symbol",
                                        "",
                                        "ERC20Detailed"
                                    ],
                                    [
                                        "_decimals",
                                        "",
                                        "ERC20Detailed"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "d2404ecdfe6816aa8a876e47591b5030"
                            }
                        ],
                        "name": [
                            {
                                "visibility": "public",
                                "content": "function name() public view returns (string memory){ return _name;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "string memory",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_name",
                                        "",
                                        "ERC20Detailed"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "8572f20ecd43eb9f02a2efc81fdc4578"
                            }
                        ],
                        "symbol": [
                            {
                                "visibility": "public",
                                "content": "function symbol() public view returns (string memory){ return _symbol;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "string memory",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_symbol",
                                        "",
                                        "ERC20Detailed"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "b002d129ce65d0f4df01da6ede3b5e4d"
                            }
                        ],
                        "decimals": [
                            {
                                "visibility": "public",
                                "content": "function decimals() public view returns (uint8){ return _decimals;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint8",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_decimals",
                                        "",
                                        "ERC20Detailed"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c396c5ca1d21fa7e84c10681e8d59b07"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "LtcSwapAsset": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "ERC20",
                        "ERC20Detailed"
                    ],
                    "state_variables": {
                        "_oldOwner": {
                            "type": "address",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address private _oldOwner;"
                        },
                        "_newOwner": {
                            "type": "address",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address private _newOwner;"
                        },
                        "_newOwnerEffectiveHeight": {
                            "type": "uint256",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256 private _newOwnerEffectiveHeight;"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor () public ERC20Detailed(\"ANY Litecoin\", \"anyLTC\", 8){ _newOwner = msg.sender; _newOwnerEffectiveHeight = block.number;}",
                                "modifiers": [
                                    "ERC20Detailed(\"ANY Litecoin\", \"anyLTC\", 8)"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [
                                    [
                                        "_newOwner",
                                        "",
                                        "LtcSwapAsset"
                                    ],
                                    [
                                        "_newOwnerEffectiveHeight",
                                        "",
                                        "LtcSwapAsset"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_newOwner",
                                        "",
                                        "LtcSwapAsset"
                                    ],
                                    [
                                        "_newOwnerEffectiveHeight",
                                        "",
                                        "LtcSwapAsset"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "6667954d5b0ceb53aa66313d9278d1f3"
                            }
                        ],
                        "owner": [
                            {
                                "visibility": "public",
                                "content": "function owner() public view returns (address){ if (block.number >= _newOwnerEffectiveHeight){ return _newOwner;} return _oldOwner;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_oldOwner",
                                        "",
                                        "LtcSwapAsset"
                                    ],
                                    [
                                        "_newOwner",
                                        "",
                                        "LtcSwapAsset"
                                    ],
                                    [
                                        "_newOwnerEffectiveHeight",
                                        "",
                                        "LtcSwapAsset"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "a527dfd59a62d924ab665f02488faa88"
                            }
                        ],
                        "changeDCRMOwner": [
                            {
                                "visibility": "public",
                                "content": "function changeDCRMOwner(address newOwner) public onlyOwner returns (bool){ require(newOwner != address(0), \"new owner is the zero address\"); _oldOwner = owner(); _newOwner = newOwner; _newOwnerEffectiveHeight = block.number + 13300; emit LogChangeDCRMOwner(_oldOwner, _newOwner, _newOwnerEffectiveHeight); return true;}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "newOwner"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_oldOwner",
                                        "",
                                        "LtcSwapAsset"
                                    ],
                                    [
                                        "_newOwner",
                                        "",
                                        "LtcSwapAsset"
                                    ],
                                    [
                                        "_newOwnerEffectiveHeight",
                                        "",
                                        "LtcSwapAsset"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_oldOwner",
                                        "",
                                        "LtcSwapAsset"
                                    ],
                                    [
                                        "_newOwner",
                                        "",
                                        "LtcSwapAsset"
                                    ],
                                    [
                                        "_newOwnerEffectiveHeight",
                                        "",
                                        "LtcSwapAsset"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LtcSwapAsset.owner",
                                        "LtcSwapAsset.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "831f67aa1c7c6148dab1eaedd653735d"
                            }
                        ],
                        "Swapin": [
                            {
                                "visibility": "public",
                                "content": "function Swapin(bytes32 txhash, address account, uint256 amount) public onlyOwner returns (bool){ _mint(account, amount); emit LogSwapin(txhash, account, amount); return true;}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "txhash"
                                    },
                                    {
                                        "type": "address",
                                        "name": "account"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20._mint",
                                        "LtcSwapAsset.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "499c46eb22e35b6fbd2f4115b36069e0"
                            }
                        ],
                        "Swapout": [
                            {
                                "visibility": "public",
                                "content": "function Swapout(uint256 amount, string memory bindaddr) public returns (bool){ verifyBindAddr(bindaddr); _burn(_msgSender(), amount); emit LogSwapout(_msgSender(), amount, bindaddr); return true;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "bindaddr"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LtcSwapAsset.verifyBindAddr",
                                        "ERC20._burn",
                                        "ERC20._msgSender"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "c1a193c1b597bddd80450b0126f0c761"
                            }
                        ],
                        "verifyBindAddr": [
                            {
                                "visibility": "internal",
                                "content": "function verifyBindAddr(string memory bindaddr) pure internal{ uint length = bytes(bindaddr).length; require(length >= 26, \"address length is too short\"); byte ch = bytes(bindaddr)[0]; byte ch2 = bytes(bindaddr)[1]; byte ch3 = bytes(bindaddr)[2]; byte ch4 = bytes(bindaddr)[3]; if (ch == 'L' || ch == 'M'){ require(length <= 34, \"mainnet address length is too long\");} else if (ch4 == '1' && ch == 'l' && ch2 == 't' && ch3 == 'c'){ require(length == 43 || length == 63, \"segwit address length is not 43 or 63\");} else{ require(false, \"unsupported address leading symbol\");}}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "string memory",
                                        "name": "bindaddr"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "5455bdb1a1fb45d0fdf72b3c478c55b9"
                            }
                        ]
                    },
                    "modifiers": {
                        "onlyOwner": {
                            "parameters": [],
                            "content": "modifier onlyOwner(){ require(msg.sender == owner(), \"only owner\"); _;}",
                            "reads": [],
                            "writes": [],
                            "external_calls": {
                                "__set__": true,
                                "values": [
                                    "LtcSwapAsset.owner"
                                ]
                            },
                            "md5": "f066aa80ace803bcfe138e5919d5383e"
                        }
                    },
                    "structs": {},
                    "events": {
                        "LogChangeDCRMOwner": {
                            "event": "LogChangeDCRMOwner",
                            "content": "LogChangeDCRMOwner(address indexed oldOwner, address indexed newOwner, uint indexed effectiveHeight)"
                        },
                        "LogSwapin": {
                            "event": "LogSwapin",
                            "content": "LogSwapin(bytes32 indexed txhash, address indexed account, uint amount)"
                        },
                        "LogSwapout": {
                            "event": "LogSwapout",
                            "content": "LogSwapout(address indexed account, uint amount, string bindaddr)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "SafeMath.sub": "972c2868144778b0617e55a6f97163a0",
                "SafeMath.div": "371f945bc2211ac7c63e7277fb7222a7",
                "SafeMath.mod": "50a3733021c21a71491ee85ffb90a2a4",
                "ERC20._transfer": "1ceaa1124f36ab43fd811f2d78d1431e",
                "ERC20._approve": "c73ffec8be8861a4433ee22a6bf25bb3",
                "ERC20._burn": "dc244a93980fa244faa9d765efc9913a",
                "LtcSwapAsset.owner": "a527dfd59a62d924ab665f02488faa88",
                "LtcSwapAsset.onlyOwner": "f066aa80ace803bcfe138e5919d5383e",
                "ERC20._mint": "1849059c445ce826b07aabafc80e1d59",
                "LtcSwapAsset.verifyBindAddr": "5455bdb1a1fb45d0fdf72b3c478c55b9"
            },
            "md5": "11dcebaba172bdad9ff6b9988159cf21"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\0x1633D66Ca91cE4D81F63Ea047B7B19Beb92dF7f3\\MultichainV7Router.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\0x1633D66Ca91cE4D81F63Ea047B7B19Beb92dF7f3\\MultichainV7Router.sol",
            "filename": "MultichainV7Router.sol",
            "imported_contracts": {},
            "contracts": {
                "PausableControl": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": true,
                    "inherits": [],
                    "state_variables": {
                        "_pausedRoles": {
                            "type": "mapping(bytes32 => bool)",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(bytes32 => bool) private _pausedRoles;"
                        },
                        "PAUSE_ALL_ROLE": {
                            "type": "bytes32",
                            "visibility": "public",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "0x00",
                            "content": "bytes32 public constant PAUSE_ALL_ROLE = 0x00;"
                        }
                    },
                    "functions": {
                        "paused": [
                            {
                                "visibility": "public",
                                "content": "function paused(bytes32 role) public view virtual returns (bool){ return _pausedRoles[role];}",
                                "modifiers": [
                                    "view",
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "role"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_pausedRoles",
                                        "",
                                        "PausableControl"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "0ecac403439a515e3a8a26c1bec74897"
                            }
                        ],
                        "_pause": [
                            {
                                "visibility": "internal",
                                "content": "function _pause(bytes32 role) internal virtual whenNotPaused(role){ _pausedRoles[role] = true; emit Paused(role);}",
                                "modifiers": [
                                    "virtual",
                                    "whenNotPaused(role)"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "role"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_pausedRoles",
                                        "",
                                        "PausableControl"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_pausedRoles",
                                        "",
                                        "PausableControl"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "PausableControl.whenNotPaused"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "54eff54e404dc27377cb0136978266ee"
                            }
                        ],
                        "_unpause": [
                            {
                                "visibility": "internal",
                                "content": "function _unpause(bytes32 role) internal virtual whenPaused(role){ _pausedRoles[role] = false; emit Unpaused(role);}",
                                "modifiers": [
                                    "virtual",
                                    "whenPaused(role)"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "role"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_pausedRoles",
                                        "",
                                        "PausableControl"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_pausedRoles",
                                        "",
                                        "PausableControl"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "PausableControl.whenPaused"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "5b1ad46278c5fcdbf6e5a3565bd764c1"
                            }
                        ]
                    },
                    "modifiers": {
                        "whenNotPaused": {
                            "parameters": [
                                {
                                    "type": "bytes32",
                                    "name": "role"
                                }
                            ],
                            "content": "modifier whenNotPaused(bytes32 role){ require( !paused(role) && !paused(PAUSE_ALL_ROLE), \"PausableControl: paused\" ); _;}",
                            "reads": [
                                [
                                    "PAUSE_ALL_ROLE",
                                    "",
                                    "PausableControl"
                                ]
                            ],
                            "writes": [],
                            "external_calls": {
                                "__set__": true,
                                "values": [
                                    "PausableControl.paused"
                                ]
                            },
                            "md5": "d3ddd74038b197df64119e0f510fc99e"
                        },
                        "whenPaused": {
                            "parameters": [
                                {
                                    "type": "bytes32",
                                    "name": "role"
                                }
                            ],
                            "content": "modifier whenPaused(bytes32 role){ require( paused(role) || paused(PAUSE_ALL_ROLE), \"PausableControl: not paused\" ); _;}",
                            "reads": [
                                [
                                    "PAUSE_ALL_ROLE",
                                    "",
                                    "PausableControl"
                                ]
                            ],
                            "writes": [],
                            "external_calls": {
                                "__set__": true,
                                "values": [
                                    "PausableControl.paused"
                                ]
                            },
                            "md5": "2644e09d24ab360e264bafb92c05a7f4"
                        }
                    },
                    "structs": {},
                    "events": {
                        "Paused": {
                            "event": "Paused",
                            "content": "Paused(bytes32 role)"
                        },
                        "Unpaused": {
                            "event": "Unpaused",
                            "content": "Unpaused(bytes32 role)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "MPCManageable": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": true,
                    "inherits": [],
                    "state_variables": {
                        "mpc": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public mpc;"
                        },
                        "pendingMPC": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public pendingMPC;"
                        },
                        "delay": {
                            "type": "uint256",
                            "visibility": "public",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "2 days",
                            "content": "uint256 public constant delay = 2 days;"
                        },
                        "delayMPC": {
                            "type": "uint256",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256 public delayMPC;"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (address _mpc){ require(_mpc != address(0), \"MPC: mpc is the zero address\"); mpc = _mpc; emit LogChangeMPC(address(0), mpc, block.timestamp);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_mpc"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "mpc",
                                        "",
                                        "MPCManageable"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "mpc",
                                        "",
                                        "MPCManageable"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "2504dce0ebc067b01072fe87da093b50"
                            }
                        ],
                        "changeMPC": [
                            {
                                "visibility": "external",
                                "content": "function changeMPC(address _mpc) external onlyMPC{ require(_mpc != address(0), \"MPC: mpc is the zero address\"); pendingMPC = _mpc; delayMPC = block.timestamp + delay; emit LogChangeMPC(mpc, pendingMPC, delayMPC);}",
                                "modifiers": [
                                    "onlyMPC"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_mpc"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "mpc",
                                        "",
                                        "MPCManageable"
                                    ],
                                    [
                                        "pendingMPC",
                                        "",
                                        "MPCManageable"
                                    ],
                                    [
                                        "delay",
                                        "",
                                        "MPCManageable"
                                    ],
                                    [
                                        "delayMPC",
                                        "",
                                        "MPCManageable"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "pendingMPC",
                                        "",
                                        "MPCManageable"
                                    ],
                                    [
                                        "delayMPC",
                                        "",
                                        "MPCManageable"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "MPCManageable.onlyMPC"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "29536c1d432ff5a372d74a1d6c638681"
                            }
                        ],
                        "applyMPC": [
                            {
                                "visibility": "external",
                                "content": "function applyMPC() external{ require( msg.sender == pendingMPC || (msg.sender == mpc && address(pendingMPC).code.length > 0), \"MPC: only pending mpc\" ); require( delayMPC > 0 && block.timestamp >= delayMPC, \"MPC: time before delayMPC\" ); emit LogApplyMPC(mpc, pendingMPC, block.timestamp); mpc = pendingMPC; pendingMPC = address(0); delayMPC = 0;}",
                                "modifiers": [],
                                "parameters": [],
                                "returns": [],
                                "reads": [
                                    [
                                        "mpc",
                                        "",
                                        "MPCManageable"
                                    ],
                                    [
                                        "pendingMPC",
                                        "",
                                        "MPCManageable"
                                    ],
                                    [
                                        "delayMPC",
                                        "",
                                        "MPCManageable"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "mpc",
                                        "",
                                        "MPCManageable"
                                    ],
                                    [
                                        "pendingMPC",
                                        "",
                                        "MPCManageable"
                                    ],
                                    [
                                        "delayMPC",
                                        "",
                                        "MPCManageable"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "f6536aa57650899a6ce567b7d8684240"
                            }
                        ]
                    },
                    "modifiers": {
                        "onlyMPC": {
                            "parameters": [],
                            "content": "modifier onlyMPC(){ require(msg.sender == mpc, \"MPC: only mpc\"); _;}",
                            "reads": [
                                [
                                    "mpc",
                                    "",
                                    "MPCManageable"
                                ]
                            ],
                            "writes": [],
                            "external_calls": [],
                            "md5": "2c8cae55bb5a13f557a4d161cf1305a1"
                        }
                    },
                    "structs": {},
                    "events": {
                        "LogChangeMPC": {
                            "event": "LogChangeMPC",
                            "content": "LogChangeMPC( address indexed oldMPC, address indexed newMPC, uint256 effectiveTime )"
                        },
                        "LogApplyMPC": {
                            "event": "LogApplyMPC",
                            "content": "LogApplyMPC( address indexed oldMPC, address indexed newMPC, uint256 applyTime )"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "MPCAdminControl": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": true,
                    "inherits": [
                        "is",
                        "MPCManageable"
                    ],
                    "state_variables": {
                        "admin": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public admin;"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (address _admin, address _mpc) MPCManageable(_mpc){ admin = _admin; emit ChangeAdmin(address(0), _admin);}",
                                "modifiers": [
                                    "MPCManageable(_mpc)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_admin"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_mpc"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "admin",
                                        "",
                                        "MPCAdminControl"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "admin",
                                        "",
                                        "MPCAdminControl"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "1112cd0f5b5afca25907b98b1848b53f"
                            }
                        ],
                        "changeAdmin": [
                            {
                                "visibility": "external",
                                "content": "function changeAdmin(address _admin) external onlyMPC{ emit ChangeAdmin(admin, _admin); admin = _admin;}",
                                "modifiers": [
                                    "onlyMPC"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_admin"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "admin",
                                        "",
                                        "MPCAdminControl"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "admin",
                                        "",
                                        "MPCAdminControl"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "MPCManageable.onlyMPC"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "456b44663c78a54d92d235138ecff415"
                            }
                        ]
                    },
                    "modifiers": {
                        "onlyAdmin": {
                            "parameters": [],
                            "content": "modifier onlyAdmin(){ require(msg.sender == admin, \"MPCAdminControl: not admin\"); _;}",
                            "reads": [
                                [
                                    "admin",
                                    "",
                                    "MPCAdminControl"
                                ]
                            ],
                            "writes": [],
                            "external_calls": [],
                            "md5": "2dabbad494ce9779b3a3f5675c767435"
                        }
                    },
                    "structs": {},
                    "events": {
                        "ChangeAdmin": {
                            "event": "ChangeAdmin",
                            "content": "ChangeAdmin(address indexed _old, address indexed _new)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "MPCAdminPausableControl": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": true,
                    "inherits": [
                        "is",
                        "MPCAdminControl",
                        "PausableControl"
                    ],
                    "state_variables": {},
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (address _admin, address _mpc) MPCAdminControl(_admin, _mpc){}",
                                "modifiers": [
                                    "MPCAdminControl(_admin, _mpc)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_admin"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_mpc"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "0c150103c2968e43958f8b125dab141a"
                            }
                        ],
                        "pause": [
                            {
                                "visibility": "external",
                                "content": "function pause(bytes32 role) external onlyAdmin{ _pause(role);}",
                                "modifiers": [
                                    "onlyAdmin"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "role"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "MPCAdminPausableControl.onlyAdmin",
                                        "PausableControl._pause"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "e1e44471ec0ae2fe3398e80f8c88d617"
                            }
                        ],
                        "unpause": [
                            {
                                "visibility": "external",
                                "content": "function unpause(bytes32 role) external onlyAdmin{ _unpause(role);}",
                                "modifiers": [
                                    "onlyAdmin"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "role"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "PausableControl._unpause",
                                        "MPCAdminPausableControl.onlyAdmin"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "f713a5db56e77c078a7a44fde5ea15bd"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "IAnycallExecutor": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "execute": [
                            {
                                "visibility": "external",
                                "content": "function execute( address _anycallProxy, address _token, address _receiver, uint256 _amount, bytes calldata _data ) external returns (bool success, bytes memory result);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_anycallProxy"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_receiver"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_amount"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "_data"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": "success"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "result"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "cd97520cbf9238030a85b0444f1c7b75"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                },
                "IRouterSecurity": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "registerSwapin": [
                            {
                                "visibility": "external",
                                "content": "function registerSwapin(string calldata swapID, SwapInfo calldata swapInfo) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "string calldata",
                                        "name": "swapID"
                                    },
                                    {
                                        "type": "SwapInfo calldata",
                                        "name": "swapInfo"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "ffd0c79e850d3a05467768042386873e"
                            }
                        ],
                        "registerSwapout": [
                            {
                                "visibility": "external",
                                "content": "function registerSwapout( address token, address from, string calldata to, uint256 amount, uint256 toChainID, string calldata anycallProxy, bytes calldata data ) external returns (bytes32 swapoutID);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "string calldata",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "toChainID"
                                    },
                                    {
                                        "type": "string calldata",
                                        "name": "anycallProxy"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "data"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": "swapoutID"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "57fbdda220a6d16b47b03459075d49e9"
                            }
                        ],
                        "isSwapCompleted": [
                            {
                                "visibility": "external",
                                "content": "function isSwapCompleted( string calldata swapID, bytes32 swapoutID, uint256 fromChainID ) external view returns (bool);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "string calldata",
                                        "name": "swapID"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "swapoutID"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "fromChainID"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "d2e54a21e81c017c9c485d2984266bbe"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                },
                "IRetrySwapinAndExec": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "retrySwapinAndExec": [
                            {
                                "visibility": "external",
                                "content": "function retrySwapinAndExec( string calldata swapID, SwapInfo calldata swapInfo, address anycallProxy, bytes calldata data, bool dontExec ) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "string calldata",
                                        "name": "swapID"
                                    },
                                    {
                                        "type": "SwapInfo calldata",
                                        "name": "swapInfo"
                                    },
                                    {
                                        "type": "address",
                                        "name": "anycallProxy"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "data"
                                    },
                                    {
                                        "type": "bool",
                                        "name": "dontExec"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "d72b137c382f8450f88720356e3e964b"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": [
                        [
                            "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\0x1633D66Ca91cE4D81F63Ea047B7B19Beb92dF7f3\\MultichainV7Router.sol",
                            "MultichainV7Router"
                        ]
                    ]
                },
                "IUnderlying": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "underlying": [
                            {
                                "visibility": "external",
                                "content": "function underlying() external view returns (address);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "79a36cf7455e5210675c01a0880c01eb"
                            }
                        ],
                        "deposit": [
                            {
                                "visibility": "external",
                                "content": "function deposit(uint256 amount, address to) external returns (uint256);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "b7cb3cb2a80d6df8a074ac785e8b1ae1"
                            }
                        ],
                        "withdraw": [
                            {
                                "visibility": "external",
                                "content": "function withdraw(uint256 amount, address to) external returns (uint256);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "6f5238f8c2ef0bb9b0cd73a62302eb86"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                },
                "IAnyswapERC20Auth": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "changeVault": [
                            {
                                "visibility": "external",
                                "content": "function changeVault(address newVault) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "newVault"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "6bc2dba1a1fe83dd749a9b3e6aefb013"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                },
                "IwNATIVE": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "deposit": [
                            {
                                "visibility": "external",
                                "content": "function deposit() external payable;",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": true,
                                "md5": "4f2eec90abd519258d97a4283a54e2f1"
                            }
                        ],
                        "withdraw": [
                            {
                                "visibility": "external",
                                "content": "function withdraw(uint256) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "6bd9ac72f1e2a5cd7c2585770812e0db"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                },
                "IRouterMintBurn": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "mint": [
                            {
                                "visibility": "external",
                                "content": "function mint(address to, uint256 amount) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "54fcc18fc5af6f55053554dd926d02c5"
                            }
                        ],
                        "burn": [
                            {
                                "visibility": "external",
                                "content": "function burn(address from, uint256 amount) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "3b8d1a75aa40d4fec00a0d273d36f6da"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                },
                "ReentrancyGuard": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": true,
                    "inherits": [],
                    "state_variables": {
                        "_NOT_ENTERED": {
                            "type": "uint256",
                            "visibility": "private",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "1",
                            "content": "uint256 private constant _NOT_ENTERED = 1;"
                        },
                        "_ENTERED": {
                            "type": "uint256",
                            "visibility": "private",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "2",
                            "content": "uint256 private constant _ENTERED = 2;"
                        },
                        "_status": {
                            "type": "uint256",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256 private _status;"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (){ _status = _NOT_ENTERED;}",
                                "modifiers": [],
                                "parameters": [],
                                "returns": [],
                                "reads": [
                                    [
                                        "_NOT_ENTERED",
                                        "",
                                        "ReentrancyGuard"
                                    ],
                                    [
                                        "_status",
                                        "",
                                        "ReentrancyGuard"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_status",
                                        "",
                                        "ReentrancyGuard"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "f0c2d0fc5fabc184fd43dd9abb6f51d6"
                            }
                        ]
                    },
                    "modifiers": {
                        "nonReentrant": {
                            "parameters": [],
                            "content": "modifier nonReentrant(){ require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\"); _status = _ENTERED; _; _status = _NOT_ENTERED;}",
                            "reads": [
                                [
                                    "_NOT_ENTERED",
                                    "",
                                    "ReentrancyGuard"
                                ],
                                [
                                    "_ENTERED",
                                    "",
                                    "ReentrancyGuard"
                                ],
                                [
                                    "_status",
                                    "",
                                    "ReentrancyGuard"
                                ]
                            ],
                            "writes": [
                                [
                                    "_status",
                                    "",
                                    "ReentrancyGuard"
                                ]
                            ],
                            "external_calls": [],
                            "md5": "bfd26885a528af04ff7161b74f7a2107"
                        }
                    },
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "Address": {
                    "type": {
                        "__CT__": true,
                        "value": 2
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "isContract": [
                            {
                                "visibility": "internal",
                                "content": "function isContract(address account) internal view returns (bool){ return account.code.length > 0;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "account"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "d5972f1432570efe297b754cd2693d6f"
                            }
                        ],
                        "sendValue": [
                            {
                                "visibility": "internal",
                                "content": "function sendValue(address payable recipient, uint256 amount) internal{ require(address(this).balance >= amount, \"Address: insufficient balance\"); (bool success, ) = recipient.call{ value: amount} (\"\"); require(success, \"Address: unable to send value, recipient may have reverted\");}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address payable",
                                        "name": "recipient"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "4213f1701c2999f67f11de98a51e01f6"
                            }
                        ],
                        "functionCall": [
                            {
                                "visibility": "internal",
                                "content": "function functionCall(address target, bytes memory data) internal returns (bytes memory){ return functionCall(target, data, \"Address: low-level call failed\");}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "target"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "data"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Address.functionCall",
                                        "Address.functionCallWithValue"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "9bd9227b4301edafa41944a5a4cc096d"
                            },
                            {
                                "visibility": "internal",
                                "content": "function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory){ return functionCallWithValue(target, data, 0, errorMessage);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "target"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "data"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "errorMessage"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Address.functionCall",
                                        "Address.functionCallWithValue"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "3deb235bd39105633ff4aa02a367005e"
                            }
                        ],
                        "functionCallWithValue": [
                            {
                                "visibility": "internal",
                                "content": "function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory){ return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "target"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "data"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Address.functionCallWithValue",
                                        "Address.isContract",
                                        "Address.verifyCallResult"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "e318cf9d6fc0d1d8455ee479a7548ba2"
                            },
                            {
                                "visibility": "internal",
                                "content": "function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory){ require(address(this).balance >= value, \"Address: insufficient balance for call\"); require(isContract(target), \"Address: call to non- contract \"); (bool success, bytes memory returndata) = target.call{ value: value} (data); return verifyCallResult(success, returndata, errorMessage);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "target"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "data"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "errorMessage"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Address.functionCallWithValue",
                                        "Address.isContract",
                                        "Address.verifyCallResult"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "e5ef5c80e3f7edacb669876c8d0bdeda"
                            }
                        ],
                        "functionStaticCall": [
                            {
                                "visibility": "internal",
                                "content": "function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory){ return functionStaticCall(target, data, \"Address: low-level static call failed\");}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "target"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "data"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "target.staticcall",
                                        "Address.isContract",
                                        "Address.functionStaticCall",
                                        "Address.verifyCallResult"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "994685aae3cda8dbbf0ffec7f803d344"
                            },
                            {
                                "visibility": "internal",
                                "content": "function functionStaticCall( address target, bytes memory data, string memory errorMessage ) internal view returns (bytes memory){ require(isContract(target), \"Address: static call to non- contract \"); (bool success, bytes memory returndata) = target.staticcall(data); return verifyCallResult(success, returndata, errorMessage);}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "target"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "data"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "errorMessage"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "target.staticcall",
                                        "Address.isContract",
                                        "Address.functionStaticCall",
                                        "Address.verifyCallResult"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "ecc83687edc03f1dbae68952e8efe2c3"
                            }
                        ],
                        "functionDelegateCall": [
                            {
                                "visibility": "internal",
                                "content": "function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory){ return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "target"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "data"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Address.isContract",
                                        "target.delegatecall",
                                        "Address.functionDelegateCall",
                                        "Address.verifyCallResult"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "219660ec0d55ecb352a5cec40b996f90"
                            },
                            {
                                "visibility": "internal",
                                "content": "function functionDelegateCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory){ require(isContract(target), \"Address: delegate call to non- contract \"); (bool success, bytes memory returndata) = target.delegatecall(data); return verifyCallResult(success, returndata, errorMessage);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "target"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "data"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "errorMessage"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Address.isContract",
                                        "target.delegatecall",
                                        "Address.functionDelegateCall",
                                        "Address.verifyCallResult"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "7bd3e0c4b0038fdfdd3c32bfa76e6e64"
                            }
                        ],
                        "verifyCallResult": [
                            {
                                "visibility": "internal",
                                "content": "function verifyCallResult( bool success, bytes memory returndata, string memory errorMessage ) internal pure returns (bytes memory){ if (success){ return returndata;} else{ if (returndata.length > 0){ assembly{ let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size)}} else{ revert(errorMessage);}}}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bool",
                                        "name": "success"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "returndata"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "errorMessage"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "595b1e5bcf25838a84e8abc3e73dc129"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "IERC20": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "totalSupply": [
                            {
                                "visibility": "external",
                                "content": "function totalSupply() external view returns (uint256);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "5e1d12e61f4bf4b37161d9b684742570"
                            }
                        ],
                        "balanceOf": [
                            {
                                "visibility": "external",
                                "content": "function balanceOf(address account) external view returns (uint256);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "account"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "3ac17e7782366957c960d337a4a648cd"
                            }
                        ],
                        "transfer": [
                            {
                                "visibility": "external",
                                "content": "function transfer(address to, uint256 amount) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "f4ffe0b79c8a4a1a9720675d3ac08278"
                            }
                        ],
                        "allowance": [
                            {
                                "visibility": "external",
                                "content": "function allowance(address owner, address spender) external view returns (uint256);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "owner"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c93791d09d789aed33b9725d482af442"
                            }
                        ],
                        "approve": [
                            {
                                "visibility": "external",
                                "content": "function approve(address spender, uint256 amount) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "7c80d707df648dc123a10c69a1150edc"
                            }
                        ],
                        "transferFrom": [
                            {
                                "visibility": "external",
                                "content": "function transferFrom( address from, address to, uint256 amount ) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "359ece5a67467cccf835eeb464b71fef"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {
                        "Transfer": {
                            "event": "Transfer",
                            "content": "Transfer(address indexed from, address indexed to, uint256 value)"
                        },
                        "Approval": {
                            "event": "Approval",
                            "content": "Approval(address indexed owner, address indexed spender, uint256 value)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                },
                "IERC20Permit": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "permit": [
                            {
                                "visibility": "external",
                                "content": "function permit( address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s ) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "owner"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "deadline"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "v"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "r"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "s"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "abaa7b8952c208d58b77455671572ce3"
                            }
                        ],
                        "nonces": [
                            {
                                "visibility": "external",
                                "content": "function nonces(address owner) external view returns (uint256);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "owner"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "357d86867bcb5e898ef823b379affee2"
                            }
                        ],
                        "DOMAIN_SEPARATOR": [
                            {
                                "visibility": "external",
                                "content": "function DOMAIN_SEPARATOR() external view returns (bytes32);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "0a5129288a98701e3042bb219b8117b2"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                },
                "SafeERC20": {
                    "type": {
                        "__CT__": true,
                        "value": 2
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "safeTransfer": [
                            {
                                "visibility": "internal",
                                "content": "function safeTransfer( IERC20 token, address to, uint256 value ) internal{ _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "IERC20",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SafeERC20._callOptionalReturn"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "bbc9884216fd41f84a3992818f5d5fee"
                            }
                        ],
                        "safeTransferFrom": [
                            {
                                "visibility": "internal",
                                "content": "function safeTransferFrom( IERC20 token, address from, address to, uint256 value ) internal{ _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "IERC20",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SafeERC20._callOptionalReturn"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "9eb9618f71dfee4a30771f1023a3d8e5"
                            }
                        ],
                        "safeApprove": [
                            {
                                "visibility": "internal",
                                "content": "function safeApprove( IERC20 token, address spender, uint256 value ) internal{ require( (value == 0) || (token.allowance(address(this), spender) == 0), \"SafeERC20: approve from non-zero to non-zero allowance\" ); _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "IERC20",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "IERC20.allowance",
                                        "SafeERC20._callOptionalReturn"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "c2bd582892198b8539dd21a42c270285"
                            }
                        ],
                        "safeIncreaseAllowance": [
                            {
                                "visibility": "internal",
                                "content": "function safeIncreaseAllowance( IERC20 token, address spender, uint256 value ) internal{ uint256 newAllowance = token.allowance(address(this), spender) + value; _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "IERC20",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "IERC20.allowance",
                                        "SafeERC20._callOptionalReturn"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "283c693a22bba694a515167c6ad409c7"
                            }
                        ],
                        "safeDecreaseAllowance": [
                            {
                                "visibility": "internal",
                                "content": "function safeDecreaseAllowance( IERC20 token, address spender, uint256 value ) internal{ unchecked{ uint256 oldAllowance = token.allowance(address(this), spender); require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\"); uint256 newAllowance = oldAllowance - value; _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "IERC20",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "IERC20.allowance",
                                        "SafeERC20._callOptionalReturn"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "03cdf989058dd62b884101feaff7d1d8"
                            }
                        ],
                        "safePermit": [
                            {
                                "visibility": "internal",
                                "content": "function safePermit( IERC20Permit token, address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s ) internal{ uint256 nonceBefore = token.nonces(owner); token.permit(owner, spender, value, deadline, v, r, s); uint256 nonceAfter = token.nonces(owner); require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "IERC20Permit",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "owner"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "deadline"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "v"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "r"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "s"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "IERC20Permit.nonces",
                                        "IERC20Permit.permit"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "0140feae353e3ccf05432f452224abe7"
                            }
                        ],
                        "_callOptionalReturn": [
                            {
                                "visibility": "private",
                                "content": "function _callOptionalReturn(IERC20 token, bytes memory data) private{ bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\"); if (returndata.length > 0){ require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "IERC20",
                                        "name": "token"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "data"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "IERC20.functionCall"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "3255af138c94ef435c7b1a72a5640b11"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "address": "Address"
                    }
                },
                "MultichainV7Router": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "MPCAdminPausableControl",
                        "ReentrancyGuard",
                        "IRetrySwapinAndExec"
                    ],
                    "state_variables": {
                        "Swapin_Paused_ROLE": {
                            "type": "bytes32",
                            "visibility": "public",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "keccak256(\"Swapin_Paused_ROLE\")",
                            "content": "bytes32 public constant Swapin_Paused_ROLE = keccak256(\"Swapin_Paused_ROLE\");"
                        },
                        "Swapout_Paused_ROLE": {
                            "type": "bytes32",
                            "visibility": "public",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "keccak256(\"Swapout_Paused_ROLE\")",
                            "content": "bytes32 public constant Swapout_Paused_ROLE = keccak256(\"Swapout_Paused_ROLE\");"
                        },
                        "Call_Paused_ROLE": {
                            "type": "bytes32",
                            "visibility": "public",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "keccak256(\"Call_Paused_ROLE\")",
                            "content": "bytes32 public constant Call_Paused_ROLE = keccak256(\"Call_Paused_ROLE\");"
                        },
                        "Exec_Paused_ROLE": {
                            "type": "bytes32",
                            "visibility": "public",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "keccak256(\"Exec_Paused_ROLE\")",
                            "content": "bytes32 public constant Exec_Paused_ROLE = keccak256(\"Exec_Paused_ROLE\");"
                        },
                        "Retry_Paused_ROLE": {
                            "type": "bytes32",
                            "visibility": "public",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "keccak256(\"Retry_Paused_ROLE\")",
                            "content": "bytes32 public constant Retry_Paused_ROLE = keccak256(\"Retry_Paused_ROLE\");"
                        },
                        "wNATIVE": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public immutable wNATIVE;"
                        },
                        "anycallExecutor": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public immutable anycallExecutor;"
                        },
                        "routerSecurity": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public routerSecurity;"
                        },
                        "anycallProxyInfo": {
                            "type": "mapping(address => ProxyInfo)",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(address => ProxyInfo) public anycallProxyInfo;"
                        },
                        "retryRecords": {
                            "type": "mapping(bytes32 => bytes32)",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(bytes32 => bytes32) public retryRecords;"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor ( address _admin, address _mpc, address _wNATIVE, address _anycallExecutor, address _routerSecurity ) MPCAdminPausableControl(_admin, _mpc){ require(_anycallExecutor != address(0), \"zero anycall executor\"); anycallExecutor = _anycallExecutor; wNATIVE = _wNATIVE; routerSecurity = _routerSecurity;}",
                                "modifiers": [
                                    "MPCAdminPausableControl(_admin, _mpc)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_admin"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_mpc"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_wNATIVE"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_anycallExecutor"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_routerSecurity"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "wNATIVE",
                                        "",
                                        "MultichainV7Router"
                                    ],
                                    [
                                        "anycallExecutor",
                                        "",
                                        "MultichainV7Router"
                                    ],
                                    [
                                        "routerSecurity",
                                        "",
                                        "MultichainV7Router"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "wNATIVE",
                                        "",
                                        "MultichainV7Router"
                                    ],
                                    [
                                        "anycallExecutor",
                                        "",
                                        "MultichainV7Router"
                                    ],
                                    [
                                        "routerSecurity",
                                        "",
                                        "MultichainV7Router"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "48b8b35f034ba3bdcf543622515c0117"
                            }
                        ],
                        "setRouterSecurity": [
                            {
                                "visibility": "external",
                                "content": "function setRouterSecurity(address _routerSecurity) external nonReentrant onlyMPC{ routerSecurity = _routerSecurity;}",
                                "modifiers": [
                                    "nonReentrant",
                                    "onlyMPC"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_routerSecurity"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "routerSecurity",
                                        "",
                                        "MultichainV7Router"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "routerSecurity",
                                        "",
                                        "MultichainV7Router"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "MultichainV7Router.nonReentrant",
                                        "MPCManageable.onlyMPC"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "d9c3390441e9290d6dfd1067162f552c"
                            }
                        ],
                        "changeVault": [
                            {
                                "visibility": "external",
                                "content": "function changeVault(address token, address newVault) external nonReentrant onlyMPC returns (bool){ return IAnyswapERC20Auth(token).changeVault(newVault);}",
                                "modifiers": [
                                    "nonReentrant",
                                    "onlyMPC"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "newVault"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "MultichainV7Router.nonReentrant",
                                        "MPCManageable.onlyMPC"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "0106d545870601ffc32feadcee95cae6"
                            }
                        ],
                        "addAnycallProxies": [
                            {
                                "visibility": "external",
                                "content": "function addAnycallProxies( address[] calldata proxies, bool[] calldata acceptAnyTokenFlags ) external nonReentrant onlyAdmin{ uint256 length = proxies.length; require(length == acceptAnyTokenFlags.length, \"length mismatch\"); for (uint256 i = 0; i < length; i++){ anycallProxyInfo[proxies[i]] = ProxyInfo( true, acceptAnyTokenFlags[i] );}}",
                                "modifiers": [
                                    "nonReentrant",
                                    "onlyAdmin"
                                ],
                                "parameters": [
                                    {
                                        "type": "address[] calldata",
                                        "name": "proxies"
                                    },
                                    {
                                        "type": "bool[] calldata",
                                        "name": "acceptAnyTokenFlags"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "anycallProxyInfo",
                                        "",
                                        "MultichainV7Router"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "anycallProxyInfo",
                                        "",
                                        "MultichainV7Router"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "MultichainV7Router.nonReentrant",
                                        "MPCAdminPausableControl.onlyAdmin"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "0369a41420faa77b0ece7fce95e9bcb0"
                            }
                        ],
                        "removeAnycallProxies": [
                            {
                                "visibility": "external",
                                "content": "function removeAnycallProxies(address[] calldata proxies) external nonReentrant onlyAdmin{ for (uint256 i = 0; i < proxies.length; i++){ delete anycallProxyInfo[proxies[i]];}}",
                                "modifiers": [
                                    "nonReentrant",
                                    "onlyAdmin"
                                ],
                                "parameters": [
                                    {
                                        "type": "address[] calldata",
                                        "name": "proxies"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "anycallProxyInfo",
                                        "",
                                        "MultichainV7Router"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "MultichainV7Router.nonReentrant",
                                        "MPCAdminPausableControl.onlyAdmin"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "cea8891208bc578d8d9055ca21842eae"
                            }
                        ],
                        "anySwapOut": [
                            {
                                "visibility": "external",
                                "content": "function anySwapOut( address token, string calldata to, uint256 amount, uint256 toChainID ) external whenNotPaused(Swapout_Paused_ROLE) nonReentrant{ bytes32 swapoutID = IRouterSecurity(routerSecurity).registerSwapout( token, msg.sender, to, amount, toChainID, \"\", \"\" ); assert(IRouterMintBurn(token).burn(msg.sender, amount)); emit LogAnySwapOut(swapoutID, token, msg.sender, to, amount, toChainID);}",
                                "modifiers": [
                                    "whenNotPaused(Swapout_Paused_ROLE)",
                                    "nonReentrant"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "string calldata",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "toChainID"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "Swapout_Paused_ROLE",
                                        "",
                                        "MultichainV7Router"
                                    ],
                                    [
                                        "routerSecurity",
                                        "",
                                        "MultichainV7Router"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "MultichainV7Router.nonReentrant",
                                        "PausableControl.whenNotPaused"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "26f32bb869e49850e5c2506fc37339f6"
                            }
                        ],
                        "anySwapOutAndCall": [
                            {
                                "visibility": "external",
                                "content": "function anySwapOutAndCall( address token, string calldata to, uint256 amount, uint256 toChainID, string calldata anycallProxy, bytes calldata data ) external whenNotPaused(Swapout_Paused_ROLE) whenNotPaused(Call_Paused_ROLE) nonReentrant{ require(data.length > 0, \"empty call data\"); bytes32 swapoutID = IRouterSecurity(routerSecurity).registerSwapout( token, msg.sender, to, amount, toChainID, anycallProxy, data ); assert(IRouterMintBurn(token).burn(msg.sender, amount)); emit LogAnySwapOutAndCall( swapoutID, token, msg.sender, to, amount, toChainID, anycallProxy, data );}",
                                "modifiers": [
                                    "whenNotPaused(Swapout_Paused_ROLE)",
                                    "whenNotPaused(Call_Paused_ROLE)",
                                    "nonReentrant"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "string calldata",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "toChainID"
                                    },
                                    {
                                        "type": "string calldata",
                                        "name": "anycallProxy"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "data"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "Swapout_Paused_ROLE",
                                        "",
                                        "MultichainV7Router"
                                    ],
                                    [
                                        "Call_Paused_ROLE",
                                        "",
                                        "MultichainV7Router"
                                    ],
                                    [
                                        "routerSecurity",
                                        "",
                                        "MultichainV7Router"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "MultichainV7Router.nonReentrant",
                                        "PausableControl.whenNotPaused"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "c44038d6908281e818005d359c222cce"
                            }
                        ],
                        "_anySwapOutUnderlying": [
                            {
                                "visibility": "internal",
                                "content": "function _anySwapOutUnderlying(address token, uint256 amount) internal whenNotPaused(Swapout_Paused_ROLE) returns (uint256){ address _underlying = IUnderlying(token).underlying(); require(_underlying != address(0), \"MultichainRouter: zero underlying\"); uint256 old_balance = IERC20(_underlying).balanceOf(token); IERC20(_underlying).safeTransferFrom(msg.sender, token, amount); uint256 new_balance = IERC20(_underlying).balanceOf(token); require( new_balance >= old_balance && new_balance <= old_balance + amount ); return new_balance - old_balance;}",
                                "modifiers": [
                                    "whenNotPaused(Swapout_Paused_ROLE)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "Swapout_Paused_ROLE",
                                        "",
                                        "MultichainV7Router"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "PausableControl.whenNotPaused"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "a18114877062d4a5188b648ae759fb06"
                            }
                        ],
                        "anySwapOutUnderlying": [
                            {
                                "visibility": "external",
                                "content": "function anySwapOutUnderlying( address token, string calldata to, uint256 amount, uint256 toChainID ) external nonReentrant{ uint256 recvAmount = _anySwapOutUnderlying(token, amount); bytes32 swapoutID = IRouterSecurity(routerSecurity).registerSwapout( token, msg.sender, to, recvAmount, toChainID, \"\", \"\" ); emit LogAnySwapOut( swapoutID, token, msg.sender, to, recvAmount, toChainID );}",
                                "modifiers": [
                                    "nonReentrant"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "string calldata",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "toChainID"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "routerSecurity",
                                        "",
                                        "MultichainV7Router"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "MultichainV7Router.nonReentrant",
                                        "MultichainV7Router._anySwapOutUnderlying"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "3aca354c67829cde8e52589d7fd6450f"
                            }
                        ],
                        "anySwapOutUnderlyingAndCall": [
                            {
                                "visibility": "external",
                                "content": "function anySwapOutUnderlyingAndCall( address token, string calldata to, uint256 amount, uint256 toChainID, string calldata anycallProxy, bytes calldata data ) external whenNotPaused(Call_Paused_ROLE) nonReentrant{ require(data.length > 0, \"empty call data\"); uint256 recvAmount = _anySwapOutUnderlying(token, amount); bytes32 swapoutID = IRouterSecurity(routerSecurity).registerSwapout( token, msg.sender, to, recvAmount, toChainID, anycallProxy, data ); emit LogAnySwapOutAndCall( swapoutID, token, msg.sender, to, recvAmount, toChainID, anycallProxy, data );}",
                                "modifiers": [
                                    "whenNotPaused(Call_Paused_ROLE)",
                                    "nonReentrant"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "string calldata",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "toChainID"
                                    },
                                    {
                                        "type": "string calldata",
                                        "name": "anycallProxy"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "data"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "Call_Paused_ROLE",
                                        "",
                                        "MultichainV7Router"
                                    ],
                                    [
                                        "routerSecurity",
                                        "",
                                        "MultichainV7Router"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "MultichainV7Router.nonReentrant",
                                        "PausableControl.whenNotPaused",
                                        "MultichainV7Router._anySwapOutUnderlying"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "1dc9930dadcae87594d7bebc890ace24"
                            }
                        ],
                        "_anySwapOutNative": [
                            {
                                "visibility": "internal",
                                "content": "function _anySwapOutNative(address token) internal whenNotPaused(Swapout_Paused_ROLE) returns (uint256){ require(wNATIVE != address(0), \"MultichainRouter: zero wNATIVE\"); require( IUnderlying(token).underlying() == wNATIVE, \"MultichainRouter: underlying is not wNATIVE\" ); uint256 old_balance = IERC20(wNATIVE).balanceOf(token); IwNATIVE(wNATIVE).deposit{ value: msg.value} (); IERC20(wNATIVE).safeTransfer(token, msg.value); uint256 new_balance = IERC20(wNATIVE).balanceOf(token); require( new_balance >= old_balance && new_balance <= old_balance + msg.value ); return new_balance - old_balance;}",
                                "modifiers": [
                                    "whenNotPaused(Swapout_Paused_ROLE)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "Swapout_Paused_ROLE",
                                        "",
                                        "MultichainV7Router"
                                    ],
                                    [
                                        "wNATIVE",
                                        "",
                                        "MultichainV7Router"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "PausableControl.whenNotPaused"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "d70f6e22990d26bbb469ee098c7abc84"
                            }
                        ],
                        "anySwapOutNative": [
                            {
                                "visibility": "external",
                                "content": "function anySwapOutNative( address token, string calldata to, uint256 toChainID ) external payable nonReentrant{ uint256 recvAmount = _anySwapOutNative(token); bytes32 swapoutID = IRouterSecurity(routerSecurity).registerSwapout( token, msg.sender, to, recvAmount, toChainID, \"\", \"\" ); emit LogAnySwapOut( swapoutID, token, msg.sender, to, recvAmount, toChainID );}",
                                "modifiers": [
                                    "payable",
                                    "nonReentrant"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "string calldata",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "toChainID"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "routerSecurity",
                                        "",
                                        "MultichainV7Router"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "MultichainV7Router._anySwapOutNative",
                                        "MultichainV7Router.nonReentrant"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "2e555917556882b58f921116f13438bc"
                            }
                        ],
                        "anySwapOutNativeAndCall": [
                            {
                                "visibility": "external",
                                "content": "function anySwapOutNativeAndCall( address token, string calldata to, uint256 toChainID, string calldata anycallProxy, bytes calldata data ) external payable whenNotPaused(Call_Paused_ROLE) nonReentrant{ require(data.length > 0, \"empty call data\"); uint256 recvAmount = _anySwapOutNative(token); bytes32 swapoutID = IRouterSecurity(routerSecurity).registerSwapout( token, msg.sender, to, recvAmount, toChainID, anycallProxy, data ); emit LogAnySwapOutAndCall( swapoutID, token, msg.sender, to, recvAmount, toChainID, anycallProxy, data );}",
                                "modifiers": [
                                    "payable",
                                    "whenNotPaused(Call_Paused_ROLE)",
                                    "nonReentrant"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "string calldata",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "toChainID"
                                    },
                                    {
                                        "type": "string calldata",
                                        "name": "anycallProxy"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "data"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "Call_Paused_ROLE",
                                        "",
                                        "MultichainV7Router"
                                    ],
                                    [
                                        "routerSecurity",
                                        "",
                                        "MultichainV7Router"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "MultichainV7Router._anySwapOutNative",
                                        "PausableControl.whenNotPaused",
                                        "MultichainV7Router.nonReentrant"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "50c3ffcf4a2623da6b1d8c010eeba937"
                            }
                        ],
                        "anySwapIn": [
                            {
                                "visibility": "external",
                                "content": "function anySwapIn(string calldata swapID, SwapInfo calldata swapInfo) external whenNotPaused(Swapin_Paused_ROLE) nonReentrant onlyMPC{ IRouterSecurity(routerSecurity).registerSwapin(swapID, swapInfo); assert( IRouterMintBurn(swapInfo.token).mint( swapInfo.receiver, swapInfo.amount ) ); emit LogAnySwapIn( swapID, swapInfo.swapoutID, swapInfo.token, swapInfo.receiver, swapInfo.amount, swapInfo.fromChainID );}",
                                "modifiers": [
                                    "whenNotPaused(Swapin_Paused_ROLE)",
                                    "nonReentrant",
                                    "onlyMPC"
                                ],
                                "parameters": [
                                    {
                                        "type": "string calldata",
                                        "name": "swapID"
                                    },
                                    {
                                        "type": "SwapInfo calldata",
                                        "name": "swapInfo"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "Swapin_Paused_ROLE",
                                        "",
                                        "MultichainV7Router"
                                    ],
                                    [
                                        "routerSecurity",
                                        "",
                                        "MultichainV7Router"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "MPCManageable.onlyMPC",
                                        "PausableControl.whenNotPaused",
                                        "MultichainV7Router.nonReentrant"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "a6f09268b4440ec4ad0ddd76faa99892"
                            }
                        ],
                        "anySwapInUnderlying": [
                            {
                                "visibility": "external",
                                "content": "function anySwapInUnderlying( string calldata swapID, SwapInfo calldata swapInfo ) external whenNotPaused(Swapin_Paused_ROLE) nonReentrant onlyMPC{ require( IUnderlying(swapInfo.token).underlying() != address(0), \"MultichainRouter: zero underlying\" ); IRouterSecurity(routerSecurity).registerSwapin(swapID, swapInfo); assert( IRouterMintBurn(swapInfo.token).mint(address(this), swapInfo.amount) ); IUnderlying(swapInfo.token).withdraw( swapInfo.amount, swapInfo.receiver ); emit LogAnySwapIn( swapID, swapInfo.swapoutID, swapInfo.token, swapInfo.receiver, swapInfo.amount, swapInfo.fromChainID );}",
                                "modifiers": [
                                    "whenNotPaused(Swapin_Paused_ROLE)",
                                    "nonReentrant",
                                    "onlyMPC"
                                ],
                                "parameters": [
                                    {
                                        "type": "string calldata",
                                        "name": "swapID"
                                    },
                                    {
                                        "type": "SwapInfo calldata",
                                        "name": "swapInfo"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "Swapin_Paused_ROLE",
                                        "",
                                        "MultichainV7Router"
                                    ],
                                    [
                                        "routerSecurity",
                                        "",
                                        "MultichainV7Router"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "MPCManageable.onlyMPC",
                                        "PausableControl.whenNotPaused",
                                        "MultichainV7Router.nonReentrant"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "00dfe7278c72cb71abebf8a733016db8"
                            }
                        ],
                        "anySwapInNative": [
                            {
                                "visibility": "external",
                                "content": "function anySwapInNative(string calldata swapID, SwapInfo calldata swapInfo) external whenNotPaused(Swapin_Paused_ROLE) nonReentrant onlyMPC{ require(wNATIVE != address(0), \"MultichainRouter: zero wNATIVE\"); require( IUnderlying(swapInfo.token).underlying() == wNATIVE, \"MultichainRouter: underlying is not wNATIVE\" ); IRouterSecurity(routerSecurity).registerSwapin(swapID, swapInfo); assert( IRouterMintBurn(swapInfo.token).mint(address(this), swapInfo.amount) ); IUnderlying(swapInfo.token).withdraw(swapInfo.amount, address(this)); IwNATIVE(wNATIVE).withdraw(swapInfo.amount); Address.sendValue(payable(swapInfo.receiver), swapInfo.amount); emit LogAnySwapIn( swapID, swapInfo.swapoutID, swapInfo.token, swapInfo.receiver, swapInfo.amount, swapInfo.fromChainID );}",
                                "modifiers": [
                                    "whenNotPaused(Swapin_Paused_ROLE)",
                                    "nonReentrant",
                                    "onlyMPC"
                                ],
                                "parameters": [
                                    {
                                        "type": "string calldata",
                                        "name": "swapID"
                                    },
                                    {
                                        "type": "SwapInfo calldata",
                                        "name": "swapInfo"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "Swapin_Paused_ROLE",
                                        "",
                                        "MultichainV7Router"
                                    ],
                                    [
                                        "wNATIVE",
                                        "",
                                        "MultichainV7Router"
                                    ],
                                    [
                                        "routerSecurity",
                                        "",
                                        "MultichainV7Router"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Address.sendValue",
                                        "MPCManageable.onlyMPC",
                                        "PausableControl.whenNotPaused",
                                        "MultichainV7Router.nonReentrant"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "f1ec08943662ed1fb881657f8a54a7e6"
                            }
                        ],
                        "anySwapInAuto": [
                            {
                                "visibility": "external",
                                "content": "function anySwapInAuto(string calldata swapID, SwapInfo calldata swapInfo) external whenNotPaused(Swapin_Paused_ROLE) nonReentrant onlyMPC{ IRouterSecurity(routerSecurity).registerSwapin(swapID, swapInfo); address _underlying = IUnderlying(swapInfo.token).underlying(); if ( _underlying != address(0) && IERC20(_underlying).balanceOf(swapInfo.token) >= swapInfo.amount ){ assert( IRouterMintBurn(swapInfo.token).mint( address(this), swapInfo.amount ) ); if (_underlying == wNATIVE){ IUnderlying(swapInfo.token).withdraw( swapInfo.amount, address(this) ); IwNATIVE(wNATIVE).withdraw(swapInfo.amount); Address.sendValue(payable(swapInfo.receiver), swapInfo.amount);} else{ IUnderlying(swapInfo.token).withdraw( swapInfo.amount, swapInfo.receiver );}} else{ assert( IRouterMintBurn(swapInfo.token).mint( swapInfo.receiver, swapInfo.amount ) );} emit LogAnySwapIn( swapID, swapInfo.swapoutID, swapInfo.token, swapInfo.receiver, swapInfo.amount, swapInfo.fromChainID );}",
                                "modifiers": [
                                    "whenNotPaused(Swapin_Paused_ROLE)",
                                    "nonReentrant",
                                    "onlyMPC"
                                ],
                                "parameters": [
                                    {
                                        "type": "string calldata",
                                        "name": "swapID"
                                    },
                                    {
                                        "type": "SwapInfo calldata",
                                        "name": "swapInfo"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "Swapin_Paused_ROLE",
                                        "",
                                        "MultichainV7Router"
                                    ],
                                    [
                                        "wNATIVE",
                                        "",
                                        "MultichainV7Router"
                                    ],
                                    [
                                        "routerSecurity",
                                        "",
                                        "MultichainV7Router"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Address.sendValue",
                                        "MPCManageable.onlyMPC",
                                        "PausableControl.whenNotPaused",
                                        "MultichainV7Router.nonReentrant"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "c873f844a0bd18d08f606369ee6968ca"
                            }
                        ],
                        "anySwapInAndExec": [
                            {
                                "visibility": "external",
                                "content": "function anySwapInAndExec( string calldata swapID, SwapInfo calldata swapInfo, address anycallProxy, bytes calldata data ) external whenNotPaused(Swapin_Paused_ROLE) whenNotPaused(Exec_Paused_ROLE) nonReentrant onlyMPC{ require( anycallProxyInfo[anycallProxy].supported, \"unsupported ancall proxy\" ); IRouterSecurity(routerSecurity).registerSwapin(swapID, swapInfo); assert( IRouterMintBurn(swapInfo.token).mint(anycallProxy, swapInfo.amount) ); bool success; bytes memory result; try IAnycallExecutor(anycallExecutor).execute( anycallProxy, swapInfo.token, swapInfo.receiver, swapInfo.amount, data ) returns (bool succ, bytes memory res){ (success, result) = (succ, res);} catch{} emit LogAnySwapInAndExec( swapID, swapInfo.swapoutID, swapInfo.token, swapInfo.receiver, swapInfo.amount, swapInfo.fromChainID, success, result );}",
                                "modifiers": [
                                    "whenNotPaused(Swapin_Paused_ROLE)",
                                    "whenNotPaused(Exec_Paused_ROLE)",
                                    "nonReentrant",
                                    "onlyMPC"
                                ],
                                "parameters": [
                                    {
                                        "type": "string calldata",
                                        "name": "swapID"
                                    },
                                    {
                                        "type": "SwapInfo calldata",
                                        "name": "swapInfo"
                                    },
                                    {
                                        "type": "address",
                                        "name": "anycallProxy"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "data"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "Swapin_Paused_ROLE",
                                        "",
                                        "MultichainV7Router"
                                    ],
                                    [
                                        "Exec_Paused_ROLE",
                                        "",
                                        "MultichainV7Router"
                                    ],
                                    [
                                        "anycallExecutor",
                                        "",
                                        "MultichainV7Router"
                                    ],
                                    [
                                        "routerSecurity",
                                        "",
                                        "MultichainV7Router"
                                    ],
                                    [
                                        "anycallProxyInfo",
                                        "",
                                        "MultichainV7Router"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "anycallExecutor",
                                        "",
                                        "MultichainV7Router"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "MPCManageable.onlyMPC",
                                        "PausableControl.whenNotPaused",
                                        "MultichainV7Router.nonReentrant"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "b9a750eae27d0c5e2d2e38719b4a7499"
                            }
                        ],
                        "anySwapInUnderlyingAndExec": [
                            {
                                "visibility": "external",
                                "content": "function anySwapInUnderlyingAndExec( string calldata swapID, SwapInfo calldata swapInfo, address anycallProxy, bytes calldata data ) external whenNotPaused(Swapin_Paused_ROLE) whenNotPaused(Exec_Paused_ROLE) nonReentrant onlyMPC{ require( anycallProxyInfo[anycallProxy].supported, \"unsupported ancall proxy\" ); IRouterSecurity(routerSecurity).registerSwapin(swapID, swapInfo); address receiveToken;{ address _underlying = IUnderlying(swapInfo.token).underlying(); require( _underlying != address(0), \"MultichainRouter: zero underlying\" ); if ( IERC20(_underlying).balanceOf(swapInfo.token) >= swapInfo.amount ){ receiveToken = _underlying; assert( IRouterMintBurn(swapInfo.token).mint( address(this), swapInfo.amount ) ); IUnderlying(swapInfo.token).withdraw( swapInfo.amount, anycallProxy );} else if (anycallProxyInfo[anycallProxy].acceptAnyToken){ receiveToken = swapInfo.token; assert( IRouterMintBurn(swapInfo.token).mint( anycallProxy, swapInfo.amount ) );} else{ bytes32 retryHash = keccak256( abi.encode( swapID, swapInfo.swapoutID, swapInfo.token, swapInfo.receiver, swapInfo.amount, swapInfo.fromChainID, anycallProxy, data ) ); retryRecords[retryHash] = keccak256(abi.encode(swapID, data)); emit LogRetryExecRecord( swapID, swapInfo.swapoutID, swapInfo.token, swapInfo.receiver, swapInfo.amount, swapInfo.fromChainID, anycallProxy, data ); return;}} bool success; bytes memory result; try IAnycallExecutor(anycallExecutor).execute( anycallProxy, receiveToken, swapInfo.receiver, swapInfo.amount, data ) returns (bool succ, bytes memory res){ (success, result) = (succ, res);} catch{} emit LogAnySwapInAndExec( swapID, swapInfo.swapoutID, swapInfo.token, swapInfo.receiver, swapInfo.amount, swapInfo.fromChainID, success, result );}",
                                "modifiers": [
                                    "whenNotPaused(Swapin_Paused_ROLE)",
                                    "whenNotPaused(Exec_Paused_ROLE)",
                                    "nonReentrant",
                                    "onlyMPC"
                                ],
                                "parameters": [
                                    {
                                        "type": "string calldata",
                                        "name": "swapID"
                                    },
                                    {
                                        "type": "SwapInfo calldata",
                                        "name": "swapInfo"
                                    },
                                    {
                                        "type": "address",
                                        "name": "anycallProxy"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "data"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "Swapin_Paused_ROLE",
                                        "",
                                        "MultichainV7Router"
                                    ],
                                    [
                                        "Exec_Paused_ROLE",
                                        "",
                                        "MultichainV7Router"
                                    ],
                                    [
                                        "anycallExecutor",
                                        "",
                                        "MultichainV7Router"
                                    ],
                                    [
                                        "routerSecurity",
                                        "",
                                        "MultichainV7Router"
                                    ],
                                    [
                                        "anycallProxyInfo",
                                        "",
                                        "MultichainV7Router"
                                    ],
                                    [
                                        "retryRecords",
                                        "",
                                        "MultichainV7Router"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "anycallExecutor",
                                        "",
                                        "MultichainV7Router"
                                    ],
                                    [
                                        "retryRecords",
                                        "",
                                        "MultichainV7Router"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "MPCManageable.onlyMPC",
                                        "PausableControl.whenNotPaused",
                                        "MultichainV7Router.nonReentrant"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "5f45473219b505527dff7eb1c4123c33"
                            }
                        ],
                        "retrySwapinAndExec": [
                            {
                                "visibility": "external",
                                "content": "function retrySwapinAndExec( string calldata swapID, SwapInfo calldata swapInfo, address anycallProxy, bytes calldata data, bool dontExec ) external whenNotPaused(Retry_Paused_ROLE) nonReentrant{ require( msg.sender == swapInfo.receiver || msg.sender == admin, \"forbid retry swap\" ); require( IRouterSecurity(routerSecurity).isSwapCompleted( swapID, swapInfo.swapoutID, swapInfo.fromChainID ), \"swap not completed\" );{ bytes32 retryHash = keccak256( abi.encode( swapID, swapInfo.swapoutID, swapInfo.token, swapInfo.receiver, swapInfo.amount, swapInfo.fromChainID, anycallProxy, data ) ); require( retryRecords[retryHash] == keccak256(abi.encode(swapID, data)), \"retry record not exist\" ); delete retryRecords[retryHash];} address _underlying = IUnderlying(swapInfo.token).underlying(); require(_underlying != address(0), \"MultichainRouter: zero underlying\"); require( IERC20(_underlying).balanceOf(swapInfo.token) >= swapInfo.amount, \"MultichainRouter: retry failed\" ); assert( IRouterMintBurn(swapInfo.token).mint(address(this), swapInfo.amount) ); bool success; bytes memory result; if (dontExec){ IUnderlying(swapInfo.token).withdraw( swapInfo.amount, swapInfo.receiver );} else{ IUnderlying(swapInfo.token).withdraw(swapInfo.amount, anycallProxy); try IAnycallExecutor(anycallExecutor).execute( anycallProxy, _underlying, swapInfo.receiver, swapInfo.amount, data ) returns (bool succ, bytes memory res){ (success, result) = (succ, res);} catch{}} emit LogRetrySwapInAndExec( swapID, swapInfo.swapoutID, swapInfo.token, swapInfo.receiver, swapInfo.amount, swapInfo.fromChainID, dontExec, success, result );}",
                                "modifiers": [
                                    "whenNotPaused(Retry_Paused_ROLE)",
                                    "nonReentrant"
                                ],
                                "parameters": [
                                    {
                                        "type": "string calldata",
                                        "name": "swapID"
                                    },
                                    {
                                        "type": "SwapInfo calldata",
                                        "name": "swapInfo"
                                    },
                                    {
                                        "type": "address",
                                        "name": "anycallProxy"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "data"
                                    },
                                    {
                                        "type": "bool",
                                        "name": "dontExec"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "admin",
                                        "",
                                        "MPCAdminControl"
                                    ],
                                    [
                                        "Retry_Paused_ROLE",
                                        "",
                                        "MultichainV7Router"
                                    ],
                                    [
                                        "anycallExecutor",
                                        "",
                                        "MultichainV7Router"
                                    ],
                                    [
                                        "routerSecurity",
                                        "",
                                        "MultichainV7Router"
                                    ],
                                    [
                                        "retryRecords",
                                        "",
                                        "MultichainV7Router"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "anycallExecutor",
                                        "",
                                        "MultichainV7Router"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "MultichainV7Router.nonReentrant",
                                        "PausableControl.whenNotPaused"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "2aac229641683a9d30f2cf10c5b81504"
                            }
                        ],
                        "anySwapFeeTo": [
                            {
                                "visibility": "external",
                                "content": "function anySwapFeeTo(address token, uint256 amount) external nonReentrant onlyMPC{ IRouterMintBurn(token).mint(address(this), amount); IUnderlying(token).withdraw(amount, msg.sender);}",
                                "modifiers": [
                                    "nonReentrant",
                                    "onlyMPC"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "MultichainV7Router.nonReentrant",
                                        "MPCManageable.onlyMPC"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "598bfdf8d5c1de333effa9e5e87ac5b1"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {
                        "ProxyInfo": {
                            "content": "ProxyInfo{ bool supported; bool acceptAnyToken;}"
                        }
                    },
                    "events": {
                        "LogAnySwapIn": {
                            "event": "LogAnySwapIn",
                            "content": "LogAnySwapIn( string swapID, bytes32 indexed swapoutID, address indexed token, address indexed receiver, uint256 amount, uint256 fromChainID )"
                        },
                        "LogAnySwapOut": {
                            "event": "LogAnySwapOut",
                            "content": "LogAnySwapOut( bytes32 indexed swapoutID, address indexed token, address indexed from, string receiver, uint256 amount, uint256 toChainID )"
                        },
                        "LogAnySwapInAndExec": {
                            "event": "LogAnySwapInAndExec",
                            "content": "LogAnySwapInAndExec( string swapID, bytes32 indexed swapoutID, address indexed token, address indexed receiver, uint256 amount, uint256 fromChainID, bool success, bytes result )"
                        },
                        "LogAnySwapOutAndCall": {
                            "event": "LogAnySwapOutAndCall",
                            "content": "LogAnySwapOutAndCall( bytes32 indexed swapoutID, address indexed token, address indexed from, string receiver, uint256 amount, uint256 toChainID, string anycallProxy, bytes data )"
                        },
                        "LogRetryExecRecord": {
                            "event": "LogRetryExecRecord",
                            "content": "LogRetryExecRecord( string swapID, bytes32 swapoutID, address token, address receiver, uint256 amount, uint256 fromChainID, address anycallProxy, bytes data )"
                        },
                        "LogRetrySwapInAndExec": {
                            "event": "LogRetrySwapInAndExec",
                            "content": "LogRetrySwapInAndExec( string swapID, bytes32 swapoutID, address token, address receiver, uint256 amount, uint256 fromChainID, bool dontExec, bool success, bytes result )"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "address": "Address",
                        "IERC20": "SafeERC20"
                    }
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "PausableControl.paused": "0ecac403439a515e3a8a26c1bec74897",
                "PausableControl.whenNotPaused": "d3ddd74038b197df64119e0f510fc99e",
                "PausableControl.whenPaused": "2644e09d24ab360e264bafb92c05a7f4",
                "MPCManageable.onlyMPC": "2c8cae55bb5a13f557a4d161cf1305a1",
                "PausableControl._pause": "54eff54e404dc27377cb0136978266ee",
                "PausableControl._unpause": "5b1ad46278c5fcdbf6e5a3565bd764c1",
                "Address.functionCallWithValue": "e318cf9d6fc0d1d8455ee479a7548ba2",
                "Address.functionCall": "9bd9227b4301edafa41944a5a4cc096d",
                "Address.verifyCallResult": "595b1e5bcf25838a84e8abc3e73dc129",
                "Address.isContract": "d5972f1432570efe297b754cd2693d6f",
                "Address.functionStaticCall": "994685aae3cda8dbbf0ffec7f803d344",
                "Address.functionDelegateCall": "219660ec0d55ecb352a5cec40b996f90",
                "SafeERC20._callOptionalReturn": "3255af138c94ef435c7b1a72a5640b11",
                "IERC20.allowance": "c93791d09d789aed33b9725d482af442",
                "IERC20Permit.nonces": "357d86867bcb5e898ef823b379affee2",
                "IERC20Permit.permit": "abaa7b8952c208d58b77455671572ce3",
                "MultichainV7Router._anySwapOutUnderlying": "a18114877062d4a5188b648ae759fb06",
                "MultichainV7Router._anySwapOutNative": "d70f6e22990d26bbb469ee098c7abc84",
                "Address.sendValue": "4213f1701c2999f67f11de98a51e01f6"
            },
            "md5": "fd2476322ac1cfe124a766a28028593d"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\0x3d7f0933aC403773d219cf0519DE8082946Dc10F\\fUSD.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\0x3d7f0933aC403773d219cf0519DE8082946Dc10F\\fUSD.sol",
            "filename": "fUSD.sol",
            "imported_contracts": {},
            "contracts": {
                "IERC20": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "totalSupply": [
                            {
                                "visibility": "external",
                                "content": "function totalSupply() external view returns (uint256);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "5e1d12e61f4bf4b37161d9b684742570"
                            }
                        ],
                        "balanceOf": [
                            {
                                "visibility": "external",
                                "content": "function balanceOf(address account) external view returns (uint256);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "account"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "3ac17e7782366957c960d337a4a648cd"
                            }
                        ],
                        "transfer": [
                            {
                                "visibility": "external",
                                "content": "function transfer(address recipient, uint256 amount) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "recipient"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "98b540da9047ee99bce7fadde65d04b7"
                            }
                        ],
                        "allowance": [
                            {
                                "visibility": "external",
                                "content": "function allowance(address owner, address spender) external view returns (uint256);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "owner"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c93791d09d789aed33b9725d482af442"
                            }
                        ],
                        "approve": [
                            {
                                "visibility": "external",
                                "content": "function approve(address spender, uint256 amount) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "7c80d707df648dc123a10c69a1150edc"
                            }
                        ],
                        "transferFrom": [
                            {
                                "visibility": "external",
                                "content": "function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "sender"
                                    },
                                    {
                                        "type": "address",
                                        "name": "recipient"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c134d67e13a988b449de71dd226682ab"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {
                        "Transfer": {
                            "event": "Transfer",
                            "content": "Transfer(address indexed from, address indexed to, uint256 value)"
                        },
                        "Approval": {
                            "event": "Approval",
                            "content": "Approval(address indexed owner, address indexed spender, uint256 value)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": [
                        [
                            "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\0x3d7f0933aC403773d219cf0519DE8082946Dc10F\\fUSD.sol",
                            "IWERC10"
                        ]
                    ]
                },
                "IERC2612": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "permit": [
                            {
                                "visibility": "external",
                                "content": "function permit(address owner, address spender, uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "owner"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "deadline"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "v"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "r"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "s"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "ee697c2ed8926120653d983b87211c57"
                            }
                        ],
                        "nonces": [
                            {
                                "visibility": "external",
                                "content": "function nonces(address owner) external view returns (uint256);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "owner"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "357d86867bcb5e898ef823b379affee2"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": [
                        [
                            "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\0x3d7f0933aC403773d219cf0519DE8082946Dc10F\\fUSD.sol",
                            "IWERC10"
                        ]
                    ]
                },
                "IWERC10": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "IERC20",
                        "IERC2612"
                    ],
                    "state_variables": {},
                    "functions": {
                        "approveAndCall": [
                            {
                                "visibility": "external",
                                "content": "function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "data"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "ba67696b839a7bd9975ba18122a39a6b"
                            }
                        ],
                        "transferAndCall": [
                            {
                                "visibility": "external",
                                "content": "function transferAndCall(address to, uint value, bytes calldata data) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "value"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "data"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "a90050203027dc243e523faf19616562"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": [
                        [
                            "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\0x3d7f0933aC403773d219cf0519DE8082946Dc10F\\fUSD.sol",
                            "fUSD"
                        ]
                    ]
                },
                "ITransferReceiver": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "onTokenTransfer": [
                            {
                                "visibility": "external",
                                "content": "function onTokenTransfer(address, uint, bytes calldata) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": null
                                    },
                                    {
                                        "type": "uint",
                                        "name": null
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": null
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c910c0ea87c7bb0a4a92ec4a9c23e957"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                },
                "IApprovalReceiver": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "onTokenApproval": [
                            {
                                "visibility": "external",
                                "content": "function onTokenApproval(address, uint, bytes calldata) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": null
                                    },
                                    {
                                        "type": "uint",
                                        "name": null
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": null
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "97c57f6b810f5f7752c7ecf324d8c095"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                },
                "Address": {
                    "type": {
                        "__CT__": true,
                        "value": 2
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "isContract": [
                            {
                                "visibility": "internal",
                                "content": "function isContract(address account) internal view returns (bool){ bytes32 codehash; bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470; assembly{ codehash := extcodehash(account)} return (codehash != 0x0 && codehash != accountHash);}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "account"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "03213a0086847231ca4b607f3e716e3b"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "SafeERC20": {
                    "type": {
                        "__CT__": true,
                        "value": 2
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "safeTransfer": [
                            {
                                "visibility": "internal",
                                "content": "function safeTransfer(IERC20 token, address to, uint value) internal{ callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "IERC20",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "value"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SafeERC20.callOptionalReturn"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "709af4efc371f87cb5fe84501abec571"
                            }
                        ],
                        "safeTransferFrom": [
                            {
                                "visibility": "internal",
                                "content": "function safeTransferFrom(IERC20 token, address from, address to, uint value) internal{ callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "IERC20",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "value"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SafeERC20.callOptionalReturn"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "c2e05da458e5ff013c4f69105d40b298"
                            }
                        ],
                        "safeApprove": [
                            {
                                "visibility": "internal",
                                "content": "function safeApprove(IERC20 token, address spender, uint value) internal{ require((value == 0) || (token.allowance(address(this), spender) == 0), \"SafeERC20: approve from non-zero to non-zero allowance\" ); callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "IERC20",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "value"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "allowance",
                                        "",
                                        "fUSD"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "IERC20.allowance",
                                        "SafeERC20.callOptionalReturn"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "6ef93657da7bbc75f716b7fda57ac589"
                            }
                        ],
                        "callOptionalReturn": [
                            {
                                "visibility": "private",
                                "content": "function callOptionalReturn(IERC20 token, bytes memory data) private{ require(address(token).isContract(), \"SafeERC20: call to non- contract \"); (bool success, bytes memory returndata) = address(token).call(data); require(success, \"SafeERC20: low-level call failed\"); if (returndata.length > 0){ require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "IERC20",
                                        "name": "token"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "data"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "IERC20.isContract",
                                        "IERC20.data"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "b3221f01a369fc6acd5325df9fd85126"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "address": "Address"
                    }
                },
                "fUSD": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "IWERC10"
                    ],
                    "state_variables": {
                        "name": {
                            "type": "string",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "string public name;"
                        },
                        "symbol": {
                            "type": "string",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "string public symbol;"
                        },
                        "decimals": {
                            "type": "uint8",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint8 public immutable decimals;"
                        },
                        "PERMIT_TYPEHASH": {
                            "type": "bytes32",
                            "visibility": "public",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "keccak256(\"Permit(address owner, address spender, uint256 value, uint256 nonce, uint256 deadline)\")",
                            "content": "bytes32 public constant PERMIT_TYPEHASH = keccak256(\"Permit(address owner, address spender, uint256 value, uint256 nonce, uint256 deadline)\");"
                        },
                        "TRANSFER_TYPEHASH": {
                            "type": "bytes32",
                            "visibility": "public",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "keccak256(\"Transfer(address owner, address to, uint256 value, uint256 nonce, uint256 deadline)\")",
                            "content": "bytes32 public constant TRANSFER_TYPEHASH = keccak256(\"Transfer(address owner, address to, uint256 value, uint256 nonce, uint256 deadline)\");"
                        },
                        "DOMAIN_SEPARATOR": {
                            "type": "bytes32",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": null,
                            "content": "bytes32 public immutable DOMAIN_SEPARATOR;"
                        },
                        "balanceOf": {
                            "type": "mapping (address => uint256)",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": true,
                            "initial_value": null,
                            "content": "mapping (address => uint256) public override balanceOf;"
                        },
                        "_totalSupply": {
                            "type": "uint256",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256 private _totalSupply;"
                        },
                        "_oldOwner": {
                            "type": "address",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address private _oldOwner;"
                        },
                        "_newOwner": {
                            "type": "address",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address private _newOwner;"
                        },
                        "_newOwnerEffectiveTime": {
                            "type": "uint256",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256 private _newOwnerEffectiveTime;"
                        },
                        "nonces": {
                            "type": "mapping (address => uint256)",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": true,
                            "initial_value": null,
                            "content": "mapping (address => uint256) public override nonces;"
                        },
                        "allowance": {
                            "type": "mapping (address => mapping (address => uint256))",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": true,
                            "initial_value": null,
                            "content": "mapping (address => mapping (address => uint256)) public override allowance;"
                        }
                    },
                    "functions": {
                        "owner": [
                            {
                                "visibility": "public",
                                "content": "function owner() public view returns (address){ if (block.timestamp >= _newOwnerEffectiveTime){ return _newOwner;} return _oldOwner;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_oldOwner",
                                        "",
                                        "fUSD"
                                    ],
                                    [
                                        "_newOwner",
                                        "",
                                        "fUSD"
                                    ],
                                    [
                                        "_newOwnerEffectiveTime",
                                        "",
                                        "fUSD"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "49ca49976e9c068b1a68f9c2befb286b"
                            }
                        ],
                        "changeDCRMOwner": [
                            {
                                "visibility": "public",
                                "content": "function changeDCRMOwner(address newOwner) public onlyOwner returns (bool){ require(newOwner != address(0), \"new owner is the zero address\"); _oldOwner = owner(); _newOwner = newOwner; _newOwnerEffectiveTime = block.timestamp + 2*24*3600; emit LogChangeDCRMOwner(_oldOwner, _newOwner, _newOwnerEffectiveTime); return true;}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "newOwner"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_oldOwner",
                                        "",
                                        "fUSD"
                                    ],
                                    [
                                        "_newOwner",
                                        "",
                                        "fUSD"
                                    ],
                                    [
                                        "_newOwnerEffectiveTime",
                                        "",
                                        "fUSD"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_oldOwner",
                                        "",
                                        "fUSD"
                                    ],
                                    [
                                        "_newOwner",
                                        "",
                                        "fUSD"
                                    ],
                                    [
                                        "_newOwnerEffectiveTime",
                                        "",
                                        "fUSD"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "fUSD.owner",
                                        "fUSD.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "95f6352ddb9980a09689e1f876ab52d5"
                            }
                        ],
                        "Swapin": [
                            {
                                "visibility": "public",
                                "content": "function Swapin(bytes32 txhash, address account, uint256 amount) public onlyOwner returns (bool){ _mint(account, amount); emit LogSwapin(txhash, account, amount); return true;}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "txhash"
                                    },
                                    {
                                        "type": "address",
                                        "name": "account"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "fUSD._mint",
                                        "fUSD.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "499c46eb22e35b6fbd2f4115b36069e0"
                            }
                        ],
                        "Swapout": [
                            {
                                "visibility": "public",
                                "content": "function Swapout(uint256 amount, address bindaddr) public returns (bool){ require(bindaddr != address(0), \"bind address is the zero address\"); _burn(msg.sender, amount); emit LogSwapout(msg.sender, bindaddr, amount); return true;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "address",
                                        "name": "bindaddr"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "fUSD._burn"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "6e0930ee3a5e70ddd277fface23a8a61"
                            }
                        ],
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (string memory _name, string memory _symbol, uint8 _decimals, address _owner){ name = _name; symbol = _symbol; decimals = _decimals; _newOwner = _owner; _newOwnerEffectiveTime = block.timestamp; uint256 chainId; assembly{ chainId := chainid()} DOMAIN_SEPARATOR = keccak256( abi.encode( keccak256(\"EIP712Domain(string name, string version, uint256 chainId, address verifyingContract)\"), keccak256(bytes(name)), keccak256(bytes(\"1\")), chainId, address(this)));}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "string memory",
                                        "name": "_name"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "_symbol"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "_decimals"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_owner"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "name",
                                        "",
                                        "fUSD"
                                    ],
                                    [
                                        "symbol",
                                        "",
                                        "fUSD"
                                    ],
                                    [
                                        "decimals",
                                        "",
                                        "fUSD"
                                    ],
                                    [
                                        "DOMAIN_SEPARATOR",
                                        "",
                                        "fUSD"
                                    ],
                                    [
                                        "_newOwner",
                                        "",
                                        "fUSD"
                                    ],
                                    [
                                        "_newOwnerEffectiveTime",
                                        "",
                                        "fUSD"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "name",
                                        "",
                                        "fUSD"
                                    ],
                                    [
                                        "symbol",
                                        "",
                                        "fUSD"
                                    ],
                                    [
                                        "decimals",
                                        "",
                                        "fUSD"
                                    ],
                                    [
                                        "DOMAIN_SEPARATOR",
                                        "",
                                        "fUSD"
                                    ],
                                    [
                                        "_newOwner",
                                        "",
                                        "fUSD"
                                    ],
                                    [
                                        "_newOwnerEffectiveTime",
                                        "",
                                        "fUSD"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "8263b3e5eeb0b4c828a1c4ba87ef378d"
                            }
                        ],
                        "totalSupply": [
                            {
                                "visibility": "external",
                                "content": "function totalSupply() external view override returns (uint256){ return _totalSupply;}",
                                "modifiers": [
                                    "view",
                                    "override"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_totalSupply",
                                        "",
                                        "fUSD"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c99efcba3a66a06bdc37838a5931e064"
                            }
                        ],
                        "_mint": [
                            {
                                "visibility": "internal",
                                "content": "function _mint(address account, uint256 amount) internal{ require(account != address(0), \"ERC20: mint to the zero address\"); _totalSupply += amount; balanceOf[account] += amount; emit Transfer(address(0), account, amount);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "account"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "balanceOf",
                                        "",
                                        "fUSD"
                                    ],
                                    [
                                        "_totalSupply",
                                        "",
                                        "fUSD"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "balanceOf",
                                        "",
                                        "fUSD"
                                    ],
                                    [
                                        "_totalSupply",
                                        "",
                                        "fUSD"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "f9befc2a74690a259b3456c5a506a125"
                            }
                        ],
                        "_burn": [
                            {
                                "visibility": "internal",
                                "content": "function _burn(address account, uint256 amount) internal{ require(account != address(0), \"ERC20: burn from the zero address\"); balanceOf[account] -= amount; _totalSupply -= amount; emit Transfer(account, address(0), amount);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "account"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "balanceOf",
                                        "",
                                        "fUSD"
                                    ],
                                    [
                                        "_totalSupply",
                                        "",
                                        "fUSD"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "balanceOf",
                                        "",
                                        "fUSD"
                                    ],
                                    [
                                        "_totalSupply",
                                        "",
                                        "fUSD"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "331a7a04314dd362a6eb02ea8de18e08"
                            }
                        ],
                        "approve": [
                            {
                                "visibility": "external",
                                "content": "function approve(address spender, uint256 value) external override returns (bool){ allowance[msg.sender][spender] = value; emit Approval(msg.sender, spender, value); return true;}",
                                "modifiers": [
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "allowance",
                                        "",
                                        "fUSD"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "allowance",
                                        "",
                                        "fUSD"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "1dc0d3d3c3f472f6e0781d8ecdb11e22"
                            }
                        ],
                        "approveAndCall": [
                            {
                                "visibility": "external",
                                "content": "function approveAndCall(address spender, uint256 value, bytes calldata data) external override returns (bool){ allowance[msg.sender][spender] = value; emit Approval(msg.sender, spender, value); return IApprovalReceiver(spender).onTokenApproval(msg.sender, value, data);}",
                                "modifiers": [
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "data"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "allowance",
                                        "",
                                        "fUSD"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "allowance",
                                        "",
                                        "fUSD"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "e00326b8455577e916797d06ee611dc0"
                            }
                        ],
                        "permit": [
                            {
                                "visibility": "external",
                                "content": "function permit(address target, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external override{ require(block.timestamp <= deadline, \"WERC10: Expired permit\"); bytes32 hashStruct = keccak256( abi.encode( PERMIT_TYPEHASH, target, spender, value, nonces[target]++, deadline)); require(verifyEIP712(target, hashStruct, v, r, s) || verifyPersonalSign(target, hashStruct, v, r, s)); allowance[target][spender] = value; emit Approval(target, spender, value);}",
                                "modifiers": [
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "target"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "deadline"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "v"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "r"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "s"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "PERMIT_TYPEHASH",
                                        "",
                                        "fUSD"
                                    ],
                                    [
                                        "nonces",
                                        "",
                                        "fUSD"
                                    ],
                                    [
                                        "allowance",
                                        "",
                                        "fUSD"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "allowance",
                                        "",
                                        "fUSD"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "fUSD.verifyPersonalSign",
                                        "fUSD.verifyEIP712"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "2170d3a382edd20ad2a51cf7880c521a"
                            }
                        ],
                        "transferWithPermit": [
                            {
                                "visibility": "external",
                                "content": "function transferWithPermit(address target, address to, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external returns (bool){ require(block.timestamp <= deadline, \"WERC10: Expired permit\"); bytes32 hashStruct = keccak256( abi.encode( TRANSFER_TYPEHASH, target, to, value, nonces[target]++, deadline)); require(verifyEIP712(target, hashStruct, v, r, s) || verifyPersonalSign(target, hashStruct, v, r, s)); require(to != address(0) || to != address(this)); uint256 balance = balanceOf[target]; require(balance >= value, \"WERC10: transfer amount exceeds balance\"); balanceOf[target] = balance - value; balanceOf[to] += value; emit Transfer(target, to, value); return true;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "target"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "deadline"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "v"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "r"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "s"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "TRANSFER_TYPEHASH",
                                        "",
                                        "fUSD"
                                    ],
                                    [
                                        "balanceOf",
                                        "",
                                        "fUSD"
                                    ],
                                    [
                                        "nonces",
                                        "",
                                        "fUSD"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "balanceOf",
                                        "",
                                        "fUSD"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "fUSD.verifyPersonalSign",
                                        "fUSD.verifyEIP712"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "bafe389394d49547f376e853b866d6cb"
                            }
                        ],
                        "verifyEIP712": [
                            {
                                "visibility": "internal",
                                "content": "function verifyEIP712(address target, bytes32 hashStruct, uint8 v, bytes32 r, bytes32 s) internal view returns (bool){ bytes32 hash = keccak256( abi.encodePacked( \"\\x19\\x01\", DOMAIN_SEPARATOR, hashStruct)); address signer = ecrecover(hash, v, r, s); return (signer != address(0) && signer == target);}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "target"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "hashStruct"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "v"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "r"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "s"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "DOMAIN_SEPARATOR",
                                        "",
                                        "fUSD"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "e9d78f8ce87bbf449045fc861f950266"
                            }
                        ],
                        "verifyPersonalSign": [
                            {
                                "visibility": "internal",
                                "content": "function verifyPersonalSign(address target, bytes32 hashStruct, uint8 v, bytes32 r, bytes32 s) internal pure returns (bool){ bytes32 hash = prefixed(hashStruct); address signer = ecrecover(hash, v, r, s); return (signer != address(0) && signer == target);}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "target"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "hashStruct"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "v"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "r"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "s"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "fUSD.prefixed"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "263538ebdc3acd95f4b32425afc90cb1"
                            }
                        ],
                        "prefixed": [
                            {
                                "visibility": "internal",
                                "content": "function prefixed(bytes32 hash) internal pure returns (bytes32){ return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "hash"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "149d3b1982461565c220241bbe13fdd6"
                            }
                        ],
                        "transfer": [
                            {
                                "visibility": "external",
                                "content": "function transfer(address to, uint256 value) external override returns (bool){ require(to != address(0) || to != address(this)); uint256 balance = balanceOf[msg.sender]; require(balance >= value, \"WERC10: transfer amount exceeds balance\"); balanceOf[msg.sender] = balance - value; balanceOf[to] += value; emit Transfer(msg.sender, to, value); return true;}",
                                "modifiers": [
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "balanceOf",
                                        "",
                                        "fUSD"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "balanceOf",
                                        "",
                                        "fUSD"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "3d81824bb57890911166d6efbc092185"
                            }
                        ],
                        "transferFrom": [
                            {
                                "visibility": "external",
                                "content": "function transferFrom(address from, address to, uint256 value) external override returns (bool){ require(to != address(0) || to != address(this)); if (from != msg.sender){ uint256 allowed = allowance[from][msg.sender]; if (allowed != type (uint256).max){ require(allowed >= value, \"WERC10: request exceeds allowance\"); uint256 reduced = allowed - value; allowance[from][msg.sender] = reduced; emit Approval(from, msg.sender, reduced);}} uint256 balance = balanceOf[from]; require(balance >= value, \"WERC10: transfer amount exceeds balance\"); balanceOf[from] = balance - value; balanceOf[to] += value; emit Transfer(from, to, value); return true;}",
                                "modifiers": [
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "balanceOf",
                                        "",
                                        "fUSD"
                                    ],
                                    [
                                        "allowance",
                                        "",
                                        "fUSD"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "balanceOf",
                                        "",
                                        "fUSD"
                                    ],
                                    [
                                        "allowance",
                                        "",
                                        "fUSD"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "fUSD.type"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "86332d296b6bfb1e74986a46469fc62c"
                            }
                        ],
                        "transferAndCall": [
                            {
                                "visibility": "external",
                                "content": "function transferAndCall(address to, uint value, bytes calldata data) external override returns (bool){ require(to != address(0) || to != address(this)); uint256 balance = balanceOf[msg.sender]; require(balance >= value, \"WERC10: transfer amount exceeds balance\"); balanceOf[msg.sender] = balance - value; balanceOf[to] += value; emit Transfer(msg.sender, to, value); return ITransferReceiver(to).onTokenTransfer(msg.sender, value, data);}",
                                "modifiers": [
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "value"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "data"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "balanceOf",
                                        "",
                                        "fUSD"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "balanceOf",
                                        "",
                                        "fUSD"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "00528ab130bc530fc9c493bdc1f19748"
                            }
                        ]
                    },
                    "modifiers": {
                        "onlyOwner": {
                            "parameters": [],
                            "content": "modifier onlyOwner(){ require(msg.sender == owner(), \"only owner\"); _;}",
                            "reads": [],
                            "writes": [],
                            "external_calls": {
                                "__set__": true,
                                "values": [
                                    "fUSD.owner"
                                ]
                            },
                            "md5": "f066aa80ace803bcfe138e5919d5383e"
                        }
                    },
                    "structs": {},
                    "events": {
                        "LogChangeDCRMOwner": {
                            "event": "LogChangeDCRMOwner",
                            "content": "LogChangeDCRMOwner(address indexed oldOwner, address indexed newOwner, uint indexed effectiveTime)"
                        },
                        "LogSwapin": {
                            "event": "LogSwapin",
                            "content": "LogSwapin(bytes32 indexed txhash, address indexed account, uint amount)"
                        },
                        "LogSwapout": {
                            "event": "LogSwapout",
                            "content": "LogSwapout(address indexed account, address indexed bindaddr, uint amount)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "IERC20": "SafeERC20"
                    }
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "SafeERC20.callOptionalReturn": "b3221f01a369fc6acd5325df9fd85126",
                "IERC20.allowance": "c93791d09d789aed33b9725d482af442",
                "fUSD.owner": "49ca49976e9c068b1a68f9c2befb286b",
                "fUSD.onlyOwner": "f066aa80ace803bcfe138e5919d5383e",
                "fUSD._mint": "f9befc2a74690a259b3456c5a506a125",
                "fUSD._burn": "331a7a04314dd362a6eb02ea8de18e08",
                "fUSD.verifyPersonalSign": "263538ebdc3acd95f4b32425afc90cb1",
                "fUSD.verifyEIP712": "e9d78f8ce87bbf449045fc861f950266",
                "fUSD.prefixed": "149d3b1982461565c220241bbe13fdd6"
            },
            "md5": "441a1ff3ff1e780d305f5cd15c52daeb"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\0x51600B0CfF6Bbf79E7767158C41FD15e968Ec404\\BtcSwapAssetV2.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\0x51600B0CfF6Bbf79E7767158C41FD15e968Ec404\\BtcSwapAssetV2.sol",
            "filename": "BtcSwapAssetV2.sol",
            "imported_contracts": {},
            "contracts": {
                "Context": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "internal",
                                "content": "constructor () internal{}",
                                "modifiers": [],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "2a23d0858cde090e7b199aa638ffd5dd"
                            }
                        ],
                        "_msgSender": [
                            {
                                "visibility": "internal",
                                "content": "function _msgSender() internal view returns (address payable){ return msg.sender;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address payable",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "a9b7db3c77abe3957815043d4f2458b9"
                            }
                        ],
                        "_msgData": [
                            {
                                "visibility": "internal",
                                "content": "function _msgData() internal view returns (bytes memory){ this; return msg.data;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "2b2ce6b0dd727ef0cc3f42de9b60e2df"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "IERC20": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "totalSupply": [
                            {
                                "visibility": "external",
                                "content": "function totalSupply() external view returns (uint256);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "5e1d12e61f4bf4b37161d9b684742570"
                            }
                        ],
                        "balanceOf": [
                            {
                                "visibility": "external",
                                "content": "function balanceOf(address account) external view returns (uint256);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "account"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "3ac17e7782366957c960d337a4a648cd"
                            }
                        ],
                        "transfer": [
                            {
                                "visibility": "external",
                                "content": "function transfer(address recipient, uint256 amount) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "recipient"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "98b540da9047ee99bce7fadde65d04b7"
                            }
                        ],
                        "allowance": [
                            {
                                "visibility": "external",
                                "content": "function allowance(address owner, address spender) external view returns (uint256);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "owner"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c93791d09d789aed33b9725d482af442"
                            }
                        ],
                        "approve": [
                            {
                                "visibility": "external",
                                "content": "function approve(address spender, uint256 amount) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "7c80d707df648dc123a10c69a1150edc"
                            }
                        ],
                        "transferFrom": [
                            {
                                "visibility": "external",
                                "content": "function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "sender"
                                    },
                                    {
                                        "type": "address",
                                        "name": "recipient"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c134d67e13a988b449de71dd226682ab"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {
                        "Transfer": {
                            "event": "Transfer",
                            "content": "Transfer(address indexed from, address indexed to, uint256 value)"
                        },
                        "Approval": {
                            "event": "Approval",
                            "content": "Approval(address indexed owner, address indexed spender, uint256 value)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": [
                        [
                            "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\0x51600B0CfF6Bbf79E7767158C41FD15e968Ec404\\BtcSwapAssetV2.sol",
                            "ERC20"
                        ],
                        [
                            "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\0x51600B0CfF6Bbf79E7767158C41FD15e968Ec404\\BtcSwapAssetV2.sol",
                            "ERC20Detailed"
                        ]
                    ]
                },
                "SafeMath": {
                    "type": {
                        "__CT__": true,
                        "value": 2
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "add": [
                            {
                                "visibility": "internal",
                                "content": "function add(uint256 a, uint256 b) internal pure returns (uint256){ uint256 c = a + b; require(c >= a, \"SafeMath: addition overflow\"); return c;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "a"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "b"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "b83a169007730f80a7fc79bee8748fff"
                            }
                        ],
                        "sub": [
                            {
                                "visibility": "internal",
                                "content": "function sub(uint256 a, uint256 b) internal pure returns (uint256){ return sub(a, b, \"SafeMath: subtraction overflow\");}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "a"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "b"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SafeMath.sub"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "972c2868144778b0617e55a6f97163a0"
                            },
                            {
                                "visibility": "internal",
                                "content": "function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256){ require(b <= a, errorMessage); uint256 c = a - b; return c;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "a"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "b"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "errorMessage"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SafeMath.sub"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "5005b7d925d95cb4c4c0f092235e9f5d"
                            }
                        ],
                        "mul": [
                            {
                                "visibility": "internal",
                                "content": "function mul(uint256 a, uint256 b) internal pure returns (uint256){ if (a == 0){ return 0;} uint256 c = a * b; require(c / a == b, \"SafeMath: multiplication overflow\"); return c;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "a"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "b"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "5622448ca508810ce734d0cb10517566"
                            }
                        ],
                        "div": [
                            {
                                "visibility": "internal",
                                "content": "function div(uint256 a, uint256 b) internal pure returns (uint256){ return div(a, b, \"SafeMath: division by zero\");}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "a"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "b"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SafeMath.div"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "371f945bc2211ac7c63e7277fb7222a7"
                            },
                            {
                                "visibility": "internal",
                                "content": "function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256){ require(b > 0, errorMessage); uint256 c = a / b; return c;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "a"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "b"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "errorMessage"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SafeMath.div"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "bff731811ec791ca1a5d6bc88d8d75a5"
                            }
                        ],
                        "mod": [
                            {
                                "visibility": "internal",
                                "content": "function mod(uint256 a, uint256 b) internal pure returns (uint256){ return mod(a, b, \"SafeMath: modulo by zero\");}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "a"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "b"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SafeMath.mod"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "50a3733021c21a71491ee85ffb90a2a4"
                            },
                            {
                                "visibility": "internal",
                                "content": "function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256){ require(b != 0, errorMessage); return a % b;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "a"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "b"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "errorMessage"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SafeMath.mod"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "8ec02abe488c084092f946ae1c4a8ccd"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "ERC20": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "Context",
                        "IERC20"
                    ],
                    "state_variables": {
                        "_balances": {
                            "type": "mapping (address => uint256)",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping (address => uint256) private _balances;"
                        },
                        "_allowances": {
                            "type": "mapping (address => mapping (address => uint256))",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping (address => mapping (address => uint256)) private _allowances;"
                        },
                        "_totalSupply": {
                            "type": "uint256",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256 private _totalSupply;"
                        }
                    },
                    "functions": {
                        "totalSupply": [
                            {
                                "visibility": "public",
                                "content": "function totalSupply() public view returns (uint256){ return _totalSupply;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_totalSupply",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "5e6ad72e6028056bb2255274ad077161"
                            }
                        ],
                        "balanceOf": [
                            {
                                "visibility": "public",
                                "content": "function balanceOf(address account) public view returns (uint256){ return _balances[account];}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "account"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_balances",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "ad4eae4ea23632ef2838d60fcaf49fde"
                            }
                        ],
                        "transfer": [
                            {
                                "visibility": "public",
                                "content": "function transfer(address recipient, uint256 amount) public returns (bool){ _transfer(_msgSender(), recipient, amount); return true;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "recipient"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20._msgSender",
                                        "ERC20._transfer"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "a2516d20ff5e2dfd4d99847fff76a3f2"
                            }
                        ],
                        "allowance": [
                            {
                                "visibility": "public",
                                "content": "function allowance(address owner, address spender) public view returns (uint256){ return _allowances[owner][spender];}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "owner"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_allowances",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "592bc064168755118c9f037687aa6211"
                            }
                        ],
                        "approve": [
                            {
                                "visibility": "public",
                                "content": "function approve(address spender, uint256 amount) public returns (bool){ _approve(_msgSender(), spender, amount); return true;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20._msgSender",
                                        "ERC20._approve"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "dde63135ec4b9e7ee1cc6eb25da3b8ba"
                            }
                        ],
                        "transferFrom": [
                            {
                                "visibility": "public",
                                "content": "function transferFrom(address sender, address recipient, uint256 amount) public returns (bool){ _transfer(sender, recipient, amount); _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\")); return true;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "sender"
                                    },
                                    {
                                        "type": "address",
                                        "name": "recipient"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_allowances",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20._msgSender",
                                        "ERC20._approve",
                                        "ERC20._transfer"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "3605d7f86a87c3d1b2a53d3f1493ae68"
                            }
                        ],
                        "increaseAllowance": [
                            {
                                "visibility": "public",
                                "content": "function increaseAllowance(address spender, uint256 addedValue) public returns (bool){ _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue)); return true;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "addedValue"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_allowances",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20._msgSender",
                                        "ERC20._approve"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "66af2c46d28cf0145304c631c700f803"
                            }
                        ],
                        "decreaseAllowance": [
                            {
                                "visibility": "public",
                                "content": "function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool){ _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\")); return true;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "subtractedValue"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_allowances",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20._msgSender",
                                        "ERC20._approve"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "9f3aa62efc251534839eaa0c93bba8b3"
                            }
                        ],
                        "_transfer": [
                            {
                                "visibility": "internal",
                                "content": "function _transfer(address sender, address recipient, uint256 amount) internal{ require(sender != address(0), \"ERC20: transfer from the zero address\"); require(recipient != address(0), \"ERC20: transfer to the zero address\"); _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\"); _balances[recipient] = _balances[recipient].add(amount); emit Transfer(sender, recipient, amount);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "sender"
                                    },
                                    {
                                        "type": "address",
                                        "name": "recipient"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_balances",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_balances",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "1ceaa1124f36ab43fd811f2d78d1431e"
                            }
                        ],
                        "_mint": [
                            {
                                "visibility": "internal",
                                "content": "function _mint(address account, uint256 amount) internal{ require(account != address(0), \"ERC20: mint to the zero address\"); _totalSupply = _totalSupply.add(amount); _balances[account] = _balances[account].add(amount); emit Transfer(address(0), account, amount);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "account"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_balances",
                                        "",
                                        "ERC20"
                                    ],
                                    [
                                        "_totalSupply",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_balances",
                                        "",
                                        "ERC20"
                                    ],
                                    [
                                        "_totalSupply",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "_totalSupply.add"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "1849059c445ce826b07aabafc80e1d59"
                            }
                        ],
                        "_burn": [
                            {
                                "visibility": "internal",
                                "content": "function _burn(address account, uint256 amount) internal{ require(account != address(0), \"ERC20: burn from the zero address\"); _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\"); _totalSupply = _totalSupply.sub(amount); emit Transfer(account, address(0), amount);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "account"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_balances",
                                        "",
                                        "ERC20"
                                    ],
                                    [
                                        "_totalSupply",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_balances",
                                        "",
                                        "ERC20"
                                    ],
                                    [
                                        "_totalSupply",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "_totalSupply.sub"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "dc244a93980fa244faa9d765efc9913a"
                            }
                        ],
                        "_approve": [
                            {
                                "visibility": "internal",
                                "content": "function _approve(address owner, address spender, uint256 amount) internal{ require(owner != address(0), \"ERC20: approve from the zero address\"); require(spender != address(0), \"ERC20: approve to the zero address\"); _allowances[owner][spender] = amount; emit Approval(owner, spender, amount);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "owner"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_allowances",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_allowances",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c73ffec8be8861a4433ee22a6bf25bb3"
                            }
                        ],
                        "_burnFrom": [
                            {
                                "visibility": "internal",
                                "content": "function _burnFrom(address account, uint256 amount) internal{ _burn(account, amount); _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "account"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_allowances",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20._burn",
                                        "ERC20._msgSender",
                                        "ERC20._approve"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "29791211cc2110eec5b89df326e8bbc1"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "uint256": "SafeMath"
                    }
                },
                "ERC20Detailed": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "IERC20"
                    ],
                    "state_variables": {
                        "_name": {
                            "type": "string",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "string private _name;"
                        },
                        "_symbol": {
                            "type": "string",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "string private _symbol;"
                        },
                        "_decimals": {
                            "type": "uint8",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint8 private _decimals;"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (string memory name, string memory symbol, uint8 decimals) public{ _name = name; _symbol = symbol; _decimals = decimals;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "string memory",
                                        "name": "name"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "symbol"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "decimals"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_name",
                                        "",
                                        "ERC20Detailed"
                                    ],
                                    [
                                        "_symbol",
                                        "",
                                        "ERC20Detailed"
                                    ],
                                    [
                                        "_decimals",
                                        "",
                                        "ERC20Detailed"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_name",
                                        "",
                                        "ERC20Detailed"
                                    ],
                                    [
                                        "_symbol",
                                        "",
                                        "ERC20Detailed"
                                    ],
                                    [
                                        "_decimals",
                                        "",
                                        "ERC20Detailed"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "d2404ecdfe6816aa8a876e47591b5030"
                            }
                        ],
                        "name": [
                            {
                                "visibility": "public",
                                "content": "function name() public view returns (string memory){ return _name;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "string memory",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_name",
                                        "",
                                        "ERC20Detailed"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "8572f20ecd43eb9f02a2efc81fdc4578"
                            }
                        ],
                        "symbol": [
                            {
                                "visibility": "public",
                                "content": "function symbol() public view returns (string memory){ return _symbol;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "string memory",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_symbol",
                                        "",
                                        "ERC20Detailed"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "b002d129ce65d0f4df01da6ede3b5e4d"
                            }
                        ],
                        "decimals": [
                            {
                                "visibility": "public",
                                "content": "function decimals() public view returns (uint8){ return _decimals;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint8",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_decimals",
                                        "",
                                        "ERC20Detailed"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c396c5ca1d21fa7e84c10681e8d59b07"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "BtcSwapAssetV2": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "ERC20",
                        "ERC20Detailed"
                    ],
                    "state_variables": {
                        "_oldOwner": {
                            "type": "address",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address private _oldOwner;"
                        },
                        "_newOwner": {
                            "type": "address",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address private _newOwner;"
                        },
                        "_newOwnerEffectiveHeight": {
                            "type": "uint256",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256 private _newOwnerEffectiveHeight;"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor () public ERC20Detailed(\"ANY Bitcoin\", \"anyBTC\", 8){ _newOwner = msg.sender; _newOwnerEffectiveHeight = block.number;}",
                                "modifiers": [
                                    "ERC20Detailed(\"ANY Bitcoin\", \"anyBTC\", 8)"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [
                                    [
                                        "_newOwner",
                                        "",
                                        "BtcSwapAssetV2"
                                    ],
                                    [
                                        "_newOwnerEffectiveHeight",
                                        "",
                                        "BtcSwapAssetV2"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_newOwner",
                                        "",
                                        "BtcSwapAssetV2"
                                    ],
                                    [
                                        "_newOwnerEffectiveHeight",
                                        "",
                                        "BtcSwapAssetV2"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "31f8f916b74795c8b923f9f480434ceb"
                            }
                        ],
                        "owner": [
                            {
                                "visibility": "public",
                                "content": "function owner() public view returns (address){ if (block.number >= _newOwnerEffectiveHeight){ return _newOwner;} return _oldOwner;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_oldOwner",
                                        "",
                                        "BtcSwapAssetV2"
                                    ],
                                    [
                                        "_newOwner",
                                        "",
                                        "BtcSwapAssetV2"
                                    ],
                                    [
                                        "_newOwnerEffectiveHeight",
                                        "",
                                        "BtcSwapAssetV2"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "a527dfd59a62d924ab665f02488faa88"
                            }
                        ],
                        "changeDCRMOwner": [
                            {
                                "visibility": "public",
                                "content": "function changeDCRMOwner(address newOwner) public onlyOwner returns (bool){ require(newOwner != address(0), \"new owner is the zero address\"); _oldOwner = owner(); _newOwner = newOwner; _newOwnerEffectiveHeight = block.number + 13300; emit LogChangeDCRMOwner(_oldOwner, _newOwner, _newOwnerEffectiveHeight); return true;}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "newOwner"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_oldOwner",
                                        "",
                                        "BtcSwapAssetV2"
                                    ],
                                    [
                                        "_newOwner",
                                        "",
                                        "BtcSwapAssetV2"
                                    ],
                                    [
                                        "_newOwnerEffectiveHeight",
                                        "",
                                        "BtcSwapAssetV2"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_oldOwner",
                                        "",
                                        "BtcSwapAssetV2"
                                    ],
                                    [
                                        "_newOwner",
                                        "",
                                        "BtcSwapAssetV2"
                                    ],
                                    [
                                        "_newOwnerEffectiveHeight",
                                        "",
                                        "BtcSwapAssetV2"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BtcSwapAssetV2.owner",
                                        "BtcSwapAssetV2.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "831f67aa1c7c6148dab1eaedd653735d"
                            }
                        ],
                        "Swapin": [
                            {
                                "visibility": "public",
                                "content": "function Swapin(bytes32 txhash, address account, uint256 amount) public onlyOwner returns (bool){ _mint(account, amount); emit LogSwapin(txhash, account, amount); return true;}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "txhash"
                                    },
                                    {
                                        "type": "address",
                                        "name": "account"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20._mint",
                                        "BtcSwapAssetV2.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "499c46eb22e35b6fbd2f4115b36069e0"
                            }
                        ],
                        "Swapout": [
                            {
                                "visibility": "public",
                                "content": "function Swapout(uint256 amount, string memory bindaddr) public returns (bool){ verifyBindAddr(bindaddr); _burn(_msgSender(), amount); emit LogSwapout(_msgSender(), amount, bindaddr); return true;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "bindaddr"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20._burn",
                                        "BtcSwapAssetV2.verifyBindAddr",
                                        "ERC20._msgSender"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "c1a193c1b597bddd80450b0126f0c761"
                            }
                        ],
                        "verifyBindAddr": [
                            {
                                "visibility": "internal",
                                "content": "function verifyBindAddr(string memory bindaddr) pure internal{ uint length = bytes(bindaddr).length; require(length >= 26, \"address length is too short\"); byte ch = bytes(bindaddr)[0]; byte ch2 = bytes(bindaddr)[1]; byte ch3 = bytes(bindaddr)[2]; if (ch == '1' || ch == '3'){ require(length <= 34, \"mainnet address length is too long\");} else if (ch == '2' || ch == 'm' || ch == 'n'){ require(length <= 35, \"testnet address length is too long\");} else if ((ch3 == '1') && ((ch == 'b' && ch2 == 'c') || (ch == 't' && ch2 == 'b'))){ require(length == 42 || length == 62, \"segwit address length is not 42 or 62\");} else{ require(false, \"unsupported address leading symbol\");}}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "string memory",
                                        "name": "bindaddr"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c224bce1853eba7ba0fb8e81b7b67dab"
                            }
                        ]
                    },
                    "modifiers": {
                        "onlyOwner": {
                            "parameters": [],
                            "content": "modifier onlyOwner(){ require(msg.sender == owner(), \"only owner\"); _;}",
                            "reads": [],
                            "writes": [],
                            "external_calls": {
                                "__set__": true,
                                "values": [
                                    "BtcSwapAssetV2.owner"
                                ]
                            },
                            "md5": "f066aa80ace803bcfe138e5919d5383e"
                        }
                    },
                    "structs": {},
                    "events": {
                        "LogChangeDCRMOwner": {
                            "event": "LogChangeDCRMOwner",
                            "content": "LogChangeDCRMOwner(address indexed oldOwner, address indexed newOwner, uint indexed effectiveHeight)"
                        },
                        "LogSwapin": {
                            "event": "LogSwapin",
                            "content": "LogSwapin(bytes32 indexed txhash, address indexed account, uint amount)"
                        },
                        "LogSwapout": {
                            "event": "LogSwapout",
                            "content": "LogSwapout(address indexed account, uint amount, string bindaddr)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "SafeMath.sub": "972c2868144778b0617e55a6f97163a0",
                "SafeMath.div": "371f945bc2211ac7c63e7277fb7222a7",
                "SafeMath.mod": "50a3733021c21a71491ee85ffb90a2a4",
                "ERC20._transfer": "1ceaa1124f36ab43fd811f2d78d1431e",
                "ERC20._approve": "c73ffec8be8861a4433ee22a6bf25bb3",
                "ERC20._burn": "dc244a93980fa244faa9d765efc9913a",
                "BtcSwapAssetV2.owner": "a527dfd59a62d924ab665f02488faa88",
                "BtcSwapAssetV2.onlyOwner": "f066aa80ace803bcfe138e5919d5383e",
                "ERC20._mint": "1849059c445ce826b07aabafc80e1d59",
                "BtcSwapAssetV2.verifyBindAddr": "c224bce1853eba7ba0fb8e81b7b67dab"
            },
            "md5": "87f8326c3764eadba960c939f88cd7b1"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\0x5C08b51Ddbe8ba76e07Be79975906c39AeF2893a\\fKRW.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\0x5C08b51Ddbe8ba76e07Be79975906c39AeF2893a\\fKRW.sol",
            "filename": "fKRW.sol",
            "imported_contracts": {},
            "contracts": {
                "IERC20": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "totalSupply": [
                            {
                                "visibility": "external",
                                "content": "function totalSupply() external view returns (uint256);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "5e1d12e61f4bf4b37161d9b684742570"
                            }
                        ],
                        "balanceOf": [
                            {
                                "visibility": "external",
                                "content": "function balanceOf(address account) external view returns (uint256);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "account"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "3ac17e7782366957c960d337a4a648cd"
                            }
                        ],
                        "transfer": [
                            {
                                "visibility": "external",
                                "content": "function transfer(address recipient, uint256 amount) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "recipient"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "98b540da9047ee99bce7fadde65d04b7"
                            }
                        ],
                        "allowance": [
                            {
                                "visibility": "external",
                                "content": "function allowance(address owner, address spender) external view returns (uint256);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "owner"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c93791d09d789aed33b9725d482af442"
                            }
                        ],
                        "approve": [
                            {
                                "visibility": "external",
                                "content": "function approve(address spender, uint256 amount) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "7c80d707df648dc123a10c69a1150edc"
                            }
                        ],
                        "transferFrom": [
                            {
                                "visibility": "external",
                                "content": "function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "sender"
                                    },
                                    {
                                        "type": "address",
                                        "name": "recipient"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c134d67e13a988b449de71dd226682ab"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {
                        "Transfer": {
                            "event": "Transfer",
                            "content": "Transfer(address indexed from, address indexed to, uint256 value)"
                        },
                        "Approval": {
                            "event": "Approval",
                            "content": "Approval(address indexed owner, address indexed spender, uint256 value)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": [
                        [
                            "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\0x5C08b51Ddbe8ba76e07Be79975906c39AeF2893a\\fKRW.sol",
                            "IWERC10"
                        ]
                    ]
                },
                "IERC2612": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "permit": [
                            {
                                "visibility": "external",
                                "content": "function permit(address owner, address spender, uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "owner"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "deadline"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "v"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "r"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "s"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "ee697c2ed8926120653d983b87211c57"
                            }
                        ],
                        "nonces": [
                            {
                                "visibility": "external",
                                "content": "function nonces(address owner) external view returns (uint256);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "owner"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "357d86867bcb5e898ef823b379affee2"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": [
                        [
                            "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\0x5C08b51Ddbe8ba76e07Be79975906c39AeF2893a\\fKRW.sol",
                            "IWERC10"
                        ]
                    ]
                },
                "IWERC10": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "IERC20",
                        "IERC2612"
                    ],
                    "state_variables": {},
                    "functions": {
                        "approveAndCall": [
                            {
                                "visibility": "external",
                                "content": "function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "data"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "ba67696b839a7bd9975ba18122a39a6b"
                            }
                        ],
                        "transferAndCall": [
                            {
                                "visibility": "external",
                                "content": "function transferAndCall(address to, uint value, bytes calldata data) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "value"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "data"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "a90050203027dc243e523faf19616562"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": [
                        [
                            "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\0x5C08b51Ddbe8ba76e07Be79975906c39AeF2893a\\fKRW.sol",
                            "fKRW"
                        ]
                    ]
                },
                "ITransferReceiver": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "onTokenTransfer": [
                            {
                                "visibility": "external",
                                "content": "function onTokenTransfer(address, uint, bytes calldata) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": null
                                    },
                                    {
                                        "type": "uint",
                                        "name": null
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": null
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c910c0ea87c7bb0a4a92ec4a9c23e957"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                },
                "IApprovalReceiver": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "onTokenApproval": [
                            {
                                "visibility": "external",
                                "content": "function onTokenApproval(address, uint, bytes calldata) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": null
                                    },
                                    {
                                        "type": "uint",
                                        "name": null
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": null
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "97c57f6b810f5f7752c7ecf324d8c095"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                },
                "Address": {
                    "type": {
                        "__CT__": true,
                        "value": 2
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "isContract": [
                            {
                                "visibility": "internal",
                                "content": "function isContract(address account) internal view returns (bool){ bytes32 codehash; bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470; assembly{ codehash := extcodehash(account)} return (codehash != 0x0 && codehash != accountHash);}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "account"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "03213a0086847231ca4b607f3e716e3b"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "SafeERC20": {
                    "type": {
                        "__CT__": true,
                        "value": 2
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "safeTransfer": [
                            {
                                "visibility": "internal",
                                "content": "function safeTransfer(IERC20 token, address to, uint value) internal{ callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "IERC20",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "value"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SafeERC20.callOptionalReturn"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "709af4efc371f87cb5fe84501abec571"
                            }
                        ],
                        "safeTransferFrom": [
                            {
                                "visibility": "internal",
                                "content": "function safeTransferFrom(IERC20 token, address from, address to, uint value) internal{ callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "IERC20",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "value"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SafeERC20.callOptionalReturn"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "c2e05da458e5ff013c4f69105d40b298"
                            }
                        ],
                        "safeApprove": [
                            {
                                "visibility": "internal",
                                "content": "function safeApprove(IERC20 token, address spender, uint value) internal{ require((value == 0) || (token.allowance(address(this), spender) == 0), \"SafeERC20: approve from non-zero to non-zero allowance\" ); callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "IERC20",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "value"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "allowance",
                                        "",
                                        "fKRW"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "IERC20.allowance",
                                        "SafeERC20.callOptionalReturn"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "6ef93657da7bbc75f716b7fda57ac589"
                            }
                        ],
                        "callOptionalReturn": [
                            {
                                "visibility": "private",
                                "content": "function callOptionalReturn(IERC20 token, bytes memory data) private{ require(address(token).isContract(), \"SafeERC20: call to non- contract \"); (bool success, bytes memory returndata) = address(token).call(data); require(success, \"SafeERC20: low-level call failed\"); if (returndata.length > 0){ require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "IERC20",
                                        "name": "token"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "data"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "IERC20.isContract",
                                        "IERC20.data"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "b3221f01a369fc6acd5325df9fd85126"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "address": "Address"
                    }
                },
                "fKRW": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "IWERC10"
                    ],
                    "state_variables": {
                        "name": {
                            "type": "string",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "string public name;"
                        },
                        "symbol": {
                            "type": "string",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "string public symbol;"
                        },
                        "decimals": {
                            "type": "uint8",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint8 public immutable decimals;"
                        },
                        "PERMIT_TYPEHASH": {
                            "type": "bytes32",
                            "visibility": "public",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "keccak256(\"Permit(address owner, address spender, uint256 value, uint256 nonce, uint256 deadline)\")",
                            "content": "bytes32 public constant PERMIT_TYPEHASH = keccak256(\"Permit(address owner, address spender, uint256 value, uint256 nonce, uint256 deadline)\");"
                        },
                        "TRANSFER_TYPEHASH": {
                            "type": "bytes32",
                            "visibility": "public",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "keccak256(\"Transfer(address owner, address to, uint256 value, uint256 nonce, uint256 deadline)\")",
                            "content": "bytes32 public constant TRANSFER_TYPEHASH = keccak256(\"Transfer(address owner, address to, uint256 value, uint256 nonce, uint256 deadline)\");"
                        },
                        "DOMAIN_SEPARATOR": {
                            "type": "bytes32",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": null,
                            "content": "bytes32 public immutable DOMAIN_SEPARATOR;"
                        },
                        "balanceOf": {
                            "type": "mapping (address => uint256)",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": true,
                            "initial_value": null,
                            "content": "mapping (address => uint256) public override balanceOf;"
                        },
                        "_totalSupply": {
                            "type": "uint256",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256 private _totalSupply;"
                        },
                        "_oldOwner": {
                            "type": "address",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address private _oldOwner;"
                        },
                        "_newOwner": {
                            "type": "address",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address private _newOwner;"
                        },
                        "_newOwnerEffectiveTime": {
                            "type": "uint256",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256 private _newOwnerEffectiveTime;"
                        },
                        "nonces": {
                            "type": "mapping (address => uint256)",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": true,
                            "initial_value": null,
                            "content": "mapping (address => uint256) public override nonces;"
                        },
                        "allowance": {
                            "type": "mapping (address => mapping (address => uint256))",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": true,
                            "initial_value": null,
                            "content": "mapping (address => mapping (address => uint256)) public override allowance;"
                        }
                    },
                    "functions": {
                        "owner": [
                            {
                                "visibility": "public",
                                "content": "function owner() public view returns (address){ if (block.timestamp >= _newOwnerEffectiveTime){ return _newOwner;} return _oldOwner;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_oldOwner",
                                        "",
                                        "fKRW"
                                    ],
                                    [
                                        "_newOwner",
                                        "",
                                        "fKRW"
                                    ],
                                    [
                                        "_newOwnerEffectiveTime",
                                        "",
                                        "fKRW"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "49ca49976e9c068b1a68f9c2befb286b"
                            }
                        ],
                        "changeDCRMOwner": [
                            {
                                "visibility": "public",
                                "content": "function changeDCRMOwner(address newOwner) public onlyOwner returns (bool){ require(newOwner != address(0), \"new owner is the zero address\"); _oldOwner = owner(); _newOwner = newOwner; _newOwnerEffectiveTime = block.timestamp + 2*24*3600; emit LogChangeDCRMOwner(_oldOwner, _newOwner, _newOwnerEffectiveTime); return true;}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "newOwner"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_oldOwner",
                                        "",
                                        "fKRW"
                                    ],
                                    [
                                        "_newOwner",
                                        "",
                                        "fKRW"
                                    ],
                                    [
                                        "_newOwnerEffectiveTime",
                                        "",
                                        "fKRW"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_oldOwner",
                                        "",
                                        "fKRW"
                                    ],
                                    [
                                        "_newOwner",
                                        "",
                                        "fKRW"
                                    ],
                                    [
                                        "_newOwnerEffectiveTime",
                                        "",
                                        "fKRW"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "fKRW.onlyOwner",
                                        "fKRW.owner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "95f6352ddb9980a09689e1f876ab52d5"
                            }
                        ],
                        "Swapin": [
                            {
                                "visibility": "public",
                                "content": "function Swapin(bytes32 txhash, address account, uint256 amount) public onlyOwner returns (bool){ _mint(account, amount); emit LogSwapin(txhash, account, amount); return true;}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "txhash"
                                    },
                                    {
                                        "type": "address",
                                        "name": "account"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "fKRW.onlyOwner",
                                        "fKRW._mint"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "499c46eb22e35b6fbd2f4115b36069e0"
                            }
                        ],
                        "Swapout": [
                            {
                                "visibility": "public",
                                "content": "function Swapout(uint256 amount, address bindaddr) public returns (bool){ require(bindaddr != address(0), \"bind address is the zero address\"); _burn(msg.sender, amount); emit LogSwapout(msg.sender, bindaddr, amount); return true;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "address",
                                        "name": "bindaddr"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "fKRW._burn"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "6e0930ee3a5e70ddd277fface23a8a61"
                            }
                        ],
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (string memory _name, string memory _symbol, uint8 _decimals, address _owner){ name = _name; symbol = _symbol; decimals = _decimals; _newOwner = _owner; _newOwnerEffectiveTime = block.timestamp; uint256 chainId; assembly{ chainId := chainid()} DOMAIN_SEPARATOR = keccak256( abi.encode( keccak256(\"EIP712Domain(string name, string version, uint256 chainId, address verifyingContract)\"), keccak256(bytes(name)), keccak256(bytes(\"1\")), chainId, address(this)));}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "string memory",
                                        "name": "_name"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "_symbol"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "_decimals"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_owner"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "name",
                                        "",
                                        "fKRW"
                                    ],
                                    [
                                        "symbol",
                                        "",
                                        "fKRW"
                                    ],
                                    [
                                        "decimals",
                                        "",
                                        "fKRW"
                                    ],
                                    [
                                        "DOMAIN_SEPARATOR",
                                        "",
                                        "fKRW"
                                    ],
                                    [
                                        "_newOwner",
                                        "",
                                        "fKRW"
                                    ],
                                    [
                                        "_newOwnerEffectiveTime",
                                        "",
                                        "fKRW"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "name",
                                        "",
                                        "fKRW"
                                    ],
                                    [
                                        "symbol",
                                        "",
                                        "fKRW"
                                    ],
                                    [
                                        "decimals",
                                        "",
                                        "fKRW"
                                    ],
                                    [
                                        "DOMAIN_SEPARATOR",
                                        "",
                                        "fKRW"
                                    ],
                                    [
                                        "_newOwner",
                                        "",
                                        "fKRW"
                                    ],
                                    [
                                        "_newOwnerEffectiveTime",
                                        "",
                                        "fKRW"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "8263b3e5eeb0b4c828a1c4ba87ef378d"
                            }
                        ],
                        "totalSupply": [
                            {
                                "visibility": "external",
                                "content": "function totalSupply() external view override returns (uint256){ return _totalSupply;}",
                                "modifiers": [
                                    "view",
                                    "override"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_totalSupply",
                                        "",
                                        "fKRW"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c99efcba3a66a06bdc37838a5931e064"
                            }
                        ],
                        "_mint": [
                            {
                                "visibility": "internal",
                                "content": "function _mint(address account, uint256 amount) internal{ require(account != address(0), \"ERC20: mint to the zero address\"); _totalSupply += amount; balanceOf[account] += amount; emit Transfer(address(0), account, amount);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "account"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "balanceOf",
                                        "",
                                        "fKRW"
                                    ],
                                    [
                                        "_totalSupply",
                                        "",
                                        "fKRW"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "balanceOf",
                                        "",
                                        "fKRW"
                                    ],
                                    [
                                        "_totalSupply",
                                        "",
                                        "fKRW"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "f9befc2a74690a259b3456c5a506a125"
                            }
                        ],
                        "_burn": [
                            {
                                "visibility": "internal",
                                "content": "function _burn(address account, uint256 amount) internal{ require(account != address(0), \"ERC20: burn from the zero address\"); balanceOf[account] -= amount; _totalSupply -= amount; emit Transfer(account, address(0), amount);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "account"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "balanceOf",
                                        "",
                                        "fKRW"
                                    ],
                                    [
                                        "_totalSupply",
                                        "",
                                        "fKRW"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "balanceOf",
                                        "",
                                        "fKRW"
                                    ],
                                    [
                                        "_totalSupply",
                                        "",
                                        "fKRW"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "331a7a04314dd362a6eb02ea8de18e08"
                            }
                        ],
                        "approve": [
                            {
                                "visibility": "external",
                                "content": "function approve(address spender, uint256 value) external override returns (bool){ allowance[msg.sender][spender] = value; emit Approval(msg.sender, spender, value); return true;}",
                                "modifiers": [
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "allowance",
                                        "",
                                        "fKRW"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "allowance",
                                        "",
                                        "fKRW"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "1dc0d3d3c3f472f6e0781d8ecdb11e22"
                            }
                        ],
                        "approveAndCall": [
                            {
                                "visibility": "external",
                                "content": "function approveAndCall(address spender, uint256 value, bytes calldata data) external override returns (bool){ allowance[msg.sender][spender] = value; emit Approval(msg.sender, spender, value); return IApprovalReceiver(spender).onTokenApproval(msg.sender, value, data);}",
                                "modifiers": [
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "data"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "allowance",
                                        "",
                                        "fKRW"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "allowance",
                                        "",
                                        "fKRW"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "e00326b8455577e916797d06ee611dc0"
                            }
                        ],
                        "permit": [
                            {
                                "visibility": "external",
                                "content": "function permit(address target, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external override{ require(block.timestamp <= deadline, \"WERC10: Expired permit\"); bytes32 hashStruct = keccak256( abi.encode( PERMIT_TYPEHASH, target, spender, value, nonces[target]++, deadline)); require(verifyEIP712(target, hashStruct, v, r, s) || verifyPersonalSign(target, hashStruct, v, r, s)); allowance[target][spender] = value; emit Approval(target, spender, value);}",
                                "modifiers": [
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "target"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "deadline"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "v"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "r"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "s"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "PERMIT_TYPEHASH",
                                        "",
                                        "fKRW"
                                    ],
                                    [
                                        "nonces",
                                        "",
                                        "fKRW"
                                    ],
                                    [
                                        "allowance",
                                        "",
                                        "fKRW"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "allowance",
                                        "",
                                        "fKRW"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "fKRW.verifyEIP712",
                                        "fKRW.verifyPersonalSign"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "2170d3a382edd20ad2a51cf7880c521a"
                            }
                        ],
                        "transferWithPermit": [
                            {
                                "visibility": "external",
                                "content": "function transferWithPermit(address target, address to, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external returns (bool){ require(block.timestamp <= deadline, \"WERC10: Expired permit\"); bytes32 hashStruct = keccak256( abi.encode( TRANSFER_TYPEHASH, target, to, value, nonces[target]++, deadline)); require(verifyEIP712(target, hashStruct, v, r, s) || verifyPersonalSign(target, hashStruct, v, r, s)); require(to != address(0) || to != address(this)); uint256 balance = balanceOf[target]; require(balance >= value, \"WERC10: transfer amount exceeds balance\"); balanceOf[target] = balance - value; balanceOf[to] += value; emit Transfer(target, to, value); return true;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "target"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "deadline"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "v"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "r"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "s"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "TRANSFER_TYPEHASH",
                                        "",
                                        "fKRW"
                                    ],
                                    [
                                        "balanceOf",
                                        "",
                                        "fKRW"
                                    ],
                                    [
                                        "nonces",
                                        "",
                                        "fKRW"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "balanceOf",
                                        "",
                                        "fKRW"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "fKRW.verifyEIP712",
                                        "fKRW.verifyPersonalSign"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "bafe389394d49547f376e853b866d6cb"
                            }
                        ],
                        "verifyEIP712": [
                            {
                                "visibility": "internal",
                                "content": "function verifyEIP712(address target, bytes32 hashStruct, uint8 v, bytes32 r, bytes32 s) internal view returns (bool){ bytes32 hash = keccak256( abi.encodePacked( \"\\x19\\x01\", DOMAIN_SEPARATOR, hashStruct)); address signer = ecrecover(hash, v, r, s); return (signer != address(0) && signer == target);}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "target"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "hashStruct"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "v"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "r"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "s"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "DOMAIN_SEPARATOR",
                                        "",
                                        "fKRW"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "e9d78f8ce87bbf449045fc861f950266"
                            }
                        ],
                        "verifyPersonalSign": [
                            {
                                "visibility": "internal",
                                "content": "function verifyPersonalSign(address target, bytes32 hashStruct, uint8 v, bytes32 r, bytes32 s) internal pure returns (bool){ bytes32 hash = prefixed(hashStruct); address signer = ecrecover(hash, v, r, s); return (signer != address(0) && signer == target);}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "target"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "hashStruct"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "v"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "r"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "s"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "fKRW.prefixed"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "263538ebdc3acd95f4b32425afc90cb1"
                            }
                        ],
                        "prefixed": [
                            {
                                "visibility": "internal",
                                "content": "function prefixed(bytes32 hash) internal pure returns (bytes32){ return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "hash"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "149d3b1982461565c220241bbe13fdd6"
                            }
                        ],
                        "transfer": [
                            {
                                "visibility": "external",
                                "content": "function transfer(address to, uint256 value) external override returns (bool){ require(to != address(0) || to != address(this)); uint256 balance = balanceOf[msg.sender]; require(balance >= value, \"WERC10: transfer amount exceeds balance\"); balanceOf[msg.sender] = balance - value; balanceOf[to] += value; emit Transfer(msg.sender, to, value); return true;}",
                                "modifiers": [
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "balanceOf",
                                        "",
                                        "fKRW"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "balanceOf",
                                        "",
                                        "fKRW"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "3d81824bb57890911166d6efbc092185"
                            }
                        ],
                        "transferFrom": [
                            {
                                "visibility": "external",
                                "content": "function transferFrom(address from, address to, uint256 value) external override returns (bool){ require(to != address(0) || to != address(this)); if (from != msg.sender){ uint256 allowed = allowance[from][msg.sender]; if (allowed != type (uint256).max){ require(allowed >= value, \"WERC10: request exceeds allowance\"); uint256 reduced = allowed - value; allowance[from][msg.sender] = reduced; emit Approval(from, msg.sender, reduced);}} uint256 balance = balanceOf[from]; require(balance >= value, \"WERC10: transfer amount exceeds balance\"); balanceOf[from] = balance - value; balanceOf[to] += value; emit Transfer(from, to, value); return true;}",
                                "modifiers": [
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "balanceOf",
                                        "",
                                        "fKRW"
                                    ],
                                    [
                                        "allowance",
                                        "",
                                        "fKRW"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "balanceOf",
                                        "",
                                        "fKRW"
                                    ],
                                    [
                                        "allowance",
                                        "",
                                        "fKRW"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "fKRW.type"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "86332d296b6bfb1e74986a46469fc62c"
                            }
                        ],
                        "transferAndCall": [
                            {
                                "visibility": "external",
                                "content": "function transferAndCall(address to, uint value, bytes calldata data) external override returns (bool){ require(to != address(0) || to != address(this)); uint256 balance = balanceOf[msg.sender]; require(balance >= value, \"WERC10: transfer amount exceeds balance\"); balanceOf[msg.sender] = balance - value; balanceOf[to] += value; emit Transfer(msg.sender, to, value); return ITransferReceiver(to).onTokenTransfer(msg.sender, value, data);}",
                                "modifiers": [
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "value"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "data"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "balanceOf",
                                        "",
                                        "fKRW"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "balanceOf",
                                        "",
                                        "fKRW"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "00528ab130bc530fc9c493bdc1f19748"
                            }
                        ]
                    },
                    "modifiers": {
                        "onlyOwner": {
                            "parameters": [],
                            "content": "modifier onlyOwner(){ require(msg.sender == owner(), \"only owner\"); _;}",
                            "reads": [],
                            "writes": [],
                            "external_calls": {
                                "__set__": true,
                                "values": [
                                    "fKRW.owner"
                                ]
                            },
                            "md5": "f066aa80ace803bcfe138e5919d5383e"
                        }
                    },
                    "structs": {},
                    "events": {
                        "LogChangeDCRMOwner": {
                            "event": "LogChangeDCRMOwner",
                            "content": "LogChangeDCRMOwner(address indexed oldOwner, address indexed newOwner, uint indexed effectiveTime)"
                        },
                        "LogSwapin": {
                            "event": "LogSwapin",
                            "content": "LogSwapin(bytes32 indexed txhash, address indexed account, uint amount)"
                        },
                        "LogSwapout": {
                            "event": "LogSwapout",
                            "content": "LogSwapout(address indexed account, address indexed bindaddr, uint amount)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "IERC20": "SafeERC20"
                    }
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "SafeERC20.callOptionalReturn": "b3221f01a369fc6acd5325df9fd85126",
                "IERC20.allowance": "c93791d09d789aed33b9725d482af442",
                "fKRW.owner": "49ca49976e9c068b1a68f9c2befb286b",
                "fKRW.onlyOwner": "f066aa80ace803bcfe138e5919d5383e",
                "fKRW._mint": "f9befc2a74690a259b3456c5a506a125",
                "fKRW._burn": "331a7a04314dd362a6eb02ea8de18e08",
                "fKRW.verifyEIP712": "e9d78f8ce87bbf449045fc861f950266",
                "fKRW.verifyPersonalSign": "263538ebdc3acd95f4b32425afc90cb1",
                "fKRW.prefixed": "149d3b1982461565c220241bbe13fdd6"
            },
            "md5": "63fb49fcdd2fb2346fc7dd6f84f27173"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\0x765277EebeCA2e31912C9946eAe1021199B39C61\\AnyswapV4Router.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\0x765277EebeCA2e31912C9946eAe1021199B39C61\\AnyswapV4Router.sol",
            "filename": "AnyswapV4Router.sol",
            "imported_contracts": {},
            "contracts": {
                "ISushiswapV2Pair": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "factory": [
                            {
                                "visibility": "external",
                                "content": "function factory() external view returns (address);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "eae461b6d0ef6d1c8bb92d34e74a880d"
                            }
                        ],
                        "token0": [
                            {
                                "visibility": "external",
                                "content": "function token0() external view returns (address);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "6dbeae51296a5fa298e59b6ce26a07ef"
                            }
                        ],
                        "token1": [
                            {
                                "visibility": "external",
                                "content": "function token1() external view returns (address);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "19164606c7e09dcc0de5c859221b6cf5"
                            }
                        ],
                        "getReserves": [
                            {
                                "visibility": "external",
                                "content": "function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint112",
                                        "name": "reserve0"
                                    },
                                    {
                                        "type": "uint112",
                                        "name": "reserve1"
                                    },
                                    {
                                        "type": "uint32",
                                        "name": "blockTimestampLast"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "a8ad5739cac88103083915986561f88c"
                            }
                        ],
                        "swap": [
                            {
                                "visibility": "external",
                                "content": "function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "amount0Out"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amount1Out"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "data"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "2a7b7c36bbb6565de0e79bffef9b920f"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                },
                "SafeMathSushiswap": {
                    "type": {
                        "__CT__": true,
                        "value": 2
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "add": [
                            {
                                "visibility": "internal",
                                "content": "function add(uint x, uint y) internal pure returns (uint z){ require((z = x + y) >= x, 'ds-math-add-overflow');}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "x"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "y"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "z"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "e076653475ff64c2999d30ec870291e4"
                            }
                        ],
                        "sub": [
                            {
                                "visibility": "internal",
                                "content": "function sub(uint x, uint y) internal pure returns (uint z){ require((z = x - y) <= x, 'ds-math-sub-underflow');}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "x"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "y"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "z"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "50fc788cc62b3aabc5d934ec2ad1c67f"
                            }
                        ],
                        "mul": [
                            {
                                "visibility": "internal",
                                "content": "function mul(uint x, uint y) internal pure returns (uint z){ require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "x"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "y"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "z"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "17723186ccd020779d6c078c1da61e4b"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "SushiswapV2Library": {
                    "type": {
                        "__CT__": true,
                        "value": 2
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "sortTokens": [
                            {
                                "visibility": "internal",
                                "content": "function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1){ require(tokenA != tokenB, 'SushiswapV2Library: IDENTICAL_ADDRESSES'); (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA); require(token0 != address(0), 'SushiswapV2Library: ZERO_ADDRESS');}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "tokenA"
                                    },
                                    {
                                        "type": "address",
                                        "name": "tokenB"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": "token0"
                                    },
                                    {
                                        "type": "address",
                                        "name": "token1"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "53553004d7c40a8043fec91809e5eb82"
                            }
                        ],
                        "pairFor": [
                            {
                                "visibility": "internal",
                                "content": "function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair){ (address token0, address token1) = sortTokens(tokenA, tokenB); pair = address(uint160(uint256(keccak256(abi.encodePacked( hex'ff', factory, keccak256(abi.encodePacked(token0, token1)), hex'e18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303' )))));}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "factory"
                                    },
                                    {
                                        "type": "address",
                                        "name": "tokenA"
                                    },
                                    {
                                        "type": "address",
                                        "name": "tokenB"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": "pair"
                                    }
                                ],
                                "reads": [
                                    [
                                        "factory",
                                        "",
                                        "AnyswapV4Router"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "factory",
                                        "",
                                        "AnyswapV4Router"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SushiswapV2Library.sortTokens"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "0966039bc6d80270f06e5d9760ee5973"
                            }
                        ],
                        "getReserves": [
                            {
                                "visibility": "internal",
                                "content": "function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB){ (address token0, ) = sortTokens(tokenA, tokenB); (uint reserve0, uint reserve1, ) = ISushiswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves(); (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "factory"
                                    },
                                    {
                                        "type": "address",
                                        "name": "tokenA"
                                    },
                                    {
                                        "type": "address",
                                        "name": "tokenB"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "reserveA"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "reserveB"
                                    }
                                ],
                                "reads": [
                                    [
                                        "factory",
                                        "",
                                        "AnyswapV4Router"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "factory",
                                        "",
                                        "AnyswapV4Router"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SushiswapV2Library.sortTokens",
                                        "SushiswapV2Library.pairFor"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "e12c8e854eb992f08c30e88b3e078522"
                            }
                        ],
                        "quote": [
                            {
                                "visibility": "internal",
                                "content": "function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB){ require(amountA > 0, 'SushiswapV2Library: INSUFFICIENT_AMOUNT'); require(reserveA > 0 && reserveB > 0, 'SushiswapV2Library: INSUFFICIENT_LIQUIDITY'); amountB = amountA.mul(reserveB) / reserveA;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "amountA"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "reserveA"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "reserveB"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "amountB"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "amountA.mul"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "814d0103910bb8adeb7a6e1b665e2d9a"
                            }
                        ],
                        "getAmountOut": [
                            {
                                "visibility": "internal",
                                "content": "function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut){ require(amountIn > 0, 'SushiswapV2Library: INSUFFICIENT_INPUT_AMOUNT'); require(reserveIn > 0 && reserveOut > 0, 'SushiswapV2Library: INSUFFICIENT_LIQUIDITY'); uint amountInWithFee = amountIn.mul(997); uint numerator = amountInWithFee.mul(reserveOut); uint denominator = reserveIn.mul(1000).add(amountInWithFee); amountOut = numerator / denominator;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "amountIn"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "reserveIn"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "reserveOut"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "amountOut"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "amountIn.mul",
                                        "reserveIn.mul",
                                        "amountInWithFee.mul"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "de9a0b4fe347557aa85f1beddb841fcb"
                            }
                        ],
                        "getAmountIn": [
                            {
                                "visibility": "internal",
                                "content": "function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn){ require(amountOut > 0, 'SushiswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT'); require(reserveIn > 0 && reserveOut > 0, 'SushiswapV2Library: INSUFFICIENT_LIQUIDITY'); uint numerator = reserveIn.mul(amountOut).mul(1000); uint denominator = reserveOut.sub(amountOut).mul(997); amountIn = (numerator / denominator).add(1);}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "amountOut"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "reserveIn"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "reserveOut"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "amountIn"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "reserveIn.mul",
                                        "reserveOut.sub"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "719310c4a8954494b502bb60f325d986"
                            }
                        ],
                        "getAmountsOut": [
                            {
                                "visibility": "internal",
                                "content": "function getAmountsOut(address factory, uint amountIn, address[] memory path) internal view returns (uint[] memory amounts){ require(path.length >= 2, 'SushiswapV2Library: INVALID_PATH'); amounts = new uint[](path.length); amounts[0] = amountIn; for (uint i; i < path.length - 1; i++){ (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]); amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);}}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "factory"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountIn"
                                    },
                                    {
                                        "type": "address[] memory",
                                        "name": "path"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint[] memory",
                                        "name": "amounts"
                                    }
                                ],
                                "reads": [
                                    [
                                        "factory",
                                        "",
                                        "AnyswapV4Router"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SushiswapV2Library.getReserves",
                                        "SushiswapV2Library.getAmountOut"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "fd145cd614d3cfb20b6182a54e4853a0"
                            }
                        ],
                        "getAmountsIn": [
                            {
                                "visibility": "internal",
                                "content": "function getAmountsIn(address factory, uint amountOut, address[] memory path) internal view returns (uint[] memory amounts){ require(path.length >= 2, 'SushiswapV2Library: INVALID_PATH'); amounts = new uint[](path.length); amounts[amounts.length - 1] = amountOut; for (uint i = path.length - 1; i > 0; i--){ (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]); amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);}}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "factory"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountOut"
                                    },
                                    {
                                        "type": "address[] memory",
                                        "name": "path"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint[] memory",
                                        "name": "amounts"
                                    }
                                ],
                                "reads": [
                                    [
                                        "factory",
                                        "",
                                        "AnyswapV4Router"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SushiswapV2Library.getReserves",
                                        "SushiswapV2Library.getAmountIn"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "6409030ef935ed2148ebd6f3a0220b44"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "uint": "SafeMathSushiswap"
                    }
                },
                "TransferHelper": {
                    "type": {
                        "__CT__": true,
                        "value": 2
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "safeApprove": [
                            {
                                "visibility": "internal",
                                "content": "function safeApprove(address token, address to, uint value) internal{ (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value)); require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "value"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "token.call"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "d9c6640cfca902b76e445a1510fab047"
                            }
                        ],
                        "safeTransfer": [
                            {
                                "visibility": "internal",
                                "content": "function safeTransfer(address token, address to, uint value) internal{ (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value)); require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "value"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "token.call"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "3f5488f5b132ce36f3d9090a02d85295"
                            }
                        ],
                        "safeTransferFrom": [
                            {
                                "visibility": "internal",
                                "content": "function safeTransferFrom(address token, address from, address to, uint value) internal{ (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value)); require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "value"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "token.call"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "cb78f5eeced7c4ba60c419cbe210487c"
                            }
                        ],
                        "safeTransferNative": [
                            {
                                "visibility": "internal",
                                "content": "function safeTransferNative(address to, uint value) internal{ (bool success, ) = to.call{ value:value} (new bytes(0)); require(success, 'TransferHelper: NATIVE_TRANSFER_FAILED');}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "value"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "a335433fd57a5f0afeeef0aefa9cdf29"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "IwNATIVE": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "deposit": [
                            {
                                "visibility": "external",
                                "content": "function deposit() external payable;",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": true,
                                "md5": "4f2eec90abd519258d97a4283a54e2f1"
                            }
                        ],
                        "transfer": [
                            {
                                "visibility": "external",
                                "content": "function transfer(address to, uint value) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "value"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "0587b6354cf0d3773c8593eb4103d819"
                            }
                        ],
                        "withdraw": [
                            {
                                "visibility": "external",
                                "content": "function withdraw(uint) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": null
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "b3e698980247640e9fe99c060e4921fc"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                },
                "AnyswapV1ERC20": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "mint": [
                            {
                                "visibility": "external",
                                "content": "function mint(address to, uint256 amount) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "54fcc18fc5af6f55053554dd926d02c5"
                            }
                        ],
                        "burn": [
                            {
                                "visibility": "external",
                                "content": "function burn(address from, uint256 amount) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "3b8d1a75aa40d4fec00a0d273d36f6da"
                            }
                        ],
                        "changeVault": [
                            {
                                "visibility": "external",
                                "content": "function changeVault(address newVault) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "newVault"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "6bc2dba1a1fe83dd749a9b3e6aefb013"
                            }
                        ],
                        "depositVault": [
                            {
                                "visibility": "external",
                                "content": "function depositVault(uint amount, address to) external returns (uint);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c36ee7b9d27c9a670490ec8a73ff7fc6"
                            }
                        ],
                        "withdrawVault": [
                            {
                                "visibility": "external",
                                "content": "function withdrawVault(address from, uint amount, address to) external returns (uint);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "d7e3a13249332b58de63af9851184b51"
                            }
                        ],
                        "underlying": [
                            {
                                "visibility": "external",
                                "content": "function underlying() external view returns (address);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "79a36cf7455e5210675c01a0880c01eb"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                },
                "IERC20": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "totalSupply": [
                            {
                                "visibility": "external",
                                "content": "function totalSupply() external view returns (uint256);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "5e1d12e61f4bf4b37161d9b684742570"
                            }
                        ],
                        "balanceOf": [
                            {
                                "visibility": "external",
                                "content": "function balanceOf(address account) external view returns (uint256);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "account"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "3ac17e7782366957c960d337a4a648cd"
                            }
                        ],
                        "transfer": [
                            {
                                "visibility": "external",
                                "content": "function transfer(address recipient, uint256 amount) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "recipient"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "98b540da9047ee99bce7fadde65d04b7"
                            }
                        ],
                        "allowance": [
                            {
                                "visibility": "external",
                                "content": "function allowance(address owner, address spender) external view returns (uint256);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "owner"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c93791d09d789aed33b9725d482af442"
                            }
                        ],
                        "approve": [
                            {
                                "visibility": "external",
                                "content": "function approve(address spender, uint256 amount) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "7c80d707df648dc123a10c69a1150edc"
                            }
                        ],
                        "permit": [
                            {
                                "visibility": "external",
                                "content": "function permit(address target, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "target"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "deadline"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "v"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "r"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "s"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "865781e39f9ebb7f41df993418bdaa02"
                            }
                        ],
                        "transferFrom": [
                            {
                                "visibility": "external",
                                "content": "function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "sender"
                                    },
                                    {
                                        "type": "address",
                                        "name": "recipient"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c134d67e13a988b449de71dd226682ab"
                            }
                        ],
                        "transferWithPermit": [
                            {
                                "visibility": "external",
                                "content": "function transferWithPermit(address target, address to, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "target"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "deadline"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "v"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "r"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "s"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "936174799796d3ebd0f9d8d968cbd4d0"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {
                        "Transfer": {
                            "event": "Transfer",
                            "content": "Transfer(address indexed from, address indexed to, uint256 value)"
                        },
                        "Approval": {
                            "event": "Approval",
                            "content": "Approval(address indexed owner, address indexed spender, uint256 value)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                },
                "AnyswapV4Router": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {
                        "factory": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public immutable factory;"
                        },
                        "wNATIVE": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public immutable wNATIVE;"
                        },
                        "_oldMPC": {
                            "type": "address",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address private _oldMPC;"
                        },
                        "_newMPC": {
                            "type": "address",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address private _newMPC;"
                        },
                        "_newMPCEffectiveTime": {
                            "type": "uint256",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256 private _newMPCEffectiveTime;"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (address _factory, address _wNATIVE, address _mpc){ _newMPC = _mpc; _newMPCEffectiveTime = block.timestamp; factory = _factory; wNATIVE = _wNATIVE;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_factory"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_wNATIVE"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_mpc"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "factory",
                                        "",
                                        "AnyswapV4Router"
                                    ],
                                    [
                                        "wNATIVE",
                                        "",
                                        "AnyswapV4Router"
                                    ],
                                    [
                                        "_newMPC",
                                        "",
                                        "AnyswapV4Router"
                                    ],
                                    [
                                        "_newMPCEffectiveTime",
                                        "",
                                        "AnyswapV4Router"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "factory",
                                        "",
                                        "AnyswapV4Router"
                                    ],
                                    [
                                        "wNATIVE",
                                        "",
                                        "AnyswapV4Router"
                                    ],
                                    [
                                        "_newMPC",
                                        "",
                                        "AnyswapV4Router"
                                    ],
                                    [
                                        "_newMPCEffectiveTime",
                                        "",
                                        "AnyswapV4Router"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "50810f50f1d3cb83b51dd3d92b0428cd"
                            }
                        ],
                        "mpc": [
                            {
                                "visibility": "public",
                                "content": "function mpc() public view returns (address){ if (block.timestamp >= _newMPCEffectiveTime){ return _newMPC;} return _oldMPC;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_oldMPC",
                                        "",
                                        "AnyswapV4Router"
                                    ],
                                    [
                                        "_newMPC",
                                        "",
                                        "AnyswapV4Router"
                                    ],
                                    [
                                        "_newMPCEffectiveTime",
                                        "",
                                        "AnyswapV4Router"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "cdfc83ed07486e348642e29a0b3c6348"
                            }
                        ],
                        "cID": [
                            {
                                "visibility": "public",
                                "content": "function cID() public view returns (uint id){ assembly{ id := chainid()}}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "id"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "3b476bdf3c0c6f59c7a2679df1573c5e"
                            }
                        ],
                        "changeMPC": [
                            {
                                "visibility": "public",
                                "content": "function changeMPC(address newMPC) public onlyMPC returns (bool){ require(newMPC != address(0), \"AnyswapV3Router: address(0x0)\"); _oldMPC = mpc(); _newMPC = newMPC; _newMPCEffectiveTime = block.timestamp + 2*24*3600; emit LogChangeMPC(_oldMPC, _newMPC, _newMPCEffectiveTime, cID()); return true;}",
                                "modifiers": [
                                    "onlyMPC"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "newMPC"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_oldMPC",
                                        "",
                                        "AnyswapV4Router"
                                    ],
                                    [
                                        "_newMPC",
                                        "",
                                        "AnyswapV4Router"
                                    ],
                                    [
                                        "_newMPCEffectiveTime",
                                        "",
                                        "AnyswapV4Router"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_oldMPC",
                                        "",
                                        "AnyswapV4Router"
                                    ],
                                    [
                                        "_newMPC",
                                        "",
                                        "AnyswapV4Router"
                                    ],
                                    [
                                        "_newMPCEffectiveTime",
                                        "",
                                        "AnyswapV4Router"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyswapV4Router.cID",
                                        "AnyswapV4Router.mpc",
                                        "AnyswapV4Router.onlyMPC"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "d51677553259dd3a2561dc5c5d57f506"
                            }
                        ],
                        "changeVault": [
                            {
                                "visibility": "public",
                                "content": "function changeVault(address token, address newVault) public onlyMPC returns (bool){ require(newVault != address(0), \"AnyswapV3Router: address(0x0)\"); return AnyswapV1ERC20(token).changeVault(newVault);}",
                                "modifiers": [
                                    "onlyMPC"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "newVault"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyswapV4Router.onlyMPC"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "356a220d78d853c93d9bc1ec5c4f108a"
                            }
                        ],
                        "_anySwapOut": [
                            {
                                "visibility": "internal",
                                "content": "function _anySwapOut(address from, address token, address to, uint amount, uint toChainID) internal{ AnyswapV1ERC20(token).burn(from, amount); emit LogAnySwapOut(token, from, to, amount, cID(), toChainID);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "toChainID"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyswapV4Router.cID"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "e4e8e12324334ff907b0cb998e752f67"
                            }
                        ],
                        "anySwapOut": [
                            {
                                "visibility": "external",
                                "content": "function anySwapOut(address token, address to, uint amount, uint toChainID) external{ _anySwapOut(msg.sender, token, to, amount, toChainID);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "toChainID"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyswapV4Router._anySwapOut"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "1c1f7304aae24ab7052fcf4a7a3dee45"
                            },
                            {
                                "visibility": "external",
                                "content": "function anySwapOut(address[] calldata tokens, address[] calldata to, uint[] calldata amounts, uint[] calldata toChainIDs) external{ for (uint i = 0; i < tokens.length; i++){ _anySwapOut(msg.sender, tokens[i], to[i], amounts[i], toChainIDs[i]);}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address[] calldata",
                                        "name": "tokens"
                                    },
                                    {
                                        "type": "address[] calldata",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint[] calldata",
                                        "name": "amounts"
                                    },
                                    {
                                        "type": "uint[] calldata",
                                        "name": "toChainIDs"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyswapV4Router._anySwapOut"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "b94570b7ffc9f68a1ca18d6beb98e8dd"
                            }
                        ],
                        "anySwapOutUnderlying": [
                            {
                                "visibility": "external",
                                "content": "function anySwapOutUnderlying(address token, address to, uint amount, uint toChainID) external{ TransferHelper.safeTransferFrom(AnyswapV1ERC20(token).underlying(), msg.sender, token, amount); AnyswapV1ERC20(token).depositVault(amount, msg.sender); _anySwapOut(msg.sender, token, to, amount, toChainID);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "toChainID"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyswapV4Router._anySwapOut",
                                        "TransferHelper.safeTransferFrom"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "09724419b7849f1ff0347ad0f6f2b3c4"
                            }
                        ],
                        "anySwapOutUnderlyingWithPermit": [
                            {
                                "visibility": "external",
                                "content": "function anySwapOutUnderlyingWithPermit( address from, address token, address to, uint amount, uint deadline, uint8 v, bytes32 r, bytes32 s, uint toChainID ) external{ address _underlying = AnyswapV1ERC20(token).underlying(); IERC20(_underlying).permit(from, address(this), amount, deadline, v, r, s); TransferHelper.safeTransferFrom(_underlying, from, token, amount); AnyswapV1ERC20(token).depositVault(amount, from); _anySwapOut(from, token, to, amount, toChainID);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "deadline"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "v"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "r"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "s"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "toChainID"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyswapV4Router._anySwapOut",
                                        "TransferHelper.safeTransferFrom"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "4331909528b573d1475d67d7e21cfe8b"
                            }
                        ],
                        "anySwapOutUnderlyingWithTransferPermit": [
                            {
                                "visibility": "external",
                                "content": "function anySwapOutUnderlyingWithTransferPermit( address from, address token, address to, uint amount, uint deadline, uint8 v, bytes32 r, bytes32 s, uint toChainID ) external{ IERC20(AnyswapV1ERC20(token).underlying()).transferWithPermit(from, token, amount, deadline, v, r, s); AnyswapV1ERC20(token).depositVault(amount, from); _anySwapOut(from, token, to, amount, toChainID);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "deadline"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "v"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "r"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "s"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "toChainID"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyswapV4Router._anySwapOut"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "e56da9218dd31aa549ffe99616e51080"
                            }
                        ],
                        "_anySwapIn": [
                            {
                                "visibility": "internal",
                                "content": "function _anySwapIn(bytes32 txs, address token, address to, uint amount, uint fromChainID) internal{ AnyswapV1ERC20(token).mint(to, amount); emit LogAnySwapIn(txs, token, to, amount, fromChainID, cID());}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "txs"
                                    },
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "fromChainID"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyswapV4Router.cID"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "4bbfd89bd4ff065fd57f8ec4b230f2ab"
                            }
                        ],
                        "anySwapIn": [
                            {
                                "visibility": "external",
                                "content": "function anySwapIn(bytes32 txs, address token, address to, uint amount, uint fromChainID) external onlyMPC{ _anySwapIn(txs, token, to, amount, fromChainID);}",
                                "modifiers": [
                                    "onlyMPC"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "txs"
                                    },
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "fromChainID"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyswapV4Router._anySwapIn",
                                        "AnyswapV4Router.onlyMPC"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "1cc907ea76af4a1e9ea921a12c0096b8"
                            },
                            {
                                "visibility": "external",
                                "content": "function anySwapIn(bytes32[] calldata txs, address[] calldata tokens, address[] calldata to, uint256[] calldata amounts, uint[] calldata fromChainIDs) external onlyMPC{ for (uint i = 0; i < tokens.length; i++){ _anySwapIn(txs[i], tokens[i], to[i], amounts[i], fromChainIDs[i]);}}",
                                "modifiers": [
                                    "onlyMPC"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32[] calldata",
                                        "name": "txs"
                                    },
                                    {
                                        "type": "address[] calldata",
                                        "name": "tokens"
                                    },
                                    {
                                        "type": "address[] calldata",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256[] calldata",
                                        "name": "amounts"
                                    },
                                    {
                                        "type": "uint[] calldata",
                                        "name": "fromChainIDs"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyswapV4Router._anySwapIn",
                                        "AnyswapV4Router.onlyMPC"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "97daf37082120bc93fcc46ceddfed7ef"
                            }
                        ],
                        "anySwapInUnderlying": [
                            {
                                "visibility": "external",
                                "content": "function anySwapInUnderlying(bytes32 txs, address token, address to, uint amount, uint fromChainID) external onlyMPC{ _anySwapIn(txs, token, to, amount, fromChainID); AnyswapV1ERC20(token).withdrawVault(to, amount, to);}",
                                "modifiers": [
                                    "onlyMPC"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "txs"
                                    },
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "fromChainID"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyswapV4Router._anySwapIn",
                                        "AnyswapV4Router.onlyMPC"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "358fc23ced8480bb80ca2f8cdf8209a5"
                            }
                        ],
                        "anySwapInAuto": [
                            {
                                "visibility": "external",
                                "content": "function anySwapInAuto(bytes32 txs, address token, address to, uint amount, uint fromChainID) external onlyMPC{ _anySwapIn(txs, token, to, amount, fromChainID); AnyswapV1ERC20 _anyToken = AnyswapV1ERC20(token); address _underlying = _anyToken.underlying(); if (_underlying != address(0) && IERC20(_underlying).balanceOf(token) >= amount){ _anyToken.withdrawVault(to, amount, to);}}",
                                "modifiers": [
                                    "onlyMPC"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "txs"
                                    },
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "fromChainID"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyswapV1ERC20.withdrawVault",
                                        "AnyswapV1ERC20.underlying",
                                        "AnyswapV4Router._anySwapIn",
                                        "AnyswapV4Router.onlyMPC"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "7e80a081d66b6b44fb0a19c21ee49d8d"
                            }
                        ],
                        "anySwapFeeTo": [
                            {
                                "visibility": "external",
                                "content": "function anySwapFeeTo(address token, uint amount) external onlyMPC{ address _mpc = mpc(); AnyswapV1ERC20(token).mint(_mpc, amount); AnyswapV1ERC20(token).withdrawVault(_mpc, amount, _mpc);}",
                                "modifiers": [
                                    "onlyMPC"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyswapV4Router.mpc",
                                        "AnyswapV4Router.onlyMPC"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "65827b8e3e4d02e36245848cdf9830a8"
                            }
                        ],
                        "_swap": [
                            {
                                "visibility": "internal",
                                "content": "function _swap(uint[] memory amounts, address[] memory path, address _to) internal virtual{ for (uint i; i < path.length - 1; i++){ (address input, address output) = (path[i], path[i + 1]); (address token0, ) = SushiswapV2Library.sortTokens(input, output); uint amountOut = amounts[i + 1]; (uint amount0Out, uint amount1Out) = input == token0 ? (uint(0), amountOut) : (amountOut, uint(0)); address to = i < path.length - 2 ? SushiswapV2Library.pairFor(factory, output, path[i + 2]) : _to; ISushiswapV2Pair(SushiswapV2Library.pairFor(factory, input, output)).swap( amount0Out, amount1Out, to, new bytes(0) );}}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint[] memory",
                                        "name": "amounts"
                                    },
                                    {
                                        "type": "address[] memory",
                                        "name": "path"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_to"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "factory",
                                        "",
                                        "AnyswapV4Router"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SushiswapV2Library.sortTokens",
                                        "SushiswapV2Library.pairFor"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "e52d6f74aab575776fd40f2a8fec3ab3"
                            }
                        ],
                        "anySwapOutExactTokensForTokens": [
                            {
                                "visibility": "external",
                                "content": "function anySwapOutExactTokensForTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline, uint toChainID ) external virtual ensure(deadline){ AnyswapV1ERC20(path[0]).burn(msg.sender, amountIn); emit LogAnySwapTradeTokensForTokens(path, msg.sender, to, amountIn, amountOutMin, cID(), toChainID);}",
                                "modifiers": [
                                    "virtual",
                                    "ensure(deadline)"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "amountIn"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountOutMin"
                                    },
                                    {
                                        "type": "address[] calldata",
                                        "name": "path"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "deadline"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "toChainID"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyswapV4Router.ensure",
                                        "AnyswapV4Router.cID"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "0c6a5c06fb574ae7d2cebfc6380d53e3"
                            }
                        ],
                        "anySwapOutExactTokensForTokensUnderlying": [
                            {
                                "visibility": "external",
                                "content": "function anySwapOutExactTokensForTokensUnderlying( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline, uint toChainID ) external virtual ensure(deadline){ TransferHelper.safeTransferFrom(AnyswapV1ERC20(path[0]).underlying(), msg.sender, path[0], amountIn); AnyswapV1ERC20(path[0]).depositVault(amountIn, msg.sender); AnyswapV1ERC20(path[0]).burn(msg.sender, amountIn); emit LogAnySwapTradeTokensForTokens(path, msg.sender, to, amountIn, amountOutMin, cID(), toChainID);}",
                                "modifiers": [
                                    "virtual",
                                    "ensure(deadline)"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "amountIn"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountOutMin"
                                    },
                                    {
                                        "type": "address[] calldata",
                                        "name": "path"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "deadline"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "toChainID"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "TransferHelper.safeTransferFrom",
                                        "AnyswapV4Router.cID",
                                        "AnyswapV4Router.ensure"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "239acd3dca7d4675a518132b1f27a9ce"
                            }
                        ],
                        "anySwapOutExactTokensForTokensUnderlyingWithPermit": [
                            {
                                "visibility": "external",
                                "content": "function anySwapOutExactTokensForTokensUnderlyingWithPermit( address from, uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline, uint8 v, bytes32 r, bytes32 s, uint toChainID ) external virtual ensure(deadline){ address _underlying = AnyswapV1ERC20(path[0]).underlying(); IERC20(_underlying).permit(from, address(this), amountIn, deadline, v, r, s); TransferHelper.safeTransferFrom(_underlying, from, path[0], amountIn); AnyswapV1ERC20(path[0]).depositVault(amountIn, from); AnyswapV1ERC20(path[0]).burn(from, amountIn);{ address[] memory _path = path; address _from = from; address _to = to; uint _amountIn = amountIn; uint _amountOutMin = amountOutMin; uint _cID = cID(); uint _toChainID = toChainID; emit LogAnySwapTradeTokensForTokens(_path, _from, _to, _amountIn, _amountOutMin, _cID, _toChainID);}}",
                                "modifiers": [
                                    "virtual",
                                    "ensure(deadline)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountIn"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountOutMin"
                                    },
                                    {
                                        "type": "address[] calldata",
                                        "name": "path"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "deadline"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "v"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "r"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "s"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "toChainID"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "TransferHelper.safeTransferFrom",
                                        "AnyswapV4Router.cID",
                                        "AnyswapV4Router.ensure"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "2143b6387f72af4b4ef0b88533eff01b"
                            }
                        ],
                        "anySwapOutExactTokensForTokensUnderlyingWithTransferPermit": [
                            {
                                "visibility": "external",
                                "content": "function anySwapOutExactTokensForTokensUnderlyingWithTransferPermit( address from, uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline, uint8 v, bytes32 r, bytes32 s, uint toChainID ) external virtual ensure(deadline){ IERC20(AnyswapV1ERC20(path[0]).underlying()).transferWithPermit(from, path[0], amountIn, deadline, v, r, s); AnyswapV1ERC20(path[0]).depositVault(amountIn, from); AnyswapV1ERC20(path[0]).burn(from, amountIn); emit LogAnySwapTradeTokensForTokens(path, from, to, amountIn, amountOutMin, cID(), toChainID);}",
                                "modifiers": [
                                    "virtual",
                                    "ensure(deadline)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountIn"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountOutMin"
                                    },
                                    {
                                        "type": "address[] calldata",
                                        "name": "path"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "deadline"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "v"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "r"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "s"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "toChainID"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyswapV4Router.ensure",
                                        "AnyswapV4Router.cID"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "1f6f063b82dddd8f853f73ba33e4c08f"
                            }
                        ],
                        "anySwapInExactTokensForTokens": [
                            {
                                "visibility": "external",
                                "content": "function anySwapInExactTokensForTokens( bytes32 txs, uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline, uint fromChainID ) external onlyMPC virtual ensure(deadline) returns (uint[] memory amounts){ amounts = SushiswapV2Library.getAmountsOut(factory, amountIn, path); require(amounts[amounts.length - 1] >= amountOutMin, 'SushiswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT'); _anySwapIn(txs, path[0], SushiswapV2Library.pairFor(factory, path[0], path[1]), amounts[0], fromChainID); _swap(amounts, path, to);}",
                                "modifiers": [
                                    "onlyMPC",
                                    "virtual",
                                    "ensure(deadline)"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "txs"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountIn"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountOutMin"
                                    },
                                    {
                                        "type": "address[] calldata",
                                        "name": "path"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "deadline"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "fromChainID"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint[] memory",
                                        "name": "amounts"
                                    }
                                ],
                                "reads": [
                                    [
                                        "factory",
                                        "",
                                        "AnyswapV4Router"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyswapV4Router.onlyMPC",
                                        "AnyswapV4Router._swap",
                                        "AnyswapV4Router.ensure",
                                        "SushiswapV2Library.getAmountsOut",
                                        "AnyswapV4Router._anySwapIn",
                                        "SushiswapV2Library.pairFor"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "6afac8a8f520c5a56949a003c089b542"
                            }
                        ],
                        "anySwapOutExactTokensForNative": [
                            {
                                "visibility": "external",
                                "content": "function anySwapOutExactTokensForNative( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline, uint toChainID ) external virtual ensure(deadline){ AnyswapV1ERC20(path[0]).burn(msg.sender, amountIn); emit LogAnySwapTradeTokensForNative(path, msg.sender, to, amountIn, amountOutMin, cID(), toChainID);}",
                                "modifiers": [
                                    "virtual",
                                    "ensure(deadline)"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "amountIn"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountOutMin"
                                    },
                                    {
                                        "type": "address[] calldata",
                                        "name": "path"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "deadline"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "toChainID"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyswapV4Router.ensure",
                                        "AnyswapV4Router.cID"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "8b2fac81138ef1fdd5628a6ff4b99cde"
                            }
                        ],
                        "anySwapOutExactTokensForNativeUnderlying": [
                            {
                                "visibility": "external",
                                "content": "function anySwapOutExactTokensForNativeUnderlying( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline, uint toChainID ) external virtual ensure(deadline){ TransferHelper.safeTransferFrom(AnyswapV1ERC20(path[0]).underlying(), msg.sender, path[0], amountIn); AnyswapV1ERC20(path[0]).depositVault(amountIn, msg.sender); AnyswapV1ERC20(path[0]).burn(msg.sender, amountIn); emit LogAnySwapTradeTokensForNative(path, msg.sender, to, amountIn, amountOutMin, cID(), toChainID);}",
                                "modifiers": [
                                    "virtual",
                                    "ensure(deadline)"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "amountIn"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountOutMin"
                                    },
                                    {
                                        "type": "address[] calldata",
                                        "name": "path"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "deadline"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "toChainID"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "TransferHelper.safeTransferFrom",
                                        "AnyswapV4Router.cID",
                                        "AnyswapV4Router.ensure"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "ffe85e61d04944b785bea5476e7c8c5a"
                            }
                        ],
                        "anySwapOutExactTokensForNativeUnderlyingWithPermit": [
                            {
                                "visibility": "external",
                                "content": "function anySwapOutExactTokensForNativeUnderlyingWithPermit( address from, uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline, uint8 v, bytes32 r, bytes32 s, uint toChainID ) external virtual ensure(deadline){ address _underlying = AnyswapV1ERC20(path[0]).underlying(); IERC20(_underlying).permit(from, address(this), amountIn, deadline, v, r, s); TransferHelper.safeTransferFrom(_underlying, from, path[0], amountIn); AnyswapV1ERC20(path[0]).depositVault(amountIn, from); AnyswapV1ERC20(path[0]).burn(from, amountIn);{ address[] memory _path = path; address _from = from; address _to = to; uint _amountIn = amountIn; uint _amountOutMin = amountOutMin; uint _cID = cID(); uint _toChainID = toChainID; emit LogAnySwapTradeTokensForNative(_path, _from, _to, _amountIn, _amountOutMin, _cID, _toChainID);}}",
                                "modifiers": [
                                    "virtual",
                                    "ensure(deadline)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountIn"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountOutMin"
                                    },
                                    {
                                        "type": "address[] calldata",
                                        "name": "path"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "deadline"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "v"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "r"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "s"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "toChainID"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "TransferHelper.safeTransferFrom",
                                        "AnyswapV4Router.cID",
                                        "AnyswapV4Router.ensure"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "47d04f6c1c7681c44c388551996c8638"
                            }
                        ],
                        "anySwapOutExactTokensForNativeUnderlyingWithTransferPermit": [
                            {
                                "visibility": "external",
                                "content": "function anySwapOutExactTokensForNativeUnderlyingWithTransferPermit( address from, uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline, uint8 v, bytes32 r, bytes32 s, uint toChainID ) external virtual ensure(deadline){ IERC20(AnyswapV1ERC20(path[0]).underlying()).transferWithPermit(from, path[0], amountIn, deadline, v, r, s); AnyswapV1ERC20(path[0]).depositVault(amountIn, from); AnyswapV1ERC20(path[0]).burn(from, amountIn); emit LogAnySwapTradeTokensForNative(path, from, to, amountIn, amountOutMin, cID(), toChainID);}",
                                "modifiers": [
                                    "virtual",
                                    "ensure(deadline)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountIn"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountOutMin"
                                    },
                                    {
                                        "type": "address[] calldata",
                                        "name": "path"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "deadline"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "v"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "r"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "s"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "toChainID"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyswapV4Router.ensure",
                                        "AnyswapV4Router.cID"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "56b87d801027f384e07699b5e2e055e0"
                            }
                        ],
                        "anySwapInExactTokensForNative": [
                            {
                                "visibility": "external",
                                "content": "function anySwapInExactTokensForNative( bytes32 txs, uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline, uint fromChainID ) external onlyMPC virtual ensure(deadline) returns (uint[] memory amounts){ require(path[path.length - 1] == wNATIVE, 'AnyswapV3Router: INVALID_PATH'); amounts = SushiswapV2Library.getAmountsOut(factory, amountIn, path); require(amounts[amounts.length - 1] >= amountOutMin, 'AnyswapV3Router: INSUFFICIENT_OUTPUT_AMOUNT'); _anySwapIn(txs, path[0], SushiswapV2Library.pairFor(factory, path[0], path[1]), amounts[0], fromChainID); _swap(amounts, path, address(this)); IwNATIVE(wNATIVE).withdraw(amounts[amounts.length - 1]); TransferHelper.safeTransferNative(to, amounts[amounts.length - 1]);}",
                                "modifiers": [
                                    "onlyMPC",
                                    "virtual",
                                    "ensure(deadline)"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "txs"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountIn"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountOutMin"
                                    },
                                    {
                                        "type": "address[] calldata",
                                        "name": "path"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "deadline"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "fromChainID"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint[] memory",
                                        "name": "amounts"
                                    }
                                ],
                                "reads": [
                                    [
                                        "factory",
                                        "",
                                        "AnyswapV4Router"
                                    ],
                                    [
                                        "wNATIVE",
                                        "",
                                        "AnyswapV4Router"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "TransferHelper.safeTransferNative",
                                        "AnyswapV4Router.onlyMPC",
                                        "AnyswapV4Router._swap",
                                        "AnyswapV4Router.ensure",
                                        "SushiswapV2Library.getAmountsOut",
                                        "AnyswapV4Router._anySwapIn",
                                        "SushiswapV2Library.pairFor"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "c6c66a39f8c7bac5734b719b3461127c"
                            }
                        ],
                        "quote": [
                            {
                                "visibility": "public",
                                "content": "function quote(uint amountA, uint reserveA, uint reserveB) public pure virtual returns (uint amountB){ return SushiswapV2Library.quote(amountA, reserveA, reserveB);}",
                                "modifiers": [
                                    "pure",
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "amountA"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "reserveA"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "reserveB"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "amountB"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SushiswapV2Library.quote"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "f5c694a9d663caca8bb3243f52b730fb"
                            }
                        ],
                        "getAmountOut": [
                            {
                                "visibility": "public",
                                "content": "function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) public pure virtual returns (uint amountOut){ return SushiswapV2Library.getAmountOut(amountIn, reserveIn, reserveOut);}",
                                "modifiers": [
                                    "pure",
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "amountIn"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "reserveIn"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "reserveOut"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "amountOut"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SushiswapV2Library.getAmountOut"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "95db587290ccd5acf1faaed7e76ae45a"
                            }
                        ],
                        "getAmountIn": [
                            {
                                "visibility": "public",
                                "content": "function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) public pure virtual returns (uint amountIn){ return SushiswapV2Library.getAmountIn(amountOut, reserveIn, reserveOut);}",
                                "modifiers": [
                                    "pure",
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "amountOut"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "reserveIn"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "reserveOut"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "amountIn"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SushiswapV2Library.getAmountIn"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "c1822bcc0b1d1c63b5b30e19b7d3df6a"
                            }
                        ],
                        "getAmountsOut": [
                            {
                                "visibility": "public",
                                "content": "function getAmountsOut(uint amountIn, address[] memory path) public view virtual returns (uint[] memory amounts){ return SushiswapV2Library.getAmountsOut(factory, amountIn, path);}",
                                "modifiers": [
                                    "view",
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "amountIn"
                                    },
                                    {
                                        "type": "address[] memory",
                                        "name": "path"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint[] memory",
                                        "name": "amounts"
                                    }
                                ],
                                "reads": [
                                    [
                                        "factory",
                                        "",
                                        "AnyswapV4Router"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SushiswapV2Library.getAmountsOut"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "63a1ef2cc53b6abf15a234b4d326849f"
                            }
                        ],
                        "getAmountsIn": [
                            {
                                "visibility": "public",
                                "content": "function getAmountsIn(uint amountOut, address[] memory path) public view virtual returns (uint[] memory amounts){ return SushiswapV2Library.getAmountsIn(factory, amountOut, path);}",
                                "modifiers": [
                                    "view",
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "amountOut"
                                    },
                                    {
                                        "type": "address[] memory",
                                        "name": "path"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint[] memory",
                                        "name": "amounts"
                                    }
                                ],
                                "reads": [
                                    [
                                        "factory",
                                        "",
                                        "AnyswapV4Router"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SushiswapV2Library.getAmountsIn"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "8ec022812beaa2bed86c98abceaa515f"
                            }
                        ]
                    },
                    "modifiers": {
                        "ensure": {
                            "parameters": [
                                {
                                    "type": "uint",
                                    "name": "deadline"
                                }
                            ],
                            "content": "modifier ensure(uint deadline){ require(deadline >= block.timestamp, 'AnyswapV3Router: EXPIRED'); _;}",
                            "reads": [],
                            "writes": [],
                            "external_calls": [],
                            "md5": "c90cb781f5a6e1f1d99699b253c3fca0"
                        },
                        "onlyMPC": {
                            "parameters": [],
                            "content": "modifier onlyMPC(){ require(msg.sender == mpc(), \"AnyswapV3Router: FORBIDDEN\"); _;}",
                            "reads": [],
                            "writes": [],
                            "external_calls": {
                                "__set__": true,
                                "values": [
                                    "AnyswapV4Router.mpc"
                                ]
                            },
                            "md5": "a75c2415279a7702a610088c11b61697"
                        }
                    },
                    "structs": {},
                    "events": {
                        "LogChangeMPC": {
                            "event": "LogChangeMPC",
                            "content": "LogChangeMPC(address indexed oldMPC, address indexed newMPC, uint indexed effectiveTime, uint chainID)"
                        },
                        "LogChangeRouter": {
                            "event": "LogChangeRouter",
                            "content": "LogChangeRouter(address indexed oldRouter, address indexed newRouter, uint chainID)"
                        },
                        "LogAnySwapIn": {
                            "event": "LogAnySwapIn",
                            "content": "LogAnySwapIn(bytes32 indexed txhash, address indexed token, address indexed to, uint amount, uint fromChainID, uint toChainID)"
                        },
                        "LogAnySwapOut": {
                            "event": "LogAnySwapOut",
                            "content": "LogAnySwapOut(address indexed token, address indexed from, address indexed to, uint amount, uint fromChainID, uint toChainID)"
                        },
                        "LogAnySwapTradeTokensForTokens": {
                            "event": "LogAnySwapTradeTokensForTokens",
                            "content": "LogAnySwapTradeTokensForTokens(address[] path, address indexed from, address indexed to, uint amountIn, uint amountOutMin, uint fromChainID, uint toChainID)"
                        },
                        "LogAnySwapTradeTokensForNative": {
                            "event": "LogAnySwapTradeTokensForNative",
                            "content": "LogAnySwapTradeTokensForNative(address[] path, address indexed from, address indexed to, uint amountIn, uint amountOutMin, uint fromChainID, uint toChainID)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "uint": "SafeMathSushiswap"
                    }
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "SushiswapV2Library.sortTokens": "53553004d7c40a8043fec91809e5eb82",
                "SushiswapV2Library.pairFor": "0966039bc6d80270f06e5d9760ee5973",
                "SushiswapV2Library.getReserves": "e12c8e854eb992f08c30e88b3e078522",
                "SushiswapV2Library.getAmountOut": "de9a0b4fe347557aa85f1beddb841fcb",
                "SushiswapV2Library.getAmountIn": "719310c4a8954494b502bb60f325d986",
                "AnyswapV4Router.mpc": "cdfc83ed07486e348642e29a0b3c6348",
                "AnyswapV4Router.onlyMPC": "a75c2415279a7702a610088c11b61697",
                "AnyswapV4Router.cID": "3b476bdf3c0c6f59c7a2679df1573c5e",
                "AnyswapV4Router._anySwapOut": "e4e8e12324334ff907b0cb998e752f67",
                "TransferHelper.safeTransferFrom": "cb78f5eeced7c4ba60c419cbe210487c",
                "AnyswapV4Router._anySwapIn": "4bbfd89bd4ff065fd57f8ec4b230f2ab",
                "AnyswapV1ERC20.withdrawVault": "d7e3a13249332b58de63af9851184b51",
                "AnyswapV1ERC20.underlying": "79a36cf7455e5210675c01a0880c01eb",
                "AnyswapV4Router.ensure": "c90cb781f5a6e1f1d99699b253c3fca0",
                "SushiswapV2Library.getAmountsOut": "fd145cd614d3cfb20b6182a54e4853a0",
                "AnyswapV4Router._swap": "e52d6f74aab575776fd40f2a8fec3ab3",
                "TransferHelper.safeTransferNative": "a335433fd57a5f0afeeef0aefa9cdf29",
                "SushiswapV2Library.quote": "814d0103910bb8adeb7a6e1b665e2d9a",
                "SushiswapV2Library.getAmountsIn": "6409030ef935ed2148ebd6f3a0220b44"
            },
            "md5": "9558e6b539134e509321c14ac02913b8"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\0xB0ae108669CEB86E9E98e8fE9e40d98b867855fD\\NFTRouter.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\0xB0ae108669CEB86E9E98e8fE9e40d98b867855fD\\NFTRouter.sol",
            "filename": "NFTRouter.sol",
            "imported_contracts": {},
            "contracts": {
                "MPCManageable": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {
                        "mpc": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public mpc;"
                        },
                        "pendingMPC": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public pendingMPC;"
                        },
                        "delay": {
                            "type": "uint256",
                            "visibility": "public",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "2*24*3600",
                            "content": "uint256 public constant delay = 2*24*3600;"
                        },
                        "delayMPC": {
                            "type": "uint256",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256 public delayMPC;"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (address _mpc){ require(_mpc != address(0), \"MPC: mpc is the zero address\"); mpc = _mpc; emit LogChangeMPC(address(0), mpc, block.timestamp);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_mpc"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "mpc",
                                        "",
                                        "MPCManageable"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "mpc",
                                        "",
                                        "MPCManageable"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "2504dce0ebc067b01072fe87da093b50"
                            }
                        ],
                        "changeMPC": [
                            {
                                "visibility": "external",
                                "content": "function changeMPC(address _mpc) external onlyMPC{ require(_mpc != address(0), \"MPC: mpc is the zero address\"); pendingMPC = _mpc; delayMPC = block.timestamp + delay; emit LogChangeMPC(mpc, pendingMPC, delayMPC);}",
                                "modifiers": [
                                    "onlyMPC"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_mpc"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "mpc",
                                        "",
                                        "MPCManageable"
                                    ],
                                    [
                                        "pendingMPC",
                                        "",
                                        "MPCManageable"
                                    ],
                                    [
                                        "delay",
                                        "",
                                        "MPCManageable"
                                    ],
                                    [
                                        "delayMPC",
                                        "",
                                        "MPCManageable"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "pendingMPC",
                                        "",
                                        "MPCManageable"
                                    ],
                                    [
                                        "delayMPC",
                                        "",
                                        "MPCManageable"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "MPCManageable.onlyMPC"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "29536c1d432ff5a372d74a1d6c638681"
                            }
                        ],
                        "applyMPC": [
                            {
                                "visibility": "external",
                                "content": "function applyMPC() external{ require(msg.sender == pendingMPC, \"MPC: only pendingMPC\"); require(block.timestamp >= delayMPC, \"MPC: time before delayMPC\"); emit LogApplyMPC(mpc, pendingMPC, block.timestamp); mpc = pendingMPC; pendingMPC = address(0); delayMPC = 0;}",
                                "modifiers": [],
                                "parameters": [],
                                "returns": [],
                                "reads": [
                                    [
                                        "mpc",
                                        "",
                                        "MPCManageable"
                                    ],
                                    [
                                        "pendingMPC",
                                        "",
                                        "MPCManageable"
                                    ],
                                    [
                                        "delayMPC",
                                        "",
                                        "MPCManageable"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "mpc",
                                        "",
                                        "MPCManageable"
                                    ],
                                    [
                                        "pendingMPC",
                                        "",
                                        "MPCManageable"
                                    ],
                                    [
                                        "delayMPC",
                                        "",
                                        "MPCManageable"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "0724e3ec824c1ea0d57f277af1bb8816"
                            }
                        ]
                    },
                    "modifiers": {
                        "onlyMPC": {
                            "parameters": [],
                            "content": "modifier onlyMPC(){ require(msg.sender == mpc, \"MPC: only mpc\"); _;}",
                            "reads": [
                                [
                                    "mpc",
                                    "",
                                    "MPCManageable"
                                ]
                            ],
                            "writes": [],
                            "external_calls": [],
                            "md5": "2c8cae55bb5a13f557a4d161cf1305a1"
                        }
                    },
                    "structs": {},
                    "events": {
                        "LogChangeMPC": {
                            "event": "LogChangeMPC",
                            "content": "LogChangeMPC( address indexed oldMPC, address indexed newMPC, uint256 indexed effectiveTime)"
                        },
                        "LogApplyMPC": {
                            "event": "LogApplyMPC",
                            "content": "LogApplyMPC( address indexed oldMPC, address indexed newMPC, uint256 indexed applyTime)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "IERC721Transfer": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "safeTransferFrom": [
                            {
                                "visibility": "external",
                                "content": "function safeTransferFrom( address from, address to, uint256 tokenId ) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "tokenId"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "14e8f909096781c79932ba1689e55218"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                },
                "IERC1155Transfer": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "safeTransferFrom": [
                            {
                                "visibility": "external",
                                "content": "function safeTransferFrom( address from, address to, uint256 tokenId, uint256 amount, bytes calldata data ) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "tokenId"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "data"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "91b79d7b28c4173c5b2601ff8a3292dc"
                            }
                        ],
                        "safeBatchTransferFrom": [
                            {
                                "visibility": "external",
                                "content": "function safeBatchTransferFrom( address from, address to, uint256[] calldata tokenIds, uint256[] calldata amounts, bytes calldata data ) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256[] calldata",
                                        "name": "tokenIds"
                                    },
                                    {
                                        "type": "uint256[] calldata",
                                        "name": "amounts"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "data"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "ca2308894272e4023380874e78a5ced0"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                },
                "NFTRouter": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "MPCManageable"
                    ],
                    "state_variables": {
                        "cID": {
                            "type": "uint256",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256 public immutable cID;"
                        },
                        "feePerTransaction": {
                            "type": "uint256",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256 public feePerTransaction;"
                        },
                        "feePerUnitInBatch": {
                            "type": "uint256",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256 public feePerUnitInBatch;"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor ( address _mpc, uint256 _feePerTransaction, uint256 _feePerUnitInBatch ) MPCManageable(_mpc){ uint256 chainID; assembly{ chainID := chainid()} cID = chainID; feePerTransaction = _feePerTransaction; feePerUnitInBatch = _feePerUnitInBatch;}",
                                "modifiers": [
                                    "MPCManageable(_mpc)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_mpc"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_feePerTransaction"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_feePerUnitInBatch"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "cID",
                                        "",
                                        "NFTRouter"
                                    ],
                                    [
                                        "feePerTransaction",
                                        "",
                                        "NFTRouter"
                                    ],
                                    [
                                        "feePerUnitInBatch",
                                        "",
                                        "NFTRouter"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "cID",
                                        "",
                                        "NFTRouter"
                                    ],
                                    [
                                        "feePerTransaction",
                                        "",
                                        "NFTRouter"
                                    ],
                                    [
                                        "feePerUnitInBatch",
                                        "",
                                        "NFTRouter"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "8fe565a50588612e962aa3bc821045b6"
                            }
                        ],
                        "adjustFeePerTransaction": [
                            {
                                "visibility": "external",
                                "content": "function adjustFeePerTransaction(uint256 newFee) external onlyMPC{ emit LogAdjustFee(feePerTransaction, newFee, false); feePerTransaction = newFee;}",
                                "modifiers": [
                                    "onlyMPC"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "newFee"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "feePerTransaction",
                                        "",
                                        "NFTRouter"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "feePerTransaction",
                                        "",
                                        "NFTRouter"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "MPCManageable.onlyMPC"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "16a382e637246b651118cd3fc833fc84"
                            }
                        ],
                        "adjustFeePerUnitInBatch": [
                            {
                                "visibility": "external",
                                "content": "function adjustFeePerUnitInBatch(uint256 newFee) external onlyMPC{ emit LogAdjustFee(feePerUnitInBatch, newFee, true); feePerUnitInBatch = newFee;}",
                                "modifiers": [
                                    "onlyMPC"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "newFee"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "feePerUnitInBatch",
                                        "",
                                        "NFTRouter"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "feePerUnitInBatch",
                                        "",
                                        "NFTRouter"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "MPCManageable.onlyMPC"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "83490c01d537aac63816b3ce3fb4e5c5"
                            }
                        ],
                        "nft721SwapIn": [
                            {
                                "visibility": "external",
                                "content": "function nft721SwapIn( bytes32 txHash, address token, address to, uint256 tokenId, uint256 fromChainID ) external onlyMPC{ IERC721Transfer(token).safeTransferFrom(address(this), to, tokenId); emit LogNFT721SwapIn(txHash, token, to, tokenId, fromChainID, cID);}",
                                "modifiers": [
                                    "onlyMPC"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "txHash"
                                    },
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "tokenId"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "fromChainID"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "cID",
                                        "",
                                        "NFTRouter"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "MPCManageable.onlyMPC"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "88f45598140ca770ecb681e1ddb7a74f"
                            }
                        ],
                        "nft1155SwapIn": [
                            {
                                "visibility": "external",
                                "content": "function nft1155SwapIn( bytes32 txHash, address token, address to, uint256 tokenId, uint256 amount, uint256 fromChainID ) external onlyMPC{ IERC1155Transfer(token).safeTransferFrom(address(this), to, tokenId, amount, new bytes(0)); emit LogNFT1155SwapIn(txHash, token, to, tokenId, amount, fromChainID, cID);}",
                                "modifiers": [
                                    "onlyMPC"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "txHash"
                                    },
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "tokenId"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "fromChainID"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "cID",
                                        "",
                                        "NFTRouter"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "MPCManageable.onlyMPC"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "bee7e28fc22cdda68da68d45e6ecb077"
                            }
                        ],
                        "nft1155BatchSwapIn": [
                            {
                                "visibility": "external",
                                "content": "function nft1155BatchSwapIn( bytes32 txHash, address token, address to, uint256[] calldata tokenIds, uint256[] calldata amounts, uint256 fromChainID ) external onlyMPC{ IERC1155Transfer(token).safeBatchTransferFrom(address(this), to, tokenIds, amounts, new bytes(0)); emit LogNFT1155SwapInBatch(txHash, token, to, tokenIds, amounts, fromChainID, cID);}",
                                "modifiers": [
                                    "onlyMPC"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "txHash"
                                    },
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256[] calldata",
                                        "name": "tokenIds"
                                    },
                                    {
                                        "type": "uint256[] calldata",
                                        "name": "amounts"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "fromChainID"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "cID",
                                        "",
                                        "NFTRouter"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "MPCManageable.onlyMPC"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "98c8e67798e4b36af27a292652c61ac1"
                            }
                        ],
                        "nft721SwapOut": [
                            {
                                "visibility": "external",
                                "content": "function nft721SwapOut( address token, address to, uint256 tokenId, uint256 toChainID ) external payable{ _transferFee(0); IERC721Transfer(token).safeTransferFrom(msg.sender, address(this), tokenId); emit LogNFT721SwapOut(token, msg.sender, to, tokenId, cID, toChainID);}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "tokenId"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "toChainID"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "cID",
                                        "",
                                        "NFTRouter"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "NFTRouter._transferFee"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "04a6db31a13129bceb25fe4e1e91cfa4"
                            }
                        ],
                        "nft1155SwapOut": [
                            {
                                "visibility": "external",
                                "content": "function nft1155SwapOut( address token, address to, uint256 tokenId, uint256 amount, bytes calldata data, uint256 toChainID ) external payable{ _transferFee(0); IERC1155Transfer(token).safeTransferFrom(msg.sender, address(this), tokenId, amount, data); emit LogNFT1155SwapOut(token, msg.sender, to, tokenId, amount, cID, toChainID);}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "tokenId"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "data"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "toChainID"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "cID",
                                        "",
                                        "NFTRouter"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "NFTRouter._transferFee"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "6fd63610b8f1bacce7455f3839c76c40"
                            }
                        ],
                        "nft1155BatchSwapOut": [
                            {
                                "visibility": "external",
                                "content": "function nft1155BatchSwapOut( address token, address to, uint256[] calldata tokenIds, uint256[] calldata amounts, bytes calldata data, uint256 toChainID ) external payable{ _transferFee(tokenIds.length); IERC1155Transfer(token).safeBatchTransferFrom(msg.sender, address(this), tokenIds, amounts, data); emit LogNFT1155SwapOutBatch(token, msg.sender, to, tokenIds, amounts, cID, toChainID);}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256[] calldata",
                                        "name": "tokenIds"
                                    },
                                    {
                                        "type": "uint256[] calldata",
                                        "name": "amounts"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "data"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "toChainID"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "cID",
                                        "",
                                        "NFTRouter"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "NFTRouter._transferFee"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "3f9b61baba78efe370d6e90c951ab3ce"
                            }
                        ],
                        "_transferFee": [
                            {
                                "visibility": "internal",
                                "content": "function _transferFee(uint256 unitsInBatch) internal{ uint256 needFee = feePerTransaction + unitsInBatch * feePerUnitInBatch; require(msg.value >= needFee, \"NFTRouter: not enough fee\"); if (msg.value > 0){ (bool success, ) = mpc.call{ value: msg.value} (new bytes(0)); require(success, \"NFTRouter: transfer fee failed\");}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "unitsInBatch"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "mpc",
                                        "",
                                        "MPCManageable"
                                    ],
                                    [
                                        "feePerTransaction",
                                        "",
                                        "NFTRouter"
                                    ],
                                    [
                                        "feePerUnitInBatch",
                                        "",
                                        "NFTRouter"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "30e193fc6710d31197fff374bc1537be"
                            }
                        ],
                        "onERC721Received": [
                            {
                                "visibility": "external",
                                "content": "function onERC721Received(address, address, uint256, bytes calldata) external pure returns (bytes4){ return NFTRouter.onERC721Received.selector;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": null
                                    },
                                    {
                                        "type": "address",
                                        "name": null
                                    },
                                    {
                                        "type": "uint256",
                                        "name": null
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": null
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes4",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "38c026ed494f840839d91b399077a7b5"
                            }
                        ],
                        "onERC1155Received": [
                            {
                                "visibility": "external",
                                "content": "function onERC1155Received(address, address, uint256, uint256, bytes calldata) external pure returns (bytes4){ return NFTRouter.onERC1155Received.selector;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": null
                                    },
                                    {
                                        "type": "address",
                                        "name": null
                                    },
                                    {
                                        "type": "uint256",
                                        "name": null
                                    },
                                    {
                                        "type": "uint256",
                                        "name": null
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": null
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes4",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "7193d07e7c35ad9078f2239d8d2cd4da"
                            }
                        ],
                        "onERC1155BatchReceived": [
                            {
                                "visibility": "external",
                                "content": "function onERC1155BatchReceived(address, address, uint256[] calldata, uint256[] calldata, bytes calldata) external pure returns (bytes4){ return NFTRouter.onERC1155BatchReceived.selector;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": null
                                    },
                                    {
                                        "type": "address",
                                        "name": null
                                    },
                                    {
                                        "type": "uint256[] calldata",
                                        "name": null
                                    },
                                    {
                                        "type": "uint256[] calldata",
                                        "name": null
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": null
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes4",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "fa711f4dfe30bec9560e678f3854bd18"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {
                        "LogAdjustFee": {
                            "event": "LogAdjustFee",
                            "content": "LogAdjustFee( uint256 indexed oldFee, uint256 indexed newFee, bool isUnitFee)"
                        },
                        "LogNFT721SwapIn": {
                            "event": "LogNFT721SwapIn",
                            "content": "LogNFT721SwapIn( bytes32 indexed txHash, address indexed token, address indexed to, uint256 tokenId, uint256 fromChainID, uint256 toChainID)"
                        },
                        "LogNFT1155SwapIn": {
                            "event": "LogNFT1155SwapIn",
                            "content": "LogNFT1155SwapIn( bytes32 indexed txHash, address indexed token, address indexed to, uint256 tokenId, uint256 amount, uint256 fromChainID, uint256 toChainID)"
                        },
                        "LogNFT1155SwapInBatch": {
                            "event": "LogNFT1155SwapInBatch",
                            "content": "LogNFT1155SwapInBatch( bytes32 indexed txHash, address indexed token, address indexed to, uint256[] tokenIds, uint256[] amounts, uint256 fromChainID, uint256 toChainID)"
                        },
                        "LogNFT721SwapOut": {
                            "event": "LogNFT721SwapOut",
                            "content": "LogNFT721SwapOut( address indexed token, address indexed from, address indexed to, uint256 tokenId, uint256 fromChainID, uint256 toChainID)"
                        },
                        "LogNFT1155SwapOut": {
                            "event": "LogNFT1155SwapOut",
                            "content": "LogNFT1155SwapOut( address indexed token, address indexed from, address indexed to, uint256 tokenId, uint256 amount, uint256 fromChainID, uint256 toChainID)"
                        },
                        "LogNFT1155SwapOutBatch": {
                            "event": "LogNFT1155SwapOutBatch",
                            "content": "LogNFT1155SwapOutBatch( address indexed token, address indexed from, address indexed to, uint256[] tokenIds, uint256[] amounts, uint256 fromChainID, uint256 toChainID)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "MPCManageable.onlyMPC": "2c8cae55bb5a13f557a4d161cf1305a1",
                "NFTRouter._transferFee": "30e193fc6710d31197fff374bc1537be"
            },
            "md5": "559cc70ac14f736c46fc5d13619b7499"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\0xf99d58e463A2E07e5692127302C20A191861b4D6\\Erc20SwapAsset.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\0xf99d58e463A2E07e5692127302C20A191861b4D6\\Erc20SwapAsset.sol",
            "filename": "Erc20SwapAsset.sol",
            "imported_contracts": {},
            "contracts": {
                "Context": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "internal",
                                "content": "constructor () internal{}",
                                "modifiers": [],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "2a23d0858cde090e7b199aa638ffd5dd"
                            }
                        ],
                        "_msgSender": [
                            {
                                "visibility": "internal",
                                "content": "function _msgSender() internal view returns (address payable){ return msg.sender;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address payable",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "a9b7db3c77abe3957815043d4f2458b9"
                            }
                        ],
                        "_msgData": [
                            {
                                "visibility": "internal",
                                "content": "function _msgData() internal view returns (bytes memory){ this; return msg.data;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "2b2ce6b0dd727ef0cc3f42de9b60e2df"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "IERC20": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "totalSupply": [
                            {
                                "visibility": "external",
                                "content": "function totalSupply() external view returns (uint256);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "5e1d12e61f4bf4b37161d9b684742570"
                            }
                        ],
                        "balanceOf": [
                            {
                                "visibility": "external",
                                "content": "function balanceOf(address account) external view returns (uint256);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "account"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "3ac17e7782366957c960d337a4a648cd"
                            }
                        ],
                        "transfer": [
                            {
                                "visibility": "external",
                                "content": "function transfer(address recipient, uint256 amount) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "recipient"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "98b540da9047ee99bce7fadde65d04b7"
                            }
                        ],
                        "allowance": [
                            {
                                "visibility": "external",
                                "content": "function allowance(address owner, address spender) external view returns (uint256);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "owner"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c93791d09d789aed33b9725d482af442"
                            }
                        ],
                        "approve": [
                            {
                                "visibility": "external",
                                "content": "function approve(address spender, uint256 amount) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "7c80d707df648dc123a10c69a1150edc"
                            }
                        ],
                        "transferFrom": [
                            {
                                "visibility": "external",
                                "content": "function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "sender"
                                    },
                                    {
                                        "type": "address",
                                        "name": "recipient"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c134d67e13a988b449de71dd226682ab"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {
                        "Transfer": {
                            "event": "Transfer",
                            "content": "Transfer(address indexed from, address indexed to, uint256 value)"
                        },
                        "Approval": {
                            "event": "Approval",
                            "content": "Approval(address indexed owner, address indexed spender, uint256 value)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": [
                        [
                            "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\0xf99d58e463A2E07e5692127302C20A191861b4D6\\Erc20SwapAsset.sol",
                            "ERC20"
                        ],
                        [
                            "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\0xf99d58e463A2E07e5692127302C20A191861b4D6\\Erc20SwapAsset.sol",
                            "ERC20Detailed"
                        ]
                    ]
                },
                "SafeMath": {
                    "type": {
                        "__CT__": true,
                        "value": 2
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "add": [
                            {
                                "visibility": "internal",
                                "content": "function add(uint256 a, uint256 b) internal pure returns (uint256){ uint256 c = a + b; require(c >= a, \"SafeMath: addition overflow\"); return c;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "a"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "b"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "b83a169007730f80a7fc79bee8748fff"
                            }
                        ],
                        "sub": [
                            {
                                "visibility": "internal",
                                "content": "function sub(uint256 a, uint256 b) internal pure returns (uint256){ return sub(a, b, \"SafeMath: subtraction overflow\");}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "a"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "b"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SafeMath.sub"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "972c2868144778b0617e55a6f97163a0"
                            },
                            {
                                "visibility": "internal",
                                "content": "function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256){ require(b <= a, errorMessage); uint256 c = a - b; return c;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "a"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "b"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "errorMessage"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SafeMath.sub"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "5005b7d925d95cb4c4c0f092235e9f5d"
                            }
                        ],
                        "mul": [
                            {
                                "visibility": "internal",
                                "content": "function mul(uint256 a, uint256 b) internal pure returns (uint256){ if (a == 0){ return 0;} uint256 c = a * b; require(c / a == b, \"SafeMath: multiplication overflow\"); return c;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "a"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "b"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "5622448ca508810ce734d0cb10517566"
                            }
                        ],
                        "div": [
                            {
                                "visibility": "internal",
                                "content": "function div(uint256 a, uint256 b) internal pure returns (uint256){ return div(a, b, \"SafeMath: division by zero\");}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "a"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "b"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SafeMath.div"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "371f945bc2211ac7c63e7277fb7222a7"
                            },
                            {
                                "visibility": "internal",
                                "content": "function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256){ require(b > 0, errorMessage); uint256 c = a / b; return c;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "a"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "b"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "errorMessage"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SafeMath.div"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "bff731811ec791ca1a5d6bc88d8d75a5"
                            }
                        ],
                        "mod": [
                            {
                                "visibility": "internal",
                                "content": "function mod(uint256 a, uint256 b) internal pure returns (uint256){ return mod(a, b, \"SafeMath: modulo by zero\");}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "a"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "b"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SafeMath.mod"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "50a3733021c21a71491ee85ffb90a2a4"
                            },
                            {
                                "visibility": "internal",
                                "content": "function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256){ require(b != 0, errorMessage); return a % b;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "a"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "b"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "errorMessage"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SafeMath.mod"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "8ec02abe488c084092f946ae1c4a8ccd"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "ERC20": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "Context",
                        "IERC20"
                    ],
                    "state_variables": {
                        "_balances": {
                            "type": "mapping (address => uint256)",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping (address => uint256) private _balances;"
                        },
                        "_allowances": {
                            "type": "mapping (address => mapping (address => uint256))",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping (address => mapping (address => uint256)) private _allowances;"
                        },
                        "_totalSupply": {
                            "type": "uint256",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256 private _totalSupply;"
                        }
                    },
                    "functions": {
                        "totalSupply": [
                            {
                                "visibility": "public",
                                "content": "function totalSupply() public view returns (uint256){ return _totalSupply;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_totalSupply",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "5e6ad72e6028056bb2255274ad077161"
                            }
                        ],
                        "balanceOf": [
                            {
                                "visibility": "public",
                                "content": "function balanceOf(address account) public view returns (uint256){ return _balances[account];}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "account"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_balances",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "ad4eae4ea23632ef2838d60fcaf49fde"
                            }
                        ],
                        "transfer": [
                            {
                                "visibility": "public",
                                "content": "function transfer(address recipient, uint256 amount) public returns (bool){ _transfer(_msgSender(), recipient, amount); return true;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "recipient"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20._msgSender",
                                        "ERC20._transfer"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "a2516d20ff5e2dfd4d99847fff76a3f2"
                            }
                        ],
                        "allowance": [
                            {
                                "visibility": "public",
                                "content": "function allowance(address owner, address spender) public view returns (uint256){ return _allowances[owner][spender];}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "owner"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_allowances",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "592bc064168755118c9f037687aa6211"
                            }
                        ],
                        "approve": [
                            {
                                "visibility": "public",
                                "content": "function approve(address spender, uint256 amount) public returns (bool){ _approve(_msgSender(), spender, amount); return true;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20._msgSender",
                                        "ERC20._approve"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "dde63135ec4b9e7ee1cc6eb25da3b8ba"
                            }
                        ],
                        "transferFrom": [
                            {
                                "visibility": "public",
                                "content": "function transferFrom(address sender, address recipient, uint256 amount) public returns (bool){ _transfer(sender, recipient, amount); _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\")); return true;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "sender"
                                    },
                                    {
                                        "type": "address",
                                        "name": "recipient"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_allowances",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20._msgSender",
                                        "ERC20._approve",
                                        "ERC20._transfer"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "3605d7f86a87c3d1b2a53d3f1493ae68"
                            }
                        ],
                        "increaseAllowance": [
                            {
                                "visibility": "public",
                                "content": "function increaseAllowance(address spender, uint256 addedValue) public returns (bool){ _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue)); return true;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "addedValue"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_allowances",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20._msgSender",
                                        "ERC20._approve"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "66af2c46d28cf0145304c631c700f803"
                            }
                        ],
                        "decreaseAllowance": [
                            {
                                "visibility": "public",
                                "content": "function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool){ _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\")); return true;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "subtractedValue"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_allowances",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20._msgSender",
                                        "ERC20._approve"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "9f3aa62efc251534839eaa0c93bba8b3"
                            }
                        ],
                        "_transfer": [
                            {
                                "visibility": "internal",
                                "content": "function _transfer(address sender, address recipient, uint256 amount) internal{ require(sender != address(0), \"ERC20: transfer from the zero address\"); require(recipient != address(0), \"ERC20: transfer to the zero address\"); _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\"); _balances[recipient] = _balances[recipient].add(amount); emit Transfer(sender, recipient, amount);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "sender"
                                    },
                                    {
                                        "type": "address",
                                        "name": "recipient"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_balances",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_balances",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "1ceaa1124f36ab43fd811f2d78d1431e"
                            }
                        ],
                        "_mint": [
                            {
                                "visibility": "internal",
                                "content": "function _mint(address account, uint256 amount) internal{ require(account != address(0), \"ERC20: mint to the zero address\"); _totalSupply = _totalSupply.add(amount); _balances[account] = _balances[account].add(amount); emit Transfer(address(0), account, amount);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "account"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_balances",
                                        "",
                                        "ERC20"
                                    ],
                                    [
                                        "_totalSupply",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_balances",
                                        "",
                                        "ERC20"
                                    ],
                                    [
                                        "_totalSupply",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "_totalSupply.add"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "1849059c445ce826b07aabafc80e1d59"
                            }
                        ],
                        "_burn": [
                            {
                                "visibility": "internal",
                                "content": "function _burn(address account, uint256 amount) internal{ require(account != address(0), \"ERC20: burn from the zero address\"); _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\"); _totalSupply = _totalSupply.sub(amount); emit Transfer(account, address(0), amount);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "account"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_balances",
                                        "",
                                        "ERC20"
                                    ],
                                    [
                                        "_totalSupply",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_balances",
                                        "",
                                        "ERC20"
                                    ],
                                    [
                                        "_totalSupply",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "_totalSupply.sub"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "dc244a93980fa244faa9d765efc9913a"
                            }
                        ],
                        "_approve": [
                            {
                                "visibility": "internal",
                                "content": "function _approve(address owner, address spender, uint256 amount) internal{ require(owner != address(0), \"ERC20: approve from the zero address\"); require(spender != address(0), \"ERC20: approve to the zero address\"); _allowances[owner][spender] = amount; emit Approval(owner, spender, amount);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "owner"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_allowances",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_allowances",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c73ffec8be8861a4433ee22a6bf25bb3"
                            }
                        ],
                        "_burnFrom": [
                            {
                                "visibility": "internal",
                                "content": "function _burnFrom(address account, uint256 amount) internal{ _burn(account, amount); _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "account"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_allowances",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20._burn",
                                        "ERC20._msgSender",
                                        "ERC20._approve"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "29791211cc2110eec5b89df326e8bbc1"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "uint256": "SafeMath"
                    }
                },
                "ERC20Detailed": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "IERC20"
                    ],
                    "state_variables": {
                        "_name": {
                            "type": "string",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "string private _name;"
                        },
                        "_symbol": {
                            "type": "string",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "string private _symbol;"
                        },
                        "_decimals": {
                            "type": "uint8",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint8 private _decimals;"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (string memory name, string memory symbol, uint8 decimals) public{ _name = name; _symbol = symbol; _decimals = decimals;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "string memory",
                                        "name": "name"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "symbol"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "decimals"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_name",
                                        "",
                                        "ERC20Detailed"
                                    ],
                                    [
                                        "_symbol",
                                        "",
                                        "ERC20Detailed"
                                    ],
                                    [
                                        "_decimals",
                                        "",
                                        "ERC20Detailed"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_name",
                                        "",
                                        "ERC20Detailed"
                                    ],
                                    [
                                        "_symbol",
                                        "",
                                        "ERC20Detailed"
                                    ],
                                    [
                                        "_decimals",
                                        "",
                                        "ERC20Detailed"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "d2404ecdfe6816aa8a876e47591b5030"
                            }
                        ],
                        "name": [
                            {
                                "visibility": "public",
                                "content": "function name() public view returns (string memory){ return _name;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "string memory",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_name",
                                        "",
                                        "ERC20Detailed"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "8572f20ecd43eb9f02a2efc81fdc4578"
                            }
                        ],
                        "symbol": [
                            {
                                "visibility": "public",
                                "content": "function symbol() public view returns (string memory){ return _symbol;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "string memory",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_symbol",
                                        "",
                                        "ERC20Detailed"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "b002d129ce65d0f4df01da6ede3b5e4d"
                            }
                        ],
                        "decimals": [
                            {
                                "visibility": "public",
                                "content": "function decimals() public view returns (uint8){ return _decimals;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint8",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_decimals",
                                        "",
                                        "ERC20Detailed"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c396c5ca1d21fa7e84c10681e8d59b07"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "Erc20SwapAsset": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "ERC20",
                        "ERC20Detailed"
                    ],
                    "state_variables": {
                        "_oldOwner": {
                            "type": "address",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address private _oldOwner;"
                        },
                        "_newOwner": {
                            "type": "address",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address private _newOwner;"
                        },
                        "_newOwnerEffectiveHeight": {
                            "type": "uint256",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256 private _newOwnerEffectiveHeight;"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (string memory name, string memory symbol, uint8 decimals) public ERC20Detailed(name, symbol, decimals){ _newOwner = msg.sender; _newOwnerEffectiveHeight = block.number;}",
                                "modifiers": [
                                    "ERC20Detailed(name, symbol, decimals)"
                                ],
                                "parameters": [
                                    {
                                        "type": "string memory",
                                        "name": "name"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "symbol"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "decimals"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_newOwner",
                                        "",
                                        "Erc20SwapAsset"
                                    ],
                                    [
                                        "_newOwnerEffectiveHeight",
                                        "",
                                        "Erc20SwapAsset"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_newOwner",
                                        "",
                                        "Erc20SwapAsset"
                                    ],
                                    [
                                        "_newOwnerEffectiveHeight",
                                        "",
                                        "Erc20SwapAsset"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "a2834f24ef95f546a4c1001c7e41f3bd"
                            }
                        ],
                        "owner": [
                            {
                                "visibility": "public",
                                "content": "function owner() public view returns (address){ if (block.number >= _newOwnerEffectiveHeight){ return _newOwner;} return _oldOwner;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_oldOwner",
                                        "",
                                        "Erc20SwapAsset"
                                    ],
                                    [
                                        "_newOwner",
                                        "",
                                        "Erc20SwapAsset"
                                    ],
                                    [
                                        "_newOwnerEffectiveHeight",
                                        "",
                                        "Erc20SwapAsset"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "a527dfd59a62d924ab665f02488faa88"
                            }
                        ],
                        "changeDCRMOwner": [
                            {
                                "visibility": "public",
                                "content": "function changeDCRMOwner(address newOwner) public onlyOwner returns (bool){ require(newOwner != address(0), \"new owner is the zero address\"); _oldOwner = owner(); _newOwner = newOwner; _newOwnerEffectiveHeight = block.number + 13300; emit LogChangeDCRMOwner(_oldOwner, _newOwner, _newOwnerEffectiveHeight); return true;}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "newOwner"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_oldOwner",
                                        "",
                                        "Erc20SwapAsset"
                                    ],
                                    [
                                        "_newOwner",
                                        "",
                                        "Erc20SwapAsset"
                                    ],
                                    [
                                        "_newOwnerEffectiveHeight",
                                        "",
                                        "Erc20SwapAsset"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_oldOwner",
                                        "",
                                        "Erc20SwapAsset"
                                    ],
                                    [
                                        "_newOwner",
                                        "",
                                        "Erc20SwapAsset"
                                    ],
                                    [
                                        "_newOwnerEffectiveHeight",
                                        "",
                                        "Erc20SwapAsset"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Erc20SwapAsset.owner",
                                        "Erc20SwapAsset.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "831f67aa1c7c6148dab1eaedd653735d"
                            }
                        ],
                        "Swapin": [
                            {
                                "visibility": "public",
                                "content": "function Swapin(bytes32 txhash, address account, uint256 amount) public onlyOwner returns (bool){ _mint(account, amount); emit LogSwapin(txhash, account, amount); return true;}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "txhash"
                                    },
                                    {
                                        "type": "address",
                                        "name": "account"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Erc20SwapAsset.onlyOwner",
                                        "ERC20._mint"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "499c46eb22e35b6fbd2f4115b36069e0"
                            }
                        ],
                        "Swapout": [
                            {
                                "visibility": "public",
                                "content": "function Swapout(uint256 amount, address bindaddr) public returns (bool){ require(bindaddr != address(0), \"bind address is the zero address\"); _burn(_msgSender(), amount); emit LogSwapout(_msgSender(), bindaddr, amount); return true;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "address",
                                        "name": "bindaddr"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20._burn",
                                        "ERC20._msgSender"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "586b2e1c997a7213217353cb300d8ac4"
                            }
                        ]
                    },
                    "modifiers": {
                        "onlyOwner": {
                            "parameters": [],
                            "content": "modifier onlyOwner(){ require(msg.sender == owner(), \"only owner\"); _;}",
                            "reads": [],
                            "writes": [],
                            "external_calls": {
                                "__set__": true,
                                "values": [
                                    "Erc20SwapAsset.owner"
                                ]
                            },
                            "md5": "f066aa80ace803bcfe138e5919d5383e"
                        }
                    },
                    "structs": {},
                    "events": {
                        "LogChangeDCRMOwner": {
                            "event": "LogChangeDCRMOwner",
                            "content": "LogChangeDCRMOwner(address indexed oldOwner, address indexed newOwner, uint indexed effectiveHeight)"
                        },
                        "LogSwapin": {
                            "event": "LogSwapin",
                            "content": "LogSwapin(bytes32 indexed txhash, address indexed account, uint amount)"
                        },
                        "LogSwapout": {
                            "event": "LogSwapout",
                            "content": "LogSwapout(address indexed account, address indexed bindaddr, uint amount)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "SafeMath.sub": "972c2868144778b0617e55a6f97163a0",
                "SafeMath.div": "371f945bc2211ac7c63e7277fb7222a7",
                "SafeMath.mod": "50a3733021c21a71491ee85ffb90a2a4",
                "ERC20._transfer": "1ceaa1124f36ab43fd811f2d78d1431e",
                "ERC20._approve": "c73ffec8be8861a4433ee22a6bf25bb3",
                "ERC20._burn": "dc244a93980fa244faa9d765efc9913a",
                "Erc20SwapAsset.owner": "a527dfd59a62d924ab665f02488faa88",
                "Erc20SwapAsset.onlyOwner": "f066aa80ace803bcfe138e5919d5383e",
                "ERC20._mint": "1849059c445ce826b07aabafc80e1d59"
            },
            "md5": "a7cbd39a81aad92a30ce35df32b0b2be"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\Address.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\Address.sol",
            "filename": "Address.sol",
            "imported_contracts": {},
            "contracts": {
                "Address": {
                    "type": {
                        "__CT__": true,
                        "value": 2
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "isContract": [
                            {
                                "visibility": "internal",
                                "content": "function isContract(address account) internal view returns (bool){ return account.code.length > 0;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "account"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "d5972f1432570efe297b754cd2693d6f"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "c9c3be927036f4583b5922ec27a14061"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\Administrable.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\Administrable.sol",
            "filename": "Administrable.sol",
            "imported_contracts": {},
            "contracts": {
                "Administrable": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {
                        "admin": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public admin;"
                        },
                        "pendingAdmin": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public pendingAdmin;"
                        }
                    },
                    "functions": {
                        "setAdmin": [
                            {
                                "visibility": "internal",
                                "content": "function setAdmin(address admin_) internal{ admin = admin_; emit LogSetAdmin(admin_);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "admin_"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "admin",
                                        "",
                                        "Administrable"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "admin",
                                        "",
                                        "Administrable"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "8ded29928dfe98b088b996f1d3b4e7dd"
                            }
                        ],
                        "transferAdmin": [
                            {
                                "visibility": "external",
                                "content": "function transferAdmin(address newAdmin) external onlyAdmin{ address oldAdmin = pendingAdmin; pendingAdmin = newAdmin; emit LogTransferAdmin(oldAdmin, newAdmin);}",
                                "modifiers": [
                                    "onlyAdmin"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "newAdmin"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "pendingAdmin",
                                        "",
                                        "Administrable"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "pendingAdmin",
                                        "",
                                        "Administrable"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Administrable.onlyAdmin"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "fcf4b07f2eec8fdbb1891e7fc43df302"
                            }
                        ],
                        "acceptAdmin": [
                            {
                                "visibility": "external",
                                "content": "function acceptAdmin() external{ require(msg.sender == pendingAdmin); admin = pendingAdmin; pendingAdmin = address(0); emit LogAcceptAdmin(admin);}",
                                "modifiers": [],
                                "parameters": [],
                                "returns": [],
                                "reads": [
                                    [
                                        "admin",
                                        "",
                                        "Administrable"
                                    ],
                                    [
                                        "pendingAdmin",
                                        "",
                                        "Administrable"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "admin",
                                        "",
                                        "Administrable"
                                    ],
                                    [
                                        "pendingAdmin",
                                        "",
                                        "Administrable"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "e3e8b83d9abd9b41d4402ddd9e18cd97"
                            }
                        ]
                    },
                    "modifiers": {
                        "onlyAdmin": {
                            "parameters": [],
                            "content": "modifier onlyAdmin(){ require(msg.sender == admin); _;}",
                            "reads": [
                                [
                                    "admin",
                                    "",
                                    "Administrable"
                                ]
                            ],
                            "writes": [],
                            "external_calls": [],
                            "md5": "09edb7de44e02ee8faf76bcd37da4f4f"
                        }
                    },
                    "structs": {},
                    "events": {
                        "LogSetAdmin": {
                            "event": "LogSetAdmin",
                            "content": "LogSetAdmin(address admin)"
                        },
                        "LogTransferAdmin": {
                            "event": "LogTransferAdmin",
                            "content": "LogTransferAdmin(address oldadmin, address newadmin)"
                        },
                        "LogAcceptAdmin": {
                            "event": "LogAcceptAdmin",
                            "content": "LogAcceptAdmin(address admin)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "Administrable.onlyAdmin": "09edb7de44e02ee8faf76bcd37da4f4f"
            },
            "md5": "6679291083c41b0d4785e885fb27c495"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\interfaces\\IAnycallV6Proxy.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\interfaces\\IAnycallV6Proxy.sol",
            "filename": "IAnycallV6Proxy.sol",
            "imported_contracts": {},
            "contracts": {
                "IAnycallV6Proxy": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "anyCall": [
                            {
                                "visibility": "external",
                                "content": "function anyCall( address _to, bytes calldata _data, address _fallback, uint256 _toChainID, uint256 _flags ) external payable;",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_to"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "_data"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_fallback"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_toChainID"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_flags"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": true,
                                "md5": "05461be27358f92acb1c79912d078b87"
                            }
                        ],
                        "executor": [
                            {
                                "visibility": "external",
                                "content": "function executor() external view returns (address);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "41484b4426579bd6766e59536dd32d10"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "b34524d0feb1c1ad0cf3a6a254d6dd51"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\interfaces\\IExecutor.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\interfaces\\IExecutor.sol",
            "filename": "IExecutor.sol",
            "imported_contracts": {},
            "contracts": {
                "IExecutor": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "context": [
                            {
                                "visibility": "external",
                                "content": "function context() external returns (address from, uint256 fromChainID, uint256 nonce);",
                                "modifiers": [],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "fromChainID"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "nonce"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "7513d9e0518bc5d60df86f66aad9632f"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "6b8cc32342a6dc3fd9ebcbe4f94d85a5"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\AnyCallApp.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\AnyCallApp.sol",
            "filename": "AnyCallApp.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\Administrable.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\interfaces\\IAnycallV6Proxy.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\interfaces\\IExecutor.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "AnyCallApp": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": true,
                    "inherits": [
                        "is",
                        "Administrable"
                    ],
                    "state_variables": {
                        "flag": {
                            "type": "uint256",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256 public flag;"
                        },
                        "anyCallProxy": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public immutable anyCallProxy;"
                        },
                        "peer": {
                            "type": "mapping(uint256 => address)",
                            "visibility": "internal",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(uint256 => address) internal peer;"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (address anyCallProxy_, uint256 flag_){ anyCallProxy = anyCallProxy_; flag = flag_;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "anyCallProxy_"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "flag_"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "flag",
                                        "",
                                        "AnyCallApp"
                                    ],
                                    [
                                        "anyCallProxy",
                                        "",
                                        "AnyCallApp"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "flag",
                                        "",
                                        "AnyCallApp"
                                    ],
                                    [
                                        "anyCallProxy",
                                        "",
                                        "AnyCallApp"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "d07315342b20139ecf13a53bbe013d46"
                            }
                        ],
                        "setPeers": [
                            {
                                "visibility": "public",
                                "content": "function setPeers(uint256[] memory chainIDs, address[] memory peers) public onlyAdmin{ for (uint i = 0; i < chainIDs.length; i++){ peer[chainIDs[i]] = peers[i]; emit SetPeers(chainIDs, peers);}}",
                                "modifiers": [
                                    "onlyAdmin"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256[] memory",
                                        "name": "chainIDs"
                                    },
                                    {
                                        "type": "address[] memory",
                                        "name": "peers"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "peer",
                                        "",
                                        "AnyCallApp"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "peer",
                                        "",
                                        "AnyCallApp"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyCallApp.onlyAdmin"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "df877dba439a250f5b58cbee9f4e2ea4"
                            }
                        ],
                        "getPeer": [
                            {
                                "visibility": "external",
                                "content": "function getPeer(uint256 foreignChainID) external view returns (address){ return peer[foreignChainID];}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "foreignChainID"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "peer",
                                        "",
                                        "AnyCallApp"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "3866f1e3b9980996b5bca6e2efc54b22"
                            }
                        ],
                        "_anyExecute": [
                            {
                                "visibility": "internal",
                                "content": "function _anyExecute(uint256 fromChainID, bytes calldata data) internal virtual returns (bool success, bytes memory result);",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "fromChainID"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "data"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": "success"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "result"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "225d25376488494220509920b115a9b1"
                            }
                        ],
                        "_anyCall": [
                            {
                                "visibility": "internal",
                                "content": "function _anyCall(address _to, bytes memory _data, address _fallback, uint256 _toChainID) internal{ if (flag == 2){ IAnycallV6Proxy(anyCallProxy).anyCall{ value: msg.value} (_to, _data, _fallback, _toChainID, flag);} else{ IAnycallV6Proxy(anyCallProxy).anyCall(_to, _data, _fallback, _toChainID, flag);}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_to"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "_data"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_fallback"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_toChainID"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "flag",
                                        "",
                                        "AnyCallApp"
                                    ],
                                    [
                                        "anyCallProxy",
                                        "",
                                        "AnyCallApp"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyCallApp.IAnycallV6Proxy"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "455b45f2d3ec0c19a181336507b73202"
                            }
                        ],
                        "anyExecute": [
                            {
                                "visibility": "external",
                                "content": "function anyExecute(bytes calldata data) external onlyExecutor returns (bool success, bytes memory result){ (address callFrom, uint256 fromChainID, ) = IExecutor(IAnycallV6Proxy(anyCallProxy).executor()).context(); require(peer[fromChainID] == callFrom, \"call not allowed\"); _anyExecute(fromChainID, data);}",
                                "modifiers": [
                                    "onlyExecutor"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes calldata",
                                        "name": "data"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": "success"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "result"
                                    }
                                ],
                                "reads": [
                                    [
                                        "anyCallProxy",
                                        "",
                                        "AnyCallApp"
                                    ],
                                    [
                                        "peer",
                                        "",
                                        "AnyCallApp"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyCallApp.IExecutor",
                                        "AnyCallApp.onlyExecutor",
                                        "AnyCallApp._anyExecute",
                                        "AnyCallApp.IAnycallV6Proxy"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "261e421cdc0c309218c577e1309c379b"
                            }
                        ]
                    },
                    "modifiers": {
                        "onlyExecutor": {
                            "parameters": [],
                            "content": "modifier onlyExecutor(){ require(msg.sender == IAnycallV6Proxy(anyCallProxy).executor()); _;}",
                            "reads": [
                                [
                                    "anyCallProxy",
                                    "",
                                    "AnyCallApp"
                                ]
                            ],
                            "writes": [],
                            "external_calls": {
                                "__set__": true,
                                "values": [
                                    "AnyCallApp.IAnycallV6Proxy"
                                ]
                            },
                            "md5": "aeadfe47a9b2740fb36f3d3656df16e5"
                        }
                    },
                    "structs": {},
                    "events": {
                        "SetPeers": {
                            "event": "SetPeers",
                            "content": "SetPeers(uint256[] chainIDs, address[] peers)"
                        },
                        "SetAnyCallProxy": {
                            "event": "SetAnyCallProxy",
                            "content": "SetAnyCallProxy(address proxy)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "AnyCallApp.onlyAdmin": "09edb7de44e02ee8faf76bcd37da4f4f",
                "AnyCallApp.onlyExecutor": "aeadfe47a9b2740fb36f3d3656df16e5",
                "AnyCallApp._anyExecute": "225d25376488494220509920b115a9b1"
            },
            "md5": "17323570b8e5a036cf6f5a16d6cf3fd2"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\AnyCallAppFallback.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\AnyCallAppFallback.sol",
            "filename": "AnyCallAppFallback.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\AnyCallApp.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "AnyCallAppFallback": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": true,
                    "inherits": [
                        "is",
                        "AnyCallApp"
                    ],
                    "state_variables": {},
                    "functions": {
                        "_anyFallback": [
                            {
                                "visibility": "internal",
                                "content": "function _anyFallback(bytes calldata data) internal virtual;",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes calldata",
                                        "name": "data"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "669c38c0ad0c0c5d7c09f6c3065f18ea"
                            }
                        ],
                        "anyFallback": [
                            {
                                "visibility": "external",
                                "content": "function anyFallback(address to, bytes calldata data) external onlyExecutor{ (address callFrom,, ) = IExecutor(IAnycallV6Proxy(anyCallProxy).executor()).context(); require(address(this) == callFrom, \"call not allowed\"); _anyFallback(data);}",
                                "modifiers": [
                                    "onlyExecutor"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "data"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "anyCallProxy",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\AnyCallApp.sol",
                                        "AnyCallApp"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyCallAppFallback.IExecutor",
                                        "AnyCallAppFallback.IAnycallV6Proxy",
                                        "AnyCallAppFallback.onlyExecutor",
                                        "AnyCallAppFallback._anyFallback"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "370274b7f344c148a1c83fb551f56c3d"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "AnyCallAppFallback.onlyExecutor": "aeadfe47a9b2740fb36f3d3656df16e5",
                "AnyCallAppFallback._anyFallback": "669c38c0ad0c0c5d7c09f6c3065f18ea"
            },
            "md5": "393df93ce1730fb57e40d160aa08dec1"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\AnyswapV1Pair.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\AnyswapV1Pair.sol",
            "filename": "AnyswapV1Pair.sol",
            "imported_contracts": {},
            "contracts": {
                "IERC20": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "name": [
                            {
                                "visibility": "external",
                                "content": "function name() external view returns (string memory);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "string memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "4025788d8802eb9f22e195dc2bedffee"
                            }
                        ],
                        "symbol": [
                            {
                                "visibility": "external",
                                "content": "function symbol() external view returns (string memory);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "string memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "290eeefbf46324b8fc0db56342aa8b5c"
                            }
                        ],
                        "decimals": [
                            {
                                "visibility": "external",
                                "content": "function decimals() external view returns (uint8);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint8",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "af3fd982db2d33756fe4782a6d55350a"
                            }
                        ],
                        "totalSupply": [
                            {
                                "visibility": "external",
                                "content": "function totalSupply() external view returns (uint);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "39c31b7b259bbdb96ef5e71e43a31fa6"
                            }
                        ],
                        "balanceOf": [
                            {
                                "visibility": "external",
                                "content": "function balanceOf(address owner) external view returns (uint);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "owner"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "2648e16977e6c717489dfca9ec38a0c9"
                            }
                        ],
                        "allowance": [
                            {
                                "visibility": "external",
                                "content": "function allowance(address owner, address spender) external view returns (uint);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "owner"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "b953dd37d4a28b2e92cd51c743226f56"
                            }
                        ],
                        "approve": [
                            {
                                "visibility": "external",
                                "content": "function approve(address spender, uint value) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "value"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "7764bb55ddb9ca288dcb5ef110ab6253"
                            }
                        ],
                        "transfer": [
                            {
                                "visibility": "external",
                                "content": "function transfer(address to, uint value) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "value"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "0587b6354cf0d3773c8593eb4103d819"
                            }
                        ],
                        "transferFrom": [
                            {
                                "visibility": "external",
                                "content": "function transferFrom(address from, address to, uint value) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "value"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "cbef48e0263e179ffe91ffc711b607e6"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {
                        "Approval": {
                            "event": "Approval",
                            "content": "Approval(address indexed owner, address indexed spender, uint value)"
                        },
                        "Transfer": {
                            "event": "Transfer",
                            "content": "Transfer(address indexed from, address indexed to, uint value)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                },
                "Address": {
                    "type": {
                        "__CT__": true,
                        "value": 2
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "isContract": [
                            {
                                "visibility": "internal",
                                "content": "function isContract(address account) internal view returns (bool){ bytes32 codehash; bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470; assembly{ codehash := extcodehash(account)} return (codehash != 0x0 && codehash != accountHash);}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "account"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "03213a0086847231ca4b607f3e716e3b"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "SafeERC20": {
                    "type": {
                        "__CT__": true,
                        "value": 2
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "safeTransfer": [
                            {
                                "visibility": "internal",
                                "content": "function safeTransfer(IERC20 token, address to, uint value) internal{ callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "IERC20",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "value"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SafeERC20.callOptionalReturn"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "709af4efc371f87cb5fe84501abec571"
                            }
                        ],
                        "safeTransferFrom": [
                            {
                                "visibility": "internal",
                                "content": "function safeTransferFrom(IERC20 token, address from, address to, uint value) internal{ callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "IERC20",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "value"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SafeERC20.callOptionalReturn"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "c2e05da458e5ff013c4f69105d40b298"
                            }
                        ],
                        "safeApprove": [
                            {
                                "visibility": "internal",
                                "content": "function safeApprove(IERC20 token, address spender, uint value) internal{ require((value == 0) || (token.allowance(address(this), spender) == 0), \"SafeERC20: approve from non-zero to non-zero allowance\" ); callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "IERC20",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "value"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "allowance",
                                        "",
                                        "AnyswapV1ERC20"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "IERC20.allowance",
                                        "SafeERC20.callOptionalReturn"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "6ef93657da7bbc75f716b7fda57ac589"
                            }
                        ],
                        "callOptionalReturn": [
                            {
                                "visibility": "private",
                                "content": "function callOptionalReturn(IERC20 token, bytes memory data) private{ require(address(token).isContract(), \"SafeERC20: call to non- contract \"); (bool success, bytes memory returndata) = address(token).call(data); require(success, \"SafeERC20: low-level call failed\"); if (returndata.length > 0){ require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "IERC20",
                                        "name": "token"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "data"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "IERC20.isContract",
                                        "IERC20.data"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "b3221f01a369fc6acd5325df9fd85126"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "address": "Address"
                    }
                },
                "IAnyswapV1Factory": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "feeTo": [
                            {
                                "visibility": "external",
                                "content": "function feeTo() external view returns (address);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "dd38fd6ffd3e6926baaf9ef60fced759"
                            }
                        ],
                        "feeToSetter": [
                            {
                                "visibility": "external",
                                "content": "function feeToSetter() external view returns (address);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c1b903fbc93c860306ad0398af6a1379"
                            }
                        ],
                        "migrator": [
                            {
                                "visibility": "external",
                                "content": "function migrator() external view returns (address);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "aed0287c80fe8315b03973bfbe111d42"
                            }
                        ],
                        "getPair": [
                            {
                                "visibility": "external",
                                "content": "function getPair(address tokenA, address tokenB) external view returns (address pair);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "tokenA"
                                    },
                                    {
                                        "type": "address",
                                        "name": "tokenB"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": "pair"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "79783b3f509f341a6db26799738a3a85"
                            }
                        ],
                        "allPairs": [
                            {
                                "visibility": "external",
                                "content": "function allPairs(uint) external view returns (address pair);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": null
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": "pair"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "9b95f924bfbbe2063f7c4b28e2c3c1e5"
                            }
                        ],
                        "allPairsLength": [
                            {
                                "visibility": "external",
                                "content": "function allPairsLength() external view returns (uint);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "de018784a23e18501f05f1330df086bf"
                            }
                        ],
                        "createPair": [
                            {
                                "visibility": "external",
                                "content": "function createPair(address tokenA, address tokenB) external returns (address pair);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "tokenA"
                                    },
                                    {
                                        "type": "address",
                                        "name": "tokenB"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": "pair"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "746757afd148df5000e1a022cfc90972"
                            }
                        ],
                        "setFeeTo": [
                            {
                                "visibility": "external",
                                "content": "function setFeeTo(address) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "6753fb4fba317312f336d0148dd8aa9b"
                            }
                        ],
                        "setFeeToSetter": [
                            {
                                "visibility": "external",
                                "content": "function setFeeToSetter(address) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "5e77fe4e1e85ae4e066c2f08c1875d55"
                            }
                        ],
                        "setMigrator": [
                            {
                                "visibility": "external",
                                "content": "function setMigrator(address) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "7fe94497a7219e6aea0ac6b629f952b9"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {
                        "PairCreated": {
                            "event": "PairCreated",
                            "content": "PairCreated(address indexed token0, address indexed token1, address pair, uint)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                },
                "SafeMathAnyswap": {
                    "type": {
                        "__CT__": true,
                        "value": 2
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "add": [
                            {
                                "visibility": "internal",
                                "content": "function add(uint x, uint y) internal pure returns (uint z){ require((z = x + y) >= x, 'ds-math-add-overflow');}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "x"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "y"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "z"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "e076653475ff64c2999d30ec870291e4"
                            }
                        ],
                        "sub": [
                            {
                                "visibility": "internal",
                                "content": "function sub(uint x, uint y) internal pure returns (uint z){ require((z = x - y) <= x, 'ds-math-sub-underflow');}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "x"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "y"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "z"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "50fc788cc62b3aabc5d934ec2ad1c67f"
                            }
                        ],
                        "mul": [
                            {
                                "visibility": "internal",
                                "content": "function mul(uint x, uint y) internal pure returns (uint z){ require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "x"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "y"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "z"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "17723186ccd020779d6c078c1da61e4b"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "AnyswapV1ERC20": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {
                        "name": {
                            "type": "string",
                            "visibility": "public",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "'Anyswap LP Token'",
                            "content": "string public constant name = 'Anyswap LP Token';"
                        },
                        "symbol": {
                            "type": "string",
                            "visibility": "public",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "'SLP'",
                            "content": "string public constant symbol = 'SLP';"
                        },
                        "decimals": {
                            "type": "uint8",
                            "visibility": "public",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "18",
                            "content": "uint8 public constant decimals = 18;"
                        },
                        "totalSupply": {
                            "type": "uint",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint public totalSupply;"
                        },
                        "balanceOf": {
                            "type": "mapping(address => uint)",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(address => uint) public balanceOf;"
                        },
                        "allowance": {
                            "type": "mapping(address => mapping(address => uint))",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(address => mapping(address => uint)) public allowance;"
                        },
                        "DOMAIN_SEPARATOR": {
                            "type": "bytes32",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "bytes32 public DOMAIN_SEPARATOR;"
                        },
                        "PERMIT_TYPEHASH": {
                            "type": "bytes32",
                            "visibility": "public",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9",
                            "content": "bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;"
                        },
                        "nonces": {
                            "type": "mapping(address => uint)",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(address => uint) public nonces;"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (){ uint chainId; assembly{ chainId := chainid()} DOMAIN_SEPARATOR = keccak256( abi.encode( keccak256('EIP712Domain(string name, string version, uint256 chainId, address verifyingContract)'), keccak256(bytes(name)), keccak256(bytes('1')), chainId, address(this) ) );}",
                                "modifiers": [],
                                "parameters": [],
                                "returns": [],
                                "reads": [
                                    [
                                        "name",
                                        "",
                                        "AnyswapV1ERC20"
                                    ],
                                    [
                                        "DOMAIN_SEPARATOR",
                                        "",
                                        "AnyswapV1ERC20"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "DOMAIN_SEPARATOR",
                                        "",
                                        "AnyswapV1ERC20"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "95eb8ab8e7c7ca9143b6dfaf03ff88f9"
                            }
                        ],
                        "_mint": [
                            {
                                "visibility": "internal",
                                "content": "function _mint(address to, uint value) internal{ totalSupply = totalSupply.add(value); balanceOf[to] = balanceOf[to].add(value); emit Transfer(address(0), to, value);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "value"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "totalSupply",
                                        "",
                                        "AnyswapV1ERC20"
                                    ],
                                    [
                                        "balanceOf",
                                        "",
                                        "AnyswapV1ERC20"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "totalSupply",
                                        "",
                                        "AnyswapV1ERC20"
                                    ],
                                    [
                                        "balanceOf",
                                        "",
                                        "AnyswapV1ERC20"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "totalSupply.add"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "3ede9ea776763daf2604bab744c793bb"
                            }
                        ],
                        "_burn": [
                            {
                                "visibility": "internal",
                                "content": "function _burn(address from, uint value) internal{ balanceOf[from] = balanceOf[from].sub(value); totalSupply = totalSupply.sub(value); emit Transfer(from, address(0), value);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "value"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "totalSupply",
                                        "",
                                        "AnyswapV1ERC20"
                                    ],
                                    [
                                        "balanceOf",
                                        "",
                                        "AnyswapV1ERC20"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "totalSupply",
                                        "",
                                        "AnyswapV1ERC20"
                                    ],
                                    [
                                        "balanceOf",
                                        "",
                                        "AnyswapV1ERC20"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "totalSupply.sub"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "612d9f4527c0eb2cfb52d51365bab312"
                            }
                        ],
                        "_approve": [
                            {
                                "visibility": "private",
                                "content": "function _approve(address owner, address spender, uint value) private{ allowance[owner][spender] = value; emit Approval(owner, spender, value);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "owner"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "value"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "allowance",
                                        "",
                                        "AnyswapV1ERC20"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "allowance",
                                        "",
                                        "AnyswapV1ERC20"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "fd5680e13d64d67aeb5ecc747fc8b064"
                            }
                        ],
                        "_transfer": [
                            {
                                "visibility": "private",
                                "content": "function _transfer(address from, address to, uint value) private{ balanceOf[from] = balanceOf[from].sub(value); balanceOf[to] = balanceOf[to].add(value); emit Transfer(from, to, value);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "value"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "balanceOf",
                                        "",
                                        "AnyswapV1ERC20"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "balanceOf",
                                        "",
                                        "AnyswapV1ERC20"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "d3fed14070b1e19634808c0cb726e8bb"
                            }
                        ],
                        "approve": [
                            {
                                "visibility": "external",
                                "content": "function approve(address spender, uint value) external returns (bool){ _approve(msg.sender, spender, value); return true;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "value"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyswapV1ERC20._approve"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "60ef9e00109912bab3e50f94ccd1c109"
                            }
                        ],
                        "transfer": [
                            {
                                "visibility": "external",
                                "content": "function transfer(address to, uint value) external returns (bool){ _transfer(msg.sender, to, value); return true;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "value"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyswapV1ERC20._transfer"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "bb0474817dd2ed8a4a989a919b78605e"
                            }
                        ],
                        "transferFrom": [
                            {
                                "visibility": "external",
                                "content": "function transferFrom(address from, address to, uint value) external returns (bool){ if (allowance[from][msg.sender] != type (uint).max){ allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);} _transfer(from, to, value); return true;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "value"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "allowance",
                                        "",
                                        "AnyswapV1ERC20"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "allowance",
                                        "",
                                        "AnyswapV1ERC20"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyswapV1ERC20.type",
                                        "AnyswapV1ERC20._transfer"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "42cbb69d9158148f6b51e878e3bad60a"
                            }
                        ],
                        "permit": [
                            {
                                "visibility": "external",
                                "content": "function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external{ require(deadline >= block.timestamp, 'AnyswapV1: EXPIRED'); bytes32 digest = keccak256( abi.encodePacked( '\\x19\\x01', DOMAIN_SEPARATOR, keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline)) ) ); address recoveredAddress = ecrecover(digest, v, r, s); require(recoveredAddress != address(0) && recoveredAddress == owner, 'AnyswapV1: INVALID_SIGNATURE'); _approve(owner, spender, value);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "owner"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "value"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "deadline"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "v"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "r"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "s"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "DOMAIN_SEPARATOR",
                                        "",
                                        "AnyswapV1ERC20"
                                    ],
                                    [
                                        "PERMIT_TYPEHASH",
                                        "",
                                        "AnyswapV1ERC20"
                                    ],
                                    [
                                        "nonces",
                                        "",
                                        "AnyswapV1ERC20"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyswapV1ERC20._approve"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "9161eb42e00aaaf42d83b8178ff98cd7"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {
                        "Approval": {
                            "event": "Approval",
                            "content": "Approval(address indexed owner, address indexed spender, uint value)"
                        },
                        "Transfer": {
                            "event": "Transfer",
                            "content": "Transfer(address indexed from, address indexed to, uint value)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "uint": "SafeMathAnyswap"
                    }
                },
                "Math": {
                    "type": {
                        "__CT__": true,
                        "value": 2
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "min": [
                            {
                                "visibility": "internal",
                                "content": "function min(uint x, uint y) internal pure returns (uint z){ z = x < y ? x : y;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "x"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "y"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "z"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c907746fded57f3144c0bef5173bc35c"
                            }
                        ],
                        "sqrt": [
                            {
                                "visibility": "internal",
                                "content": "function sqrt(uint y) internal pure returns (uint z){ if (y > 3){ z = y; uint x = y / 2 + 1; while (x < z){ z = x; x = (y / x + x) / 2;}} else if (y != 0){ z = 1;}}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "y"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "z"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "2c7ce7f43233de9eaf8e343dba11b553"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "UQ112x112": {
                    "type": {
                        "__CT__": true,
                        "value": 2
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {
                        "Q112": {
                            "type": "uint224",
                            "visibility": "internal",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "2**112",
                            "content": "uint224 constant Q112 = 2**112;"
                        }
                    },
                    "functions": {
                        "encode": [
                            {
                                "visibility": "internal",
                                "content": "function encode(uint112 y) internal pure returns (uint224 z){ z = uint224(y) * Q112;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint112",
                                        "name": "y"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint224",
                                        "name": "z"
                                    }
                                ],
                                "reads": [
                                    [
                                        "Q112",
                                        "",
                                        "UQ112x112"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c3d43cce236ba9bf1cd1588dc9d9c54c"
                            }
                        ],
                        "uqdiv": [
                            {
                                "visibility": "internal",
                                "content": "function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z){ z = x / uint224(y);}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint224",
                                        "name": "x"
                                    },
                                    {
                                        "type": "uint112",
                                        "name": "y"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint224",
                                        "name": "z"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "39590c3b1f926367c410c0448d6d4f31"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "IERC20Anyswap": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "name": [
                            {
                                "visibility": "external",
                                "content": "function name() external view returns (string memory);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "string memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "4025788d8802eb9f22e195dc2bedffee"
                            }
                        ],
                        "symbol": [
                            {
                                "visibility": "external",
                                "content": "function symbol() external view returns (string memory);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "string memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "290eeefbf46324b8fc0db56342aa8b5c"
                            }
                        ],
                        "decimals": [
                            {
                                "visibility": "external",
                                "content": "function decimals() external view returns (uint8);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint8",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "af3fd982db2d33756fe4782a6d55350a"
                            }
                        ],
                        "totalSupply": [
                            {
                                "visibility": "external",
                                "content": "function totalSupply() external view returns (uint);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "39c31b7b259bbdb96ef5e71e43a31fa6"
                            }
                        ],
                        "balanceOf": [
                            {
                                "visibility": "external",
                                "content": "function balanceOf(address owner) external view returns (uint);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "owner"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "2648e16977e6c717489dfca9ec38a0c9"
                            }
                        ],
                        "allowance": [
                            {
                                "visibility": "external",
                                "content": "function allowance(address owner, address spender) external view returns (uint);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "owner"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "b953dd37d4a28b2e92cd51c743226f56"
                            }
                        ],
                        "approve": [
                            {
                                "visibility": "external",
                                "content": "function approve(address spender, uint value) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "value"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "7764bb55ddb9ca288dcb5ef110ab6253"
                            }
                        ],
                        "transfer": [
                            {
                                "visibility": "external",
                                "content": "function transfer(address to, uint value) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "value"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "0587b6354cf0d3773c8593eb4103d819"
                            }
                        ],
                        "transferFrom": [
                            {
                                "visibility": "external",
                                "content": "function transferFrom(address from, address to, uint value) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "value"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "cbef48e0263e179ffe91ffc711b607e6"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {
                        "Approval": {
                            "event": "Approval",
                            "content": "Approval(address indexed owner, address indexed spender, uint value)"
                        },
                        "Transfer": {
                            "event": "Transfer",
                            "content": "Transfer(address indexed from, address indexed to, uint value)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                },
                "IAnyswapV1Callee": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "AnyswapV1Call": [
                            {
                                "visibility": "external",
                                "content": "function AnyswapV1Call(address sender, uint amount0, uint amount1, bytes calldata data) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "sender"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amount0"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amount1"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "data"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "fec63f84822c7e1987c606dc4db8541e"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                },
                "AnyswapV1Pair": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "AnyswapV1ERC20"
                    ],
                    "state_variables": {
                        "MINIMUM_LIQUIDITY": {
                            "type": "uint",
                            "visibility": "public",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "10**3",
                            "content": "uint public constant MINIMUM_LIQUIDITY = 10**3;"
                        },
                        "SELECTOR": {
                            "type": "bytes4",
                            "visibility": "private",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "bytes4(keccak256(bytes('transfer(address, uint256)')))",
                            "content": "bytes4 private constant SELECTOR = bytes4(keccak256(bytes('transfer(address, uint256)')));"
                        },
                        "factory": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public factory;"
                        },
                        "token0": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public token0;"
                        },
                        "token1": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public token1;"
                        },
                        "reserve0": {
                            "type": "uint112",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint112 private reserve0;"
                        },
                        "reserve1": {
                            "type": "uint112",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint112 private reserve1;"
                        },
                        "blockTimestampLast": {
                            "type": "uint32",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint32 private blockTimestampLast;"
                        },
                        "price0CumulativeLast": {
                            "type": "uint",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint public price0CumulativeLast;"
                        },
                        "price1CumulativeLast": {
                            "type": "uint",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint public price1CumulativeLast;"
                        },
                        "kLast": {
                            "type": "uint",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint public kLast;"
                        },
                        "unlocked": {
                            "type": "uint",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "1",
                            "content": "uint private unlocked = 1;"
                        }
                    },
                    "functions": {
                        "getAmountOut": [
                            {
                                "visibility": "external",
                                "content": "function getAmountOut(address tokenIn, uint amountIn) external view returns (uint amountOut){ (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); if (tokenIn == token0){ return _getAmountOut(amountIn, _reserve0, _reserve1);} else{ return _getAmountOut(amountIn, _reserve1, _reserve0);}}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "tokenIn"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountIn"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "amountOut"
                                    }
                                ],
                                "reads": [
                                    [
                                        "token0",
                                        "",
                                        "AnyswapV1Pair"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyswapV1Pair.getReserves",
                                        "AnyswapV1Pair._getAmountOut"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "bd36cd0a1ad7cf06aebd7b338ba7ee80"
                            }
                        ],
                        "_getAmountOut": [
                            {
                                "visibility": "internal",
                                "content": "function _getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut){ require(amountIn > 0, 'AnyswapV1: INSUFFICIENT_INPUT_AMOUNT'); require(reserveIn > 0 && reserveOut > 0, 'AnyswapV1: INSUFFICIENT_LIQUIDITY'); uint amountInWithFee = amountIn.mul(997); uint numerator = amountInWithFee.mul(reserveOut); uint denominator = reserveIn.mul(1000).add(amountInWithFee); amountOut = numerator / denominator;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "amountIn"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "reserveIn"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "reserveOut"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "amountOut"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "amountIn.mul",
                                        "reserveIn.mul",
                                        "amountInWithFee.mul"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "d311105d71083db34d55b3dc6c15bc37"
                            }
                        ],
                        "getAmountIn": [
                            {
                                "visibility": "external",
                                "content": "function getAmountIn(address tokenOut, uint amountOut) external view returns (uint amountIn){ (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); if (tokenOut == token0){ return _getAmountIn(amountOut, _reserve1, _reserve0);} else{ return _getAmountIn(amountOut, _reserve0, _reserve1);}}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "tokenOut"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountOut"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "amountIn"
                                    }
                                ],
                                "reads": [
                                    [
                                        "token0",
                                        "",
                                        "AnyswapV1Pair"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyswapV1Pair.getReserves",
                                        "AnyswapV1Pair._getAmountIn"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "95f224423bbb59a2ab2dd9545070540c"
                            }
                        ],
                        "_getAmountIn": [
                            {
                                "visibility": "internal",
                                "content": "function _getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn){ require(amountOut > 0, 'AnyswapV1: INSUFFICIENT_OUTPUT_AMOUNT'); require(reserveIn > 0 && reserveOut > 0, 'AnyswapV1: INSUFFICIENT_LIQUIDITY'); uint numerator = reserveIn.mul(amountOut).mul(1000); uint denominator = reserveOut.sub(amountOut).mul(997); amountIn = (numerator / denominator).add(1);}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "amountOut"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "reserveIn"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "reserveOut"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "amountIn"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "reserveIn.mul",
                                        "reserveOut.sub"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "790e7404b2ca9c76aaf28015485608fc"
                            }
                        ],
                        "getReserves": [
                            {
                                "visibility": "public",
                                "content": "function getReserves() public view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast){ _reserve0 = reserve0; _reserve1 = reserve1; _blockTimestampLast = blockTimestampLast;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint112",
                                        "name": "_reserve0"
                                    },
                                    {
                                        "type": "uint112",
                                        "name": "_reserve1"
                                    },
                                    {
                                        "type": "uint32",
                                        "name": "_blockTimestampLast"
                                    }
                                ],
                                "reads": [
                                    [
                                        "reserve0",
                                        "",
                                        "AnyswapV1Pair"
                                    ],
                                    [
                                        "reserve1",
                                        "",
                                        "AnyswapV1Pair"
                                    ],
                                    [
                                        "blockTimestampLast",
                                        "",
                                        "AnyswapV1Pair"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c9192914bef4bf5e4c944cc0bda7093b"
                            }
                        ],
                        "_safeTransfer": [
                            {
                                "visibility": "private",
                                "content": "function _safeTransfer(address token, address to, uint value) private{ (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value)); require(success && (data.length == 0 || abi.decode(data, (bool))), 'AnyswapV1: TRANSFER_FAILED');}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "value"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "SELECTOR",
                                        "",
                                        "AnyswapV1Pair"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "token.call"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "819fb611072ba59ab23358ee015c7062"
                            }
                        ],
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (){ factory = msg.sender;}",
                                "modifiers": [],
                                "parameters": [],
                                "returns": [],
                                "reads": [
                                    [
                                        "factory",
                                        "",
                                        "AnyswapV1Pair"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "factory",
                                        "",
                                        "AnyswapV1Pair"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "1890724b3208cd8c64c1fbd389ddb088"
                            }
                        ],
                        "initialize": [
                            {
                                "visibility": "external",
                                "content": "function initialize(address _token0, address _token1) external{ require(msg.sender == factory, 'AnyswapV1: FORBIDDEN'); token0 = _token0; token1 = _token1;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_token0"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_token1"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "factory",
                                        "",
                                        "AnyswapV1Pair"
                                    ],
                                    [
                                        "token0",
                                        "",
                                        "AnyswapV1Pair"
                                    ],
                                    [
                                        "token1",
                                        "",
                                        "AnyswapV1Pair"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "token0",
                                        "",
                                        "AnyswapV1Pair"
                                    ],
                                    [
                                        "token1",
                                        "",
                                        "AnyswapV1Pair"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "a6d259a1a9c8a60c4c7ac63aa8e076c8"
                            }
                        ],
                        "_update": [
                            {
                                "visibility": "private",
                                "content": "function _update(uint balance0, uint balance1, uint112 _reserve0, uint112 _reserve1) private{ require(balance0 <= type (uint112).max && balance1 <= type (uint112).max, 'AnyswapV1: OVERFLOW'); uint32 blockTimestamp = uint32(block.timestamp % 2**32); uint32 timeElapsed = blockTimestamp - blockTimestampLast; if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0){ price0CumulativeLast += uint(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) * timeElapsed; price1CumulativeLast += uint(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) * timeElapsed;} reserve0 = uint112(balance0); reserve1 = uint112(balance1); blockTimestampLast = blockTimestamp; emit Sync(reserve0, reserve1);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "balance0"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "balance1"
                                    },
                                    {
                                        "type": "uint112",
                                        "name": "_reserve0"
                                    },
                                    {
                                        "type": "uint112",
                                        "name": "_reserve1"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "reserve0",
                                        "",
                                        "AnyswapV1Pair"
                                    ],
                                    [
                                        "reserve1",
                                        "",
                                        "AnyswapV1Pair"
                                    ],
                                    [
                                        "blockTimestampLast",
                                        "",
                                        "AnyswapV1Pair"
                                    ],
                                    [
                                        "price0CumulativeLast",
                                        "",
                                        "AnyswapV1Pair"
                                    ],
                                    [
                                        "price1CumulativeLast",
                                        "",
                                        "AnyswapV1Pair"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "reserve0",
                                        "",
                                        "AnyswapV1Pair"
                                    ],
                                    [
                                        "reserve1",
                                        "",
                                        "AnyswapV1Pair"
                                    ],
                                    [
                                        "blockTimestampLast",
                                        "",
                                        "AnyswapV1Pair"
                                    ],
                                    [
                                        "price0CumulativeLast",
                                        "",
                                        "AnyswapV1Pair"
                                    ],
                                    [
                                        "price1CumulativeLast",
                                        "",
                                        "AnyswapV1Pair"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyswapV1ERC20.type"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "86ad3bf4063b6c549b0a6857bafed281"
                            }
                        ],
                        "_mintFee": [
                            {
                                "visibility": "private",
                                "content": "function _mintFee(uint112 _reserve0, uint112 _reserve1) private returns (bool feeOn){ address feeTo = IAnyswapV1Factory(factory).feeTo(); feeOn = feeTo != address(0); uint _kLast = kLast; if (feeOn){ if (_kLast != 0){ uint rootK = Math.sqrt(uint(_reserve0).mul(_reserve1)); uint rootKLast = Math.sqrt(_kLast); if (rootK > rootKLast){ uint numerator = totalSupply.mul(rootK.sub(rootKLast)); uint denominator = rootK.mul(5).add(rootKLast); uint liquidity = numerator / denominator; if (liquidity > 0) _mint(feeTo, liquidity);}}} else if (_kLast != 0){ kLast = 0;}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint112",
                                        "name": "_reserve0"
                                    },
                                    {
                                        "type": "uint112",
                                        "name": "_reserve1"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": "feeOn"
                                    }
                                ],
                                "reads": [
                                    [
                                        "totalSupply",
                                        "",
                                        "AnyswapV1ERC20"
                                    ],
                                    [
                                        "factory",
                                        "",
                                        "AnyswapV1Pair"
                                    ],
                                    [
                                        "kLast",
                                        "",
                                        "AnyswapV1Pair"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "kLast",
                                        "",
                                        "AnyswapV1Pair"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "totalSupply.mul",
                                        "rootK.sub",
                                        "Math.sqrt",
                                        "rootK.mul",
                                        "AnyswapV1ERC20._mint"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "36af4832c11a72b3579cf5badb77951f"
                            }
                        ],
                        "mint": [
                            {
                                "visibility": "external",
                                "content": "function mint(address to) external lock returns (uint liquidity){ (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); uint balance0 = IERC20Anyswap(token0).balanceOf(address(this)); uint balance1 = IERC20Anyswap(token1).balanceOf(address(this)); uint amount0 = balance0.sub(_reserve0); uint amount1 = balance1.sub(_reserve1); bool feeOn = _mintFee(_reserve0, _reserve1); uint _totalSupply = totalSupply; if (_totalSupply == 0){ liquidity = Math.sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY); _mint(address(0), MINIMUM_LIQUIDITY);} else{ liquidity = Math.min(amount0.mul(_totalSupply) / _reserve0, amount1.mul(_totalSupply) / _reserve1);} require(liquidity > 0, 'AnyswapV1: INSUFFICIENT_LIQUIDITY_MINTED'); _mint(to, liquidity); _update(balance0, balance1, _reserve0, _reserve1); if (feeOn) kLast = uint(reserve0).mul(reserve1); emit Mint(msg.sender, amount0, amount1);}",
                                "modifiers": [
                                    "lock"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "to"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "liquidity"
                                    }
                                ],
                                "reads": [
                                    [
                                        "totalSupply",
                                        "",
                                        "AnyswapV1ERC20"
                                    ],
                                    [
                                        "balanceOf",
                                        "",
                                        "AnyswapV1ERC20"
                                    ],
                                    [
                                        "MINIMUM_LIQUIDITY",
                                        "",
                                        "AnyswapV1Pair"
                                    ],
                                    [
                                        "token0",
                                        "",
                                        "AnyswapV1Pair"
                                    ],
                                    [
                                        "token1",
                                        "",
                                        "AnyswapV1Pair"
                                    ],
                                    [
                                        "reserve0",
                                        "",
                                        "AnyswapV1Pair"
                                    ],
                                    [
                                        "reserve1",
                                        "",
                                        "AnyswapV1Pair"
                                    ],
                                    [
                                        "kLast",
                                        "",
                                        "AnyswapV1Pair"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "kLast",
                                        "",
                                        "AnyswapV1Pair"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "amount1.mul",
                                        "Math.sqrt",
                                        "balance0.sub",
                                        "AnyswapV1Pair.getReserves",
                                        "amount0.mul",
                                        "balance1.sub",
                                        "AnyswapV1Pair._update",
                                        "AnyswapV1ERC20._mint",
                                        "Math.min",
                                        "AnyswapV1Pair.lock",
                                        "AnyswapV1Pair._mintFee"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "ab7d21e49918750ec7ec762c59ceb5bb"
                            }
                        ],
                        "burn": [
                            {
                                "visibility": "external",
                                "content": "function burn(address to) external lock returns (uint amount0, uint amount1){ (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); address _token0 = token0; address _token1 = token1; uint balance0 = IERC20Anyswap(_token0).balanceOf(address(this)); uint balance1 = IERC20Anyswap(_token1).balanceOf(address(this)); uint liquidity = balanceOf[address(this)]; bool feeOn = _mintFee(_reserve0, _reserve1); uint _totalSupply = totalSupply; amount0 = liquidity.mul(balance0) / _totalSupply; amount1 = liquidity.mul(balance1) / _totalSupply; require(amount0 > 0 && amount1 > 0, 'AnyswapV1: INSUFFICIENT_LIQUIDITY_BURNED'); _burn(address(this), liquidity); _safeTransfer(_token0, to, amount0); _safeTransfer(_token1, to, amount1); balance0 = IERC20Anyswap(_token0).balanceOf(address(this)); balance1 = IERC20Anyswap(_token1).balanceOf(address(this)); _update(balance0, balance1, _reserve0, _reserve1); if (feeOn) kLast = uint(reserve0).mul(reserve1); emit Burn(msg.sender, amount0, amount1, to);}",
                                "modifiers": [
                                    "lock"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "to"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "amount0"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amount1"
                                    }
                                ],
                                "reads": [
                                    [
                                        "totalSupply",
                                        "",
                                        "AnyswapV1ERC20"
                                    ],
                                    [
                                        "balanceOf",
                                        "",
                                        "AnyswapV1ERC20"
                                    ],
                                    [
                                        "token0",
                                        "",
                                        "AnyswapV1Pair"
                                    ],
                                    [
                                        "token1",
                                        "",
                                        "AnyswapV1Pair"
                                    ],
                                    [
                                        "reserve0",
                                        "",
                                        "AnyswapV1Pair"
                                    ],
                                    [
                                        "reserve1",
                                        "",
                                        "AnyswapV1Pair"
                                    ],
                                    [
                                        "kLast",
                                        "",
                                        "AnyswapV1Pair"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "kLast",
                                        "",
                                        "AnyswapV1Pair"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyswapV1ERC20._burn",
                                        "AnyswapV1Pair._safeTransfer",
                                        "AnyswapV1Pair.getReserves",
                                        "AnyswapV1Pair._update",
                                        "AnyswapV1Pair.lock",
                                        "AnyswapV1Pair._mintFee",
                                        "liquidity.mul"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "2bae40a76b8b6e84d5f51d39657bcbb3"
                            }
                        ],
                        "swap": [
                            {
                                "visibility": "external",
                                "content": "function swap(address tokenIn, uint amountIn, uint minOut, address to) external lock{ require(amountIn > 0, 'AnyswapV1: INSUFFICIENT_OUTPUT_AMOUNT'); (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); uint _balance0; uint _balance1; uint _amount0Out; uint _amount1Out;{ IERC20(tokenIn).safeTransferFrom(msg.sender, address(this), amountIn); address _token0 = token0; address _token1 = token1; uint _amountOut; address _tokenOut = tokenIn == _token0 ? _token1 : _token0; if (tokenIn == _token0){ _amountOut = _getAmountOut(amountIn, _reserve0, _reserve1); require(_amountOut < _reserve1, 'AnyswapV1: INSUFFICIENT_LIQUIDITY');} else{ _amountOut = _getAmountOut(amountIn, _reserve1, _reserve0); require(_amountOut < _reserve0, 'AnyswapV1: INSUFFICIENT_LIQUIDITY');} require(_amountOut >= minOut, 'AnyswapV1: INSUFFICIENT_OUTPUT_AMOUNT'); require(to != _token0 && to != _token1, 'AnyswapV1: INVALID_TO'); _safeTransfer(_tokenOut, to, _amountOut); _balance0 = IERC20Anyswap(_token0).balanceOf(address(this)); _balance1 = IERC20Anyswap(_token1).balanceOf(address(this)); (_amount0Out, _amount1Out) = tokenIn == _token0 ? (uint(0), _amountOut) : (_amountOut, uint(0));}{ uint _amount0In = _balance0 > _reserve0 - _amount0Out ? _balance0 - (_reserve0 - _amount0Out) : 0; uint _amount1In = _balance1 > _reserve1 - _amount1Out ? _balance1 - (_reserve1 - _amount1Out) : 0; require(_amount0In > 0 || _amount1In > 0, 'AnyswapV1: INSUFFICIENT_INPUT_AMOUNT'); uint _balance0Adjusted = _balance0.mul(1000).sub(_amount0In.mul(3)); uint _balance1Adjusted = _balance1.mul(1000).sub(_amount1In.mul(3)); require(_balance0Adjusted.mul(_balance1Adjusted) >= uint(_reserve0).mul(_reserve1).mul(1000**2), 'AnyswapV1: K'); emit Swap(msg.sender, _amount0In, _amount1In, _amount0Out, _amount1Out, to);} _update(_balance0, _balance1, _reserve0, _reserve1);}",
                                "modifiers": [
                                    "lock"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "tokenIn"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountIn"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "minOut"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "balanceOf",
                                        "",
                                        "AnyswapV1ERC20"
                                    ],
                                    [
                                        "token0",
                                        "",
                                        "AnyswapV1Pair"
                                    ],
                                    [
                                        "token1",
                                        "",
                                        "AnyswapV1Pair"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "_amount0In.mul",
                                        "AnyswapV1Pair._getAmountOut",
                                        "AnyswapV1Pair._safeTransfer",
                                        "_amount1In.mul",
                                        "balance1.mul",
                                        "AnyswapV1Pair.getReserves",
                                        "AnyswapV1Pair._update",
                                        "_balance0Adjusted.mul",
                                        "amount1In.mul",
                                        "_balance1.mul",
                                        "balance0.mul",
                                        "AnyswapV1Pair.lock",
                                        "balance0Adjusted.mul",
                                        "amount0In.mul",
                                        "_balance0.mul"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "a6d9097eea338d90ef6cb471dfa0a38e"
                            },
                            {
                                "visibility": "external",
                                "content": "function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external lock{ require(amount0Out > 0 || amount1Out > 0, 'AnyswapV1: INSUFFICIENT_OUTPUT_AMOUNT'); (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); require(amount0Out < _reserve0 && amount1Out < _reserve1, 'AnyswapV1: INSUFFICIENT_LIQUIDITY'); uint balance0; uint balance1;{ address _token0 = token0; address _token1 = token1; require(to != _token0 && to != _token1, 'AnyswapV1: INVALID_TO'); if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); if (data.length > 0) IAnyswapV1Callee(to).AnyswapV1Call(msg.sender, amount0Out, amount1Out, data); balance0 = IERC20Anyswap(_token0).balanceOf(address(this)); balance1 = IERC20Anyswap(_token1).balanceOf(address(this));} uint amount0In = balance0 > _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0; uint amount1In = balance1 > _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0; require(amount0In > 0 || amount1In > 0, 'AnyswapV1: INSUFFICIENT_INPUT_AMOUNT');{ uint balance0Adjusted = balance0.mul(1000).sub(amount0In.mul(3)); uint balance1Adjusted = balance1.mul(1000).sub(amount1In.mul(3)); require(balance0Adjusted.mul(balance1Adjusted) >= uint(_reserve0).mul(_reserve1).mul(1000**2), 'AnyswapV1: K');} _update(balance0, balance1, _reserve0, _reserve1); emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);}",
                                "modifiers": [
                                    "lock"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "amount0Out"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amount1Out"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "data"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "balanceOf",
                                        "",
                                        "AnyswapV1ERC20"
                                    ],
                                    [
                                        "token0",
                                        "",
                                        "AnyswapV1Pair"
                                    ],
                                    [
                                        "token1",
                                        "",
                                        "AnyswapV1Pair"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "_amount0In.mul",
                                        "AnyswapV1Pair._getAmountOut",
                                        "AnyswapV1Pair._safeTransfer",
                                        "_amount1In.mul",
                                        "balance1.mul",
                                        "AnyswapV1Pair.getReserves",
                                        "AnyswapV1Pair._update",
                                        "_balance0Adjusted.mul",
                                        "amount1In.mul",
                                        "_balance1.mul",
                                        "balance0.mul",
                                        "AnyswapV1Pair.lock",
                                        "balance0Adjusted.mul",
                                        "amount0In.mul",
                                        "_balance0.mul"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "f5e4d232811256134a796afb8b028363"
                            }
                        ],
                        "skim": [
                            {
                                "visibility": "external",
                                "content": "function skim(address to) external lock{ address _token0 = token0; address _token1 = token1; _safeTransfer(_token0, to, IERC20Anyswap(_token0).balanceOf(address(this)).sub(reserve0)); _safeTransfer(_token1, to, IERC20Anyswap(_token1).balanceOf(address(this)).sub(reserve1));}",
                                "modifiers": [
                                    "lock"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "to"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "balanceOf",
                                        "",
                                        "AnyswapV1ERC20"
                                    ],
                                    [
                                        "token0",
                                        "",
                                        "AnyswapV1Pair"
                                    ],
                                    [
                                        "token1",
                                        "",
                                        "AnyswapV1Pair"
                                    ],
                                    [
                                        "reserve0",
                                        "",
                                        "AnyswapV1Pair"
                                    ],
                                    [
                                        "reserve1",
                                        "",
                                        "AnyswapV1Pair"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyswapV1Pair.lock",
                                        "AnyswapV1Pair._safeTransfer"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "26e00a21f14d00eeeb1d5567dcaca544"
                            }
                        ],
                        "sync": [
                            {
                                "visibility": "external",
                                "content": "function sync() external lock{ _update(IERC20Anyswap(token0).balanceOf(address(this)), IERC20Anyswap(token1).balanceOf(address(this)), reserve0, reserve1);}",
                                "modifiers": [
                                    "lock"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [
                                    [
                                        "balanceOf",
                                        "",
                                        "AnyswapV1ERC20"
                                    ],
                                    [
                                        "token0",
                                        "",
                                        "AnyswapV1Pair"
                                    ],
                                    [
                                        "token1",
                                        "",
                                        "AnyswapV1Pair"
                                    ],
                                    [
                                        "reserve0",
                                        "",
                                        "AnyswapV1Pair"
                                    ],
                                    [
                                        "reserve1",
                                        "",
                                        "AnyswapV1Pair"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyswapV1Pair.lock",
                                        "AnyswapV1Pair._update"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "40cde1fe4a4dfe43c174b5fa4967723b"
                            }
                        ]
                    },
                    "modifiers": {
                        "lock": {
                            "parameters": [],
                            "content": "modifier lock(){ require(unlocked == 1, 'AnyswapV1: LOCKED'); unlocked = 0; _; unlocked = 1;}",
                            "reads": [
                                [
                                    "unlocked",
                                    "",
                                    "AnyswapV1Pair"
                                ]
                            ],
                            "writes": [
                                [
                                    "unlocked",
                                    "",
                                    "AnyswapV1Pair"
                                ]
                            ],
                            "external_calls": [],
                            "md5": "87a270cbcd9ddd14926a6bd837ea63d8"
                        }
                    },
                    "structs": {},
                    "events": {
                        "Mint": {
                            "event": "Mint",
                            "content": "Mint(address indexed sender, uint amount0, uint amount1)"
                        },
                        "Burn": {
                            "event": "Burn",
                            "content": "Burn(address indexed sender, uint amount0, uint amount1, address indexed to)"
                        },
                        "Swap": {
                            "event": "Swap",
                            "content": "Swap( address indexed sender, uint amount0In, uint amount1In, uint amount0Out, uint amount1Out, address indexed to )"
                        },
                        "Sync": {
                            "event": "Sync",
                            "content": "Sync(uint112 reserve0, uint112 reserve1)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "uint": "SafeMathAnyswap",
                        "IERC20": "SafeERC20",
                        "uint224": "UQ112x112"
                    }
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "SafeERC20.callOptionalReturn": "b3221f01a369fc6acd5325df9fd85126",
                "IERC20.allowance": "b953dd37d4a28b2e92cd51c743226f56",
                "AnyswapV1ERC20._approve": "fd5680e13d64d67aeb5ecc747fc8b064",
                "AnyswapV1ERC20._transfer": "d3fed14070b1e19634808c0cb726e8bb",
                "AnyswapV1Pair.getReserves": "c9192914bef4bf5e4c944cc0bda7093b",
                "AnyswapV1Pair._getAmountOut": "d311105d71083db34d55b3dc6c15bc37",
                "AnyswapV1Pair._getAmountIn": "790e7404b2ca9c76aaf28015485608fc",
                "Math.sqrt": "2c7ce7f43233de9eaf8e343dba11b553",
                "AnyswapV1ERC20._mint": "3ede9ea776763daf2604bab744c793bb",
                "AnyswapV1Pair._mintFee": "36af4832c11a72b3579cf5badb77951f",
                "Math.min": "c907746fded57f3144c0bef5173bc35c",
                "AnyswapV1Pair._update": "86ad3bf4063b6c549b0a6857bafed281",
                "AnyswapV1Pair.lock": "87a270cbcd9ddd14926a6bd837ea63d8",
                "AnyswapV1ERC20._burn": "612d9f4527c0eb2cfb52d51365bab312",
                "AnyswapV1Pair._safeTransfer": "819fb611072ba59ab23358ee015c7062"
            },
            "md5": "b7cf51fe08003fa60fc58ff2c26c48ba"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\AnyswapV1Vault.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\AnyswapV1Vault.sol",
            "filename": "AnyswapV1Vault.sol",
            "imported_contracts": {},
            "contracts": {
                "ISushiswapV2Pair": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "name": [
                            {
                                "visibility": "external",
                                "content": "function name() external pure returns (string memory);",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "string memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "da62194541f10ce3bca8a5ec45968dd1"
                            }
                        ],
                        "symbol": [
                            {
                                "visibility": "external",
                                "content": "function symbol() external pure returns (string memory);",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "string memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "4cbfd10f1d33f46f174a14eccaf2f92a"
                            }
                        ],
                        "decimals": [
                            {
                                "visibility": "external",
                                "content": "function decimals() external pure returns (uint8);",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint8",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "f8a0dd13fb443ad82a4cf2864c3a3670"
                            }
                        ],
                        "totalSupply": [
                            {
                                "visibility": "external",
                                "content": "function totalSupply() external view returns (uint);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "39c31b7b259bbdb96ef5e71e43a31fa6"
                            }
                        ],
                        "balanceOf": [
                            {
                                "visibility": "external",
                                "content": "function balanceOf(address owner) external view returns (uint);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "owner"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "2648e16977e6c717489dfca9ec38a0c9"
                            }
                        ],
                        "allowance": [
                            {
                                "visibility": "external",
                                "content": "function allowance(address owner, address spender) external view returns (uint);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "owner"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "b953dd37d4a28b2e92cd51c743226f56"
                            }
                        ],
                        "approve": [
                            {
                                "visibility": "external",
                                "content": "function approve(address spender, uint value) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "value"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "7764bb55ddb9ca288dcb5ef110ab6253"
                            }
                        ],
                        "transfer": [
                            {
                                "visibility": "external",
                                "content": "function transfer(address to, uint value) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "value"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "0587b6354cf0d3773c8593eb4103d819"
                            }
                        ],
                        "transferFrom": [
                            {
                                "visibility": "external",
                                "content": "function transferFrom(address from, address to, uint value) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "value"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "cbef48e0263e179ffe91ffc711b607e6"
                            }
                        ],
                        "DOMAIN_SEPARATOR": [
                            {
                                "visibility": "external",
                                "content": "function DOMAIN_SEPARATOR() external view returns (bytes32);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "0a5129288a98701e3042bb219b8117b2"
                            }
                        ],
                        "PERMIT_TYPEHASH": [
                            {
                                "visibility": "external",
                                "content": "function PERMIT_TYPEHASH() external pure returns (bytes32);",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "baa7311ddab35bacb588e46354af53d5"
                            }
                        ],
                        "nonces": [
                            {
                                "visibility": "external",
                                "content": "function nonces(address owner) external view returns (uint);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "owner"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "1bfa15ae23ddb4c4de91099976df600c"
                            }
                        ],
                        "permit": [
                            {
                                "visibility": "external",
                                "content": "function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "owner"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "value"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "deadline"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "v"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "r"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "s"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "7164681d17fe17aed21b5519967b69f8"
                            }
                        ],
                        "MINIMUM_LIQUIDITY": [
                            {
                                "visibility": "external",
                                "content": "function MINIMUM_LIQUIDITY() external pure returns (uint);",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "76ab458db84e616616a8455ecbcd2430"
                            }
                        ],
                        "factory": [
                            {
                                "visibility": "external",
                                "content": "function factory() external view returns (address);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "eae461b6d0ef6d1c8bb92d34e74a880d"
                            }
                        ],
                        "token0": [
                            {
                                "visibility": "external",
                                "content": "function token0() external view returns (address);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "6dbeae51296a5fa298e59b6ce26a07ef"
                            }
                        ],
                        "token1": [
                            {
                                "visibility": "external",
                                "content": "function token1() external view returns (address);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "19164606c7e09dcc0de5c859221b6cf5"
                            }
                        ],
                        "getReserves": [
                            {
                                "visibility": "external",
                                "content": "function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint112",
                                        "name": "reserve0"
                                    },
                                    {
                                        "type": "uint112",
                                        "name": "reserve1"
                                    },
                                    {
                                        "type": "uint32",
                                        "name": "blockTimestampLast"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "a8ad5739cac88103083915986561f88c"
                            }
                        ],
                        "price0CumulativeLast": [
                            {
                                "visibility": "external",
                                "content": "function price0CumulativeLast() external view returns (uint);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c31ee00b07488ba44c594b38c3621566"
                            }
                        ],
                        "price1CumulativeLast": [
                            {
                                "visibility": "external",
                                "content": "function price1CumulativeLast() external view returns (uint);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "a804583c3b975d6d43a4e1cc3fd74a92"
                            }
                        ],
                        "kLast": [
                            {
                                "visibility": "external",
                                "content": "function kLast() external view returns (uint);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "d2390f37b6d030f8a11972b6c8780a39"
                            }
                        ],
                        "mint": [
                            {
                                "visibility": "external",
                                "content": "function mint(address to) external returns (uint liquidity);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "to"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "liquidity"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "ff08e4d020b21454c2b7252e3235f5ef"
                            }
                        ],
                        "burn": [
                            {
                                "visibility": "external",
                                "content": "function burn(address to) external returns (uint amount0, uint amount1);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "to"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "amount0"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amount1"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "24c2cf143c48045848eb2be6a364f202"
                            }
                        ],
                        "swap": [
                            {
                                "visibility": "external",
                                "content": "function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "amount0Out"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amount1Out"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "data"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "2a7b7c36bbb6565de0e79bffef9b920f"
                            }
                        ],
                        "skim": [
                            {
                                "visibility": "external",
                                "content": "function skim(address to) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "to"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "80264aea145193083bc6e14f17d98b1d"
                            }
                        ],
                        "sync": [
                            {
                                "visibility": "external",
                                "content": "function sync() external;",
                                "modifiers": [],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "8a88de5c1edea8e8388f3bde12720892"
                            }
                        ],
                        "initialize": [
                            {
                                "visibility": "external",
                                "content": "function initialize(address, address) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": null
                                    },
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "610e06a6e0bf0239cab4dcd03705f63f"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {
                        "Approval": {
                            "event": "Approval",
                            "content": "Approval(address indexed owner, address indexed spender, uint value)"
                        },
                        "Transfer": {
                            "event": "Transfer",
                            "content": "Transfer(address indexed from, address indexed to, uint value)"
                        },
                        "Mint": {
                            "event": "Mint",
                            "content": "Mint(address indexed sender, uint amount0, uint amount1)"
                        },
                        "Burn": {
                            "event": "Burn",
                            "content": "Burn(address indexed sender, uint amount0, uint amount1, address indexed to)"
                        },
                        "Swap": {
                            "event": "Swap",
                            "content": "Swap( address indexed sender, uint amount0In, uint amount1In, uint amount0Out, uint amount1Out, address indexed to )"
                        },
                        "Sync": {
                            "event": "Sync",
                            "content": "Sync(uint112 reserve0, uint112 reserve1)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                },
                "SafeMathSushiswap": {
                    "type": {
                        "__CT__": true,
                        "value": 2
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "add": [
                            {
                                "visibility": "internal",
                                "content": "function add(uint x, uint y) internal pure returns (uint z){ require((z = x + y) >= x, 'ds-math-add-overflow');}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "x"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "y"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "z"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "e076653475ff64c2999d30ec870291e4"
                            }
                        ],
                        "sub": [
                            {
                                "visibility": "internal",
                                "content": "function sub(uint x, uint y) internal pure returns (uint z){ require((z = x - y) <= x, 'ds-math-sub-underflow');}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "x"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "y"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "z"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "50fc788cc62b3aabc5d934ec2ad1c67f"
                            }
                        ],
                        "mul": [
                            {
                                "visibility": "internal",
                                "content": "function mul(uint x, uint y) internal pure returns (uint z){ require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "x"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "y"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "z"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "17723186ccd020779d6c078c1da61e4b"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "SushiswapV2Library": {
                    "type": {
                        "__CT__": true,
                        "value": 2
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "sortTokens": [
                            {
                                "visibility": "internal",
                                "content": "function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1){ require(tokenA != tokenB, 'SushiswapV2Library: IDENTICAL_ADDRESSES'); (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA); require(token0 != address(0), 'SushiswapV2Library: ZERO_ADDRESS');}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "tokenA"
                                    },
                                    {
                                        "type": "address",
                                        "name": "tokenB"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": "token0"
                                    },
                                    {
                                        "type": "address",
                                        "name": "token1"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "53553004d7c40a8043fec91809e5eb82"
                            }
                        ],
                        "pairFor": [
                            {
                                "visibility": "internal",
                                "content": "function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair){ (address token0, address token1) = sortTokens(tokenA, tokenB); pair = address(uint160(uint256(keccak256(abi.encodePacked( hex'ff', factory, keccak256(abi.encodePacked(token0, token1)), hex'e18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303' )))));}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "factory"
                                    },
                                    {
                                        "type": "address",
                                        "name": "tokenA"
                                    },
                                    {
                                        "type": "address",
                                        "name": "tokenB"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": "pair"
                                    }
                                ],
                                "reads": [
                                    [
                                        "factory",
                                        "",
                                        "AnyswapV1Vault"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "factory",
                                        "",
                                        "AnyswapV1Vault"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SushiswapV2Library.sortTokens"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "0966039bc6d80270f06e5d9760ee5973"
                            }
                        ],
                        "getReserves": [
                            {
                                "visibility": "internal",
                                "content": "function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB){ (address token0, ) = sortTokens(tokenA, tokenB); (uint reserve0, uint reserve1, ) = ISushiswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves(); (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "factory"
                                    },
                                    {
                                        "type": "address",
                                        "name": "tokenA"
                                    },
                                    {
                                        "type": "address",
                                        "name": "tokenB"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "reserveA"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "reserveB"
                                    }
                                ],
                                "reads": [
                                    [
                                        "factory",
                                        "",
                                        "AnyswapV1Vault"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "factory",
                                        "",
                                        "AnyswapV1Vault"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SushiswapV2Library.sortTokens",
                                        "SushiswapV2Library.pairFor"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "e12c8e854eb992f08c30e88b3e078522"
                            }
                        ],
                        "quote": [
                            {
                                "visibility": "internal",
                                "content": "function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB){ require(amountA > 0, 'SushiswapV2Library: INSUFFICIENT_AMOUNT'); require(reserveA > 0 && reserveB > 0, 'SushiswapV2Library: INSUFFICIENT_LIQUIDITY'); amountB = amountA.mul(reserveB) / reserveA;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "amountA"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "reserveA"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "reserveB"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "amountB"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "amountA.mul"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "814d0103910bb8adeb7a6e1b665e2d9a"
                            }
                        ],
                        "getAmountOut": [
                            {
                                "visibility": "internal",
                                "content": "function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut){ require(amountIn > 0, 'SushiswapV2Library: INSUFFICIENT_INPUT_AMOUNT'); require(reserveIn > 0 && reserveOut > 0, 'SushiswapV2Library: INSUFFICIENT_LIQUIDITY'); uint amountInWithFee = amountIn.mul(997); uint numerator = amountInWithFee.mul(reserveOut); uint denominator = reserveIn.mul(1000).add(amountInWithFee); amountOut = numerator / denominator;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "amountIn"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "reserveIn"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "reserveOut"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "amountOut"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "amountIn.mul",
                                        "reserveIn.mul",
                                        "amountInWithFee.mul"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "de9a0b4fe347557aa85f1beddb841fcb"
                            }
                        ],
                        "getAmountIn": [
                            {
                                "visibility": "internal",
                                "content": "function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn){ require(amountOut > 0, 'SushiswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT'); require(reserveIn > 0 && reserveOut > 0, 'SushiswapV2Library: INSUFFICIENT_LIQUIDITY'); uint numerator = reserveIn.mul(amountOut).mul(1000); uint denominator = reserveOut.sub(amountOut).mul(997); amountIn = (numerator / denominator).add(1);}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "amountOut"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "reserveIn"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "reserveOut"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "amountIn"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "reserveIn.mul",
                                        "reserveOut.sub"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "719310c4a8954494b502bb60f325d986"
                            }
                        ],
                        "getAmountsOut": [
                            {
                                "visibility": "internal",
                                "content": "function getAmountsOut(address factory, uint amountIn, address[] memory path) internal view returns (uint[] memory amounts){ require(path.length >= 2, 'SushiswapV2Library: INVALID_PATH'); amounts = new uint[](path.length); amounts[0] = amountIn; for (uint i; i < path.length - 1; i++){ (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]); amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);}}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "factory"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountIn"
                                    },
                                    {
                                        "type": "address[] memory",
                                        "name": "path"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint[] memory",
                                        "name": "amounts"
                                    }
                                ],
                                "reads": [
                                    [
                                        "factory",
                                        "",
                                        "AnyswapV1Vault"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SushiswapV2Library.getReserves",
                                        "SushiswapV2Library.getAmountOut"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "fd145cd614d3cfb20b6182a54e4853a0"
                            }
                        ],
                        "getAmountsIn": [
                            {
                                "visibility": "internal",
                                "content": "function getAmountsIn(address factory, uint amountOut, address[] memory path) internal view returns (uint[] memory amounts){ require(path.length >= 2, 'SushiswapV2Library: INVALID_PATH'); amounts = new uint[](path.length); amounts[amounts.length - 1] = amountOut; for (uint i = path.length - 1; i > 0; i--){ (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]); amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);}}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "factory"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountOut"
                                    },
                                    {
                                        "type": "address[] memory",
                                        "name": "path"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint[] memory",
                                        "name": "amounts"
                                    }
                                ],
                                "reads": [
                                    [
                                        "factory",
                                        "",
                                        "AnyswapV1Vault"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SushiswapV2Library.getReserves",
                                        "SushiswapV2Library.getAmountIn"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "6409030ef935ed2148ebd6f3a0220b44"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "uint": "SafeMathSushiswap"
                    }
                },
                "TransferHelper": {
                    "type": {
                        "__CT__": true,
                        "value": 2
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "safeApprove": [
                            {
                                "visibility": "internal",
                                "content": "function safeApprove(address token, address to, uint value) internal{ (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value)); require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "value"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "token.call"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "d9c6640cfca902b76e445a1510fab047"
                            }
                        ],
                        "safeTransfer": [
                            {
                                "visibility": "internal",
                                "content": "function safeTransfer(address token, address to, uint value) internal{ (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value)); require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "value"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "token.call"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "3f5488f5b132ce36f3d9090a02d85295"
                            }
                        ],
                        "safeTransferFrom": [
                            {
                                "visibility": "internal",
                                "content": "function safeTransferFrom(address token, address from, address to, uint value) internal{ (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value)); require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "value"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "token.call"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "cb78f5eeced7c4ba60c419cbe210487c"
                            }
                        ],
                        "safeTransferNative": [
                            {
                                "visibility": "internal",
                                "content": "function safeTransferNative(address to, uint value) internal{ (bool success, ) = to.call{ value:value} (new bytes(0)); require(success, 'TransferHelper: NATIVE_TRANSFER_FAILED');}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "value"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "a335433fd57a5f0afeeef0aefa9cdf29"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "ISushiswapV2Factory": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "feeTo": [
                            {
                                "visibility": "external",
                                "content": "function feeTo() external view returns (address);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "dd38fd6ffd3e6926baaf9ef60fced759"
                            }
                        ],
                        "feeToSetter": [
                            {
                                "visibility": "external",
                                "content": "function feeToSetter() external view returns (address);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c1b903fbc93c860306ad0398af6a1379"
                            }
                        ],
                        "migrator": [
                            {
                                "visibility": "external",
                                "content": "function migrator() external view returns (address);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "aed0287c80fe8315b03973bfbe111d42"
                            }
                        ],
                        "getPair": [
                            {
                                "visibility": "external",
                                "content": "function getPair(address tokenA, address tokenB) external view returns (address pair);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "tokenA"
                                    },
                                    {
                                        "type": "address",
                                        "name": "tokenB"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": "pair"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "79783b3f509f341a6db26799738a3a85"
                            }
                        ],
                        "allPairs": [
                            {
                                "visibility": "external",
                                "content": "function allPairs(uint) external view returns (address pair);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": null
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": "pair"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "9b95f924bfbbe2063f7c4b28e2c3c1e5"
                            }
                        ],
                        "allPairsLength": [
                            {
                                "visibility": "external",
                                "content": "function allPairsLength() external view returns (uint);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "de018784a23e18501f05f1330df086bf"
                            }
                        ],
                        "createPair": [
                            {
                                "visibility": "external",
                                "content": "function createPair(address tokenA, address tokenB) external returns (address pair);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "tokenA"
                                    },
                                    {
                                        "type": "address",
                                        "name": "tokenB"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": "pair"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "746757afd148df5000e1a022cfc90972"
                            }
                        ],
                        "setFeeTo": [
                            {
                                "visibility": "external",
                                "content": "function setFeeTo(address) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "6753fb4fba317312f336d0148dd8aa9b"
                            }
                        ],
                        "setFeeToSetter": [
                            {
                                "visibility": "external",
                                "content": "function setFeeToSetter(address) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "5e77fe4e1e85ae4e066c2f08c1875d55"
                            }
                        ],
                        "setMigrator": [
                            {
                                "visibility": "external",
                                "content": "function setMigrator(address) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "7fe94497a7219e6aea0ac6b629f952b9"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {
                        "PairCreated": {
                            "event": "PairCreated",
                            "content": "PairCreated(address indexed token0, address indexed token1, address pair, uint)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                },
                "IwNATIVE": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "deposit": [
                            {
                                "visibility": "external",
                                "content": "function deposit() external payable;",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": true,
                                "md5": "4f2eec90abd519258d97a4283a54e2f1"
                            }
                        ],
                        "transfer": [
                            {
                                "visibility": "external",
                                "content": "function transfer(address to, uint value) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "value"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "0587b6354cf0d3773c8593eb4103d819"
                            }
                        ],
                        "withdraw": [
                            {
                                "visibility": "external",
                                "content": "function withdraw(uint) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": null
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "b3e698980247640e9fe99c060e4921fc"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                },
                "AnyswapV1ERC20": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "mint": [
                            {
                                "visibility": "external",
                                "content": "function mint(address to, uint256 amount) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "54fcc18fc5af6f55053554dd926d02c5"
                            }
                        ],
                        "burn": [
                            {
                                "visibility": "external",
                                "content": "function burn(address from, uint256 amount) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "3b8d1a75aa40d4fec00a0d273d36f6da"
                            }
                        ],
                        "changeVault": [
                            {
                                "visibility": "external",
                                "content": "function changeVault(address newVault) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "newVault"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "6bc2dba1a1fe83dd749a9b3e6aefb013"
                            }
                        ],
                        "depositVault": [
                            {
                                "visibility": "external",
                                "content": "function depositVault(uint amount, address to) external returns (uint);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c36ee7b9d27c9a670490ec8a73ff7fc6"
                            }
                        ],
                        "withdrawVault": [
                            {
                                "visibility": "external",
                                "content": "function withdrawVault(address from, uint amount, address to) external returns (uint);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "d7e3a13249332b58de63af9851184b51"
                            }
                        ],
                        "underlying": [
                            {
                                "visibility": "external",
                                "content": "function underlying() external view returns (address);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "79a36cf7455e5210675c01a0880c01eb"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                },
                "IERC20": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "totalSupply": [
                            {
                                "visibility": "external",
                                "content": "function totalSupply() external view returns (uint256);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "5e1d12e61f4bf4b37161d9b684742570"
                            }
                        ],
                        "balanceOf": [
                            {
                                "visibility": "external",
                                "content": "function balanceOf(address account) external view returns (uint256);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "account"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "3ac17e7782366957c960d337a4a648cd"
                            }
                        ],
                        "transfer": [
                            {
                                "visibility": "external",
                                "content": "function transfer(address recipient, uint256 amount) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "recipient"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "98b540da9047ee99bce7fadde65d04b7"
                            }
                        ],
                        "allowance": [
                            {
                                "visibility": "external",
                                "content": "function allowance(address owner, address spender) external view returns (uint256);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "owner"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c93791d09d789aed33b9725d482af442"
                            }
                        ],
                        "approve": [
                            {
                                "visibility": "external",
                                "content": "function approve(address spender, uint256 amount) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "7c80d707df648dc123a10c69a1150edc"
                            }
                        ],
                        "permit": [
                            {
                                "visibility": "external",
                                "content": "function permit(address target, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "target"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "deadline"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "v"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "r"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "s"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "865781e39f9ebb7f41df993418bdaa02"
                            }
                        ],
                        "transferFrom": [
                            {
                                "visibility": "external",
                                "content": "function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "sender"
                                    },
                                    {
                                        "type": "address",
                                        "name": "recipient"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c134d67e13a988b449de71dd226682ab"
                            }
                        ],
                        "transferWithPermit": [
                            {
                                "visibility": "external",
                                "content": "function transferWithPermit(address target, address to, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "target"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "deadline"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "v"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "r"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "s"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "936174799796d3ebd0f9d8d968cbd4d0"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {
                        "Transfer": {
                            "event": "Transfer",
                            "content": "Transfer(address indexed from, address indexed to, uint256 value)"
                        },
                        "Approval": {
                            "event": "Approval",
                            "content": "Approval(address indexed owner, address indexed spender, uint256 value)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                },
                "Address": {
                    "type": {
                        "__CT__": true,
                        "value": 2
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "isContract": [
                            {
                                "visibility": "internal",
                                "content": "function isContract(address account) internal view returns (bool){ bytes32 codehash; bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470; assembly{ codehash := extcodehash(account)} return (codehash != 0x0 && codehash != accountHash);}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "account"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "03213a0086847231ca4b607f3e716e3b"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "SafeERC20": {
                    "type": {
                        "__CT__": true,
                        "value": 2
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "safeTransfer": [
                            {
                                "visibility": "internal",
                                "content": "function safeTransfer(IERC20 token, address to, uint value) internal{ callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "IERC20",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "value"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SafeERC20.callOptionalReturn"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "709af4efc371f87cb5fe84501abec571"
                            }
                        ],
                        "safeTransferFrom": [
                            {
                                "visibility": "internal",
                                "content": "function safeTransferFrom(IERC20 token, address from, address to, uint value) internal{ callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "IERC20",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "value"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SafeERC20.callOptionalReturn"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "c2e05da458e5ff013c4f69105d40b298"
                            }
                        ],
                        "safeApprove": [
                            {
                                "visibility": "internal",
                                "content": "function safeApprove(IERC20 token, address spender, uint value) internal{ require((value == 0) || (token.allowance(address(this), spender) == 0), \"SafeERC20: approve from non-zero to non-zero allowance\" ); callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "IERC20",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "value"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "IERC20.allowance",
                                        "SafeERC20.callOptionalReturn"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "6ef93657da7bbc75f716b7fda57ac589"
                            }
                        ],
                        "callOptionalReturn": [
                            {
                                "visibility": "private",
                                "content": "function callOptionalReturn(IERC20 token, bytes memory data) private{ require(address(token).isContract(), \"SafeERC20: call to non- contract \"); (bool success, bytes memory returndata) = address(token).call(data); require(success, \"SafeERC20: low-level call failed\"); if (returndata.length > 0){ require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "IERC20",
                                        "name": "token"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "data"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "IERC20.isContract",
                                        "IERC20.data"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "b3221f01a369fc6acd5325df9fd85126"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "address": "Address"
                    }
                },
                "AnyswapV1Vault": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {
                        "factory": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public immutable factory;"
                        },
                        "wNATIVE": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public immutable wNATIVE;"
                        },
                        "_oldMPC": {
                            "type": "address",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address private _oldMPC;"
                        },
                        "_newMPC": {
                            "type": "address",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address private _newMPC;"
                        },
                        "_newMPCEffectiveTime": {
                            "type": "uint256",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256 private _newMPCEffectiveTime;"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (address _factory, address _wNATIVE, address _mpc){ _newMPC = _mpc; _newMPCEffectiveTime = block.timestamp; factory = _factory; wNATIVE = _wNATIVE;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_factory"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_wNATIVE"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_mpc"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "factory",
                                        "",
                                        "AnyswapV1Vault"
                                    ],
                                    [
                                        "wNATIVE",
                                        "",
                                        "AnyswapV1Vault"
                                    ],
                                    [
                                        "_newMPC",
                                        "",
                                        "AnyswapV1Vault"
                                    ],
                                    [
                                        "_newMPCEffectiveTime",
                                        "",
                                        "AnyswapV1Vault"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "factory",
                                        "",
                                        "AnyswapV1Vault"
                                    ],
                                    [
                                        "wNATIVE",
                                        "",
                                        "AnyswapV1Vault"
                                    ],
                                    [
                                        "_newMPC",
                                        "",
                                        "AnyswapV1Vault"
                                    ],
                                    [
                                        "_newMPCEffectiveTime",
                                        "",
                                        "AnyswapV1Vault"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "50810f50f1d3cb83b51dd3d92b0428cd"
                            }
                        ],
                        "mpc": [
                            {
                                "visibility": "public",
                                "content": "function mpc() public view returns (address){ if (block.timestamp >= _newMPCEffectiveTime){ return _newMPC;} return _oldMPC;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_oldMPC",
                                        "",
                                        "AnyswapV1Vault"
                                    ],
                                    [
                                        "_newMPC",
                                        "",
                                        "AnyswapV1Vault"
                                    ],
                                    [
                                        "_newMPCEffectiveTime",
                                        "",
                                        "AnyswapV1Vault"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "cdfc83ed07486e348642e29a0b3c6348"
                            }
                        ],
                        "cID": [
                            {
                                "visibility": "public",
                                "content": "function cID() public view returns (uint id){ assembly{ id := chainid()}}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "id"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "3b476bdf3c0c6f59c7a2679df1573c5e"
                            }
                        ],
                        "changeMPC": [
                            {
                                "visibility": "public",
                                "content": "function changeMPC(address newMPC) public onlyMPC returns (bool){ require(newMPC != address(0), \"AnyswapV1Safe: address(0x0)\"); _oldMPC = mpc(); _newMPC = newMPC; _newMPCEffectiveTime = block.timestamp + 2*24*3600; emit LogChangeMPC(_oldMPC, _newMPC, _newMPCEffectiveTime, cID()); return true;}",
                                "modifiers": [
                                    "onlyMPC"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "newMPC"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_oldMPC",
                                        "",
                                        "AnyswapV1Vault"
                                    ],
                                    [
                                        "_newMPC",
                                        "",
                                        "AnyswapV1Vault"
                                    ],
                                    [
                                        "_newMPCEffectiveTime",
                                        "",
                                        "AnyswapV1Vault"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_oldMPC",
                                        "",
                                        "AnyswapV1Vault"
                                    ],
                                    [
                                        "_newMPC",
                                        "",
                                        "AnyswapV1Vault"
                                    ],
                                    [
                                        "_newMPCEffectiveTime",
                                        "",
                                        "AnyswapV1Vault"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyswapV1Vault.mpc",
                                        "AnyswapV1Vault.onlyMPC",
                                        "AnyswapV1Vault.cID"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "57650b5d61fac25f589f178369ac124b"
                            }
                        ],
                        "changeVault": [
                            {
                                "visibility": "public",
                                "content": "function changeVault(address token, address newVault) public onlyMPC returns (bool){ require(newVault != address(0), \"AnyswapV1Safe: address(0x0)\"); return AnyswapV1ERC20(token).changeVault(newVault);}",
                                "modifiers": [
                                    "onlyMPC"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "newVault"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyswapV1Vault.onlyMPC"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "3e912bccb8371e0184dc7506785db2c0"
                            }
                        ],
                        "_anySwapOut": [
                            {
                                "visibility": "internal",
                                "content": "function _anySwapOut(address from, address token, address to, uint amount, uint toChainID) internal{ AnyswapV1ERC20(token).burn(from, amount); emit LogAnySwapOut(token, from, to, amount, cID(), toChainID);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "toChainID"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyswapV1Vault.cID"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "e4e8e12324334ff907b0cb998e752f67"
                            }
                        ],
                        "anySwapOut": [
                            {
                                "visibility": "external",
                                "content": "function anySwapOut(address token, address to, uint amount, uint toChainID) external{ _anySwapOut(msg.sender, token, to, amount, toChainID);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "toChainID"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyswapV1Vault._anySwapOut"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "1c1f7304aae24ab7052fcf4a7a3dee45"
                            },
                            {
                                "visibility": "external",
                                "content": "function anySwapOut(address[] calldata tokens, address[] calldata to, uint[] calldata amounts, uint[] calldata toChainIDs) external{ for (uint i = 0; i < tokens.length; i++){ _anySwapOut(msg.sender, tokens[i], to[i], amounts[i], toChainIDs[i]);}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address[] calldata",
                                        "name": "tokens"
                                    },
                                    {
                                        "type": "address[] calldata",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint[] calldata",
                                        "name": "amounts"
                                    },
                                    {
                                        "type": "uint[] calldata",
                                        "name": "toChainIDs"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyswapV1Vault._anySwapOut"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "b94570b7ffc9f68a1ca18d6beb98e8dd"
                            }
                        ],
                        "anySwapOutUnderlying": [
                            {
                                "visibility": "external",
                                "content": "function anySwapOutUnderlying(address token, address to, uint amount, uint toChainID) external{ IERC20(AnyswapV1ERC20(token).underlying()).safeTransferFrom(msg.sender, token, amount); AnyswapV1ERC20(token).depositVault(amount, msg.sender); _anySwapOut(msg.sender, token, to, amount, toChainID);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "toChainID"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyswapV1Vault._anySwapOut"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "b50245002e0620aba8ac4471b41ec7de"
                            }
                        ],
                        "anySwapOutUnderlyingWithPermit": [
                            {
                                "visibility": "external",
                                "content": "function anySwapOutUnderlyingWithPermit( address from, address token, address to, uint amount, uint deadline, uint8 v, bytes32 r, bytes32 s, uint toChainID ) external{ address _underlying = AnyswapV1ERC20(token).underlying(); IERC20(_underlying).permit(from, address(this), amount, deadline, v, r, s); IERC20(_underlying).safeTransferFrom(from, token, amount); AnyswapV1ERC20(token).depositVault(amount, from); _anySwapOut(from, token, to, amount, toChainID);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "deadline"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "v"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "r"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "s"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "toChainID"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyswapV1Vault._anySwapOut"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "01a4183e80a9d0e8222a9ed701b477ad"
                            }
                        ],
                        "anySwapOutUnderlyingWithTransferPermit": [
                            {
                                "visibility": "external",
                                "content": "function anySwapOutUnderlyingWithTransferPermit( address from, address token, address to, uint amount, uint deadline, uint8 v, bytes32 r, bytes32 s, uint toChainID ) external{ IERC20(AnyswapV1ERC20(token).underlying()).transferWithPermit(from, token, amount, deadline, v, r, s); AnyswapV1ERC20(token).depositVault(amount, from); _anySwapOut(from, token, to, amount, toChainID);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "deadline"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "v"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "r"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "s"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "toChainID"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyswapV1Vault._anySwapOut"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "e56da9218dd31aa549ffe99616e51080"
                            }
                        ],
                        "_anySwapIn": [
                            {
                                "visibility": "internal",
                                "content": "function _anySwapIn(bytes32 txs, address token, address to, uint amount, uint fromChainID) internal{ AnyswapV1ERC20(token).mint(to, amount); emit LogAnySwapIn(txs, token, to, amount, fromChainID, cID());}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "txs"
                                    },
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "fromChainID"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyswapV1Vault.cID"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "4bbfd89bd4ff065fd57f8ec4b230f2ab"
                            }
                        ],
                        "anySwapIn": [
                            {
                                "visibility": "external",
                                "content": "function anySwapIn(bytes32 txs, address token, address to, uint amount, uint fromChainID) external onlyMPC{ _anySwapIn(txs, token, to, amount, fromChainID);}",
                                "modifiers": [
                                    "onlyMPC"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "txs"
                                    },
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "fromChainID"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyswapV1Vault.onlyMPC",
                                        "AnyswapV1Vault._anySwapIn"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "1cc907ea76af4a1e9ea921a12c0096b8"
                            },
                            {
                                "visibility": "external",
                                "content": "function anySwapIn(bytes32[] calldata txs, address[] calldata tokens, address[] calldata to, uint256[] calldata amounts, uint[] calldata fromChainIDs) external onlyMPC{ for (uint i = 0; i < tokens.length; i++){ _anySwapIn(txs[i], tokens[i], to[i], amounts[i], fromChainIDs[i]);}}",
                                "modifiers": [
                                    "onlyMPC"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32[] calldata",
                                        "name": "txs"
                                    },
                                    {
                                        "type": "address[] calldata",
                                        "name": "tokens"
                                    },
                                    {
                                        "type": "address[] calldata",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256[] calldata",
                                        "name": "amounts"
                                    },
                                    {
                                        "type": "uint[] calldata",
                                        "name": "fromChainIDs"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyswapV1Vault.onlyMPC",
                                        "AnyswapV1Vault._anySwapIn"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "97daf37082120bc93fcc46ceddfed7ef"
                            }
                        ],
                        "anySwapInUnderlying": [
                            {
                                "visibility": "external",
                                "content": "function anySwapInUnderlying(bytes32 txs, address token, address to, uint amount, uint fromChainID) external onlyMPC{ _anySwapIn(txs, token, to, amount, fromChainID); AnyswapV1ERC20(token).withdrawVault(to, amount, to);}",
                                "modifiers": [
                                    "onlyMPC"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "txs"
                                    },
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "fromChainID"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyswapV1Vault.onlyMPC",
                                        "AnyswapV1Vault._anySwapIn"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "358fc23ced8480bb80ca2f8cdf8209a5"
                            }
                        ],
                        "anySwapFeeTo": [
                            {
                                "visibility": "external",
                                "content": "function anySwapFeeTo(address token, uint amount) external onlyMPC{ address _mpc = mpc(); AnyswapV1ERC20(token).mint(_mpc, amount); AnyswapV1ERC20(token).withdrawVault(_mpc, amount, _mpc);}",
                                "modifiers": [
                                    "onlyMPC"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyswapV1Vault.mpc",
                                        "AnyswapV1Vault.onlyMPC"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "65827b8e3e4d02e36245848cdf9830a8"
                            }
                        ],
                        "_swap": [
                            {
                                "visibility": "internal",
                                "content": "function _swap(uint[] memory amounts, address[] memory path, address _to) internal virtual{ for (uint i; i < path.length - 1; i++){ (address input, address output) = (path[i], path[i + 1]); (address token0, ) = SushiswapV2Library.sortTokens(input, output); uint amountOut = amounts[i + 1]; (uint amount0Out, uint amount1Out) = input == token0 ? (uint(0), amountOut) : (amountOut, uint(0)); address to = i < path.length - 2 ? SushiswapV2Library.pairFor(factory, output, path[i + 2]) : _to; ISushiswapV2Pair(SushiswapV2Library.pairFor(factory, input, output)).swap( amount0Out, amount1Out, to, new bytes(0) );}}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint[] memory",
                                        "name": "amounts"
                                    },
                                    {
                                        "type": "address[] memory",
                                        "name": "path"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_to"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "factory",
                                        "",
                                        "AnyswapV1Vault"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SushiswapV2Library.sortTokens",
                                        "SushiswapV2Library.pairFor"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "e52d6f74aab575776fd40f2a8fec3ab3"
                            }
                        ],
                        "anySwapOutExactTokensForTokens": [
                            {
                                "visibility": "external",
                                "content": "function anySwapOutExactTokensForTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline, uint toChainID ) external virtual ensure(deadline){ AnyswapV1ERC20(path[0]).burn(msg.sender, amountIn); emit LogAnySwapTradeTokensForTokens(path, msg.sender, to, amountIn, amountOutMin, cID(), toChainID);}",
                                "modifiers": [
                                    "virtual",
                                    "ensure(deadline)"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "amountIn"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountOutMin"
                                    },
                                    {
                                        "type": "address[] calldata",
                                        "name": "path"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "deadline"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "toChainID"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyswapV1Vault.ensure",
                                        "AnyswapV1Vault.cID"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "0c6a5c06fb574ae7d2cebfc6380d53e3"
                            }
                        ],
                        "anySwapOutExactTokensForTokensUnderlying": [
                            {
                                "visibility": "external",
                                "content": "function anySwapOutExactTokensForTokensUnderlying( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline, uint toChainID ) external virtual ensure(deadline){ IERC20(AnyswapV1ERC20(path[0]).underlying()).safeTransferFrom(msg.sender, path[0], amountIn); AnyswapV1ERC20(path[0]).depositVault(amountIn, msg.sender); AnyswapV1ERC20(path[0]).burn(msg.sender, amountIn); emit LogAnySwapTradeTokensForTokens(path, msg.sender, to, amountIn, amountOutMin, cID(), toChainID);}",
                                "modifiers": [
                                    "virtual",
                                    "ensure(deadline)"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "amountIn"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountOutMin"
                                    },
                                    {
                                        "type": "address[] calldata",
                                        "name": "path"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "deadline"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "toChainID"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyswapV1Vault.ensure",
                                        "AnyswapV1Vault.cID"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "a3ef568c25cefc55ae312710ee624a98"
                            }
                        ],
                        "anySwapOutExactTokensForTokensUnderlyingWithPermit": [
                            {
                                "visibility": "external",
                                "content": "function anySwapOutExactTokensForTokensUnderlyingWithPermit( address from, uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline, uint8 v, bytes32 r, bytes32 s, uint toChainID ) external virtual ensure(deadline){ address _underlying = AnyswapV1ERC20(path[0]).underlying(); IERC20(_underlying).permit(from, address(this), amountIn, deadline, v, r, s); IERC20(_underlying).safeTransferFrom(from, path[0], amountIn); AnyswapV1ERC20(path[0]).depositVault(amountIn, from); AnyswapV1ERC20(path[0]).burn(from, amountIn); emit LogAnySwapTradeTokensForTokens(path, from, to, amountIn, amountOutMin, cID(), toChainID);}",
                                "modifiers": [
                                    "virtual",
                                    "ensure(deadline)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountIn"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountOutMin"
                                    },
                                    {
                                        "type": "address[] calldata",
                                        "name": "path"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "deadline"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "v"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "r"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "s"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "toChainID"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyswapV1Vault.ensure",
                                        "AnyswapV1Vault.cID"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "3644fe7ae43a5596c511d4388aa166eb"
                            }
                        ],
                        "anySwapOutExactTokensForTokensUnderlyingWithTransferPermit": [
                            {
                                "visibility": "external",
                                "content": "function anySwapOutExactTokensForTokensUnderlyingWithTransferPermit( address from, uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline, uint8 v, bytes32 r, bytes32 s, uint toChainID ) external virtual ensure(deadline){ IERC20(AnyswapV1ERC20(path[0]).underlying()).transferWithPermit(from, path[0], amountIn, deadline, v, r, s); AnyswapV1ERC20(path[0]).depositVault(amountIn, from); AnyswapV1ERC20(path[0]).burn(from, amountIn); emit LogAnySwapTradeTokensForTokens(path, from, to, amountIn, amountOutMin, cID(), toChainID);}",
                                "modifiers": [
                                    "virtual",
                                    "ensure(deadline)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountIn"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountOutMin"
                                    },
                                    {
                                        "type": "address[] calldata",
                                        "name": "path"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "deadline"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "v"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "r"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "s"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "toChainID"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyswapV1Vault.ensure",
                                        "AnyswapV1Vault.cID"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "1f6f063b82dddd8f853f73ba33e4c08f"
                            }
                        ],
                        "anySwapInExactTokensForTokens": [
                            {
                                "visibility": "external",
                                "content": "function anySwapInExactTokensForTokens( bytes32 txs, uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline, uint fromChainID ) external onlyMPC virtual ensure(deadline) returns (uint[] memory amounts){ amounts = SushiswapV2Library.getAmountsOut(factory, amountIn, path); require(amounts[amounts.length - 1] >= amountOutMin, 'SushiswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT'); _anySwapIn(txs, path[0], SushiswapV2Library.pairFor(factory, path[0], path[1]), amounts[0], fromChainID); _swap(amounts, path, to);}",
                                "modifiers": [
                                    "onlyMPC",
                                    "virtual",
                                    "ensure(deadline)"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "txs"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountIn"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountOutMin"
                                    },
                                    {
                                        "type": "address[] calldata",
                                        "name": "path"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "deadline"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "fromChainID"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint[] memory",
                                        "name": "amounts"
                                    }
                                ],
                                "reads": [
                                    [
                                        "factory",
                                        "",
                                        "AnyswapV1Vault"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyswapV1Vault.ensure",
                                        "AnyswapV1Vault._swap",
                                        "AnyswapV1Vault._anySwapIn",
                                        "AnyswapV1Vault.onlyMPC",
                                        "SushiswapV2Library.getAmountsOut",
                                        "SushiswapV2Library.pairFor"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "6afac8a8f520c5a56949a003c089b542"
                            }
                        ],
                        "anySwapOutExactTokensForNative": [
                            {
                                "visibility": "external",
                                "content": "function anySwapOutExactTokensForNative( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline, uint toChainID ) external virtual ensure(deadline){ AnyswapV1ERC20(path[0]).burn(msg.sender, amountIn); emit LogAnySwapTradeTokensForNative(path, msg.sender, to, amountIn, amountOutMin, cID(), toChainID);}",
                                "modifiers": [
                                    "virtual",
                                    "ensure(deadline)"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "amountIn"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountOutMin"
                                    },
                                    {
                                        "type": "address[] calldata",
                                        "name": "path"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "deadline"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "toChainID"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyswapV1Vault.ensure",
                                        "AnyswapV1Vault.cID"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "8b2fac81138ef1fdd5628a6ff4b99cde"
                            }
                        ],
                        "anySwapOutExactTokensForNativeUnderlying": [
                            {
                                "visibility": "external",
                                "content": "function anySwapOutExactTokensForNativeUnderlying( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline, uint toChainID ) external virtual ensure(deadline){ IERC20(AnyswapV1ERC20(path[0]).underlying()).safeTransferFrom(msg.sender, path[0], amountIn); AnyswapV1ERC20(path[0]).depositVault(amountIn, msg.sender); AnyswapV1ERC20(path[0]).burn(msg.sender, amountIn); emit LogAnySwapTradeTokensForNative(path, msg.sender, to, amountIn, amountOutMin, cID(), toChainID);}",
                                "modifiers": [
                                    "virtual",
                                    "ensure(deadline)"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "amountIn"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountOutMin"
                                    },
                                    {
                                        "type": "address[] calldata",
                                        "name": "path"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "deadline"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "toChainID"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyswapV1Vault.ensure",
                                        "AnyswapV1Vault.cID"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "227a9af40e390c892e0c617ec35083d6"
                            }
                        ],
                        "anySwapOutExactTokensForNativeUnderlyingWithPermit": [
                            {
                                "visibility": "external",
                                "content": "function anySwapOutExactTokensForNativeUnderlyingWithPermit( address from, uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline, uint8 v, bytes32 r, bytes32 s, uint toChainID ) external virtual ensure(deadline){ address _underlying = AnyswapV1ERC20(path[0]).underlying(); IERC20(_underlying).permit(from, address(this), amountIn, deadline, v, r, s); IERC20(_underlying).safeTransferFrom(from, path[0], amountIn); AnyswapV1ERC20(path[0]).depositVault(amountIn, from); AnyswapV1ERC20(path[0]).burn(from, amountIn); emit LogAnySwapTradeTokensForNative(path, from, to, amountIn, amountOutMin, cID(), toChainID);}",
                                "modifiers": [
                                    "virtual",
                                    "ensure(deadline)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountIn"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountOutMin"
                                    },
                                    {
                                        "type": "address[] calldata",
                                        "name": "path"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "deadline"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "v"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "r"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "s"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "toChainID"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyswapV1Vault.ensure",
                                        "AnyswapV1Vault.cID"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "83e668e50915eab470c1f15e8df199f3"
                            }
                        ],
                        "anySwapOutExactTokensForNativeUnderlyingWithTransferPermit": [
                            {
                                "visibility": "external",
                                "content": "function anySwapOutExactTokensForNativeUnderlyingWithTransferPermit( address from, uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline, uint8 v, bytes32 r, bytes32 s, uint toChainID ) external virtual ensure(deadline){ IERC20(AnyswapV1ERC20(path[0]).underlying()).transferWithPermit(from, path[0], amountIn, deadline, v, r, s); AnyswapV1ERC20(path[0]).depositVault(amountIn, from); AnyswapV1ERC20(path[0]).burn(from, amountIn); emit LogAnySwapTradeTokensForNative(path, from, to, amountIn, amountOutMin, cID(), toChainID);}",
                                "modifiers": [
                                    "virtual",
                                    "ensure(deadline)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountIn"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountOutMin"
                                    },
                                    {
                                        "type": "address[] calldata",
                                        "name": "path"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "deadline"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "v"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "r"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "s"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "toChainID"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyswapV1Vault.ensure",
                                        "AnyswapV1Vault.cID"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "56b87d801027f384e07699b5e2e055e0"
                            }
                        ],
                        "anySwapInExactTokensForNative": [
                            {
                                "visibility": "external",
                                "content": "function anySwapInExactTokensForNative( bytes32 txs, uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline, uint fromChainID ) external onlyMPC virtual ensure(deadline) returns (uint[] memory amounts){ require(path[path.length - 1] == wNATIVE, 'SushiswapV2Router: INVALID_PATH'); amounts = SushiswapV2Library.getAmountsOut(factory, amountIn, path); require(amounts[amounts.length - 1] >= amountOutMin, 'SushiswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT'); _anySwapIn(txs, path[0], SushiswapV2Library.pairFor(factory, path[0], path[1]), amounts[0], fromChainID); _swap(amounts, path, address(this)); IwNATIVE(wNATIVE).withdraw(amounts[amounts.length - 1]); TransferHelper.safeTransferNative(to, amounts[amounts.length - 1]);}",
                                "modifiers": [
                                    "onlyMPC",
                                    "virtual",
                                    "ensure(deadline)"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "txs"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountIn"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountOutMin"
                                    },
                                    {
                                        "type": "address[] calldata",
                                        "name": "path"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "deadline"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "fromChainID"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint[] memory",
                                        "name": "amounts"
                                    }
                                ],
                                "reads": [
                                    [
                                        "factory",
                                        "",
                                        "AnyswapV1Vault"
                                    ],
                                    [
                                        "wNATIVE",
                                        "",
                                        "AnyswapV1Vault"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SushiswapV2Library.pairFor",
                                        "AnyswapV1Vault.ensure",
                                        "AnyswapV1Vault._swap",
                                        "AnyswapV1Vault._anySwapIn",
                                        "AnyswapV1Vault.onlyMPC",
                                        "SushiswapV2Library.getAmountsOut",
                                        "TransferHelper.safeTransferNative"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "dfa5462c383990588adb73bb53c7c815"
                            }
                        ],
                        "quote": [
                            {
                                "visibility": "public",
                                "content": "function quote(uint amountA, uint reserveA, uint reserveB) public pure virtual returns (uint amountB){ return SushiswapV2Library.quote(amountA, reserveA, reserveB);}",
                                "modifiers": [
                                    "pure",
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "amountA"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "reserveA"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "reserveB"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "amountB"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SushiswapV2Library.quote"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "f5c694a9d663caca8bb3243f52b730fb"
                            }
                        ],
                        "getAmountOut": [
                            {
                                "visibility": "public",
                                "content": "function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) public pure virtual returns (uint amountOut){ return SushiswapV2Library.getAmountOut(amountIn, reserveIn, reserveOut);}",
                                "modifiers": [
                                    "pure",
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "amountIn"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "reserveIn"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "reserveOut"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "amountOut"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SushiswapV2Library.getAmountOut"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "95db587290ccd5acf1faaed7e76ae45a"
                            }
                        ],
                        "getAmountIn": [
                            {
                                "visibility": "public",
                                "content": "function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) public pure virtual returns (uint amountIn){ return SushiswapV2Library.getAmountIn(amountOut, reserveIn, reserveOut);}",
                                "modifiers": [
                                    "pure",
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "amountOut"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "reserveIn"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "reserveOut"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "amountIn"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SushiswapV2Library.getAmountIn"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "c1822bcc0b1d1c63b5b30e19b7d3df6a"
                            }
                        ],
                        "getAmountsOut": [
                            {
                                "visibility": "public",
                                "content": "function getAmountsOut(uint amountIn, address[] memory path) public view virtual returns (uint[] memory amounts){ return SushiswapV2Library.getAmountsOut(factory, amountIn, path);}",
                                "modifiers": [
                                    "view",
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "amountIn"
                                    },
                                    {
                                        "type": "address[] memory",
                                        "name": "path"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint[] memory",
                                        "name": "amounts"
                                    }
                                ],
                                "reads": [
                                    [
                                        "factory",
                                        "",
                                        "AnyswapV1Vault"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SushiswapV2Library.getAmountsOut"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "63a1ef2cc53b6abf15a234b4d326849f"
                            }
                        ],
                        "getAmountsIn": [
                            {
                                "visibility": "public",
                                "content": "function getAmountsIn(uint amountOut, address[] memory path) public view virtual returns (uint[] memory amounts){ return SushiswapV2Library.getAmountsIn(factory, amountOut, path);}",
                                "modifiers": [
                                    "view",
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "amountOut"
                                    },
                                    {
                                        "type": "address[] memory",
                                        "name": "path"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint[] memory",
                                        "name": "amounts"
                                    }
                                ],
                                "reads": [
                                    [
                                        "factory",
                                        "",
                                        "AnyswapV1Vault"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SushiswapV2Library.getAmountsIn"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "8ec022812beaa2bed86c98abceaa515f"
                            }
                        ]
                    },
                    "modifiers": {
                        "ensure": {
                            "parameters": [
                                {
                                    "type": "uint",
                                    "name": "deadline"
                                }
                            ],
                            "content": "modifier ensure(uint deadline){ require(deadline >= block.timestamp, 'SushiswapV2Router: EXPIRED'); _;}",
                            "reads": [],
                            "writes": [],
                            "external_calls": [],
                            "md5": "3b236450f14532f6efcbfcdb587e0077"
                        },
                        "onlyMPC": {
                            "parameters": [],
                            "content": "modifier onlyMPC(){ require(msg.sender == mpc(), \"AnyswapV1Safe: FORBIDDEN\"); _;}",
                            "reads": [],
                            "writes": [],
                            "external_calls": {
                                "__set__": true,
                                "values": [
                                    "AnyswapV1Vault.mpc"
                                ]
                            },
                            "md5": "f8c419819ba53601786ef3285ce55dbb"
                        }
                    },
                    "structs": {},
                    "events": {
                        "LogChangeMPC": {
                            "event": "LogChangeMPC",
                            "content": "LogChangeMPC(address indexed oldMPC, address indexed newMPC, uint indexed effectiveTime, uint chainID)"
                        },
                        "LogChangeRouter": {
                            "event": "LogChangeRouter",
                            "content": "LogChangeRouter(address indexed oldRouter, address indexed newRouter, uint chainID)"
                        },
                        "LogAnySwapIn": {
                            "event": "LogAnySwapIn",
                            "content": "LogAnySwapIn(bytes32 indexed txhash, address indexed token, address indexed to, uint amount, uint fromChainID, uint toChainID)"
                        },
                        "LogAnySwapOut": {
                            "event": "LogAnySwapOut",
                            "content": "LogAnySwapOut(address indexed token, address indexed from, address indexed to, uint amount, uint fromChainID, uint toChainID)"
                        },
                        "LogAnySwapTradeTokensForTokens": {
                            "event": "LogAnySwapTradeTokensForTokens",
                            "content": "LogAnySwapTradeTokensForTokens(address[] indexed path, address indexed from, address indexed to, uint amountIn, uint amountOutMin, uint fromChainID, uint toChainID)"
                        },
                        "LogAnySwapTradeTokensForNative": {
                            "event": "LogAnySwapTradeTokensForNative",
                            "content": "LogAnySwapTradeTokensForNative(address[] indexed path, address indexed from, address indexed to, uint amountIn, uint amountOutMin, uint fromChainID, uint toChainID)"
                        },
                        "LogAnyCallQueue": {
                            "event": "LogAnyCallQueue",
                            "content": "LogAnyCallQueue(address indexed callContract, uint value, bytes data, uint fromChainID, uint toChainID)"
                        },
                        "LogAnyCallExecute": {
                            "event": "LogAnyCallExecute",
                            "content": "LogAnyCallExecute(address indexed callContract, uint value, bytes data, bool success, uint fromChainID, uint toChainID)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "IERC20": "SafeERC20",
                        "uint": "SafeMathSushiswap"
                    }
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "SushiswapV2Library.sortTokens": "53553004d7c40a8043fec91809e5eb82",
                "SushiswapV2Library.pairFor": "0966039bc6d80270f06e5d9760ee5973",
                "SushiswapV2Library.getReserves": "e12c8e854eb992f08c30e88b3e078522",
                "SushiswapV2Library.getAmountOut": "de9a0b4fe347557aa85f1beddb841fcb",
                "SushiswapV2Library.getAmountIn": "719310c4a8954494b502bb60f325d986",
                "SafeERC20.callOptionalReturn": "b3221f01a369fc6acd5325df9fd85126",
                "IERC20.allowance": "c93791d09d789aed33b9725d482af442",
                "AnyswapV1Vault.mpc": "cdfc83ed07486e348642e29a0b3c6348",
                "AnyswapV1Vault.cID": "3b476bdf3c0c6f59c7a2679df1573c5e",
                "AnyswapV1Vault.onlyMPC": "f8c419819ba53601786ef3285ce55dbb",
                "AnyswapV1Vault._anySwapOut": "e4e8e12324334ff907b0cb998e752f67",
                "AnyswapV1Vault._anySwapIn": "4bbfd89bd4ff065fd57f8ec4b230f2ab",
                "AnyswapV1Vault.ensure": "3b236450f14532f6efcbfcdb587e0077",
                "SushiswapV2Library.getAmountsOut": "fd145cd614d3cfb20b6182a54e4853a0",
                "AnyswapV1Vault._swap": "e52d6f74aab575776fd40f2a8fec3ab3",
                "TransferHelper.safeTransferNative": "a335433fd57a5f0afeeef0aefa9cdf29",
                "SushiswapV2Library.quote": "814d0103910bb8adeb7a6e1b665e2d9a",
                "SushiswapV2Library.getAmountsIn": "6409030ef935ed2148ebd6f3a0220b44"
            },
            "md5": "6bf89b9c712e4152d2956288de869d41"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\ComintWrapper.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\ComintWrapper.sol",
            "filename": "ComintWrapper.sol",
            "imported_contracts": {},
            "contracts": {
                "IComintToken": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "mint": [
                            {
                                "visibility": "external",
                                "content": "function mint(address to, uint256 amount) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c202aa3c6588d66d11087c05aad0384a"
                            }
                        ],
                        "burnFrom": [
                            {
                                "visibility": "external",
                                "content": "function burnFrom(address account, uint256 amount) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "account"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "ee2dd14eae657ee8615f79e4cb6cf270"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                },
                "ComintWrapper": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {
                        "underlying": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public immutable underlying;"
                        },
                        "underlyingIsMinted": {
                            "type": "bool",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "true",
                            "content": "bool public underlyingIsMinted = true;"
                        },
                        "_totalSupply": {
                            "type": "uint256",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256 private _totalSupply;"
                        },
                        "_init": {
                            "type": "bool",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "bool private _init;"
                        },
                        "_vaultOnly": {
                            "type": "bool",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "bool private _vaultOnly;"
                        },
                        "DELAY": {
                            "type": "uint",
                            "visibility": "public",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "2 days",
                            "content": "uint public constant DELAY = 2 days;"
                        },
                        "isMinter": {
                            "type": "mapping(address => bool)",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(address => bool) public isMinter;"
                        },
                        "minters": {
                            "type": "address[]",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address[] public minters;"
                        },
                        "vault": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public vault;"
                        },
                        "pendingMinter": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public pendingMinter;"
                        },
                        "delayMinter": {
                            "type": "uint",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint public delayMinter;"
                        },
                        "pendingVault": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public pendingVault;"
                        },
                        "delayVault": {
                            "type": "uint",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint public delayVault;"
                        }
                    },
                    "functions": {
                        "owner": [
                            {
                                "visibility": "external",
                                "content": "function owner() external view returns (address){ return vault;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "vault",
                                        "",
                                        "ComintWrapper"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "7cc59487b0e138d47c46b0df8cee7016"
                            }
                        ],
                        "mpc": [
                            {
                                "visibility": "external",
                                "content": "function mpc() external view returns (address){ return vault;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "vault",
                                        "",
                                        "ComintWrapper"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "dc8c715f102e5e185578ff717274ce09"
                            }
                        ],
                        "setVaultOnly": [
                            {
                                "visibility": "external",
                                "content": "function setVaultOnly(bool enabled) external onlyVault{ _vaultOnly = enabled;}",
                                "modifiers": [
                                    "onlyVault"
                                ],
                                "parameters": [
                                    {
                                        "type": "bool",
                                        "name": "enabled"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_vaultOnly",
                                        "",
                                        "ComintWrapper"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_vaultOnly",
                                        "",
                                        "ComintWrapper"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ComintWrapper.onlyVault"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "2e6aec18ec1ad851399fa773a1bf1139"
                            }
                        ],
                        "initVault": [
                            {
                                "visibility": "external",
                                "content": "function initVault(address _vault) external onlyVault{ require(_init); _init = false; vault = _vault; isMinter[_vault] = true; minters.push(_vault);}",
                                "modifiers": [
                                    "onlyVault"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_vault"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_init",
                                        "",
                                        "ComintWrapper"
                                    ],
                                    [
                                        "isMinter",
                                        "",
                                        "ComintWrapper"
                                    ],
                                    [
                                        "minters",
                                        "",
                                        "ComintWrapper"
                                    ],
                                    [
                                        "vault",
                                        "",
                                        "ComintWrapper"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_init",
                                        "",
                                        "ComintWrapper"
                                    ],
                                    [
                                        "isMinter",
                                        "",
                                        "ComintWrapper"
                                    ],
                                    [
                                        "vault",
                                        "",
                                        "ComintWrapper"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ComintWrapper.onlyVault"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "2e224de6327c20b2ad9bb2a43e21063e"
                            }
                        ],
                        "setVault": [
                            {
                                "visibility": "external",
                                "content": "function setVault(address _vault) external onlyVault{ require(_vault != address(0), \"AnyswapV6ERC20: address(0)\"); pendingVault = _vault; delayVault = block.timestamp + DELAY;}",
                                "modifiers": [
                                    "onlyVault"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_vault"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "DELAY",
                                        "",
                                        "ComintWrapper"
                                    ],
                                    [
                                        "pendingVault",
                                        "",
                                        "ComintWrapper"
                                    ],
                                    [
                                        "delayVault",
                                        "",
                                        "ComintWrapper"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "pendingVault",
                                        "",
                                        "ComintWrapper"
                                    ],
                                    [
                                        "delayVault",
                                        "",
                                        "ComintWrapper"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ComintWrapper.onlyVault"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "eb4b061c5e03c2c60b5dcbbb3e277881"
                            }
                        ],
                        "applyVault": [
                            {
                                "visibility": "external",
                                "content": "function applyVault() external onlyVault{ require(pendingVault != address(0) && block.timestamp >= delayVault); vault = pendingVault; pendingVault = address(0); delayVault = 0;}",
                                "modifiers": [
                                    "onlyVault"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [
                                    [
                                        "vault",
                                        "",
                                        "ComintWrapper"
                                    ],
                                    [
                                        "pendingVault",
                                        "",
                                        "ComintWrapper"
                                    ],
                                    [
                                        "delayVault",
                                        "",
                                        "ComintWrapper"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "vault",
                                        "",
                                        "ComintWrapper"
                                    ],
                                    [
                                        "pendingVault",
                                        "",
                                        "ComintWrapper"
                                    ],
                                    [
                                        "delayVault",
                                        "",
                                        "ComintWrapper"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ComintWrapper.onlyVault"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "c459cc48692773c1d1821d9bdc399e9a"
                            }
                        ],
                        "setMinter": [
                            {
                                "visibility": "external",
                                "content": "function setMinter(address _auth) external onlyVault{ require(_auth != address(0), \"AnyswapV6ERC20: address(0)\"); pendingMinter = _auth; delayMinter = block.timestamp + DELAY;}",
                                "modifiers": [
                                    "onlyVault"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_auth"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "DELAY",
                                        "",
                                        "ComintWrapper"
                                    ],
                                    [
                                        "pendingMinter",
                                        "",
                                        "ComintWrapper"
                                    ],
                                    [
                                        "delayMinter",
                                        "",
                                        "ComintWrapper"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "pendingMinter",
                                        "",
                                        "ComintWrapper"
                                    ],
                                    [
                                        "delayMinter",
                                        "",
                                        "ComintWrapper"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ComintWrapper.onlyVault"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "8891acf84ab163a924b828d2a348def9"
                            }
                        ],
                        "applyMinter": [
                            {
                                "visibility": "external",
                                "content": "function applyMinter() external onlyVault{ require(pendingMinter != address(0) && block.timestamp >= delayMinter); isMinter[pendingMinter] = true; minters.push(pendingMinter); pendingMinter = address(0); delayMinter = 0;}",
                                "modifiers": [
                                    "onlyVault"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [
                                    [
                                        "isMinter",
                                        "",
                                        "ComintWrapper"
                                    ],
                                    [
                                        "minters",
                                        "",
                                        "ComintWrapper"
                                    ],
                                    [
                                        "pendingMinter",
                                        "",
                                        "ComintWrapper"
                                    ],
                                    [
                                        "delayMinter",
                                        "",
                                        "ComintWrapper"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "isMinter",
                                        "",
                                        "ComintWrapper"
                                    ],
                                    [
                                        "pendingMinter",
                                        "",
                                        "ComintWrapper"
                                    ],
                                    [
                                        "delayMinter",
                                        "",
                                        "ComintWrapper"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ComintWrapper.onlyVault"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "9037dd194433daaa48d0840e58dd3bc8"
                            }
                        ],
                        "revokeMinter": [
                            {
                                "visibility": "external",
                                "content": "function revokeMinter(address _auth) external onlyVault{ isMinter[_auth] = false;}",
                                "modifiers": [
                                    "onlyVault"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_auth"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "isMinter",
                                        "",
                                        "ComintWrapper"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "isMinter",
                                        "",
                                        "ComintWrapper"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ComintWrapper.onlyVault"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "28d0a36a47eddba28c3900e9f8522907"
                            }
                        ],
                        "getAllMinters": [
                            {
                                "visibility": "external",
                                "content": "function getAllMinters() external view returns (address[] memory){ return minters;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address[] memory",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "minters",
                                        "",
                                        "ComintWrapper"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "a9eb2dfc84983cd05dd93c09bb690131"
                            }
                        ],
                        "changeVault": [
                            {
                                "visibility": "external",
                                "content": "function changeVault(address newVault) external onlyVault returns (bool){ require(newVault != address(0), \"AnyswapV6ERC20: address(0)\"); emit LogChangeVault(vault, newVault, block.timestamp); vault = newVault; pendingVault = address(0); delayVault = 0; return true;}",
                                "modifiers": [
                                    "onlyVault"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "newVault"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "vault",
                                        "",
                                        "ComintWrapper"
                                    ],
                                    [
                                        "pendingVault",
                                        "",
                                        "ComintWrapper"
                                    ],
                                    [
                                        "delayVault",
                                        "",
                                        "ComintWrapper"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "vault",
                                        "",
                                        "ComintWrapper"
                                    ],
                                    [
                                        "pendingVault",
                                        "",
                                        "ComintWrapper"
                                    ],
                                    [
                                        "delayVault",
                                        "",
                                        "ComintWrapper"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ComintWrapper.onlyVault"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "660bdecb7b8179903de2ef72bcf29cb1"
                            }
                        ],
                        "mint": [
                            {
                                "visibility": "external",
                                "content": "function mint(address to, uint256 amount) external onlyAuth returns (bool){ _mint(to, amount); return true;}",
                                "modifiers": [
                                    "onlyAuth"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ComintWrapper._mint",
                                        "ComintWrapper.onlyAuth"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "6edb7340e6d0d69ff58522805cf2e6b7"
                            }
                        ],
                        "burn": [
                            {
                                "visibility": "external",
                                "content": "function burn(address from, uint256 amount) external onlyAuth returns (bool){ _burn(from, amount); return true;}",
                                "modifiers": [
                                    "onlyAuth"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ComintWrapper._burn",
                                        "ComintWrapper.onlyAuth"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "0478df273dc6fff8ae37428d1847eaba"
                            }
                        ],
                        "Swapin": [
                            {
                                "visibility": "external",
                                "content": "function Swapin(bytes32 txhash, address account, uint256 amount) external onlyAuth returns (bool){ _mint(account, amount); emit LogSwapin(txhash, account, amount); return true;}",
                                "modifiers": [
                                    "onlyAuth"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "txhash"
                                    },
                                    {
                                        "type": "address",
                                        "name": "account"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ComintWrapper._mint",
                                        "ComintWrapper.onlyAuth"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "f7e1634354b1ae5a18aea8bbb5063e7f"
                            }
                        ],
                        "Swapout": [
                            {
                                "visibility": "external",
                                "content": "function Swapout(uint256 amount, address bindaddr) external returns (bool){ require(!_vaultOnly, \"AnyswapV6ERC20: vaultOnly\"); require(bindaddr != address(0), \"AnyswapV6ERC20: address(0)\"); _burn(msg.sender, amount); emit LogSwapout(msg.sender, bindaddr, amount); return true;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "address",
                                        "name": "bindaddr"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_vaultOnly",
                                        "",
                                        "ComintWrapper"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ComintWrapper._burn"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "7c7178352eee107868a531dabcfe2a03"
                            }
                        ],
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (address _underlying, address _vault){ require(_underlying != address(0)); underlying = _underlying; _init = true; _vaultOnly = false; vault = _vault;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_underlying"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_vault"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "underlying",
                                        "",
                                        "ComintWrapper"
                                    ],
                                    [
                                        "_init",
                                        "",
                                        "ComintWrapper"
                                    ],
                                    [
                                        "_vaultOnly",
                                        "",
                                        "ComintWrapper"
                                    ],
                                    [
                                        "vault",
                                        "",
                                        "ComintWrapper"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "underlying",
                                        "",
                                        "ComintWrapper"
                                    ],
                                    [
                                        "_init",
                                        "",
                                        "ComintWrapper"
                                    ],
                                    [
                                        "_vaultOnly",
                                        "",
                                        "ComintWrapper"
                                    ],
                                    [
                                        "vault",
                                        "",
                                        "ComintWrapper"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "cc85bdf282c396696c1647ff6f8d52b6"
                            }
                        ],
                        "totalSupply": [
                            {
                                "visibility": "external",
                                "content": "function totalSupply() external view returns (uint256){ return _totalSupply;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_totalSupply",
                                        "",
                                        "ComintWrapper"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "601792aac5b2cb62a3a5d872b89bf994"
                            }
                        ],
                        "_mint": [
                            {
                                "visibility": "internal",
                                "content": "function _mint(address account, uint256 amount) internal{ IComintToken(underlying).mint(account, amount); _totalSupply += amount;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "account"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "underlying",
                                        "",
                                        "ComintWrapper"
                                    ],
                                    [
                                        "_totalSupply",
                                        "",
                                        "ComintWrapper"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_totalSupply",
                                        "",
                                        "ComintWrapper"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "3070a8583c05c802055a7cff8a0ebbe0"
                            }
                        ],
                        "_burn": [
                            {
                                "visibility": "internal",
                                "content": "function _burn(address account, uint256 amount) internal{ IComintToken(underlying).burnFrom(account, amount); _totalSupply -= amount;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "account"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "underlying",
                                        "",
                                        "ComintWrapper"
                                    ],
                                    [
                                        "_totalSupply",
                                        "",
                                        "ComintWrapper"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_totalSupply",
                                        "",
                                        "ComintWrapper"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "e77f2959161bfe429155096e95e50b3d"
                            }
                        ]
                    },
                    "modifiers": {
                        "onlyAuth": {
                            "parameters": [],
                            "content": "modifier onlyAuth(){ require(isMinter[msg.sender], \"AnyswapV6ERC20: FORBIDDEN\"); _;}",
                            "reads": [
                                [
                                    "isMinter",
                                    "",
                                    "ComintWrapper"
                                ]
                            ],
                            "writes": [],
                            "external_calls": [],
                            "md5": "f3e746254b5484d94ae477f900e5ad4f"
                        },
                        "onlyVault": {
                            "parameters": [],
                            "content": "modifier onlyVault(){ require(msg.sender == vault, \"AnyswapV6ERC20: FORBIDDEN\"); _;}",
                            "reads": [
                                [
                                    "vault",
                                    "",
                                    "ComintWrapper"
                                ]
                            ],
                            "writes": [],
                            "external_calls": [],
                            "md5": "3bdef76c265cb7b05edf547110ef0788"
                        }
                    },
                    "structs": {},
                    "events": {
                        "LogChangeVault": {
                            "event": "LogChangeVault",
                            "content": "LogChangeVault(address indexed oldVault, address indexed newVault, uint indexed effectiveTime)"
                        },
                        "LogSwapin": {
                            "event": "LogSwapin",
                            "content": "LogSwapin(bytes32 indexed txhash, address indexed account, uint amount)"
                        },
                        "LogSwapout": {
                            "event": "LogSwapout",
                            "content": "LogSwapout(address indexed account, address indexed bindaddr, uint amount)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "ComintWrapper.onlyVault": "3bdef76c265cb7b05edf547110ef0788",
                "ComintWrapper._mint": "3070a8583c05c802055a7cff8a0ebbe0",
                "ComintWrapper.onlyAuth": "f3e746254b5484d94ae477f900e5ad4f",
                "ComintWrapper._burn": "e77f2959161bfe429155096e95e50b3d"
            },
            "md5": "36e2f65127b9672b2284d5d92812ff8d"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\interfaces\\IERC1155Gateway.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\interfaces\\IERC1155Gateway.sol",
            "filename": "IERC1155Gateway.sol",
            "imported_contracts": {},
            "contracts": {
                "IERC1155Gateway": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "token": [
                            {
                                "visibility": "external",
                                "content": "function token() external view returns (address);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "4e6a10a1a0a1f93bf71067ec3c05528f"
                            }
                        ],
                        "Swapout_no_fallback": [
                            {
                                "visibility": "external",
                                "content": "function Swapout_no_fallback(uint256 tokenId, uint256 amount, address receiver, uint256 toChainID) external payable returns (uint256 swapoutSeq);",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "tokenId"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "address",
                                        "name": "receiver"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "toChainID"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": "swapoutSeq"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": true,
                                "md5": "c31eff4109edde6077a5f949e93a06c8"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": [
                        [
                            "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\ERC1155Gateway.sol",
                            "ERC1155Gateway"
                        ],
                        [
                            "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\interfaces\\extensions\\IERC1155GatewayFallback.sol",
                            "IERC1155GatewayFallback"
                        ]
                    ]
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "05c89eebdbad3cb76752bdf837419f30"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\ERC1155Gateway.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\ERC1155Gateway.sol",
            "filename": "ERC1155Gateway.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\AnyCallApp.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\interfaces\\IERC1155Gateway.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "ERC1155Gateway": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": true,
                    "inherits": [
                        "is",
                        "IERC1155Gateway",
                        "AnyCallApp"
                    ],
                    "state_variables": {
                        "token": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public token;"
                        },
                        "swapoutSeq": {
                            "type": "uint256",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256 public swapoutSeq;"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (address anyCallProxy, uint256 flag, address token_) AnyCallApp(anyCallProxy, flag){ setAdmin(msg.sender); token = token_;}",
                                "modifiers": [
                                    "AnyCallApp(anyCallProxy, flag)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "anyCallProxy"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "flag"
                                    },
                                    {
                                        "type": "address",
                                        "name": "token_"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "token",
                                        "",
                                        "ERC1155Gateway"
                                    ],
                                    [
                                        "flag",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\AnyCallApp.sol",
                                        "AnyCallApp"
                                    ],
                                    [
                                        "anyCallProxy",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\AnyCallApp.sol",
                                        "AnyCallApp"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "token",
                                        "",
                                        "ERC1155Gateway"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "be62c06f5c11242b5defe71cedd149d6"
                            }
                        ],
                        "_swapout": [
                            {
                                "visibility": "internal",
                                "content": "function _swapout(address sender, uint256 tokenId, uint256 amount) internal virtual returns (bool, bytes memory);",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "sender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "tokenId"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "24f2d76ca984599d8a54606644fc21d6"
                            }
                        ],
                        "_swapin": [
                            {
                                "visibility": "internal",
                                "content": "function _swapin(uint256 tokenId, uint256 amount, address receiver, bytes memory extraMsg) internal virtual returns (bool);",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "tokenId"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "address",
                                        "name": "receiver"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "extraMsg"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "48fbdb6491446366b2f0728f995e0550"
                            }
                        ],
                        "Swapout_no_fallback": [
                            {
                                "visibility": "external",
                                "content": "function Swapout_no_fallback(uint256 tokenId, uint256 amount, address receiver, uint256 destChainID) external payable returns (uint256){ (bool ok, bytes memory extraMsg) = _swapout(msg.sender, tokenId, amount); require(ok); swapoutSeq++; bytes memory data = abi.encode(tokenId, amount, msg.sender, receiver, swapoutSeq, extraMsg); _anyCall(peer[destChainID], data, address(0), destChainID); emit LogAnySwapOut(tokenId, msg.sender, receiver, destChainID, swapoutSeq); return swapoutSeq;}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "tokenId"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "address",
                                        "name": "receiver"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "destChainID"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "swapoutSeq",
                                        "",
                                        "ERC1155Gateway"
                                    ],
                                    [
                                        "peer",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\AnyCallApp.sol",
                                        "AnyCallApp"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "token",
                                        "",
                                        "ERC1155Gateway"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC1155Gateway._swapout",
                                        "ERC1155Gateway._anyCall"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "b40c4f8018908c4102624dce6b3560a1"
                            }
                        ],
                        "_anyExecute": [
                            {
                                "visibility": "internal",
                                "content": "function _anyExecute(uint256 fromChainID, bytes calldata data) internal override returns (bool success, bytes memory result){ (uint256 tokenId, uint256 amount,, address receiver,, bytes memory extraMsg) = abi.decode( data, (uint256, uint256, address, address, uint256, bytes) ); require(_swapin(tokenId, amount, receiver, extraMsg));}",
                                "modifiers": [
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "fromChainID"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "data"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": "success"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "result"
                                    }
                                ],
                                "reads": [],
                                "writes": [
                                    [
                                        "token",
                                        "",
                                        "ERC1155Gateway"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC1155Gateway._swapin"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "c0e3b8d68ca773670fa97c224920e7fa"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {
                        "LogAnySwapOut": {
                            "event": "LogAnySwapOut",
                            "content": "LogAnySwapOut(uint256 tokenId, address sender, address receiver, uint256 toChainID, uint256 swapoutSeq)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "ERC1155Gateway._swapout": "24f2d76ca984599d8a54606644fc21d6",
                "ERC1155Gateway._anyCall": "455b45f2d3ec0c19a181336507b73202",
                "ERC1155Gateway._swapin": "48fbdb6491446366b2f0728f995e0550"
            },
            "md5": "b67b536a02f1ee24fb593da02d7f010f"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\interfaces\\IDecimal.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\interfaces\\IDecimal.sol",
            "filename": "IDecimal.sol",
            "imported_contracts": {},
            "contracts": {
                "IDecimal": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "decimals": [
                            {
                                "visibility": "external",
                                "content": "function decimals() external view returns (uint8);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint8",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "af3fd982db2d33756fe4782a6d55350a"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "d70a26ec26c9e0c48a5e105ffb077498"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\interfaces\\IERC20Gateway.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\interfaces\\IERC20Gateway.sol",
            "filename": "IERC20Gateway.sol",
            "imported_contracts": {},
            "contracts": {
                "IERC20Gateway": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "token": [
                            {
                                "visibility": "external",
                                "content": "function token() external view returns (address);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "4e6a10a1a0a1f93bf71067ec3c05528f"
                            }
                        ],
                        "Swapout_no_fallback": [
                            {
                                "visibility": "external",
                                "content": "function Swapout_no_fallback(uint256 amount, address receiver, uint256 toChainID) external payable returns (uint256 swapoutSeq);",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "address",
                                        "name": "receiver"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "toChainID"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": "swapoutSeq"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": true,
                                "md5": "2e6185aa7904eab3e18b77e79ec49aca"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": [
                        [
                            "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\ERC20Gateway.sol",
                            "ERC20Gateway"
                        ],
                        [
                            "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\interfaces\\extensions\\IERC20GatewayFallback.sol",
                            "IERC20GatewayFallback"
                        ]
                    ]
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "0a7761de2e0c7eaecdfc2200d65f3b47"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\ERC20Gateway.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\ERC20Gateway.sol",
            "filename": "ERC20Gateway.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\AnyCallApp.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\interfaces\\IDecimal.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\interfaces\\IERC20Gateway.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "ERC20Gateway": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": true,
                    "inherits": [
                        "is",
                        "IERC20Gateway",
                        "AnyCallApp"
                    ],
                    "state_variables": {
                        "token": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public token;"
                        },
                        "decimals": {
                            "type": "mapping(uint256 => uint8)",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(uint256 => uint8) public decimals;"
                        },
                        "swapoutSeq": {
                            "type": "uint256",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256 public swapoutSeq;"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (address anyCallProxy, uint256 flag, address token_) AnyCallApp(anyCallProxy, flag){ setAdmin(msg.sender); token = token_;}",
                                "modifiers": [
                                    "AnyCallApp(anyCallProxy, flag)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "anyCallProxy"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "flag"
                                    },
                                    {
                                        "type": "address",
                                        "name": "token_"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "token",
                                        "",
                                        "ERC20Gateway"
                                    ],
                                    [
                                        "flag",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\AnyCallApp.sol",
                                        "AnyCallApp"
                                    ],
                                    [
                                        "anyCallProxy",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\AnyCallApp.sol",
                                        "AnyCallApp"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "token",
                                        "",
                                        "ERC20Gateway"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "be62c06f5c11242b5defe71cedd149d6"
                            }
                        ],
                        "_swapout": [
                            {
                                "visibility": "internal",
                                "content": "function _swapout(uint256 amount, address sender) internal virtual returns (bool);",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "address",
                                        "name": "sender"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "57776558709c28641306b3b97a1286b8"
                            }
                        ],
                        "_swapin": [
                            {
                                "visibility": "internal",
                                "content": "function _swapin(uint256 amount, address receiver) internal virtual returns (bool);",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "address",
                                        "name": "receiver"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "84bf27445a43585a850e4152f69a9f6f"
                            }
                        ],
                        "setDecimals": [
                            {
                                "visibility": "external",
                                "content": "function setDecimals(uint256[] memory chainIDs, uint8[] memory decimals_) external onlyAdmin{ for (uint i = 0; i < chainIDs.length; i++){ decimals[chainIDs[i]] = decimals_[i];}}",
                                "modifiers": [
                                    "onlyAdmin"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256[] memory",
                                        "name": "chainIDs"
                                    },
                                    {
                                        "type": "uint8[] memory",
                                        "name": "decimals_"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "decimals",
                                        "",
                                        "ERC20Gateway"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "decimals",
                                        "",
                                        "ERC20Gateway"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20Gateway.onlyAdmin"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "ffcd56506442bf472023c942299df09c"
                            }
                        ],
                        "decimal": [
                            {
                                "visibility": "external",
                                "content": "function decimal(uint256 chainID) external view returns(uint8){ return (decimals[chainID] > 0 ? decimals[chainID] : IDecimal(token).decimals());}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "chainID"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint8",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "token",
                                        "",
                                        "ERC20Gateway"
                                    ],
                                    [
                                        "decimals",
                                        "",
                                        "ERC20Gateway"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20Gateway.IDecimal"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "5119aadee8d7cab7ef23ea27576766b3"
                            }
                        ],
                        "convertDecimal": [
                            {
                                "visibility": "public",
                                "content": "function convertDecimal(uint256 fromChain, uint256 amount) public view returns (uint256){ uint8 d_0 = this.decimal(fromChain); uint8 d_1 = IDecimal(token).decimals(); if (d_0 > d_1){ for (uint8 i = 0; i < (d_0 - d_1); i++){ amount = amount / 10;}} else{ for (uint8 i = 0; i < (d_1 - d_0); i++){ amount = amount * 10;}} return amount;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "fromChain"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "token",
                                        "",
                                        "ERC20Gateway"
                                    ],
                                    [
                                        "decimals",
                                        "",
                                        "ERC20Gateway"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20Gateway.IDecimal",
                                        "ERC20Gateway.decimal"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "e35011a266c0b1540564e171ba3b1bef"
                            }
                        ],
                        "Swapout_no_fallback": [
                            {
                                "visibility": "external",
                                "content": "function Swapout_no_fallback(uint256 amount, address receiver, uint256 destChainID) external payable returns (uint256){ require(_swapout(amount, msg.sender)); swapoutSeq++; bytes memory data = abi.encode(amount, msg.sender, receiver, swapoutSeq); _anyCall(peer[destChainID], data, address(0), destChainID); emit LogAnySwapOut(amount, msg.sender, receiver, destChainID, swapoutSeq); return swapoutSeq;}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "address",
                                        "name": "receiver"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "destChainID"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "swapoutSeq",
                                        "",
                                        "ERC20Gateway"
                                    ],
                                    [
                                        "peer",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\AnyCallApp.sol",
                                        "AnyCallApp"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20Gateway._swapout",
                                        "ERC20Gateway._anyCall"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "0d190f4f7c8ff7e350015eefac432ee6"
                            }
                        ],
                        "_anyExecute": [
                            {
                                "visibility": "internal",
                                "content": "function _anyExecute(uint256 fromChainID, bytes calldata data) internal override returns (bool success, bytes memory result){ (uint256 amount,, address receiver, ) = abi.decode( data, (uint256, address, address, uint256) ); amount = convertDecimal(fromChainID, amount); require(_swapin(amount, receiver));}",
                                "modifiers": [
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "fromChainID"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "data"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": "success"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "result"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20Gateway._swapin",
                                        "ERC20Gateway.convertDecimal"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "a9beb54fad13ca36c6bcb43e3bfb4925"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {
                        "LogAnySwapOut": {
                            "event": "LogAnySwapOut",
                            "content": "LogAnySwapOut(uint256 amount, address sender, address receiver, uint256 toChainID, uint256 swapoutSeq)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "ERC20Gateway.decimal": "5119aadee8d7cab7ef23ea27576766b3",
                "ERC20Gateway._anyCall": "455b45f2d3ec0c19a181336507b73202",
                "ERC20Gateway._swapout": "57776558709c28641306b3b97a1286b8",
                "ERC20Gateway.convertDecimal": "e35011a266c0b1540564e171ba3b1bef",
                "ERC20Gateway._swapin": "84bf27445a43585a850e4152f69a9f6f"
            },
            "md5": "879b0bc40a52c33db6a2c5fe721d9a78"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\AnyCall-V7\\interfaces\\Types.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\AnyCall-V7\\interfaces\\Types.sol",
            "filename": "Types.sol",
            "imported_contracts": {},
            "contracts": {},
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {
                "CallArgs": {
                    "content": "CallArgs{ uint128 toChainId; uint160 receiver; uint160 fallbackAddress; uint128 executionGasLimit; uint128 recursionGasLimit; bytes data;}"
                },
                "ExecArgs": {
                    "content": "ExecArgs{ uint128 fromChainId; uint160 sender; uint128 toChainId; uint160 receiver; uint160 fallbackAddress; uint128 callNonce; uint128 executionGasLimit; uint128 recursionGasLimit; bytes data;}"
                }
            },
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "31f20c42373626527041c49611e5cfa4"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\interfaces\\IERC20MessageGateway.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\interfaces\\IERC20MessageGateway.sol",
            "filename": "IERC20MessageGateway.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\AnyCall-V7\\interfaces\\Types.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "IERC20MessageGateway": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "token": [
                            {
                                "visibility": "external",
                                "content": "function token() external view returns (address);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "4e6a10a1a0a1f93bf71067ec3c05528f"
                            }
                        ],
                        "SwapOut_and_call": [
                            {
                                "visibility": "external",
                                "content": "function SwapOut_and_call(SwapOutArgs memory swapArgs, address callTo, bytes memory boundMessage) external payable returns (uint256 swapoutSeq);",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "SwapOutArgs memory",
                                        "name": "swapArgs"
                                    },
                                    {
                                        "type": "address",
                                        "name": "callTo"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "boundMessage"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": "swapoutSeq"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": true,
                                "md5": "ffa1f062410c2235a6d640e5d6b3ca17"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": [
                        [
                            "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\ERC20MessageGateway.sol",
                            "ERC20MessageGateway"
                        ]
                    ]
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "e59a0b81681451ffd018f8da8295749f"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\GatewayClients\\IERC20MessageGatewayReceiver.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\GatewayClients\\IERC20MessageGatewayReceiver.sol",
            "filename": "IERC20MessageGatewayReceiver.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\AnyCall-V7\\interfaces\\Types.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "IERC20_Message_Gateway_Receiver": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "handleMessage": [
                            {
                                "visibility": "external",
                                "content": "function handleMessage( SwapOutArgs memory swapargs, address boudnMessageSender, bytes memory boundMessage, uint256 nonce ) external returns (bool success);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "SwapOutArgs memory",
                                        "name": "swapargs"
                                    },
                                    {
                                        "type": "address",
                                        "name": "boudnMessageSender"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "boundMessage"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "nonce"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": "success"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "af5982c28a8c653f1d125181f725bda6"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": [
                        [
                            "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\GatewayClients\\ERC20MessageGatewayClient.sol",
                            "ERC20MessageGatewayClient"
                        ]
                    ]
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "898cd62cea19fd9d375c194ff7c002f8"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\ERC20MessageGateway.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\ERC20MessageGateway.sol",
            "filename": "ERC20MessageGateway.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\AnyCallApp.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\interfaces\\IDecimal.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\interfaces\\IERC20MessageGateway.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\GatewayClients\\IERC20MessageGatewayReceiver.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "ERC20MessageGateway": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": true,
                    "inherits": [
                        "is",
                        "IERC20MessageGateway",
                        "AnyCallApp"
                    ],
                    "state_variables": {
                        "token": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public token;"
                        },
                        "decimals": {
                            "type": "mapping(uint256 => uint8)",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(uint256 => uint8) public decimals;"
                        },
                        "swapoutSeq": {
                            "type": "uint256",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256 public swapoutSeq;"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (address anyCallProxy, uint256 flag, address token_) AnyCallApp(anyCallProxy, flag){ setAdmin(msg.sender); token = token_;}",
                                "modifiers": [
                                    "AnyCallApp(anyCallProxy, flag)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "anyCallProxy"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "flag"
                                    },
                                    {
                                        "type": "address",
                                        "name": "token_"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "token",
                                        "",
                                        "ERC20MessageGateway"
                                    ],
                                    [
                                        "flag",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\AnyCallApp.sol",
                                        "AnyCallApp"
                                    ],
                                    [
                                        "anyCallProxy",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\AnyCallApp.sol",
                                        "AnyCallApp"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "token",
                                        "",
                                        "ERC20MessageGateway"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "be62c06f5c11242b5defe71cedd149d6"
                            }
                        ],
                        "_swapout": [
                            {
                                "visibility": "internal",
                                "content": "function _swapout(uint256 amount, address sender) internal virtual returns (bool);",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "address",
                                        "name": "sender"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "57776558709c28641306b3b97a1286b8"
                            }
                        ],
                        "_swapin": [
                            {
                                "visibility": "internal",
                                "content": "function _swapin(uint256 amount, address receiver) internal virtual returns (bool);",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "address",
                                        "name": "receiver"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "84bf27445a43585a850e4152f69a9f6f"
                            }
                        ],
                        "setDecimals": [
                            {
                                "visibility": "external",
                                "content": "function setDecimals(uint256[] memory chainIDs, uint8[] memory decimals_) external onlyAdmin{ for (uint i = 0; i < chainIDs.length; i++){ decimals[chainIDs[i]] = decimals_[i];}}",
                                "modifiers": [
                                    "onlyAdmin"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256[] memory",
                                        "name": "chainIDs"
                                    },
                                    {
                                        "type": "uint8[] memory",
                                        "name": "decimals_"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "decimals",
                                        "",
                                        "ERC20MessageGateway"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "decimals",
                                        "",
                                        "ERC20MessageGateway"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20MessageGateway.onlyAdmin"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "ffcd56506442bf472023c942299df09c"
                            }
                        ],
                        "decimal": [
                            {
                                "visibility": "external",
                                "content": "function decimal(uint256 chainID) external view returns(uint8){ return (decimals[chainID] > 0 ? decimals[chainID] : IDecimal(token).decimals());}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "chainID"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint8",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "token",
                                        "",
                                        "ERC20MessageGateway"
                                    ],
                                    [
                                        "decimals",
                                        "",
                                        "ERC20MessageGateway"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20MessageGateway.IDecimal"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "5119aadee8d7cab7ef23ea27576766b3"
                            }
                        ],
                        "convertDecimal": [
                            {
                                "visibility": "public",
                                "content": "function convertDecimal(uint256 fromChain, uint256 amount) public view returns (uint256){ uint8 d_0 = this.decimal(fromChain); uint8 d_1 = IDecimal(token).decimals(); if (d_0 > d_1){ for (uint8 i = 0; i < (d_0 - d_1); i++){ amount = amount / 10;}} else{ for (uint8 i = 0; i < (d_1 - d_0); i++){ amount = amount * 10;}} return amount;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "fromChain"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "token",
                                        "",
                                        "ERC20MessageGateway"
                                    ],
                                    [
                                        "decimals",
                                        "",
                                        "ERC20MessageGateway"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20MessageGateway.decimal",
                                        "ERC20MessageGateway.IDecimal"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "e35011a266c0b1540564e171ba3b1bef"
                            }
                        ],
                        "SwapOut_and_call": [
                            {
                                "visibility": "external",
                                "content": "function SwapOut_and_call(SwapOutArgs memory swapArgs, address callTo, bytes memory boundMessage) external payable returns (uint256 swapoutSeq){ require(_swapout(swapArgs.amount, msg.sender)); swapoutSeq++; bytes memory data = abi.encode(swapArgs, msg.sender, callTo, boundMessage, swapoutSeq); _anyCall(peer[swapArgs.toChainID], data, address(0), swapArgs.toChainID); emit LogAnySwapOut(swapArgs.amount, msg.sender, swapArgs.receiver, swapArgs.toChainID, swapoutSeq); return swapoutSeq;}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "SwapOutArgs memory",
                                        "name": "swapArgs"
                                    },
                                    {
                                        "type": "address",
                                        "name": "callTo"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "boundMessage"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": "swapoutSeq"
                                    }
                                ],
                                "reads": [
                                    [
                                        "swapoutSeq",
                                        "",
                                        "ERC20MessageGateway"
                                    ],
                                    [
                                        "peer",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\AnyCallApp.sol",
                                        "AnyCallApp"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20MessageGateway._anyCall",
                                        "ERC20MessageGateway._swapout"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "17546a2448a0e80cdd53e27cf22375d2"
                            }
                        ],
                        "_anyExecute": [
                            {
                                "visibility": "internal",
                                "content": "function _anyExecute(uint256 fromChainID, bytes calldata data) internal override returns (bool success, bytes memory result){ (SwapOutArgs memory swapArgs, address msgSender, address messageReceiver, bytes memory boundMessage, uint256 nonce) = abi.decode( data, (SwapOutArgs, address, address, bytes, uint256) ); swapArgs.amount = convertDecimal(fromChainID, swapArgs.amount); bool swapSucc = _swapin(swapArgs.amount, swapArgs.receiver); require(swapSucc, \"swap failed\"); bool callSucc = IERC20_Message_Gateway_Receiver(messageReceiver).handleMessage(swapArgs, msgSender, boundMessage, nonce); require(callSucc, \"call failed\"); return (true, \"\");}",
                                "modifiers": [
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "fromChainID"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "data"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": "success"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "result"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20MessageGateway._swapin",
                                        "ERC20MessageGateway.convertDecimal",
                                        "ERC20MessageGateway.IERC20_Message_Gateway_Receiver"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "c090c4d2b688f24b6116ff88a7c24ede"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {
                        "LogAnySwapOut": {
                            "event": "LogAnySwapOut",
                            "content": "LogAnySwapOut(uint256 amount, address sender, address receiver, uint256 toChainID, uint256 swapoutSeq)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "ERC20MessageGateway.decimal": "5119aadee8d7cab7ef23ea27576766b3",
                "ERC20MessageGateway._swapout": "57776558709c28641306b3b97a1286b8",
                "ERC20MessageGateway._anyCall": "455b45f2d3ec0c19a181336507b73202",
                "ERC20MessageGateway._swapin": "84bf27445a43585a850e4152f69a9f6f",
                "ERC20MessageGateway.convertDecimal": "e35011a266c0b1540564e171ba3b1bef"
            },
            "md5": "5f64fd8fe26e563527541c2ef814c8cd"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\interfaces\\IERC677Gateway.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\interfaces\\IERC677Gateway.sol",
            "filename": "IERC677Gateway.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\AnyCall-V7\\interfaces\\Types.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "IERC677Gateway": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "token": [
                            {
                                "visibility": "external",
                                "content": "function token() external view returns (address);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "4e6a10a1a0a1f93bf71067ec3c05528f"
                            }
                        ],
                        "SwapOut_and_call": [
                            {
                                "visibility": "external",
                                "content": "function SwapOut_and_call(SwapOutArgs memory swapArgs, bytes memory boundMessage) external payable returns (uint256 swapoutSeq);",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "SwapOutArgs memory",
                                        "name": "swapArgs"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "boundMessage"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": "swapoutSeq"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": true,
                                "md5": "f1dc6c1656861afb16030d85095f17cb"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": [
                        [
                            "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\ERC677Gateway.sol",
                            "ERC677Gateway"
                        ]
                    ]
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "fb1d1e02602e1da05708c1dbf14b67fd"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\ERC677Gateway.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\ERC677Gateway.sol",
            "filename": "ERC677Gateway.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\AnyCallApp.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\interfaces\\IDecimal.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\interfaces\\IERC677Gateway.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "IERC677": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "transferAndCall": [
                            {
                                "visibility": "external",
                                "content": "function transferAndCall(address receiver, uint amount, bytes memory data) external returns (bool success);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "receiver"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "data"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": "success"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "7e910949d6a729171a5b6ddc5be7969e"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                },
                "ERC677Gateway": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": true,
                    "inherits": [
                        "is",
                        "IERC677Gateway",
                        "AnyCallApp"
                    ],
                    "state_variables": {
                        "token": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public token;"
                        },
                        "decimals": {
                            "type": "mapping(uint256 => uint8)",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(uint256 => uint8) public decimals;"
                        },
                        "swapoutSeq": {
                            "type": "uint256",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256 public swapoutSeq;"
                        },
                        "sender": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public sender;"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (address anyCallProxy, uint256 flag, address token_) AnyCallApp(anyCallProxy, flag){ setAdmin(msg.sender); token = token_;}",
                                "modifiers": [
                                    "AnyCallApp(anyCallProxy, flag)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "anyCallProxy"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "flag"
                                    },
                                    {
                                        "type": "address",
                                        "name": "token_"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "token",
                                        "",
                                        "ERC677Gateway"
                                    ],
                                    [
                                        "sender",
                                        "",
                                        "ERC677Gateway"
                                    ],
                                    [
                                        "flag",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\AnyCallApp.sol",
                                        "AnyCallApp"
                                    ],
                                    [
                                        "anyCallProxy",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\AnyCallApp.sol",
                                        "AnyCallApp"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "token",
                                        "",
                                        "ERC677Gateway"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "be62c06f5c11242b5defe71cedd149d6"
                            }
                        ],
                        "_swapout": [
                            {
                                "visibility": "internal",
                                "content": "function _swapout(uint256 amount, address sender) internal virtual returns (bool);",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "address",
                                        "name": "sender"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "57776558709c28641306b3b97a1286b8"
                            }
                        ],
                        "_swapin": [
                            {
                                "visibility": "internal",
                                "content": "function _swapin(uint256 amount, address receiver) internal virtual returns (bool);",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "address",
                                        "name": "receiver"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "84bf27445a43585a850e4152f69a9f6f"
                            }
                        ],
                        "setDecimals": [
                            {
                                "visibility": "external",
                                "content": "function setDecimals(uint256[] memory chainIDs, uint8[] memory decimals_) external onlyAdmin{ for (uint i = 0; i < chainIDs.length; i++){ decimals[chainIDs[i]] = decimals_[i];}}",
                                "modifiers": [
                                    "onlyAdmin"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256[] memory",
                                        "name": "chainIDs"
                                    },
                                    {
                                        "type": "uint8[] memory",
                                        "name": "decimals_"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "decimals",
                                        "",
                                        "ERC677Gateway"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "decimals",
                                        "",
                                        "ERC677Gateway"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC677Gateway.onlyAdmin"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "ffcd56506442bf472023c942299df09c"
                            }
                        ],
                        "decimal": [
                            {
                                "visibility": "external",
                                "content": "function decimal(uint256 chainID) external view returns(uint8){ return (decimals[chainID] > 0 ? decimals[chainID] : IDecimal(token).decimals());}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "chainID"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint8",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "token",
                                        "",
                                        "ERC677Gateway"
                                    ],
                                    [
                                        "decimals",
                                        "",
                                        "ERC677Gateway"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC677Gateway.IDecimal"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "5119aadee8d7cab7ef23ea27576766b3"
                            }
                        ],
                        "convertDecimal": [
                            {
                                "visibility": "public",
                                "content": "function convertDecimal(uint256 fromChain, uint256 amount) public view returns (uint256){ uint8 d_0 = this.decimal(fromChain); uint8 d_1 = IDecimal(token).decimals(); if (d_0 > d_1){ for (uint8 i = 0; i < (d_0 - d_1); i++){ amount = amount / 10;}} else{ for (uint8 i = 0; i < (d_1 - d_0); i++){ amount = amount * 10;}} return amount;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "fromChain"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "token",
                                        "",
                                        "ERC677Gateway"
                                    ],
                                    [
                                        "decimals",
                                        "",
                                        "ERC677Gateway"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC677Gateway.decimal",
                                        "ERC677Gateway.IDecimal"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "e35011a266c0b1540564e171ba3b1bef"
                            }
                        ],
                        "SwapOut_and_call": [
                            {
                                "visibility": "external",
                                "content": "function SwapOut_and_call(SwapOutArgs memory swapArgs, bytes memory boundMessage) external payable returns (uint256 swapoutSeq){ require(_swapout(swapArgs.amount, msg.sender)); swapoutSeq++; bytes memory data = abi.encode(swapArgs, msg.sender, boundMessage, swapoutSeq); _anyCall(peer[swapArgs.toChainID], data, address(0), swapArgs.toChainID); emit LogAnySwapOut(swapArgs.amount, msg.sender, swapArgs.receiver, swapArgs.toChainID, swapoutSeq); return swapoutSeq;}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "SwapOutArgs memory",
                                        "name": "swapArgs"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "boundMessage"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": "swapoutSeq"
                                    }
                                ],
                                "reads": [
                                    [
                                        "swapoutSeq",
                                        "",
                                        "ERC677Gateway"
                                    ],
                                    [
                                        "sender",
                                        "",
                                        "ERC677Gateway"
                                    ],
                                    [
                                        "peer",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\AnyCallApp.sol",
                                        "AnyCallApp"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC677Gateway._swapout",
                                        "ERC677Gateway._anyCall"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "210ae58992b97a8d49b97a1307aa39f3"
                            }
                        ],
                        "_anyExecute": [
                            {
                                "visibility": "internal",
                                "content": "function _anyExecute(uint256 fromChainID, bytes calldata data) internal override returns (bool success, bytes memory result){ (SwapOutArgs memory swapArgs, address sender_, bytes memory boundMessage, uint256 nonce) = abi.decode( data, (SwapOutArgs, address, bytes, uint256) ); swapArgs.amount = convertDecimal(fromChainID, swapArgs.amount); bool swapSucc = _swapin(swapArgs.amount, address(this)); require(swapSucc, \"swap failed\"); sender = sender_; bool callSucc = IERC677(this.token()).transferAndCall(swapArgs.receiver, swapArgs.amount, boundMessage); require(callSucc, \"call failed\"); sender = address(0); return (true, \"\");}",
                                "modifiers": [
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "fromChainID"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "data"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": "success"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "result"
                                    }
                                ],
                                "reads": [
                                    [
                                        "token",
                                        "",
                                        "ERC677Gateway"
                                    ],
                                    [
                                        "sender",
                                        "",
                                        "ERC677Gateway"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "sender",
                                        "",
                                        "ERC677Gateway"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC677Gateway.convertDecimal",
                                        "ERC677Gateway.token",
                                        "ERC677Gateway._swapin"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "eb2116bdd5981720dbb5b3a501ead2ec"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {
                        "LogAnySwapOut": {
                            "event": "LogAnySwapOut",
                            "content": "LogAnySwapOut(uint256 amount, address sender, address receiver, uint256 toChainID, uint256 swapoutSeq)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "ERC677Gateway.decimal": "5119aadee8d7cab7ef23ea27576766b3",
                "ERC677Gateway._swapout": "57776558709c28641306b3b97a1286b8",
                "ERC677Gateway._anyCall": "455b45f2d3ec0c19a181336507b73202",
                "ERC677Gateway.convertDecimal": "e35011a266c0b1540564e171ba3b1bef",
                "ERC677Gateway._swapin": "84bf27445a43585a850e4152f69a9f6f",
                "ERC677Gateway.token": "4e6a10a1a0a1f93bf71067ec3c05528f"
            },
            "md5": "189600b5e8a809127d12f3cda3beca82"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\interfaces\\IERC721.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\interfaces\\IERC721.sol",
            "filename": "IERC721.sol",
            "imported_contracts": {},
            "contracts": {
                "IERC721": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "balanceOf": [
                            {
                                "visibility": "external",
                                "content": "function balanceOf(address owner) external view returns (uint256 balance);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "owner"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": "balance"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "d12e6cdc3da8a64b260f42cff4c793ad"
                            }
                        ],
                        "ownerOf": [
                            {
                                "visibility": "external",
                                "content": "function ownerOf(uint256 tokenId) external view returns (address owner);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "tokenId"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": "owner"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "f80fb9d69b044eb42fe9b85553ad8319"
                            }
                        ],
                        "safeTransferFrom": [
                            {
                                "visibility": "external",
                                "content": "function safeTransferFrom( address from, address to, uint256 tokenId, bytes calldata data ) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "tokenId"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "data"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "49abfd659a7c3be847bc949a51acbf66"
                            },
                            {
                                "visibility": "external",
                                "content": "function safeTransferFrom( address from, address to, uint256 tokenId ) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "tokenId"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "14e8f909096781c79932ba1689e55218"
                            }
                        ],
                        "transferFrom": [
                            {
                                "visibility": "external",
                                "content": "function transferFrom( address from, address to, uint256 tokenId ) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "tokenId"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "005f9cd7170a885e68ceb27fc318d74c"
                            }
                        ],
                        "approve": [
                            {
                                "visibility": "external",
                                "content": "function approve(address to, uint256 tokenId) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "tokenId"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "67a428b6cf2ae96c7314bcacd05faf93"
                            }
                        ],
                        "setApprovalForAll": [
                            {
                                "visibility": "external",
                                "content": "function setApprovalForAll(address operator, bool _approved) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "operator"
                                    },
                                    {
                                        "type": "bool",
                                        "name": "_approved"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "85c837818fcb6f5a408a3e5f2649fe7f"
                            }
                        ],
                        "getApproved": [
                            {
                                "visibility": "external",
                                "content": "function getApproved(uint256 tokenId) external view returns (address operator);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "tokenId"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": "operator"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c7ac16d645f4bfa022398183af846288"
                            }
                        ],
                        "isApprovedForAll": [
                            {
                                "visibility": "external",
                                "content": "function isApprovedForAll(address owner, address operator) external view returns (bool);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "owner"
                                    },
                                    {
                                        "type": "address",
                                        "name": "operator"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "1970328c5e6485c588fb5fa5babfa068"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {
                        "Transfer": {
                            "event": "Transfer",
                            "content": "Transfer(address indexed from, address indexed to, uint256 indexed tokenId)"
                        },
                        "Approval": {
                            "event": "Approval",
                            "content": "Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)"
                        },
                        "ApprovalForAll": {
                            "event": "ApprovalForAll",
                            "content": "ApprovalForAll(address indexed owner, address indexed operator, bool approved)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": [
                        [
                            "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\ERC721.sol",
                            "ERC721"
                        ]
                    ]
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "a2b4ff3b9d09946a428f37c12f664097"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\ERC721.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\ERC721.sol",
            "filename": "ERC721.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\interfaces\\IERC721.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "ERC721": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "IERC721"
                    ],
                    "state_variables": {
                        "_name": {
                            "type": "string",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "string private _name;"
                        },
                        "_symbol": {
                            "type": "string",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "string private _symbol;"
                        },
                        "_owners": {
                            "type": "mapping(uint256 => address)",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(uint256 => address) private _owners;"
                        },
                        "_balances": {
                            "type": "mapping(address => uint256)",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(address => uint256) private _balances;"
                        },
                        "_tokenApprovals": {
                            "type": "mapping(uint256 => address)",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(uint256 => address) private _tokenApprovals;"
                        },
                        "_operatorApprovals": {
                            "type": "mapping(address => mapping(address => bool))",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(address => mapping(address => bool)) private _operatorApprovals;"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (string memory name_, string memory symbol_){ _name = name_; _symbol = symbol_;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "string memory",
                                        "name": "name_"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "symbol_"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_name",
                                        "",
                                        "ERC721"
                                    ],
                                    [
                                        "_symbol",
                                        "",
                                        "ERC721"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_name",
                                        "",
                                        "ERC721"
                                    ],
                                    [
                                        "_symbol",
                                        "",
                                        "ERC721"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "922315639585b649e96671e76c175ffd"
                            }
                        ],
                        "balanceOf": [
                            {
                                "visibility": "public",
                                "content": "function balanceOf(address owner) public view virtual override returns (uint256){ require(owner != address(0), \"ERC721: address zero is not a valid owner\"); return _balances[owner];}",
                                "modifiers": [
                                    "view",
                                    "virtual",
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "owner"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_balances",
                                        "",
                                        "ERC721"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "253900df82792f4d6919e4d952f48368"
                            }
                        ],
                        "ownerOf": [
                            {
                                "visibility": "public",
                                "content": "function ownerOf(uint256 tokenId) public view virtual override returns (address){ address owner = _owners[tokenId]; require(owner != address(0), \"ERC721: invalid token ID\"); return owner;}",
                                "modifiers": [
                                    "view",
                                    "virtual",
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "tokenId"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_owners",
                                        "",
                                        "ERC721"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "bd319e06551706fd400f52f97e40ed8b"
                            }
                        ],
                        "name": [
                            {
                                "visibility": "public",
                                "content": "function name() public view virtual returns (string memory){ return _name;}",
                                "modifiers": [
                                    "view",
                                    "virtual"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "string memory",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_name",
                                        "",
                                        "ERC721"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "0033c399007643fc5848cdbcd89241ca"
                            }
                        ],
                        "symbol": [
                            {
                                "visibility": "public",
                                "content": "function symbol() public view virtual returns (string memory){ return _symbol;}",
                                "modifiers": [
                                    "view",
                                    "virtual"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "string memory",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_symbol",
                                        "",
                                        "ERC721"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "bf0c51dd93b1ed9776bae07f49802c59"
                            }
                        ],
                        "approve": [
                            {
                                "visibility": "public",
                                "content": "function approve(address to, uint256 tokenId) public virtual override{ address owner = ERC721.ownerOf(tokenId); require(to != owner, \"ERC721: approval to current owner\"); require( msg.sender == owner || isApprovedForAll(owner, msg.sender), \"ERC721: approve caller is not token owner nor approved for all\" ); _approve(to, tokenId);}",
                                "modifiers": [
                                    "virtual",
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "tokenId"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC721.isApprovedForAll",
                                        "ERC721._approve",
                                        "ERC721.ownerOf"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "8bb341109692d5f1f79f22606d0bb065"
                            }
                        ],
                        "getApproved": [
                            {
                                "visibility": "public",
                                "content": "function getApproved(uint256 tokenId) public view virtual override returns (address){ _requireMinted(tokenId); return _tokenApprovals[tokenId];}",
                                "modifiers": [
                                    "view",
                                    "virtual",
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "tokenId"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_tokenApprovals",
                                        "",
                                        "ERC721"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC721._requireMinted"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "b11defea9783e8b9b02b544125e904dd"
                            }
                        ],
                        "setApprovalForAll": [
                            {
                                "visibility": "public",
                                "content": "function setApprovalForAll(address operator, bool approved) public virtual override{ _setApprovalForAll(msg.sender, operator, approved);}",
                                "modifiers": [
                                    "virtual",
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "operator"
                                    },
                                    {
                                        "type": "bool",
                                        "name": "approved"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC721._setApprovalForAll"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "2b11be2bcd5273bf1fdee9e36d1cf692"
                            }
                        ],
                        "isApprovedForAll": [
                            {
                                "visibility": "public",
                                "content": "function isApprovedForAll(address owner, address operator) public view virtual override returns (bool){ return _operatorApprovals[owner][operator];}",
                                "modifiers": [
                                    "view",
                                    "virtual",
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "owner"
                                    },
                                    {
                                        "type": "address",
                                        "name": "operator"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_operatorApprovals",
                                        "",
                                        "ERC721"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "4d9911519277696013119d7750e25798"
                            }
                        ],
                        "transferFrom": [
                            {
                                "visibility": "public",
                                "content": "function transferFrom( address from, address to, uint256 tokenId ) public virtual override{ require(_isApprovedOrOwner(msg.sender, tokenId), \"ERC721: caller is not token owner nor approved\"); _transfer(from, to, tokenId);}",
                                "modifiers": [
                                    "virtual",
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "tokenId"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC721._isApprovedOrOwner",
                                        "ERC721._transfer"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "c410c7111fe464e561eac3a62d52721f"
                            }
                        ],
                        "safeTransferFrom": [
                            {
                                "visibility": "public",
                                "content": "function safeTransferFrom( address from, address to, uint256 tokenId ) public virtual override{ safeTransferFrom(from, to, tokenId, \"\");}",
                                "modifiers": [
                                    "virtual",
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "tokenId"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC721.safeTransferFrom",
                                        "ERC721._safeTransfer",
                                        "ERC721._isApprovedOrOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "280d508843f7758eca8ffd03a31f0cd9"
                            },
                            {
                                "visibility": "public",
                                "content": "function safeTransferFrom( address from, address to, uint256 tokenId, bytes memory data ) public virtual override{ require(_isApprovedOrOwner(msg.sender, tokenId), \"ERC721: caller is not token owner nor approved\"); _safeTransfer(from, to, tokenId, data);}",
                                "modifiers": [
                                    "virtual",
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "tokenId"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "data"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC721.safeTransferFrom",
                                        "ERC721._safeTransfer",
                                        "ERC721._isApprovedOrOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "ab9b2635f350b124f7c2ec4e4c65cbdb"
                            }
                        ],
                        "_safeTransfer": [
                            {
                                "visibility": "internal",
                                "content": "function _safeTransfer( address from, address to, uint256 tokenId, bytes memory data ) internal virtual{ _transfer(from, to, tokenId);}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "tokenId"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "data"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC721._transfer"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "3ec95be12a534d0fa65a562dd960dc5f"
                            }
                        ],
                        "_exists": [
                            {
                                "visibility": "internal",
                                "content": "function _exists(uint256 tokenId) internal view virtual returns (bool){ return _owners[tokenId] != address(0);}",
                                "modifiers": [
                                    "view",
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "tokenId"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_owners",
                                        "",
                                        "ERC721"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c7863148776997b6b3b4d894c584fa72"
                            }
                        ],
                        "_isApprovedOrOwner": [
                            {
                                "visibility": "internal",
                                "content": "function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool){ address owner = ERC721.ownerOf(tokenId); return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);}",
                                "modifiers": [
                                    "view",
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "tokenId"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC721.getApproved",
                                        "ERC721.isApprovedForAll",
                                        "ERC721.ownerOf"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "f64b04b1a7e1a6a144faab3227023ad7"
                            }
                        ],
                        "_safeMint": [
                            {
                                "visibility": "internal",
                                "content": "function _safeMint(address to, uint256 tokenId) internal virtual{ _safeMint(to, tokenId, \"\");}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "tokenId"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC721._safeMint",
                                        "ERC721._mint"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "9e319cf997b0008208fa31d822507190"
                            },
                            {
                                "visibility": "internal",
                                "content": "function _safeMint( address to, uint256 tokenId, bytes memory data ) internal virtual{ _mint(to, tokenId);}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "tokenId"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "data"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC721._safeMint",
                                        "ERC721._mint"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "49d62af8ca64869e584907b5df0cafbb"
                            }
                        ],
                        "_mint": [
                            {
                                "visibility": "internal",
                                "content": "function _mint(address to, uint256 tokenId) internal virtual{ require(to != address(0), \"ERC721: mint to the zero address\"); require(!_exists(tokenId), \"ERC721: token already minted\"); _balances[to] += 1; _owners[tokenId] = to; emit Transfer(address(0), to, tokenId);}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "tokenId"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_owners",
                                        "",
                                        "ERC721"
                                    ],
                                    [
                                        "_balances",
                                        "",
                                        "ERC721"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_owners",
                                        "",
                                        "ERC721"
                                    ],
                                    [
                                        "_balances",
                                        "",
                                        "ERC721"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC721._exists",
                                        "ERC721.Transfer"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "dc29d6f645824d22852053431fc95cb6"
                            }
                        ],
                        "_burn": [
                            {
                                "visibility": "internal",
                                "content": "function _burn(uint256 tokenId) internal virtual{ address owner = ERC721.ownerOf(tokenId); _approve(address(0), tokenId); _balances[owner] -= 1; delete _owners[tokenId]; emit Transfer(owner, address(0), tokenId);}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "tokenId"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_owners",
                                        "",
                                        "ERC721"
                                    ],
                                    [
                                        "_balances",
                                        "",
                                        "ERC721"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_balances",
                                        "",
                                        "ERC721"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC721.ownerOf",
                                        "ERC721._approve",
                                        "ERC721.Transfer"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "aa45565e8cf1ae5c1a26b3161bd2d2f9"
                            }
                        ],
                        "_transfer": [
                            {
                                "visibility": "internal",
                                "content": "function _transfer( address from, address to, uint256 tokenId ) internal virtual{ require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\"); require(to != address(0), \"ERC721: transfer to the zero address\"); _approve(address(0), tokenId); _balances[from] -= 1; _balances[to] += 1; _owners[tokenId] = to; emit Transfer(from, to, tokenId);}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "tokenId"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_owners",
                                        "",
                                        "ERC721"
                                    ],
                                    [
                                        "_balances",
                                        "",
                                        "ERC721"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_owners",
                                        "",
                                        "ERC721"
                                    ],
                                    [
                                        "_balances",
                                        "",
                                        "ERC721"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC721.ownerOf",
                                        "ERC721._approve",
                                        "ERC721.Transfer"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "6ff7178b7489f7f732b1f8ad1cffd448"
                            }
                        ],
                        "_approve": [
                            {
                                "visibility": "internal",
                                "content": "function _approve(address to, uint256 tokenId) internal virtual{ _tokenApprovals[tokenId] = to; emit Approval(ERC721.ownerOf(tokenId), to, tokenId);}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "tokenId"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_tokenApprovals",
                                        "",
                                        "ERC721"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_tokenApprovals",
                                        "",
                                        "ERC721"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC721.Approval",
                                        "ERC721.ownerOf"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "5cb3a444878b257427050a735830016b"
                            }
                        ],
                        "_setApprovalForAll": [
                            {
                                "visibility": "internal",
                                "content": "function _setApprovalForAll( address owner, address operator, bool approved ) internal virtual{ require(owner != operator, \"ERC721: approve to caller\"); _operatorApprovals[owner][operator] = approved; emit ApprovalForAll(owner, operator, approved);}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "owner"
                                    },
                                    {
                                        "type": "address",
                                        "name": "operator"
                                    },
                                    {
                                        "type": "bool",
                                        "name": "approved"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_operatorApprovals",
                                        "",
                                        "ERC721"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_operatorApprovals",
                                        "",
                                        "ERC721"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC721.ApprovalForAll"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "b2962ad594da0858dbbede47f72aec67"
                            }
                        ],
                        "_requireMinted": [
                            {
                                "visibility": "internal",
                                "content": "function _requireMinted(uint256 tokenId) internal view virtual{ require(_exists(tokenId), \"ERC721: invalid token ID\");}",
                                "modifiers": [
                                    "view",
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "tokenId"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC721._exists"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "446ce8de61bfd72ec33a250b44401794"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "ERC721.ownerOf": "bd319e06551706fd400f52f97e40ed8b",
                "ERC721._approve": "5cb3a444878b257427050a735830016b",
                "ERC721.isApprovedForAll": "4d9911519277696013119d7750e25798",
                "ERC721._requireMinted": "446ce8de61bfd72ec33a250b44401794",
                "ERC721._setApprovalForAll": "b2962ad594da0858dbbede47f72aec67",
                "ERC721._isApprovedOrOwner": "f64b04b1a7e1a6a144faab3227023ad7",
                "ERC721._transfer": "6ff7178b7489f7f732b1f8ad1cffd448",
                "ERC721.safeTransferFrom": "280d508843f7758eca8ffd03a31f0cd9",
                "ERC721._safeTransfer": "3ec95be12a534d0fa65a562dd960dc5f",
                "ERC721.getApproved": "b11defea9783e8b9b02b544125e904dd",
                "ERC721._safeMint": "9e319cf997b0008208fa31d822507190",
                "ERC721._mint": "dc29d6f645824d22852053431fc95cb6",
                "ERC721._exists": "c7863148776997b6b3b4d894c584fa72"
            },
            "md5": "36d178d668362204fd2005b2506dce72"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\interfaces\\IERC721Gateway.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\interfaces\\IERC721Gateway.sol",
            "filename": "IERC721Gateway.sol",
            "imported_contracts": {},
            "contracts": {
                "IERC721Gateway": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "token": [
                            {
                                "visibility": "external",
                                "content": "function token() external view returns (address);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "4e6a10a1a0a1f93bf71067ec3c05528f"
                            }
                        ],
                        "Swapout_no_fallback": [
                            {
                                "visibility": "external",
                                "content": "function Swapout_no_fallback(uint256 tokenId, address receiver, uint256 toChainID) external payable returns (uint256 swapoutSeq);",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "tokenId"
                                    },
                                    {
                                        "type": "address",
                                        "name": "receiver"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "toChainID"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": "swapoutSeq"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": true,
                                "md5": "930ae20b78091f02a7d14ac75872dc34"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": [
                        [
                            "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\ERC721Gateway.sol",
                            "ERC721Gateway"
                        ],
                        [
                            "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\interfaces\\extensions\\IERC721GatewayFallback.sol",
                            "IERC721GatewayFallback"
                        ]
                    ]
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "51464cab02f6e669cf7f5f1f79081c9d"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\ERC721Gateway.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\ERC721Gateway.sol",
            "filename": "ERC721Gateway.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\AnyCallApp.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\interfaces\\IERC721Gateway.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "ERC721Gateway": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": true,
                    "inherits": [
                        "is",
                        "IERC721Gateway",
                        "AnyCallApp"
                    ],
                    "state_variables": {
                        "token": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public token;"
                        },
                        "swapoutSeq": {
                            "type": "uint256",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256 public swapoutSeq;"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (address anyCallProxy, uint256 flag, address token_) AnyCallApp(anyCallProxy, flag){ setAdmin(msg.sender); token = token_;}",
                                "modifiers": [
                                    "AnyCallApp(anyCallProxy, flag)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "anyCallProxy"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "flag"
                                    },
                                    {
                                        "type": "address",
                                        "name": "token_"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "token",
                                        "",
                                        "ERC721Gateway"
                                    ],
                                    [
                                        "flag",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\AnyCallApp.sol",
                                        "AnyCallApp"
                                    ],
                                    [
                                        "anyCallProxy",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\AnyCallApp.sol",
                                        "AnyCallApp"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "token",
                                        "",
                                        "ERC721Gateway"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "be62c06f5c11242b5defe71cedd149d6"
                            }
                        ],
                        "_swapout": [
                            {
                                "visibility": "internal",
                                "content": "function _swapout(uint256 tokenId) internal virtual returns (bool, bytes memory);",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "tokenId"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "e5926a5b7928885a053a7f1c6b2edc62"
                            }
                        ],
                        "_swapin": [
                            {
                                "visibility": "internal",
                                "content": "function _swapin(uint256 tokenId, address receiver, bytes memory extraMsg) internal virtual returns (bool);",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "tokenId"
                                    },
                                    {
                                        "type": "address",
                                        "name": "receiver"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "extraMsg"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "95a1cd3d5e1c6337fa6ce82d32c7856e"
                            }
                        ],
                        "Swapout_no_fallback": [
                            {
                                "visibility": "external",
                                "content": "function Swapout_no_fallback(uint256 tokenId, address receiver, uint256 destChainID) external payable returns (uint256){ (bool ok, bytes memory extraMsg) = _swapout(tokenId); require(ok); swapoutSeq++; bytes memory data = abi.encode(tokenId, msg.sender, receiver, swapoutSeq, extraMsg); _anyCall(peer[destChainID], data, address(0), destChainID); emit LogAnySwapOut(tokenId, msg.sender, receiver, destChainID, swapoutSeq); return swapoutSeq;}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "tokenId"
                                    },
                                    {
                                        "type": "address",
                                        "name": "receiver"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "destChainID"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "swapoutSeq",
                                        "",
                                        "ERC721Gateway"
                                    ],
                                    [
                                        "peer",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\AnyCallApp.sol",
                                        "AnyCallApp"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "token",
                                        "",
                                        "ERC721Gateway"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC721Gateway._anyCall",
                                        "ERC721Gateway._swapout"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "cd3f0fc489e2d6269197fa7da29d78cd"
                            }
                        ],
                        "_anyExecute": [
                            {
                                "visibility": "internal",
                                "content": "function _anyExecute(uint256 fromChainID, bytes calldata data) internal override returns (bool success, bytes memory result){ (uint256 tokenId,, address receiver,, bytes memory extraMsg) = abi.decode( data, (uint256, address, address, uint256, bytes) ); require(_swapin(tokenId, receiver, extraMsg));}",
                                "modifiers": [
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "fromChainID"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "data"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": "success"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "result"
                                    }
                                ],
                                "reads": [],
                                "writes": [
                                    [
                                        "token",
                                        "",
                                        "ERC721Gateway"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC721Gateway._swapin"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "02ca61d106096b98b4a37ea28a38f671"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {
                        "LogAnySwapOut": {
                            "event": "LogAnySwapOut",
                            "content": "LogAnySwapOut(uint256 tokenId, address sender, address receiver, uint256 toChainID, uint256 swapoutSeq)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "ERC721Gateway._anyCall": "455b45f2d3ec0c19a181336507b73202",
                "ERC721Gateway._swapout": "e5926a5b7928885a053a7f1c6b2edc62",
                "ERC721Gateway._swapin": "95a1cd3d5e1c6337fa6ce82d32c7856e"
            },
            "md5": "9055e5a762410b8ccd9fa08e410d370a"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\Migrations.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\Migrations.sol",
            "filename": "Migrations.sol",
            "imported_contracts": {},
            "contracts": {
                "Migrations": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {
                        "owner": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "msg.sender",
                            "content": "address public owner = msg.sender;"
                        },
                        "last_completed_migration": {
                            "type": "uint",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint public last_completed_migration;"
                        }
                    },
                    "functions": {
                        "setCompleted": [
                            {
                                "visibility": "public",
                                "content": "function setCompleted(uint completed) public restricted{ last_completed_migration = completed;}",
                                "modifiers": [
                                    "restricted"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "completed"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "last_completed_migration",
                                        "",
                                        "Migrations"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "last_completed_migration",
                                        "",
                                        "Migrations"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Migrations.restricted"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "d0731d38953dc52e117f1d10c1585a1f"
                            }
                        ]
                    },
                    "modifiers": {
                        "restricted": {
                            "parameters": [],
                            "content": "modifier restricted(){ require( msg.sender == owner, \"This function is restricted to the contract 's owner\" ); _;}",
                            "reads": [
                                [
                                    "owner",
                                    "",
                                    "Migrations"
                                ]
                            ],
                            "writes": [],
                            "external_calls": [],
                            "md5": "7a994b9977271f5994c9f27da0de0e32"
                        }
                    },
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "Migrations.restricted": "7a994b9977271f5994c9f27da0de0e32"
            },
            "md5": "a4922b4594b312e7f798e8b9e584203e"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\RouterMintBurnWrapper.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\RouterMintBurnWrapper.sol",
            "filename": "RouterMintBurnWrapper.sol",
            "imported_contracts": {},
            "contracts": {
                "ITokenMintBurn": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "mint": [
                            {
                                "visibility": "external",
                                "content": "function mint(address to, uint256 amount) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "54fcc18fc5af6f55053554dd926d02c5"
                            }
                        ],
                        "burnFrom": [
                            {
                                "visibility": "external",
                                "content": "function burnFrom(address from, uint256 amount) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "22be8ec2baf412af8213f8a143134848"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                },
                "IRouterMintBurn": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "mint": [
                            {
                                "visibility": "external",
                                "content": "function mint(address to, uint256 amount) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "54fcc18fc5af6f55053554dd926d02c5"
                            }
                        ],
                        "burn": [
                            {
                                "visibility": "external",
                                "content": "function burn(address from, uint256 amount) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "3b8d1a75aa40d4fec00a0d273d36f6da"
                            }
                        ],
                        "token": [
                            {
                                "visibility": "external",
                                "content": "function token() external view returns (address);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "4e6a10a1a0a1f93bf71067ec3c05528f"
                            }
                        ],
                        "tokenType": [
                            {
                                "visibility": "external",
                                "content": "function tokenType() external view returns (TokenType);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "TokenType",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "5ef58c513ee8764955caaf459ac99f43"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": [
                        [
                            "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\RouterMintBurnWrapper.sol",
                            "RouterMintBurnWrapper"
                        ]
                    ]
                },
                "RoleControl": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": true,
                    "inherits": [],
                    "state_variables": {
                        "isMinter": {
                            "type": "mapping(address => bool)",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(address => bool) public isMinter;"
                        },
                        "minters": {
                            "type": "address[]",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address[] public minters;"
                        },
                        "vault": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public vault;"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (address _vault){ require(_vault != address(0), \"zero vault address\"); vault = _vault;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_vault"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "vault",
                                        "",
                                        "RoleControl"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "vault",
                                        "",
                                        "RoleControl"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "2171ae09cebc2b30605d9098e8de3a37"
                            }
                        ],
                        "changeVault": [
                            {
                                "visibility": "external",
                                "content": "function changeVault(address newVault) external onlyVault returns (bool){ require(newVault != address(0), \"zero vault address\"); emit LogChangeVault(vault, newVault, block.timestamp); vault = newVault; return true;}",
                                "modifiers": [
                                    "onlyVault"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "newVault"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "vault",
                                        "",
                                        "RoleControl"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "vault",
                                        "",
                                        "RoleControl"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "RoleControl.onlyVault"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "8da40cb539701e30f7a081460d27e913"
                            }
                        ],
                        "addMinter": [
                            {
                                "visibility": "external",
                                "content": "function addMinter(address _minter) external onlyVault{ require(_minter != address(0), \"zero minter address\"); require(!isMinter[_minter], \"minter exists\"); isMinter[_minter] = true; minters.push(_minter); emit AddMinter(_minter);}",
                                "modifiers": [
                                    "onlyVault"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_minter"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "isMinter",
                                        "",
                                        "RoleControl"
                                    ],
                                    [
                                        "minters",
                                        "",
                                        "RoleControl"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "isMinter",
                                        "",
                                        "RoleControl"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "RoleControl.onlyVault"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "524a9926cdd0bdf9c826a945c1708b71"
                            }
                        ],
                        "revokeMinter": [
                            {
                                "visibility": "external",
                                "content": "function revokeMinter(address _minter) external onlyVault{ require(isMinter[_minter], \"minter not exists\"); isMinter[_minter] = false; emit RevokeMinter(_minter);}",
                                "modifiers": [
                                    "onlyVault"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_minter"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "isMinter",
                                        "",
                                        "RoleControl"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "isMinter",
                                        "",
                                        "RoleControl"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "RoleControl.onlyVault"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "3ca5810ae5419bd2b1536d3712b02afb"
                            }
                        ],
                        "getAllMinters": [
                            {
                                "visibility": "external",
                                "content": "function getAllMinters() external view returns (address[] memory){ return minters;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address[] memory",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "minters",
                                        "",
                                        "RoleControl"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "a9eb2dfc84983cd05dd93c09bb690131"
                            }
                        ]
                    },
                    "modifiers": {
                        "onlyAuth": {
                            "parameters": [],
                            "content": "modifier onlyAuth(){ require(isMinter[msg.sender], \"onlyAuth\"); _;}",
                            "reads": [
                                [
                                    "isMinter",
                                    "",
                                    "RoleControl"
                                ]
                            ],
                            "writes": [],
                            "external_calls": [],
                            "md5": "2d3c1a9ba0cdb2c0ae15b440c7535fc6"
                        },
                        "onlyVault": {
                            "parameters": [],
                            "content": "modifier onlyVault(){ require(msg.sender == vault, \"onlyVault\"); _;}",
                            "reads": [
                                [
                                    "vault",
                                    "",
                                    "RoleControl"
                                ]
                            ],
                            "writes": [],
                            "external_calls": [],
                            "md5": "b1cb3a898d846ef9f1a0b15fbd1c9afe"
                        }
                    },
                    "structs": {},
                    "events": {
                        "LogChangeVault": {
                            "event": "LogChangeVault",
                            "content": "LogChangeVault( address indexed oldVault, address indexed newVault, uint256 indexed effectiveTime )"
                        },
                        "AddMinter": {
                            "event": "AddMinter",
                            "content": "AddMinter(address _minter)"
                        },
                        "RevokeMinter": {
                            "event": "RevokeMinter",
                            "content": "RevokeMinter(address _minter)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "RouterMintBurnWrapper": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "IRouterMintBurn",
                        "RoleControl"
                    ],
                    "state_variables": {
                        "token": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": true,
                            "initial_value": null,
                            "content": "address public immutable override token;"
                        },
                        "tokenType": {
                            "type": "TokenType",
                            "visibility": "public",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": true,
                            "initial_value": "TokenType.MintBurnFrom",
                            "content": "TokenType public constant override tokenType = TokenType.MintBurnFrom;"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (address _token, address _vault) RoleControl(_vault){ require( _token != address(0) && _token != address(this), \"zero token address\" ); token = _token;}",
                                "modifiers": [
                                    "RoleControl(_vault)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_vault"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "token",
                                        "",
                                        "RouterMintBurnWrapper"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "token",
                                        "",
                                        "RouterMintBurnWrapper"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "b041bb9b7884042df02920ddca508042"
                            }
                        ],
                        "mint": [
                            {
                                "visibility": "external",
                                "content": "function mint(address to, uint256 amount) external override onlyAuth returns (bool){ assert(ITokenMintBurn(token).mint(to, amount)); return true;}",
                                "modifiers": [
                                    "override",
                                    "onlyAuth"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "token",
                                        "",
                                        "RouterMintBurnWrapper"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "RouterMintBurnWrapper.onlyAuth"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "aed61f6d6c1117f70af74122765e31ba"
                            }
                        ],
                        "burn": [
                            {
                                "visibility": "external",
                                "content": "function burn(address from, uint256 amount) external override onlyAuth returns (bool){ assert(ITokenMintBurn(token).burnFrom(from, amount)); return true;}",
                                "modifiers": [
                                    "override",
                                    "onlyAuth"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "token",
                                        "",
                                        "RouterMintBurnWrapper"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "RouterMintBurnWrapper.onlyAuth"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "66c15d9faf7a03bb5ca7e1cd0f684f9a"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "RoleControl.onlyVault": "b1cb3a898d846ef9f1a0b15fbd1c9afe"
            },
            "md5": "760141362c8ceb5677acb7fac6699b24"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\SushiswapV3PermitRouter02.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\SushiswapV3PermitRouter02.sol",
            "filename": "SushiswapV3PermitRouter02.sol",
            "imported_contracts": {},
            "contracts": {
                "ISushiswapV3Pair": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "name": [
                            {
                                "visibility": "external",
                                "content": "function name() external pure returns (string memory);",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "string memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "da62194541f10ce3bca8a5ec45968dd1"
                            }
                        ],
                        "symbol": [
                            {
                                "visibility": "external",
                                "content": "function symbol() external pure returns (string memory);",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "string memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "4cbfd10f1d33f46f174a14eccaf2f92a"
                            }
                        ],
                        "decimals": [
                            {
                                "visibility": "external",
                                "content": "function decimals() external pure returns (uint8);",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint8",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "f8a0dd13fb443ad82a4cf2864c3a3670"
                            }
                        ],
                        "totalSupply": [
                            {
                                "visibility": "external",
                                "content": "function totalSupply() external view returns (uint);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "39c31b7b259bbdb96ef5e71e43a31fa6"
                            }
                        ],
                        "balanceOf": [
                            {
                                "visibility": "external",
                                "content": "function balanceOf(address owner) external view returns (uint);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "owner"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "2648e16977e6c717489dfca9ec38a0c9"
                            }
                        ],
                        "allowance": [
                            {
                                "visibility": "external",
                                "content": "function allowance(address owner, address spender) external view returns (uint);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "owner"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "b953dd37d4a28b2e92cd51c743226f56"
                            }
                        ],
                        "approve": [
                            {
                                "visibility": "external",
                                "content": "function approve(address spender, uint value) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "value"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "7764bb55ddb9ca288dcb5ef110ab6253"
                            }
                        ],
                        "transfer": [
                            {
                                "visibility": "external",
                                "content": "function transfer(address to, uint value) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "value"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "0587b6354cf0d3773c8593eb4103d819"
                            }
                        ],
                        "transferFrom": [
                            {
                                "visibility": "external",
                                "content": "function transferFrom(address from, address to, uint value) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "value"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "cbef48e0263e179ffe91ffc711b607e6"
                            }
                        ],
                        "DOMAIN_SEPARATOR": [
                            {
                                "visibility": "external",
                                "content": "function DOMAIN_SEPARATOR() external view returns (bytes32);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "0a5129288a98701e3042bb219b8117b2"
                            }
                        ],
                        "PERMIT_TYPEHASH": [
                            {
                                "visibility": "external",
                                "content": "function PERMIT_TYPEHASH() external pure returns (bytes32);",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "baa7311ddab35bacb588e46354af53d5"
                            }
                        ],
                        "nonces": [
                            {
                                "visibility": "external",
                                "content": "function nonces(address owner) external view returns (uint);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "owner"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "1bfa15ae23ddb4c4de91099976df600c"
                            }
                        ],
                        "permit": [
                            {
                                "visibility": "external",
                                "content": "function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "owner"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "value"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "deadline"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "v"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "r"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "s"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "7164681d17fe17aed21b5519967b69f8"
                            }
                        ],
                        "MINIMUM_LIQUIDITY": [
                            {
                                "visibility": "external",
                                "content": "function MINIMUM_LIQUIDITY() external pure returns (uint);",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "76ab458db84e616616a8455ecbcd2430"
                            }
                        ],
                        "factory": [
                            {
                                "visibility": "external",
                                "content": "function factory() external view returns (address);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "eae461b6d0ef6d1c8bb92d34e74a880d"
                            }
                        ],
                        "token0": [
                            {
                                "visibility": "external",
                                "content": "function token0() external view returns (address);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "6dbeae51296a5fa298e59b6ce26a07ef"
                            }
                        ],
                        "token1": [
                            {
                                "visibility": "external",
                                "content": "function token1() external view returns (address);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "19164606c7e09dcc0de5c859221b6cf5"
                            }
                        ],
                        "getReserves": [
                            {
                                "visibility": "external",
                                "content": "function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint112",
                                        "name": "reserve0"
                                    },
                                    {
                                        "type": "uint112",
                                        "name": "reserve1"
                                    },
                                    {
                                        "type": "uint32",
                                        "name": "blockTimestampLast"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "a8ad5739cac88103083915986561f88c"
                            }
                        ],
                        "price0CumulativeLast": [
                            {
                                "visibility": "external",
                                "content": "function price0CumulativeLast() external view returns (uint);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c31ee00b07488ba44c594b38c3621566"
                            }
                        ],
                        "price1CumulativeLast": [
                            {
                                "visibility": "external",
                                "content": "function price1CumulativeLast() external view returns (uint);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "a804583c3b975d6d43a4e1cc3fd74a92"
                            }
                        ],
                        "kLast": [
                            {
                                "visibility": "external",
                                "content": "function kLast() external view returns (uint);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "d2390f37b6d030f8a11972b6c8780a39"
                            }
                        ],
                        "mint": [
                            {
                                "visibility": "external",
                                "content": "function mint(address to) external returns (uint liquidity);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "to"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "liquidity"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "ff08e4d020b21454c2b7252e3235f5ef"
                            }
                        ],
                        "burn": [
                            {
                                "visibility": "external",
                                "content": "function burn(address to) external returns (uint amount0, uint amount1);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "to"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "amount0"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amount1"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "24c2cf143c48045848eb2be6a364f202"
                            }
                        ],
                        "swap": [
                            {
                                "visibility": "external",
                                "content": "function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "amount0Out"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amount1Out"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "data"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "2a7b7c36bbb6565de0e79bffef9b920f"
                            }
                        ],
                        "skim": [
                            {
                                "visibility": "external",
                                "content": "function skim(address to) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "to"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "80264aea145193083bc6e14f17d98b1d"
                            }
                        ],
                        "sync": [
                            {
                                "visibility": "external",
                                "content": "function sync() external;",
                                "modifiers": [],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "8a88de5c1edea8e8388f3bde12720892"
                            }
                        ],
                        "initialize": [
                            {
                                "visibility": "external",
                                "content": "function initialize(address, address) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": null
                                    },
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "610e06a6e0bf0239cab4dcd03705f63f"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {
                        "Approval": {
                            "event": "Approval",
                            "content": "Approval(address indexed owner, address indexed spender, uint value)"
                        },
                        "Transfer": {
                            "event": "Transfer",
                            "content": "Transfer(address indexed from, address indexed to, uint value)"
                        },
                        "Mint": {
                            "event": "Mint",
                            "content": "Mint(address indexed sender, uint amount0, uint amount1)"
                        },
                        "Burn": {
                            "event": "Burn",
                            "content": "Burn(address indexed sender, uint amount0, uint amount1, address indexed to)"
                        },
                        "Swap": {
                            "event": "Swap",
                            "content": "Swap( address indexed sender, uint amount0In, uint amount1In, uint amount0Out, uint amount1Out, address indexed to )"
                        },
                        "Sync": {
                            "event": "Sync",
                            "content": "Sync(uint112 reserve0, uint112 reserve1)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                },
                "SafeMathSushiswap": {
                    "type": {
                        "__CT__": true,
                        "value": 2
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "add": [
                            {
                                "visibility": "internal",
                                "content": "function add(uint x, uint y) internal pure returns (uint z){ require((z = x + y) >= x, 'ds-math-add-overflow');}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "x"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "y"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "z"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "e076653475ff64c2999d30ec870291e4"
                            }
                        ],
                        "sub": [
                            {
                                "visibility": "internal",
                                "content": "function sub(uint x, uint y) internal pure returns (uint z){ require((z = x - y) <= x, 'ds-math-sub-underflow');}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "x"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "y"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "z"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "50fc788cc62b3aabc5d934ec2ad1c67f"
                            }
                        ],
                        "mul": [
                            {
                                "visibility": "internal",
                                "content": "function mul(uint x, uint y) internal pure returns (uint z){ require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "x"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "y"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "z"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "17723186ccd020779d6c078c1da61e4b"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "SushiswapV3Library": {
                    "type": {
                        "__CT__": true,
                        "value": 2
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "sortTokens": [
                            {
                                "visibility": "internal",
                                "content": "function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1){ require(tokenA != tokenB, 'SushiswapV3Library: IDENTICAL_ADDRESSES'); (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA); require(token0 != address(0), 'SushiswapV3Library: ZERO_ADDRESS');}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "tokenA"
                                    },
                                    {
                                        "type": "address",
                                        "name": "tokenB"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": "token0"
                                    },
                                    {
                                        "type": "address",
                                        "name": "token1"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "e3214c34842511194e4a7b2389b496ca"
                            }
                        ],
                        "pairFor": [
                            {
                                "visibility": "internal",
                                "content": "function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair){ (address token0, address token1) = sortTokens(tokenA, tokenB); pair = address(uint160(uint256(keccak256(abi.encodePacked( hex'ff', factory, keccak256(abi.encodePacked(token0, token1)), hex'e18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303' )))));}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "factory"
                                    },
                                    {
                                        "type": "address",
                                        "name": "tokenA"
                                    },
                                    {
                                        "type": "address",
                                        "name": "tokenB"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": "pair"
                                    }
                                ],
                                "reads": [
                                    [
                                        "factory",
                                        "",
                                        "SushiswapV3PermitRouter02"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "factory",
                                        "",
                                        "SushiswapV3PermitRouter02"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SushiswapV3Library.sortTokens"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "0966039bc6d80270f06e5d9760ee5973"
                            }
                        ],
                        "getReserves": [
                            {
                                "visibility": "internal",
                                "content": "function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB){ (address token0, ) = sortTokens(tokenA, tokenB); (uint reserve0, uint reserve1, ) = ISushiswapV3Pair(pairFor(factory, tokenA, tokenB)).getReserves(); (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "factory"
                                    },
                                    {
                                        "type": "address",
                                        "name": "tokenA"
                                    },
                                    {
                                        "type": "address",
                                        "name": "tokenB"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "reserveA"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "reserveB"
                                    }
                                ],
                                "reads": [
                                    [
                                        "factory",
                                        "",
                                        "SushiswapV3PermitRouter02"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "factory",
                                        "",
                                        "SushiswapV3PermitRouter02"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SushiswapV3Library.sortTokens",
                                        "SushiswapV3Library.pairFor"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "9d97c428063f3175a1f329f0834bc13e"
                            }
                        ],
                        "quote": [
                            {
                                "visibility": "internal",
                                "content": "function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB){ require(amountA > 0, 'SushiswapV3Library: INSUFFICIENT_AMOUNT'); require(reserveA > 0 && reserveB > 0, 'SushiswapV3Library: INSUFFICIENT_LIQUIDITY'); amountB = amountA.mul(reserveB) / reserveA;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "amountA"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "reserveA"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "reserveB"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "amountB"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "amountA.mul"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "138a4d8e7ce6a28e0daecaa93cf0c1c7"
                            }
                        ],
                        "getAmountOut": [
                            {
                                "visibility": "internal",
                                "content": "function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut){ require(amountIn > 0, 'SushiswapV3Library: INSUFFICIENT_INPUT_AMOUNT'); require(reserveIn > 0 && reserveOut > 0, 'SushiswapV3Library: INSUFFICIENT_LIQUIDITY'); uint amountInWithFee = amountIn.mul(997); uint numerator = amountInWithFee.mul(reserveOut); uint denominator = reserveIn.mul(1000).add(amountInWithFee); amountOut = numerator / denominator;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "amountIn"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "reserveIn"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "reserveOut"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "amountOut"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "amountIn.mul",
                                        "reserveIn.mul",
                                        "amountInWithFee.mul"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "74415ff9dfbf3c37decf69022325ee8d"
                            }
                        ],
                        "getAmountIn": [
                            {
                                "visibility": "internal",
                                "content": "function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn){ require(amountOut > 0, 'SushiswapV3Library: INSUFFICIENT_OUTPUT_AMOUNT'); require(reserveIn > 0 && reserveOut > 0, 'SushiswapV3Library: INSUFFICIENT_LIQUIDITY'); uint numerator = reserveIn.mul(amountOut).mul(1000); uint denominator = reserveOut.sub(amountOut).mul(997); amountIn = (numerator / denominator).add(1);}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "amountOut"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "reserveIn"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "reserveOut"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "amountIn"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "reserveIn.mul",
                                        "reserveOut.sub"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "46fc8df45f9b8f938805caf9f015760a"
                            }
                        ],
                        "getAmountsOut": [
                            {
                                "visibility": "internal",
                                "content": "function getAmountsOut(address factory, uint amountIn, address[] memory path) internal view returns (uint[] memory amounts){ require(path.length >= 2, 'SushiswapV3Library: INVALID_PATH'); amounts = new uint[](path.length); amounts[0] = amountIn; for (uint i; i < path.length - 1; i++){ (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]); amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);}}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "factory"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountIn"
                                    },
                                    {
                                        "type": "address[] memory",
                                        "name": "path"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint[] memory",
                                        "name": "amounts"
                                    }
                                ],
                                "reads": [
                                    [
                                        "factory",
                                        "",
                                        "SushiswapV3PermitRouter02"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SushiswapV3Library.getReserves",
                                        "SushiswapV3Library.getAmountOut"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "3c9cab4cf125c8673edf087fdc422bd0"
                            }
                        ],
                        "getAmountsIn": [
                            {
                                "visibility": "internal",
                                "content": "function getAmountsIn(address factory, uint amountOut, address[] memory path) internal view returns (uint[] memory amounts){ require(path.length >= 2, 'SushiswapV3Library: INVALID_PATH'); amounts = new uint[](path.length); amounts[amounts.length - 1] = amountOut; for (uint i = path.length - 1; i > 0; i--){ (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]); amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);}}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "factory"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountOut"
                                    },
                                    {
                                        "type": "address[] memory",
                                        "name": "path"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint[] memory",
                                        "name": "amounts"
                                    }
                                ],
                                "reads": [
                                    [
                                        "factory",
                                        "",
                                        "SushiswapV3PermitRouter02"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SushiswapV3Library.getAmountIn",
                                        "SushiswapV3Library.getReserves"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "55a9033bdb4354d09c084fb2b66ce841"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "uint": "SafeMathSushiswap"
                    }
                },
                "TransferHelper": {
                    "type": {
                        "__CT__": true,
                        "value": 2
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "safeApprove": [
                            {
                                "visibility": "internal",
                                "content": "function safeApprove(address token, address to, uint value) internal{ (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value)); require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "value"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "token.call"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "d9c6640cfca902b76e445a1510fab047"
                            }
                        ],
                        "safeTransfer": [
                            {
                                "visibility": "internal",
                                "content": "function safeTransfer(address token, address to, uint value) internal{ (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value)); require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "value"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "token.call"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "3f5488f5b132ce36f3d9090a02d85295"
                            }
                        ],
                        "safeTransferFrom": [
                            {
                                "visibility": "internal",
                                "content": "function safeTransferFrom(address token, address from, address to, uint value) internal{ (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value)); require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "value"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "token.call"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "cb78f5eeced7c4ba60c419cbe210487c"
                            }
                        ],
                        "safeTransferFTM": [
                            {
                                "visibility": "internal",
                                "content": "function safeTransferFTM(address to, uint value) internal{ (bool success, ) = to.call{ value:value} (new bytes(0)); require(success, 'TransferHelper: FTM_TRANSFER_FAILED');}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "value"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "68862d69fd5b66216c75132a0c6f9a30"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "ISushiswapV3Router01": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "factory": [
                            {
                                "visibility": "external",
                                "content": "function factory() external view returns (address);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "eae461b6d0ef6d1c8bb92d34e74a880d"
                            }
                        ],
                        "WFTM": [
                            {
                                "visibility": "external",
                                "content": "function WFTM() external view returns (address);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "8911f0d3bb63ca9e616919ac674590c9"
                            }
                        ],
                        "addLiquidity": [
                            {
                                "visibility": "external",
                                "content": "function addLiquidity( address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB, uint liquidity);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "tokenA"
                                    },
                                    {
                                        "type": "address",
                                        "name": "tokenB"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountADesired"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountBDesired"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountAMin"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountBMin"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "deadline"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "amountA"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountB"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "liquidity"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "17ade7643473d8a0fd0743d064676bd2"
                            }
                        ],
                        "addLiquidityFTM": [
                            {
                                "visibility": "external",
                                "content": "function addLiquidityFTM( address token, uint amountTokenDesired, uint amountTokenMin, uint amountFTMMin, address to, uint deadline ) external payable returns (uint amountToken, uint amountFTM, uint liquidity);",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountTokenDesired"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountTokenMin"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountFTMMin"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "deadline"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "amountToken"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountFTM"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "liquidity"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": true,
                                "md5": "fc2da1bd9806b9c532489f619a78f67b"
                            }
                        ],
                        "removeLiquidity": [
                            {
                                "visibility": "external",
                                "content": "function removeLiquidity( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "tokenA"
                                    },
                                    {
                                        "type": "address",
                                        "name": "tokenB"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "liquidity"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountAMin"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountBMin"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "deadline"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "amountA"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountB"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "ff1ea321d85086b99c927def517ce55a"
                            }
                        ],
                        "removeLiquidityFTM": [
                            {
                                "visibility": "external",
                                "content": "function removeLiquidityFTM( address token, uint liquidity, uint amountTokenMin, uint amountFTMMin, address to, uint deadline ) external returns (uint amountToken, uint amountFTM);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "liquidity"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountTokenMin"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountFTMMin"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "deadline"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "amountToken"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountFTM"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "b5bad70bc29f471b68db1e3a193865d7"
                            }
                        ],
                        "removeLiquidityWithPermit": [
                            {
                                "visibility": "external",
                                "content": "function removeLiquidityWithPermit( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountA, uint amountB);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "tokenA"
                                    },
                                    {
                                        "type": "address",
                                        "name": "tokenB"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "liquidity"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountAMin"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountBMin"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "deadline"
                                    },
                                    {
                                        "type": "bool",
                                        "name": "approveMax"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "v"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "r"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "s"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "amountA"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountB"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "90e70435f0748c03152d32297bf13026"
                            }
                        ],
                        "removeLiquidityFTMWithPermit": [
                            {
                                "visibility": "external",
                                "content": "function removeLiquidityFTMWithPermit( address token, uint liquidity, uint amountTokenMin, uint amountFTMMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountToken, uint amountFTM);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "liquidity"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountTokenMin"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountFTMMin"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "deadline"
                                    },
                                    {
                                        "type": "bool",
                                        "name": "approveMax"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "v"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "r"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "s"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "amountToken"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountFTM"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "e63931ca653788f57155175434972edc"
                            }
                        ],
                        "swapExactTokensForTokens": [
                            {
                                "visibility": "external",
                                "content": "function swapExactTokensForTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "amountIn"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountOutMin"
                                    },
                                    {
                                        "type": "address[] calldata",
                                        "name": "path"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "deadline"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint[] memory",
                                        "name": "amounts"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "18c53699a477afd9450f021b6ed173c6"
                            }
                        ],
                        "swapTokensForExactTokens": [
                            {
                                "visibility": "external",
                                "content": "function swapTokensForExactTokens( uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "amountOut"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountInMax"
                                    },
                                    {
                                        "type": "address[] calldata",
                                        "name": "path"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "deadline"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint[] memory",
                                        "name": "amounts"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "302b6389dc54761b37ae9541b567ca03"
                            }
                        ],
                        "swapExactFTMForTokens": [
                            {
                                "visibility": "external",
                                "content": "function swapExactFTMForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "amountOutMin"
                                    },
                                    {
                                        "type": "address[] calldata",
                                        "name": "path"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "deadline"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint[] memory",
                                        "name": "amounts"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": true,
                                "md5": "adcd23813ebdbfd6a29baefcd659a13e"
                            }
                        ],
                        "swapTokensForExactFTM": [
                            {
                                "visibility": "external",
                                "content": "function swapTokensForExactFTM(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "amountOut"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountInMax"
                                    },
                                    {
                                        "type": "address[] calldata",
                                        "name": "path"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "deadline"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint[] memory",
                                        "name": "amounts"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "ee4a970a0c74a6276fddd1a1874a14fe"
                            }
                        ],
                        "swapExactTokensForFTM": [
                            {
                                "visibility": "external",
                                "content": "function swapExactTokensForFTM(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "amountIn"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountOutMin"
                                    },
                                    {
                                        "type": "address[] calldata",
                                        "name": "path"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "deadline"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint[] memory",
                                        "name": "amounts"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "b540bc9b46ea84359d8528a1040371e8"
                            }
                        ],
                        "swapFTMForExactTokens": [
                            {
                                "visibility": "external",
                                "content": "function swapFTMForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "amountOut"
                                    },
                                    {
                                        "type": "address[] calldata",
                                        "name": "path"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "deadline"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint[] memory",
                                        "name": "amounts"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": true,
                                "md5": "7d0f072604b4d5bcb8fb859fe44fba4d"
                            }
                        ],
                        "quote": [
                            {
                                "visibility": "external",
                                "content": "function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "amountA"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "reserveA"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "reserveB"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "amountB"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "cb789b739af5b3c028131dcb32990c94"
                            }
                        ],
                        "getAmountOut": [
                            {
                                "visibility": "external",
                                "content": "function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "amountIn"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "reserveIn"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "reserveOut"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "amountOut"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "93d2f838b7fdeb036cdefe84a2e99bbe"
                            }
                        ],
                        "getAmountIn": [
                            {
                                "visibility": "external",
                                "content": "function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "amountOut"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "reserveIn"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "reserveOut"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "amountIn"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "ecf52132211fe995bc4f06d31c57dbee"
                            }
                        ],
                        "getAmountsOut": [
                            {
                                "visibility": "external",
                                "content": "function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "amountIn"
                                    },
                                    {
                                        "type": "address[] calldata",
                                        "name": "path"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint[] memory",
                                        "name": "amounts"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "f27081709ffe0fe9c4d022ba1e51538a"
                            }
                        ],
                        "getAmountsIn": [
                            {
                                "visibility": "external",
                                "content": "function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "amountOut"
                                    },
                                    {
                                        "type": "address[] calldata",
                                        "name": "path"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint[] memory",
                                        "name": "amounts"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "d0dc2eafb1d550b4b006faca45979717"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": [
                        [
                            "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\SushiswapV3PermitRouter02.sol",
                            "ISushiswapV3Router02"
                        ]
                    ]
                },
                "ISushiswapV3Router02": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "ISushiswapV3Router01"
                    ],
                    "state_variables": {},
                    "functions": {
                        "removeLiquidityFTMSupportingFeeOnTransferTokens": [
                            {
                                "visibility": "external",
                                "content": "function removeLiquidityFTMSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountFTMMin, address to, uint deadline ) external returns (uint amountFTM);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "liquidity"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountTokenMin"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountFTMMin"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "deadline"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "amountFTM"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "92db73791f31029eb6c75a18a04c2119"
                            }
                        ],
                        "removeLiquidityFTMWithPermitSupportingFeeOnTransferTokens": [
                            {
                                "visibility": "external",
                                "content": "function removeLiquidityFTMWithPermitSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountFTMMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountFTM);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "liquidity"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountTokenMin"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountFTMMin"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "deadline"
                                    },
                                    {
                                        "type": "bool",
                                        "name": "approveMax"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "v"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "r"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "s"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "amountFTM"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "f7b44eda0948b9cb6d97df0fbe29936f"
                            }
                        ],
                        "swapExactTokensForTokensSupportingFeeOnTransferTokens": [
                            {
                                "visibility": "external",
                                "content": "function swapExactTokensForTokensSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "amountIn"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountOutMin"
                                    },
                                    {
                                        "type": "address[] calldata",
                                        "name": "path"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "deadline"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "a3a571f314f7f4cf3d7a9df5ef1ffd81"
                            }
                        ],
                        "swapExactFTMForTokensSupportingFeeOnTransferTokens": [
                            {
                                "visibility": "external",
                                "content": "function swapExactFTMForTokensSupportingFeeOnTransferTokens( uint amountOutMin, address[] calldata path, address to, uint deadline ) external payable;",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "amountOutMin"
                                    },
                                    {
                                        "type": "address[] calldata",
                                        "name": "path"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "deadline"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": true,
                                "md5": "cf828a251a32ddd596896094f95d80af"
                            }
                        ],
                        "swapExactTokensForFTMSupportingFeeOnTransferTokens": [
                            {
                                "visibility": "external",
                                "content": "function swapExactTokensForFTMSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "amountIn"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountOutMin"
                                    },
                                    {
                                        "type": "address[] calldata",
                                        "name": "path"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "deadline"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "87e2d990ba347688ac4ba5201911d204"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                },
                "ISushiswapV3Factory": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "feeTo": [
                            {
                                "visibility": "external",
                                "content": "function feeTo() external view returns (address);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "dd38fd6ffd3e6926baaf9ef60fced759"
                            }
                        ],
                        "feeToSetter": [
                            {
                                "visibility": "external",
                                "content": "function feeToSetter() external view returns (address);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c1b903fbc93c860306ad0398af6a1379"
                            }
                        ],
                        "migrator": [
                            {
                                "visibility": "external",
                                "content": "function migrator() external view returns (address);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "aed0287c80fe8315b03973bfbe111d42"
                            }
                        ],
                        "getPair": [
                            {
                                "visibility": "external",
                                "content": "function getPair(address tokenA, address tokenB) external view returns (address pair);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "tokenA"
                                    },
                                    {
                                        "type": "address",
                                        "name": "tokenB"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": "pair"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "79783b3f509f341a6db26799738a3a85"
                            }
                        ],
                        "allPairs": [
                            {
                                "visibility": "external",
                                "content": "function allPairs(uint) external view returns (address pair);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": null
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": "pair"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "9b95f924bfbbe2063f7c4b28e2c3c1e5"
                            }
                        ],
                        "allPairsLength": [
                            {
                                "visibility": "external",
                                "content": "function allPairsLength() external view returns (uint);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "de018784a23e18501f05f1330df086bf"
                            }
                        ],
                        "createPair": [
                            {
                                "visibility": "external",
                                "content": "function createPair(address tokenA, address tokenB) external returns (address pair);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "tokenA"
                                    },
                                    {
                                        "type": "address",
                                        "name": "tokenB"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": "pair"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "746757afd148df5000e1a022cfc90972"
                            }
                        ],
                        "setFeeTo": [
                            {
                                "visibility": "external",
                                "content": "function setFeeTo(address) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "6753fb4fba317312f336d0148dd8aa9b"
                            }
                        ],
                        "setFeeToSetter": [
                            {
                                "visibility": "external",
                                "content": "function setFeeToSetter(address) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "5e77fe4e1e85ae4e066c2f08c1875d55"
                            }
                        ],
                        "setMigrator": [
                            {
                                "visibility": "external",
                                "content": "function setMigrator(address) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "7fe94497a7219e6aea0ac6b629f952b9"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {
                        "PairCreated": {
                            "event": "PairCreated",
                            "content": "PairCreated(address indexed token0, address indexed token1, address pair, uint)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                },
                "IERC20": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "name": [
                            {
                                "visibility": "external",
                                "content": "function name() external view returns (string memory);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "string memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "4025788d8802eb9f22e195dc2bedffee"
                            }
                        ],
                        "symbol": [
                            {
                                "visibility": "external",
                                "content": "function symbol() external view returns (string memory);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "string memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "290eeefbf46324b8fc0db56342aa8b5c"
                            }
                        ],
                        "decimals": [
                            {
                                "visibility": "external",
                                "content": "function decimals() external view returns (uint8);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint8",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "af3fd982db2d33756fe4782a6d55350a"
                            }
                        ],
                        "totalSupply": [
                            {
                                "visibility": "external",
                                "content": "function totalSupply() external view returns (uint);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "39c31b7b259bbdb96ef5e71e43a31fa6"
                            }
                        ],
                        "balanceOf": [
                            {
                                "visibility": "external",
                                "content": "function balanceOf(address owner) external view returns (uint);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "owner"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "2648e16977e6c717489dfca9ec38a0c9"
                            }
                        ],
                        "allowance": [
                            {
                                "visibility": "external",
                                "content": "function allowance(address owner, address spender) external view returns (uint);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "owner"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "b953dd37d4a28b2e92cd51c743226f56"
                            }
                        ],
                        "approve": [
                            {
                                "visibility": "external",
                                "content": "function approve(address spender, uint value) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "value"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "7764bb55ddb9ca288dcb5ef110ab6253"
                            }
                        ],
                        "transfer": [
                            {
                                "visibility": "external",
                                "content": "function transfer(address to, uint value) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "value"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "0587b6354cf0d3773c8593eb4103d819"
                            }
                        ],
                        "transferFrom": [
                            {
                                "visibility": "external",
                                "content": "function transferFrom(address from, address to, uint value) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "value"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "cbef48e0263e179ffe91ffc711b607e6"
                            }
                        ],
                        "transferWithPermit": [
                            {
                                "visibility": "external",
                                "content": "function transferWithPermit(address target, address to, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "target"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "deadline"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "v"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "r"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "s"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "936174799796d3ebd0f9d8d968cbd4d0"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {
                        "Approval": {
                            "event": "Approval",
                            "content": "Approval(address indexed owner, address indexed spender, uint value)"
                        },
                        "Transfer": {
                            "event": "Transfer",
                            "content": "Transfer(address indexed from, address indexed to, uint value)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                },
                "IWFTM": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "deposit": [
                            {
                                "visibility": "external",
                                "content": "function deposit() external payable;",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": true,
                                "md5": "4f2eec90abd519258d97a4283a54e2f1"
                            }
                        ],
                        "transfer": [
                            {
                                "visibility": "external",
                                "content": "function transfer(address to, uint value) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "value"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "0587b6354cf0d3773c8593eb4103d819"
                            }
                        ],
                        "withdraw": [
                            {
                                "visibility": "external",
                                "content": "function withdraw(uint) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": null
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "b3e698980247640e9fe99c060e4921fc"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                },
                "SushiswapV3PermitRouter02": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {
                        "factory": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public immutable factory;"
                        },
                        "WFTM": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public immutable WFTM;"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (address _factory, address _WFTM){ factory = _factory; WFTM = _WFTM;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_factory"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_WFTM"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "factory",
                                        "",
                                        "SushiswapV3PermitRouter02"
                                    ],
                                    [
                                        "WFTM",
                                        "",
                                        "SushiswapV3PermitRouter02"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "factory",
                                        "",
                                        "SushiswapV3PermitRouter02"
                                    ],
                                    [
                                        "WFTM",
                                        "",
                                        "SushiswapV3PermitRouter02"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "66c7a7c6fc332f08f4377596fe9996e4"
                            }
                        ],
                        "_addLiquidity": [
                            {
                                "visibility": "internal",
                                "content": "function _addLiquidity( address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin ) internal virtual returns (uint amountA, uint amountB){ if (ISushiswapV3Factory(factory).getPair(tokenA, tokenB) == address(0)){ ISushiswapV3Factory(factory).createPair(tokenA, tokenB);} (uint reserveA, uint reserveB) = SushiswapV3Library.getReserves(factory, tokenA, tokenB); if (reserveA == 0 && reserveB == 0){ (amountA, amountB) = (amountADesired, amountBDesired);} else{ uint amountBOptimal = SushiswapV3Library.quote(amountADesired, reserveA, reserveB); if (amountBOptimal <= amountBDesired){ require(amountBOptimal >= amountBMin, 'SushiswapV3Router: INSUFFICIENT_B_AMOUNT'); (amountA, amountB) = (amountADesired, amountBOptimal);} else{ uint amountAOptimal = SushiswapV3Library.quote(amountBDesired, reserveB, reserveA); assert(amountAOptimal <= amountADesired); require(amountAOptimal >= amountAMin, 'SushiswapV3Router: INSUFFICIENT_A_AMOUNT'); (amountA, amountB) = (amountAOptimal, amountBDesired);}}}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "tokenA"
                                    },
                                    {
                                        "type": "address",
                                        "name": "tokenB"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountADesired"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountBDesired"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountAMin"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountBMin"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "amountA"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountB"
                                    }
                                ],
                                "reads": [
                                    [
                                        "factory",
                                        "",
                                        "SushiswapV3PermitRouter02"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SushiswapV3Library.quote",
                                        "SushiswapV3Library.getReserves"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "6283db9be54db64bb2126747851a501b"
                            }
                        ],
                        "addLiquidityWithPermit": [
                            {
                                "visibility": "external",
                                "content": "function addLiquidityWithPermit( address from, address[2] calldata tokens, uint[2] calldata desired, uint[2] calldata mins, address to, uint deadline, uint8[2] calldata v, bytes32[2] calldata r, bytes32[2] calldata s ) external virtual ensure(deadline) returns (uint amountA, uint amountB, uint liquidity){ (amountA, amountB) = _addLiquidity(tokens[0], tokens[1], desired[0], desired[1], mins[0], mins[1]); address pair = SushiswapV3Library.pairFor(factory, tokens[0], tokens[1]); IERC20(tokens[0]).transferWithPermit(from, pair, amountA, deadline, v[0], r[0], s[0]); IERC20(tokens[1]).transferWithPermit(from, pair, amountB, deadline, v[1], r[1], s[1]); liquidity = ISushiswapV3Pair(pair).mint(to);}",
                                "modifiers": [
                                    "virtual",
                                    "ensure(deadline)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "address[2] calldata",
                                        "name": "tokens"
                                    },
                                    {
                                        "type": "uint[2] calldata",
                                        "name": "desired"
                                    },
                                    {
                                        "type": "uint[2] calldata",
                                        "name": "mins"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "deadline"
                                    },
                                    {
                                        "type": "uint8[2] calldata",
                                        "name": "v"
                                    },
                                    {
                                        "type": "bytes32[2] calldata",
                                        "name": "r"
                                    },
                                    {
                                        "type": "bytes32[2] calldata",
                                        "name": "s"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "amountA"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountB"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "liquidity"
                                    }
                                ],
                                "reads": [
                                    [
                                        "factory",
                                        "",
                                        "SushiswapV3PermitRouter02"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SushiswapV3PermitRouter02.ensure",
                                        "SushiswapV3Library.pairFor",
                                        "SushiswapV3PermitRouter02._addLiquidity"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "c92a515ff0bcbb1c69ca7dceec8625e4"
                            }
                        ],
                        "addLiquidityFTMWithPermit": [
                            {
                                "visibility": "external",
                                "content": "function addLiquidityFTMWithPermit( address from, address token, uint amountTokenDesired, uint[2] calldata mins, address to, uint deadline, uint8 v, bytes32 r, bytes32 s ) external virtual payable ensure(deadline) returns (uint amountA, uint amountB, uint liquidity){ (amountA, amountB) = _addLiquidity( token, WFTM, amountTokenDesired, msg.value, mins[0], mins[1] ); address pair = SushiswapV3Library.pairFor(factory, token, WFTM); IERC20(token).transferWithPermit(from, pair, amountA, deadline, v, r, s); IWFTM(WFTM).deposit{ value: amountB} (); assert(IWFTM(WFTM).transfer(pair, amountB)); liquidity = ISushiswapV3Pair(pair).mint(to); if (msg.value > amountB) TransferHelper.safeTransferFTM(msg.sender, msg.value - mins[1]);}",
                                "modifiers": [
                                    "virtual",
                                    "payable",
                                    "ensure(deadline)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountTokenDesired"
                                    },
                                    {
                                        "type": "uint[2] calldata",
                                        "name": "mins"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "deadline"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "v"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "r"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "s"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "amountA"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountB"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "liquidity"
                                    }
                                ],
                                "reads": [
                                    [
                                        "factory",
                                        "",
                                        "SushiswapV3PermitRouter02"
                                    ],
                                    [
                                        "WFTM",
                                        "",
                                        "SushiswapV3PermitRouter02"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "TransferHelper.safeTransferFTM",
                                        "SushiswapV3PermitRouter02.ensure",
                                        "SushiswapV3Library.pairFor",
                                        "SushiswapV3PermitRouter02._addLiquidity"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "9d78aa178a92434bb639a5a4b48a6b7d"
                            }
                        ],
                        "removeLiquidity": [
                            {
                                "visibility": "public",
                                "content": "function removeLiquidity( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline ) public virtual ensure(deadline) returns (uint amountA, uint amountB){ address pair = SushiswapV3Library.pairFor(factory, tokenA, tokenB); ISushiswapV3Pair(pair).transferFrom(msg.sender, pair, liquidity); (uint amount0, uint amount1) = ISushiswapV3Pair(pair).burn(to); (address token0, ) = SushiswapV3Library.sortTokens(tokenA, tokenB); (amountA, amountB) = tokenA == token0 ? (amount0, amount1) : (amount1, amount0); require(amountA >= amountAMin, 'SushiswapV3Router: INSUFFICIENT_A_AMOUNT'); require(amountB >= amountBMin, 'SushiswapV3Router: INSUFFICIENT_B_AMOUNT');}",
                                "modifiers": [
                                    "virtual",
                                    "ensure(deadline)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "tokenA"
                                    },
                                    {
                                        "type": "address",
                                        "name": "tokenB"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "liquidity"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountAMin"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountBMin"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "deadline"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "amountA"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountB"
                                    }
                                ],
                                "reads": [
                                    [
                                        "factory",
                                        "",
                                        "SushiswapV3PermitRouter02"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SushiswapV3Library.sortTokens",
                                        "SushiswapV3Library.pairFor",
                                        "SushiswapV3PermitRouter02.ensure"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "698237bbfcafb66f69258419ceead3ac"
                            }
                        ],
                        "removeLiquidityFTM": [
                            {
                                "visibility": "public",
                                "content": "function removeLiquidityFTM( address token, uint liquidity, uint amountTokenMin, uint amountFTMMin, address to, uint deadline ) public virtual ensure(deadline) returns (uint amountToken, uint amountFTM){ (amountToken, amountFTM) = removeLiquidity( token, WFTM, liquidity, amountTokenMin, amountFTMMin, address(this), deadline ); TransferHelper.safeTransfer(token, to, amountToken); IWFTM(WFTM).withdraw(amountFTM); TransferHelper.safeTransferFTM(to, amountFTM);}",
                                "modifiers": [
                                    "virtual",
                                    "ensure(deadline)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "liquidity"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountTokenMin"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountFTMMin"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "deadline"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "amountToken"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountFTM"
                                    }
                                ],
                                "reads": [
                                    [
                                        "WFTM",
                                        "",
                                        "SushiswapV3PermitRouter02"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "TransferHelper.safeTransferFTM",
                                        "SushiswapV3PermitRouter02.ensure",
                                        "SushiswapV3PermitRouter02.removeLiquidity",
                                        "TransferHelper.safeTransfer"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "ff6a75be8e5811b0ec91916120185340"
                            }
                        ],
                        "removeLiquidityWithPermit": [
                            {
                                "visibility": "external",
                                "content": "function removeLiquidityWithPermit( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external virtual returns (uint amountA, uint amountB){ address pair = SushiswapV3Library.pairFor(factory, tokenA, tokenB); uint value = approveMax ? type (uint).max : liquidity; ISushiswapV3Pair(pair).permit(msg.sender, address(this), value, deadline, v, r, s); (amountA, amountB) = removeLiquidity(tokenA, tokenB, liquidity, amountAMin, amountBMin, to, deadline);}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "tokenA"
                                    },
                                    {
                                        "type": "address",
                                        "name": "tokenB"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "liquidity"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountAMin"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountBMin"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "deadline"
                                    },
                                    {
                                        "type": "bool",
                                        "name": "approveMax"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "v"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "r"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "s"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "amountA"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountB"
                                    }
                                ],
                                "reads": [
                                    [
                                        "factory",
                                        "",
                                        "SushiswapV3PermitRouter02"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SushiswapV3PermitRouter02.removeLiquidity",
                                        "SushiswapV3Library.pairFor",
                                        "SushiswapV3PermitRouter02.type"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "8c1c2d7d0a55859068a7859ae827fe6a"
                            }
                        ],
                        "removeLiquidityFTMWithPermit": [
                            {
                                "visibility": "external",
                                "content": "function removeLiquidityFTMWithPermit( address token, uint liquidity, uint amountTokenMin, uint amountFTMMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external virtual returns (uint amountToken, uint amountFTM){ address pair = SushiswapV3Library.pairFor(factory, token, WFTM); uint value = approveMax ? type (uint).max : liquidity; ISushiswapV3Pair(pair).permit(msg.sender, address(this), value, deadline, v, r, s); (amountToken, amountFTM) = removeLiquidityFTM(token, liquidity, amountTokenMin, amountFTMMin, to, deadline);}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "liquidity"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountTokenMin"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountFTMMin"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "deadline"
                                    },
                                    {
                                        "type": "bool",
                                        "name": "approveMax"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "v"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "r"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "s"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "amountToken"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountFTM"
                                    }
                                ],
                                "reads": [
                                    [
                                        "factory",
                                        "",
                                        "SushiswapV3PermitRouter02"
                                    ],
                                    [
                                        "WFTM",
                                        "",
                                        "SushiswapV3PermitRouter02"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SushiswapV3PermitRouter02.removeLiquidityFTM",
                                        "SushiswapV3Library.pairFor",
                                        "SushiswapV3PermitRouter02.type"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "c0c5ba12728153e2a7178bf6ca03c93f"
                            }
                        ],
                        "_swap": [
                            {
                                "visibility": "internal",
                                "content": "function _swap(uint[] memory amounts, address[] memory path, address _to) internal virtual{ for (uint i; i < path.length - 1; i++){ (address input, address output) = (path[i], path[i + 1]); (address token0, ) = SushiswapV3Library.sortTokens(input, output); uint amountOut = amounts[i + 1]; (uint amount0Out, uint amount1Out) = input == token0 ? (uint(0), amountOut) : (amountOut, uint(0)); address to = i < path.length - 2 ? SushiswapV3Library.pairFor(factory, output, path[i + 2]) : _to; ISushiswapV3Pair(SushiswapV3Library.pairFor(factory, input, output)).swap( amount0Out, amount1Out, to, new bytes(0) );}}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint[] memory",
                                        "name": "amounts"
                                    },
                                    {
                                        "type": "address[] memory",
                                        "name": "path"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_to"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "factory",
                                        "",
                                        "SushiswapV3PermitRouter02"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SushiswapV3Library.sortTokens",
                                        "SushiswapV3Library.pairFor"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "08d3a066a0d2f6a15e543e4ab4c1f8fb"
                            }
                        ],
                        "swapExactTokensForTokensWithPermit": [
                            {
                                "visibility": "external",
                                "content": "function swapExactTokensForTokensWithPermit( address from, uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline, uint8 v, bytes32 r, bytes32 s ) external virtual ensure(deadline) returns (uint[] memory amounts){ amounts = SushiswapV3Library.getAmountsOut(factory, amountIn, path); require(amounts[amounts.length - 1] >= amountOutMin, 'SushiswapV3Router: INSUFFICIENT_OUTPUT_AMOUNT'); IERC20(path[0]).transferWithPermit(from, SushiswapV3Library.pairFor(factory, path[0], path[1]), amounts[0], deadline, v, r, s); _swap(amounts, path, to);}",
                                "modifiers": [
                                    "virtual",
                                    "ensure(deadline)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountIn"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountOutMin"
                                    },
                                    {
                                        "type": "address[] calldata",
                                        "name": "path"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "deadline"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "v"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "r"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "s"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint[] memory",
                                        "name": "amounts"
                                    }
                                ],
                                "reads": [
                                    [
                                        "factory",
                                        "",
                                        "SushiswapV3PermitRouter02"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SushiswapV3PermitRouter02.ensure",
                                        "SushiswapV3Library.pairFor",
                                        "SushiswapV3PermitRouter02._swap",
                                        "SushiswapV3Library.getAmountsOut"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "dea0a47e81c481f099580725fbdf82ff"
                            }
                        ],
                        "swapTokensForExactTokensWithPermit": [
                            {
                                "visibility": "external",
                                "content": "function swapTokensForExactTokensWithPermit( address from, uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline, uint8 v, bytes32 r, bytes32 s ) external virtual ensure(deadline) returns (uint[] memory amounts){ amounts = SushiswapV3Library.getAmountsIn(factory, amountOut, path); require(amounts[0] <= amountInMax, 'SushiswapV3Router: EXCESSIVE_INPUT_AMOUNT'); IERC20(path[0]).transferWithPermit(from, SushiswapV3Library.pairFor(factory, path[0], path[1]), amounts[0], deadline, v, r, s); _swap(amounts, path, to);}",
                                "modifiers": [
                                    "virtual",
                                    "ensure(deadline)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountOut"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountInMax"
                                    },
                                    {
                                        "type": "address[] calldata",
                                        "name": "path"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "deadline"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "v"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "r"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "s"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint[] memory",
                                        "name": "amounts"
                                    }
                                ],
                                "reads": [
                                    [
                                        "factory",
                                        "",
                                        "SushiswapV3PermitRouter02"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SushiswapV3PermitRouter02.ensure",
                                        "SushiswapV3Library.pairFor",
                                        "SushiswapV3PermitRouter02._swap",
                                        "SushiswapV3Library.getAmountsIn"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "b1394c87b81f9b10a0dbd54762de04c0"
                            }
                        ],
                        "swapExactFTMForTokens": [
                            {
                                "visibility": "external",
                                "content": "function swapExactFTMForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external virtual payable ensure(deadline) returns (uint[] memory amounts){ require(path[0] == WFTM, 'SushiswapV3Router: INVALID_PATH'); amounts = SushiswapV3Library.getAmountsOut(factory, msg.value, path); require(amounts[amounts.length - 1] >= amountOutMin, 'SushiswapV3Router: INSUFFICIENT_OUTPUT_AMOUNT'); IWFTM(WFTM).deposit{ value: amounts[0]} (); assert(IWFTM(WFTM).transfer(SushiswapV3Library.pairFor(factory, path[0], path[1]), amounts[0])); _swap(amounts, path, to);}",
                                "modifiers": [
                                    "virtual",
                                    "payable",
                                    "ensure(deadline)"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "amountOutMin"
                                    },
                                    {
                                        "type": "address[] calldata",
                                        "name": "path"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "deadline"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint[] memory",
                                        "name": "amounts"
                                    }
                                ],
                                "reads": [
                                    [
                                        "factory",
                                        "",
                                        "SushiswapV3PermitRouter02"
                                    ],
                                    [
                                        "WFTM",
                                        "",
                                        "SushiswapV3PermitRouter02"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SushiswapV3PermitRouter02.ensure",
                                        "SushiswapV3Library.pairFor",
                                        "SushiswapV3PermitRouter02._swap",
                                        "SushiswapV3Library.getAmountsOut"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "86e61d842dabb6a56b4f7c86dc0825e0"
                            }
                        ],
                        "swapTokensForExactFTMWithPermit": [
                            {
                                "visibility": "external",
                                "content": "function swapTokensForExactFTMWithPermit( address from, uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline, uint8 v, bytes32 r, bytes32 s ) external virtual ensure(deadline) returns (uint[] memory amounts){ require(path[path.length - 1] == WFTM, 'SushiswapV3Router: INVALID_PATH'); amounts = SushiswapV3Library.getAmountsIn(factory, amountOut, path); require(amounts[0] <= amountInMax, 'SushiswapV3Router: EXCESSIVE_INPUT_AMOUNT'); IERC20(path[0]).transferWithPermit(from, SushiswapV3Library.pairFor(factory, path[0], path[1]), amounts[0], deadline, v, r, s); _swap(amounts, path, address(this)); IWFTM(WFTM).withdraw(amounts[amounts.length - 1]); TransferHelper.safeTransferFTM(to, amounts[amounts.length - 1]);}",
                                "modifiers": [
                                    "virtual",
                                    "ensure(deadline)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountOut"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountInMax"
                                    },
                                    {
                                        "type": "address[] calldata",
                                        "name": "path"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "deadline"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "v"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "r"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "s"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint[] memory",
                                        "name": "amounts"
                                    }
                                ],
                                "reads": [
                                    [
                                        "factory",
                                        "",
                                        "SushiswapV3PermitRouter02"
                                    ],
                                    [
                                        "WFTM",
                                        "",
                                        "SushiswapV3PermitRouter02"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SushiswapV3Library.pairFor",
                                        "TransferHelper.safeTransferFTM",
                                        "SushiswapV3Library.getAmountsIn",
                                        "SushiswapV3PermitRouter02.ensure",
                                        "SushiswapV3PermitRouter02._swap"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "d06946eec76ef0fe2c9df29d0d1f80f9"
                            }
                        ],
                        "swapExactTokensForFTM": [
                            {
                                "visibility": "external",
                                "content": "function swapExactTokensForFTM( address from, uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline, uint8 v, bytes32 r, bytes32 s ) external virtual ensure(deadline) returns (uint[] memory amounts){ require(path[path.length - 1] == WFTM, 'SushiswapV3Router: INVALID_PATH'); amounts = SushiswapV3Library.getAmountsOut(factory, amountIn, path); require(amounts[amounts.length - 1] >= amountOutMin, 'SushiswapV3Router: INSUFFICIENT_OUTPUT_AMOUNT'); IERC20(path[0]).transferWithPermit(from, SushiswapV3Library.pairFor(factory, path[0], path[1]), amounts[0], deadline, v, r, s); _swap(amounts, path, address(this)); IWFTM(WFTM).withdraw(amounts[amounts.length - 1]); TransferHelper.safeTransferFTM(to, amounts[amounts.length - 1]);}",
                                "modifiers": [
                                    "virtual",
                                    "ensure(deadline)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountIn"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountOutMin"
                                    },
                                    {
                                        "type": "address[] calldata",
                                        "name": "path"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "deadline"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "v"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "r"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "s"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint[] memory",
                                        "name": "amounts"
                                    }
                                ],
                                "reads": [
                                    [
                                        "factory",
                                        "",
                                        "SushiswapV3PermitRouter02"
                                    ],
                                    [
                                        "WFTM",
                                        "",
                                        "SushiswapV3PermitRouter02"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SushiswapV3Library.pairFor",
                                        "TransferHelper.safeTransferFTM",
                                        "SushiswapV3Library.getAmountsOut",
                                        "SushiswapV3PermitRouter02.ensure",
                                        "SushiswapV3PermitRouter02._swap"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "e1bb39ef3597520dcb109602a9b75ae0"
                            }
                        ],
                        "swapFTMForExactTokens": [
                            {
                                "visibility": "external",
                                "content": "function swapFTMForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline) external virtual payable ensure(deadline) returns (uint[] memory amounts){ require(path[0] == WFTM, 'SushiswapV3Router: INVALID_PATH'); amounts = SushiswapV3Library.getAmountsIn(factory, amountOut, path); require(amounts[0] <= msg.value, 'SushiswapV3Router: EXCESSIVE_INPUT_AMOUNT'); IWFTM(WFTM).deposit{ value: amounts[0]} (); assert(IWFTM(WFTM).transfer(SushiswapV3Library.pairFor(factory, path[0], path[1]), amounts[0])); _swap(amounts, path, to); if (msg.value > amounts[0]) TransferHelper.safeTransferFTM(msg.sender, msg.value - amounts[0]);}",
                                "modifiers": [
                                    "virtual",
                                    "payable",
                                    "ensure(deadline)"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "amountOut"
                                    },
                                    {
                                        "type": "address[] calldata",
                                        "name": "path"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "deadline"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint[] memory",
                                        "name": "amounts"
                                    }
                                ],
                                "reads": [
                                    [
                                        "factory",
                                        "",
                                        "SushiswapV3PermitRouter02"
                                    ],
                                    [
                                        "WFTM",
                                        "",
                                        "SushiswapV3PermitRouter02"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SushiswapV3Library.pairFor",
                                        "TransferHelper.safeTransferFTM",
                                        "SushiswapV3Library.getAmountsIn",
                                        "SushiswapV3PermitRouter02.ensure",
                                        "SushiswapV3PermitRouter02._swap"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "24e1d550d4bda81e45fea178955b54c5"
                            }
                        ],
                        "quote": [
                            {
                                "visibility": "public",
                                "content": "function quote(uint amountA, uint reserveA, uint reserveB) public pure virtual returns (uint amountB){ return SushiswapV3Library.quote(amountA, reserveA, reserveB);}",
                                "modifiers": [
                                    "pure",
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "amountA"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "reserveA"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "reserveB"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "amountB"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SushiswapV3Library.quote"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "e286e44787502e79e570cd95fa1c6dc4"
                            }
                        ],
                        "getAmountOut": [
                            {
                                "visibility": "public",
                                "content": "function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) public pure virtual returns (uint amountOut){ return SushiswapV3Library.getAmountOut(amountIn, reserveIn, reserveOut);}",
                                "modifiers": [
                                    "pure",
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "amountIn"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "reserveIn"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "reserveOut"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "amountOut"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SushiswapV3Library.getAmountOut"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "842560c0613da02230fc276d211a3669"
                            }
                        ],
                        "getAmountIn": [
                            {
                                "visibility": "public",
                                "content": "function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) public pure virtual returns (uint amountIn){ return SushiswapV3Library.getAmountIn(amountOut, reserveIn, reserveOut);}",
                                "modifiers": [
                                    "pure",
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "amountOut"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "reserveIn"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "reserveOut"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "amountIn"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SushiswapV3Library.getAmountIn"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "a725a411d7ee6e0c56def9f734fb3fde"
                            }
                        ],
                        "getAmountsOut": [
                            {
                                "visibility": "public",
                                "content": "function getAmountsOut(uint amountIn, address[] memory path) public view virtual returns (uint[] memory amounts){ return SushiswapV3Library.getAmountsOut(factory, amountIn, path);}",
                                "modifiers": [
                                    "view",
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "amountIn"
                                    },
                                    {
                                        "type": "address[] memory",
                                        "name": "path"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint[] memory",
                                        "name": "amounts"
                                    }
                                ],
                                "reads": [
                                    [
                                        "factory",
                                        "",
                                        "SushiswapV3PermitRouter02"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SushiswapV3Library.getAmountsOut"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "94f1f420cfce750ee92f1c294a2ec332"
                            }
                        ],
                        "getAmountsIn": [
                            {
                                "visibility": "public",
                                "content": "function getAmountsIn(uint amountOut, address[] memory path) public view virtual returns (uint[] memory amounts){ return SushiswapV3Library.getAmountsIn(factory, amountOut, path);}",
                                "modifiers": [
                                    "view",
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "amountOut"
                                    },
                                    {
                                        "type": "address[] memory",
                                        "name": "path"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint[] memory",
                                        "name": "amounts"
                                    }
                                ],
                                "reads": [
                                    [
                                        "factory",
                                        "",
                                        "SushiswapV3PermitRouter02"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SushiswapV3Library.getAmountsIn"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "e203d0ed6eef6f59f012e9ff573b5446"
                            }
                        ]
                    },
                    "modifiers": {
                        "ensure": {
                            "parameters": [
                                {
                                    "type": "uint",
                                    "name": "deadline"
                                }
                            ],
                            "content": "modifier ensure(uint deadline){ require(deadline >= block.timestamp, 'SushiswapV3Router: EXPIRED'); _;}",
                            "reads": [],
                            "writes": [],
                            "external_calls": [],
                            "md5": "c83deabf5200aaf45056cf9b19b4ee72"
                        }
                    },
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "uint": "SafeMathSushiswap"
                    }
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "SushiswapV3Library.sortTokens": "e3214c34842511194e4a7b2389b496ca",
                "SushiswapV3Library.pairFor": "0966039bc6d80270f06e5d9760ee5973",
                "SushiswapV3Library.getReserves": "9d97c428063f3175a1f329f0834bc13e",
                "SushiswapV3Library.getAmountOut": "74415ff9dfbf3c37decf69022325ee8d",
                "SushiswapV3Library.getAmountIn": "46fc8df45f9b8f938805caf9f015760a",
                "SushiswapV3Library.quote": "138a4d8e7ce6a28e0daecaa93cf0c1c7",
                "SushiswapV3PermitRouter02._addLiquidity": "6283db9be54db64bb2126747851a501b",
                "SushiswapV3PermitRouter02.ensure": "c83deabf5200aaf45056cf9b19b4ee72",
                "TransferHelper.safeTransferFTM": "68862d69fd5b66216c75132a0c6f9a30",
                "SushiswapV3PermitRouter02.removeLiquidity": "698237bbfcafb66f69258419ceead3ac",
                "TransferHelper.safeTransfer": "3f5488f5b132ce36f3d9090a02d85295",
                "SushiswapV3PermitRouter02.removeLiquidityFTM": "ff6a75be8e5811b0ec91916120185340",
                "SushiswapV3Library.getAmountsOut": "3c9cab4cf125c8673edf087fdc422bd0",
                "SushiswapV3PermitRouter02._swap": "08d3a066a0d2f6a15e543e4ab4c1f8fb",
                "SushiswapV3Library.getAmountsIn": "55a9033bdb4354d09c084fb2b66ce841"
            },
            "md5": "02a8432e58ceef4f3194f4d033abb5ba"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\AnyCall-V7\\OwnableUpgradeable.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\AnyCall-V7\\OwnableUpgradeable.sol",
            "filename": "OwnableUpgradeable.sol",
            "imported_contracts": {},
            "contracts": {
                "AddressUpgradeable": {
                    "type": {
                        "__CT__": true,
                        "value": 2
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "isContract": [
                            {
                                "visibility": "internal",
                                "content": "function isContract(address account) internal view returns (bool){ return account.code.length > 0;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "account"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "d5972f1432570efe297b754cd2693d6f"
                            }
                        ],
                        "sendValue": [
                            {
                                "visibility": "internal",
                                "content": "function sendValue(address payable recipient, uint256 amount) internal{ require(address(this).balance >= amount, \"Address: insufficient balance\"); (bool success, ) = recipient.call{ value: amount} (\"\"); require(success, \"Address: unable to send value, recipient may have reverted\");}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address payable",
                                        "name": "recipient"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "4213f1701c2999f67f11de98a51e01f6"
                            }
                        ],
                        "functionCall": [
                            {
                                "visibility": "internal",
                                "content": "function functionCall(address target, bytes memory data) internal returns (bytes memory){ return functionCall(target, data, \"Address: low-level call failed\");}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "target"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "data"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AddressUpgradeable.functionCall",
                                        "AddressUpgradeable.functionCallWithValue"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "9bd9227b4301edafa41944a5a4cc096d"
                            },
                            {
                                "visibility": "internal",
                                "content": "function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory){ return functionCallWithValue(target, data, 0, errorMessage);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "target"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "data"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "errorMessage"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AddressUpgradeable.functionCall",
                                        "AddressUpgradeable.functionCallWithValue"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "3deb235bd39105633ff4aa02a367005e"
                            }
                        ],
                        "functionCallWithValue": [
                            {
                                "visibility": "internal",
                                "content": "function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory){ return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "target"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "data"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AddressUpgradeable.verifyCallResult",
                                        "AddressUpgradeable.functionCallWithValue",
                                        "AddressUpgradeable.isContract"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "e318cf9d6fc0d1d8455ee479a7548ba2"
                            },
                            {
                                "visibility": "internal",
                                "content": "function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory){ require(address(this).balance >= value, \"Address: insufficient balance for call\"); require(isContract(target), \"Address: call to non- contract \"); (bool success, bytes memory returndata) = target.call{ value: value} (data); return verifyCallResult(success, returndata, errorMessage);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "target"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "data"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "errorMessage"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AddressUpgradeable.verifyCallResult",
                                        "AddressUpgradeable.functionCallWithValue",
                                        "AddressUpgradeable.isContract"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "e5ef5c80e3f7edacb669876c8d0bdeda"
                            }
                        ],
                        "functionStaticCall": [
                            {
                                "visibility": "internal",
                                "content": "function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory){ return functionStaticCall(target, data, \"Address: low-level static call failed\");}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "target"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "data"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AddressUpgradeable.verifyCallResult",
                                        "target.staticcall",
                                        "AddressUpgradeable.functionStaticCall",
                                        "AddressUpgradeable.isContract"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "994685aae3cda8dbbf0ffec7f803d344"
                            },
                            {
                                "visibility": "internal",
                                "content": "function functionStaticCall( address target, bytes memory data, string memory errorMessage ) internal view returns (bytes memory){ require(isContract(target), \"Address: static call to non- contract \"); (bool success, bytes memory returndata) = target.staticcall(data); return verifyCallResult(success, returndata, errorMessage);}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "target"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "data"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "errorMessage"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AddressUpgradeable.verifyCallResult",
                                        "target.staticcall",
                                        "AddressUpgradeable.functionStaticCall",
                                        "AddressUpgradeable.isContract"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "ecc83687edc03f1dbae68952e8efe2c3"
                            }
                        ],
                        "verifyCallResult": [
                            {
                                "visibility": "internal",
                                "content": "function verifyCallResult( bool success, bytes memory returndata, string memory errorMessage ) internal pure returns (bytes memory){ if (success){ return returndata;} else{ if (returndata.length > 0){ assembly{ let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size)}} else{ revert(errorMessage);}}}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bool",
                                        "name": "success"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "returndata"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "errorMessage"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "595b1e5bcf25838a84e8abc3e73dc129"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "Initializable": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": true,
                    "inherits": [],
                    "state_variables": {
                        "_initialized": {
                            "type": "uint8",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint8 private _initialized;"
                        },
                        "_initializing": {
                            "type": "bool",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "bool private _initializing;"
                        }
                    },
                    "functions": {
                        "_disableInitializers": [
                            {
                                "visibility": "internal",
                                "content": "function _disableInitializers() internal virtual{ require(!_initializing, \"Initializable: contract is initializing\"); if (_initialized < type (uint8).max){ _initialized = type (uint8).max; emit Initialized( type (uint8).max);}}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [
                                    [
                                        "_initialized",
                                        "",
                                        "Initializable"
                                    ],
                                    [
                                        "_initializing",
                                        "",
                                        "Initializable"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_initialized",
                                        "",
                                        "Initializable"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Initializable.type"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "ed9a063536644864e1b18ca8f1bcc6a9"
                            }
                        ]
                    },
                    "modifiers": {
                        "initializer": {
                            "parameters": [],
                            "content": "modifier initializer(){ bool isTopLevelCall = !_initializing; require( (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1), \"Initializable: contract is already initialized\" ); _initialized = 1; if (isTopLevelCall){ _initializing = true;} _; if (isTopLevelCall){ _initializing = false; emit Initialized(1);}}",
                            "reads": [
                                [
                                    "_initialized",
                                    "",
                                    "Initializable"
                                ],
                                [
                                    "_initializing",
                                    "",
                                    "Initializable"
                                ]
                            ],
                            "writes": [
                                [
                                    "_initialized",
                                    "",
                                    "Initializable"
                                ],
                                [
                                    "_initializing",
                                    "",
                                    "Initializable"
                                ]
                            ],
                            "external_calls": {
                                "__set__": true,
                                "values": [
                                    "AddressUpgradeable.isContract"
                                ]
                            },
                            "md5": "319a89ab9d2834e2aa4d9f74c10ee085"
                        },
                        "reinitializer": {
                            "parameters": [
                                {
                                    "type": "uint8",
                                    "name": "version"
                                }
                            ],
                            "content": "modifier reinitializer(uint8 version){ require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\"); _initialized = version; _initializing = true; _; _initializing = false; emit Initialized(version);}",
                            "reads": [
                                [
                                    "_initialized",
                                    "",
                                    "Initializable"
                                ],
                                [
                                    "_initializing",
                                    "",
                                    "Initializable"
                                ]
                            ],
                            "writes": [
                                [
                                    "_initialized",
                                    "",
                                    "Initializable"
                                ],
                                [
                                    "_initializing",
                                    "",
                                    "Initializable"
                                ]
                            ],
                            "external_calls": [],
                            "md5": "cc253d6e6a28a0a885ffc20460167c1a"
                        },
                        "onlyInitializing": {
                            "parameters": [],
                            "content": "modifier onlyInitializing(){ require(_initializing, \"Initializable: contract is not initializing\"); _;}",
                            "reads": [
                                [
                                    "_initializing",
                                    "",
                                    "Initializable"
                                ]
                            ],
                            "writes": [],
                            "external_calls": [],
                            "md5": "9aa43424d4ca4ac38d1414b683de0171"
                        }
                    },
                    "structs": {},
                    "events": {
                        "Initialized": {
                            "event": "Initialized",
                            "content": "Initialized(uint8 version)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "ContextUpgradeable": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": true,
                    "inherits": [
                        "is",
                        "Initializable"
                    ],
                    "state_variables": {
                        "__gap": {
                            "type": "uint256[50]",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256[50] private __gap;"
                        }
                    },
                    "functions": {
                        "__Context_init": [
                            {
                                "visibility": "internal",
                                "content": "function __Context_init() internal onlyInitializing{}",
                                "modifiers": [
                                    "onlyInitializing"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ContextUpgradeable.onlyInitializing"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "51711f974026a47cf07ddd644d9d6314"
                            }
                        ],
                        "__Context_init_unchained": [
                            {
                                "visibility": "internal",
                                "content": "function __Context_init_unchained() internal onlyInitializing{}",
                                "modifiers": [
                                    "onlyInitializing"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ContextUpgradeable.onlyInitializing"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "b455fef82ed6bfd2959d8c51c633ee72"
                            }
                        ],
                        "_msgSender": [
                            {
                                "visibility": "internal",
                                "content": "function _msgSender() internal view virtual returns (address){ return msg.sender;}",
                                "modifiers": [
                                    "view",
                                    "virtual"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "3bc534219d7c704e82b1271e27e1e9f4"
                            }
                        ],
                        "_msgData": [
                            {
                                "visibility": "internal",
                                "content": "function _msgData() internal view virtual returns (bytes calldata){ return msg.data;}",
                                "modifiers": [
                                    "view",
                                    "virtual"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "bytes calldata",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c1cd6682c49c03f9b0f4ec879236408a"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "OwnableUpgradeable": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": true,
                    "inherits": [
                        "is",
                        "Initializable",
                        "ContextUpgradeable"
                    ],
                    "state_variables": {
                        "_owner": {
                            "type": "address",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address private _owner;"
                        },
                        "__gap": {
                            "type": "uint256[49]",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256[49] private __gap;"
                        }
                    },
                    "functions": {
                        "__Ownable_init": [
                            {
                                "visibility": "internal",
                                "content": "function __Ownable_init() internal onlyInitializing{ __Ownable_init_unchained();}",
                                "modifiers": [
                                    "onlyInitializing"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ContextUpgradeable.onlyInitializing",
                                        "OwnableUpgradeable.__Ownable_init_unchained"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "44fcf94abcb0d2c66ce3e37a497edc8f"
                            }
                        ],
                        "__Ownable_init_unchained": [
                            {
                                "visibility": "internal",
                                "content": "function __Ownable_init_unchained() internal onlyInitializing{ _transferOwnership(_msgSender());}",
                                "modifiers": [
                                    "onlyInitializing"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "OwnableUpgradeable._transferOwnership",
                                        "ContextUpgradeable.onlyInitializing",
                                        "OwnableUpgradeable._msgSender"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "3b504a3884e033490deaf74fead3a48e"
                            }
                        ],
                        "owner": [
                            {
                                "visibility": "public",
                                "content": "function owner() public view virtual returns (address){ return _owner;}",
                                "modifiers": [
                                    "view",
                                    "virtual"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_owner",
                                        "",
                                        "OwnableUpgradeable"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c000c329207e63e4293ec575de9eb28a"
                            }
                        ],
                        "_checkOwner": [
                            {
                                "visibility": "internal",
                                "content": "function _checkOwner() internal view virtual{ require(owner() == _msgSender(), \"Ownable: caller is not the owner\");}",
                                "modifiers": [
                                    "view",
                                    "virtual"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "OwnableUpgradeable.owner",
                                        "OwnableUpgradeable._msgSender"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "e5e005d7adac2d25dba9788a40cee105"
                            }
                        ],
                        "renounceOwnership": [
                            {
                                "visibility": "public",
                                "content": "function renounceOwnership() public virtual onlyOwner{ _transferOwnership(address(0));}",
                                "modifiers": [
                                    "virtual",
                                    "onlyOwner"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "OwnableUpgradeable._transferOwnership",
                                        "OwnableUpgradeable.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "8681199fd134b528e368ae053a4153df"
                            }
                        ],
                        "transferOwnership": [
                            {
                                "visibility": "public",
                                "content": "function transferOwnership(address newOwner) public virtual onlyOwner{ require(newOwner != address(0), \"Ownable: new owner is the zero address\"); _transferOwnership(newOwner);}",
                                "modifiers": [
                                    "virtual",
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "newOwner"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "OwnableUpgradeable._transferOwnership",
                                        "OwnableUpgradeable.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "03e524f71217fb5b3a29866055e9c31d"
                            }
                        ],
                        "_transferOwnership": [
                            {
                                "visibility": "internal",
                                "content": "function _transferOwnership(address newOwner) internal virtual{ address oldOwner = _owner; _owner = newOwner; emit OwnershipTransferred(oldOwner, newOwner);}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "newOwner"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_owner",
                                        "",
                                        "OwnableUpgradeable"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_owner",
                                        "",
                                        "OwnableUpgradeable"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "a02e4901485cd8c78e4e4b73a0aa53b5"
                            }
                        ]
                    },
                    "modifiers": {
                        "onlyOwner": {
                            "parameters": [],
                            "content": "modifier onlyOwner(){ _checkOwner(); _;}",
                            "reads": [],
                            "writes": [],
                            "external_calls": {
                                "__set__": true,
                                "values": [
                                    "OwnableUpgradeable._checkOwner"
                                ]
                            },
                            "md5": "c5a518feff109806e8b681a11a2ae056"
                        }
                    },
                    "structs": {},
                    "events": {
                        "OwnershipTransferred": {
                            "event": "OwnershipTransferred",
                            "content": "OwnershipTransferred(address indexed previousOwner, address indexed newOwner)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "AddressUpgradeable.functionCall": "9bd9227b4301edafa41944a5a4cc096d",
                "AddressUpgradeable.functionCallWithValue": "e318cf9d6fc0d1d8455ee479a7548ba2",
                "AddressUpgradeable.isContract": "d5972f1432570efe297b754cd2693d6f",
                "AddressUpgradeable.verifyCallResult": "595b1e5bcf25838a84e8abc3e73dc129",
                "AddressUpgradeable.functionStaticCall": "994685aae3cda8dbbf0ffec7f803d344",
                "OwnableUpgradeable.__Ownable_init_unchained": "3b504a3884e033490deaf74fead3a48e",
                "OwnableUpgradeable._transferOwnership": "a02e4901485cd8c78e4e4b73a0aa53b5",
                "OwnableUpgradeable._checkOwner": "e5e005d7adac2d25dba9788a40cee105",
                "OwnableUpgradeable.owner": "c000c329207e63e4293ec575de9eb28a",
                "OwnableUpgradeable.onlyOwner": "c5a518feff109806e8b681a11a2ae056"
            },
            "md5": "d9cf60ad24b1c529cfed62ff723a99b0"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\AnyCall-V7\\AnyCallProxyV7.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\AnyCall-V7\\AnyCallProxyV7.sol",
            "filename": "AnyCallProxyV7.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\AnyCall-V7\\OwnableUpgradeable.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "ReentrantLock": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {
                        "locked": {
                            "type": "bool",
                            "visibility": "internal",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "bool locked;"
                        }
                    },
                    "functions": {},
                    "modifiers": {
                        "lock": {
                            "parameters": [],
                            "content": "modifier lock(){ require(locked); locked = true; _; locked = false;}",
                            "reads": [
                                [
                                    "locked",
                                    "",
                                    "ReentrantLock"
                                ]
                            ],
                            "writes": [
                                [
                                    "locked",
                                    "",
                                    "ReentrantLock"
                                ]
                            ],
                            "external_calls": [],
                            "md5": "bdf0215382d37e9a6e7188610a1dc48f"
                        }
                    },
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "Administrable": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {
                        "admin": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public admin;"
                        },
                        "pendingAdmin": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public pendingAdmin;"
                        }
                    },
                    "functions": {
                        "setAdmin": [
                            {
                                "visibility": "internal",
                                "content": "function setAdmin(address admin_) internal{ admin = admin_; emit LogSetAdmin(admin_);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "admin_"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "admin",
                                        "",
                                        "Administrable"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "admin",
                                        "",
                                        "Administrable"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "8ded29928dfe98b088b996f1d3b4e7dd"
                            }
                        ],
                        "transferAdmin": [
                            {
                                "visibility": "external",
                                "content": "function transferAdmin(address newAdmin) external onlyAdmin{ address oldAdmin = pendingAdmin; pendingAdmin = newAdmin; emit LogTransferAdmin(oldAdmin, newAdmin);}",
                                "modifiers": [
                                    "onlyAdmin"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "newAdmin"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "pendingAdmin",
                                        "",
                                        "Administrable"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "pendingAdmin",
                                        "",
                                        "Administrable"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Administrable.onlyAdmin"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "fcf4b07f2eec8fdbb1891e7fc43df302"
                            }
                        ],
                        "acceptAdmin": [
                            {
                                "visibility": "external",
                                "content": "function acceptAdmin() external{ require(msg.sender == pendingAdmin); admin = pendingAdmin; pendingAdmin = address(0); emit LogAcceptAdmin(admin);}",
                                "modifiers": [],
                                "parameters": [],
                                "returns": [],
                                "reads": [
                                    [
                                        "admin",
                                        "",
                                        "Administrable"
                                    ],
                                    [
                                        "pendingAdmin",
                                        "",
                                        "Administrable"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "admin",
                                        "",
                                        "Administrable"
                                    ],
                                    [
                                        "pendingAdmin",
                                        "",
                                        "Administrable"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "e3e8b83d9abd9b41d4402ddd9e18cd97"
                            }
                        ]
                    },
                    "modifiers": {
                        "onlyAdmin": {
                            "parameters": [],
                            "content": "modifier onlyAdmin(){ require(msg.sender == admin); _;}",
                            "reads": [
                                [
                                    "admin",
                                    "",
                                    "Administrable"
                                ]
                            ],
                            "writes": [],
                            "external_calls": [],
                            "md5": "09edb7de44e02ee8faf76bcd37da4f4f"
                        }
                    },
                    "structs": {},
                    "events": {
                        "LogSetAdmin": {
                            "event": "LogSetAdmin",
                            "content": "LogSetAdmin(address admin)"
                        },
                        "LogTransferAdmin": {
                            "event": "LogTransferAdmin",
                            "content": "LogTransferAdmin(address oldadmin, address newadmin)"
                        },
                        "LogAcceptAdmin": {
                            "event": "LogAcceptAdmin",
                            "content": "LogAcceptAdmin(address admin)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "Pausable": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "Administrable"
                    ],
                    "state_variables": {
                        "paused": {
                            "type": "bool",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "bool public paused;"
                        }
                    },
                    "functions": {
                        "setPaused": [
                            {
                                "visibility": "external",
                                "content": "function setPaused(bool _paused) external onlyAdmin{ paused = _paused;}",
                                "modifiers": [
                                    "onlyAdmin"
                                ],
                                "parameters": [
                                    {
                                        "type": "bool",
                                        "name": "_paused"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "paused",
                                        "",
                                        "Pausable"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "paused",
                                        "",
                                        "Pausable"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Administrable.onlyAdmin"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "839c369687627f91b23b920124e9c5b2"
                            }
                        ]
                    },
                    "modifiers": {
                        "whenNotPaused": {
                            "parameters": [],
                            "content": "modifier whenNotPaused(){ require(!paused, \"paused\"); _;}",
                            "reads": [
                                [
                                    "paused",
                                    "",
                                    "Pausable"
                                ]
                            ],
                            "writes": [],
                            "external_calls": [],
                            "md5": "6c1b18697d8069350061290f0e25aa1a"
                        }
                    },
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "MPCControllable": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {
                        "mpc": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public mpc;"
                        },
                        "pendingMPC": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public pendingMPC;"
                        }
                    },
                    "functions": {
                        "changeMPC": [
                            {
                                "visibility": "external",
                                "content": "function changeMPC(address _mpc) external onlyMPC{ pendingMPC = _mpc; emit ChangeMPC(mpc, _mpc, block.timestamp);}",
                                "modifiers": [
                                    "onlyMPC"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_mpc"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "mpc",
                                        "",
                                        "MPCControllable"
                                    ],
                                    [
                                        "pendingMPC",
                                        "",
                                        "MPCControllable"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "pendingMPC",
                                        "",
                                        "MPCControllable"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "MPCControllable.onlyMPC"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "419ce3ca43dedd2ab0ebc79e1b03ef83"
                            }
                        ],
                        "applyMPC": [
                            {
                                "visibility": "external",
                                "content": "function applyMPC() external{ require(msg.sender == pendingMPC); emit ApplyMPC(mpc, pendingMPC, block.timestamp); mpc = pendingMPC; pendingMPC = address(0);}",
                                "modifiers": [],
                                "parameters": [],
                                "returns": [],
                                "reads": [
                                    [
                                        "mpc",
                                        "",
                                        "MPCControllable"
                                    ],
                                    [
                                        "pendingMPC",
                                        "",
                                        "MPCControllable"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "mpc",
                                        "",
                                        "MPCControllable"
                                    ],
                                    [
                                        "pendingMPC",
                                        "",
                                        "MPCControllable"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "18ecc423604cc80f9ea1c08451351088"
                            }
                        ]
                    },
                    "modifiers": {
                        "onlyMPC": {
                            "parameters": [],
                            "content": "modifier onlyMPC(){ require(msg.sender == mpc, \"only MPC\"); _;}",
                            "reads": [
                                [
                                    "mpc",
                                    "",
                                    "MPCControllable"
                                ]
                            ],
                            "writes": [],
                            "external_calls": [],
                            "md5": "355ea375101fec602c726e21fcf62357"
                        }
                    },
                    "structs": {},
                    "events": {
                        "ChangeMPC": {
                            "event": "ChangeMPC",
                            "content": "ChangeMPC( address indexed oldMPC, address indexed newMPC, uint256 timestamp )"
                        },
                        "ApplyMPC": {
                            "event": "ApplyMPC",
                            "content": "ApplyMPC( address indexed oldMPC, address indexed newMPC, uint256 timestamp )"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "IAnyCallApp": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "anyExecute": [
                            {
                                "visibility": "external",
                                "content": "function anyExecute( uint256 fromChainId, address sender, bytes calldata data, uint256 callNonce ) external returns (bool success, bytes memory result);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "fromChainId"
                                    },
                                    {
                                        "type": "address",
                                        "name": "sender"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "data"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "callNonce"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": "success"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "result"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "337c4dfaee217ea9e014e3b36459837d"
                            }
                        ],
                        "anyFallback": [
                            {
                                "visibility": "external",
                                "content": "function anyFallback( uint256 toChainId, address receiver, bytes calldata data, uint256 callNonce, bytes calldata reason ) external returns (bool success, bytes memory result);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "toChainId"
                                    },
                                    {
                                        "type": "address",
                                        "name": "receiver"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "data"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "callNonce"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "reason"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": "success"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "result"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "41d66f3cc7bc5fb8bbb550274e6004c3"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                },
                "AnyCallExecutor": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {
                        "anycallproxy": {
                            "type": "address",
                            "visibility": "internal",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address anycallproxy;"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (address anycallproxy_){ anycallproxy = anycallproxy_;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "anycallproxy_"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "anycallproxy",
                                        "",
                                        "AnyCallExecutor"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "anycallproxy",
                                        "",
                                        "AnyCallExecutor"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "3e6ada965043c36cf9c4489f13125a4e"
                            }
                        ],
                        "appExec": [
                            {
                                "visibility": "external",
                                "content": "function appExec( uint256 fromChainId, address sender, address receiver, bytes calldata data, uint256 callNonce ) external onlyAnyCallProxy returns (bool success, bytes memory result){ return IAnyCallApp(receiver).anyExecute( fromChainId, sender, data, callNonce );}",
                                "modifiers": [
                                    "onlyAnyCallProxy"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "fromChainId"
                                    },
                                    {
                                        "type": "address",
                                        "name": "sender"
                                    },
                                    {
                                        "type": "address",
                                        "name": "receiver"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "data"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "callNonce"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": "success"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "result"
                                    }
                                ],
                                "reads": [
                                    [
                                        "callNonce",
                                        "",
                                        "AnyCallProxyV7"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyCallExecutor.onlyAnyCallProxy"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "d45b4e88b2a7d6ac92bc4ea045caa813"
                            }
                        ],
                        "appFallback": [
                            {
                                "visibility": "external",
                                "content": "function appFallback( address sender, uint256 toChainId, address receiver, bytes calldata data, uint256 callNonce, bytes calldata reason ) external onlyAnyCallProxy returns (bool success, bytes memory result){ return IAnyCallApp(sender).anyFallback( toChainId, receiver, data, callNonce, reason );}",
                                "modifiers": [
                                    "onlyAnyCallProxy"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "sender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "toChainId"
                                    },
                                    {
                                        "type": "address",
                                        "name": "receiver"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "data"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "callNonce"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "reason"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": "success"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "result"
                                    }
                                ],
                                "reads": [
                                    [
                                        "callNonce",
                                        "",
                                        "AnyCallProxyV7"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyCallExecutor.onlyAnyCallProxy"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "175b6b9249e58696076e0f2d9fa3681a"
                            }
                        ]
                    },
                    "modifiers": {
                        "onlyAnyCallProxy": {
                            "parameters": [],
                            "content": "modifier onlyAnyCallProxy(){ require(msg.sender == anycallproxy); _;}",
                            "reads": [
                                [
                                    "anycallproxy",
                                    "",
                                    "AnyCallExecutor"
                                ]
                            ],
                            "writes": [],
                            "external_calls": [],
                            "md5": "9ec9e53aae28d0f96f51e42f7bb08c30"
                        }
                    },
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "IAnyCallProxyV7": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "executor": [
                            {
                                "visibility": "external",
                                "content": "function executor() external view returns (address);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "41484b4426579bd6766e59536dd32d10"
                            }
                        ],
                        "anyCall": [
                            {
                                "visibility": "external",
                                "content": "function anyCall(CallArgs memory _callArgs) external payable returns (bytes32 requestID);",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "CallArgs memory",
                                        "name": "_callArgs"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": "requestID"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": true,
                                "md5": "e0289be6db623de6cbffdee007571d4f"
                            }
                        ],
                        "retry": [
                            {
                                "visibility": "external",
                                "content": "function retry( bytes32 requestID, ExecArgs calldata _execArgs, uint128 executionGasLimit, uint128 recursionGasLimit ) external payable returns (bytes32);",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "requestID"
                                    },
                                    {
                                        "type": "ExecArgs calldata",
                                        "name": "_execArgs"
                                    },
                                    {
                                        "type": "uint128",
                                        "name": "executionGasLimit"
                                    },
                                    {
                                        "type": "uint128",
                                        "name": "recursionGasLimit"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": true,
                                "md5": "034bbf28ac21bc714d1ed738e7de5880"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": [
                        [
                            "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\AnyCall-V7\\AnyCallProxyV7.sol",
                            "AnyCallProxyV7"
                        ]
                    ]
                },
                "IUniGas": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "ethToUniGas": [
                            {
                                "visibility": "external",
                                "content": "function ethToUniGas(uint256 amount) external view virtual returns (uint256);",
                                "modifiers": [
                                    "view",
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "7b32b3fff73b1f3516c79b2f0eed0f90"
                            }
                        ],
                        "uniGasToEth": [
                            {
                                "visibility": "external",
                                "content": "function uniGasToEth(uint256 amount) external view virtual returns (uint256);",
                                "modifiers": [
                                    "view",
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "01bdee3041484c0c36caa0df582ee91b"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                },
                "AnyCallProxyV7": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "IAnyCallProxyV7",
                        "ReentrantLock",
                        "Pausable",
                        "MPCControllable",
                        "OwnableUpgradeable"
                    ],
                    "state_variables": {
                        "Status_Sent": {
                            "type": "uint8",
                            "visibility": "internal",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "0",
                            "content": "uint8 constant Status_Sent = 0;"
                        },
                        "Status_Fail": {
                            "type": "uint8",
                            "visibility": "internal",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "1",
                            "content": "uint8 constant Status_Fail = 1;"
                        },
                        "Status_Fallback_Success": {
                            "type": "uint8",
                            "visibility": "internal",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "2",
                            "content": "uint8 constant Status_Fallback_Success = 2;"
                        },
                        "callNonce": {
                            "type": "uint256",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256 public callNonce;"
                        },
                        "execNonce": {
                            "type": "uint256",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256 public execNonce;"
                        },
                        "executor": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public executor;"
                        },
                        "anycallStatus": {
                            "type": "mapping(bytes32 => AnycallStatus)",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(bytes32 => AnycallStatus) public anycallStatus;"
                        },
                        "balanceOf": {
                            "type": "mapping(address => int256)",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(address => int256) public balanceOf;"
                        },
                        "execFeeAllowance": {
                            "type": "mapping(address => uint256)",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(address => uint256) public execFeeAllowance;"
                        },
                        "recrFeeAllowance": {
                            "type": "mapping(address => uint256)",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(address => uint256) public recrFeeAllowance;"
                        },
                        "uniGas": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public uniGas;"
                        },
                        "gasOverhead": {
                            "type": "uint256",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256 public gasOverhead;"
                        },
                        "gasReserved": {
                            "type": "uint256",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256 public gasReserved;"
                        },
                        "config": {
                            "type": "Config",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "Config public config;"
                        },
                        "context": {
                            "type": "Context",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "Context public context;"
                        }
                    },
                    "functions": {
                        "initiate": [
                            {
                                "visibility": "public",
                                "content": "function initiate( address _mpc, address _uniGas, uint256 _gasOverhead, uint256 autoFallbackExecutionGasCost, uint256 _gasReserved ) public initializer{ __Context_init_unchained(); __Ownable_init_unchained(); mpc = _mpc; setAdmin(msg.sender); executor = address(new AnyCallExecutor(address(this))); uniGas = _uniGas; gasOverhead = _gasOverhead; gasReserved = _gasReserved; config = Config(autoFallbackExecutionGasCost);}",
                                "modifiers": [
                                    "initializer"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_mpc"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_uniGas"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_gasOverhead"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "autoFallbackExecutionGasCost"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_gasReserved"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "mpc",
                                        "",
                                        "MPCControllable"
                                    ],
                                    [
                                        "executor",
                                        "",
                                        "AnyCallProxyV7"
                                    ],
                                    [
                                        "uniGas",
                                        "",
                                        "AnyCallProxyV7"
                                    ],
                                    [
                                        "gasOverhead",
                                        "",
                                        "AnyCallProxyV7"
                                    ],
                                    [
                                        "gasReserved",
                                        "",
                                        "AnyCallProxyV7"
                                    ],
                                    [
                                        "config",
                                        "",
                                        "AnyCallProxyV7"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "mpc",
                                        "",
                                        "MPCControllable"
                                    ],
                                    [
                                        "executor",
                                        "",
                                        "AnyCallProxyV7"
                                    ],
                                    [
                                        "uniGas",
                                        "",
                                        "AnyCallProxyV7"
                                    ],
                                    [
                                        "gasOverhead",
                                        "",
                                        "AnyCallProxyV7"
                                    ],
                                    [
                                        "gasReserved",
                                        "",
                                        "AnyCallProxyV7"
                                    ],
                                    [
                                        "config",
                                        "",
                                        "AnyCallProxyV7"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyCallProxyV7.__Ownable_init_unchained",
                                        "AnyCallProxyV7.setAdmin",
                                        "AnyCallProxyV7.__Context_init_unchained",
                                        "AnyCallProxyV7.initializer"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "5c85fb8e34ab5bcdc3e5388dfa681ad9"
                            }
                        ],
                        "setConfig": [
                            {
                                "visibility": "public",
                                "content": "function setConfig(Config calldata _config) public onlyAdmin{ config = _config; emit UpdateConfig(config);}",
                                "modifiers": [
                                    "onlyAdmin"
                                ],
                                "parameters": [
                                    {
                                        "type": "Config calldata",
                                        "name": "_config"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "config",
                                        "",
                                        "AnyCallProxyV7"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "config",
                                        "",
                                        "AnyCallProxyV7"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Administrable.onlyAdmin"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "c4515e14d1685ad260b31413ae28751a"
                            }
                        ],
                        "setUniGasOracle": [
                            {
                                "visibility": "public",
                                "content": "function setUniGasOracle(address _uniGas) public onlyAdmin{ uniGas = _uniGas; emit UpdateUniGasOracle(_uniGas);}",
                                "modifiers": [
                                    "onlyAdmin"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_uniGas"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "uniGas",
                                        "",
                                        "AnyCallProxyV7"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "uniGas",
                                        "",
                                        "AnyCallProxyV7"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Administrable.onlyAdmin"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "639838045c881ae79e93119af1b305da"
                            }
                        ],
                        "checkUniGas": [
                            {
                                "visibility": "internal",
                                "content": "function checkUniGas(uint256 destChainCost) internal{ uint256 sourceChainCost = IUniGas(uniGas).ethToUniGas( tx.gasprice * (gasOverhead + config.autoFallbackExecutionGasCost) ); int256 totalCost = int256(sourceChainCost + destChainCost); if (context.uniGasLeft >= totalCost){ (bool success1, ) = msg.sender.call{ value: msg.value} (\"\"); require(success1); context.uniGasLeft -= int256(totalCost);} else{ int256 fee = totalCost - (context.uniGasLeft > 0 ? context.uniGasLeft : int256(0)); assert(fee > 0); context.uniGasLeft = 0; uint256 ethFee = IUniGas(uniGas).uniGasToEth(uint256(fee)); (bool success2, ) = mpc.call{ value: ethFee} (\"\"); require(success2); if (ethFee < msg.value){ (bool success3, ) = msg.sender.call{ value: msg.value - ethFee} ( \"\" ); require(success3);}} assert(context.uniGasLeft >= 0);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "destChainCost"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "mpc",
                                        "",
                                        "MPCControllable"
                                    ],
                                    [
                                        "uniGas",
                                        "",
                                        "AnyCallProxyV7"
                                    ],
                                    [
                                        "gasOverhead",
                                        "",
                                        "AnyCallProxyV7"
                                    ],
                                    [
                                        "config",
                                        "",
                                        "AnyCallProxyV7"
                                    ],
                                    [
                                        "context",
                                        "",
                                        "AnyCallProxyV7"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "context",
                                        "",
                                        "AnyCallProxyV7"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c51b8f10feda4e89f62c408b2345d037"
                            }
                        ],
                        "calcRequestID": [
                            {
                                "visibility": "public",
                                "content": "function calcRequestID(uint256 fromChainID, uint256 _callNonce) public pure returns (bytes32){ return keccak256(abi.encode(fromChainID, _callNonce));}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "fromChainID"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_callNonce"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "f27b84daf3548b970a9a28b8ac773fbc"
                            }
                        ],
                        "calcExecArgsHash": [
                            {
                                "visibility": "public",
                                "content": "function calcExecArgsHash(ExecArgs memory args) public pure returns (bytes32){ return keccak256(abi.encode(args));}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "ExecArgs memory",
                                        "name": "args"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "6ca6b881cdf59af55f39743dba6425bf"
                            }
                        ],
                        "anyCall": [
                            {
                                "visibility": "external",
                                "content": "function anyCall(CallArgs memory _callArgs) external payable whenNotPaused returns (bytes32 requestID){ callNonce++; requestID = calcRequestID(block.chainid, callNonce); ExecArgs memory _execArgs = ExecArgs( uint128(block.chainid), uint160(msg.sender), _callArgs.toChainId, _callArgs.receiver, _callArgs.fallbackAddress, uint128(callNonce), _callArgs.executionGasLimit, _callArgs.recursionGasLimit, _callArgs.data ); anycallStatus[requestID].execHash = calcExecArgsHash(_execArgs); anycallStatus[requestID].status = Status_Sent; anycallStatus[requestID].timestamp = block.timestamp; checkUniGas(_callArgs.executionGasLimit + _callArgs.recursionGasLimit); emit LogAnyCall(requestID, _execArgs); return requestID;}",
                                "modifiers": [
                                    "payable",
                                    "whenNotPaused"
                                ],
                                "parameters": [
                                    {
                                        "type": "CallArgs memory",
                                        "name": "_callArgs"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": "requestID"
                                    }
                                ],
                                "reads": [
                                    [
                                        "Status_Sent",
                                        "",
                                        "AnyCallProxyV7"
                                    ],
                                    [
                                        "callNonce",
                                        "",
                                        "AnyCallProxyV7"
                                    ],
                                    [
                                        "anycallStatus",
                                        "",
                                        "AnyCallProxyV7"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyCallProxyV7.checkUniGas",
                                        "AnyCallProxyV7.calcRequestID",
                                        "AnyCallProxyV7.calcExecArgsHash",
                                        "AnyCallProxyV7.whenNotPaused"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "ae8f3b67e3516680380d1227a4403036"
                            }
                        ],
                        "anyExec": [
                            {
                                "visibility": "external",
                                "content": "function anyExec(ExecArgs calldata _execArgs) external lock whenNotPaused onlyMPC{ execNonce++; bytes32 requestID = calcRequestID( _execArgs.fromChainId, _execArgs.callNonce ); require(_execArgs.toChainId == block.chainid, \"wrong chain id\"); bool success; bytes memory result; int256 recursionBudget = int128(_execArgs.recursionGasLimit) + int256(recrFeeAllowance[address(_execArgs.receiver)]); context.uniGasLeft += recursionBudget; uint256 gasLimit = IUniGas(uniGas).uniGasToEth( uint256(_execArgs.executionGasLimit) + execFeeAllowance[address(_execArgs.receiver)] ) / tx.gasprice - gasReserved; uint256 executionGasUsage = gasleft(); try this._anyExec(_execArgs, gasLimit) returns (bool succ, bytes memory res){ (success, result) = (succ, res);} catch Error(string memory reason){ result = bytes(reason);} catch (bytes memory reason){ result = reason;} if (success){ emit LogAnyExec(requestID, _execArgs, execNonce, result);} else{ emit LogAnyFallback( requestID, calcExecArgsHash(_execArgs), _execArgs, execNonce, result );} executionGasUsage = executionGasUsage - gasleft(); int256 appExecutionUniGasUsage = int256(IUniGas(uniGas).ethToUniGas(executionGasUsage * tx.gasprice)); appExecutionUniGasUsage -= int128(_execArgs.executionGasLimit); execFeeAllowance[address(_execArgs.receiver)] -= appExecutionUniGasUsage > 0 ? uint256(appExecutionUniGasUsage) : 0; int256 appRecursionUsage = recursionBudget - context.uniGasLeft; appRecursionUsage -= int128(_execArgs.recursionGasLimit); recrFeeAllowance[address(_execArgs.receiver)] -= appRecursionUsage > 0 ? uint256(appRecursionUsage) : 0; balanceOf[address(_execArgs.receiver)] -= appExecutionUniGasUsage; balanceOf[address(_execArgs.receiver)] -= appRecursionUsage; context.uniGasLeft = 0; if (balanceOf[address(_execArgs.receiver)] < 0){ emit Arrear( address(_execArgs.receiver), balanceOf[address(_execArgs.receiver)] );} context.uniGasLeft = 0;}",
                                "modifiers": [
                                    "lock",
                                    "whenNotPaused",
                                    "onlyMPC"
                                ],
                                "parameters": [
                                    {
                                        "type": "ExecArgs calldata",
                                        "name": "_execArgs"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "callNonce",
                                        "",
                                        "AnyCallProxyV7"
                                    ],
                                    [
                                        "execNonce",
                                        "",
                                        "AnyCallProxyV7"
                                    ],
                                    [
                                        "balanceOf",
                                        "",
                                        "AnyCallProxyV7"
                                    ],
                                    [
                                        "execFeeAllowance",
                                        "",
                                        "AnyCallProxyV7"
                                    ],
                                    [
                                        "recrFeeAllowance",
                                        "",
                                        "AnyCallProxyV7"
                                    ],
                                    [
                                        "uniGas",
                                        "",
                                        "AnyCallProxyV7"
                                    ],
                                    [
                                        "gasReserved",
                                        "",
                                        "AnyCallProxyV7"
                                    ],
                                    [
                                        "context",
                                        "",
                                        "AnyCallProxyV7"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "balanceOf",
                                        "",
                                        "AnyCallProxyV7"
                                    ],
                                    [
                                        "execFeeAllowance",
                                        "",
                                        "AnyCallProxyV7"
                                    ],
                                    [
                                        "recrFeeAllowance",
                                        "",
                                        "AnyCallProxyV7"
                                    ],
                                    [
                                        "context",
                                        "",
                                        "AnyCallProxyV7"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyCallProxyV7._anyExec",
                                        "MPCControllable.onlyMPC",
                                        "AnyCallProxyV7.whenNotPaused",
                                        "AnyCallProxyV7.calcRequestID",
                                        "AnyCallProxyV7.lock",
                                        "AnyCallProxyV7.calcExecArgsHash"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "40c2077dced96f7d3258a0cacde7fcc3"
                            }
                        ],
                        "_anyExec": [
                            {
                                "visibility": "external",
                                "content": "function _anyExec(ExecArgs calldata _execArgs, uint256 gasLimit) external onlyInternal returns (bool succ, bytes memory res){ (succ, res) = AnyCallExecutor(executor).appExec{ gas: gasLimit} ( _execArgs.fromChainId, address(_execArgs.sender), address(_execArgs.receiver), _execArgs.data, _execArgs.callNonce ); assert(context.uniGasLeft >= 0); return (succ, res);}",
                                "modifiers": [
                                    "onlyInternal"
                                ],
                                "parameters": [
                                    {
                                        "type": "ExecArgs calldata",
                                        "name": "_execArgs"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "gasLimit"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": "succ"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "res"
                                    }
                                ],
                                "reads": [
                                    [
                                        "callNonce",
                                        "",
                                        "AnyCallProxyV7"
                                    ],
                                    [
                                        "executor",
                                        "",
                                        "AnyCallProxyV7"
                                    ],
                                    [
                                        "context",
                                        "",
                                        "AnyCallProxyV7"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "context",
                                        "",
                                        "AnyCallProxyV7"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyCallProxyV7.onlyInternal"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "1ee69396be080befaad8dee55316c017"
                            }
                        ],
                        "autoFallback": [
                            {
                                "visibility": "external",
                                "content": "function autoFallback(ExecArgs calldata _execArgs, bytes calldata reason) external onlyMPC returns (bool success, bytes memory result){ bytes32 requestID = calcRequestID( _execArgs.fromChainId, _execArgs.callNonce ); if (_execArgs.fallbackAddress == uint160(address(0))){ anycallStatus[requestID].status = Status_Fail; emit Fallback(requestID, _execArgs, reason, false); return (false, \"no fallback address\");} (success, result) = _fallback( _execArgs, reason, config.autoFallbackExecutionGasCost ); if (success){ anycallStatus[requestID].status = Status_Fallback_Success;} else{ anycallStatus[requestID].status = Status_Fail; anycallStatus[requestID].reason = reason;} emit Fallback(requestID, _execArgs, reason, success); return (success, result);}",
                                "modifiers": [
                                    "onlyMPC"
                                ],
                                "parameters": [
                                    {
                                        "type": "ExecArgs calldata",
                                        "name": "_execArgs"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "reason"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": "success"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "result"
                                    }
                                ],
                                "reads": [
                                    [
                                        "Status_Fail",
                                        "",
                                        "AnyCallProxyV7"
                                    ],
                                    [
                                        "Status_Fallback_Success",
                                        "",
                                        "AnyCallProxyV7"
                                    ],
                                    [
                                        "callNonce",
                                        "",
                                        "AnyCallProxyV7"
                                    ],
                                    [
                                        "anycallStatus",
                                        "",
                                        "AnyCallProxyV7"
                                    ],
                                    [
                                        "config",
                                        "",
                                        "AnyCallProxyV7"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyCallProxyV7.calcRequestID",
                                        "AnyCallProxyV7._fallback",
                                        "MPCControllable.onlyMPC"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "345feb722b37961271dc90f34c9c4615"
                            }
                        ],
                        "anyFallback": [
                            {
                                "visibility": "external",
                                "content": "function anyFallback(bytes32 requestID, ExecArgs calldata _execArgs) external payable returns (bool success, bytes memory result){ require( requestID == calcRequestID(_execArgs.fromChainId, _execArgs.callNonce), \"request ID not match\" ); require(_execArgs.fromChainId == block.chainid, \"wrong chain id\"); require(_execArgs.callNonce <= callNonce, \"wrong nonce\"); require( anycallStatus[requestID].status == Status_Fail, \"can not retry succeeded request\" ); require( anycallStatus[requestID].execHash == calcExecArgsHash(_execArgs), \"wrong execution hash\" ); (success, ) = mpc.call{ value: msg.value} (\"\"); require(success, \"pay fallback fee failed\"); uint256 gasLimit = msg.value / tx.gasprice; (success, result) = _fallback( _execArgs, anycallStatus[requestID].reason, gasLimit ); if (success){ anycallStatus[requestID].status = Status_Fallback_Success;} emit Fallback( requestID, _execArgs, anycallStatus[requestID].reason, success );}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "requestID"
                                    },
                                    {
                                        "type": "ExecArgs calldata",
                                        "name": "_execArgs"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": "success"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "result"
                                    }
                                ],
                                "reads": [
                                    [
                                        "mpc",
                                        "",
                                        "MPCControllable"
                                    ],
                                    [
                                        "Status_Fail",
                                        "",
                                        "AnyCallProxyV7"
                                    ],
                                    [
                                        "Status_Fallback_Success",
                                        "",
                                        "AnyCallProxyV7"
                                    ],
                                    [
                                        "callNonce",
                                        "",
                                        "AnyCallProxyV7"
                                    ],
                                    [
                                        "anycallStatus",
                                        "",
                                        "AnyCallProxyV7"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyCallProxyV7.calcRequestID",
                                        "AnyCallProxyV7._fallback",
                                        "AnyCallProxyV7.calcExecArgsHash"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "dd90c24f6eac812aaadf51eea315218c"
                            }
                        ],
                        "_fallback": [
                            {
                                "visibility": "internal",
                                "content": "function _fallback( ExecArgs memory _execArgs, bytes memory reason, uint256 gasLimit ) internal lock whenNotPaused returns (bool success, bytes memory result){ require(_execArgs.fromChainId == block.chainid, \"wrong chain id\"); try AnyCallExecutor(executor).appFallback{ gas: gasLimit} ( address(_execArgs.fallbackAddress), _execArgs.toChainId, address(_execArgs.receiver), _execArgs.data, _execArgs.callNonce, reason ) returns (bool succ, bytes memory res){ (success, result) = (succ, res);} catch Error(string memory _reason){ result = bytes(_reason);} catch (bytes memory _reason){ result = _reason;}}",
                                "modifiers": [
                                    "lock",
                                    "whenNotPaused"
                                ],
                                "parameters": [
                                    {
                                        "type": "ExecArgs memory",
                                        "name": "_execArgs"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "reason"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "gasLimit"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": "success"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "result"
                                    }
                                ],
                                "reads": [
                                    [
                                        "callNonce",
                                        "",
                                        "AnyCallProxyV7"
                                    ],
                                    [
                                        "executor",
                                        "",
                                        "AnyCallProxyV7"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "callNonce",
                                        "",
                                        "AnyCallProxyV7"
                                    ],
                                    [
                                        "executor",
                                        "",
                                        "AnyCallProxyV7"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyCallProxyV7.whenNotPaused",
                                        "AnyCallProxyV7.lock"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "568b99475bb89cabf7469abede34d945"
                            }
                        ],
                        "retry": [
                            {
                                "visibility": "external",
                                "content": "function retry( bytes32 requestID, ExecArgs calldata _execArgs, uint128 executionGasLimit, uint128 recursionGasLimit ) external payable whenNotPaused returns (bytes32){ require( requestID == calcRequestID(_execArgs.fromChainId, _execArgs.callNonce), \"request ID not match\" ); require(_execArgs.fromChainId == block.chainid, \"wrong chain id\"); require(_execArgs.callNonce <= callNonce, \"wrong nonce\"); require( anycallStatus[requestID].status == 1, \"can not retry succeeded request\" ); require( anycallStatus[requestID].execHash == calcExecArgsHash(_execArgs), \"wrong execution hash\" ); anycallStatus[requestID].status = 0; checkUniGas(executionGasLimit + recursionGasLimit); callNonce++; requestID = calcRequestID(block.chainid, callNonce); ExecArgs memory _execArgs_2 = ExecArgs( uint128(block.chainid), uint160(msg.sender), _execArgs.toChainId, _execArgs.receiver, _execArgs.fallbackAddress, uint128(callNonce), executionGasLimit, recursionGasLimit, _execArgs.data ); anycallStatus[requestID].execHash = calcExecArgsHash(_execArgs_2); anycallStatus[requestID].status = Status_Sent; emit LogAnyCall(requestID, _execArgs_2); return requestID;}",
                                "modifiers": [
                                    "payable",
                                    "whenNotPaused"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "requestID"
                                    },
                                    {
                                        "type": "ExecArgs calldata",
                                        "name": "_execArgs"
                                    },
                                    {
                                        "type": "uint128",
                                        "name": "executionGasLimit"
                                    },
                                    {
                                        "type": "uint128",
                                        "name": "recursionGasLimit"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "Status_Sent",
                                        "",
                                        "AnyCallProxyV7"
                                    ],
                                    [
                                        "callNonce",
                                        "",
                                        "AnyCallProxyV7"
                                    ],
                                    [
                                        "anycallStatus",
                                        "",
                                        "AnyCallProxyV7"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyCallProxyV7.checkUniGas",
                                        "AnyCallProxyV7.calcRequestID",
                                        "AnyCallProxyV7.calcExecArgsHash",
                                        "AnyCallProxyV7.whenNotPaused"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "241f519bf88ee607848adea2d59f5220"
                            }
                        ],
                        "deposit": [
                            {
                                "visibility": "public",
                                "content": "function deposit(address app) public payable{ uint256 uniGasAmount = IUniGas(uniGas).ethToUniGas(msg.value); balanceOf[app] += int256(uniGasAmount); (bool success, ) = mpc.call{ value: msg.value} (\"\"); require(success); emit Deposit(app, msg.value, uniGasAmount);}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "app"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "mpc",
                                        "",
                                        "MPCControllable"
                                    ],
                                    [
                                        "balanceOf",
                                        "",
                                        "AnyCallProxyV7"
                                    ],
                                    [
                                        "uniGas",
                                        "",
                                        "AnyCallProxyV7"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "balanceOf",
                                        "",
                                        "AnyCallProxyV7"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": true,
                                "md5": "bd6a2cf5b6937bf1ce2e6e6358012d1f"
                            }
                        ],
                        "withdraw": [
                            {
                                "visibility": "public",
                                "content": "function withdraw(address app, uint256 amount) public returns (uint256 ethAmount){ require(msg.sender == app, \"not allowed\"); balanceOf[app] -= int256(amount); ethAmount = IUniGas(uniGas).uniGasToEth(amount); (bool success, ) = app.call{ value: ethAmount} (\"\"); require(success); emit Withdraw(app, ethAmount, amount); return ethAmount;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "app"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": "ethAmount"
                                    }
                                ],
                                "reads": [
                                    [
                                        "balanceOf",
                                        "",
                                        "AnyCallProxyV7"
                                    ],
                                    [
                                        "uniGas",
                                        "",
                                        "AnyCallProxyV7"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "balanceOf",
                                        "",
                                        "AnyCallProxyV7"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "d7ee67e4074913462bb42925625188c1"
                            }
                        ],
                        "approve": [
                            {
                                "visibility": "external",
                                "content": "function approve( address app, uint256 execFeeAllowance_, uint256 recrFeeAllowance_ ) external{ require(msg.sender == app, \"not allowed\"); execFeeAllowance[app] = execFeeAllowance_; recrFeeAllowance[app] = recrFeeAllowance_; emit Approved(app, execFeeAllowance_, recrFeeAllowance_);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "app"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "execFeeAllowance_"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "recrFeeAllowance_"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "execFeeAllowance",
                                        "",
                                        "AnyCallProxyV7"
                                    ],
                                    [
                                        "recrFeeAllowance",
                                        "",
                                        "AnyCallProxyV7"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "execFeeAllowance",
                                        "",
                                        "AnyCallProxyV7"
                                    ],
                                    [
                                        "recrFeeAllowance",
                                        "",
                                        "AnyCallProxyV7"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "f3f178166be585b98fbbb5b0373b09c7"
                            }
                        ]
                    },
                    "modifiers": {
                        "onlyInternal": {
                            "parameters": [],
                            "content": "modifier onlyInternal(){ require(msg.sender == address(this)); _;}",
                            "reads": [],
                            "writes": [],
                            "external_calls": [],
                            "md5": "f510337868944547144a6924b0eaaea1"
                        }
                    },
                    "structs": {
                        "AnycallStatus": {
                            "content": "AnycallStatus{ uint8 status; bytes32 execHash; bytes reason; uint256 timestamp;}"
                        },
                        "Config": {
                            "content": "Config{ uint256 autoFallbackExecutionGasCost;}"
                        },
                        "Context": {
                            "content": "Context{ int256 uniGasLeft;}"
                        }
                    },
                    "events": {
                        "LogAnyCall": {
                            "event": "LogAnyCall",
                            "content": "LogAnyCall(bytes32 indexed requestID, ExecArgs _execArgs)"
                        },
                        "LogAnyExec": {
                            "event": "LogAnyExec",
                            "content": "LogAnyExec( bytes32 indexed requestID, ExecArgs _execArgs, uint256 _execNonce, bytes result )"
                        },
                        "LogAnyFallback": {
                            "event": "LogAnyFallback",
                            "content": "LogAnyFallback( bytes32 indexed requestID, bytes32 indexed hash, ExecArgs _execArgs, uint256 _execNonce, bytes reason )"
                        },
                        "Fallback": {
                            "event": "Fallback",
                            "content": "Fallback( bytes32 indexed requestID, ExecArgs _execArgs, bytes reason, bool success )"
                        },
                        "UpdateConfig": {
                            "event": "UpdateConfig",
                            "content": "UpdateConfig(Config indexed config)"
                        },
                        "UpdateStoreGas": {
                            "event": "UpdateStoreGas",
                            "content": "UpdateStoreGas(uint256 gasCost)"
                        },
                        "UpdateUniGasOracle": {
                            "event": "UpdateUniGasOracle",
                            "content": "UpdateUniGasOracle(address indexed uniGas)"
                        },
                        "Deposit": {
                            "event": "Deposit",
                            "content": "Deposit(address app, uint256 ethValue, uint256 uniGasValue)"
                        },
                        "Withdraw": {
                            "event": "Withdraw",
                            "content": "Withdraw(address app, uint256 ethValue, uint256 uniGasValue)"
                        },
                        "Approved": {
                            "event": "Approved",
                            "content": "Approved( address app, uint256 execFeeAllowance, uint256 recrFeeAllowance )"
                        },
                        "Arrear": {
                            "event": "Arrear",
                            "content": "Arrear(address app, int256 balance)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "Administrable.onlyAdmin": "09edb7de44e02ee8faf76bcd37da4f4f",
                "MPCControllable.onlyMPC": "355ea375101fec602c726e21fcf62357",
                "AnyCallExecutor.onlyAnyCallProxy": "9ec9e53aae28d0f96f51e42f7bb08c30",
                "AnyCallProxyV7.initializer": "319a89ab9d2834e2aa4d9f74c10ee085",
                "AnyCallProxyV7.__Ownable_init_unchained": "3b504a3884e033490deaf74fead3a48e",
                "AnyCallProxyV7.__Context_init_unchained": "b455fef82ed6bfd2959d8c51c633ee72",
                "AnyCallProxyV7.calcExecArgsHash": "6ca6b881cdf59af55f39743dba6425bf",
                "AnyCallProxyV7.calcRequestID": "f27b84daf3548b970a9a28b8ac773fbc",
                "AnyCallProxyV7.checkUniGas": "c51b8f10feda4e89f62c408b2345d037",
                "AnyCallProxyV7._anyExec": "1ee69396be080befaad8dee55316c017",
                "AnyCallProxyV7.onlyInternal": "f510337868944547144a6924b0eaaea1",
                "AnyCallProxyV7._fallback": "568b99475bb89cabf7469abede34d945"
            },
            "md5": "1b70fde92c317a121ee35ff7e266db38"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\AnyCall-V7\\TransparentUpgradeableProxy.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\AnyCall-V7\\TransparentUpgradeableProxy.sol",
            "filename": "TransparentUpgradeableProxy.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\AnyCall-V7\\TransparentUpgradeableProxy.sol\\openzeppelin\\contracts\\proxy\\ERC1967\\ERC1967Proxy.sol": {
                    "in_database": false,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "TransparentUpgradeableProxy": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "ERC1967Proxy"
                    ],
                    "state_variables": {},
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor ( address _logic, address admin_, bytes memory _data ) payable ERC1967Proxy(_logic, _data){ assert(_ADMIN_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.admin\")) - 1)); _changeAdmin(admin_);}",
                                "modifiers": [
                                    "payable",
                                    "ERC1967Proxy(_logic, _data)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_logic"
                                    },
                                    {
                                        "type": "address",
                                        "name": "admin_"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "_data"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": true,
                                "md5": "944be0ef66111d797114754b97bc4f7c"
                            }
                        ],
                        "admin": [
                            {
                                "visibility": "external",
                                "content": "function admin() external ifAdmin returns (address admin_){ admin_ = _getAdmin();}",
                                "modifiers": [
                                    "ifAdmin"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": "admin_"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "bbe19b1ef4c35a901f08b1e6c9dc4ea8"
                            }
                        ],
                        "implementation": [
                            {
                                "visibility": "external",
                                "content": "function implementation() external ifAdmin returns (address implementation_){ implementation_ = _implementation();}",
                                "modifiers": [
                                    "ifAdmin"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": "implementation_"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "6da436046ee0f44f4d275741013ed190"
                            }
                        ],
                        "changeAdmin": [
                            {
                                "visibility": "external",
                                "content": "function changeAdmin(address newAdmin) external virtual ifAdmin{ _changeAdmin(newAdmin);}",
                                "modifiers": [
                                    "virtual",
                                    "ifAdmin"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "newAdmin"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "5cb5065635ec37019f907b0e262d8947"
                            }
                        ],
                        "upgradeTo": [
                            {
                                "visibility": "external",
                                "content": "function upgradeTo(address newImplementation) external ifAdmin{ _upgradeToAndCall(newImplementation, bytes(\"\"), false);}",
                                "modifiers": [
                                    "ifAdmin"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "newImplementation"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "f374dfb2b722ca54c3d2f2dd2787720d"
                            }
                        ],
                        "upgradeToAndCall": [
                            {
                                "visibility": "external",
                                "content": "function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin{ _upgradeToAndCall(newImplementation, data, true);}",
                                "modifiers": [
                                    "payable",
                                    "ifAdmin"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "newImplementation"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "data"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": true,
                                "md5": "3c3182c4c4892edd46aa38827cc98313"
                            }
                        ],
                        "_admin": [
                            {
                                "visibility": "internal",
                                "content": "function _admin() internal view virtual returns (address){ return _getAdmin();}",
                                "modifiers": [
                                    "view",
                                    "virtual"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "87ead0f838a89c8ff04c6492344f8eeb"
                            }
                        ],
                        "_beforeFallback": [
                            {
                                "visibility": "internal",
                                "content": "function _beforeFallback() internal virtual override{ require(msg.sender != _getAdmin(), \"TransparentUpgradeableProxy: admin cannot fallback to proxy target\"); super._beforeFallback();}",
                                "modifiers": [
                                    "virtual",
                                    "override"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "dceb13530faefc37115d8ccd9dc07e9b"
                            }
                        ]
                    },
                    "modifiers": {
                        "ifAdmin": {
                            "parameters": [],
                            "content": "modifier ifAdmin(){ if (msg.sender == _getAdmin()){ _;} else{ _fallback();}}",
                            "reads": [],
                            "writes": [],
                            "external_calls": [],
                            "md5": "0e9e4517e954c00b6f2c6ef4134d6e67"
                        }
                    },
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "df2421bf55a7061e7eac17a66da769bb"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\AnyCall-V7\\ProxyAdmin.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\AnyCall-V7\\ProxyAdmin.sol",
            "filename": "ProxyAdmin.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\AnyCall-V7\\TransparentUpgradeableProxy.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\AnyCall-V7\\ProxyAdmin.sol\\openzeppelin\\contracts\\access\\Ownable.sol": {
                    "in_database": false,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "ProxyAdmin": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "Ownable"
                    ],
                    "state_variables": {},
                    "functions": {
                        "getProxyImplementation": [
                            {
                                "visibility": "public",
                                "content": "function getProxyImplementation(TransparentUpgradeableProxy proxy) public view virtual returns (address){ (bool success, bytes memory returndata) = address(proxy).staticcall(hex\"5c60da1b\"); require(success); return abi.decode(returndata, (address));}",
                                "modifiers": [
                                    "view",
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "TransparentUpgradeableProxy",
                                        "name": "proxy"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "TransparentUpgradeableProxy.staticcall"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "9bbf02fffe01201954e56f9bf7d62c5a"
                            }
                        ],
                        "getProxyAdmin": [
                            {
                                "visibility": "public",
                                "content": "function getProxyAdmin(TransparentUpgradeableProxy proxy) public view virtual returns (address){ (bool success, bytes memory returndata) = address(proxy).staticcall(hex\"f851a440\"); require(success); return abi.decode(returndata, (address));}",
                                "modifiers": [
                                    "view",
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "TransparentUpgradeableProxy",
                                        "name": "proxy"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "TransparentUpgradeableProxy.staticcall"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "584ee56cd5c5e77066fea943e6e7cb24"
                            }
                        ],
                        "changeProxyAdmin": [
                            {
                                "visibility": "public",
                                "content": "function changeProxyAdmin(TransparentUpgradeableProxy proxy, address newAdmin) public virtual onlyOwner{ proxy.changeAdmin(newAdmin);}",
                                "modifiers": [
                                    "virtual",
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "TransparentUpgradeableProxy",
                                        "name": "proxy"
                                    },
                                    {
                                        "type": "address",
                                        "name": "newAdmin"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "TransparentUpgradeableProxy.changeAdmin",
                                        "ProxyAdmin.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "32ccac8abb9bc6943b049a5444dc04c4"
                            }
                        ],
                        "upgrade": [
                            {
                                "visibility": "public",
                                "content": "function upgrade(TransparentUpgradeableProxy proxy, address implementation) public virtual onlyOwner{ proxy.upgradeTo(implementation);}",
                                "modifiers": [
                                    "virtual",
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "TransparentUpgradeableProxy",
                                        "name": "proxy"
                                    },
                                    {
                                        "type": "address",
                                        "name": "implementation"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "TransparentUpgradeableProxy.upgradeTo",
                                        "ProxyAdmin.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "f40d40d1ecf173142a94c4f15bfc9f2f"
                            }
                        ],
                        "upgradeAndCall": [
                            {
                                "visibility": "public",
                                "content": "function upgradeAndCall( TransparentUpgradeableProxy proxy, address implementation, bytes memory data ) public payable virtual onlyOwner{ proxy.upgradeToAndCall{ value: msg.value} (implementation, data);}",
                                "modifiers": [
                                    "payable",
                                    "virtual",
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "TransparentUpgradeableProxy",
                                        "name": "proxy"
                                    },
                                    {
                                        "type": "address",
                                        "name": "implementation"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "data"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ProxyAdmin.onlyOwner"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "ff41f12ba13a5d50805ada71948ae43f"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "TransparentUpgradeableProxy.changeAdmin": "5cb5065635ec37019f907b0e262d8947",
                "TransparentUpgradeableProxy.upgradeTo": "f374dfb2b722ca54c3d2f2dd2787720d"
            },
            "md5": "329640e1e379428ac38b47666e63d519"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\AnyCall-V7\\UniGas.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\AnyCall-V7\\UniGas.sol",
            "filename": "UniGas.sol",
            "imported_contracts": {},
            "contracts": {
                "IUniGas": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": true,
                    "inherits": [],
                    "state_variables": {
                        "ethPrice": {
                            "type": "uint256",
                            "visibility": "internal",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256 ethPrice;"
                        }
                    },
                    "functions": {
                        "ethToUniGas": [
                            {
                                "visibility": "public",
                                "content": "function ethToUniGas(uint256 amount) public view returns (uint256){ return amount * ethPrice / 1 ether;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "ethPrice",
                                        "",
                                        "IUniGas"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "94a802c2f512e1a7646a2f1de970ee44"
                            }
                        ],
                        "uniGasToEth": [
                            {
                                "visibility": "public",
                                "content": "function uniGasToEth(uint256 amount) public view returns (uint256){ return amount * 1 ether / ethPrice;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "ethPrice",
                                        "",
                                        "IUniGas"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "4ca0873909c31d662886c53f2c377a8d"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "UniGas": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "IUniGas"
                    ],
                    "state_variables": {
                        "trustedOracle": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public trustedOracle;"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (address oracle){ trustedOracle = oracle;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "oracle"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "trustedOracle",
                                        "",
                                        "UniGas"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "trustedOracle",
                                        "",
                                        "UniGas"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "24b9e439b945135878f7d6d8a6361881"
                            }
                        ],
                        "setEthPrice": [
                            {
                                "visibility": "public",
                                "content": "function setEthPrice(uint256 _ethPrice) public{ require(msg.sender == trustedOracle); ethPrice = _ethPrice;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "_ethPrice"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "ethPrice",
                                        "",
                                        "IUniGas"
                                    ],
                                    [
                                        "trustedOracle",
                                        "",
                                        "UniGas"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "ethPrice",
                                        "",
                                        "IUniGas"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "9e14e5ca03aead32a19c39633c6093b6"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "66131545ea0a9b7eb194f2b6b916b557"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\AnyCall-V7\\interfaces\\IAnyCallProxyV7.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\AnyCall-V7\\interfaces\\IAnyCallProxyV7.sol",
            "filename": "IAnyCallProxyV7.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\AnyCall-V7\\interfaces\\Types.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "IAnyCallProxyV7": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "executor": [
                            {
                                "visibility": "external",
                                "content": "function executor() external view returns (address);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "41484b4426579bd6766e59536dd32d10"
                            }
                        ],
                        "anyCall": [
                            {
                                "visibility": "external",
                                "content": "function anyCall(CallArgs memory _callArgs) external payable returns (bytes32 requestID);",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "CallArgs memory",
                                        "name": "_callArgs"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": "requestID"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": true,
                                "md5": "e0289be6db623de6cbffdee007571d4f"
                            }
                        ],
                        "retry": [
                            {
                                "visibility": "external",
                                "content": "function retry( bytes32 requestID, ExecArgs calldata _execArgs, uint128 executionGasLimit, uint128 recursionGasLimit ) external payable returns (bytes32);",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "requestID"
                                    },
                                    {
                                        "type": "ExecArgs calldata",
                                        "name": "_execArgs"
                                    },
                                    {
                                        "type": "uint128",
                                        "name": "executionGasLimit"
                                    },
                                    {
                                        "type": "uint128",
                                        "name": "recursionGasLimit"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": true,
                                "md5": "034bbf28ac21bc714d1ed738e7de5880"
                            }
                        ],
                        "deposit": [
                            {
                                "visibility": "external",
                                "content": "function deposit(address app) payable external;",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "app"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": true,
                                "md5": "643ab8955e504c9dc041719f6143a5b4"
                            }
                        ],
                        "withdraw": [
                            {
                                "visibility": "external",
                                "content": "function withdraw(address app, uint256 amount) external returns(uint256 ethAmount);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "app"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": "ethAmount"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "67e04f42dcf8298f8ee78188000c0c88"
                            }
                        ],
                        "approve": [
                            {
                                "visibility": "external",
                                "content": "function approve(address app, uint256 execFeeAllowance_, uint256 recrFeeAllowance_) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "app"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "execFeeAllowance_"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "recrFeeAllowance_"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "186a4710a0bcc66d60fc3519fae254f1"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "aa67727b967ca063a68a802216bb8f8f"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\AnyCall-V7\\interfaces\\IAnyCallSender.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\AnyCall-V7\\interfaces\\IAnyCallSender.sol",
            "filename": "IAnyCallSender.sol",
            "imported_contracts": {},
            "contracts": {
                "IAnyCallSender": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "anyFallback": [
                            {
                                "visibility": "external",
                                "content": "function anyFallback( uint256 toChainId, address receiver, bytes calldata data, uint256 callNonce, bytes calldata reason ) external returns (bool success, bytes memory result);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "toChainId"
                                    },
                                    {
                                        "type": "address",
                                        "name": "receiver"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "data"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "callNonce"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "reason"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": "success"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "result"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "41d66f3cc7bc5fb8bbb550274e6004c3"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": [
                        [
                            "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\AnyCall-V7\\interfaces\\IAnyCallApp.sol",
                            "IAnyCallApp"
                        ],
                        [
                            "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\AnyCall-V7\\clients\\AnyCallSender.sol",
                            "AnyCallSender"
                        ]
                    ]
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "c38e60d08a3f6c2c3e8ee7b24b648339"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\AnyCall-V7\\interfaces\\IAnyCallReceiver.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\AnyCall-V7\\interfaces\\IAnyCallReceiver.sol",
            "filename": "IAnyCallReceiver.sol",
            "imported_contracts": {},
            "contracts": {
                "IAnyCallReceiver": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "anyExecute": [
                            {
                                "visibility": "external",
                                "content": "function anyExecute( uint256 fromChainId, address sender, bytes calldata data, uint256 callNonce ) external returns (bool success, bytes memory result);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "fromChainId"
                                    },
                                    {
                                        "type": "address",
                                        "name": "sender"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "data"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "callNonce"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": "success"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "result"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "337c4dfaee217ea9e014e3b36459837d"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": [
                        [
                            "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\AnyCall-V7\\interfaces\\IAnyCallApp.sol",
                            "IAnyCallApp"
                        ],
                        [
                            "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\AnyCall-V7\\clients\\AnyCallReceiver.sol",
                            "AnyCallReceiver"
                        ]
                    ]
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "c94f424b1884498b571ff0f0d131d5ea"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\AnyCall-V7\\interfaces\\IAnyCallApp.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\AnyCall-V7\\interfaces\\IAnyCallApp.sol",
            "filename": "IAnyCallApp.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\AnyCall-V7\\interfaces\\IAnyCallSender.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\AnyCall-V7\\interfaces\\IAnyCallReceiver.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "IAnyCallApp": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "IAnyCallSender",
                        "IAnyCallReceiver"
                    ],
                    "state_variables": {},
                    "functions": {},
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": [
                        [
                            "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\AnyCall-V7\\clients\\AnyCallApp.sol",
                            "AnyCallApp"
                        ]
                    ]
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "2a0a73bed6ec18d1bc4451d3e6d60d77"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\AnyCall-V7\\clients\\AnyCallApp.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\AnyCall-V7\\clients\\AnyCallApp.sol",
            "filename": "AnyCallApp.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\Administrable.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\AnyCall-V7\\interfaces\\IAnyCallProxyV7.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\AnyCall-V7\\interfaces\\IAnyCallApp.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\AnyCall-V7\\interfaces\\Types.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "AnyCallApp": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": true,
                    "inherits": [
                        "is",
                        "Administrable",
                        "IAnyCallApp"
                    ],
                    "state_variables": {
                        "anyCallProxy": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public anyCallProxy;"
                        },
                        "isApprovedSender": {
                            "type": "mapping(uint256 => mapping(address => bool))",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(uint256 => mapping(address => bool)) public isApprovedSender;"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (address anyCallProxy_){ anyCallProxy = anyCallProxy_;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "anyCallProxy_"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "anyCallProxy",
                                        "",
                                        "AnyCallApp"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "anyCallProxy",
                                        "",
                                        "AnyCallApp"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "1e48659b6769eddee25b9339100bbb2f"
                            }
                        ],
                        "setSenders": [
                            {
                                "visibility": "public",
                                "content": "function setSenders( uint256[] memory chainIDs, address[] memory senders, bool[] memory allow ) public onlyAdmin{ for (uint256 i = 0; i < chainIDs.length; i++){ isApprovedSender[chainIDs[i]][senders[i]] = allow[i];}}",
                                "modifiers": [
                                    "onlyAdmin"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256[] memory",
                                        "name": "chainIDs"
                                    },
                                    {
                                        "type": "address[] memory",
                                        "name": "senders"
                                    },
                                    {
                                        "type": "bool[] memory",
                                        "name": "allow"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "isApprovedSender",
                                        "",
                                        "AnyCallApp"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "isApprovedSender",
                                        "",
                                        "AnyCallApp"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyCallApp.onlyAdmin"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "932ecb2423c22e2976e8e0c873a4d292"
                            }
                        ],
                        "setAnyCallProxy": [
                            {
                                "visibility": "public",
                                "content": "function setAnyCallProxy(address proxy) public onlyAdmin{ anyCallProxy = proxy;}",
                                "modifiers": [
                                    "onlyAdmin"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "proxy"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "anyCallProxy",
                                        "",
                                        "AnyCallApp"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "anyCallProxy",
                                        "",
                                        "AnyCallApp"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyCallApp.onlyAdmin"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "e22f495968632089aa4672673676acba"
                            }
                        ],
                        "_anyExecute": [
                            {
                                "visibility": "internal",
                                "content": "function _anyExecute( uint256 fromChainID, address sender, bytes calldata data, uint256 callNonce ) internal virtual returns (bool success, bytes memory result);",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "fromChainID"
                                    },
                                    {
                                        "type": "address",
                                        "name": "sender"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "data"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "callNonce"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": "success"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "result"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "e8af61516d9a57be66e46232ac422707"
                            }
                        ],
                        "anyExecute": [
                            {
                                "visibility": "external",
                                "content": "function anyExecute( uint256 fromChainId, address sender, bytes calldata data, uint256 callNonce ) external override onlyExecutor returns (bool success, bytes memory result){ require(isApprovedSender[fromChainId][sender], \"call not allowed\"); return _anyExecute(fromChainId, sender, data, callNonce);}",
                                "modifiers": [
                                    "override",
                                    "onlyExecutor"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "fromChainId"
                                    },
                                    {
                                        "type": "address",
                                        "name": "sender"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "data"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "callNonce"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": "success"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "result"
                                    }
                                ],
                                "reads": [
                                    [
                                        "isApprovedSender",
                                        "",
                                        "AnyCallApp"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyCallApp.onlyExecutor",
                                        "AnyCallApp._anyExecute"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "de61a103002163505752e00fec116d48"
                            }
                        ],
                        "_anyCall": [
                            {
                                "visibility": "internal",
                                "content": "function _anyCall(CallArgs memory _callArgs) internal{ IAnyCallProxyV7(anyCallProxy).anyCall{ value: msg.value} (_callArgs);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "CallArgs memory",
                                        "name": "_callArgs"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "anyCallProxy",
                                        "",
                                        "AnyCallApp"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyCallApp.IAnyCallProxyV7"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "e50efc7fc6a832c1c1d1d60462ad0e5d"
                            }
                        ],
                        "_anyFallback": [
                            {
                                "visibility": "internal",
                                "content": "function _anyFallback( uint256 toChainId, address receiver, bytes calldata data, uint256 callNonce, bytes calldata reason ) internal virtual returns (bool success, bytes memory result);",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "toChainId"
                                    },
                                    {
                                        "type": "address",
                                        "name": "receiver"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "data"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "callNonce"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "reason"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": "success"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "result"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "7e7453470cc6a1419e2202b09b744c1c"
                            }
                        ],
                        "anyFallback": [
                            {
                                "visibility": "external",
                                "content": "function anyFallback( uint256 toChainId, address receiver, bytes calldata data, uint256 callNonce, bytes calldata reason ) external override onlyExecutor returns (bool success, bytes memory result){ require( msg.sender == IAnyCallProxyV7(anyCallProxy).executor(), \"not allowed\" ); return _anyFallback(toChainId, receiver, data, callNonce, reason);}",
                                "modifiers": [
                                    "override",
                                    "onlyExecutor"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "toChainId"
                                    },
                                    {
                                        "type": "address",
                                        "name": "receiver"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "data"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "callNonce"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "reason"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": "success"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "result"
                                    }
                                ],
                                "reads": [
                                    [
                                        "anyCallProxy",
                                        "",
                                        "AnyCallApp"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyCallApp._anyFallback",
                                        "AnyCallApp.onlyExecutor",
                                        "AnyCallApp.IAnyCallProxyV7"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "c3c78dee207f29df3345e32fb7f83ea2"
                            }
                        ],
                        "depositAnyCallFee": [
                            {
                                "visibility": "public",
                                "content": "function depositAnyCallFee() public payable{ IAnyCallProxyV7(anyCallProxy).deposit(address(this));}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [
                                    [
                                        "anyCallProxy",
                                        "",
                                        "AnyCallApp"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyCallApp.IAnyCallProxyV7"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "a257ae8e79056fda6014a73d62c06d2f"
                            }
                        ],
                        "withdrawAnyCallFee": [
                            {
                                "visibility": "public",
                                "content": "function withdrawAnyCallFee(uint256 amount) public onlyAdmin{ uint256 ethAmount = IAnyCallProxyV7(anyCallProxy).withdraw( address(this), amount ); (bool success, ) = admin.call{ value: ethAmount} (\"\"); require(success);}",
                                "modifiers": [
                                    "onlyAdmin"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "anyCallProxy",
                                        "",
                                        "AnyCallApp"
                                    ],
                                    [
                                        "admin",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\Administrable.sol",
                                        "Administrable"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyCallApp.onlyAdmin",
                                        "AnyCallApp.IAnyCallProxyV7"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "7420898e56cb962cf2eb89506a26ead9"
                            }
                        ],
                        "approve": [
                            {
                                "visibility": "public",
                                "content": "function approve(uint256 execFeeAllowance_, uint256 recrFeeAllowance_) public onlyAdmin{ IAnyCallProxyV7(anyCallProxy).approve( address(this), execFeeAllowance_, recrFeeAllowance_ );}",
                                "modifiers": [
                                    "onlyAdmin"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "execFeeAllowance_"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "recrFeeAllowance_"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "anyCallProxy",
                                        "",
                                        "AnyCallApp"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyCallApp.onlyAdmin",
                                        "AnyCallApp.IAnyCallProxyV7"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "378e6fa5cbd2f0407c74ae70c40543fd"
                            }
                        ]
                    },
                    "modifiers": {
                        "onlyExecutor": {
                            "parameters": [],
                            "content": "modifier onlyExecutor(){ require(msg.sender == IAnyCallProxyV7(anyCallProxy).executor()); _;}",
                            "reads": [
                                [
                                    "anyCallProxy",
                                    "",
                                    "AnyCallApp"
                                ]
                            ],
                            "writes": [],
                            "external_calls": {
                                "__set__": true,
                                "values": [
                                    "AnyCallApp.IAnyCallProxyV7"
                                ]
                            },
                            "md5": "d29d63ecfff6bbb4a747af918171e79b"
                        }
                    },
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "AnyCallApp.onlyAdmin": "09edb7de44e02ee8faf76bcd37da4f4f",
                "AnyCallApp.onlyExecutor": "d29d63ecfff6bbb4a747af918171e79b",
                "AnyCallApp._anyExecute": "e8af61516d9a57be66e46232ac422707",
                "AnyCallApp._anyFallback": "7e7453470cc6a1419e2202b09b744c1c"
            },
            "md5": "17e6f356ad9134588087378935960899"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\AnyCall-V7\\clients\\AnyCallReceiver.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\AnyCall-V7\\clients\\AnyCallReceiver.sol",
            "filename": "AnyCallReceiver.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\Administrable.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\AnyCall-V7\\interfaces\\IAnyCallProxyV7.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\AnyCall-V7\\interfaces\\IAnyCallReceiver.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "AnyCallReceiver": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": true,
                    "inherits": [
                        "is",
                        "Administrable",
                        "IAnyCallReceiver"
                    ],
                    "state_variables": {
                        "anyCallProxy": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public anyCallProxy;"
                        },
                        "isApprovedSender": {
                            "type": "mapping(uint256 => mapping(address => bool))",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(uint256 => mapping(address => bool)) public isApprovedSender;"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (address anyCallProxy_){ anyCallProxy = anyCallProxy_;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "anyCallProxy_"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "anyCallProxy",
                                        "",
                                        "AnyCallReceiver"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "anyCallProxy",
                                        "",
                                        "AnyCallReceiver"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "1e48659b6769eddee25b9339100bbb2f"
                            }
                        ],
                        "setSenders": [
                            {
                                "visibility": "public",
                                "content": "function setSenders( uint256[] memory chainIDs, address[] memory senders, bool[] memory allow ) public onlyAdmin{ for (uint256 i = 0; i < chainIDs.length; i++){ isApprovedSender[chainIDs[i]][senders[i]] = allow[i];}}",
                                "modifiers": [
                                    "onlyAdmin"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256[] memory",
                                        "name": "chainIDs"
                                    },
                                    {
                                        "type": "address[] memory",
                                        "name": "senders"
                                    },
                                    {
                                        "type": "bool[] memory",
                                        "name": "allow"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "isApprovedSender",
                                        "",
                                        "AnyCallReceiver"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "isApprovedSender",
                                        "",
                                        "AnyCallReceiver"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyCallReceiver.onlyAdmin"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "932ecb2423c22e2976e8e0c873a4d292"
                            }
                        ],
                        "setAnyCallProxy": [
                            {
                                "visibility": "public",
                                "content": "function setAnyCallProxy(address proxy) public onlyAdmin{ anyCallProxy = proxy;}",
                                "modifiers": [
                                    "onlyAdmin"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "proxy"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "anyCallProxy",
                                        "",
                                        "AnyCallReceiver"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "anyCallProxy",
                                        "",
                                        "AnyCallReceiver"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyCallReceiver.onlyAdmin"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "e22f495968632089aa4672673676acba"
                            }
                        ],
                        "_anyExecute": [
                            {
                                "visibility": "internal",
                                "content": "function _anyExecute( uint256 fromChainID, address sender, bytes calldata data, uint256 callNonce ) internal virtual returns (bool success, bytes memory result);",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "fromChainID"
                                    },
                                    {
                                        "type": "address",
                                        "name": "sender"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "data"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "callNonce"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": "success"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "result"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "e8af61516d9a57be66e46232ac422707"
                            }
                        ],
                        "anyExecute": [
                            {
                                "visibility": "external",
                                "content": "function anyExecute( uint256 fromChainId, address sender, bytes calldata data, uint256 callNonce ) external override onlyExecutor returns (bool success, bytes memory result){ require(isApprovedSender[fromChainId][sender], \"call not allowed\"); return _anyExecute(fromChainId, sender, data, callNonce);}",
                                "modifiers": [
                                    "override",
                                    "onlyExecutor"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "fromChainId"
                                    },
                                    {
                                        "type": "address",
                                        "name": "sender"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "data"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "callNonce"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": "success"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "result"
                                    }
                                ],
                                "reads": [
                                    [
                                        "isApprovedSender",
                                        "",
                                        "AnyCallReceiver"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyCallReceiver._anyExecute",
                                        "AnyCallReceiver.onlyExecutor"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "de61a103002163505752e00fec116d48"
                            }
                        ],
                        "depositAnyCallFee": [
                            {
                                "visibility": "public",
                                "content": "function depositAnyCallFee() public payable{ IAnyCallProxyV7(anyCallProxy).deposit(address(this));}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [
                                    [
                                        "anyCallProxy",
                                        "",
                                        "AnyCallReceiver"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyCallReceiver.IAnyCallProxyV7"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "a257ae8e79056fda6014a73d62c06d2f"
                            }
                        ],
                        "withdrawAnyCallFee": [
                            {
                                "visibility": "public",
                                "content": "function withdrawAnyCallFee(uint256 amount) public onlyAdmin{ uint256 ethAmount = IAnyCallProxyV7(anyCallProxy).withdraw( address(this), amount ); (bool success, ) = admin.call{ value: ethAmount} (\"\"); require(success);}",
                                "modifiers": [
                                    "onlyAdmin"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "anyCallProxy",
                                        "",
                                        "AnyCallReceiver"
                                    ],
                                    [
                                        "admin",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\Administrable.sol",
                                        "Administrable"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyCallReceiver.IAnyCallProxyV7",
                                        "AnyCallReceiver.onlyAdmin"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "7420898e56cb962cf2eb89506a26ead9"
                            }
                        ],
                        "approve": [
                            {
                                "visibility": "public",
                                "content": "function approve(uint256 execFeeAllowance_, uint256 recrFeeAllowance_) public onlyAdmin{ IAnyCallProxyV7(anyCallProxy).approve( address(this), execFeeAllowance_, recrFeeAllowance_ );}",
                                "modifiers": [
                                    "onlyAdmin"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "execFeeAllowance_"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "recrFeeAllowance_"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "anyCallProxy",
                                        "",
                                        "AnyCallReceiver"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyCallReceiver.IAnyCallProxyV7",
                                        "AnyCallReceiver.onlyAdmin"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "378e6fa5cbd2f0407c74ae70c40543fd"
                            }
                        ]
                    },
                    "modifiers": {
                        "onlyExecutor": {
                            "parameters": [],
                            "content": "modifier onlyExecutor(){ require(msg.sender == IAnyCallProxyV7(anyCallProxy).executor()); _;}",
                            "reads": [
                                [
                                    "anyCallProxy",
                                    "",
                                    "AnyCallReceiver"
                                ]
                            ],
                            "writes": [],
                            "external_calls": {
                                "__set__": true,
                                "values": [
                                    "AnyCallReceiver.IAnyCallProxyV7"
                                ]
                            },
                            "md5": "d29d63ecfff6bbb4a747af918171e79b"
                        }
                    },
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "AnyCallReceiver.onlyAdmin": "09edb7de44e02ee8faf76bcd37da4f4f",
                "AnyCallReceiver.onlyExecutor": "d29d63ecfff6bbb4a747af918171e79b",
                "AnyCallReceiver._anyExecute": "e8af61516d9a57be66e46232ac422707"
            },
            "md5": "698469a8777abc008f1c981ec218ed79"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\AnyCall-V7\\clients\\AnyCallSender.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\AnyCall-V7\\clients\\AnyCallSender.sol",
            "filename": "AnyCallSender.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\Administrable.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\AnyCall-V7\\interfaces\\IAnyCallProxyV7.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\AnyCall-V7\\interfaces\\IAnyCallSender.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\AnyCall-V7\\interfaces\\Types.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "AnyCallSender": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": true,
                    "inherits": [
                        "is",
                        "Administrable",
                        "IAnyCallSender"
                    ],
                    "state_variables": {
                        "anyCallProxy": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public anyCallProxy;"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (address anyCallProxy_){ anyCallProxy = anyCallProxy_;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "anyCallProxy_"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "anyCallProxy",
                                        "",
                                        "AnyCallSender"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "anyCallProxy",
                                        "",
                                        "AnyCallSender"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "1e48659b6769eddee25b9339100bbb2f"
                            }
                        ],
                        "setAnyCallProxy": [
                            {
                                "visibility": "public",
                                "content": "function setAnyCallProxy(address proxy) public onlyAdmin{ anyCallProxy = proxy;}",
                                "modifiers": [
                                    "onlyAdmin"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "proxy"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "anyCallProxy",
                                        "",
                                        "AnyCallSender"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "anyCallProxy",
                                        "",
                                        "AnyCallSender"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyCallSender.onlyAdmin"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "e22f495968632089aa4672673676acba"
                            }
                        ],
                        "_anyCall": [
                            {
                                "visibility": "internal",
                                "content": "function _anyCall(CallArgs memory _callArgs) internal{ IAnyCallProxyV7(anyCallProxy).anyCall{ value: msg.value} (_callArgs);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "CallArgs memory",
                                        "name": "_callArgs"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "anyCallProxy",
                                        "",
                                        "AnyCallSender"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyCallSender.IAnyCallProxyV7"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "e50efc7fc6a832c1c1d1d60462ad0e5d"
                            }
                        ],
                        "_anyFallback": [
                            {
                                "visibility": "internal",
                                "content": "function _anyFallback( uint256 toChainId, address receiver, bytes calldata data, uint256 callNonce, bytes calldata reason ) internal virtual returns (bool success, bytes memory result);",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "toChainId"
                                    },
                                    {
                                        "type": "address",
                                        "name": "receiver"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "data"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "callNonce"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "reason"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": "success"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "result"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "7e7453470cc6a1419e2202b09b744c1c"
                            }
                        ],
                        "anyFallback": [
                            {
                                "visibility": "external",
                                "content": "function anyFallback( uint256 toChainId, address receiver, bytes calldata data, uint256 callNonce, bytes calldata reason ) external override onlyExecutor returns (bool success, bytes memory result){ require( msg.sender == IAnyCallProxyV7(anyCallProxy).executor(), \"not allowed\" ); return _anyFallback(toChainId, receiver, data, callNonce, reason);}",
                                "modifiers": [
                                    "override",
                                    "onlyExecutor"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "toChainId"
                                    },
                                    {
                                        "type": "address",
                                        "name": "receiver"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "data"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "callNonce"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "reason"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": "success"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "result"
                                    }
                                ],
                                "reads": [
                                    [
                                        "anyCallProxy",
                                        "",
                                        "AnyCallSender"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyCallSender.IAnyCallProxyV7",
                                        "AnyCallSender._anyFallback",
                                        "AnyCallSender.onlyExecutor"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "c3c78dee207f29df3345e32fb7f83ea2"
                            }
                        ]
                    },
                    "modifiers": {
                        "onlyExecutor": {
                            "parameters": [],
                            "content": "modifier onlyExecutor(){ require(msg.sender == IAnyCallProxyV7(anyCallProxy).executor()); _;}",
                            "reads": [
                                [
                                    "anyCallProxy",
                                    "",
                                    "AnyCallSender"
                                ]
                            ],
                            "writes": [],
                            "external_calls": {
                                "__set__": true,
                                "values": [
                                    "AnyCallSender.IAnyCallProxyV7"
                                ]
                            },
                            "md5": "d29d63ecfff6bbb4a747af918171e79b"
                        }
                    },
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "AnyCallSender.onlyAdmin": "09edb7de44e02ee8faf76bcd37da4f4f",
                "AnyCallSender.onlyExecutor": "d29d63ecfff6bbb4a747af918171e79b",
                "AnyCallSender._anyFallback": "7e7453470cc6a1419e2202b09b744c1c"
            },
            "md5": "14455fd5fc501920466b423584d8755e"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\AnyCall-V7\\examples\\DemoAnyCallApp.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\AnyCall-V7\\examples\\DemoAnyCallApp.sol",
            "filename": "DemoAnyCallApp.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\AnyCallApp.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\AnyCall-V7\\interfaces\\Types.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "DemoAnyCallApp": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "AnyCallApp"
                    ],
                    "state_variables": {
                        "destChain": {
                            "type": "uint128",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint128 public destChain;"
                        },
                        "peer": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public peer;"
                        },
                        "fee": {
                            "type": "uint128",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint128 public fee;"
                        },
                        "prevSentBlockNumber": {
                            "type": "uint256",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256 private prevSentBlockNumber;"
                        },
                        "sentBlockNumber": {
                            "type": "uint256",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256 public sentBlockNumber;"
                        },
                        "receivedBlockNumber": {
                            "type": "uint256",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256 public receivedBlockNumber;"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (address anyCallProxy) AnyCallApp(anyCallProxy){}",
                                "modifiers": [
                                    "AnyCallApp(anyCallProxy)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "anyCallProxy"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "anyCallProxy",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\AnyCallApp.sol",
                                        "AnyCallApp"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "87fa820e80d1487a26e5861397cc22fb"
                            }
                        ],
                        "setPeer": [
                            {
                                "visibility": "external",
                                "content": "function setPeer(uint128 destChain_, address peer_) external onlyAdmin{ destChain = destChain_; peer = peer_; isApprovedSender[destChain][peer] = true;}",
                                "modifiers": [
                                    "onlyAdmin"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint128",
                                        "name": "destChain_"
                                    },
                                    {
                                        "type": "address",
                                        "name": "peer_"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "destChain",
                                        "",
                                        "DemoAnyCallApp"
                                    ],
                                    [
                                        "peer",
                                        "",
                                        "DemoAnyCallApp"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "destChain",
                                        "",
                                        "DemoAnyCallApp"
                                    ],
                                    [
                                        "peer",
                                        "",
                                        "DemoAnyCallApp"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "DemoAnyCallApp.onlyAdmin"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "a427da1e4e70cfec1a1afec1bca3657a"
                            }
                        ],
                        "setFee": [
                            {
                                "visibility": "external",
                                "content": "function setFee(uint128 fee_) external onlyAdmin{ fee = fee_;}",
                                "modifiers": [
                                    "onlyAdmin"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint128",
                                        "name": "fee_"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "fee",
                                        "",
                                        "DemoAnyCallApp"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "fee",
                                        "",
                                        "DemoAnyCallApp"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "DemoAnyCallApp.onlyAdmin"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "0285ea80773a580e1f3ee0598e76bb30"
                            }
                        ],
                        "_beforeSend": [
                            {
                                "visibility": "internal",
                                "content": "function _beforeSend() internal{ prevSentBlockNumber = sentBlockNumber; sentBlockNumber = block.number;}",
                                "modifiers": [],
                                "parameters": [],
                                "returns": [],
                                "reads": [
                                    [
                                        "prevSentBlockNumber",
                                        "",
                                        "DemoAnyCallApp"
                                    ],
                                    [
                                        "sentBlockNumber",
                                        "",
                                        "DemoAnyCallApp"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "prevSentBlockNumber",
                                        "",
                                        "DemoAnyCallApp"
                                    ],
                                    [
                                        "sentBlockNumber",
                                        "",
                                        "DemoAnyCallApp"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "e9cdc0b621e97b81dd162ce7e09686da"
                            }
                        ],
                        "sendBlockInfo": [
                            {
                                "visibility": "public",
                                "content": "function sendBlockInfo(uint128 times) public payable{ _beforeSend(); bytes memory data = abi.encodePacked(block.number, block.timestamp, times); _anyCall( CallArgs( destChain, uint160(peer), uint160(address(this)), fee, (times - 1) * fee, data ) );}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint128",
                                        "name": "times"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "destChain",
                                        "",
                                        "DemoAnyCallApp"
                                    ],
                                    [
                                        "peer",
                                        "",
                                        "DemoAnyCallApp"
                                    ],
                                    [
                                        "fee",
                                        "",
                                        "DemoAnyCallApp"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "DemoAnyCallApp._anyCall",
                                        "DemoAnyCallApp._beforeSend",
                                        "DemoAnyCallApp.CallArgs"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "c12499ccc1f8905503a659d90215638e"
                            }
                        ],
                        "receiveBlockInfo": [
                            {
                                "visibility": "internal",
                                "content": "function receiveBlockInfo(uint256 blocknumber, uint256 timestamp) internal{ receivedBlockNumber = blocknumber; emit ReceiveBlockInfo(blocknumber, timestamp);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "blocknumber"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "timestamp"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "receivedBlockNumber",
                                        "",
                                        "DemoAnyCallApp"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "receivedBlockNumber",
                                        "",
                                        "DemoAnyCallApp"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "1e1548597267de05195948f5618fd924"
                            }
                        ],
                        "_anyExecute": [
                            {
                                "visibility": "internal",
                                "content": "function _anyExecute( uint256 fromChainID, address sender, bytes calldata data, uint256 callNonce ) internal override returns (bool success, bytes memory result){ (uint256 blocknumber, uint256 timestamp, uint128 times) = abi.decode( data, (uint256, uint256, uint128) ); receiveBlockInfo(blocknumber, timestamp); sendBlockInfo(times - 1); return (true, \"\");}",
                                "modifiers": [
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "fromChainID"
                                    },
                                    {
                                        "type": "address",
                                        "name": "sender"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "data"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "callNonce"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": "success"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "result"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "DemoAnyCallApp.sendBlockInfo",
                                        "DemoAnyCallApp.receiveBlockInfo"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "3a45b665e8ad383981ad9460d937a3b3"
                            }
                        ],
                        "_anyFallback": [
                            {
                                "visibility": "internal",
                                "content": "function _anyFallback( uint256 toChainId, address receiver, bytes calldata data, uint256 callNonce, bytes calldata reason ) internal override returns (bool success, bytes memory result){ (uint256 blocknumber, uint256 timestamp) = abi.decode( data, (uint256, uint256) ); if (blocknumber == sentBlockNumber){ sentBlockNumber = prevSentBlockNumber;}}",
                                "modifiers": [
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "toChainId"
                                    },
                                    {
                                        "type": "address",
                                        "name": "receiver"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "data"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "callNonce"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "reason"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": "success"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "result"
                                    }
                                ],
                                "reads": [
                                    [
                                        "prevSentBlockNumber",
                                        "",
                                        "DemoAnyCallApp"
                                    ],
                                    [
                                        "sentBlockNumber",
                                        "",
                                        "DemoAnyCallApp"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "sentBlockNumber",
                                        "",
                                        "DemoAnyCallApp"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "ca15d8173f857e785fdbe42680757464"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {
                        "ReceiveBlockInfo": {
                            "event": "ReceiveBlockInfo",
                            "content": "ReceiveBlockInfo(uint256 blocknumber, uint256 timestamp)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "DemoAnyCallApp._anyCall": "455b45f2d3ec0c19a181336507b73202",
                "DemoAnyCallApp._beforeSend": "e9cdc0b621e97b81dd162ce7e09686da",
                "DemoAnyCallApp.sendBlockInfo": "c12499ccc1f8905503a659d90215638e",
                "DemoAnyCallApp.receiveBlockInfo": "1e1548597267de05195948f5618fd924"
            },
            "md5": "5dabd1cf310145f9d360f4f6bf662bf1"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\interfaces\\IMintBurn1155.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\interfaces\\IMintBurn1155.sol",
            "filename": "IMintBurn1155.sol",
            "imported_contracts": {},
            "contracts": {
                "IMintBurn1155": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "mint": [
                            {
                                "visibility": "external",
                                "content": "function mint(address account, uint256 tokenId, uint256 amount) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "account"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "tokenId"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "f046e90550124309119a31a91e390c09"
                            }
                        ],
                        "burn": [
                            {
                                "visibility": "external",
                                "content": "function burn(address account, uint256 tokenId, uint256 amount) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "account"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "tokenId"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "b2ba39b3d92921295a4ac8853df49a63"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "36597ac4a521a4f043247e54420c07fa"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\anycall_app\\ERC1155Gateway_MintBurn.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\anycall_app\\ERC1155Gateway_MintBurn.sol",
            "filename": "ERC1155Gateway_MintBurn.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\ERC1155Gateway.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\interfaces\\IMintBurn1155.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "ERC1155Gateway_MintBurn": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "ERC1155Gateway"
                    ],
                    "state_variables": {},
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (address anyCallProxy, uint256 flag, address token) ERC1155Gateway(anyCallProxy, flag, token){}",
                                "modifiers": [
                                    "ERC1155Gateway(anyCallProxy, flag, token)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "anyCallProxy"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "flag"
                                    },
                                    {
                                        "type": "address",
                                        "name": "token"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "token",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\ERC1155Gateway.sol",
                                        "ERC1155Gateway"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "b2e529759d8c8a4ba9d152045be29963"
                            }
                        ],
                        "_swapout": [
                            {
                                "visibility": "internal",
                                "content": "function _swapout(address sender, uint256 tokenId, uint256 amount) internal override virtual returns (bool, bytes memory){ try IMintBurn1155(token).burn(sender, tokenId, amount){ return (true, \"\");} catch{ return (false, \"\");}}",
                                "modifiers": [
                                    "override",
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "sender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "tokenId"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "token",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\ERC1155Gateway.sol",
                                        "ERC1155Gateway"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC1155Gateway_MintBurn.IMintBurn1155"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "e912aa68115a4317f059a5c3c135fa03"
                            }
                        ],
                        "_swapin": [
                            {
                                "visibility": "internal",
                                "content": "function _swapin(uint256 tokenId, uint256 amount, address receiver, bytes memory extraMsg) internal override returns (bool){ try IMintBurn1155(token).mint(receiver, tokenId, amount){ return true;} catch{ return false;}}",
                                "modifiers": [
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "tokenId"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "address",
                                        "name": "receiver"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "extraMsg"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "token",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\ERC1155Gateway.sol",
                                        "ERC1155Gateway"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC1155Gateway_MintBurn.IMintBurn1155"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "395b7bb1d371577623cc9e9ba45761df"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "8e8ffdbe156a9aef8fb16f859327fb58"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\interfaces\\IAnyERC20_legacy.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\interfaces\\IAnyERC20_legacy.sol",
            "filename": "IAnyERC20_legacy.sol",
            "imported_contracts": {},
            "contracts": {
                "IAnyERC20_legacy": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "Swapout": [
                            {
                                "visibility": "external",
                                "content": "function Swapout(uint256 amount, address toAddress) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "address",
                                        "name": "toAddress"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "506190dec8312280c6af7ec2c489da46"
                            }
                        ],
                        "Swapin": [
                            {
                                "visibility": "external",
                                "content": "function Swapin(bytes32 txhash, address account, uint256 amount) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "txhash"
                                    },
                                    {
                                        "type": "address",
                                        "name": "account"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c157e895b23acd3883da328286bfc073"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "d9f8aaa9ce55ef24825a82359f7bcb81"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\anycall_app\\ERC20Gateway_for_legacy.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\anycall_app\\ERC20Gateway_for_legacy.sol",
            "filename": "ERC20Gateway_for_legacy.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\ERC20Gateway.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\interfaces\\IAnyERC20_legacy.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "ERC20Gateway_for_AnyERC20_legacy": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "ERC20Gateway"
                    ],
                    "state_variables": {},
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (address anyCallProxy, uint256 flag, address token) ERC20Gateway(anyCallProxy, flag, token){}",
                                "modifiers": [
                                    "ERC20Gateway(anyCallProxy, flag, token)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "anyCallProxy"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "flag"
                                    },
                                    {
                                        "type": "address",
                                        "name": "token"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "token",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\ERC20Gateway.sol",
                                        "ERC20Gateway"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "3c0211c45f9d9e652e255177ab104efa"
                            }
                        ],
                        "_swapout": [
                            {
                                "visibility": "internal",
                                "content": "function _swapout(uint256 amount, address sender) internal override returns (bool){ return IAnyERC20_legacy(token).Swapout(amount, address(0));}",
                                "modifiers": [
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "address",
                                        "name": "sender"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "token",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\ERC20Gateway.sol",
                                        "ERC20Gateway"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20Gateway_for_AnyERC20_legacy.IAnyERC20_legacy"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "2c390c8ad62b4c9671822420d23da827"
                            }
                        ],
                        "_swapin": [
                            {
                                "visibility": "internal",
                                "content": "function _swapin(uint256 amount, address receiver) internal override returns (bool){ return IAnyERC20_legacy(token).Swapin(bytes32(bytes(\"\")), receiver, amount);}",
                                "modifiers": [
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "address",
                                        "name": "receiver"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "token",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\ERC20Gateway.sol",
                                        "ERC20Gateway"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20Gateway_for_AnyERC20_legacy.IAnyERC20_legacy"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "255ce756084a17add85c479d3cbd54ba"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "79d9267afbbf1a7b1050278dd5cf3162"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\interfaces\\ITransfer.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\interfaces\\ITransfer.sol",
            "filename": "ITransfer.sol",
            "imported_contracts": {},
            "contracts": {
                "ITransfer": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "transferFrom": [
                            {
                                "visibility": "external",
                                "content": "function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "sender"
                                    },
                                    {
                                        "type": "address",
                                        "name": "recipient"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c134d67e13a988b449de71dd226682ab"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "d5c5aa52bdf17eba27994415101cc6f7"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\anycall_app\\ERC20Gateway_LP.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\anycall_app\\ERC20Gateway_LP.sol",
            "filename": "ERC20Gateway_LP.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\ERC20Gateway.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\interfaces\\ITransfer.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "ERC20Gateway_LP": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "ERC20Gateway"
                    ],
                    "state_variables": {},
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (address anyCallProxy, uint256 flag, address token) ERC20Gateway(anyCallProxy, flag, token){}",
                                "modifiers": [
                                    "ERC20Gateway(anyCallProxy, flag, token)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "anyCallProxy"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "flag"
                                    },
                                    {
                                        "type": "address",
                                        "name": "token"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "token",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\ERC20Gateway.sol",
                                        "ERC20Gateway"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "3c0211c45f9d9e652e255177ab104efa"
                            }
                        ],
                        "_swapout": [
                            {
                                "visibility": "internal",
                                "content": "function _swapout(uint256 amount, address sender) internal override returns (bool){ return ITransfer(token).transferFrom(sender, address(this), amount);}",
                                "modifiers": [
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "address",
                                        "name": "sender"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "token",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\ERC20Gateway.sol",
                                        "ERC20Gateway"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20Gateway_LP.ITransfer"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "01540c61a04d8881330a966304d44a79"
                            }
                        ],
                        "_swapin": [
                            {
                                "visibility": "internal",
                                "content": "function _swapin(uint256 amount, address receiver) internal override returns (bool){ return ITransfer(token).transferFrom(address(this), receiver, amount);}",
                                "modifiers": [
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "address",
                                        "name": "receiver"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "token",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\ERC20Gateway.sol",
                                        "ERC20Gateway"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20Gateway_LP.ITransfer"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "0a28942851e920be956d568665ba5b38"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "1e80da186a77b9fa725770858d5efef8"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\interfaces\\IMintBurn.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\interfaces\\IMintBurn.sol",
            "filename": "IMintBurn.sol",
            "imported_contracts": {},
            "contracts": {
                "IMintBurn": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "mint": [
                            {
                                "visibility": "external",
                                "content": "function mint(address account, uint256 amount) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "account"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "cb9434c0221b9e3af894d4264ac4516d"
                            }
                        ],
                        "burnFrom": [
                            {
                                "visibility": "external",
                                "content": "function burnFrom(address account, uint256 amount) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "account"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "ee2dd14eae657ee8615f79e4cb6cf270"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "25e783ae4eea0f15a93c60336df622fb"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\anycall_app\\ERC20Gateway_MintBurn.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\anycall_app\\ERC20Gateway_MintBurn.sol",
            "filename": "ERC20Gateway_MintBurn.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\ERC20Gateway.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\interfaces\\IMintBurn.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "ERC20Gateway_MintBurn": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "ERC20Gateway"
                    ],
                    "state_variables": {},
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (address anyCallProxy, uint256 flag, address token) ERC20Gateway(anyCallProxy, flag, token){}",
                                "modifiers": [
                                    "ERC20Gateway(anyCallProxy, flag, token)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "anyCallProxy"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "flag"
                                    },
                                    {
                                        "type": "address",
                                        "name": "token"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "token",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\ERC20Gateway.sol",
                                        "ERC20Gateway"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "3c0211c45f9d9e652e255177ab104efa"
                            }
                        ],
                        "_swapout": [
                            {
                                "visibility": "internal",
                                "content": "function _swapout(uint256 amount, address sender) internal override returns (bool){ try IMintBurn(token).burnFrom(sender, amount){ return true;} catch{ return false;}}",
                                "modifiers": [
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "address",
                                        "name": "sender"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "token",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\ERC20Gateway.sol",
                                        "ERC20Gateway"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20Gateway_MintBurn.IMintBurn"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "9f36622f5fc73dc20d0fa594f5117220"
                            }
                        ],
                        "_swapin": [
                            {
                                "visibility": "internal",
                                "content": "function _swapin(uint256 amount, address receiver) internal override returns (bool){ try IMintBurn(token).mint(receiver, amount){ return true;} catch{ return false;}}",
                                "modifiers": [
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "address",
                                        "name": "receiver"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "token",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\ERC20Gateway.sol",
                                        "ERC20Gateway"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20Gateway_MintBurn.IMintBurn"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "d4b3c74cd34fdb263bb6407a12fa4023"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "4c696b0abe2d6c2372a0f6f739aba38d"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\anycall_app\\ERC20MessageGateway_for_legacy.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\anycall_app\\ERC20MessageGateway_for_legacy.sol",
            "filename": "ERC20MessageGateway_for_legacy.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\ERC20MessageGateway.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\interfaces\\IAnyERC20_legacy.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "ERC20MessageGateway_for_AnyERC20_legacy": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "ERC20MessageGateway"
                    ],
                    "state_variables": {},
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (address anyCallProxy, uint256 flag, address token) ERC20MessageGateway(anyCallProxy, flag, token){}",
                                "modifiers": [
                                    "ERC20MessageGateway(anyCallProxy, flag, token)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "anyCallProxy"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "flag"
                                    },
                                    {
                                        "type": "address",
                                        "name": "token"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "token",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\ERC20MessageGateway.sol",
                                        "ERC20MessageGateway"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "fef405bb532d55f0986407b4dffd0285"
                            }
                        ],
                        "_swapout": [
                            {
                                "visibility": "internal",
                                "content": "function _swapout(uint256 amount, address sender) internal override returns (bool){ return IAnyERC20_legacy(token).Swapout(amount, address(0));}",
                                "modifiers": [
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "address",
                                        "name": "sender"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "token",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\ERC20MessageGateway.sol",
                                        "ERC20MessageGateway"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20MessageGateway_for_AnyERC20_legacy.IAnyERC20_legacy"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "2c390c8ad62b4c9671822420d23da827"
                            }
                        ],
                        "_swapin": [
                            {
                                "visibility": "internal",
                                "content": "function _swapin(uint256 amount, address receiver) internal override returns (bool){ return IAnyERC20_legacy(token).Swapin(bytes32(bytes(\"\")), receiver, amount);}",
                                "modifiers": [
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "address",
                                        "name": "receiver"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "token",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\ERC20MessageGateway.sol",
                                        "ERC20MessageGateway"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20MessageGateway_for_AnyERC20_legacy.IAnyERC20_legacy"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "255ce756084a17add85c479d3cbd54ba"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "8620ffc399b0f2c2a8798821378cf97f"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\anycall_app\\ERC20MessageGateway_LP.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\anycall_app\\ERC20MessageGateway_LP.sol",
            "filename": "ERC20MessageGateway_LP.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\ERC20MessageGateway.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\interfaces\\ITransfer.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "ERC20MessageGateway_LP": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "ERC20MessageGateway"
                    ],
                    "state_variables": {},
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (address anyCallProxy, uint256 flag, address token) ERC20MessageGateway(anyCallProxy, flag, token){}",
                                "modifiers": [
                                    "ERC20MessageGateway(anyCallProxy, flag, token)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "anyCallProxy"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "flag"
                                    },
                                    {
                                        "type": "address",
                                        "name": "token"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "token",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\ERC20MessageGateway.sol",
                                        "ERC20MessageGateway"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "fef405bb532d55f0986407b4dffd0285"
                            }
                        ],
                        "_swapout": [
                            {
                                "visibility": "internal",
                                "content": "function _swapout(uint256 amount, address sender) internal override returns (bool){ return ITransfer(token).transferFrom(sender, address(this), amount);}",
                                "modifiers": [
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "address",
                                        "name": "sender"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "token",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\ERC20MessageGateway.sol",
                                        "ERC20MessageGateway"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20MessageGateway_LP.ITransfer"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "01540c61a04d8881330a966304d44a79"
                            }
                        ],
                        "_swapin": [
                            {
                                "visibility": "internal",
                                "content": "function _swapin(uint256 amount, address receiver) internal override returns (bool){ return ITransfer(token).transferFrom(address(this), receiver, amount);}",
                                "modifiers": [
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "address",
                                        "name": "receiver"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "token",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\ERC20MessageGateway.sol",
                                        "ERC20MessageGateway"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20MessageGateway_LP.ITransfer"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "0a28942851e920be956d568665ba5b38"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "938ed8fdf9917988332c3e180bc39b44"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\anycall_app\\ERC20MessageGateway_MintBurn.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\anycall_app\\ERC20MessageGateway_MintBurn.sol",
            "filename": "ERC20MessageGateway_MintBurn.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\ERC20MessageGateway.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\interfaces\\IMintBurn.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "ERC20MessageGateway_MintBurn": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "ERC20MessageGateway"
                    ],
                    "state_variables": {},
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (address anyCallProxy, uint256 flag, address token) ERC20MessageGateway(anyCallProxy, flag, token){}",
                                "modifiers": [
                                    "ERC20MessageGateway(anyCallProxy, flag, token)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "anyCallProxy"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "flag"
                                    },
                                    {
                                        "type": "address",
                                        "name": "token"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "token",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\ERC20MessageGateway.sol",
                                        "ERC20MessageGateway"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "fef405bb532d55f0986407b4dffd0285"
                            }
                        ],
                        "_swapout": [
                            {
                                "visibility": "internal",
                                "content": "function _swapout(uint256 amount, address sender) internal override returns (bool){ try IMintBurn(token).burnFrom(sender, amount){ return true;} catch{ return false;}}",
                                "modifiers": [
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "address",
                                        "name": "sender"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "token",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\ERC20MessageGateway.sol",
                                        "ERC20MessageGateway"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20MessageGateway_MintBurn.IMintBurn"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "9f36622f5fc73dc20d0fa594f5117220"
                            }
                        ],
                        "_swapin": [
                            {
                                "visibility": "internal",
                                "content": "function _swapin(uint256 amount, address receiver) internal override returns (bool){ try IMintBurn(token).mint(receiver, amount){ return true;} catch{ return false;}}",
                                "modifiers": [
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "address",
                                        "name": "receiver"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "token",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\ERC20MessageGateway.sol",
                                        "ERC20MessageGateway"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20MessageGateway_MintBurn.IMintBurn"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "d4b3c74cd34fdb263bb6407a12fa4023"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "87e1d145cc5ead53dcc8effbc499d04b"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\anycall_app\\ERC677Gateway_LP.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\anycall_app\\ERC677Gateway_LP.sol",
            "filename": "ERC677Gateway_LP.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\ERC677Gateway.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\interfaces\\ITransfer.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "ERC677Gateway_LP": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "ERC677Gateway"
                    ],
                    "state_variables": {},
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (address anyCallProxy, uint256 flag, address token) ERC677Gateway(anyCallProxy, flag, token){}",
                                "modifiers": [
                                    "ERC677Gateway(anyCallProxy, flag, token)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "anyCallProxy"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "flag"
                                    },
                                    {
                                        "type": "address",
                                        "name": "token"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "token",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\ERC677Gateway.sol",
                                        "ERC677Gateway"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "b5b07369d0a9fe77de8d49ede3e4e431"
                            }
                        ],
                        "_swapout": [
                            {
                                "visibility": "internal",
                                "content": "function _swapout(uint256 amount, address sender) internal override returns (bool){ return ITransfer(token).transferFrom(sender, address(this), amount);}",
                                "modifiers": [
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "address",
                                        "name": "sender"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "token",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\ERC677Gateway.sol",
                                        "ERC677Gateway"
                                    ],
                                    [
                                        "sender",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\ERC677Gateway.sol",
                                        "ERC677Gateway"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC677Gateway_LP.ITransfer"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "01540c61a04d8881330a966304d44a79"
                            }
                        ],
                        "_swapin": [
                            {
                                "visibility": "internal",
                                "content": "function _swapin(uint256 amount, address receiver) internal override returns (bool){ return ITransfer(token).transferFrom(address(this), receiver, amount);}",
                                "modifiers": [
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "address",
                                        "name": "receiver"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "token",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\ERC677Gateway.sol",
                                        "ERC677Gateway"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC677Gateway_LP.ITransfer"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "0a28942851e920be956d568665ba5b38"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "ce155554adbd9c87b9ff1d544c492295"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\anycall_app\\ERC677Gateway_MintBurn.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\anycall_app\\ERC677Gateway_MintBurn.sol",
            "filename": "ERC677Gateway_MintBurn.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\ERC677Gateway.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\interfaces\\IMintBurn.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "ERC677Gateway_MintBurn": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "ERC677Gateway"
                    ],
                    "state_variables": {},
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (address anyCallProxy, uint256 flag, address token) ERC677Gateway(anyCallProxy, flag, token){}",
                                "modifiers": [
                                    "ERC677Gateway(anyCallProxy, flag, token)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "anyCallProxy"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "flag"
                                    },
                                    {
                                        "type": "address",
                                        "name": "token"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "token",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\ERC677Gateway.sol",
                                        "ERC677Gateway"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "b5b07369d0a9fe77de8d49ede3e4e431"
                            }
                        ],
                        "_swapout": [
                            {
                                "visibility": "internal",
                                "content": "function _swapout(uint256 amount, address sender) internal override returns (bool){ try IMintBurn(token).burnFrom(sender, amount){ return true;} catch{ return false;}}",
                                "modifiers": [
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "address",
                                        "name": "sender"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "token",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\ERC677Gateway.sol",
                                        "ERC677Gateway"
                                    ],
                                    [
                                        "sender",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\ERC677Gateway.sol",
                                        "ERC677Gateway"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC677Gateway_MintBurn.IMintBurn"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "9f36622f5fc73dc20d0fa594f5117220"
                            }
                        ],
                        "_swapin": [
                            {
                                "visibility": "internal",
                                "content": "function _swapin(uint256 amount, address receiver) internal override returns (bool){ try IMintBurn(token).mint(receiver, amount){ return true;} catch{ return false;}}",
                                "modifiers": [
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "address",
                                        "name": "receiver"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "token",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\ERC677Gateway.sol",
                                        "ERC677Gateway"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC677Gateway_MintBurn.IMintBurn"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "d4b3c74cd34fdb263bb6407a12fa4023"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "501dc930dc5fcc15b95d84c41093ce19"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\anycall_app\\ERC721Gateway_LILO.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\anycall_app\\ERC721Gateway_LILO.sol",
            "filename": "ERC721Gateway_LILO.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\ERC721Gateway.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\interfaces\\IERC721.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "ERC721Gateway_LILO": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "ERC721Gateway"
                    ],
                    "state_variables": {},
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (address anyCallProxy, uint256 flag, address token) ERC721Gateway(anyCallProxy, flag, token){}",
                                "modifiers": [
                                    "ERC721Gateway(anyCallProxy, flag, token)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "anyCallProxy"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "flag"
                                    },
                                    {
                                        "type": "address",
                                        "name": "token"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "token",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\ERC721Gateway.sol",
                                        "ERC721Gateway"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "732eddd93e8643703ffa6162be1c66fe"
                            }
                        ],
                        "_swapout": [
                            {
                                "visibility": "internal",
                                "content": "function _swapout(uint256 tokenId) internal override virtual returns (bool, bytes memory){ try IERC721(token).safeTransferFrom(msg.sender, address(this), tokenId){ return (true, \"\");} catch{ return (false, \"\");}}",
                                "modifiers": [
                                    "override",
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "tokenId"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "token",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\ERC721Gateway.sol",
                                        "ERC721Gateway"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC721Gateway_LILO.IERC721"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "79bea7c9e279e42d61f03a74b27c189b"
                            }
                        ],
                        "_swapin": [
                            {
                                "visibility": "internal",
                                "content": "function _swapin(uint256 tokenId, address receiver, bytes memory extraMsg) internal override returns (bool){ try IERC721(token).safeTransferFrom(address(this), msg.sender, tokenId){ return true;} catch{ return false;}}",
                                "modifiers": [
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "tokenId"
                                    },
                                    {
                                        "type": "address",
                                        "name": "receiver"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "extraMsg"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "token",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\ERC721Gateway.sol",
                                        "ERC721Gateway"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC721Gateway_LILO.IERC721"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "08cfd21f33c2ad85a938829113ffac85"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "4eff0f55bd0cb1aa8d1d28efa2921b19"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\interfaces\\IMintBurn721.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\interfaces\\IMintBurn721.sol",
            "filename": "IMintBurn721.sol",
            "imported_contracts": {},
            "contracts": {
                "IMintBurn721": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "ownerOf": [
                            {
                                "visibility": "external",
                                "content": "function ownerOf(uint256 tokenId) external view returns (address owner);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "tokenId"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": "owner"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "f80fb9d69b044eb42fe9b85553ad8319"
                            }
                        ],
                        "mint": [
                            {
                                "visibility": "external",
                                "content": "function mint(address account, uint256 tokenId) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "account"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "tokenId"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "04390d96b2c2c1a992600c247f7353a7"
                            }
                        ],
                        "burn": [
                            {
                                "visibility": "external",
                                "content": "function burn(uint256 tokenId) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "tokenId"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "d11dc2f019f005184a5ad5b38752c22c"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "aa1882fc21b106d03737534cad01c79c"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\anycall_app\\ERC721Gateway_MintBurn.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\anycall_app\\ERC721Gateway_MintBurn.sol",
            "filename": "ERC721Gateway_MintBurn.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\ERC721Gateway.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\interfaces\\IMintBurn721.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "ERC721Gateway_MintBurn": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "ERC721Gateway"
                    ],
                    "state_variables": {},
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (address anyCallProxy, uint256 flag, address token) ERC721Gateway(anyCallProxy, flag, token){}",
                                "modifiers": [
                                    "ERC721Gateway(anyCallProxy, flag, token)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "anyCallProxy"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "flag"
                                    },
                                    {
                                        "type": "address",
                                        "name": "token"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "token",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\ERC721Gateway.sol",
                                        "ERC721Gateway"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "732eddd93e8643703ffa6162be1c66fe"
                            }
                        ],
                        "_swapout": [
                            {
                                "visibility": "internal",
                                "content": "function _swapout(uint256 tokenId) internal override virtual returns (bool, bytes memory){ require(IMintBurn721(token).ownerOf(tokenId) == msg.sender, \"not allowed\"); try IMintBurn721(token).burn(tokenId){ return (true, \"\");} catch{ return (false, \"\");}}",
                                "modifiers": [
                                    "override",
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "tokenId"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "token",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\ERC721Gateway.sol",
                                        "ERC721Gateway"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC721Gateway_MintBurn.IMintBurn721"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "7718f3d0922f22a341450803aca91b09"
                            }
                        ],
                        "_swapin": [
                            {
                                "visibility": "internal",
                                "content": "function _swapin(uint256 tokenId, address receiver, bytes memory extraMsg) internal override returns (bool){ try IMintBurn721(token).mint(receiver, tokenId){ return true;} catch{ return false;}}",
                                "modifiers": [
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "tokenId"
                                    },
                                    {
                                        "type": "address",
                                        "name": "receiver"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "extraMsg"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "token",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\ERC721Gateway.sol",
                                        "ERC721Gateway"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC721Gateway_MintBurn.IMintBurn721"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "b00f69479e1f2900581455bd147d161b"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "a30a892d23327102ee18956771392cb7"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\interfaces\\IGatewayClient1155.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\interfaces\\IGatewayClient1155.sol",
            "filename": "IGatewayClient1155.sol",
            "imported_contracts": {},
            "contracts": {
                "IGatewayClient1155": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "notifySwapoutFallback": [
                            {
                                "visibility": "external",
                                "content": "function notifySwapoutFallback(bool refundSuccess, uint256 tokenId, uint256 amount, uint256 swapoutSeq) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "bool",
                                        "name": "refundSuccess"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "tokenId"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "swapoutSeq"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "7925a7a2dff585011df313657b473e67"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "9080e0d8a3fc310c8584419e61fc4feb"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\interfaces\\extensions\\IERC1155GatewayFallback.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\interfaces\\extensions\\IERC1155GatewayFallback.sol",
            "filename": "IERC1155GatewayFallback.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\interfaces\\IERC1155Gateway.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "IERC1155GatewayFallback": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "IERC1155Gateway"
                    ],
                    "state_variables": {},
                    "functions": {
                        "Swapout": [
                            {
                                "visibility": "external",
                                "content": "function Swapout(uint256 tokenId, uint256 amount, address receiver, uint256 toChainID) external payable returns (uint256 swapoutSeq);",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "tokenId"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "address",
                                        "name": "receiver"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "toChainID"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": "swapoutSeq"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": true,
                                "md5": "fb35e0d6cc2c5fa1d5775d21c2b5c655"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": [
                        [
                            "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\extensions\\ERC1155GatewayFallback.sol",
                            "ERC1155GatewayFallback"
                        ]
                    ]
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "aebdbc46b27c3819deeae3c230b55aa5"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\extensions\\ERC1155GatewayFallback.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\extensions\\ERC1155GatewayFallback.sol",
            "filename": "ERC1155GatewayFallback.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\AnyCallAppFallback.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\ERC1155Gateway.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\interfaces\\extensions\\IERC1155GatewayFallback.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "ERC1155GatewayFallback": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": true,
                    "inherits": [
                        "is",
                        "ERC1155Gateway",
                        "AnyCallAppFallback",
                        "IERC1155GatewayFallback"
                    ],
                    "state_variables": {},
                    "functions": {
                        "_swapoutFallback": [
                            {
                                "visibility": "internal",
                                "content": "function _swapoutFallback(uint256 tokenId, uint256 amount, address sender, uint256 swapoutSeq, bytes memory extraMsg) internal virtual returns (bool);",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "tokenId"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "address",
                                        "name": "sender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "swapoutSeq"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "extraMsg"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "cdda41e41d0e19f3a8e8a6dbf6dbfea0"
                            }
                        ],
                        "Swapout": [
                            {
                                "visibility": "external",
                                "content": "function Swapout(uint256 tokenId, uint256 amount, address receiver, uint256 destChainID) external payable returns (uint256){ (bool ok, bytes memory extraMsg) = _swapout(msg.sender, tokenId, amount); require(ok); swapoutSeq++; bytes memory data = abi.encode(tokenId, amount, msg.sender, receiver, swapoutSeq, extraMsg); _anyCall(peer[destChainID], data, address(this), destChainID); emit LogAnySwapOut(tokenId, msg.sender, receiver, destChainID, swapoutSeq); return swapoutSeq;}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "tokenId"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "address",
                                        "name": "receiver"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "destChainID"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "swapoutSeq",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\ERC1155Gateway.sol",
                                        "ERC1155Gateway"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "token",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\ERC1155Gateway.sol",
                                        "ERC1155Gateway"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC1155GatewayFallback._anyCall",
                                        "ERC1155GatewayFallback.LogAnySwapOut",
                                        "ERC1155GatewayFallback._swapout"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "a0ff595950c5bfc8cb105640415a89f7"
                            }
                        ],
                        "_anyFallback": [
                            {
                                "visibility": "internal",
                                "content": "function _anyFallback(bytes calldata data) internal override{ (uint256 tokenId, uint256 amount, address sender,, uint256 swapoutSeq, bytes memory extraMsg) = abi.decode( data, (uint256, uint256, address, address, uint256, bytes) ); require(_swapoutFallback(tokenId, amount, sender, swapoutSeq, extraMsg));}",
                                "modifiers": [
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes calldata",
                                        "name": "data"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "swapoutSeq",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\ERC1155Gateway.sol",
                                        "ERC1155Gateway"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "token",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\ERC1155Gateway.sol",
                                        "ERC1155Gateway"
                                    ],
                                    [
                                        "swapoutSeq",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\ERC1155Gateway.sol",
                                        "ERC1155Gateway"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC1155GatewayFallback._swapoutFallback"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "89f2b34585272f9e85a2a6e80f0e08f1"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "ERC1155GatewayFallback._swapout": "24f2d76ca984599d8a54606644fc21d6",
                "ERC1155GatewayFallback._swapoutFallback": "cdda41e41d0e19f3a8e8a6dbf6dbfea0"
            },
            "md5": "670be2abc005b96c1b5284a9c1616f7d"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\anycall_app\\fallback\\ERC1155Gateway_MintBurn_FB.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\anycall_app\\fallback\\ERC1155Gateway_MintBurn_FB.sol",
            "filename": "ERC1155Gateway_MintBurn_FB.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\anycall_app\\ERC1155Gateway_MintBurn.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\Address.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\interfaces\\IGatewayClient1155.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\extensions\\ERC1155GatewayFallback.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "ERC1155Gateway_MintBurn_FB": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "ERC1155Gateway_MintBurn",
                        "ERC1155GatewayFallback"
                    ],
                    "state_variables": {},
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (address anyCallProxy, uint256 flag, address token) ERC1155Gateway_MintBurn(anyCallProxy, flag, token){}",
                                "modifiers": [
                                    "ERC1155Gateway_MintBurn(anyCallProxy, flag, token)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "anyCallProxy"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "flag"
                                    },
                                    {
                                        "type": "address",
                                        "name": "token"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "00b9eb674229bbab9f9b66cb47cf7544"
                            }
                        ],
                        "_swapoutFallback": [
                            {
                                "visibility": "internal",
                                "content": "function _swapoutFallback(uint256 tokenId, uint256 amount, address sender, uint256 swapoutSeq, bytes memory extraMsg) internal override returns (bool result){ try IMintBurn1155(token).mint(sender, tokenId, amount){ result = true;} catch{ result = false;} if (sender.isContract()){ bytes memory _data = abi.encodeWithSelector(IGatewayClient1155.notifySwapoutFallback.selector, result, tokenId, amount, swapoutSeq); sender.call(_data);} return result;}",
                                "modifiers": [
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "tokenId"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "address",
                                        "name": "sender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "swapoutSeq"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "extraMsg"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": "result"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "sender.isContract",
                                        "sender.call",
                                        "ERC1155Gateway_MintBurn_FB.IMintBurn1155"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "332af9fd3c57c914c9d204244dc8a5de"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "address": "Address"
                    }
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "sender.isContract": "d5972f1432570efe297b754cd2693d6f"
            },
            "md5": "abbe31bb97feb83a5b5bc30164b7f1b7"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\interfaces\\IGatewayClient.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\interfaces\\IGatewayClient.sol",
            "filename": "IGatewayClient.sol",
            "imported_contracts": {},
            "contracts": {
                "IGatewayClient": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "notifySwapoutFallback": [
                            {
                                "visibility": "external",
                                "content": "function notifySwapoutFallback(bool refundSuccess, uint256 amount, uint256 swapoutSeq) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "bool",
                                        "name": "refundSuccess"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "swapoutSeq"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "0c72e3e930c0fd1a1feac9c5123656d7"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "b9b0d228e5169bf85fa758ab34702378"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\interfaces\\extensions\\IERC20GatewayFallback.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\interfaces\\extensions\\IERC20GatewayFallback.sol",
            "filename": "IERC20GatewayFallback.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\interfaces\\IERC20Gateway.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "IERC20GatewayFallback": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "IERC20Gateway"
                    ],
                    "state_variables": {},
                    "functions": {
                        "Swapout": [
                            {
                                "visibility": "external",
                                "content": "function Swapout(uint256 amount, address receiver, uint256 toChainID) external payable returns (uint256 swapoutSeq);",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "address",
                                        "name": "receiver"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "toChainID"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": "swapoutSeq"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": true,
                                "md5": "81343921276d34a37b2534f4a10f9572"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": [
                        [
                            "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\extensions\\ERC20GatewayFallback.sol",
                            "ERC20GatewayFallback"
                        ]
                    ]
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "e786fe05e550286bcd521326d105291e"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\extensions\\ERC20GatewayFallback.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\extensions\\ERC20GatewayFallback.sol",
            "filename": "ERC20GatewayFallback.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\AnyCallAppFallback.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\ERC20Gateway.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\interfaces\\extensions\\IERC20GatewayFallback.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "ERC20GatewayFallback": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": true,
                    "inherits": [
                        "is",
                        "ERC20Gateway",
                        "AnyCallAppFallback",
                        "IERC20GatewayFallback"
                    ],
                    "state_variables": {},
                    "functions": {
                        "_swapoutFallback": [
                            {
                                "visibility": "internal",
                                "content": "function _swapoutFallback(uint256 amount, address sender, uint256 swapoutSeq) internal virtual returns (bool);",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "address",
                                        "name": "sender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "swapoutSeq"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "e0c15ed3fcbcee0521c56b9a5cc76199"
                            }
                        ],
                        "Swapout": [
                            {
                                "visibility": "external",
                                "content": "function Swapout(uint256 amount, address receiver, uint256 destChainID) external payable returns (uint256){ require(_swapout(amount, msg.sender)); swapoutSeq++; bytes memory data = abi.encode(amount, msg.sender, receiver, swapoutSeq); _anyCall(peer[destChainID], data, address(this), destChainID); emit LogAnySwapOut(amount, msg.sender, receiver, destChainID, swapoutSeq); return swapoutSeq;}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "address",
                                        "name": "receiver"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "destChainID"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "swapoutSeq",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\ERC20Gateway.sol",
                                        "ERC20Gateway"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20GatewayFallback._anyCall",
                                        "ERC20GatewayFallback._swapout",
                                        "ERC20GatewayFallback.LogAnySwapOut"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "45c081c5614a7b96d01ad8b95c4259da"
                            }
                        ],
                        "_anyFallback": [
                            {
                                "visibility": "internal",
                                "content": "function _anyFallback(bytes calldata data) internal override{ (uint256 amount, address sender,, uint256 swapoutSeq) = abi.decode( data, (uint256, address, address, uint256) ); require(_swapoutFallback(amount, sender, swapoutSeq));}",
                                "modifiers": [
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes calldata",
                                        "name": "data"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "swapoutSeq",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\ERC20Gateway.sol",
                                        "ERC20Gateway"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "swapoutSeq",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\ERC20Gateway.sol",
                                        "ERC20Gateway"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20GatewayFallback._swapoutFallback"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "abbc4b9fc548b894c9c4cc7f8342e7e4"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "ERC20GatewayFallback._swapout": "57776558709c28641306b3b97a1286b8",
                "ERC20GatewayFallback._swapoutFallback": "e0c15ed3fcbcee0521c56b9a5cc76199"
            },
            "md5": "7e2969c815e73882bfe2d79461b73063"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\anycall_app\\fallback\\ERC20Gateway_for_legacy_FB.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\anycall_app\\fallback\\ERC20Gateway_for_legacy_FB.sol",
            "filename": "ERC20Gateway_for_legacy_FB.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\anycall_app\\ERC20Gateway_for_legacy.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\Address.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\interfaces\\IGatewayClient.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\extensions\\ERC20GatewayFallback.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "ERC20Gateway_for_AnyERC20_legacy_FB": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "ERC20Gateway_for_AnyERC20_legacy",
                        "ERC20GatewayFallback"
                    ],
                    "state_variables": {},
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (address anyCallProxy, uint256 flag, address token) ERC20Gateway_for_AnyERC20_legacy(anyCallProxy, flag, token){}",
                                "modifiers": [
                                    "ERC20Gateway_for_AnyERC20_legacy(anyCallProxy, flag, token)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "anyCallProxy"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "flag"
                                    },
                                    {
                                        "type": "address",
                                        "name": "token"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "cb2d952c092e00f93609c4a7c2d9515e"
                            }
                        ],
                        "_swapoutFallback": [
                            {
                                "visibility": "internal",
                                "content": "function _swapoutFallback(uint256 amount, address sender, uint256 swapoutSeq) internal override returns (bool){ bool result = IAnyERC20_legacy(token).Swapin(bytes32(bytes(\"\")), sender, amount); if (sender.isContract()){ bytes memory _data = abi.encodeWithSelector(IGatewayClient.notifySwapoutFallback.selector, result, amount, swapoutSeq); sender.call(_data);} return result;}",
                                "modifiers": [
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "address",
                                        "name": "sender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "swapoutSeq"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20Gateway_for_AnyERC20_legacy_FB.IAnyERC20_legacy",
                                        "sender.call",
                                        "sender.isContract"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "8aa2fde97cae1f21fefec0a7c72dce79"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "address": "Address"
                    }
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "sender.isContract": "d5972f1432570efe297b754cd2693d6f"
            },
            "md5": "50c873766b936fce374507be4e10f7bc"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\anycall_app\\fallback\\ERC20Gateway_LP_FB.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\anycall_app\\fallback\\ERC20Gateway_LP_FB.sol",
            "filename": "ERC20Gateway_LP_FB.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\anycall_app\\ERC20Gateway_LP.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\Address.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\interfaces\\IGatewayClient.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\extensions\\ERC20GatewayFallback.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "ERC20Gateway_LP_FB": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "ERC20Gateway_LP",
                        "ERC20GatewayFallback"
                    ],
                    "state_variables": {},
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (address anyCallProxy, uint256 flag, address token) ERC20Gateway_LP(anyCallProxy, flag, token){}",
                                "modifiers": [
                                    "ERC20Gateway_LP(anyCallProxy, flag, token)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "anyCallProxy"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "flag"
                                    },
                                    {
                                        "type": "address",
                                        "name": "token"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "d29fa90fefc1c2f3046e3f954a1876cc"
                            }
                        ],
                        "_swapoutFallback": [
                            {
                                "visibility": "internal",
                                "content": "function _swapoutFallback(uint256 amount, address sender, uint256 swapoutSeq) internal override returns (bool result){ result = ITransfer(token).transferFrom(address(this), sender, amount); if (sender.isContract()){ bytes memory _data = abi.encodeWithSelector(IGatewayClient.notifySwapoutFallback.selector, result, amount, swapoutSeq); sender.call(_data);} return result;}",
                                "modifiers": [
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "address",
                                        "name": "sender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "swapoutSeq"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": "result"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20Gateway_LP_FB.ITransfer",
                                        "sender.call",
                                        "sender.isContract"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "fc1fa0ee912493167037fb002ffc53b1"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "address": "Address"
                    }
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "sender.isContract": "d5972f1432570efe297b754cd2693d6f"
            },
            "md5": "5a58d7139a543cb0e397ff9a3ea44683"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\anycall_app\\fallback\\ERC20Gateway_MintBurn_FB.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\anycall_app\\fallback\\ERC20Gateway_MintBurn_FB.sol",
            "filename": "ERC20Gateway_MintBurn_FB.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\anycall_app\\ERC20Gateway_MintBurn.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\Address.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\interfaces\\IGatewayClient.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\extensions\\ERC20GatewayFallback.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "ERC20Gateway_MintBurn_FB": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "ERC20Gateway_MintBurn",
                        "ERC20GatewayFallback"
                    ],
                    "state_variables": {},
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (address anyCallProxy, uint256 flag, address token) ERC20Gateway_MintBurn(anyCallProxy, flag, token){}",
                                "modifiers": [
                                    "ERC20Gateway_MintBurn(anyCallProxy, flag, token)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "anyCallProxy"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "flag"
                                    },
                                    {
                                        "type": "address",
                                        "name": "token"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "755dd44b8fcdc6622dd708a11da9a64b"
                            }
                        ],
                        "_swapoutFallback": [
                            {
                                "visibility": "internal",
                                "content": "function _swapoutFallback(uint256 amount, address sender, uint256 swapoutSeq) internal override returns (bool result){ try IMintBurn(token).mint(sender, amount){ result = true;} catch{ result = false;} if (sender.isContract()){ bytes memory _data = abi.encodeWithSelector( IGatewayClient.notifySwapoutFallback.selector, result, amount, swapoutSeq ); sender.call(_data);} return result;}",
                                "modifiers": [
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "address",
                                        "name": "sender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "swapoutSeq"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": "result"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20Gateway_MintBurn_FB.IMintBurn",
                                        "sender.call",
                                        "sender.isContract"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "9a2a005cf6a39781f4c24019a15e0f5c"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "address": "Address"
                    }
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "sender.isContract": "d5972f1432570efe297b754cd2693d6f"
            },
            "md5": "c08351d31732484d9c905df902fe2076"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\interfaces\\IGatewayClient721.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\interfaces\\IGatewayClient721.sol",
            "filename": "IGatewayClient721.sol",
            "imported_contracts": {},
            "contracts": {
                "IGatewayClient721": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "notifySwapoutFallback": [
                            {
                                "visibility": "external",
                                "content": "function notifySwapoutFallback(bool refundSuccess, uint256 tokenId, uint256 swapoutSeq) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "bool",
                                        "name": "refundSuccess"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "tokenId"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "swapoutSeq"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "8988b67eca5b500fed1f49d1db30a234"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "1091d15ef438c6f44831c86b0a494be4"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\interfaces\\extensions\\IERC721GatewayFallback.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\interfaces\\extensions\\IERC721GatewayFallback.sol",
            "filename": "IERC721GatewayFallback.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\interfaces\\IERC721Gateway.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "IERC721GatewayFallback": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "IERC721Gateway"
                    ],
                    "state_variables": {},
                    "functions": {
                        "Swapout": [
                            {
                                "visibility": "external",
                                "content": "function Swapout(uint256 tokenId, address receiver, uint256 toChainID) external payable returns (uint256 swapoutSeq);",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "tokenId"
                                    },
                                    {
                                        "type": "address",
                                        "name": "receiver"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "toChainID"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": "swapoutSeq"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": true,
                                "md5": "d27645117fae8a3bc5deceb7577669c0"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": [
                        [
                            "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\extensions\\ERC721GatewayFallback.sol",
                            "ERC721GatewayFallback"
                        ]
                    ]
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "d2aa5fab89610eba811e67e264a45dfb"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\extensions\\ERC721GatewayFallback.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\extensions\\ERC721GatewayFallback.sol",
            "filename": "ERC721GatewayFallback.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\AnyCallAppFallback.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\ERC721Gateway.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\interfaces\\extensions\\IERC721GatewayFallback.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "ERC721GatewayFallback": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": true,
                    "inherits": [
                        "is",
                        "ERC721Gateway",
                        "AnyCallAppFallback",
                        "IERC721GatewayFallback"
                    ],
                    "state_variables": {},
                    "functions": {
                        "_swapoutFallback": [
                            {
                                "visibility": "internal",
                                "content": "function _swapoutFallback(uint256 tokenId, address sender, uint256 swapoutSeq, bytes memory extraMsg) internal virtual returns (bool);",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "tokenId"
                                    },
                                    {
                                        "type": "address",
                                        "name": "sender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "swapoutSeq"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "extraMsg"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "7cf95cc194f44f0660a2c317d8e9c2df"
                            }
                        ],
                        "Swapout": [
                            {
                                "visibility": "external",
                                "content": "function Swapout(uint256 tokenId, address receiver, uint256 destChainID) external payable returns (uint256){ (bool ok, bytes memory extraMsg) = _swapout(tokenId); require(ok); swapoutSeq++; bytes memory data = abi.encode(tokenId, msg.sender, receiver, swapoutSeq, extraMsg); _anyCall(peer[destChainID], data, address(this), destChainID); emit LogAnySwapOut(tokenId, msg.sender, receiver, destChainID, swapoutSeq); return swapoutSeq;}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "tokenId"
                                    },
                                    {
                                        "type": "address",
                                        "name": "receiver"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "destChainID"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "swapoutSeq",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\ERC721Gateway.sol",
                                        "ERC721Gateway"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "token",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\ERC721Gateway.sol",
                                        "ERC721Gateway"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC721GatewayFallback.LogAnySwapOut",
                                        "ERC721GatewayFallback._anyCall",
                                        "ERC721GatewayFallback._swapout"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "0cbbf571f164af07ab40cc7c9fff0609"
                            }
                        ],
                        "_anyFallback": [
                            {
                                "visibility": "internal",
                                "content": "function _anyFallback(bytes calldata data) internal override{ (uint256 tokenId, address sender,, uint256 swapoutSeq, bytes memory extraMsg) = abi.decode( data, (uint256, address, address, uint256, bytes) ); require(_swapoutFallback(tokenId, sender, swapoutSeq, extraMsg));}",
                                "modifiers": [
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes calldata",
                                        "name": "data"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "swapoutSeq",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\ERC721Gateway.sol",
                                        "ERC721Gateway"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "token",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\ERC721Gateway.sol",
                                        "ERC721Gateway"
                                    ],
                                    [
                                        "swapoutSeq",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\ERC721Gateway.sol",
                                        "ERC721Gateway"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC721GatewayFallback._swapoutFallback"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "268badb2e337ccfc19208e07e5a6528d"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "ERC721GatewayFallback._swapout": "e5926a5b7928885a053a7f1c6b2edc62",
                "ERC721GatewayFallback._swapoutFallback": "7cf95cc194f44f0660a2c317d8e9c2df"
            },
            "md5": "81d1c5159fefa0a06fad1d6e6d231833"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\anycall_app\\fallback\\ERC721Gateway_LILO_FB.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\anycall_app\\fallback\\ERC721Gateway_LILO_FB.sol",
            "filename": "ERC721Gateway_LILO_FB.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\anycall_app\\ERC721Gateway_LILO.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\Address.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\interfaces\\IGatewayClient721.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\extensions\\ERC721GatewayFallback.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "ERC721Gateway_LILO_FB": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "ERC721Gateway_LILO",
                        "ERC721GatewayFallback"
                    ],
                    "state_variables": {},
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (address anyCallProxy, uint256 flag, address token) ERC721Gateway_LILO(anyCallProxy, flag, token){}",
                                "modifiers": [
                                    "ERC721Gateway_LILO(anyCallProxy, flag, token)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "anyCallProxy"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "flag"
                                    },
                                    {
                                        "type": "address",
                                        "name": "token"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "bcbfa54c0bd0ca3903f30dfd49c2f4b1"
                            }
                        ],
                        "_swapoutFallback": [
                            {
                                "visibility": "internal",
                                "content": "function _swapoutFallback(uint256 tokenId, address sender, uint256 swapoutSeq, bytes memory extraMsg) internal override returns (bool result){ try IERC721(token).safeTransferFrom(address(this), msg.sender, tokenId){ result = true;} catch{ result = false;} if (sender.isContract()){ bytes memory _data = abi.encodeWithSelector(IGatewayClient721.notifySwapoutFallback.selector, result, tokenId, swapoutSeq); sender.call(_data);} return result;}",
                                "modifiers": [
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "tokenId"
                                    },
                                    {
                                        "type": "address",
                                        "name": "sender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "swapoutSeq"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "extraMsg"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": "result"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC721Gateway_LILO_FB.IERC721",
                                        "sender.call",
                                        "sender.isContract"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "05141f36356836990be2476878443fc6"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "address": "Address"
                    }
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "sender.isContract": "d5972f1432570efe297b754cd2693d6f"
            },
            "md5": "2311b7f45ac8e22cf1b8736a0a951119"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\anycall_app\\fallback\\ERC721Gateway_MintBurn_FB.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\anycall_app\\fallback\\ERC721Gateway_MintBurn_FB.sol",
            "filename": "ERC721Gateway_MintBurn_FB.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\anycall_app\\ERC721Gateway_MintBurn.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\Address.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\interfaces\\IGatewayClient721.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\extensions\\ERC721GatewayFallback.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "ERC721Gateway_MintBurn_FB": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "ERC721Gateway_MintBurn",
                        "ERC721GatewayFallback"
                    ],
                    "state_variables": {},
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (address anyCallProxy, uint256 flag, address token) ERC721Gateway_MintBurn(anyCallProxy, flag, token){}",
                                "modifiers": [
                                    "ERC721Gateway_MintBurn(anyCallProxy, flag, token)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "anyCallProxy"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "flag"
                                    },
                                    {
                                        "type": "address",
                                        "name": "token"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "2fdb6ae05fc7138d0d366bafb57031ab"
                            }
                        ],
                        "_swapoutFallback": [
                            {
                                "visibility": "internal",
                                "content": "function _swapoutFallback(uint256 tokenId, address sender, uint256 swapoutSeq, bytes memory extraMsg) internal override returns (bool result){ try IMintBurn721(token).mint(sender, tokenId){ result = true;} catch{ result = false;} if (sender.isContract()){ bytes memory _data = abi.encodeWithSelector(IGatewayClient721.notifySwapoutFallback.selector, result, tokenId, swapoutSeq); sender.call(_data);} return result;}",
                                "modifiers": [
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "tokenId"
                                    },
                                    {
                                        "type": "address",
                                        "name": "sender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "swapoutSeq"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "extraMsg"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": "result"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC721Gateway_MintBurn_FB.IMintBurn721",
                                        "sender.call",
                                        "sender.isContract"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "2271e68b4466457762447fb09860f1b8"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "address": "Address"
                    }
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "sender.isContract": "d5972f1432570efe297b754cd2693d6f"
            },
            "md5": "1a0ae003115d8154e174de78433bb66a"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\GatewayClients\\ERC20MessageGatewaySender.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\GatewayClients\\ERC20MessageGatewaySender.sol",
            "filename": "ERC20MessageGatewaySender.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\AnyCall-V7\\interfaces\\Types.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\interfaces\\IERC20MessageGateway.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "ERC20_Message_Gateway_Sender": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": true,
                    "inherits": [],
                    "state_variables": {
                        "gateway": {
                            "type": "address",
                            "visibility": "internal",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address gateway;"
                        }
                    },
                    "functions": {
                        "send": [
                            {
                                "visibility": "external",
                                "content": "function send( uint256 toChainID, uint256 amount, address receiver, address callTo ) external payable{ SwapOutArgs memory swapargs = SwapOutArgs(toChainID, receiver, amount); bytes memory boundMessage = \"any message\"; IERC20MessageGateway(gateway).SwapOut_and_call( swapargs, callTo, boundMessage );}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "toChainID"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "address",
                                        "name": "receiver"
                                    },
                                    {
                                        "type": "address",
                                        "name": "callTo"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "gateway",
                                        "",
                                        "ERC20_Message_Gateway_Sender"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20_Message_Gateway_Sender.SwapOutArgs",
                                        "ERC20_Message_Gateway_Sender.IERC20MessageGateway"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "0621ff43df14aeeb02835850cc039354"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "a35ad44838b3fe53540f9c608f761501"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\GatewayClients\\ERC20MessageGatewayClient.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\GatewayClients\\ERC20MessageGatewayClient.sol",
            "filename": "ERC20MessageGatewayClient.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\GatewayClients\\ERC20MessageGatewaySender.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\GatewayClients\\IERC20MessageGatewayReceiver.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "ERC20MessageGatewayClient": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": true,
                    "inherits": [
                        "is",
                        "ERC20_Message_Gateway_Sender",
                        "IERC20_Message_Gateway_Receiver"
                    ],
                    "state_variables": {},
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (address gateway_){ gateway = gateway_;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "gateway_"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "gateway",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\GatewayClients\\ERC20MessageGatewaySender.sol",
                                        "ERC20_Message_Gateway_Sender"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "gateway",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\GatewayClients\\ERC20MessageGatewaySender.sol",
                                        "ERC20_Message_Gateway_Sender"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "24782e217a93f9a61a95b7386611bd60"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "0f2654fa7f44b979fcaea5f62f5364e5"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\interfaces\\Types.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Multichain20220118\\contracts\\interfaces\\Types.sol",
            "filename": "Types.sol",
            "imported_contracts": {},
            "contracts": {},
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {
                "SwapOutArgs": {
                    "content": "SwapOutArgs{ uint256 amount; address receiver; uint256 toChainID;}"
                }
            },
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "37ca0864996ac46989739d6bb6479107"
        }
    },
    "handled_md5": {
        "__set__": true,
        "values": [
            "760141362c8ceb5677acb7fac6699b24",
            "d70a26ec26c9e0c48a5e105ffb077498",
            "aebdbc46b27c3819deeae3c230b55aa5",
            "87e1d145cc5ead53dcc8effbc499d04b",
            "b34524d0feb1c1ad0cf3a6a254d6dd51",
            "df2421bf55a7061e7eac17a66da769bb",
            "a2b4ff3b9d09946a428f37c12f664097",
            "9080e0d8a3fc310c8584419e61fc4feb",
            "fd2476322ac1cfe124a766a28028593d",
            "36597ac4a521a4f043247e54420c07fa",
            "50c873766b936fce374507be4e10f7bc",
            "501dc930dc5fcc15b95d84c41093ce19",
            "fb1d1e02602e1da05708c1dbf14b67fd",
            "11dcebaba172bdad9ff6b9988159cf21",
            "1091d15ef438c6f44831c86b0a494be4",
            "879b0bc40a52c33db6a2c5fe721d9a78",
            "a30a892d23327102ee18956771392cb7",
            "5dabd1cf310145f9d360f4f6bf662bf1",
            "aa67727b967ca063a68a802216bb8f8f",
            "1a0ae003115d8154e174de78433bb66a",
            "6bf89b9c712e4152d2956288de869d41",
            "aa1882fc21b106d03737534cad01c79c",
            "ce155554adbd9c87b9ff1d544c492295",
            "36e2f65127b9672b2284d5d92812ff8d",
            "0f2654fa7f44b979fcaea5f62f5364e5",
            "5a58d7139a543cb0e397ff9a3ea44683",
            "4eff0f55bd0cb1aa8d1d28efa2921b19",
            "a4922b4594b312e7f798e8b9e584203e",
            "8e8ffdbe156a9aef8fb16f859327fb58",
            "14455fd5fc501920466b423584d8755e",
            "36d178d668362204fd2005b2506dce72",
            "63fb49fcdd2fb2346fc7dd6f84f27173",
            "d9cf60ad24b1c529cfed62ff723a99b0",
            "329640e1e379428ac38b47666e63d519",
            "31f20c42373626527041c49611e5cfa4",
            "b67b536a02f1ee24fb593da02d7f010f",
            "b9b0d228e5169bf85fa758ab34702378",
            "c9c3be927036f4583b5922ec27a14061",
            "9558e6b539134e509321c14ac02913b8",
            "79d9267afbbf1a7b1050278dd5cf3162",
            "c38e60d08a3f6c2c3e8ee7b24b648339",
            "25e783ae4eea0f15a93c60336df622fb",
            "c94f424b1884498b571ff0f0d131d5ea",
            "d2aa5fab89610eba811e67e264a45dfb",
            "c08351d31732484d9c905df902fe2076",
            "670be2abc005b96c1b5284a9c1616f7d",
            "51464cab02f6e669cf7f5f1f79081c9d",
            "b7cf51fe08003fa60fc58ff2c26c48ba",
            "189600b5e8a809127d12f3cda3beca82",
            "a35ad44838b3fe53540f9c608f761501",
            "37ca0864996ac46989739d6bb6479107",
            "02a8432e58ceef4f3194f4d033abb5ba",
            "938ed8fdf9917988332c3e180bc39b44",
            "66131545ea0a9b7eb194f2b6b916b557",
            "9055e5a762410b8ccd9fa08e410d370a",
            "7e2969c815e73882bfe2d79461b73063",
            "6679291083c41b0d4785e885fb27c495",
            "8620ffc399b0f2c2a8798821378cf97f",
            "5f64fd8fe26e563527541c2ef814c8cd",
            "4c696b0abe2d6c2372a0f6f739aba38d",
            "1b70fde92c317a121ee35ff7e266db38",
            "d9f8aaa9ce55ef24825a82359f7bcb81",
            "0a7761de2e0c7eaecdfc2200d65f3b47",
            "81d1c5159fefa0a06fad1d6e6d231833",
            "698469a8777abc008f1c981ec218ed79",
            "2a0a73bed6ec18d1bc4451d3e6d60d77",
            "d5c5aa52bdf17eba27994415101cc6f7",
            "441a1ff3ff1e780d305f5cd15c52daeb",
            "05c89eebdbad3cb76752bdf837419f30",
            "6b8cc32342a6dc3fd9ebcbe4f94d85a5",
            "abbe31bb97feb83a5b5bc30164b7f1b7",
            "e786fe05e550286bcd521326d105291e",
            "898cd62cea19fd9d375c194ff7c002f8",
            "17e6f356ad9134588087378935960899",
            "a7cbd39a81aad92a30ce35df32b0b2be",
            "1e80da186a77b9fa725770858d5efef8",
            "17323570b8e5a036cf6f5a16d6cf3fd2",
            "e59a0b81681451ffd018f8da8295749f",
            "2311b7f45ac8e22cf1b8736a0a951119",
            "393df93ce1730fb57e40d160aa08dec1",
            "87f8326c3764eadba960c939f88cd7b1",
            "559cc70ac14f736c46fc5d13619b7499"
        ]
    }
}