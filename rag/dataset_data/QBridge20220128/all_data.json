{
    "solidity_file": {
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\QBridge20220128\\0x99309d2e7265528dC7C3067004cC4A90d37b7CC3\\EnumerableSetUpgradeable.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\QBridge20220128\\0x99309d2e7265528dC7C3067004cC4A90d37b7CC3\\EnumerableSetUpgradeable.sol",
            "filename": "EnumerableSetUpgradeable.sol",
            "imported_contracts": {},
            "contracts": {
                "EnumerableSetUpgradeable": {
                    "type": {
                        "__CT__": true,
                        "value": 2
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "_add": [
                            {
                                "visibility": "private",
                                "content": "function _add(Set storage set, bytes32 value) private returns (bool){ if (!_contains(set, value)){ set._values.push(value); set._indexes[value] = set._values.length; return true;} else{ return false;}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "Set storage",
                                        "name": "set"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "value"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "EnumerableSetUpgradeable._contains"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "ad2b7769dc9b89055623e5cf9cf8a379"
                            }
                        ],
                        "_remove": [
                            {
                                "visibility": "private",
                                "content": "function _remove(Set storage set, bytes32 value) private returns (bool){ uint256 valueIndex = set._indexes[value]; if (valueIndex != 0){ uint256 toDeleteIndex = valueIndex - 1; uint256 lastIndex = set._values.length - 1; bytes32 lastvalue = set._values[lastIndex]; set._values[toDeleteIndex] = lastvalue; set._indexes[lastvalue] = toDeleteIndex + 1; set._values.pop(); delete set._indexes[value]; return true;} else{ return false;}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "Set storage",
                                        "name": "set"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "value"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "17c0cb919bc1b5be0cc90a5f63cce6a2"
                            }
                        ],
                        "_contains": [
                            {
                                "visibility": "private",
                                "content": "function _contains(Set storage set, bytes32 value) private view returns (bool){ return set._indexes[value] != 0;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "Set storage",
                                        "name": "set"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "value"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "1741e13e15ea9a9f210919d1c3788e12"
                            }
                        ],
                        "_length": [
                            {
                                "visibility": "private",
                                "content": "function _length(Set storage set) private view returns (uint256){ return set._values.length;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "Set storage",
                                        "name": "set"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "bc694b0bdf3b5a29dac66980d1d4182b"
                            }
                        ],
                        "_at": [
                            {
                                "visibility": "private",
                                "content": "function _at(Set storage set, uint256 index) private view returns (bytes32){ require(set._values.length > index, \"EnumerableSet: index out of bounds\"); return set._values[index];}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "Set storage",
                                        "name": "set"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "index"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "e1759b4e1992d27144a409f7b53a0ae1"
                            }
                        ],
                        "add": [
                            {
                                "visibility": "internal",
                                "content": "function add(Bytes32Set storage set, bytes32 value) internal returns (bool){ return _add(set._inner, value);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "Bytes32Set storage",
                                        "name": "set"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "value"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "EnumerableSetUpgradeable._add"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "a781f1092de2c7ab7383feacecf54193"
                            },
                            {
                                "visibility": "internal",
                                "content": "function add(AddressSet storage set, address value) internal returns (bool){ return _add(set._inner, bytes32(uint256(uint160(value))));}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "AddressSet storage",
                                        "name": "set"
                                    },
                                    {
                                        "type": "address",
                                        "name": "value"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "EnumerableSetUpgradeable._add"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "3edf76a089a91822cd8846059713aba8"
                            },
                            {
                                "visibility": "internal",
                                "content": "function add(UintSet storage set, uint256 value) internal returns (bool){ return _add(set._inner, bytes32(value));}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "UintSet storage",
                                        "name": "set"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "EnumerableSetUpgradeable._add"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "852b0f9f2830320e0672bf0227599b4a"
                            }
                        ],
                        "remove": [
                            {
                                "visibility": "internal",
                                "content": "function remove(Bytes32Set storage set, bytes32 value) internal returns (bool){ return _remove(set._inner, value);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "Bytes32Set storage",
                                        "name": "set"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "value"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "EnumerableSetUpgradeable._remove"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "86fffffe13bc5f2bc6250a9078d33ed1"
                            },
                            {
                                "visibility": "internal",
                                "content": "function remove(AddressSet storage set, address value) internal returns (bool){ return _remove(set._inner, bytes32(uint256(uint160(value))));}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "AddressSet storage",
                                        "name": "set"
                                    },
                                    {
                                        "type": "address",
                                        "name": "value"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "EnumerableSetUpgradeable._remove"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "51efe515eaeadbd9b0605b0513ab73d0"
                            },
                            {
                                "visibility": "internal",
                                "content": "function remove(UintSet storage set, uint256 value) internal returns (bool){ return _remove(set._inner, bytes32(value));}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "UintSet storage",
                                        "name": "set"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "EnumerableSetUpgradeable._remove"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "d4f789eb112120d7d4ed25cdb162a126"
                            }
                        ],
                        "contains": [
                            {
                                "visibility": "internal",
                                "content": "function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool){ return _contains(set._inner, value);}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "Bytes32Set storage",
                                        "name": "set"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "value"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "EnumerableSetUpgradeable._contains"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "ebf215d2fe5dbf37db4a675a5e81ca83"
                            },
                            {
                                "visibility": "internal",
                                "content": "function contains(AddressSet storage set, address value) internal view returns (bool){ return _contains(set._inner, bytes32(uint256(uint160(value))));}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "AddressSet storage",
                                        "name": "set"
                                    },
                                    {
                                        "type": "address",
                                        "name": "value"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "EnumerableSetUpgradeable._contains"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "17662067e0b322fd9c16ef50ecede785"
                            },
                            {
                                "visibility": "internal",
                                "content": "function contains(UintSet storage set, uint256 value) internal view returns (bool){ return _contains(set._inner, bytes32(value));}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "UintSet storage",
                                        "name": "set"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "EnumerableSetUpgradeable._contains"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "e69466d3da969494102a54751ab9f3a8"
                            }
                        ],
                        "length": [
                            {
                                "visibility": "internal",
                                "content": "function length(Bytes32Set storage set) internal view returns (uint256){ return _length(set._inner);}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "Bytes32Set storage",
                                        "name": "set"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "EnumerableSetUpgradeable._length"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "cdddec0bf1b403598c3c0d896191f58b"
                            },
                            {
                                "visibility": "internal",
                                "content": "function length(AddressSet storage set) internal view returns (uint256){ return _length(set._inner);}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "AddressSet storage",
                                        "name": "set"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "EnumerableSetUpgradeable._length"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "ecedb9e5fc6c79ed204867d3da23afe5"
                            },
                            {
                                "visibility": "internal",
                                "content": "function length(UintSet storage set) internal view returns (uint256){ return _length(set._inner);}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "UintSet storage",
                                        "name": "set"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "EnumerableSetUpgradeable._length"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "cea2e30ad0bc0364c37de49fbeb20dc5"
                            }
                        ],
                        "at": [
                            {
                                "visibility": "internal",
                                "content": "function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32){ return _at(set._inner, index);}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "Bytes32Set storage",
                                        "name": "set"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "index"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "EnumerableSetUpgradeable._at"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "af7c729aedc6ec7caf11fecc0c9b1432"
                            },
                            {
                                "visibility": "internal",
                                "content": "function at(AddressSet storage set, uint256 index) internal view returns (address){ return address(uint160(uint256(_at(set._inner, index))));}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "AddressSet storage",
                                        "name": "set"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "index"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "EnumerableSetUpgradeable._at"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "acdc34b74c96fe072d76d09948c8a7ca"
                            },
                            {
                                "visibility": "internal",
                                "content": "function at(UintSet storage set, uint256 index) internal view returns (uint256){ return uint256(_at(set._inner, index));}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "UintSet storage",
                                        "name": "set"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "index"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "EnumerableSetUpgradeable._at"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "14de3a4f705bba70509f35b3dd44365f"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {
                        "Set": {
                            "content": "Set{ bytes32[] _values; mapping (bytes32 => uint256) _indexes;}"
                        },
                        "Bytes32Set": {
                            "content": "Bytes32Set{ Set _inner;}"
                        },
                        "AddressSet": {
                            "content": "AddressSet{ Set _inner;}"
                        },
                        "UintSet": {
                            "content": "UintSet{ Set _inner;}"
                        }
                    },
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "EnumerableSetUpgradeable._contains": "1741e13e15ea9a9f210919d1c3788e12",
                "EnumerableSetUpgradeable._add": "ad2b7769dc9b89055623e5cf9cf8a379",
                "EnumerableSetUpgradeable._remove": "17c0cb919bc1b5be0cc90a5f63cce6a2",
                "EnumerableSetUpgradeable._length": "bc694b0bdf3b5a29dac66980d1d4182b",
                "EnumerableSetUpgradeable._at": "e1759b4e1992d27144a409f7b53a0ae1"
            },
            "md5": "1dbc8af0dd06fa51e960b2fe36351469"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\QBridge20220128\\0x99309d2e7265528dC7C3067004cC4A90d37b7CC3\\AddressUpgradeable.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\QBridge20220128\\0x99309d2e7265528dC7C3067004cC4A90d37b7CC3\\AddressUpgradeable.sol",
            "filename": "AddressUpgradeable.sol",
            "imported_contracts": {},
            "contracts": {
                "AddressUpgradeable": {
                    "type": {
                        "__CT__": true,
                        "value": 2
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "isContract": [
                            {
                                "visibility": "internal",
                                "content": "function isContract(address account) internal view returns (bool){ uint256 size; assembly{ size := extcodesize(account)} return size > 0;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "account"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "b946110d999861cda9a1e7e7629934c3"
                            }
                        ],
                        "sendValue": [
                            {
                                "visibility": "internal",
                                "content": "function sendValue(address payable recipient, uint256 amount) internal{ require(address(this).balance >= amount, \"Address: insufficient balance\"); (bool success, ) = recipient.call{ value: amount} (\"\"); require(success, \"Address: unable to send value, recipient may have reverted\");}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address payable",
                                        "name": "recipient"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "4213f1701c2999f67f11de98a51e01f6"
                            }
                        ],
                        "functionCall": [
                            {
                                "visibility": "internal",
                                "content": "function functionCall(address target, bytes memory data) internal returns (bytes memory){ return functionCall(target, data, \"Address: low-level call failed\");}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "target"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "data"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AddressUpgradeable.functionCallWithValue",
                                        "AddressUpgradeable.functionCall"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "9bd9227b4301edafa41944a5a4cc096d"
                            },
                            {
                                "visibility": "internal",
                                "content": "function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory){ return functionCallWithValue(target, data, 0, errorMessage);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "target"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "data"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "errorMessage"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AddressUpgradeable.functionCallWithValue",
                                        "AddressUpgradeable.functionCall"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "735101b0fafaf16211fa1793190b6833"
                            }
                        ],
                        "functionCallWithValue": [
                            {
                                "visibility": "internal",
                                "content": "function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory){ return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "target"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "data"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AddressUpgradeable.functionCallWithValue",
                                        "AddressUpgradeable._verifyCallResult",
                                        "AddressUpgradeable.isContract"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "9587564662cef65eec554844bed6f202"
                            },
                            {
                                "visibility": "internal",
                                "content": "function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory){ require(address(this).balance >= value, \"Address: insufficient balance for call\"); require(isContract(target), \"Address: call to non- contract \"); (bool success, bytes memory returndata) = target.call{ value: value} (data); return _verifyCallResult(success, returndata, errorMessage);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "target"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "data"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "errorMessage"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AddressUpgradeable.functionCallWithValue",
                                        "AddressUpgradeable._verifyCallResult",
                                        "AddressUpgradeable.isContract"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "0756338a698cf2353736421e83671b07"
                            }
                        ],
                        "functionStaticCall": [
                            {
                                "visibility": "internal",
                                "content": "function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory){ return functionStaticCall(target, data, \"Address: low-level static call failed\");}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "target"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "data"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AddressUpgradeable.functionStaticCall",
                                        "target.staticcall",
                                        "AddressUpgradeable._verifyCallResult",
                                        "AddressUpgradeable.isContract"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "994685aae3cda8dbbf0ffec7f803d344"
                            },
                            {
                                "visibility": "internal",
                                "content": "function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory){ require(isContract(target), \"Address: static call to non- contract \"); (bool success, bytes memory returndata) = target.staticcall(data); return _verifyCallResult(success, returndata, errorMessage);}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "target"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "data"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "errorMessage"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AddressUpgradeable.functionStaticCall",
                                        "target.staticcall",
                                        "AddressUpgradeable._verifyCallResult",
                                        "AddressUpgradeable.isContract"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "c48c18ad7c0451e22168da4792c23d4b"
                            }
                        ],
                        "_verifyCallResult": [
                            {
                                "visibility": "private",
                                "content": "function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory){ if (success){ return returndata;} else{ if (returndata.length > 0){ assembly{ let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size)}} else{ revert(errorMessage);}}}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bool",
                                        "name": "success"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "returndata"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "errorMessage"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "e6d84fd002b4ef76a1834f09ca48b18b"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "AddressUpgradeable.functionCall": "9bd9227b4301edafa41944a5a4cc096d",
                "AddressUpgradeable.functionCallWithValue": "9587564662cef65eec554844bed6f202",
                "AddressUpgradeable.isContract": "b946110d999861cda9a1e7e7629934c3",
                "AddressUpgradeable._verifyCallResult": "e6d84fd002b4ef76a1834f09ca48b18b",
                "AddressUpgradeable.functionStaticCall": "994685aae3cda8dbbf0ffec7f803d344"
            },
            "md5": "33f7806931940d55f142828d3d6a84ff"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\QBridge20220128\\0x99309d2e7265528dC7C3067004cC4A90d37b7CC3\\Initializable.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\QBridge20220128\\0x99309d2e7265528dC7C3067004cC4A90d37b7CC3\\Initializable.sol",
            "filename": "Initializable.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\QBridge20220128\\0x99309d2e7265528dC7C3067004cC4A90d37b7CC3\\AddressUpgradeable.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "Initializable": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": true,
                    "inherits": [],
                    "state_variables": {
                        "_initialized": {
                            "type": "bool",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "bool private _initialized;"
                        },
                        "_initializing": {
                            "type": "bool",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "bool private _initializing;"
                        }
                    },
                    "functions": {
                        "_isConstructor": [
                            {
                                "visibility": "private",
                                "content": "function _isConstructor() private view returns (bool){ return !AddressUpgradeable.isContract(address(this));}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AddressUpgradeable.isContract"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "2df5a9c4c3f62b7f564f61d0928f903a"
                            }
                        ]
                    },
                    "modifiers": {
                        "initializer": {
                            "parameters": [],
                            "content": "modifier initializer(){ require(_initializing || _isConstructor() || !_initialized, \"Initializable: contract is already initialized\"); bool isTopLevelCall = !_initializing; if (isTopLevelCall){ _initializing = true; _initialized = true;} _; if (isTopLevelCall){ _initializing = false;}}",
                            "reads": [
                                [
                                    "_initialized",
                                    "",
                                    "Initializable"
                                ],
                                [
                                    "_initializing",
                                    "",
                                    "Initializable"
                                ]
                            ],
                            "writes": [
                                [
                                    "_initialized",
                                    "",
                                    "Initializable"
                                ],
                                [
                                    "_initializing",
                                    "",
                                    "Initializable"
                                ]
                            ],
                            "external_calls": {
                                "__set__": true,
                                "values": [
                                    "Initializable._isConstructor"
                                ]
                            },
                            "md5": "9a3941efe0712b157053363b75d3f33f"
                        }
                    },
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "Initializable._isConstructor": "2df5a9c4c3f62b7f564f61d0928f903a",
                "AddressUpgradeable.isContract": "b946110d999861cda9a1e7e7629934c3"
            },
            "md5": "2eea29ed865f9c035f7ea85ca0fc70b4"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\QBridge20220128\\0x99309d2e7265528dC7C3067004cC4A90d37b7CC3\\ContextUpgradeable.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\QBridge20220128\\0x99309d2e7265528dC7C3067004cC4A90d37b7CC3\\ContextUpgradeable.sol",
            "filename": "ContextUpgradeable.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\QBridge20220128\\0x99309d2e7265528dC7C3067004cC4A90d37b7CC3\\Initializable.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "ContextUpgradeable": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": true,
                    "inherits": [
                        "is",
                        "Initializable"
                    ],
                    "state_variables": {
                        "__gap": {
                            "type": "uint256[50]",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256[50] private __gap;"
                        }
                    },
                    "functions": {
                        "__Context_init": [
                            {
                                "visibility": "internal",
                                "content": "function __Context_init() internal initializer{ __Context_init_unchained();}",
                                "modifiers": [
                                    "initializer"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ContextUpgradeable.__Context_init_unchained",
                                        "ContextUpgradeable.initializer"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "ac041e388216097d4a3bd5bb532a04c2"
                            }
                        ],
                        "__Context_init_unchained": [
                            {
                                "visibility": "internal",
                                "content": "function __Context_init_unchained() internal initializer{}",
                                "modifiers": [
                                    "initializer"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ContextUpgradeable.initializer"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "ff90e0cbb896d9c015a83bf8000be465"
                            }
                        ],
                        "_msgSender": [
                            {
                                "visibility": "internal",
                                "content": "function _msgSender() internal view virtual returns (address payable){ return msg.sender;}",
                                "modifiers": [
                                    "view",
                                    "virtual"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address payable",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "00e29fff2bd07c51e23e94ddc6a504c4"
                            }
                        ],
                        "_msgData": [
                            {
                                "visibility": "internal",
                                "content": "function _msgData() internal view virtual returns (bytes memory){ this; return msg.data;}",
                                "modifiers": [
                                    "view",
                                    "virtual"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "85862d5484a7dade4fadbe2620ef8307"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "ContextUpgradeable.initializer": "9a3941efe0712b157053363b75d3f33f",
                "ContextUpgradeable.__Context_init_unchained": "ff90e0cbb896d9c015a83bf8000be465"
            },
            "md5": "9341e1e348d904fb33969859ac53db59"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\QBridge20220128\\0x99309d2e7265528dC7C3067004cC4A90d37b7CC3\\AccessControlIndexUpgradeable.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\QBridge20220128\\0x99309d2e7265528dC7C3067004cC4A90d37b7CC3\\AccessControlIndexUpgradeable.sol",
            "filename": "AccessControlIndexUpgradeable.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\QBridge20220128\\0x99309d2e7265528dC7C3067004cC4A90d37b7CC3\\EnumerableSetUpgradeable.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\QBridge20220128\\0x99309d2e7265528dC7C3067004cC4A90d37b7CC3\\AddressUpgradeable.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\QBridge20220128\\0x99309d2e7265528dC7C3067004cC4A90d37b7CC3\\ContextUpgradeable.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "AccessControlIndexUpgradeable": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": true,
                    "inherits": [
                        "is",
                        "Initializable",
                        "ContextUpgradeable"
                    ],
                    "state_variables": {
                        "_roles": {
                            "type": "mapping(bytes32 => RoleData)",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(bytes32 => RoleData) private _roles;"
                        },
                        "DEFAULT_ADMIN_ROLE": {
                            "type": "bytes32",
                            "visibility": "public",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "0x00",
                            "content": "bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;"
                        },
                        "__gap": {
                            "type": "uint256[49]",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256[49] private __gap;"
                        }
                    },
                    "functions": {
                        "__AccessControl_init": [
                            {
                                "visibility": "internal",
                                "content": "function __AccessControl_init() internal initializer{ __Context_init_unchained(); __AccessControl_init_unchained();}",
                                "modifiers": [
                                    "initializer"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AccessControlIndexUpgradeable.initializer",
                                        "AccessControlIndexUpgradeable.__AccessControl_init_unchained",
                                        "AccessControlIndexUpgradeable.__Context_init_unchained"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "62fc2e5195c0be9a584b25288fe773fd"
                            }
                        ],
                        "__AccessControl_init_unchained": [
                            {
                                "visibility": "internal",
                                "content": "function __AccessControl_init_unchained() internal initializer{}",
                                "modifiers": [
                                    "initializer"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AccessControlIndexUpgradeable.initializer"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "066675476748812f9c58f096ccb349ba"
                            }
                        ],
                        "hasRole": [
                            {
                                "visibility": "public",
                                "content": "function hasRole(bytes32 role, address account) public view returns (bool){ return _roles[role].members.contains(account);}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "role"
                                    },
                                    {
                                        "type": "address",
                                        "name": "account"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_roles",
                                        "",
                                        "AccessControlIndexUpgradeable"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "9fbc7e2af1224ec2a5b77a3507366e7e"
                            }
                        ],
                        "getRoleMemberCount": [
                            {
                                "visibility": "public",
                                "content": "function getRoleMemberCount(bytes32 role) public view returns (uint256){ return _roles[role].members.length();}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "role"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_roles",
                                        "",
                                        "AccessControlIndexUpgradeable"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "19a16dd0a34a0f806edd554f550978bd"
                            }
                        ],
                        "getRoleMember": [
                            {
                                "visibility": "public",
                                "content": "function getRoleMember(bytes32 role, uint256 index) public view returns (address){ return _roles[role].members.at(index);}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "role"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "index"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_roles",
                                        "",
                                        "AccessControlIndexUpgradeable"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "44de99df62eb881a66d6f5892e1bf93d"
                            }
                        ],
                        "getRoleMemberIndex": [
                            {
                                "visibility": "public",
                                "content": "function getRoleMemberIndex(bytes32 role, address account) public view returns (uint256){ return _roles[role].members._inner._indexes[bytes32(uint256(account))];}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "role"
                                    },
                                    {
                                        "type": "address",
                                        "name": "account"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_roles",
                                        "",
                                        "AccessControlIndexUpgradeable"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "dd190eaae6cb4e5f306e9e47fcf9de70"
                            }
                        ],
                        "getRoleAdmin": [
                            {
                                "visibility": "public",
                                "content": "function getRoleAdmin(bytes32 role) public view returns (bytes32){ return _roles[role].adminRole;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "role"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_roles",
                                        "",
                                        "AccessControlIndexUpgradeable"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "f5e4d0f5949141eddc05c7f023643434"
                            }
                        ],
                        "grantRole": [
                            {
                                "visibility": "public",
                                "content": "function grantRole(bytes32 role, address account) public virtual{ require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to grant\"); _grantRole(role, account);}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "role"
                                    },
                                    {
                                        "type": "address",
                                        "name": "account"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_roles",
                                        "",
                                        "AccessControlIndexUpgradeable"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AccessControlIndexUpgradeable._msgSender",
                                        "AccessControlIndexUpgradeable.hasRole",
                                        "AccessControlIndexUpgradeable._grantRole"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "f4b059da9460f5d3d0f6b41f6571ddc9"
                            }
                        ],
                        "revokeRole": [
                            {
                                "visibility": "public",
                                "content": "function revokeRole(bytes32 role, address account) public virtual{ require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to revoke\"); _revokeRole(role, account);}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "role"
                                    },
                                    {
                                        "type": "address",
                                        "name": "account"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_roles",
                                        "",
                                        "AccessControlIndexUpgradeable"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AccessControlIndexUpgradeable._msgSender",
                                        "AccessControlIndexUpgradeable.hasRole",
                                        "AccessControlIndexUpgradeable._revokeRole"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "a6204e95b6de4df653aa2ed5a13647e8"
                            }
                        ],
                        "renounceRole": [
                            {
                                "visibility": "public",
                                "content": "function renounceRole(bytes32 role, address account) public virtual{ require(account == _msgSender(), \"AccessControl: can only renounce roles for self\"); _revokeRole(role, account);}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "role"
                                    },
                                    {
                                        "type": "address",
                                        "name": "account"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AccessControlIndexUpgradeable._msgSender",
                                        "AccessControlIndexUpgradeable._revokeRole"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "aedd260ef7208937a1679e5447fe9131"
                            }
                        ],
                        "_setupRole": [
                            {
                                "visibility": "internal",
                                "content": "function _setupRole(bytes32 role, address account) internal virtual{ _grantRole(role, account);}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "role"
                                    },
                                    {
                                        "type": "address",
                                        "name": "account"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AccessControlIndexUpgradeable._grantRole"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "af0a23debe0f001cc6c8bf7d6a9618e6"
                            }
                        ],
                        "_setRoleAdmin": [
                            {
                                "visibility": "internal",
                                "content": "function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual{ emit RoleAdminChanged(role, _roles[role].adminRole, adminRole); _roles[role].adminRole = adminRole;}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "role"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "adminRole"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_roles",
                                        "",
                                        "AccessControlIndexUpgradeable"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "41c45b50653546e009bdb381daee2fd6"
                            }
                        ],
                        "_grantRole": [
                            {
                                "visibility": "private",
                                "content": "function _grantRole(bytes32 role, address account) private{ if (_roles[role].members.add(account)){ emit RoleGranted(role, account, _msgSender());}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "role"
                                    },
                                    {
                                        "type": "address",
                                        "name": "account"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_roles",
                                        "",
                                        "AccessControlIndexUpgradeable"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AccessControlIndexUpgradeable._msgSender"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "771494ac28e5f2aeb04be27c51120863"
                            }
                        ],
                        "_revokeRole": [
                            {
                                "visibility": "private",
                                "content": "function _revokeRole(bytes32 role, address account) private{ if (_roles[role].members.remove(account)){ emit RoleRevoked(role, account, _msgSender());}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "role"
                                    },
                                    {
                                        "type": "address",
                                        "name": "account"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_roles",
                                        "",
                                        "AccessControlIndexUpgradeable"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AccessControlIndexUpgradeable._msgSender"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "dc2c25cb40f6be919e8b4d4af191851f"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {
                        "RoleData": {
                            "content": "RoleData{ EnumerableSetUpgradeable.AddressSet members; bytes32 adminRole;}"
                        }
                    },
                    "events": {
                        "RoleAdminChanged": {
                            "event": "RoleAdminChanged",
                            "content": "RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)"
                        },
                        "RoleGranted": {
                            "event": "RoleGranted",
                            "content": "RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)"
                        },
                        "RoleRevoked": {
                            "event": "RoleRevoked",
                            "content": "RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "address": "AddressUpgradeable"
                    }
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "AccessControlIndexUpgradeable.__Context_init_unchained": "ff90e0cbb896d9c015a83bf8000be465",
                "AccessControlIndexUpgradeable.__AccessControl_init_unchained": "066675476748812f9c58f096ccb349ba",
                "AccessControlIndexUpgradeable.hasRole": "9fbc7e2af1224ec2a5b77a3507366e7e",
                "AccessControlIndexUpgradeable._msgSender": "00e29fff2bd07c51e23e94ddc6a504c4",
                "AccessControlIndexUpgradeable._grantRole": "771494ac28e5f2aeb04be27c51120863",
                "AccessControlIndexUpgradeable._revokeRole": "dc2c25cb40f6be919e8b4d4af191851f"
            },
            "md5": "6bbdc5455976e60c9153e621107c51d5"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\QBridge20220128\\0x99309d2e7265528dC7C3067004cC4A90d37b7CC3\\IBEP20.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\QBridge20220128\\0x99309d2e7265528dC7C3067004cC4A90d37b7CC3\\IBEP20.sol",
            "filename": "IBEP20.sol",
            "imported_contracts": {},
            "contracts": {
                "IBEP20": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "totalSupply": [
                            {
                                "visibility": "external",
                                "content": "function totalSupply() external view returns (uint256);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "5e1d12e61f4bf4b37161d9b684742570"
                            }
                        ],
                        "decimals": [
                            {
                                "visibility": "external",
                                "content": "function decimals() external view returns (uint8);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint8",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "af3fd982db2d33756fe4782a6d55350a"
                            }
                        ],
                        "symbol": [
                            {
                                "visibility": "external",
                                "content": "function symbol() external view returns (string memory);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "string memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "290eeefbf46324b8fc0db56342aa8b5c"
                            }
                        ],
                        "name": [
                            {
                                "visibility": "external",
                                "content": "function name() external view returns (string memory);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "string memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "4025788d8802eb9f22e195dc2bedffee"
                            }
                        ],
                        "getOwner": [
                            {
                                "visibility": "external",
                                "content": "function getOwner() external view returns (address);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "79d6e202610c24061e3c43c0790fbc5e"
                            }
                        ],
                        "balanceOf": [
                            {
                                "visibility": "external",
                                "content": "function balanceOf(address account) external view returns (uint256);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "account"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "3ac17e7782366957c960d337a4a648cd"
                            }
                        ],
                        "transfer": [
                            {
                                "visibility": "external",
                                "content": "function transfer(address recipient, uint256 amount) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "recipient"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "98b540da9047ee99bce7fadde65d04b7"
                            }
                        ],
                        "allowance": [
                            {
                                "visibility": "external",
                                "content": "function allowance(address _owner, address spender) external view returns (uint256);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_owner"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "7d3982d995a154aade498b79bfef9c84"
                            }
                        ],
                        "approve": [
                            {
                                "visibility": "external",
                                "content": "function approve(address spender, uint256 amount) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "7c80d707df648dc123a10c69a1150edc"
                            }
                        ],
                        "transferFrom": [
                            {
                                "visibility": "external",
                                "content": "function transferFrom( address sender, address recipient, uint256 amount ) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "sender"
                                    },
                                    {
                                        "type": "address",
                                        "name": "recipient"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "7932ef7c0c445db0af2fbba14709eeae"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {
                        "Transfer": {
                            "event": "Transfer",
                            "content": "Transfer(address indexed from, address indexed to, uint256 value)"
                        },
                        "Approval": {
                            "event": "Approval",
                            "content": "Approval(address indexed owner, address indexed spender, uint256 value)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": [
                        [
                            "C:\\Users\\wy\\Desktop\\rag\\dataset\\QBridge20220128\\0x99309d2e7265528dC7C3067004cC4A90d37b7CC3\\BEP20Upgradeable.sol",
                            "BEP20Upgradeable"
                        ]
                    ]
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "fef8cea09901821b622ed9cd3d0665e0"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\QBridge20220128\\0x99309d2e7265528dC7C3067004cC4A90d37b7CC3\\OwnableUpgradeable.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\QBridge20220128\\0x99309d2e7265528dC7C3067004cC4A90d37b7CC3\\OwnableUpgradeable.sol",
            "filename": "OwnableUpgradeable.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\QBridge20220128\\0x99309d2e7265528dC7C3067004cC4A90d37b7CC3\\ContextUpgradeable.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\QBridge20220128\\0x99309d2e7265528dC7C3067004cC4A90d37b7CC3\\Initializable.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "OwnableUpgradeable": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": true,
                    "inherits": [
                        "is",
                        "Initializable",
                        "ContextUpgradeable"
                    ],
                    "state_variables": {
                        "_owner": {
                            "type": "address",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address private _owner;"
                        },
                        "__gap": {
                            "type": "uint256[49]",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256[49] private __gap;"
                        }
                    },
                    "functions": {
                        "__Ownable_init": [
                            {
                                "visibility": "internal",
                                "content": "function __Ownable_init() internal initializer{ __Context_init_unchained(); __Ownable_init_unchained();}",
                                "modifiers": [
                                    "initializer"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "OwnableUpgradeable.initializer",
                                        "OwnableUpgradeable.__Ownable_init_unchained",
                                        "OwnableUpgradeable.__Context_init_unchained"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "f7820e4676d5bcf96dd81f938b91f4f1"
                            }
                        ],
                        "__Ownable_init_unchained": [
                            {
                                "visibility": "internal",
                                "content": "function __Ownable_init_unchained() internal initializer{ address msgSender = _msgSender(); _owner = msgSender; emit OwnershipTransferred(address(0), msgSender);}",
                                "modifiers": [
                                    "initializer"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [
                                    [
                                        "_owner",
                                        "",
                                        "OwnableUpgradeable"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_owner",
                                        "",
                                        "OwnableUpgradeable"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "OwnableUpgradeable.initializer",
                                        "OwnableUpgradeable._msgSender"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "f3e7ad499953e1b52c55f3c5bb3e4ddb"
                            }
                        ],
                        "owner": [
                            {
                                "visibility": "public",
                                "content": "function owner() public view virtual returns (address){ return _owner;}",
                                "modifiers": [
                                    "view",
                                    "virtual"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_owner",
                                        "",
                                        "OwnableUpgradeable"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c000c329207e63e4293ec575de9eb28a"
                            }
                        ],
                        "renounceOwnership": [
                            {
                                "visibility": "public",
                                "content": "function renounceOwnership() public virtual onlyOwner{ emit OwnershipTransferred(_owner, address(0)); _owner = address(0);}",
                                "modifiers": [
                                    "virtual",
                                    "onlyOwner"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [
                                    [
                                        "_owner",
                                        "",
                                        "OwnableUpgradeable"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_owner",
                                        "",
                                        "OwnableUpgradeable"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "OwnableUpgradeable.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "6bc3f7799b940307f12357aad7c15fa2"
                            }
                        ],
                        "transferOwnership": [
                            {
                                "visibility": "public",
                                "content": "function transferOwnership(address newOwner) public virtual onlyOwner{ require(newOwner != address(0), \"Ownable: new owner is the zero address\"); emit OwnershipTransferred(_owner, newOwner); _owner = newOwner;}",
                                "modifiers": [
                                    "virtual",
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "newOwner"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_owner",
                                        "",
                                        "OwnableUpgradeable"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_owner",
                                        "",
                                        "OwnableUpgradeable"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "OwnableUpgradeable.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "4f1a2d71c9d0856b2600a43004342a3c"
                            }
                        ]
                    },
                    "modifiers": {
                        "onlyOwner": {
                            "parameters": [],
                            "content": "modifier onlyOwner(){ require(owner() == _msgSender(), \"Ownable: caller is not the owner\"); _;}",
                            "reads": [],
                            "writes": [],
                            "external_calls": {
                                "__set__": true,
                                "values": [
                                    "OwnableUpgradeable.owner",
                                    "OwnableUpgradeable._msgSender"
                                ]
                            },
                            "md5": "b92099c80fb280641bb32ab9f3280aeb"
                        }
                    },
                    "structs": {},
                    "events": {
                        "OwnershipTransferred": {
                            "event": "OwnershipTransferred",
                            "content": "OwnershipTransferred(address indexed previousOwner, address indexed newOwner)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "OwnableUpgradeable.initializer": "9a3941efe0712b157053363b75d3f33f",
                "OwnableUpgradeable.__Ownable_init_unchained": "f3e7ad499953e1b52c55f3c5bb3e4ddb",
                "OwnableUpgradeable.__Context_init_unchained": "ff90e0cbb896d9c015a83bf8000be465",
                "OwnableUpgradeable._msgSender": "00e29fff2bd07c51e23e94ddc6a504c4",
                "OwnableUpgradeable.owner": "c000c329207e63e4293ec575de9eb28a",
                "OwnableUpgradeable.onlyOwner": "b92099c80fb280641bb32ab9f3280aeb"
            },
            "md5": "090bb4a7c40899581e4087c0b8bd48c1"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\QBridge20220128\\0x99309d2e7265528dC7C3067004cC4A90d37b7CC3\\SafeMath.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\QBridge20220128\\0x99309d2e7265528dC7C3067004cC4A90d37b7CC3\\SafeMath.sol",
            "filename": "SafeMath.sol",
            "imported_contracts": {},
            "contracts": {
                "SafeMath": {
                    "type": {
                        "__CT__": true,
                        "value": 2
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "tryAdd": [
                            {
                                "visibility": "internal",
                                "content": "function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256){ uint256 c = a + b; if (c < a) return (false, 0); return (true, c);}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "a"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "b"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    },
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "46ce8334a4ead43a32dce5688a8a5d2b"
                            }
                        ],
                        "trySub": [
                            {
                                "visibility": "internal",
                                "content": "function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256){ if (b > a) return (false, 0); return (true, a - b);}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "a"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "b"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    },
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "1c1a32540e3a100292672418fcab8a72"
                            }
                        ],
                        "tryMul": [
                            {
                                "visibility": "internal",
                                "content": "function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256){ if (a == 0) return (true, 0); uint256 c = a * b; if (c / a != b) return (false, 0); return (true, c);}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "a"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "b"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    },
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "700407387793583c2fe6c35cf9581e84"
                            }
                        ],
                        "tryDiv": [
                            {
                                "visibility": "internal",
                                "content": "function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256){ if (b == 0) return (false, 0); return (true, a / b);}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "a"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "b"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    },
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "ecf8d5d646f961052d8509a2fe1c6222"
                            }
                        ],
                        "tryMod": [
                            {
                                "visibility": "internal",
                                "content": "function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256){ if (b == 0) return (false, 0); return (true, a % b);}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "a"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "b"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    },
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "67320fc63047d6ea1ea2f76cea3d1f40"
                            }
                        ],
                        "add": [
                            {
                                "visibility": "internal",
                                "content": "function add(uint256 a, uint256 b) internal pure returns (uint256){ uint256 c = a + b; require(c >= a, \"SafeMath: addition overflow\"); return c;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "a"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "b"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "b83a169007730f80a7fc79bee8748fff"
                            }
                        ],
                        "sub": [
                            {
                                "visibility": "internal",
                                "content": "function sub(uint256 a, uint256 b) internal pure returns (uint256){ require(b <= a, \"SafeMath: subtraction overflow\"); return a - b;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "a"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "b"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "aa6b5a83ac7caeaf81056eef5389fca5"
                            },
                            {
                                "visibility": "internal",
                                "content": "function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256){ require(b <= a, errorMessage); return a - b;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "a"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "b"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "errorMessage"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "bf37c866b6fedbd1f907bedc1db2ecf4"
                            }
                        ],
                        "mul": [
                            {
                                "visibility": "internal",
                                "content": "function mul(uint256 a, uint256 b) internal pure returns (uint256){ if (a == 0) return 0; uint256 c = a * b; require(c / a == b, \"SafeMath: multiplication overflow\"); return c;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "a"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "b"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "7c28c2dd07441fa54b1d03075792c91b"
                            }
                        ],
                        "div": [
                            {
                                "visibility": "internal",
                                "content": "function div(uint256 a, uint256 b) internal pure returns (uint256){ require(b > 0, \"SafeMath: division by zero\"); return a / b;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "a"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "b"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "412fb6a70380571ecfde09f14e0cc060"
                            },
                            {
                                "visibility": "internal",
                                "content": "function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256){ require(b > 0, errorMessage); return a / b;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "a"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "b"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "errorMessage"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "13421747919eac13f5a8a59c89f33ea9"
                            }
                        ],
                        "mod": [
                            {
                                "visibility": "internal",
                                "content": "function mod(uint256 a, uint256 b) internal pure returns (uint256){ require(b > 0, \"SafeMath: modulo by zero\"); return a % b;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "a"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "b"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "7c96bf46bac68fb10bb28ee253c94302"
                            },
                            {
                                "visibility": "internal",
                                "content": "function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256){ require(b > 0, errorMessage); return a % b;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "a"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "b"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "errorMessage"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "6355d2e145b4213072aa6bcb41536f79"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "640f23155e4d43145a6d34ef9d48af10"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\QBridge20220128\\0x99309d2e7265528dC7C3067004cC4A90d37b7CC3\\BEP20Upgradeable.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\QBridge20220128\\0x99309d2e7265528dC7C3067004cC4A90d37b7CC3\\BEP20Upgradeable.sol",
            "filename": "BEP20Upgradeable.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\QBridge20220128\\0x99309d2e7265528dC7C3067004cC4A90d37b7CC3\\IBEP20.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\QBridge20220128\\0x99309d2e7265528dC7C3067004cC4A90d37b7CC3\\OwnableUpgradeable.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\QBridge20220128\\0x99309d2e7265528dC7C3067004cC4A90d37b7CC3\\SafeMath.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "BEP20Upgradeable": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": true,
                    "inherits": [
                        "is",
                        "IBEP20",
                        "OwnableUpgradeable"
                    ],
                    "state_variables": {
                        "_balances": {
                            "type": "mapping(address => uint)",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(address => uint) private _balances;"
                        },
                        "_allowances": {
                            "type": "mapping(address => mapping(address => uint))",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(address => mapping(address => uint)) private _allowances;"
                        },
                        "_totalSupply": {
                            "type": "uint",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint private _totalSupply;"
                        },
                        "_name": {
                            "type": "string",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "string private _name;"
                        },
                        "_symbol": {
                            "type": "string",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "string private _symbol;"
                        },
                        "_decimals": {
                            "type": "uint8",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint8 private _decimals;"
                        },
                        "__gap": {
                            "type": "uint[50]",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint[50] private __gap;"
                        }
                    },
                    "functions": {
                        "__BEP20__init": [
                            {
                                "visibility": "internal",
                                "content": "function __BEP20__init( string memory name, string memory symbol, uint8 decimals ) internal initializer{ __Ownable_init(); _name = name; _symbol = symbol; _decimals = decimals;}",
                                "modifiers": [
                                    "initializer"
                                ],
                                "parameters": [
                                    {
                                        "type": "string memory",
                                        "name": "name"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "symbol"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "decimals"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_name",
                                        "",
                                        "BEP20Upgradeable"
                                    ],
                                    [
                                        "_symbol",
                                        "",
                                        "BEP20Upgradeable"
                                    ],
                                    [
                                        "_decimals",
                                        "",
                                        "BEP20Upgradeable"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_name",
                                        "",
                                        "BEP20Upgradeable"
                                    ],
                                    [
                                        "_symbol",
                                        "",
                                        "BEP20Upgradeable"
                                    ],
                                    [
                                        "_decimals",
                                        "",
                                        "BEP20Upgradeable"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BEP20Upgradeable.initializer",
                                        "BEP20Upgradeable.__Ownable_init"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "8a5538f42abaa64c63f9d59399c5f9cc"
                            }
                        ],
                        "getOwner": [
                            {
                                "visibility": "external",
                                "content": "function getOwner() external view override returns (address){ return owner();}",
                                "modifiers": [
                                    "view",
                                    "override"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BEP20Upgradeable.owner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "4e69af8fe3e7bdaca142a1e89bf0d389"
                            }
                        ],
                        "decimals": [
                            {
                                "visibility": "external",
                                "content": "function decimals() external view override returns (uint8){ return _decimals;}",
                                "modifiers": [
                                    "view",
                                    "override"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint8",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_decimals",
                                        "",
                                        "BEP20Upgradeable"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "41c3756450ca96e3e3c4074eedd31011"
                            }
                        ],
                        "symbol": [
                            {
                                "visibility": "external",
                                "content": "function symbol() external view override returns (string memory){ return _symbol;}",
                                "modifiers": [
                                    "view",
                                    "override"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "string memory",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_symbol",
                                        "",
                                        "BEP20Upgradeable"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "655a7402ca45e088b400d89a71dfcd1b"
                            }
                        ],
                        "name": [
                            {
                                "visibility": "external",
                                "content": "function name() external view override returns (string memory){ return _name;}",
                                "modifiers": [
                                    "view",
                                    "override"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "string memory",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_name",
                                        "",
                                        "BEP20Upgradeable"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "4ee97bd292477f6b25209fd365f12cb9"
                            }
                        ],
                        "totalSupply": [
                            {
                                "visibility": "public",
                                "content": "function totalSupply() public view override returns (uint){ return _totalSupply;}",
                                "modifiers": [
                                    "view",
                                    "override"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_totalSupply",
                                        "",
                                        "BEP20Upgradeable"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "2704b9c11f07d92fed10c5fbd4d33c58"
                            }
                        ],
                        "balanceOf": [
                            {
                                "visibility": "public",
                                "content": "function balanceOf(address account) public view override returns (uint){ return _balances[account];}",
                                "modifiers": [
                                    "view",
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "account"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_balances",
                                        "",
                                        "BEP20Upgradeable"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "92aa9cdb3d387b90e1c8ee5b60f83145"
                            }
                        ],
                        "transfer": [
                            {
                                "visibility": "external",
                                "content": "function transfer(address recipient, uint amount) external override returns (bool){ _transfer(_msgSender(), recipient, amount); return true;}",
                                "modifiers": [
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "recipient"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BEP20Upgradeable._msgSender",
                                        "BEP20Upgradeable._transfer"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "896ebcad7f79d4d1b13644e416566220"
                            }
                        ],
                        "allowance": [
                            {
                                "visibility": "public",
                                "content": "function allowance(address owner, address spender) public view override returns (uint){ return _allowances[owner][spender];}",
                                "modifiers": [
                                    "view",
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "owner"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_allowances",
                                        "",
                                        "BEP20Upgradeable"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "b43a7c2ccced873168049b30cf8f63df"
                            }
                        ],
                        "approve": [
                            {
                                "visibility": "public",
                                "content": "function approve(address spender, uint amount) public override returns (bool){ _approve(_msgSender(), spender, amount); return true;}",
                                "modifiers": [
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BEP20Upgradeable._approve",
                                        "BEP20Upgradeable._msgSender"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "7fd50d34b8810af400ac4e83befb8289"
                            }
                        ],
                        "transferFrom": [
                            {
                                "visibility": "external",
                                "content": "function transferFrom( address sender, address recipient, uint amount ) external override returns (bool){ _transfer(sender, recipient, amount); _approve( sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"BEP20: transfer amount exceeds allowance\") ); return true;}",
                                "modifiers": [
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "sender"
                                    },
                                    {
                                        "type": "address",
                                        "name": "recipient"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_allowances",
                                        "",
                                        "BEP20Upgradeable"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BEP20Upgradeable._approve",
                                        "BEP20Upgradeable._msgSender",
                                        "BEP20Upgradeable._transfer"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "fb13a5de3902e36136fae6c1c7a2ca15"
                            }
                        ],
                        "increaseAllowance": [
                            {
                                "visibility": "public",
                                "content": "function increaseAllowance(address spender, uint addedValue) public returns (bool){ _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue)); return true;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "addedValue"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_allowances",
                                        "",
                                        "BEP20Upgradeable"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BEP20Upgradeable._approve",
                                        "BEP20Upgradeable._msgSender"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "c4ee8bccc4a970ae02996d5116ea0c39"
                            }
                        ],
                        "decreaseAllowance": [
                            {
                                "visibility": "public",
                                "content": "function decreaseAllowance(address spender, uint subtractedValue) public returns (bool){ _approve( _msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"BEP20: decreased allowance below zero\") ); return true;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "subtractedValue"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_allowances",
                                        "",
                                        "BEP20Upgradeable"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BEP20Upgradeable._approve",
                                        "BEP20Upgradeable._msgSender"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "2c940f4b74570e8b23c33623a5c0e31f"
                            }
                        ],
                        "burn": [
                            {
                                "visibility": "public",
                                "content": "function burn(uint amount) public returns (bool){ _burn(_msgSender(), amount); return true;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BEP20Upgradeable._msgSender",
                                        "BEP20Upgradeable._burn"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "800450b0f4f97ee10afd9079cec11113"
                            }
                        ],
                        "_transfer": [
                            {
                                "visibility": "internal",
                                "content": "function _transfer( address sender, address recipient, uint amount ) internal{ require(sender != address(0), \"BEP20: transfer from the zero address\"); require(recipient != address(0), \"BEP20: transfer to the zero address\"); _balances[sender] = _balances[sender].sub(amount, \"BEP20: transfer amount exceeds balance\"); _balances[recipient] = _balances[recipient].add(amount); emit Transfer(sender, recipient, amount);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "sender"
                                    },
                                    {
                                        "type": "address",
                                        "name": "recipient"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_balances",
                                        "",
                                        "BEP20Upgradeable"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_balances",
                                        "",
                                        "BEP20Upgradeable"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BEP20Upgradeable.Transfer"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "ec7a9e8eacaba4feada5cb13e66b3116"
                            }
                        ],
                        "_mint": [
                            {
                                "visibility": "internal",
                                "content": "function _mint(address account, uint amount) internal{ require(account != address(0), \"BEP20: mint to the zero address\"); _totalSupply = _totalSupply.add(amount); _balances[account] = _balances[account].add(amount); emit Transfer(address(0), account, amount);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "account"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_balances",
                                        "",
                                        "BEP20Upgradeable"
                                    ],
                                    [
                                        "_totalSupply",
                                        "",
                                        "BEP20Upgradeable"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_balances",
                                        "",
                                        "BEP20Upgradeable"
                                    ],
                                    [
                                        "_totalSupply",
                                        "",
                                        "BEP20Upgradeable"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BEP20Upgradeable.Transfer",
                                        "_totalSupply.add"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "46f972a5c9fe0b4abbb1a847a560bde0"
                            }
                        ],
                        "_burn": [
                            {
                                "visibility": "internal",
                                "content": "function _burn(address account, uint amount) internal{ require(account != address(0), \"BEP20: burn from the zero address\"); _balances[account] = _balances[account].sub(amount, \"BEP20: burn amount exceeds balance\"); _totalSupply = _totalSupply.sub(amount); emit Transfer(account, address(0), amount);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "account"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_balances",
                                        "",
                                        "BEP20Upgradeable"
                                    ],
                                    [
                                        "_totalSupply",
                                        "",
                                        "BEP20Upgradeable"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_balances",
                                        "",
                                        "BEP20Upgradeable"
                                    ],
                                    [
                                        "_totalSupply",
                                        "",
                                        "BEP20Upgradeable"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BEP20Upgradeable.Transfer",
                                        "_totalSupply.sub"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "307320ca5bd9f80827fef144e3c5815a"
                            }
                        ],
                        "_approve": [
                            {
                                "visibility": "internal",
                                "content": "function _approve( address owner, address spender, uint amount ) internal{ require(owner != address(0), \"BEP20: approve from the zero address\"); require(spender != address(0), \"BEP20: approve to the zero address\"); _allowances[owner][spender] = amount; emit Approval(owner, spender, amount);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "owner"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_allowances",
                                        "",
                                        "BEP20Upgradeable"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_allowances",
                                        "",
                                        "BEP20Upgradeable"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BEP20Upgradeable.Approval"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "3a48bcb78724ddfc3aa7db56d8338342"
                            }
                        ],
                        "_burnFrom": [
                            {
                                "visibility": "internal",
                                "content": "function _burnFrom(address account, uint amount) internal{ _burn(account, amount); _approve( account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"BEP20: burn amount exceeds allowance\") );}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "account"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_allowances",
                                        "",
                                        "BEP20Upgradeable"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BEP20Upgradeable._approve",
                                        "BEP20Upgradeable._msgSender",
                                        "BEP20Upgradeable._burn"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "7921f81157efa02464a274b6fe1386e6"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "uint": "SafeMath"
                    }
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "BEP20Upgradeable.__Ownable_init": "f7820e4676d5bcf96dd81f938b91f4f1",
                "BEP20Upgradeable.owner": "c000c329207e63e4293ec575de9eb28a",
                "BEP20Upgradeable._transfer": "ec7a9e8eacaba4feada5cb13e66b3116",
                "BEP20Upgradeable._approve": "3a48bcb78724ddfc3aa7db56d8338342",
                "BEP20Upgradeable._burn": "307320ca5bd9f80827fef144e3c5815a",
                "_totalSupply.add": "b83a169007730f80a7fc79bee8748fff",
                "_totalSupply.sub": "aa6b5a83ac7caeaf81056eef5389fca5"
            },
            "md5": "8713af3136ae88b76b3373a39f0e61e6"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\QBridge20220128\\0x99309d2e7265528dC7C3067004cC4A90d37b7CC3\\IQBridgeDelegator.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\QBridge20220128\\0x99309d2e7265528dC7C3067004cC4A90d37b7CC3\\IQBridgeDelegator.sol",
            "filename": "IQBridgeDelegator.sol",
            "imported_contracts": {},
            "contracts": {
                "IQBridgeDelegator": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "delegate": [
                            {
                                "visibility": "external",
                                "content": "function delegate(address xToken, address account, uint option, uint amount) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "xToken"
                                    },
                                    {
                                        "type": "address",
                                        "name": "account"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "option"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "e3c1c29a42138e597abe3c61c4c637e6"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "6e269e0b8354d437268514e61ced1a8b"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\QBridge20220128\\0x99309d2e7265528dC7C3067004cC4A90d37b7CC3\\IQBridgeHandler.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\QBridge20220128\\0x99309d2e7265528dC7C3067004cC4A90d37b7CC3\\IQBridgeHandler.sol",
            "filename": "IQBridgeHandler.sol",
            "imported_contracts": {},
            "contracts": {
                "IQBridgeHandler": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "setResource": [
                            {
                                "visibility": "external",
                                "content": "function setResource(bytes32 resourceID, address contractAddress) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "resourceID"
                                    },
                                    {
                                        "type": "address",
                                        "name": "contractAddress"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "552231eeee9723fb36fb620bdbb08075"
                            }
                        ],
                        "setBurnable": [
                            {
                                "visibility": "external",
                                "content": "function setBurnable(address contractAddress) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "contractAddress"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "50c6cff347fc27e2f17494a0a4bae2df"
                            }
                        ],
                        "deposit": [
                            {
                                "visibility": "external",
                                "content": "function deposit(bytes32 resourceID, address depositer, bytes calldata data) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "resourceID"
                                    },
                                    {
                                        "type": "address",
                                        "name": "depositer"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "data"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "a040257e6105218531a35a8693c5a63f"
                            }
                        ],
                        "depositETH": [
                            {
                                "visibility": "external",
                                "content": "function depositETH(bytes32 resourceID, address depositer, bytes calldata data) external payable;",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "resourceID"
                                    },
                                    {
                                        "type": "address",
                                        "name": "depositer"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "data"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": true,
                                "md5": "51e02eea62a0cd58473bdf94ba7e1847"
                            }
                        ],
                        "executeProposal": [
                            {
                                "visibility": "external",
                                "content": "function executeProposal(bytes32 resourceID, bytes calldata data) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "resourceID"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "data"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "b430808e4e60da9b9edd5a86219fd95a"
                            }
                        ],
                        "withdraw": [
                            {
                                "visibility": "external",
                                "content": "function withdraw(address tokenAddress, address recipient, uint amount) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "tokenAddress"
                                    },
                                    {
                                        "type": "address",
                                        "name": "recipient"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "d9cef3f1f3e03de7e738689b0d49dd68"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": [
                        [
                            "C:\\Users\\wy\\Desktop\\rag\\dataset\\QBridge20220128\\0x99309d2e7265528dC7C3067004cC4A90d37b7CC3\\QBridgeHandler.sol",
                            "QBridgeHandler"
                        ]
                    ]
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "a76df5afb7a9d67759a18b5df8bca809"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\QBridge20220128\\0x99309d2e7265528dC7C3067004cC4A90d37b7CC3\\PausableUpgradeable.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\QBridge20220128\\0x99309d2e7265528dC7C3067004cC4A90d37b7CC3\\PausableUpgradeable.sol",
            "filename": "PausableUpgradeable.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\QBridge20220128\\0x99309d2e7265528dC7C3067004cC4A90d37b7CC3\\OwnableUpgradeable.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "PausableUpgradeable": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": true,
                    "inherits": [
                        "is",
                        "OwnableUpgradeable"
                    ],
                    "state_variables": {
                        "lastPauseTime": {
                            "type": "uint",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint public lastPauseTime;"
                        },
                        "paused": {
                            "type": "bool",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "bool public paused;"
                        },
                        "__gap": {
                            "type": "uint256[50]",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256[50] private __gap;"
                        }
                    },
                    "functions": {
                        "__PausableUpgradeable_init": [
                            {
                                "visibility": "internal",
                                "content": "function __PausableUpgradeable_init() internal initializer{ __Ownable_init(); require(owner() != address(0), \"PausableUpgradeable: owner must be set\");}",
                                "modifiers": [
                                    "initializer"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "PausableUpgradeable.__Ownable_init",
                                        "PausableUpgradeable.owner",
                                        "PausableUpgradeable.initializer"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "69788c3cf1cb83b9c84a221612a125f8"
                            }
                        ],
                        "setPaused": [
                            {
                                "visibility": "external",
                                "content": "function setPaused(bool _paused) external onlyOwner{ if (_paused == paused){ return;} paused = _paused; if (paused){ lastPauseTime = now;} emit PauseChanged(paused);}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "bool",
                                        "name": "_paused"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "lastPauseTime",
                                        "",
                                        "PausableUpgradeable"
                                    ],
                                    [
                                        "paused",
                                        "",
                                        "PausableUpgradeable"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "lastPauseTime",
                                        "",
                                        "PausableUpgradeable"
                                    ],
                                    [
                                        "paused",
                                        "",
                                        "PausableUpgradeable"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "PausableUpgradeable.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "231a43ad87b4b7e8cef9b70180b34029"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {
                        "PauseChanged": {
                            "event": "PauseChanged",
                            "content": "PauseChanged(bool isPaused)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "PausableUpgradeable.__Ownable_init": "f7820e4676d5bcf96dd81f938b91f4f1",
                "PausableUpgradeable.owner": "c000c329207e63e4293ec575de9eb28a",
                "PausableUpgradeable.onlyOwner": "b92099c80fb280641bb32ab9f3280aeb"
            },
            "md5": "25d25c9f81e4d88089962b8796c770d5"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\QBridge20220128\\0x99309d2e7265528dC7C3067004cC4A90d37b7CC3\\SafeToken.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\QBridge20220128\\0x99309d2e7265528dC7C3067004cC4A90d37b7CC3\\SafeToken.sol",
            "filename": "SafeToken.sol",
            "imported_contracts": {},
            "contracts": {
                "ERC20Interface": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "balanceOf": [
                            {
                                "visibility": "external",
                                "content": "function balanceOf(address user) external view returns (uint);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "user"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "49b89564bc6cae66b1875ca4e53b575e"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                },
                "SafeToken": {
                    "type": {
                        "__CT__": true,
                        "value": 2
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "myBalance": [
                            {
                                "visibility": "internal",
                                "content": "function myBalance(address token) internal view returns (uint){ return ERC20Interface(token).balanceOf(address(this));}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "11a2e2f584b11e7bb1f8fa01ee3aa2c7"
                            }
                        ],
                        "balanceOf": [
                            {
                                "visibility": "internal",
                                "content": "function balanceOf(address token, address user) internal view returns (uint){ return ERC20Interface(token).balanceOf(user);}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "user"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "3939c6997b689c7688215b098255d54b"
                            }
                        ],
                        "safeApprove": [
                            {
                                "visibility": "internal",
                                "content": "function safeApprove( address token, address to, uint value ) internal{ (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value)); require(success && (data.length == 0 || abi.decode(data, (bool))), \"!safeApprove\");}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "value"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "token.call"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "1501fd75092f885559a87241dededb8f"
                            }
                        ],
                        "safeTransfer": [
                            {
                                "visibility": "internal",
                                "content": "function safeTransfer( address token, address to, uint value ) internal{ (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value)); require(success && (data.length == 0 || abi.decode(data, (bool))), \"!safeTransfer\");}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "value"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "token.call"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "9fe82e513e4ea2fede44affce931b36a"
                            }
                        ],
                        "safeTransferFrom": [
                            {
                                "visibility": "internal",
                                "content": "function safeTransferFrom( address token, address from, address to, uint value ) internal{ (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value)); require(success && (data.length == 0 || abi.decode(data, (bool))), \"!safeTransferFrom\");}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "value"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "token.call"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "a2e919451b2326a92471cbafd42b0518"
                            }
                        ],
                        "safeTransferETH": [
                            {
                                "visibility": "internal",
                                "content": "function safeTransferETH(address to, uint value) internal{ (bool success, ) = to.call{ value: value} (new bytes(0)); require(success, \"!safeTransferETH\");}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "value"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "f6c084e10a382e02279aa28f84d745ca"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "e9718ce7d7ccf0d368ed6dcc2460271c"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\QBridge20220128\\0x99309d2e7265528dC7C3067004cC4A90d37b7CC3\\QBridge-label.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\QBridge20220128\\0x99309d2e7265528dC7C3067004cC4A90d37b7CC3\\QBridge-label.sol",
            "filename": "QBridge-label.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\QBridge20220128\\0x99309d2e7265528dC7C3067004cC4A90d37b7CC3\\SafeMath.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\QBridge20220128\\0x99309d2e7265528dC7C3067004cC4A90d37b7CC3\\IQBridgeHandler.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\QBridge20220128\\0x99309d2e7265528dC7C3067004cC4A90d37b7CC3\\PausableUpgradeable.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\QBridge20220128\\0x99309d2e7265528dC7C3067004cC4A90d37b7CC3\\AccessControlIndexUpgradeable.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\QBridge20220128\\0x99309d2e7265528dC7C3067004cC4A90d37b7CC3\\SafeToken.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "QBridge": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "PausableUpgradeable",
                        "AccessControlIndexUpgradeable"
                    ],
                    "state_variables": {
                        "RELAYER_ROLE": {
                            "type": "bytes32",
                            "visibility": "public",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "keccak256(\"RELAYER_ROLE\")",
                            "content": "bytes32 public constant RELAYER_ROLE = keccak256(\"RELAYER_ROLE\");"
                        },
                        "MAX_RELAYERS": {
                            "type": "uint",
                            "visibility": "public",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "200",
                            "content": "uint public constant MAX_RELAYERS = 200;"
                        },
                        "domainID": {
                            "type": "uint8",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint8 public domainID;"
                        },
                        "relayerThreshold": {
                            "type": "uint8",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint8 public relayerThreshold;"
                        },
                        "fee": {
                            "type": "uint128",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint128 public fee;"
                        },
                        "expiry": {
                            "type": "uint40",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint40 public expiry;"
                        },
                        "_depositCounts": {
                            "type": "mapping(uint8 => uint64)",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(uint8 => uint64) public _depositCounts;"
                        },
                        "resourceIDToHandlerAddress": {
                            "type": "mapping(bytes32 => address)",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(bytes32 => address) public resourceIDToHandlerAddress;"
                        },
                        "_proposals": {
                            "type": "mapping(uint72 => mapping(bytes32 => Proposal))",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(uint72 => mapping(bytes32 => Proposal)) private _proposals;"
                        }
                    },
                    "functions": {
                        "initialize": [
                            {
                                "visibility": "external",
                                "content": "function initialize(uint8 _domainID, uint8 _relayerThreshold, uint128 _fee, uint40 _expiry) external initializer{ __PausableUpgradeable_init(); __AccessControl_init(); domainID = _domainID; relayerThreshold = _relayerThreshold; fee = _fee; expiry = _expiry; _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);}",
                                "modifiers": [
                                    "initializer"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint8",
                                        "name": "_domainID"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "_relayerThreshold"
                                    },
                                    {
                                        "type": "uint128",
                                        "name": "_fee"
                                    },
                                    {
                                        "type": "uint40",
                                        "name": "_expiry"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "domainID",
                                        "",
                                        "QBridge"
                                    ],
                                    [
                                        "relayerThreshold",
                                        "",
                                        "QBridge"
                                    ],
                                    [
                                        "fee",
                                        "",
                                        "QBridge"
                                    ],
                                    [
                                        "expiry",
                                        "",
                                        "QBridge"
                                    ],
                                    [
                                        "DEFAULT_ADMIN_ROLE",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\QBridge20220128\\0x99309d2e7265528dC7C3067004cC4A90d37b7CC3\\AccessControlIndexUpgradeable.sol",
                                        "AccessControlIndexUpgradeable"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "domainID",
                                        "",
                                        "QBridge"
                                    ],
                                    [
                                        "relayerThreshold",
                                        "",
                                        "QBridge"
                                    ],
                                    [
                                        "fee",
                                        "",
                                        "QBridge"
                                    ],
                                    [
                                        "expiry",
                                        "",
                                        "QBridge"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "QBridge.__AccessControl_init",
                                        "QBridge.initializer",
                                        "QBridge.__PausableUpgradeable_init",
                                        "QBridge._setupRole"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "3b809cd8cd6ab8fba997d0dcc8e403fd"
                            }
                        ],
                        "setRelayerThreshold": [
                            {
                                "visibility": "external",
                                "content": "function setRelayerThreshold(uint8 newThreshold) external onlyOwner{ relayerThreshold = newThreshold; emit RelayerThresholdChanged(newThreshold);}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint8",
                                        "name": "newThreshold"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "relayerThreshold",
                                        "",
                                        "QBridge"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "relayerThreshold",
                                        "",
                                        "QBridge"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "QBridge.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "367b8e9f1b43a8285a79ab84dd7819ca"
                            }
                        ],
                        "addRelayer": [
                            {
                                "visibility": "external",
                                "content": "function addRelayer(address relayer) external onlyOwner{ require(!hasRole(RELAYER_ROLE, relayer), \"QBridge: duplicated relayer\"); require(totalRelayers() < MAX_RELAYERS, \"QBridge: relayers limit reached\"); grantRole(RELAYER_ROLE, relayer); emit RelayerAdded(relayer);}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "relayer"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "RELAYER_ROLE",
                                        "",
                                        "QBridge"
                                    ],
                                    [
                                        "MAX_RELAYERS",
                                        "",
                                        "QBridge"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "QBridge.grantRole",
                                        "QBridge.hasRole",
                                        "QBridge.onlyOwner",
                                        "QBridge.totalRelayers"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "59744129ce8431c21255cc49df6acea7"
                            }
                        ],
                        "removeRelayer": [
                            {
                                "visibility": "external",
                                "content": "function removeRelayer(address relayer) external onlyOwner{ require(hasRole(RELAYER_ROLE, relayer), \"QBridge: invalid relayer\"); revokeRole(RELAYER_ROLE, relayer); emit RelayerRemoved(relayer);}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "relayer"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "RELAYER_ROLE",
                                        "",
                                        "QBridge"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "QBridge.hasRole",
                                        "QBridge.onlyOwner",
                                        "QBridge.revokeRole"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "c83b71b87fe45896efc603d05bc7eff0"
                            }
                        ],
                        "setResource": [
                            {
                                "visibility": "external",
                                "content": "function setResource(address handlerAddress, bytes32 resourceID, address tokenAddress) external onlyOwner{ resourceIDToHandlerAddress[resourceID] = handlerAddress; IQBridgeHandler(handlerAddress).setResource(resourceID, tokenAddress);}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "handlerAddress"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "resourceID"
                                    },
                                    {
                                        "type": "address",
                                        "name": "tokenAddress"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "resourceIDToHandlerAddress",
                                        "",
                                        "QBridge"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "resourceIDToHandlerAddress",
                                        "",
                                        "QBridge"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "QBridge.onlyOwner",
                                        "QBridge.IQBridgeHandler"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "e41fa75cdf841698569d4e5a5d66a39b"
                            }
                        ],
                        "setBurnable": [
                            {
                                "visibility": "external",
                                "content": "function setBurnable(address handlerAddress, address tokenAddress) external onlyOwner{ IQBridgeHandler(handlerAddress).setBurnable(tokenAddress);}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "handlerAddress"
                                    },
                                    {
                                        "type": "address",
                                        "name": "tokenAddress"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "QBridge.onlyOwner",
                                        "QBridge.IQBridgeHandler"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "089790c3172a64fa40a20ee922a5d0a1"
                            }
                        ],
                        "setDepositNonce": [
                            {
                                "visibility": "external",
                                "content": "function setDepositNonce(uint8 _domainID, uint64 nonce) external onlyOwner{ require(nonce > _depositCounts[_domainID], \"QBridge: decrements not allowed\"); _depositCounts[_domainID] = nonce;}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint8",
                                        "name": "_domainID"
                                    },
                                    {
                                        "type": "uint64",
                                        "name": "nonce"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_depositCounts",
                                        "",
                                        "QBridge"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_depositCounts",
                                        "",
                                        "QBridge"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "QBridge.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "1f315fe7c1f2cf665d763ec6c2b367d1"
                            }
                        ],
                        "setFee": [
                            {
                                "visibility": "external",
                                "content": "function setFee(uint128 newFee) external onlyOwner{ fee = newFee;}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint128",
                                        "name": "newFee"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "fee",
                                        "",
                                        "QBridge"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "fee",
                                        "",
                                        "QBridge"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "QBridge.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "23428f7f14a29d9c0df49174b3c1e46c"
                            }
                        ],
                        "manualRelease": [
                            {
                                "visibility": "external",
                                "content": "function manualRelease(address handlerAddress, address tokenAddress, address recipient, uint amount) external onlyOwner{ IQBridgeHandler(handlerAddress).withdraw(tokenAddress, recipient, amount);}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "handlerAddress"
                                    },
                                    {
                                        "type": "address",
                                        "name": "tokenAddress"
                                    },
                                    {
                                        "type": "address",
                                        "name": "recipient"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "QBridge.onlyOwner",
                                        "QBridge.IQBridgeHandler"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "1939981dfee62036e57f238405105d74"
                            }
                        ],
                        "sweep": [
                            {
                                "visibility": "external",
                                "content": "function sweep() external onlyOwner{ SafeToken.safeTransferETH(msg.sender, address(this).balance);}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "QBridge.onlyOwner",
                                        "SafeToken.safeTransferETH"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "bc9b4a79bc2b8ac13a290b8f5aa5b4bb"
                            }
                        ],
                        "isRelayer": [
                            {
                                "visibility": "external",
                                "content": "function isRelayer(address relayer) external view returns (bool){ return hasRole(RELAYER_ROLE, relayer);}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "relayer"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "RELAYER_ROLE",
                                        "",
                                        "QBridge"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "QBridge.hasRole"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "5816ec8b67de23ec20054843cf73c4c0"
                            }
                        ],
                        "totalRelayers": [
                            {
                                "visibility": "public",
                                "content": "function totalRelayers() public view returns (uint){ return AccessControlIndexUpgradeable.getRoleMemberCount(RELAYER_ROLE);}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "RELAYER_ROLE",
                                        "",
                                        "QBridge"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AccessControlIndexUpgradeable.getRoleMemberCount"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "59307613e8d8313a74a2b948e1d6c2fb"
                            }
                        ],
                        "combinedProposalId": [
                            {
                                "visibility": "public",
                                "content": "function combinedProposalId(uint8 _domainID, uint64 nonce) public pure returns (uint72 proposalID){ proposalID = (uint72(nonce) << 8) | uint72(_domainID);}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint8",
                                        "name": "_domainID"
                                    },
                                    {
                                        "type": "uint64",
                                        "name": "nonce"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint72",
                                        "name": "proposalID"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "532db5bf8ce5c433aee337ffa10b1a00"
                            }
                        ],
                        "getProposal": [
                            {
                                "visibility": "external",
                                "content": "function getProposal(uint8 originDomainID, uint64 depositNonce, bytes32 dataHash, address relayer) external view returns (Proposal memory proposal, bool hasVoted){ uint72 proposalID = combinedProposalId(originDomainID, depositNonce); proposal = _proposals[proposalID][dataHash]; hasVoted = _hasVoted(proposal, relayer);}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint8",
                                        "name": "originDomainID"
                                    },
                                    {
                                        "type": "uint64",
                                        "name": "depositNonce"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "dataHash"
                                    },
                                    {
                                        "type": "address",
                                        "name": "relayer"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "Proposal memory",
                                        "name": "proposal"
                                    },
                                    {
                                        "type": "bool",
                                        "name": "hasVoted"
                                    }
                                ],
                                "reads": [
                                    [
                                        "_proposals",
                                        "",
                                        "QBridge"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "QBridge._hasVoted",
                                        "QBridge.combinedProposalId"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "d01a02988134a083bbceb0f4e95669e4"
                            }
                        ],
                        "deposit": [
                            {
                                "visibility": "external",
                                "content": "function deposit(uint8 destinationDomainID, bytes32 resourceID, bytes calldata data) external payable notPaused{ require(msg.value == fee, \"QBridge: invalid fee\"); address handler = resourceIDToHandlerAddress[resourceID]; require(handler != address(0), \"QBridge: invalid resourceID\"); uint64 depositNonce = ++_depositCounts[destinationDomainID]; IQBridgeHandler(handler).deposit(resourceID, msg.sender, data); emit Deposit(destinationDomainID, resourceID, depositNonce, msg.sender, data);}",
                                "modifiers": [
                                    "payable",
                                    "notPaused"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint8",
                                        "name": "destinationDomainID"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "resourceID"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "data"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "fee",
                                        "",
                                        "QBridge"
                                    ],
                                    [
                                        "_depositCounts",
                                        "",
                                        "QBridge"
                                    ],
                                    [
                                        "resourceIDToHandlerAddress",
                                        "",
                                        "QBridge"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "QBridge.notPaused",
                                        "QBridge.IQBridgeHandler"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "47a255b5e150c9f4b3297a099ec79563"
                            }
                        ],
                        "depositETH": [
                            {
                                "visibility": "external",
                                "content": "function depositETH(uint8 destinationDomainID, bytes32 resourceID, bytes calldata data) external payable notPaused{ uint option; uint amount; (option, amount) = abi.decode(data, (uint, uint)); require(msg.value == amount.add(fee), \"QBridge: invalid fee\"); address handler = resourceIDToHandlerAddress[resourceID]; require(handler != address(0), \"QBridge: invalid resourceID\"); uint64 depositNonce = ++_depositCounts[destinationDomainID]; IQBridgeHandler(handler).depositETH{ value:amount} (resourceID, msg.sender, data); emit Deposit(destinationDomainID, resourceID, depositNonce, msg.sender, data);}",
                                "modifiers": [
                                    "payable",
                                    "notPaused"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint8",
                                        "name": "destinationDomainID"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "resourceID"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "data"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "fee",
                                        "",
                                        "QBridge"
                                    ],
                                    [
                                        "_depositCounts",
                                        "",
                                        "QBridge"
                                    ],
                                    [
                                        "resourceIDToHandlerAddress",
                                        "",
                                        "QBridge"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "QBridge.notPaused",
                                        "QBridge.IQBridgeHandler",
                                        "amount.add"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "c887aea3a22bea2b39294cbd8f20eb5b"
                            }
                        ],
                        "voteProposal": [
                            {
                                "visibility": "external",
                                "content": "function voteProposal(uint8 originDomainID, uint64 depositNonce, bytes32 resourceID, bytes calldata data) external onlyRelayers notPaused{ address handlerAddress = resourceIDToHandlerAddress[resourceID]; require(handlerAddress != address(0), \"QBridge: invalid handler\"); uint72 proposalID = combinedProposalId(originDomainID, depositNonce); bytes32 dataHash = keccak256(abi.encodePacked(handlerAddress, data)); Proposal memory proposal = _proposals[proposalID][dataHash]; if (proposal._status == ProposalStatus.Passed){ executeProposal(originDomainID, depositNonce, resourceID, data, true); return;} require(uint(proposal._status) <= 1, \"QBridge: proposal already executed/cancelled\"); require(!_hasVoted(proposal, msg.sender), \"QBridge: relayer already voted\"); if (proposal._status == ProposalStatus.Inactive){ proposal = Proposal({ _status : ProposalStatus.Active, _yesVotes : 0, _yesVotesTotal : 0, _proposedBlock : uint40(block.number)} ); emit ProposalEvent(originDomainID, depositNonce, ProposalStatus.Active, data);} if (proposal._status != ProposalStatus.Cancelled){ proposal._yesVotes = _bitmap(proposal._yesVotes, _relayerBit(msg.sender)); proposal._yesVotesTotal++; emit ProposalVote(originDomainID, depositNonce, proposal._status, dataHash); if (proposal._yesVotesTotal >= relayerThreshold){ proposal._status = ProposalStatus.Passed; emit ProposalEvent(originDomainID, depositNonce, ProposalStatus.Passed, data);}} _proposals[proposalID][dataHash] = proposal; if (proposal._status == ProposalStatus.Passed){ executeProposal(originDomainID, depositNonce, resourceID, data, false);}}",
                                "modifiers": [
                                    "onlyRelayers",
                                    "notPaused"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint8",
                                        "name": "originDomainID"
                                    },
                                    {
                                        "type": "uint64",
                                        "name": "depositNonce"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "resourceID"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "data"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "relayerThreshold",
                                        "",
                                        "QBridge"
                                    ],
                                    [
                                        "resourceIDToHandlerAddress",
                                        "",
                                        "QBridge"
                                    ],
                                    [
                                        "_proposals",
                                        "",
                                        "QBridge"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_proposals",
                                        "",
                                        "QBridge"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "QBridge.combinedProposalId",
                                        "QBridge._hasVoted",
                                        "QBridge._relayerBit",
                                        "QBridge.executeProposal",
                                        "QBridge.notPaused",
                                        "QBridge.onlyRelayers",
                                        "QBridge._bitmap"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "ac39b3a2a0ad4d4af614edc2932d744a"
                            }
                        ],
                        "executeProposal": [
                            {
                                "visibility": "public",
                                "content": "function executeProposal(uint8 originDomainID, uint64 depositNonce, bytes32 resourceID, bytes calldata data, bool revertOnFail) public onlyRelayers notPaused{ address handlerAddress = resourceIDToHandlerAddress[resourceID]; uint72 proposalID = combinedProposalId(originDomainID, depositNonce); bytes32 dataHash = keccak256(abi.encodePacked(handlerAddress, data)); Proposal storage proposal = _proposals[proposalID][dataHash]; require(proposal._status == ProposalStatus.Passed, \"QBridge: Proposal must have Passed status\"); proposal._status = ProposalStatus.Executed; IQBridgeHandler handler = IQBridgeHandler(handlerAddress); if (revertOnFail){ handler.executeProposal(resourceID, data);} else{ try handler.executeProposal(resourceID, data){} catch (bytes memory lowLevelData){ proposal._status = ProposalStatus.Passed; emit FailedHandlerExecution(lowLevelData); return;}} emit ProposalEvent(originDomainID, depositNonce, ProposalStatus.Executed, data);}",
                                "modifiers": [
                                    "onlyRelayers",
                                    "notPaused"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint8",
                                        "name": "originDomainID"
                                    },
                                    {
                                        "type": "uint64",
                                        "name": "depositNonce"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "resourceID"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "data"
                                    },
                                    {
                                        "type": "bool",
                                        "name": "revertOnFail"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "resourceIDToHandlerAddress",
                                        "",
                                        "QBridge"
                                    ],
                                    [
                                        "_proposals",
                                        "",
                                        "QBridge"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "QBridge.combinedProposalId",
                                        "IQBridgeHandler.executeProposal",
                                        "QBridge.notPaused",
                                        "QBridge.IQBridgeHandler",
                                        "QBridge.onlyRelayers"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "a5cdb8dc81bed0100a4ee288779ecbfb"
                            }
                        ],
                        "cancelProposal": [
                            {
                                "visibility": "public",
                                "content": "function cancelProposal(uint8 originDomainID, uint64 depositNonce, bytes32 resourceID, bytes calldata data) public onlyOwnerOrRelayers{ address handlerAddress = resourceIDToHandlerAddress[resourceID]; uint72 proposalID = combinedProposalId(originDomainID, depositNonce); bytes32 dataHash = keccak256(abi.encodePacked(handlerAddress, data)); Proposal memory proposal = _proposals[proposalID][dataHash]; ProposalStatus currentStatus = proposal._status; require(currentStatus == ProposalStatus.Active || currentStatus == ProposalStatus.Passed, \"QBridge: cannot be cancelled\"); require(uint40(block.number.sub(proposal._proposedBlock)) > expiry, \"QBridge: not at expiry threshold\"); proposal._status = ProposalStatus.Cancelled; _proposals[proposalID][dataHash] = proposal; emit ProposalEvent(originDomainID, depositNonce, ProposalStatus.Cancelled, data);}",
                                "modifiers": [
                                    "onlyOwnerOrRelayers"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint8",
                                        "name": "originDomainID"
                                    },
                                    {
                                        "type": "uint64",
                                        "name": "depositNonce"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "resourceID"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "data"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "expiry",
                                        "",
                                        "QBridge"
                                    ],
                                    [
                                        "resourceIDToHandlerAddress",
                                        "",
                                        "QBridge"
                                    ],
                                    [
                                        "_proposals",
                                        "",
                                        "QBridge"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_proposals",
                                        "",
                                        "QBridge"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "QBridge.combinedProposalId",
                                        "QBridge.onlyOwnerOrRelayers"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "31fb5104f69c87c5f5803280ecb9ef9b"
                            }
                        ],
                        "_relayerBit": [
                            {
                                "visibility": "private",
                                "content": "function _relayerBit(address relayer) private view returns (uint){ if (relayer == address(0)) return 0; return uint(1) << AccessControlIndexUpgradeable.getRoleMemberIndex(RELAYER_ROLE, relayer).sub(1);}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "relayer"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "RELAYER_ROLE",
                                        "",
                                        "QBridge"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AccessControlIndexUpgradeable.getRoleMemberIndex"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "888ca3c993fdc671d027d1d98cd71f7a"
                            }
                        ],
                        "_hasVoted": [
                            {
                                "visibility": "private",
                                "content": "function _hasVoted(Proposal memory proposal, address relayer) private view returns (bool){ return (_relayerBit(relayer) & uint(proposal._yesVotes)) > 0;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "Proposal memory",
                                        "name": "proposal"
                                    },
                                    {
                                        "type": "address",
                                        "name": "relayer"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "QBridge._relayerBit"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "2b54ac43e38ce1ed5f7c63b103a8adf8"
                            }
                        ],
                        "_bitmap": [
                            {
                                "visibility": "internal",
                                "content": "function _bitmap(uint200 source, uint bit) internal pure returns (uint200){ uint value = source | bit; require(value < 2 ** 200, \"QBridge: value does not fit in 200 bits\"); return uint200(value);}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint200",
                                        "name": "source"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "bit"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint200",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "5cf6f831bddef308fb342ad921996c8a"
                            }
                        ]
                    },
                    "modifiers": {
                        "onlyRelayers": {
                            "parameters": [],
                            "content": "modifier onlyRelayers(){ require(hasRole(RELAYER_ROLE, msg.sender), \"QBridge: caller is not the relayer\"); _;}",
                            "reads": [
                                [
                                    "RELAYER_ROLE",
                                    "",
                                    "QBridge"
                                ]
                            ],
                            "writes": [],
                            "external_calls": {
                                "__set__": true,
                                "values": [
                                    "QBridge.hasRole"
                                ]
                            },
                            "md5": "14fd4f59ce468fae9e87accfd707a65c"
                        },
                        "onlyOwnerOrRelayers": {
                            "parameters": [],
                            "content": "modifier onlyOwnerOrRelayers(){ require(owner() == msg.sender || hasRole(RELAYER_ROLE, msg.sender), \"QBridge: caller is not the owner or relayer\"); _;}",
                            "reads": [
                                [
                                    "RELAYER_ROLE",
                                    "",
                                    "QBridge"
                                ]
                            ],
                            "writes": [],
                            "external_calls": {
                                "__set__": true,
                                "values": [
                                    "QBridge.hasRole",
                                    "QBridge.owner"
                                ]
                            },
                            "md5": "ad47c528a9cc253f4d4bcabb5ac627fd"
                        }
                    },
                    "structs": {
                        "Proposal": {
                            "content": "Proposal{ ProposalStatus _status; uint200 _yesVotes; uint8 _yesVotesTotal; uint40 _proposedBlock;}"
                        }
                    },
                    "events": {
                        "RelayerThresholdChanged": {
                            "event": "RelayerThresholdChanged",
                            "content": "RelayerThresholdChanged(uint256 newThreshold)"
                        },
                        "RelayerAdded": {
                            "event": "RelayerAdded",
                            "content": "RelayerAdded(address relayer)"
                        },
                        "RelayerRemoved": {
                            "event": "RelayerRemoved",
                            "content": "RelayerRemoved(address relayer)"
                        },
                        "Deposit": {
                            "event": "Deposit",
                            "content": "Deposit(uint8 destinationDomainID, bytes32 resourceID, uint64 depositNonce, address indexed user, bytes data)"
                        },
                        "ProposalEvent": {
                            "event": "ProposalEvent",
                            "content": "ProposalEvent(uint8 originDomainID, uint64 depositNonce, ProposalStatus status, bytes data)"
                        },
                        "ProposalVote": {
                            "event": "ProposalVote",
                            "content": "ProposalVote(uint8 originDomainID, uint64 depositNonce, ProposalStatus status, bytes32 dataHash)"
                        },
                        "FailedHandlerExecution": {
                            "event": "FailedHandlerExecution",
                            "content": "FailedHandlerExecution(bytes lowLevelData)"
                        }
                    },
                    "enums": {
                        "ProposalStatus": {
                            "content": "ProposalStatus{ Inactive, Active, Passed, Executed, Cancelled}"
                        }
                    },
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "uint": "SafeMath",
                        "address": "SafeToken"
                    }
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "QBridge.__PausableUpgradeable_init": "69788c3cf1cb83b9c84a221612a125f8",
                "QBridge._setupRole": "af0a23debe0f001cc6c8bf7d6a9618e6",
                "QBridge.__AccessControl_init": "62fc2e5195c0be9a584b25288fe773fd",
                "QBridge.hasRole": "9fbc7e2af1224ec2a5b77a3507366e7e",
                "QBridge.totalRelayers": "59307613e8d8313a74a2b948e1d6c2fb",
                "QBridge.grantRole": "f4b059da9460f5d3d0f6b41f6571ddc9",
                "QBridge.revokeRole": "a6204e95b6de4df653aa2ed5a13647e8",
                "SafeToken.safeTransferETH": "f6c084e10a382e02279aa28f84d745ca",
                "AccessControlIndexUpgradeable.getRoleMemberCount": "19a16dd0a34a0f806edd554f550978bd",
                "QBridge._hasVoted": "2b54ac43e38ce1ed5f7c63b103a8adf8",
                "QBridge.combinedProposalId": "532db5bf8ce5c433aee337ffa10b1a00",
                "amount.add": "b83a169007730f80a7fc79bee8748fff",
                "QBridge._relayerBit": "888ca3c993fdc671d027d1d98cd71f7a",
                "QBridge._bitmap": "5cf6f831bddef308fb342ad921996c8a",
                "QBridge.executeProposal": "a5cdb8dc81bed0100a4ee288779ecbfb",
                "QBridge.onlyRelayers": "14fd4f59ce468fae9e87accfd707a65c",
                "IQBridgeHandler.executeProposal": "b430808e4e60da9b9edd5a86219fd95a",
                "QBridge.onlyOwnerOrRelayers": "ad47c528a9cc253f4d4bcabb5ac627fd",
                "AccessControlIndexUpgradeable.getRoleMemberIndex": "dd190eaae6cb4e5f306e9e47fcf9de70"
            },
            "md5": "6666daf415b1a3a9aff3f42cb281f4fd"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\QBridge20220128\\0x99309d2e7265528dC7C3067004cC4A90d37b7CC3\\QBridgeToken.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\QBridge20220128\\0x99309d2e7265528dC7C3067004cC4A90d37b7CC3\\QBridgeToken.sol",
            "filename": "QBridgeToken.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\QBridge20220128\\0x99309d2e7265528dC7C3067004cC4A90d37b7CC3\\BEP20Upgradeable.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "QBridgeToken": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "BEP20Upgradeable"
                    ],
                    "state_variables": {
                        "_minters": {
                            "type": "mapping(address => bool)",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(address => bool) private _minters;"
                        }
                    },
                    "functions": {
                        "initialize": [
                            {
                                "visibility": "external",
                                "content": "function initialize(string memory name, string memory symbol, uint8 decimals) external initializer{ __BEP20__init(name, symbol, decimals);}",
                                "modifiers": [
                                    "initializer"
                                ],
                                "parameters": [
                                    {
                                        "type": "string memory",
                                        "name": "name"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "symbol"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "decimals"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "QBridgeToken.__BEP20__init",
                                        "QBridgeToken.initializer"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "a068d0cb87b62b1a812c0eea5a9aec89"
                            }
                        ],
                        "setMinter": [
                            {
                                "visibility": "external",
                                "content": "function setMinter(address minter, bool canMint) external onlyOwner{ _minters[minter] = canMint;}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "minter"
                                    },
                                    {
                                        "type": "bool",
                                        "name": "canMint"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_minters",
                                        "",
                                        "QBridgeToken"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_minters",
                                        "",
                                        "QBridgeToken"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "QBridgeToken.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "c779bc077422057187e88bf4cb88cce5"
                            }
                        ],
                        "mint": [
                            {
                                "visibility": "public",
                                "content": "function mint(address _to, uint _amount) public onlyMinter{ _mint(_to, _amount);}",
                                "modifiers": [
                                    "onlyMinter"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "_amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "QBridgeToken.onlyMinter",
                                        "QBridgeToken._mint"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "ae805caeb869bc0ab0c2fe05fe318d97"
                            }
                        ],
                        "burnFrom": [
                            {
                                "visibility": "public",
                                "content": "function burnFrom(address account, uint amount) public onlyMinter{ uint decreasedAllowance = allowance(account, msg.sender).sub(amount, \"BEP20: burn amount exceeds allowance\"); _approve(account, _msgSender(), decreasedAllowance); _burn(account, amount);}",
                                "modifiers": [
                                    "onlyMinter"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "account"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "QBridgeToken.onlyMinter",
                                        "QBridgeToken._msgSender",
                                        "QBridgeToken.allowance",
                                        "QBridgeToken._burn",
                                        "QBridgeToken._approve"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "5d54f826fb124fa01298ece352f6b6d2"
                            }
                        ],
                        "isMinter": [
                            {
                                "visibility": "public",
                                "content": "function isMinter(address account) public view returns (bool){ return _minters[account];}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "account"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_minters",
                                        "",
                                        "QBridgeToken"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "8ea6949ca1f0e71407dc3ca3a830a4be"
                            }
                        ]
                    },
                    "modifiers": {
                        "onlyMinter": {
                            "parameters": [],
                            "content": "modifier onlyMinter(){ require(isMinter(msg.sender), \"QBridgeToken: caller is not the minter\"); _;}",
                            "reads": [],
                            "writes": [],
                            "external_calls": {
                                "__set__": true,
                                "values": [
                                    "QBridgeToken.isMinter"
                                ]
                            },
                            "md5": "11e626d9ab8dff4191f2f14dba292ea6"
                        }
                    },
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "QBridgeToken.isMinter": "8ea6949ca1f0e71407dc3ca3a830a4be",
                "QBridgeToken.__BEP20__init": "8a5538f42abaa64c63f9d59399c5f9cc",
                "QBridgeToken.onlyMinter": "11e626d9ab8dff4191f2f14dba292ea6",
                "QBridgeToken._mint": "46f972a5c9fe0b4abbb1a847a560bde0",
                "QBridgeToken.allowance": "b43a7c2ccced873168049b30cf8f63df",
                "QBridgeToken._approve": "3a48bcb78724ddfc3aa7db56d8338342",
                "QBridgeToken._burn": "307320ca5bd9f80827fef144e3c5815a"
            },
            "md5": "dbee3c0be638e4eeb2026a3a93b0856e"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\QBridge20220128\\0x99309d2e7265528dC7C3067004cC4A90d37b7CC3\\QBridgeHandler.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\QBridge20220128\\0x99309d2e7265528dC7C3067004cC4A90d37b7CC3\\QBridgeHandler.sol",
            "filename": "QBridgeHandler.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\QBridge20220128\\0x99309d2e7265528dC7C3067004cC4A90d37b7CC3\\OwnableUpgradeable.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\QBridge20220128\\0x99309d2e7265528dC7C3067004cC4A90d37b7CC3\\SafeMath.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\QBridge20220128\\0x99309d2e7265528dC7C3067004cC4A90d37b7CC3\\IQBridgeHandler.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\QBridge20220128\\0x99309d2e7265528dC7C3067004cC4A90d37b7CC3\\IQBridgeDelegator.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\QBridge20220128\\0x99309d2e7265528dC7C3067004cC4A90d37b7CC3\\SafeToken.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\QBridge20220128\\0x99309d2e7265528dC7C3067004cC4A90d37b7CC3\\QBridgeToken.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "QBridgeHandler": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "IQBridgeHandler",
                        "OwnableUpgradeable"
                    ],
                    "state_variables": {
                        "OPTION_QUBIT_BNB_NONE": {
                            "type": "uint",
                            "visibility": "public",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "100",
                            "content": "uint public constant OPTION_QUBIT_BNB_NONE = 100;"
                        },
                        "OPTION_QUBIT_BNB_0100": {
                            "type": "uint",
                            "visibility": "public",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "110",
                            "content": "uint public constant OPTION_QUBIT_BNB_0100 = 110;"
                        },
                        "OPTION_QUBIT_BNB_0050": {
                            "type": "uint",
                            "visibility": "public",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "105",
                            "content": "uint public constant OPTION_QUBIT_BNB_0050 = 105;"
                        },
                        "OPTION_BUNNY_XLP_0150": {
                            "type": "uint",
                            "visibility": "public",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "215",
                            "content": "uint public constant OPTION_BUNNY_XLP_0150 = 215;"
                        },
                        "ETH": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "0x0000000000000000000000000000000000000000",
                            "content": "address public constant ETH = 0x0000000000000000000000000000000000000000;"
                        },
                        "_bridgeAddress": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public _bridgeAddress;"
                        },
                        "resourceIDToTokenContractAddress": {
                            "type": "mapping(bytes32 => address)",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(bytes32 => address) public resourceIDToTokenContractAddress;"
                        },
                        "tokenContractAddressToResourceID": {
                            "type": "mapping(address => bytes32)",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(address => bytes32) public tokenContractAddressToResourceID;"
                        },
                        "burnList": {
                            "type": "mapping(address => bool)",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(address => bool) public burnList;"
                        },
                        "contractWhitelist": {
                            "type": "mapping(address => bool)",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(address => bool) public contractWhitelist;"
                        },
                        "delegators": {
                            "type": "mapping(uint => address)",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(uint => address) public delegators;"
                        },
                        "withdrawalFees": {
                            "type": "mapping(bytes32 => uint)",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(bytes32 => uint) public withdrawalFees;"
                        },
                        "minAmounts": {
                            "type": "mapping(bytes32 => mapping(uint => uint))",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(bytes32 => mapping(uint => uint)) public minAmounts;"
                        }
                    },
                    "functions": {
                        "initialize": [
                            {
                                "visibility": "external",
                                "content": "function initialize(address bridgeAddress) external initializer{ __Ownable_init(); _bridgeAddress = bridgeAddress;}",
                                "modifiers": [
                                    "initializer"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "bridgeAddress"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_bridgeAddress",
                                        "",
                                        "QBridgeHandler"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_bridgeAddress",
                                        "",
                                        "QBridgeHandler"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "QBridgeHandler.__Ownable_init",
                                        "QBridgeHandler.initializer"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "23a960a979fca02326dc6431861e84a5"
                            }
                        ],
                        "setResource": [
                            {
                                "visibility": "external",
                                "content": "function setResource(bytes32 resourceID, address contractAddress) external override onlyBridge{ resourceIDToTokenContractAddress[resourceID] = contractAddress; tokenContractAddressToResourceID[contractAddress] = resourceID; contractWhitelist[contractAddress] = true;}",
                                "modifiers": [
                                    "override",
                                    "onlyBridge"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "resourceID"
                                    },
                                    {
                                        "type": "address",
                                        "name": "contractAddress"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "resourceIDToTokenContractAddress",
                                        "",
                                        "QBridgeHandler"
                                    ],
                                    [
                                        "tokenContractAddressToResourceID",
                                        "",
                                        "QBridgeHandler"
                                    ],
                                    [
                                        "contractWhitelist",
                                        "",
                                        "QBridgeHandler"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "resourceIDToTokenContractAddress",
                                        "",
                                        "QBridgeHandler"
                                    ],
                                    [
                                        "tokenContractAddressToResourceID",
                                        "",
                                        "QBridgeHandler"
                                    ],
                                    [
                                        "contractWhitelist",
                                        "",
                                        "QBridgeHandler"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "QBridgeHandler.onlyBridge"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "8f69cbed49cf991e6c30e682862d95ec"
                            }
                        ],
                        "setBurnable": [
                            {
                                "visibility": "external",
                                "content": "function setBurnable(address contractAddress) external override onlyBridge{ require(contractWhitelist[contractAddress], \"QBridgeHandler: contract address is not whitelisted\"); burnList[contractAddress] = true;}",
                                "modifiers": [
                                    "override",
                                    "onlyBridge"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "contractAddress"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "burnList",
                                        "",
                                        "QBridgeHandler"
                                    ],
                                    [
                                        "contractWhitelist",
                                        "",
                                        "QBridgeHandler"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "burnList",
                                        "",
                                        "QBridgeHandler"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "QBridgeHandler.onlyBridge"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "ebb22f2beac2817761743e178c7c3edb"
                            }
                        ],
                        "setDelegator": [
                            {
                                "visibility": "external",
                                "content": "function setDelegator(uint option, address newDelegator) external onlyOwner{ delegators[option] = newDelegator;}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "option"
                                    },
                                    {
                                        "type": "address",
                                        "name": "newDelegator"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "delegators",
                                        "",
                                        "QBridgeHandler"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "delegators",
                                        "",
                                        "QBridgeHandler"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "QBridgeHandler.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "463ffd53967b714ee43b25f0b20fa202"
                            }
                        ],
                        "setWithdrawalFee": [
                            {
                                "visibility": "external",
                                "content": "function setWithdrawalFee(bytes32 resourceID, uint withdrawalFee) external onlyOwner{ withdrawalFees[resourceID] = withdrawalFee;}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "resourceID"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "withdrawalFee"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "withdrawalFees",
                                        "",
                                        "QBridgeHandler"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "withdrawalFees",
                                        "",
                                        "QBridgeHandler"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "QBridgeHandler.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "14fc9a07ddb3dbc410eff6f02ebf4a33"
                            }
                        ],
                        "setMinDepositAmount": [
                            {
                                "visibility": "external",
                                "content": "function setMinDepositAmount(bytes32 resourceID, uint option, uint minAmount) external onlyOwner{ minAmounts[resourceID][option] = minAmount;}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "resourceID"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "option"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "minAmount"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "minAmounts",
                                        "",
                                        "QBridgeHandler"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "minAmounts",
                                        "",
                                        "QBridgeHandler"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "QBridgeHandler.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "689b52ae301ad13f29689cd0e6069de8"
                            }
                        ],
                        "deposit": [
                            {
                                "visibility": "external",
                                "content": "function deposit(bytes32 resourceID, address depositer, bytes calldata data) external override onlyBridge{ uint option; uint amount; (option, amount) = abi.decode(data, (uint, uint)); address tokenAddress = resourceIDToTokenContractAddress[resourceID]; require(contractWhitelist[tokenAddress], \"provided tokenAddress is not whitelisted\"); if (burnList[tokenAddress]){ require(amount >= withdrawalFees[resourceID], \"less than withdrawal fee\"); QBridgeToken(tokenAddress).burnFrom(depositer, amount);} else{ require(amount >= minAmounts[resourceID][option], \"less than minimum amount\"); tokenAddress.safeTransferFrom(depositer, address(this), amount);}}",
                                "modifiers": [
                                    "override",
                                    "onlyBridge"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "resourceID"
                                    },
                                    {
                                        "type": "address",
                                        "name": "depositer"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "data"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "resourceIDToTokenContractAddress",
                                        "",
                                        "QBridgeHandler"
                                    ],
                                    [
                                        "burnList",
                                        "",
                                        "QBridgeHandler"
                                    ],
                                    [
                                        "contractWhitelist",
                                        "",
                                        "QBridgeHandler"
                                    ],
                                    [
                                        "withdrawalFees",
                                        "",
                                        "QBridgeHandler"
                                    ],
                                    [
                                        "minAmounts",
                                        "",
                                        "QBridgeHandler"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "QBridgeHandler.onlyBridge",
                                        "tokenAddress.safeTransferFrom",
                                        "QBridgeHandler.QBridgeToken"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "281851e9be403577bc50eb50e06d678e"
                            }
                        ],
                        "depositETH": [
                            {
                                "visibility": "external",
                                "content": "function depositETH(bytes32 resourceID, address depositer, bytes calldata data) external payable override onlyBridge{ uint option; uint amount; (option, amount) = abi.decode(data, (uint, uint)); require(amount == msg.value); address tokenAddress = resourceIDToTokenContractAddress[resourceID]; require(contractWhitelist[tokenAddress], \"provided tokenAddress is not whitelisted\"); require(amount >= minAmounts[resourceID][option], \"less than minimum amount\");}",
                                "modifiers": [
                                    "payable",
                                    "override",
                                    "onlyBridge"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "resourceID"
                                    },
                                    {
                                        "type": "address",
                                        "name": "depositer"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "data"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "resourceIDToTokenContractAddress",
                                        "",
                                        "QBridgeHandler"
                                    ],
                                    [
                                        "contractWhitelist",
                                        "",
                                        "QBridgeHandler"
                                    ],
                                    [
                                        "minAmounts",
                                        "",
                                        "QBridgeHandler"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "QBridgeHandler.onlyBridge"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "d27016c1b957b79cce3db3ec763e9747"
                            }
                        ],
                        "executeProposal": [
                            {
                                "visibility": "external",
                                "content": "function executeProposal(bytes32 resourceID, bytes calldata data) external override onlyBridge{ uint option; uint amount; address recipientAddress; (option, amount, recipientAddress) = abi.decode(data, (uint, uint, address)); address tokenAddress = resourceIDToTokenContractAddress[resourceID]; require(contractWhitelist[tokenAddress], \"provided tokenAddress is not whitelisted\"); if (burnList[tokenAddress]){ address delegatorAddress = delegators[option]; if (delegatorAddress == address(0)){ QBridgeToken(tokenAddress).mint(recipientAddress, amount);} else{ QBridgeToken(tokenAddress).mint(delegatorAddress, amount); IQBridgeDelegator(delegatorAddress).delegate(tokenAddress, recipientAddress, option, amount);}} else if (tokenAddress == ETH){ SafeToken.safeTransferETH(recipientAddress, amount.sub(withdrawalFees[resourceID]));} else{ tokenAddress.safeTransfer(recipientAddress, amount.sub(withdrawalFees[resourceID]));}}",
                                "modifiers": [
                                    "override",
                                    "onlyBridge"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "resourceID"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "data"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "ETH",
                                        "",
                                        "QBridgeHandler"
                                    ],
                                    [
                                        "resourceIDToTokenContractAddress",
                                        "",
                                        "QBridgeHandler"
                                    ],
                                    [
                                        "burnList",
                                        "",
                                        "QBridgeHandler"
                                    ],
                                    [
                                        "contractWhitelist",
                                        "",
                                        "QBridgeHandler"
                                    ],
                                    [
                                        "delegators",
                                        "",
                                        "QBridgeHandler"
                                    ],
                                    [
                                        "withdrawalFees",
                                        "",
                                        "QBridgeHandler"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "QBridgeHandler.onlyBridge",
                                        "amount.sub",
                                        "tokenAddress.safeTransfer",
                                        "SafeToken.safeTransferETH",
                                        "QBridgeHandler.IQBridgeDelegator",
                                        "QBridgeHandler.QBridgeToken"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "9aa5ee1d444dd9e3965f46274d6f78f2"
                            }
                        ],
                        "withdraw": [
                            {
                                "visibility": "external",
                                "content": "function withdraw(address tokenAddress, address recipient, uint amount) external override onlyBridge{ if (tokenAddress == ETH) SafeToken.safeTransferETH(recipient, amount); else tokenAddress.safeTransfer(recipient, amount);}",
                                "modifiers": [
                                    "override",
                                    "onlyBridge"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "tokenAddress"
                                    },
                                    {
                                        "type": "address",
                                        "name": "recipient"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "ETH",
                                        "",
                                        "QBridgeHandler"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "tokenAddress.safeTransfer",
                                        "SafeToken.safeTransferETH",
                                        "QBridgeHandler.onlyBridge"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "a424b10802cdd9e7e5a5488d02aa3a36"
                            }
                        ]
                    },
                    "modifiers": {
                        "onlyBridge": {
                            "parameters": [],
                            "content": "modifier onlyBridge(){ require(msg.sender == _bridgeAddress, \"QBridgeHandler: caller is not the bridge contract \"); _;}",
                            "reads": [
                                [
                                    "_bridgeAddress",
                                    "",
                                    "QBridgeHandler"
                                ]
                            ],
                            "writes": [],
                            "external_calls": [],
                            "md5": "b8cb30ff3474313f37257211f482abe3"
                        }
                    },
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "uint": "SafeMath",
                        "address": "SafeToken"
                    }
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "QBridgeHandler.__Ownable_init": "f7820e4676d5bcf96dd81f938b91f4f1",
                "QBridgeHandler.onlyBridge": "b8cb30ff3474313f37257211f482abe3",
                "QBridgeHandler.onlyOwner": "b92099c80fb280641bb32ab9f3280aeb",
                "tokenAddress.safeTransferFrom": "a2e919451b2326a92471cbafd42b0518",
                "SafeToken.safeTransferETH": "f6c084e10a382e02279aa28f84d745ca",
                "tokenAddress.safeTransfer": "9fe82e513e4ea2fede44affce931b36a",
                "amount.sub": "aa6b5a83ac7caeaf81056eef5389fca5"
            },
            "md5": "90dda4a6cf65ea8ba1e2f44670c71bea"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\QBridge20220128\\0x99309d2e7265528dC7C3067004cC4A90d37b7CC3\\_ContextUpgradeable.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\QBridge20220128\\0x99309d2e7265528dC7C3067004cC4A90d37b7CC3\\_ContextUpgradeable.sol",
            "filename": "_ContextUpgradeable.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\QBridge20220128\\0x99309d2e7265528dC7C3067004cC4A90d37b7CC3\\ContextUpgradeable.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {},
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "068f3fff73618d5a7448f1ba82be6d66"
        }
    },
    "handled_md5": {
        "__set__": true,
        "values": [
            "6bbdc5455976e60c9153e621107c51d5",
            "090bb4a7c40899581e4087c0b8bd48c1",
            "2eea29ed865f9c035f7ea85ca0fc70b4",
            "a76df5afb7a9d67759a18b5df8bca809",
            "e9718ce7d7ccf0d368ed6dcc2460271c",
            "068f3fff73618d5a7448f1ba82be6d66",
            "640f23155e4d43145a6d34ef9d48af10",
            "33f7806931940d55f142828d3d6a84ff",
            "6666daf415b1a3a9aff3f42cb281f4fd",
            "9341e1e348d904fb33969859ac53db59",
            "6e269e0b8354d437268514e61ced1a8b",
            "dbee3c0be638e4eeb2026a3a93b0856e",
            "90dda4a6cf65ea8ba1e2f44670c71bea",
            "25d25c9f81e4d88089962b8796c770d5",
            "1dbc8af0dd06fa51e960b2fe36351469",
            "fef8cea09901821b622ed9cd3d0665e0",
            "8713af3136ae88b76b3373a39f0e61e6"
        ]
    }
}