{
    "solidity_file": {
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\tokens\\ERC20.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\tokens\\ERC20.sol",
            "filename": "ERC20.sol",
            "imported_contracts": {},
            "contracts": {
                "ERC20": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": true,
                    "inherits": [],
                    "state_variables": {
                        "name": {
                            "type": "string",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "string public name;"
                        },
                        "symbol": {
                            "type": "string",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "string public symbol;"
                        },
                        "decimals": {
                            "type": "uint8",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint8 public immutable decimals;"
                        },
                        "totalSupply": {
                            "type": "uint256",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256 public totalSupply;"
                        },
                        "balanceOf": {
                            "type": "mapping(address => uint256)",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(address => uint256) public balanceOf;"
                        },
                        "allowance": {
                            "type": "mapping(address => mapping(address => uint256))",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(address => mapping(address => uint256)) public allowance;"
                        },
                        "INITIAL_CHAIN_ID": {
                            "type": "uint256",
                            "visibility": "internal",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256 internal immutable INITIAL_CHAIN_ID;"
                        },
                        "INITIAL_DOMAIN_SEPARATOR": {
                            "type": "bytes32",
                            "visibility": "internal",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": null,
                            "content": "bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;"
                        },
                        "nonces": {
                            "type": "mapping(address => uint256)",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(address => uint256) public nonces;"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor ( string memory _name, string memory _symbol, uint8 _decimals ){ name = _name; symbol = _symbol; decimals = _decimals; INITIAL_CHAIN_ID = block.chainid; INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "string memory",
                                        "name": "_name"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "_symbol"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "_decimals"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "name",
                                        "",
                                        "ERC20"
                                    ],
                                    [
                                        "symbol",
                                        "",
                                        "ERC20"
                                    ],
                                    [
                                        "decimals",
                                        "",
                                        "ERC20"
                                    ],
                                    [
                                        "INITIAL_CHAIN_ID",
                                        "",
                                        "ERC20"
                                    ],
                                    [
                                        "INITIAL_DOMAIN_SEPARATOR",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "name",
                                        "",
                                        "ERC20"
                                    ],
                                    [
                                        "symbol",
                                        "",
                                        "ERC20"
                                    ],
                                    [
                                        "decimals",
                                        "",
                                        "ERC20"
                                    ],
                                    [
                                        "INITIAL_CHAIN_ID",
                                        "",
                                        "ERC20"
                                    ],
                                    [
                                        "INITIAL_DOMAIN_SEPARATOR",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "e771f7bfcbdef64fa200dba78b92e15a"
                            }
                        ],
                        "approve": [
                            {
                                "visibility": "public",
                                "content": "function approve(address spender, uint256 amount) public virtual returns (bool){ allowance[msg.sender][spender] = amount; emit Approval(msg.sender, spender, amount); return true;}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "allowance",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "allowance",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "7b3acb46e2cf14ccb887bceed2fa033f"
                            }
                        ],
                        "transfer": [
                            {
                                "visibility": "public",
                                "content": "function transfer(address to, uint256 amount) public virtual returns (bool){ balanceOf[msg.sender] -= amount; unchecked{ balanceOf[to] += amount;} emit Transfer(msg.sender, to, amount); return true;}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "balanceOf",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "balanceOf",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "106c99c210292ba876e75685ad2beb0c"
                            }
                        ],
                        "transferFrom": [
                            {
                                "visibility": "public",
                                "content": "function transferFrom( address from, address to, uint256 amount ) public virtual returns (bool){ uint256 allowed = allowance[from][msg.sender]; if (allowed != type (uint256).max) allowance[from][msg.sender] = allowed - amount; balanceOf[from] -= amount; unchecked{ balanceOf[to] += amount;} emit Transfer(from, to, amount); return true;}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "balanceOf",
                                        "",
                                        "ERC20"
                                    ],
                                    [
                                        "allowance",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "balanceOf",
                                        "",
                                        "ERC20"
                                    ],
                                    [
                                        "allowance",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20.type"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "b5c10215ad4a2be49a33f4e0671d4b41"
                            }
                        ],
                        "permit": [
                            {
                                "visibility": "public",
                                "content": "function permit( address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s ) public virtual{ require(deadline >= block.timestamp, \"PERMIT_DEADLINE_EXPIRED\"); unchecked{ address recoveredAddress = ecrecover( keccak256( abi.encodePacked( \"\\x19\\x01\", DOMAIN_SEPARATOR(), keccak256( abi.encode( keccak256( \"Permit(address owner, address spender, uint256 value, uint256 nonce, uint256 deadline)\" ), owner, spender, value, nonces[owner]++, deadline ) ) ) ), v, r, s ); require(recoveredAddress != address(0) && recoveredAddress == owner, \"INVALID_SIGNER\"); allowance[recoveredAddress][spender] = value;} emit Approval(owner, spender, value);}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "owner"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "deadline"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "v"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "r"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "s"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "allowance",
                                        "",
                                        "ERC20"
                                    ],
                                    [
                                        "nonces",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "allowance",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20.DOMAIN_SEPARATOR"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "c6cb5ade7e51032a6a9a7020f5de6374"
                            }
                        ],
                        "DOMAIN_SEPARATOR": [
                            {
                                "visibility": "public",
                                "content": "function DOMAIN_SEPARATOR() public view virtual returns (bytes32){ return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();}",
                                "modifiers": [
                                    "view",
                                    "virtual"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "INITIAL_CHAIN_ID",
                                        "",
                                        "ERC20"
                                    ],
                                    [
                                        "INITIAL_DOMAIN_SEPARATOR",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20.computeDomainSeparator"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "97dceeab4fce5e3e779a7620be645c61"
                            }
                        ],
                        "computeDomainSeparator": [
                            {
                                "visibility": "internal",
                                "content": "function computeDomainSeparator() internal view virtual returns (bytes32){ return keccak256( abi.encode( keccak256(\"EIP712Domain(string name, string version, uint256 chainId, address verifyingContract)\"), keccak256(bytes(name)), keccak256(\"1\"), block.chainid, address(this) ) );}",
                                "modifiers": [
                                    "view",
                                    "virtual"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "name",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "6ecf20fc0f4f6d64b551f9b1f530f8db"
                            }
                        ],
                        "_mint": [
                            {
                                "visibility": "internal",
                                "content": "function _mint(address to, uint256 amount) internal virtual{ totalSupply += amount; unchecked{ balanceOf[to] += amount;} emit Transfer(address(0), to, amount);}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "totalSupply",
                                        "",
                                        "ERC20"
                                    ],
                                    [
                                        "balanceOf",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "totalSupply",
                                        "",
                                        "ERC20"
                                    ],
                                    [
                                        "balanceOf",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "2081eef72db704fa8e5fc556fa284f14"
                            }
                        ],
                        "_burn": [
                            {
                                "visibility": "internal",
                                "content": "function _burn(address from, uint256 amount) internal virtual{ balanceOf[from] -= amount; unchecked{ totalSupply -= amount;} emit Transfer(from, address(0), amount);}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "totalSupply",
                                        "",
                                        "ERC20"
                                    ],
                                    [
                                        "balanceOf",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "totalSupply",
                                        "",
                                        "ERC20"
                                    ],
                                    [
                                        "balanceOf",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "126f322ef5f6366b860e7937b1b932fc"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {
                        "Transfer": {
                            "event": "Transfer",
                            "content": "Transfer(address indexed from, address indexed to, uint256 amount)"
                        },
                        "Approval": {
                            "event": "Approval",
                            "content": "Approval(address indexed owner, address indexed spender, uint256 amount)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "ERC20.DOMAIN_SEPARATOR": "97dceeab4fce5e3e779a7620be645c61",
                "ERC20.computeDomainSeparator": "6ecf20fc0f4f6d64b551f9b1f530f8db"
            },
            "md5": "c680f27470431cfd537ebbb4467c403e"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\utils\\SafeTransferLib.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\utils\\SafeTransferLib.sol",
            "filename": "SafeTransferLib.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\tokens\\ERC20.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "ERC20": {
                            "original_name": "ERC20",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                }
            },
            "contracts": {
                "SafeTransferLib": {
                    "type": {
                        "__CT__": true,
                        "value": 2
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "safeTransferETH": [
                            {
                                "visibility": "internal",
                                "content": "function safeTransferETH(address to, uint256 amount) internal{ bool success; assembly{ success := call(gas(), to, amount, 0, 0, 0, 0)} require(success, \"ETH_TRANSFER_FAILED\");}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "4602f6c8d998e77c75e3fb61e9156848"
                            }
                        ],
                        "safeTransferFrom": [
                            {
                                "visibility": "internal",
                                "content": "function safeTransferFrom( ERC20 token, address from, address to, uint256 amount ) internal{ bool success; assembly{ let freeMemoryPointer := mload(0x40) mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000) mstore(add(freeMemoryPointer, 4), from) mstore(add(freeMemoryPointer, 36), to) mstore(add(freeMemoryPointer, 68), amount) success := and( or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())), call(gas(), token, 0, freeMemoryPointer, 100, 0, 32) )} require(success, \"TRANSFER_FROM_FAILED\");}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "ERC20",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "f59cf721ba6479ab2b5aa8ba2685eff0"
                            }
                        ],
                        "safeTransfer": [
                            {
                                "visibility": "internal",
                                "content": "function safeTransfer( ERC20 token, address to, uint256 amount ) internal{ bool success; assembly{ let freeMemoryPointer := mload(0x40) mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000) mstore(add(freeMemoryPointer, 4), to) mstore(add(freeMemoryPointer, 36), amount) success := and( or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())), call(gas(), token, 0, freeMemoryPointer, 68, 0, 32) )} require(success, \"TRANSFER_FAILED\");}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "ERC20",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "053800cc6df34e39a7258d7ef73fb45c"
                            }
                        ],
                        "safeApprove": [
                            {
                                "visibility": "internal",
                                "content": "function safeApprove( ERC20 token, address to, uint256 amount ) internal{ bool success; assembly{ let freeMemoryPointer := mload(0x40) mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000) mstore(add(freeMemoryPointer, 4), to) mstore(add(freeMemoryPointer, 36), amount) success := and( or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())), call(gas(), token, 0, freeMemoryPointer, 68, 0, 32) )} require(success, \"APPROVE_FAILED\");}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "ERC20",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "f339137c724d3793fd28f64cd9b5d9bb"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "950101e177e44b6cc862939655e058d9"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\errors\\SocketErrors.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\errors\\SocketErrors.sol",
            "filename": "SocketErrors.sol",
            "imported_contracts": {},
            "contracts": {},
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {
                "CelerRefundNotReady": {
                    "content": "CelerRefundNotReady()"
                },
                "OnlySocketDeployer": {
                    "content": "OnlySocketDeployer()"
                },
                "OnlySocketGatewayOwner": {
                    "content": "OnlySocketGatewayOwner()"
                },
                "OnlySocketGateway": {
                    "content": "OnlySocketGateway()"
                },
                "OnlyOwner": {
                    "content": "OnlyOwner()"
                },
                "OnlyNominee": {
                    "content": "OnlyNominee()"
                },
                "TransferIdExists": {
                    "content": "TransferIdExists()"
                },
                "TransferIdDoesnotExist": {
                    "content": "TransferIdDoesnotExist()"
                },
                "Address0Provided": {
                    "content": "Address0Provided()"
                },
                "SwapFailed": {
                    "content": "SwapFailed()"
                },
                "UnsupportedInterfaceId": {
                    "content": "UnsupportedInterfaceId()"
                },
                "InvalidCelerRefund": {
                    "content": "InvalidCelerRefund()"
                },
                "CelerAlreadyRefunded": {
                    "content": "CelerAlreadyRefunded()"
                },
                "IncorrectBridgeRatios": {
                    "content": "IncorrectBridgeRatios()"
                },
                "ZeroAddressNotAllowed": {
                    "content": "ZeroAddressNotAllowed()"
                },
                "ArrayLengthMismatch": {
                    "content": "ArrayLengthMismatch()"
                },
                "PartialSwapsNotAllowed": {
                    "content": "PartialSwapsNotAllowed()"
                }
            },
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "103184f5663fed2d546da1769ddc3277"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\utils\\Ownable.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\utils\\Ownable.sol",
            "filename": "Ownable.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\errors\\SocketErrors.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "OnlyOwner": {
                            "original_name": "OnlyOwner",
                            "type": {
                                "__CT__": true,
                                "value": 15
                            }
                        },
                        "OnlyNominee": {
                            "original_name": "OnlyNominee",
                            "type": {
                                "__CT__": true,
                                "value": 15
                            }
                        }
                    }
                }
            },
            "contracts": {
                "Ownable": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": true,
                    "inherits": [],
                    "state_variables": {
                        "_owner": {
                            "type": "address",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address private _owner;"
                        },
                        "_nominee": {
                            "type": "address",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address private _nominee;"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (address owner_){ _claimOwner(owner_);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "owner_"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "3e5130fd5a76008c869f4e470d936b22"
                            }
                        ],
                        "owner": [
                            {
                                "visibility": "public",
                                "content": "function owner() public view returns (address){ return _owner;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_owner",
                                        "",
                                        "Ownable"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "555688ef9e741e6498a76c7e2698e28a"
                            }
                        ],
                        "nominee": [
                            {
                                "visibility": "public",
                                "content": "function nominee() public view returns (address){ return _nominee;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_nominee",
                                        "",
                                        "Ownable"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "eb145a22ed2c309a68a83c7cad0f13ee"
                            }
                        ],
                        "nominateOwner": [
                            {
                                "visibility": "external",
                                "content": "function nominateOwner(address nominee_) external{ if (msg.sender != _owner){ revert OnlyOwner();} _nominee = nominee_; emit OwnerNominated(_nominee);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "nominee_"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_owner",
                                        "",
                                        "Ownable"
                                    ],
                                    [
                                        "_nominee",
                                        "",
                                        "Ownable"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_nominee",
                                        "",
                                        "Ownable"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Ownable.OnlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "bf86ae35154112085ef50a3633fb0d4e"
                            }
                        ],
                        "claimOwner": [
                            {
                                "visibility": "external",
                                "content": "function claimOwner() external{ if (msg.sender != _nominee){ revert OnlyNominee();} _claimOwner(msg.sender);}",
                                "modifiers": [],
                                "parameters": [],
                                "returns": [],
                                "reads": [
                                    [
                                        "_nominee",
                                        "",
                                        "Ownable"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Ownable._claimOwner",
                                        "Ownable.OnlyNominee"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "1ed653036bab5fec61bc7e9e1892484f"
                            }
                        ],
                        "_claimOwner": [
                            {
                                "visibility": "internal",
                                "content": "function _claimOwner(address claimer_) internal{ _owner = claimer_; _nominee = address(0); emit OwnerClaimed(claimer_);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "claimer_"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_owner",
                                        "",
                                        "Ownable"
                                    ],
                                    [
                                        "_nominee",
                                        "",
                                        "Ownable"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_owner",
                                        "",
                                        "Ownable"
                                    ],
                                    [
                                        "_nominee",
                                        "",
                                        "Ownable"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "2248bcefea85a402255de2917fe9bfc5"
                            }
                        ]
                    },
                    "modifiers": {
                        "onlyOwner": {
                            "parameters": [],
                            "content": "modifier onlyOwner(){ if (msg.sender != _owner){ revert OnlyOwner();} _;}",
                            "reads": [
                                [
                                    "_owner",
                                    "",
                                    "Ownable"
                                ]
                            ],
                            "writes": [],
                            "external_calls": {
                                "__set__": true,
                                "values": [
                                    "Ownable.OnlyOwner"
                                ]
                            },
                            "md5": "b9a44c8e413874da0eff71e6b2a9dd66"
                        }
                    },
                    "structs": {},
                    "events": {
                        "OwnerNominated": {
                            "event": "OwnerNominated",
                            "content": "OwnerNominated(address indexed nominee)"
                        },
                        "OwnerClaimed": {
                            "event": "OwnerClaimed",
                            "content": "OwnerClaimed(address indexed claimer)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "Ownable._claimOwner": "2248bcefea85a402255de2917fe9bfc5"
            },
            "md5": "cca75af967c7d3307a98949d584b61e7"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\libraries\\LibBytes.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\libraries\\LibBytes.sol",
            "filename": "LibBytes.sol",
            "imported_contracts": {},
            "contracts": {
                "LibBytes": {
                    "type": {
                        "__CT__": true,
                        "value": 2
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "concat": [
                            {
                                "visibility": "internal",
                                "content": "function concat( bytes memory _preBytes, bytes memory _postBytes ) internal pure returns (bytes memory){ bytes memory tempBytes; assembly{ tempBytes := mload(0x40) let length := mload(_preBytes) mstore(tempBytes, length) let mc := add(tempBytes, 0x20) let end := add(mc, length) for{ let cc := add(_preBytes, 0x20)} lt(mc, end){ mc := add(mc, 0x20) cc := add(cc, 0x20)}{ mstore(mc, mload(cc))} length := mload(_postBytes) mstore(tempBytes, add(length, mload(tempBytes))) mc := end end := add(mc, length) for{ let cc := add(_postBytes, 0x20)} lt(mc, end){ mc := add(mc, 0x20) cc := add(cc, 0x20)}{ mstore(mc, mload(cc))} mstore( 0x40, and( add(add(end, iszero(add(length, mload(_preBytes)))), 31), not(31) ) )} return tempBytes;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "_preBytes"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "_postBytes"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "373eeb298cfb0d6fbf73fa340aa058bd"
                            }
                        ],
                        "slice": [
                            {
                                "visibility": "internal",
                                "content": "function slice( bytes memory _bytes, uint256 _start, uint256 _length ) internal pure returns (bytes memory){ if (_length + 31 < _length){ revert SliceOverflow();} if (_bytes.length < _start + _length){ revert SliceOutOfBounds();} bytes memory tempBytes; assembly{ switch iszero(_length) case 0{ tempBytes := mload(0x40) let lengthmod := and(_length, 31) let mc := add( add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)) ) let end := add(mc, _length) for{ let cc := add( add( add(_bytes, lengthmod), mul(0x20, iszero(lengthmod)) ), _start )} lt(mc, end){ mc := add(mc, 0x20) cc := add(cc, 0x20)}{ mstore(mc, mload(cc))} mstore(tempBytes, _length) mstore(0x40, and(add(mc, 31), not(31)))} default{ tempBytes := mload(0x40) mstore(tempBytes, 0) mstore(0x40, add(tempBytes, 0x20))}} return tempBytes;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "_bytes"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_start"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_length"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LibBytes.SliceOutOfBounds",
                                        "LibBytes.SliceOverflow"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "7450b7f4f105d25baa98f28bef14c621"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {
                        "SliceOverflow": {
                            "content": "SliceOverflow()"
                        },
                        "SliceOutOfBounds": {
                            "content": "SliceOutOfBounds()"
                        },
                        "AddressOutOfBounds": {
                            "content": "AddressOutOfBounds()"
                        },
                        "UintOutOfBounds": {
                            "content": "UintOutOfBounds()"
                        }
                    },
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "9a43a76a597a080202b8f010ed7ec26a"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\libraries\\LibUtil.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\libraries\\LibUtil.sol",
            "filename": "LibUtil.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\libraries\\LibBytes.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "LibUtil": {
                    "type": {
                        "__CT__": true,
                        "value": 2
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "getRevertMsg": [
                            {
                                "visibility": "internal",
                                "content": "function getRevertMsg( bytes memory _res ) internal pure returns (string memory){ if (_res.length < 68){ return \"Transaction reverted silently\";} bytes memory revertData = _res.slice(4, _res.length - 4); return abi.decode(revertData, (string));}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "_res"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "string memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "_res.slice"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "e66178eeeb60158dbadc92f3dcd5f05a"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "bytes": "LibBytes"
                    }
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "_res.slice": "7450b7f4f105d25baa98f28bef14c621"
            },
            "md5": "91ac56589d48e194f65583a618d3c295"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\interfaces\\ISocketRoute.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\interfaces\\ISocketRoute.sol",
            "filename": "ISocketRoute.sol",
            "imported_contracts": {},
            "contracts": {
                "ISocketRoute": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "addRoute": [
                            {
                                "visibility": "external",
                                "content": "function addRoute(address routeAddress) external returns (uint256);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "routeAddress"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "aec5dc09bd46d679804e8c9901e6599b"
                            }
                        ],
                        "disableRoute": [
                            {
                                "visibility": "external",
                                "content": "function disableRoute(uint32 routeId) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint32",
                                        "name": "routeId"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "1774a90c507cbe454bd7abcc3a63db8b"
                            }
                        ],
                        "getRoute": [
                            {
                                "visibility": "external",
                                "content": "function getRoute(uint32 routeId) external view returns (address);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint32",
                                        "name": "routeId"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c9578e2fe3e064df0fbbaa8cecd4af68"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "b059ed295b9323ba42e78d6d828d4ce4"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\interfaces\\ISocketRequest.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\interfaces\\ISocketRequest.sol",
            "filename": "ISocketRequest.sol",
            "imported_contracts": {},
            "contracts": {
                "ISocketRequest": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {},
                    "modifiers": {},
                    "structs": {
                        "SwapMultiBridgeRequest": {
                            "content": "SwapMultiBridgeRequest{ uint32 swapRouteId; bytes swapImplData; uint32[] bridgeRouteIds; bytes[] bridgeImplDataItems; uint256[] bridgeRatios; bytes[] eventDataItems;}"
                        },
                        "RefuelSwapBridgeRequest": {
                            "content": "RefuelSwapBridgeRequest{ uint32 refuelRouteId; bytes refuelData; uint32 swapRouteId; bytes swapData; uint32 bridgeRouteId; bytes bridgeData;}"
                        },
                        "FeesTakerSwapRequest": {
                            "content": "FeesTakerSwapRequest{ address payable feesTakerAddress; address feesToken; uint256 feesAmount; uint32 routeId; bytes swapRequestData;}"
                        },
                        "FeesTakerBridgeRequest": {
                            "content": "FeesTakerBridgeRequest{ address payable feesTakerAddress; address feesToken; uint256 feesAmount; uint32 routeId; bytes bridgeRequestData;}"
                        },
                        "FeesTakerMultiBridgeRequest": {
                            "content": "FeesTakerMultiBridgeRequest{ address payable feesTakerAddress; address feesToken; uint256 feesAmount; uint32[] bridgeRouteIds; bytes[] bridgeRequestDataItems;}"
                        },
                        "FeesTakerSwapBridgeRequest": {
                            "content": "FeesTakerSwapBridgeRequest{ address payable feesTakerAddress; address feesToken; uint256 feesAmount; uint32 swapRouteId; bytes swapData; uint32 bridgeRouteId; bytes bridgeData;}"
                        },
                        "FeesTakerRefuelSwapBridgeRequest": {
                            "content": "FeesTakerRefuelSwapBridgeRequest{ address payable feesTakerAddress; address feesToken; uint256 feesAmount; uint32 refuelRouteId; bytes refuelData; uint32 swapRouteId; bytes swapData; uint32 bridgeRouteId; bytes bridgeData;}"
                        }
                    },
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "9c2dc5f061d17290ca06081d29fdc3bb"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\interfaces\\ISocketGateway.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\interfaces\\ISocketGateway.sol",
            "filename": "ISocketGateway.sol",
            "imported_contracts": {},
            "contracts": {
                "ISocketGateway": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "owner": [
                            {
                                "visibility": "external",
                                "content": "function owner() external view returns (address);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "011cf011737d808d4338bbe04f1845e5"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {
                        "SocketControllerRequest": {
                            "content": "SocketControllerRequest{ uint32 controllerId; bytes data;}"
                        }
                    },
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "b6660d55c5ffa3b0860617b27a5d4bfa"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\SocketGateway.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\SocketGateway.sol",
            "filename": "SocketGateway.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\utils\\Ownable.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\utils\\SafeTransferLib.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "SafeTransferLib": {
                            "original_name": "SafeTransferLib",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\tokens\\ERC20.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "ERC20": {
                            "original_name": "ERC20",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\libraries\\LibUtil.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "LibUtil": {
                            "original_name": "LibUtil",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\libraries\\LibBytes.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\interfaces\\ISocketRoute.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "ISocketRoute": {
                            "original_name": "ISocketRoute",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\interfaces\\ISocketRequest.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "ISocketRequest": {
                            "original_name": "ISocketRequest",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\interfaces\\ISocketGateway.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "ISocketGateway": {
                            "original_name": "ISocketGateway",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\errors\\SocketErrors.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "IncorrectBridgeRatios": {
                            "original_name": "IncorrectBridgeRatios",
                            "type": {
                                "__CT__": true,
                                "value": 15
                            }
                        },
                        "ZeroAddressNotAllowed": {
                            "original_name": "ZeroAddressNotAllowed",
                            "type": {
                                "__CT__": true,
                                "value": 15
                            }
                        },
                        "ArrayLengthMismatch": {
                            "original_name": "ArrayLengthMismatch",
                            "type": {
                                "__CT__": true,
                                "value": 15
                            }
                        }
                    }
                }
            },
            "contracts": {
                "SocketGatewayTemplate": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "Ownable"
                    ],
                    "state_variables": {
                        "BRIDGE_AFTER_SWAP_SELECTOR": {
                            "type": "bytes4",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "bytes4(keccak256(\"bridgeAfterSwap(uint256, bytes)\"))",
                            "content": "bytes4 public immutable BRIDGE_AFTER_SWAP_SELECTOR = bytes4(keccak256(\"bridgeAfterSwap(uint256, bytes)\"));"
                        },
                        "routesCount": {
                            "type": "uint32",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "385",
                            "content": "uint32 public routesCount = 385;"
                        },
                        "controllerCount": {
                            "type": "uint32",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint32 public controllerCount;"
                        },
                        "disabledRouteAddress": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public immutable disabledRouteAddress;"
                        },
                        "CENT_PERCENT": {
                            "type": "uint256",
                            "visibility": "public",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "100e18",
                            "content": "uint256 public constant CENT_PERCENT = 100e18;"
                        },
                        "routes": {
                            "type": "mapping(uint32 => address)",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(uint32 => address) public routes;"
                        },
                        "controllers": {
                            "type": "mapping(uint32 => address)",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(uint32 => address) public controllers;"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (address _owner, address _disabledRoute) Ownable(_owner){ disabledRouteAddress = _disabledRoute;}",
                                "modifiers": [
                                    "Ownable(_owner)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_owner"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_disabledRoute"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "disabledRouteAddress",
                                        "",
                                        "SocketGatewayTemplate"
                                    ],
                                    [
                                        "_owner",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\utils\\Ownable.sol",
                                        "Ownable"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "disabledRouteAddress",
                                        "",
                                        "SocketGatewayTemplate"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "ec1a2ce5c12773d532a13b109454c13e"
                            }
                        ],
                        "executeRoute": [
                            {
                                "visibility": "external",
                                "content": "function executeRoute( uint32 routeId, bytes calldata routeData ) external payable returns (bytes memory){ (bool success, bytes memory result) = addressAt(routeId).delegatecall( routeData ); if (!success){ assembly{ revert(add(result, 32), mload(result))}} return result;}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint32",
                                        "name": "routeId"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "routeData"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SocketGatewayTemplate.addressAt"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "137a8d323f92b8033cee94429818cd51"
                            }
                        ],
                        "swapAndMultiBridge": [
                            {
                                "visibility": "external",
                                "content": "function swapAndMultiBridge( ISocketRequest.SwapMultiBridgeRequest calldata swapMultiBridgeRequest ) external payable{ uint256 requestLength = swapMultiBridgeRequest.bridgeRouteIds.length; if ( requestLength != swapMultiBridgeRequest.bridgeImplDataItems.length ){ revert ArrayLengthMismatch();} uint256 ratioAggregate; for (uint256 index = 0; index < requestLength; ){ ratioAggregate += swapMultiBridgeRequest.bridgeRatios[index];} if (ratioAggregate != CENT_PERCENT){ revert IncorrectBridgeRatios();} (bool swapSuccess, bytes memory swapResult) = addressAt( swapMultiBridgeRequest.swapRouteId ).delegatecall(swapMultiBridgeRequest.swapImplData); if (!swapSuccess){ assembly{ revert(add(swapResult, 32), mload(swapResult))}} uint256 amountReceivedFromSwap = abi.decode(swapResult, (uint256)); uint256 bridgedAmount; for (uint256 index = 0; index < requestLength; ){ uint256 bridgingAmount; if (index == requestLength - 1){ bridgingAmount = amountReceivedFromSwap - bridgedAmount;} else{ bridgingAmount = (amountReceivedFromSwap * swapMultiBridgeRequest.bridgeRatios[index]) / (CENT_PERCENT);} bridgedAmount += bridgingAmount; bytes memory bridgeImpldata = abi.encodeWithSelector( BRIDGE_AFTER_SWAP_SELECTOR, bridgingAmount, swapMultiBridgeRequest.bridgeImplDataItems[index] ); (bool bridgeSuccess, bytes memory bridgeResult) = addressAt( swapMultiBridgeRequest.bridgeRouteIds[index] ).delegatecall(bridgeImpldata); if (!bridgeSuccess){ assembly{ revert(add(bridgeResult, 32), mload(bridgeResult))}} unchecked{ ++index;}}}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "ISocketRequest.SwapMultiBridgeRequest calldata",
                                        "name": "swapMultiBridgeRequest"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "BRIDGE_AFTER_SWAP_SELECTOR",
                                        "",
                                        "SocketGatewayTemplate"
                                    ],
                                    [
                                        "CENT_PERCENT",
                                        "",
                                        "SocketGatewayTemplate"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SocketGatewayTemplate.ArrayLengthMismatch",
                                        "SocketGatewayTemplate.IncorrectBridgeRatios",
                                        "SocketGatewayTemplate.addressAt"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "e39ea25ddb110fbea8c973c57f313f2a"
                            }
                        ],
                        "executeRoutes": [
                            {
                                "visibility": "external",
                                "content": "function executeRoutes( uint32[] calldata routeIds, bytes[] calldata dataItems ) external payable{ uint256 routeIdslength = routeIds.length; if (routeIdslength != dataItems.length) revert ArrayLengthMismatch(); for (uint256 index = 0; index < routeIdslength; ){ (bool success, bytes memory result) = addressAt(routeIds[index]) .delegatecall(dataItems[index]); if (!success){ assembly{ revert(add(result, 32), mload(result))}} unchecked{ ++index;}}}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint32[] calldata",
                                        "name": "routeIds"
                                    },
                                    {
                                        "type": "bytes[] calldata",
                                        "name": "dataItems"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SocketGatewayTemplate.ArrayLengthMismatch",
                                        "SocketGatewayTemplate.addressAt"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "5d062c42ea9d5e80ea5c4ed8cf51fb7e"
                            }
                        ],
                        "executeController": [
                            {
                                "visibility": "external",
                                "content": "function executeController( ISocketGateway.SocketControllerRequest calldata socketControllerRequest ) external payable returns (bytes memory){ (bool success, bytes memory result) = controllers[ socketControllerRequest.controllerId ].delegatecall(socketControllerRequest.data); if (!success){ assembly{ revert(add(result, 32), mload(result))}} return result;}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "ISocketGateway.SocketControllerRequest calldata",
                                        "name": "socketControllerRequest"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "controllers",
                                        "",
                                        "SocketGatewayTemplate"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": true,
                                "md5": "5ac3f05e7aed93cf759b5f6135607f60"
                            }
                        ],
                        "executeControllers": [
                            {
                                "visibility": "external",
                                "content": "function executeControllers( ISocketGateway.SocketControllerRequest[] calldata controllerRequests ) external payable{ for (uint32 index = 0; index < controllerRequests.length; ){ (bool success, bytes memory result) = controllers[ controllerRequests[index].controllerId ].delegatecall(controllerRequests[index].data); if (!success){ assembly{ revert(add(result, 32), mload(result))}} unchecked{ ++index;}}}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "ISocketGateway.SocketControllerRequest[] calldata",
                                        "name": "controllerRequests"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "controllers",
                                        "",
                                        "SocketGatewayTemplate"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": true,
                                "md5": "ad2e0c548055c4974dbfccfbe93db428"
                            }
                        ],
                        "addRoute": [
                            {
                                "visibility": "external",
                                "content": "function addRoute( address routeAddress ) external onlyOwner returns (uint32){ uint32 routeId = routesCount; routes[routeId] = routeAddress; routesCount += 1; emit NewRouteAdded(routeId, routeAddress); return routeId;}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "routeAddress"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint32",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "routesCount",
                                        "",
                                        "SocketGatewayTemplate"
                                    ],
                                    [
                                        "routes",
                                        "",
                                        "SocketGatewayTemplate"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "routesCount",
                                        "",
                                        "SocketGatewayTemplate"
                                    ],
                                    [
                                        "routes",
                                        "",
                                        "SocketGatewayTemplate"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SocketGatewayTemplate.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "41197b5709ee7255064a19b9770d7234"
                            }
                        ],
                        "setApprovalForRouters": [
                            {
                                "visibility": "external",
                                "content": "function setApprovalForRouters( address[] memory routeAddresses, address[] memory tokenAddresses, bool isMax ) external onlyOwner{ for (uint32 index = 0; index < routeAddresses.length; ){ ERC20(tokenAddresses[index]).approve( routeAddresses[index], isMax ? type (uint256).max : 0 ); unchecked{ ++index;}}}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "address[] memory",
                                        "name": "routeAddresses"
                                    },
                                    {
                                        "type": "address[] memory",
                                        "name": "tokenAddresses"
                                    },
                                    {
                                        "type": "bool",
                                        "name": "isMax"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SocketGatewayTemplate.ERC20",
                                        "SocketGatewayTemplate.onlyOwner",
                                        "SocketGatewayTemplate.type"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "c936711230da894f0bbc7e2e15cbb041"
                            }
                        ],
                        "addController": [
                            {
                                "visibility": "external",
                                "content": "function addController( address controllerAddress ) external onlyOwner returns (uint32){ uint32 controllerId = controllerCount; controllers[controllerId] = controllerAddress; controllerCount += 1; emit ControllerAdded(controllerId, controllerAddress); return controllerId;}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "controllerAddress"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint32",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "controllerCount",
                                        "",
                                        "SocketGatewayTemplate"
                                    ],
                                    [
                                        "controllers",
                                        "",
                                        "SocketGatewayTemplate"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "controllerCount",
                                        "",
                                        "SocketGatewayTemplate"
                                    ],
                                    [
                                        "controllers",
                                        "",
                                        "SocketGatewayTemplate"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SocketGatewayTemplate.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "c638590121a18937bf33944aacc21c3d"
                            }
                        ],
                        "disableController": [
                            {
                                "visibility": "public",
                                "content": "function disableController(uint32 controllerId) public onlyOwner{ controllers[controllerId] = disabledRouteAddress; emit ControllerDisabled(controllerId);}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint32",
                                        "name": "controllerId"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "disabledRouteAddress",
                                        "",
                                        "SocketGatewayTemplate"
                                    ],
                                    [
                                        "controllers",
                                        "",
                                        "SocketGatewayTemplate"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "controllers",
                                        "",
                                        "SocketGatewayTemplate"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SocketGatewayTemplate.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "80555ece14f6be7f44af7b13a96095d3"
                            }
                        ],
                        "disableRoute": [
                            {
                                "visibility": "external",
                                "content": "function disableRoute(uint32 routeId) external onlyOwner{ routes[routeId] = disabledRouteAddress; emit RouteDisabled(routeId);}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint32",
                                        "name": "routeId"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "disabledRouteAddress",
                                        "",
                                        "SocketGatewayTemplate"
                                    ],
                                    [
                                        "routes",
                                        "",
                                        "SocketGatewayTemplate"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "routes",
                                        "",
                                        "SocketGatewayTemplate"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SocketGatewayTemplate.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "3308e367f23a28f8592b08431973ca36"
                            }
                        ],
                        "rescueFunds": [
                            {
                                "visibility": "external",
                                "content": "function rescueFunds( address token, address userAddress, uint256 amount ) external onlyOwner{ ERC20(token).safeTransfer(userAddress, amount);}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "userAddress"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SocketGatewayTemplate.ERC20",
                                        "SocketGatewayTemplate.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "3944a5c52501dcdae998b37b0a15b246"
                            }
                        ],
                        "rescueEther": [
                            {
                                "visibility": "external",
                                "content": "function rescueEther( address payable userAddress, uint256 amount ) external onlyOwner{ userAddress.transfer(amount);}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "address payable",
                                        "name": "userAddress"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "userAddress.transfer",
                                        "SocketGatewayTemplate.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "b68d68f22645125c8e97d3d732b95cf4"
                            }
                        ],
                        "getRoute": [
                            {
                                "visibility": "public",
                                "content": "function getRoute(uint32 routeId) public view returns (address){ return addressAt(routeId);}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint32",
                                        "name": "routeId"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SocketGatewayTemplate.addressAt"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "db9ef23f7916b8af775666b8a0fbf4c3"
                            }
                        ],
                        "getController": [
                            {
                                "visibility": "public",
                                "content": "function getController(uint32 controllerId) public view returns (address){ return controllers[controllerId];}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint32",
                                        "name": "controllerId"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "controllers",
                                        "",
                                        "SocketGatewayTemplate"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "429e76f4283b96bffdb2b1e48272dde0"
                            }
                        ],
                        "addressAt": [
                            {
                                "visibility": "public",
                                "content": "function addressAt(uint32 routeId) public view returns (address){ if (routeId < 385){ if (routeId < 257){ if (routeId < 129){ if (routeId < 65){ if (routeId < 33){ if (routeId < 17){ if (routeId < 9){ if (routeId < 5){ if (routeId < 3){ if (routeId == 1){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 3){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}} else{ if (routeId < 7){ if (routeId == 5){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 7){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}}} else{ if (routeId < 13){ if (routeId < 11){ if (routeId == 9){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 11){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}} else{ if (routeId < 15){ if (routeId == 13){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 15){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}}}} else{ if (routeId < 25){ if (routeId < 21){ if (routeId < 19){ if (routeId == 17){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 19){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}} else{ if (routeId < 23){ if (routeId == 21){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 23){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}}} else{ if (routeId < 29){ if (routeId < 27){ if (routeId == 25){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 27){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}} else{ if (routeId < 31){ if (routeId == 29){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 31){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}}}}} else{ if (routeId < 49){ if (routeId < 41){ if (routeId < 37){ if (routeId < 35){ if (routeId == 33){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 35){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}} else{ if (routeId < 39){ if (routeId == 37){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 39){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}}} else{ if (routeId < 45){ if (routeId < 43){ if (routeId == 41){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 43){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}} else{ if (routeId < 47){ if (routeId == 45){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 47){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}}}} else{ if (routeId < 57){ if (routeId < 53){ if (routeId < 51){ if (routeId == 49){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 51){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}} else{ if (routeId < 55){ if (routeId == 53){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 55){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}}} else{ if (routeId < 61){ if (routeId < 59){ if (routeId == 57){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 59){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}} else{ if (routeId < 63){ if (routeId == 61){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 63){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}}}}}} else{ if (routeId < 97){ if (routeId < 81){ if (routeId < 73){ if (routeId < 69){ if (routeId < 67){ if (routeId == 65){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 67){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}} else{ if (routeId < 71){ if (routeId == 69){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 71){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}}} else{ if (routeId < 77){ if (routeId < 75){ if (routeId == 73){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 75){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}} else{ if (routeId < 79){ if (routeId == 77){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 79){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}}}} else{ if (routeId < 89){ if (routeId < 85){ if (routeId < 83){ if (routeId == 81){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 83){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}} else{ if (routeId < 87){ if (routeId == 85){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 87){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}}} else{ if (routeId < 93){ if (routeId < 91){ if (routeId == 89){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 91){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}} else{ if (routeId < 95){ if (routeId == 93){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 95){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}}}}} else{ if (routeId < 113){ if (routeId < 105){ if (routeId < 101){ if (routeId < 99){ if (routeId == 97){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 99){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}} else{ if (routeId < 103){ if (routeId == 101){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 103){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}}} else{ if (routeId < 109){ if (routeId < 107){ if (routeId == 105){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 107){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}} else{ if (routeId < 111){ if (routeId == 109){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 111){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}}}} else{ if (routeId < 121){ if (routeId < 117){ if (routeId < 115){ if (routeId == 113){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 115){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}} else{ if (routeId < 119){ if (routeId == 117){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 119){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}}} else{ if (routeId < 125){ if (routeId < 123){ if (routeId == 121){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 123){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}} else{ if (routeId < 127){ if (routeId == 125){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 127){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}}}}}}} else{ if (routeId < 193){ if (routeId < 161){ if (routeId < 145){ if (routeId < 137){ if (routeId < 133){ if (routeId < 131){ if (routeId == 129){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 131){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}} else{ if (routeId < 135){ if (routeId == 133){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 135){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}}} else{ if (routeId < 141){ if (routeId < 139){ if (routeId == 137){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 139){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}} else{ if (routeId < 143){ if (routeId == 141){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 143){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}}}} else{ if (routeId < 153){ if (routeId < 149){ if (routeId < 147){ if (routeId == 145){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 147){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}} else{ if (routeId < 151){ if (routeId == 149){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 151){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}}} else{ if (routeId < 157){ if (routeId < 155){ if (routeId == 153){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 155){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}} else{ if (routeId < 159){ if (routeId == 157){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 159){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}}}}} else{ if (routeId < 177){ if (routeId < 169){ if (routeId < 165){ if (routeId < 163){ if (routeId == 161){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 163){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}} else{ if (routeId < 167){ if (routeId == 165){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 167){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}}} else{ if (routeId < 173){ if (routeId < 171){ if (routeId == 169){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 171){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}} else{ if (routeId < 175){ if (routeId == 173){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 175){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}}}} else{ if (routeId < 185){ if (routeId < 181){ if (routeId < 179){ if (routeId == 177){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 179){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}} else{ if (routeId < 183){ if (routeId == 181){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 183){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}}} else{ if (routeId < 189){ if (routeId < 187){ if (routeId == 185){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 187){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}} else{ if (routeId < 191){ if (routeId == 189){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 191){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}}}}}} else{ if (routeId < 225){ if (routeId < 209){ if (routeId < 201){ if (routeId < 197){ if (routeId < 195){ if (routeId == 193){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 195){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}} else{ if (routeId < 199){ if (routeId == 197){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 199){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}}} else{ if (routeId < 205){ if (routeId < 203){ if (routeId == 201){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 203){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}} else{ if (routeId < 207){ if (routeId == 205){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 207){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}}}} else{ if (routeId < 217){ if (routeId < 213){ if (routeId < 211){ if (routeId == 209){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 211){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}} else{ if (routeId < 215){ if (routeId == 213){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 215){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}}} else{ if (routeId < 221){ if (routeId < 219){ if (routeId == 217){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 219){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}} else{ if (routeId < 223){ if (routeId == 221){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 223){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}}}}} else{ if (routeId < 241){ if (routeId < 233){ if (routeId < 229){ if (routeId < 227){ if (routeId == 225){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 227){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}} else{ if (routeId < 231){ if (routeId == 229){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 231){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}}} else{ if (routeId < 237){ if (routeId < 235){ if (routeId == 233){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 235){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}} else{ if (routeId < 239){ if (routeId == 237){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 239){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}}}} else{ if (routeId < 249){ if (routeId < 245){ if (routeId < 243){ if (routeId == 241){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 243){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}} else{ if (routeId < 247){ if (routeId == 245){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 247){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}}} else{ if (routeId < 253){ if (routeId < 251){ if (routeId == 249){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 251){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}} else{ if (routeId < 255){ if (routeId == 253){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 255){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}}}}}}}} else{ if (routeId < 321){ if (routeId < 289){ if (routeId < 273){ if (routeId < 265){ if (routeId < 261){ if (routeId < 259){ if (routeId == 257){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 259){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}} else{ if (routeId < 263){ if (routeId == 261){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 263){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}}} else{ if (routeId < 269){ if (routeId < 267){ if (routeId == 265){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 267){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}} else{ if (routeId < 271){ if (routeId == 269){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 271){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}}}} else{ if (routeId < 281){ if (routeId < 277){ if (routeId < 275){ if (routeId == 273){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 275){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}} else{ if (routeId < 279){ if (routeId == 277){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 279){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}}} else{ if (routeId < 285){ if (routeId < 283){ if (routeId == 281){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 283){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}} else{ if (routeId < 287){ if (routeId == 285){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 287){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}}}}} else{ if (routeId < 305){ if (routeId < 297){ if (routeId < 293){ if (routeId < 291){ if (routeId == 289){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 291){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}} else{ if (routeId < 295){ if (routeId == 293){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 295){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}}} else{ if (routeId < 301){ if (routeId < 299){ if (routeId == 297){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 299){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}} else{ if (routeId < 303){ if (routeId == 301){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 303){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}}}} else{ if (routeId < 313){ if (routeId < 309){ if (routeId < 307){ if (routeId == 305){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 307){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}} else{ if (routeId < 311){ if (routeId == 309){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 311){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}}} else{ if (routeId < 317){ if (routeId < 315){ if (routeId == 313){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 315){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}} else{ if (routeId < 319){ if (routeId == 317){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 319){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}}}}}} else{ if (routeId < 353){ if (routeId < 337){ if (routeId < 329){ if (routeId < 325){ if (routeId < 323){ if (routeId == 321){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 323){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}} else{ if (routeId < 327){ if (routeId == 325){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 327){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}}} else{ if (routeId < 333){ if (routeId < 331){ if (routeId == 329){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 331){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}} else{ if (routeId < 335){ if (routeId == 333){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 335){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}}}} else{ if (routeId < 345){ if (routeId < 341){ if (routeId < 339){ if (routeId == 337){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 339){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}} else{ if (routeId < 343){ if (routeId == 341){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 343){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}}} else{ if (routeId < 349){ if (routeId < 347){ if (routeId == 345){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 347){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}} else{ if (routeId < 351){ if (routeId == 349){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 351){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}}}}} else{ if (routeId < 369){ if (routeId < 361){ if (routeId < 357){ if (routeId < 355){ if (routeId == 353){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 355){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}} else{ if (routeId < 359){ if (routeId == 357){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 359){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}}} else{ if (routeId < 365){ if (routeId < 363){ if (routeId == 361){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 363){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}} else{ if (routeId < 367){ if (routeId == 365){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 367){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}}}} else{ if (routeId < 377){ if (routeId < 373){ if (routeId < 371){ if (routeId == 369){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 371){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}} else{ if (routeId < 375){ if (routeId == 373){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 375){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}}} else{ if (routeId < 381){ if (routeId < 379){ if (routeId == 377){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 379){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}} else{ if (routeId < 383){ if (routeId == 381){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}} else{ if (routeId == 383){ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;} else{ return 0x822D4B4e63499a576Ab1cc152B86D1CFFf794F4f;}}}}}}}}} if (routes[routeId] == address(0)) revert ZeroAddressNotAllowed(); return routes[routeId];}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint32",
                                        "name": "routeId"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "routes",
                                        "",
                                        "SocketGatewayTemplate"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SocketGatewayTemplate.ZeroAddressNotAllowed"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "cc5cddde7baaa41ff4ccde27853717cf"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {
                        "NewRouteAdded": {
                            "event": "NewRouteAdded",
                            "content": "NewRouteAdded(uint32 indexed routeId, address indexed route)"
                        },
                        "RouteDisabled": {
                            "event": "RouteDisabled",
                            "content": "RouteDisabled(uint32 indexed routeId)"
                        },
                        "OwnershipTransferRequested": {
                            "event": "OwnershipTransferRequested",
                            "content": "OwnershipTransferRequested( address indexed _from, address indexed _to )"
                        },
                        "ControllerAdded": {
                            "event": "ControllerAdded",
                            "content": "ControllerAdded( uint32 indexed controllerId, address indexed controllerAddress )"
                        },
                        "ControllerDisabled": {
                            "event": "ControllerDisabled",
                            "content": "ControllerDisabled(uint32 indexed controllerId)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "bytes": "LibBytes",
                        "bytes4": "LibBytes",
                        "ERC20": "SafeTransferLib"
                    }
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "SocketGatewayTemplate.addressAt": "cc5cddde7baaa41ff4ccde27853717cf",
                "SocketGatewayTemplate.onlyOwner": "b9a44c8e413874da0eff71e6b2a9dd66",
                "userAddress.transfer": "106c99c210292ba876e75685ad2beb0c"
            },
            "md5": "ff8ddb5688624144f358e2d12d86f966"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\SocketGatewayDeployment.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\SocketGatewayDeployment.sol",
            "filename": "SocketGatewayDeployment.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\utils\\Ownable.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\utils\\SafeTransferLib.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "SafeTransferLib": {
                            "original_name": "SafeTransferLib",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\tokens\\ERC20.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "ERC20": {
                            "original_name": "ERC20",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\libraries\\LibUtil.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "LibUtil": {
                            "original_name": "LibUtil",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\libraries\\LibBytes.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\interfaces\\ISocketRoute.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "ISocketRoute": {
                            "original_name": "ISocketRoute",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\interfaces\\ISocketRequest.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "ISocketRequest": {
                            "original_name": "ISocketRequest",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\interfaces\\ISocketGateway.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "ISocketGateway": {
                            "original_name": "ISocketGateway",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\errors\\SocketErrors.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "IncorrectBridgeRatios": {
                            "original_name": "IncorrectBridgeRatios",
                            "type": {
                                "__CT__": true,
                                "value": 15
                            }
                        },
                        "ZeroAddressNotAllowed": {
                            "original_name": "ZeroAddressNotAllowed",
                            "type": {
                                "__CT__": true,
                                "value": 15
                            }
                        },
                        "ArrayLengthMismatch": {
                            "original_name": "ArrayLengthMismatch",
                            "type": {
                                "__CT__": true,
                                "value": 15
                            }
                        }
                    }
                }
            },
            "contracts": {
                "SocketGateway": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "Ownable"
                    ],
                    "state_variables": {
                        "BRIDGE_AFTER_SWAP_SELECTOR": {
                            "type": "bytes4",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "bytes4(keccak256(\"bridgeAfterSwap(uint256, bytes)\"))",
                            "content": "bytes4 public immutable BRIDGE_AFTER_SWAP_SELECTOR = bytes4(keccak256(\"bridgeAfterSwap(uint256, bytes)\"));"
                        },
                        "routesCount": {
                            "type": "uint32",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "385",
                            "content": "uint32 public routesCount = 385;"
                        },
                        "controllerCount": {
                            "type": "uint32",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint32 public controllerCount;"
                        },
                        "disabledRouteAddress": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public immutable disabledRouteAddress;"
                        },
                        "CENT_PERCENT": {
                            "type": "uint256",
                            "visibility": "public",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "100e18",
                            "content": "uint256 public constant CENT_PERCENT = 100e18;"
                        },
                        "routes": {
                            "type": "mapping(uint32 => address)",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(uint32 => address) public routes;"
                        },
                        "controllers": {
                            "type": "mapping(uint32 => address)",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(uint32 => address) public controllers;"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (address _owner, address _disabledRoute) Ownable(_owner){ disabledRouteAddress = _disabledRoute;}",
                                "modifiers": [
                                    "Ownable(_owner)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_owner"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_disabledRoute"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "disabledRouteAddress",
                                        "",
                                        "SocketGateway"
                                    ],
                                    [
                                        "_owner",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\utils\\Ownable.sol",
                                        "Ownable"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "disabledRouteAddress",
                                        "",
                                        "SocketGateway"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "ec1a2ce5c12773d532a13b109454c13e"
                            }
                        ],
                        "executeRoute": [
                            {
                                "visibility": "external",
                                "content": "function executeRoute( uint32 routeId, bytes calldata routeData ) external payable returns (bytes memory){ (bool success, bytes memory result) = addressAt(routeId).delegatecall( routeData ); if (!success){ assembly{ revert(add(result, 32), mload(result))}} return result;}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint32",
                                        "name": "routeId"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "routeData"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SocketGateway.addressAt"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "137a8d323f92b8033cee94429818cd51"
                            }
                        ],
                        "swapAndMultiBridge": [
                            {
                                "visibility": "external",
                                "content": "function swapAndMultiBridge( ISocketRequest.SwapMultiBridgeRequest calldata swapMultiBridgeRequest ) external payable{ uint256 requestLength = swapMultiBridgeRequest.bridgeRouteIds.length; if ( requestLength != swapMultiBridgeRequest.bridgeImplDataItems.length ){ revert ArrayLengthMismatch();} uint256 ratioAggregate; for (uint256 index = 0; index < requestLength; ){ ratioAggregate += swapMultiBridgeRequest.bridgeRatios[index];} if (ratioAggregate != CENT_PERCENT){ revert IncorrectBridgeRatios();} (bool swapSuccess, bytes memory swapResult) = addressAt( swapMultiBridgeRequest.swapRouteId ).delegatecall(swapMultiBridgeRequest.swapImplData); if (!swapSuccess){ assembly{ revert(add(swapResult, 32), mload(swapResult))}} uint256 amountReceivedFromSwap = abi.decode(swapResult, (uint256)); uint256 bridgedAmount; for (uint256 index = 0; index < requestLength; ){ uint256 bridgingAmount; if (index == requestLength - 1){ bridgingAmount = amountReceivedFromSwap - bridgedAmount;} else{ bridgingAmount = (amountReceivedFromSwap * swapMultiBridgeRequest.bridgeRatios[index]) / (CENT_PERCENT);} bridgedAmount += bridgingAmount; bytes memory bridgeImpldata = abi.encodeWithSelector( BRIDGE_AFTER_SWAP_SELECTOR, bridgingAmount, swapMultiBridgeRequest.bridgeImplDataItems[index] ); (bool bridgeSuccess, bytes memory bridgeResult) = addressAt( swapMultiBridgeRequest.bridgeRouteIds[index] ).delegatecall(bridgeImpldata); if (!bridgeSuccess){ assembly{ revert(add(bridgeResult, 32), mload(bridgeResult))}} unchecked{ ++index;}}}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "ISocketRequest.SwapMultiBridgeRequest calldata",
                                        "name": "swapMultiBridgeRequest"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "BRIDGE_AFTER_SWAP_SELECTOR",
                                        "",
                                        "SocketGateway"
                                    ],
                                    [
                                        "CENT_PERCENT",
                                        "",
                                        "SocketGateway"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SocketGateway.IncorrectBridgeRatios",
                                        "SocketGateway.ArrayLengthMismatch",
                                        "SocketGateway.addressAt"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "e39ea25ddb110fbea8c973c57f313f2a"
                            }
                        ],
                        "executeRoutes": [
                            {
                                "visibility": "external",
                                "content": "function executeRoutes( uint32[] calldata routeIds, bytes[] calldata dataItems ) external payable{ uint256 routeIdslength = routeIds.length; if (routeIdslength != dataItems.length) revert ArrayLengthMismatch(); for (uint256 index = 0; index < routeIdslength; ){ (bool success, bytes memory result) = addressAt(routeIds[index]) .delegatecall(dataItems[index]); if (!success){ assembly{ revert(add(result, 32), mload(result))}} unchecked{ ++index;}}}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint32[] calldata",
                                        "name": "routeIds"
                                    },
                                    {
                                        "type": "bytes[] calldata",
                                        "name": "dataItems"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SocketGateway.ArrayLengthMismatch",
                                        "SocketGateway.addressAt"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "5d062c42ea9d5e80ea5c4ed8cf51fb7e"
                            }
                        ],
                        "executeController": [
                            {
                                "visibility": "external",
                                "content": "function executeController( ISocketGateway.SocketControllerRequest calldata socketControllerRequest ) external payable returns (bytes memory){ (bool success, bytes memory result) = controllers[ socketControllerRequest.controllerId ].delegatecall(socketControllerRequest.data); if (!success){ assembly{ revert(add(result, 32), mload(result))}} return result;}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "ISocketGateway.SocketControllerRequest calldata",
                                        "name": "socketControllerRequest"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "controllers",
                                        "",
                                        "SocketGateway"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": true,
                                "md5": "5ac3f05e7aed93cf759b5f6135607f60"
                            }
                        ],
                        "executeControllers": [
                            {
                                "visibility": "external",
                                "content": "function executeControllers( ISocketGateway.SocketControllerRequest[] calldata controllerRequests ) external payable{ for (uint32 index = 0; index < controllerRequests.length; ){ (bool success, bytes memory result) = controllers[ controllerRequests[index].controllerId ].delegatecall(controllerRequests[index].data); if (!success){ assembly{ revert(add(result, 32), mload(result))}} unchecked{ ++index;}}}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "ISocketGateway.SocketControllerRequest[] calldata",
                                        "name": "controllerRequests"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "controllers",
                                        "",
                                        "SocketGateway"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": true,
                                "md5": "ad2e0c548055c4974dbfccfbe93db428"
                            }
                        ],
                        "addRoute": [
                            {
                                "visibility": "external",
                                "content": "function addRoute( address routeAddress ) external onlyOwner returns (uint32){ uint32 routeId = routesCount; routes[routeId] = routeAddress; routesCount += 1; emit NewRouteAdded(routeId, routeAddress); return routeId;}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "routeAddress"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint32",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "routesCount",
                                        "",
                                        "SocketGateway"
                                    ],
                                    [
                                        "routes",
                                        "",
                                        "SocketGateway"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "routesCount",
                                        "",
                                        "SocketGateway"
                                    ],
                                    [
                                        "routes",
                                        "",
                                        "SocketGateway"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SocketGateway.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "41197b5709ee7255064a19b9770d7234"
                            }
                        ],
                        "setApprovalForRouters": [
                            {
                                "visibility": "external",
                                "content": "function setApprovalForRouters( address[] memory routeAddresses, address[] memory tokenAddresses, bool isMax ) external onlyOwner{ for (uint32 index = 0; index < routeAddresses.length; ){ ERC20(tokenAddresses[index]).approve( routeAddresses[index], isMax ? type (uint256).max : 0 ); unchecked{ ++index;}}}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "address[] memory",
                                        "name": "routeAddresses"
                                    },
                                    {
                                        "type": "address[] memory",
                                        "name": "tokenAddresses"
                                    },
                                    {
                                        "type": "bool",
                                        "name": "isMax"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SocketGateway.onlyOwner",
                                        "SocketGateway.ERC20",
                                        "SocketGateway.type"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "c936711230da894f0bbc7e2e15cbb041"
                            }
                        ],
                        "addController": [
                            {
                                "visibility": "external",
                                "content": "function addController( address controllerAddress ) external onlyOwner returns (uint32){ uint32 controllerId = controllerCount; controllers[controllerId] = controllerAddress; controllerCount += 1; emit ControllerAdded(controllerId, controllerAddress); return controllerId;}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "controllerAddress"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint32",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "controllerCount",
                                        "",
                                        "SocketGateway"
                                    ],
                                    [
                                        "controllers",
                                        "",
                                        "SocketGateway"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "controllerCount",
                                        "",
                                        "SocketGateway"
                                    ],
                                    [
                                        "controllers",
                                        "",
                                        "SocketGateway"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SocketGateway.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "c638590121a18937bf33944aacc21c3d"
                            }
                        ],
                        "disableController": [
                            {
                                "visibility": "public",
                                "content": "function disableController(uint32 controllerId) public onlyOwner{ controllers[controllerId] = disabledRouteAddress; emit ControllerDisabled(controllerId);}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint32",
                                        "name": "controllerId"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "disabledRouteAddress",
                                        "",
                                        "SocketGateway"
                                    ],
                                    [
                                        "controllers",
                                        "",
                                        "SocketGateway"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "controllers",
                                        "",
                                        "SocketGateway"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SocketGateway.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "80555ece14f6be7f44af7b13a96095d3"
                            }
                        ],
                        "disableRoute": [
                            {
                                "visibility": "external",
                                "content": "function disableRoute(uint32 routeId) external onlyOwner{ routes[routeId] = disabledRouteAddress; emit RouteDisabled(routeId);}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint32",
                                        "name": "routeId"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "disabledRouteAddress",
                                        "",
                                        "SocketGateway"
                                    ],
                                    [
                                        "routes",
                                        "",
                                        "SocketGateway"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "routes",
                                        "",
                                        "SocketGateway"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SocketGateway.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "3308e367f23a28f8592b08431973ca36"
                            }
                        ],
                        "rescueFunds": [
                            {
                                "visibility": "external",
                                "content": "function rescueFunds( address token, address userAddress, uint256 amount ) external onlyOwner{ ERC20(token).safeTransfer(userAddress, amount);}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "userAddress"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SocketGateway.onlyOwner",
                                        "SocketGateway.ERC20"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "3944a5c52501dcdae998b37b0a15b246"
                            }
                        ],
                        "rescueEther": [
                            {
                                "visibility": "external",
                                "content": "function rescueEther( address payable userAddress, uint256 amount ) external onlyOwner{ userAddress.transfer(amount);}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "address payable",
                                        "name": "userAddress"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SocketGateway.onlyOwner",
                                        "userAddress.transfer"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "b68d68f22645125c8e97d3d732b95cf4"
                            }
                        ],
                        "getRoute": [
                            {
                                "visibility": "public",
                                "content": "function getRoute(uint32 routeId) public view returns (address){ return addressAt(routeId);}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint32",
                                        "name": "routeId"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SocketGateway.addressAt"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "db9ef23f7916b8af775666b8a0fbf4c3"
                            }
                        ],
                        "getController": [
                            {
                                "visibility": "public",
                                "content": "function getController(uint32 controllerId) public view returns (address){ return controllers[controllerId];}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint32",
                                        "name": "controllerId"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "controllers",
                                        "",
                                        "SocketGateway"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "429e76f4283b96bffdb2b1e48272dde0"
                            }
                        ],
                        "addressAt": [
                            {
                                "visibility": "public",
                                "content": "function addressAt(uint32 routeId) public view returns (address){ if (routeId < 385){ if (routeId < 257){ if (routeId < 129){ if (routeId < 65){ if (routeId < 33){ if (routeId < 17){ if (routeId < 9){ if (routeId < 5){ if (routeId < 3){ if (routeId == 1){ return 0x8cd6BaCDAe46B449E2e5B34e348A4eD459c84D50;} else{ return 0x31524750Cd865fF6A3540f232754Fb974c18585C;}} else{ if (routeId == 3){ return 0xEd9b37342BeC8f3a2D7b000732ec87498aA6EC6a;} else{ return 0xE8704Ef6211F8988Ccbb11badC89841808d66890;}}} else{ if (routeId < 7){ if (routeId == 5){ return 0x9aFF58C460a461578C433e11C4108D1c4cF77761;} else{ return 0x2D1733886cFd465B0B99F1492F40847495f334C5;}} else{ if (routeId == 7){ return 0x715497Be4D130F04B8442F0A1F7a9312D4e54FC4;} else{ return 0x90C8a40c38E633B5B0e0d0585b9F7FA05462CaaF;}}}} else{ if (routeId < 13){ if (routeId < 11){ if (routeId == 9){ return 0xa402b70FCfF3F4a8422B93Ef58E895021eAdE4F6;} else{ return 0xc1B718522E15CD42C4Ac385a929fc2B51f5B892e;}} else{ if (routeId == 11){ return 0xa97bf2f7c26C43c010c349F52f5eA5dC49B2DD38;} else{ return 0x969423d71b62C81d2f28d707364c9Dc4a0764c53;}}} else{ if (routeId < 15){ if (routeId == 13){ return 0xF86729934C083fbEc8C796068A1fC60701Ea1207;} else{ return 0xD7cC2571F5823caCA26A42690D2BE7803DD5393f;}} else{ if (routeId == 15){ return 0x7c8837a279bbbf7d8B93413763176de9F65d5bB9;} else{ return 0x13b81C27B588C07D04458ed7dDbdbD26D1e39bcc;}}}}} else{ if (routeId < 25){ if (routeId < 21){ if (routeId < 19){ if (routeId == 17){ return 0x52560Ac678aFA1345D15474287d16Dc1eA3F78aE;} else{ return 0x1E31e376551459667cd7643440c1b21CE69065A0;}} else{ if (routeId == 19){ return 0xc57D822CB3288e7b97EF8f8af0EcdcD1B783529B;} else{ return 0x2197A1D9Af24b4d6a64Bff95B4c29Fcd3Ff28C30;}}} else{ if (routeId < 23){ if (routeId == 21){ return 0xE3700feAa5100041Bf6b7AdBA1f72f647809Fd00;} else{ return 0xc02E8a0Fdabf0EeFCEA025163d90B5621E2b9948;}} else{ if (routeId == 23){ return 0xF5144235E2926cAb3c69b30113254Fa632f72d62;} else{ return 0xBa3F92313B00A1f7Bc53b2c24EB195c8b2F57682;}}}} else{ if (routeId < 29){ if (routeId < 27){ if (routeId == 25){ return 0x77a6856fe1fFA5bEB55A1d2ED86E27C7c482CB76;} else{ return 0x4826Ff4e01E44b1FCEFBfb38cd96687Eb7786b44;}} else{ if (routeId == 27){ return 0x55FF3f5493cf5e80E76DEA7E327b9Cd8440Af646;} else{ return 0xF430Db544bE9770503BE4aa51997aA19bBd5BA4f;}}} else{ if (routeId < 31){ if (routeId == 29){ return 0x0f166446ce1484EE3B0663E7E67DF10F5D240115;} else{ return 0x6365095D92537f242Db5EdFDd572745E72aC33d9;}} else{ if (routeId == 31){ return 0x5c7BC93f06ce3eAe75ADf55E10e23d2c1dE5Bc65;} else{ return 0xe46383bAD90d7A08197ccF08972e9DCdccCE9BA4;}}}}}} else{ if (routeId < 49){ if (routeId < 41){ if (routeId < 37){ if (routeId < 35){ if (routeId == 33){ return 0xf0f21710c071E3B728bdc4654c3c0b873aAaa308;} else{ return 0x63Bc9ed3AcAAeB0332531C9fB03b0a2352E9Ff25;}} else{ if (routeId == 35){ return 0xd1CE808625CB4007a1708824AE82CdB0ece57De9;} else{ return 0x57BbB148112f4ba224841c3FE018884171004661;}}} else{ if (routeId < 39){ if (routeId == 37){ return 0x037f7d6933036F34DFabd40Ff8e4D789069f92e3;} else{ return 0xeF978c280915CfF3Dca4EDfa8932469e40ADA1e1;}} else{ if (routeId == 39){ return 0x92ee9e071B13f7ecFD62B7DED404A16CBc223CD3;} else{ return 0x94Ae539c186e41ed762271338Edf140414D1E442;}}}} else{ if (routeId < 45){ if (routeId < 43){ if (routeId == 41){ return 0x30A64BBe4DdBD43dA2368EFd1eB2d80C10d84DAb;} else{ return 0x3aEABf81c1Dc4c1b73d5B2a95410f126426FB596;}} else{ if (routeId == 43){ return 0x25b08aB3D0C8ea4cC9d967b79688C6D98f3f563a;} else{ return 0xea40cB15C9A3BBd27af6474483886F7c0c9AE406;}}} else{ if (routeId < 47){ if (routeId == 45){ return 0x9580113Cc04e5a0a03359686304EF3A80b936Dd3;} else{ return 0xD211c826d568957F3b66a3F4d9c5f68cCc66E619;}} else{ if (routeId == 47){ return 0xCEE24D0635c4C56315d133b031984d4A6f509476;} else{ return 0x3922e6B987983229798e7A20095EC372744d4D4c;}}}}} else{ if (routeId < 57){ if (routeId < 53){ if (routeId < 51){ if (routeId == 49){ return 0x2d92D03413d296e1F31450479349757187F2a2b7;} else{ return 0x0fe5308eE90FC78F45c89dB6053eA859097860CA;}} else{ if (routeId == 51){ return 0x08Ba68e067C0505bAF0C1311E0cFB2B1B59b969c;} else{ return 0x9bee5DdDF75C24897374f92A534B7A6f24e97f4a;}}} else{ if (routeId < 55){ if (routeId == 53){ return 0x1FC5A90B232208704B930c1edf82FFC6ACc02734;} else{ return 0x5b1B0417cb44c761C2a23ee435d011F0214b3C85;}} else{ if (routeId == 55){ return 0x9d70cDaCA12A738C283020760f449D7816D592ec;} else{ return 0x95a23b9CB830EcCFDDD5dF56A4ec665e3381Fa12;}}}} else{ if (routeId < 61){ if (routeId < 59){ if (routeId == 57){ return 0x483a957Cf1251c20e096C35c8399721D1200A3Fc;} else{ return 0xb4AD39Cb293b0Ec7FEDa743442769A7FF04987CD;}} else{ if (routeId == 59){ return 0x4C543AD78c1590D81BAe09Fc5B6Df4132A2461d0;} else{ return 0x471d5E5195c563902781734cfe1FF3981F8B6c86;}}} else{ if (routeId < 63){ if (routeId == 61){ return 0x1B12a54B5E606D95B8B8D123c9Cb09221Ee37584;} else{ return 0xE4127cC550baC433646a7D998775a84daC16c7f3;}} else{ if (routeId == 63){ return 0xecb1b55AB12E7dd788D585c6C5cD61B5F87be836;} else{ return 0xf91ef487C5A1579f70601b6D347e19756092eEBf;}}}}}}} else{ if (routeId < 97){ if (routeId < 81){ if (routeId < 73){ if (routeId < 69){ if (routeId < 67){ if (routeId == 65){ return 0x34a16a7e9BADEEFD4f056310cbE0b1423Fa1b760;} else{ return 0x60E10E80c7680f429dBbC232830BEcd3D623c4CF;}} else{ if (routeId == 67){ return 0x66465285B8D65362A1d86CE00fE2bE949Fd6debF;} else{ return 0x5aB231B7e1A3A74a48f67Ab7bde5Cdd4267022E0;}}} else{ if (routeId < 71){ if (routeId == 69){ return 0x3A1C3633eE79d43366F5c67802a746aFD6b162Ba;} else{ return 0x0C4BfCbA8dC3C811437521a80E81e41DAF479039;}} else{ if (routeId == 71){ return 0x6caf25d2e139C5431a1FA526EAf8d73ff2e6252C;} else{ return 0x74ad21e09FDa68638CE14A3009A79B6D16574257;}}}} else{ if (routeId < 77){ if (routeId < 75){ if (routeId == 73){ return 0xD4923A61008894b99cc1CD3407eF9524f02aA0Ca;} else{ return 0x6F159b5EB823BD415886b9271aA2A723a00a1987;}} else{ if (routeId == 75){ return 0x742a8aA42E7bfB4554dE30f4Fb07FFb6f2068863;} else{ return 0x4AE9702d3360400E47B446e76DE063ACAb930101;}}} else{ if (routeId < 79){ if (routeId == 77){ return 0x0E19a0a44ddA7dAD854ec5Cc867d16869c4E80F4;} else{ return 0xE021A51968f25148F726E326C88d2556c5647557;}} else{ if (routeId == 79){ return 0x64287BDDDaeF4d94E4599a3D882bed29E6Ada4B6;} else{ return 0xcBB57Fd2e19cc7e9D444d5b4325A2F1047d0C73f;}}}}} else{ if (routeId < 89){ if (routeId < 85){ if (routeId < 83){ if (routeId == 81){ return 0x373DE80DF7D82cFF6D76F29581b360C56331e957;} else{ return 0x0466356E131AD61596a51F86BAd1C03A328960D8;}} else{ if (routeId == 83){ return 0x01726B960992f1b74311b248E2a922fC707d43A6;} else{ return 0x2E21bdf9A4509b89795BCE7E132f248a75814CEc;}}} else{ if (routeId < 87){ if (routeId == 85){ return 0x769512b23aEfF842379091d3B6E4B5456F631D42;} else{ return 0xe7eD9be946a74Ec19325D39C6EEb57887ccB2B0D;}} else{ if (routeId == 87){ return 0xc4D01Ec357c2b511d10c15e6b6974380F0E62e67;} else{ return 0x5bC49CC9dD77bECF2fd3A3C55611e84E69AFa3AE;}}}} else{ if (routeId < 93){ if (routeId < 91){ if (routeId == 89){ return 0x48bcD879954fA14e7DbdAeb56F79C1e9DDcb69ec;} else{ return 0xE929bDde21b462572FcAA4de6F49B9D3246688D0;}} else{ if (routeId == 91){ return 0x85Aae300438222f0e3A9Bc870267a5633A9438bd;} else{ return 0x51f72E1096a81C55cd142d66d39B688C657f9Be8;}}} else{ if (routeId < 95){ if (routeId == 93){ return 0x3A8a05BF68ac54B01E6C0f492abF97465F3d15f9;} else{ return 0x145aA67133F0c2C36b9771e92e0B7655f0D59040;}} else{ if (routeId == 95){ return 0xa030315d7DB11F9892758C9e7092D841e0ADC618;} else{ return 0xdF1f8d81a3734bdDdEfaC6Ca1596E081e57c3044;}}}}}} else{ if (routeId < 113){ if (routeId < 105){ if (routeId < 101){ if (routeId < 99){ if (routeId == 97){ return 0xFF2833123B58aa05d04D7fb99f5FB768B2b435F8;} else{ return 0xc8f09c1fD751C570233765f71b0e280d74e6e743;}} else{ if (routeId == 99){ return 0x3026DA6Ceca2E5A57A05153653D9212FFAaA49d8;} else{ return 0xdE68Ee703dE0D11f67B0cE5891cB4a903de6D160;}}} else{ if (routeId < 103){ if (routeId == 101){ return 0xE23a7730e81FB4E87A6D0bd9f63EE77ac86C3DA4;} else{ return 0x8b1DBe04aD76a7d8bC079cACd3ED4D99B897F4a0;}} else{ if (routeId == 103){ return 0xBB227240FA459b69C6889B2b8cb1BE76F118061f;} else{ return 0xC062b9b3f0dB28BB8afAfcD4d075729344114ffe;}}}} else{ if (routeId < 109){ if (routeId < 107){ if (routeId == 105){ return 0x553188Aa45f5FDB83EC4Ca485982F8fC082480D1;} else{ return 0x0109d83D746EaCb6d4014953D9E12d6ca85e330b;}} else{ if (routeId == 107){ return 0x45B1bEd29812F5bf6711074ACD180B2aeB783AD9;} else{ return 0xdA06eC8c19aea31D77F60299678Cba40E743e1aD;}}} else{ if (routeId < 111){ if (routeId == 109){ return 0x3cC5235c97d975a9b4FD4501B3446c981ea3D855;} else{ return 0xa1827267d6Bd989Ff38580aE3d9deff6Acf19163;}} else{ if (routeId == 111){ return 0x3663CAA0433A3D4171b3581Cf2410702840A735A;} else{ return 0x7575D0a7614F655BA77C74a72a43bbd4fA6246a3;}}}}} else{ if (routeId < 121){ if (routeId < 117){ if (routeId < 115){ if (routeId == 113){ return 0x2516Defc18bc07089c5dAFf5eafD7B0EF64611E2;} else{ return 0xfec5FF08E20fbc107a97Af2D38BD0025b84ee233;}} else{ if (routeId == 115){ return 0x0FB5763a87242B25243e23D73f55945fE787523A;} else{ return 0xe4C00db89678dBf8391f430C578Ca857Dd98aDE1;}}} else{ if (routeId < 119){ if (routeId == 117){ return 0x8F2A22061F9F35E64f14523dC1A5f8159e6a21B7;} else{ return 0x18e4b838ae966917E20E9c9c5Ad359cDD38303bB;}} else{ if (routeId == 119){ return 0x61ACb1d3Dcb3e3429832A164Cc0fC9849fb75A4a;} else{ return 0x7681e3c8e7A41DCA55C257cc0d1Ae757f5530E65;}}}} else{ if (routeId < 125){ if (routeId < 123){ if (routeId == 121){ return 0x806a2AB9748C3D1DB976550890E3f528B7E8Faec;} else{ return 0xBDb8A5DD52C2c239fbC31E9d43B763B0197028FF;}} else{ if (routeId == 123){ return 0x474EC9203706010B9978D6bD0b105D36755e4848;} else{ return 0x8dfd0D829b303F2239212E591a0F92a32880f36E;}}} else{ if (routeId < 127){ if (routeId == 125){ return 0xad4BcE9745860B1adD6F1Bd34a916f050E4c82C2;} else{ return 0xBC701115b9fe14bC8CC5934cdC92517173e308C4;}} else{ if (routeId == 127){ return 0x0D1918d786Db8546a11aDeD475C98370E06f255E;} else{ return 0xee44f57cD6936DB55B99163f3Df367B01EdA785a;}}}}}}}} else{ if (routeId < 193){ if (routeId < 161){ if (routeId < 145){ if (routeId < 137){ if (routeId < 133){ if (routeId < 131){ if (routeId == 129){ return 0x63044521fe5a1e488D7eD419cD0e35b7C24F2aa7;} else{ return 0x410085E73BD85e90d97b84A68C125aDB9F91f85b;}} else{ if (routeId == 131){ return 0x7913fe97E07C7A397Ec274Ab1d4E2622C88EC5D1;} else{ return 0x977f9fE93c064DCf54157406DaABC3a722e8184C;}}} else{ if (routeId < 135){ if (routeId == 133){ return 0xCD2236468722057cFbbABad2db3DEA9c20d5B01B;} else{ return 0x17c7287A491cf5Ff81E2678cF2BfAE4333F6108c;}} else{ if (routeId == 135){ return 0x354D9a5Dbf96c71B79a265F03B595C6Fdc04dadd;} else{ return 0xb4e409EB8e775eeFEb0344f9eee884cc7ed21c69;}}}} else{ if (routeId < 141){ if (routeId < 139){ if (routeId == 137){ return 0xa1a3c4670Ad69D9be4ab2D39D1231FEC2a63b519;} else{ return 0x4589A22199870729C1be5CD62EE93BeD858113E6;}} else{ if (routeId == 139){ return 0x8E7b864dB26Bd6C798C38d4Ba36EbA0d6602cF11;} else{ return 0xA2D17C7260a4CB7b9854e89Fc367E80E87872a2d;}}} else{ if (routeId < 143){ if (routeId == 141){ return 0xC7F0EDf0A1288627b0432304918A75e9084CBD46;} else{ return 0xE4B4EF1f9A4aBFEdB371fA7a6143993B15d4df25;}} else{ if (routeId == 143){ return 0xfe3D84A2Ef306FEBb5452441C9BDBb6521666F6A;} else{ return 0x8A12B6C64121920110aE58F7cd67DfEc21c6a4C3;}}}}} else{ if (routeId < 153){ if (routeId < 149){ if (routeId < 147){ if (routeId == 145){ return 0x76c4d9aFC4717a2BAac4e5f26CccF02351f7a3DA;} else{ return 0xd4719BA550E397aeAcca1Ad2201c1ba69024FAAf;}} else{ if (routeId == 147){ return 0x9646126Ce025224d1682C227d915a386efc0A1Fb;} else{ return 0x4DD8Af2E3F2044842f0247920Bc4BABb636915ea;}}} else{ if (routeId < 151){ if (routeId == 149){ return 0x8e8a327183Af0cf8C2ece9F0ed547C42A160D409;} else{ return 0x9D49614CaE1C685C71678CA6d8CDF7584bfd0740;}} else{ if (routeId == 151){ return 0x5a00ef257394cbc31828d48655E3d39e9c11c93d;} else{ return 0xC9a2751b38d3dDD161A41Ca0135C5C6c09EC1d56;}}}} else{ if (routeId < 157){ if (routeId < 155){ if (routeId == 153){ return 0x7e1c261640a525C94Ca4f8c25b48CF754DD83590;} else{ return 0x409Fe24ba6F6BD5aF31C1aAf8059b986A3158233;}} else{ if (routeId == 155){ return 0x704Cf5BFDADc0f55fDBb53B6ed8B582E018A72A2;} else{ return 0x3982bF65d7d6E77E3b6661cd6F6468c247512737;}}} else{ if (routeId < 159){ if (routeId == 157){ return 0x3982b9f26FFD67a13Ee371e2C0a9Da338BA70E7f;} else{ return 0x6D834AB385900c1f49055D098e90264077FbC4f2;}} else{ if (routeId == 159){ return 0x11FE5F70779A094B7166B391e1Fb73d422eF4e4d;} else{ return 0xD347e4E47280d21F13B73D89c6d16f867D50DD13;}}}}}} else{ if (routeId < 177){ if (routeId < 169){ if (routeId < 165){ if (routeId < 163){ if (routeId == 161){ return 0xb6035eDD53DDA28d8B69b4ae9836E40C80306CD7;} else{ return 0x54c884e6f5C7CcfeCA990396c520C858c922b6CA;}} else{ if (routeId == 163){ return 0x5eA93E240b083d686558Ed607BC013d88057cE46;} else{ return 0x4C7131eE812De685cBe4e2cCb033d46ecD46612E;}}} else{ if (routeId < 167){ if (routeId == 165){ return 0xc1a5Be9F0c33D8483801D702111068669f81fF91;} else{ return 0x9E5fAb91455Be5E5b2C05967E73F456c8118B1Fc;}} else{ if (routeId == 167){ return 0x3d9A05927223E0DC2F382831770405885e22F0d8;} else{ return 0x6303A011fB6063f5B1681cb5a9938EA278dc6128;}}}} else{ if (routeId < 173){ if (routeId < 171){ if (routeId == 169){ return 0xe9c60795c90C66797e4c8E97511eA07CdAda32bE;} else{ return 0xD56cC98e69A1e13815818b466a8aA6163d84234A;}} else{ if (routeId == 171){ return 0x47EbB9D36a6e40895316cD894E4860D774E2c531;} else{ return 0xA5EB293629410065d14a7B1663A67829b0618292;}}} else{ if (routeId < 175){ if (routeId == 173){ return 0x1b3B4C8146F939cE00899db8B3ddeF0062b7E023;} else{ return 0x257Bbc11653625EbfB6A8587eF4f4FBe49828EB3;}} else{ if (routeId == 175){ return 0x44cc979C01b5bB1eAC21301E73C37200dFD06F59;} else{ return 0x2972fDF43352225D82754C0174Ff853819D1ef2A;}}}}} else{ if (routeId < 185){ if (routeId < 181){ if (routeId < 179){ if (routeId == 177){ return 0x3e54144f032648A04D62d79f7B4b93FF3aC2333b;} else{ return 0x444016102dB8adbE73C3B6703a1ea7F2f75A510D;}} else{ if (routeId == 179){ return 0xac079143f98a6eb744Fde34541ebF243DF5B5dED;} else{ return 0xAe9010767Fb112d29d35CEdfba2b372Ad7A308d3;}}} else{ if (routeId < 183){ if (routeId == 181){ return 0xfE0BCcF9cCC2265D5fB3450743f17DfE57aE1e56;} else{ return 0x04ED8C0545716119437a45386B1d691C63234C7D;}} else{ if (routeId == 183){ return 0x636c14013e531A286Bc4C848da34585f0bB73d59;} else{ return 0x2Fa67fc7ECC5cAA01C653d3BFeA98ecc5db9C42A;}}}} else{ if (routeId < 189){ if (routeId < 187){ if (routeId == 185){ return 0x23e9a0FC180818aA872D2079a985217017E97bd9;} else{ return 0x79A95c3Ef81b3ae64ee03A9D5f73e570495F164E;}} else{ if (routeId == 187){ return 0xa7EA0E88F04a84ba0ad1E396cb07Fa3fDAD7dF6D;} else{ return 0xd23cA1278a2B01a3C0Ca1a00d104b11c1Ebe6f42;}}} else{ if (routeId < 191){ if (routeId == 189){ return 0x707bc4a9FA2E349AED5df4e9f5440C15aA9D14Bd;} else{ return 0x7E290F2dd539Ac6CE58d8B4C2B944931a1fD3612;}} else{ if (routeId == 191){ return 0x707AA5503088Ce06Ba450B6470A506122eA5c8eF;} else{ return 0xFbB3f7BF680deeb149f4E7BC30eA3DDfa68F3C3f;}}}}}}} else{ if (routeId < 225){ if (routeId < 209){ if (routeId < 201){ if (routeId < 197){ if (routeId < 195){ if (routeId == 193){ return 0xDE74aD8cCC3dbF14992f49Cf24f36855912f4934;} else{ return 0x409BA83df7777F070b2B50a10a41DE2468d2a3B3;}} else{ if (routeId == 195){ return 0x5CB7Be90A5DD7CfDa54e87626e254FE8C18255B4;} else{ return 0x0A684fE12BC64fb72B59d0771a566F49BC090356;}}} else{ if (routeId < 199){ if (routeId == 197){ return 0xDf30048d91F8FA2bCfC54952B92bFA8e161D3360;} else{ return 0x050825Fff032a547C47061CF0696FDB0f65AEa5D;}} else{ if (routeId == 199){ return 0xd55e671dAC1f03d366d8535073ada5DB2Aab1Ea2;} else{ return 0x9470C704A9616c8Cd41c595Fcd2181B6fe2183C2;}}}} else{ if (routeId < 205){ if (routeId < 203){ if (routeId == 201){ return 0x2D9ffD275181F5865d5e11CbB4ced1521C4dF9f1;} else{ return 0x816d28Dec10ec95DF5334f884dE85cA6215918d8;}} else{ if (routeId == 203){ return 0xd1f87267c4A43835E666dd69Df077e578A3b6299;} else{ return 0x39E89Bde9DACbe5468C025dE371FbDa12bDeBAB1;}}} else{ if (routeId < 207){ if (routeId == 205){ return 0x7b40A3207956ecad6686E61EfcaC48912FcD0658;} else{ return 0x090cF10D793B1Efba9c7D76115878814B663859A;}} else{ if (routeId == 207){ return 0x312A59c06E41327878F2063eD0e9c282C1DA3AfC;} else{ return 0x4F1188f46236DD6B5de11Ebf2a9fF08716E7DeB6;}}}}} else{ if (routeId < 217){ if (routeId < 213){ if (routeId < 211){ if (routeId == 209){ return 0x0A6F9a3f4fA49909bBfb4339cbE12B42F53BbBeD;} else{ return 0x01d13d7aCaCbB955B81935c80ffF31e14BdFa71f;}} else{ if (routeId == 211){ return 0x691a14Fa6C7360422EC56dF5876f84d4eDD7f00A;} else{ return 0x97Aad18d886d181a9c726B3B6aE15a0A69F5aF73;}}} else{ if (routeId < 215){ if (routeId == 213){ return 0x2917241371D2099049Fa29432DC46735baEC33b4;} else{ return 0x5F20F20F7890c2e383E29D4147C9695A371165f5;}} else{ if (routeId == 215){ return 0xeC0a60e639958335662C5219A320cCEbb56C6077;} else{ return 0x96d63CF5062975C09845d17ec672E10255866053;}}}} else{ if (routeId < 221){ if (routeId < 219){ if (routeId == 217){ return 0xFF57429e57D383939CAB50f09ABBfB63C0e6c9AD;} else{ return 0x18E393A7c8578fb1e235C242076E50013cDdD0d7;}} else{ if (routeId == 219){ return 0xE7E5238AF5d61f52E9B4ACC025F713d1C0216507;} else{ return 0x428401D4d0F25A2EE1DA4d5366cB96Ded425D9bD;}}} else{ if (routeId < 223){ if (routeId == 221){ return 0x42E5733551ff1Ee5B48Aa9fc2B61Af9b58C812E6;} else{ return 0x64Df9c7A0551B056d860Bc2419Ca4c1EF75320bE;}} else{ if (routeId == 223){ return 0x46006925506145611bBf0263243D8627dAf26B0F;} else{ return 0x8D64BE884314662804eAaB884531f5C50F4d500c;}}}}}} else{ if (routeId < 241){ if (routeId < 233){ if (routeId < 229){ if (routeId < 227){ if (routeId == 225){ return 0x157a62D92D07B5ce221A5429645a03bBaCE85373;} else{ return 0xaF037D33e1F1F2F87309B425fe8a9d895Ef3722B;}} else{ if (routeId == 227){ return 0x921D1154E494A2f7218a37ad7B17701f94b4B40e;} else{ return 0xF282b4555186d8Dea51B8b3F947E1E0568d09bc4;}}} else{ if (routeId < 231){ if (routeId == 229){ return 0xa794E2E1869765a4600b3DFd8a4ebcF16350f6B6;} else{ return 0xFEFb048e20c5652F7940A49B1980E0125Ec4D358;}} else{ if (routeId == 231){ return 0x220104b641971e9b25612a8F001bf48AbB23f1cF;} else{ return 0xcB9D373Bb54A501B35dd3be5bF4Ba43cA31F7035;}}}} else{ if (routeId < 237){ if (routeId < 235){ if (routeId == 233){ return 0x37D627F56e3FF36aC316372109ea82E03ac97DAc;} else{ return 0x4E81355FfB4A271B4EA59ff78da2b61c7833161f;}} else{ if (routeId == 235){ return 0xADd8D65cAF6Cc9ad73127B49E16eA7ac29d91e87;} else{ return 0x630F9b95626487dfEAe3C97A44DB6C59cF35d996;}}} else{ if (routeId < 239){ if (routeId == 237){ return 0x78CE2BC8238B679680A67FCB98C5A60E4ec17b2D;} else{ return 0xA38D776028eD1310b9A6b086f67F788201762E21;}} else{ if (routeId == 239){ return 0x7Bb5178827B76B86753Ed62a0d662c72cEcb1bD3;} else{ return 0x4faC26f61C76eC5c3D43b43eDfAFF0736Ae0e3da;}}}}} else{ if (routeId < 249){ if (routeId < 245){ if (routeId < 243){ if (routeId == 241){ return 0x791Bb49bfFA7129D6889FDB27744422Ac4571A85;} else{ return 0x26766fFEbb5fa564777913A6f101dF019AB32afa;}} else{ if (routeId == 243){ return 0x05e98E5e95b4ECBbbAf3258c3999Cc81ed8048Be;} else{ return 0xC5c4621e52f1D6A1825A5ed4F95855401a3D9C6b;}}} else{ if (routeId < 247){ if (routeId == 245){ return 0xfcb15f909BA7FC7Ea083503Fb4c1020203c107EB;} else{ return 0xbD27603279d969c74f2486ad14E71080829DFd38;}} else{ if (routeId == 247){ return 0xff2f756BcEcC1A55BFc09a30cc5F64720458cFCB;} else{ return 0x3bfB968FEbC12F4e8420B2d016EfcE1E615f7246;}}}} else{ if (routeId < 253){ if (routeId < 251){ if (routeId == 249){ return 0x982EE9Ffe23051A2ec945ed676D864fa8345222b;} else{ return 0xe101899100785E74767d454FFF0131277BaD48d9;}} else{ if (routeId == 251){ return 0x4F730C0c6b3B5B7d06ca511379f4Aa5BfB2E9525;} else{ return 0x5499c36b365795e4e0Ef671aF6C2ce26D7c78265;}}} else{ if (routeId < 255){ if (routeId == 253){ return 0x8AF51F7237Fc8fB2fc3E700488a94a0aC6Ad8b5a;} else{ return 0xda8716df61213c0b143F2849785FB85928084857;}} else{ if (routeId == 255){ return 0xF040Cf9b1ebD11Bf28e04e80740DF3DDe717e4f5;} else{ return 0xB87ba32f759D14023C7520366B844dF7f0F036C2;}}}}}}}}} else{ if (routeId < 321){ if (routeId < 289){ if (routeId < 273){ if (routeId < 265){ if (routeId < 261){ if (routeId < 259){ if (routeId == 257){ return 0x0Edde681b8478F0c3194f468EdD2dB5e75c65CDD;} else{ return 0x59C70900Fca06eE2aCE1BDd5A8D0Af0cc3BBA720;}} else{ if (routeId == 259){ return 0x8041F0f180D17dD07087199632c45E17AeB0BAd5;} else{ return 0x4fB4727064BA595995DD516b63b5921Df9B93aC6;}}} else{ if (routeId < 263){ if (routeId == 261){ return 0x86e98b594565857eD098864F560915C0dAfd6Ea1;} else{ return 0x70f8818E8B698EFfeCd86A513a4c87c0c380Bef6;}} else{ if (routeId == 263){ return 0x78Ed227c8A897A21Da2875a752142dd80d865158;} else{ return 0xd02A30BB5C3a8C51d2751A029a6fcfDE2Af9fbc6;}}}} else{ if (routeId < 269){ if (routeId < 267){ if (routeId == 265){ return 0x0F00d5c5acb24e975e2a56730609f7F40aa763b8;} else{ return 0xC3e2091edc2D3D9D98ba09269138b617B536834A;}} else{ if (routeId == 267){ return 0xa6FbaF7F30867C9633908998ea8C3da28920E75C;} else{ return 0xE6dDdcD41E2bBe8122AE32Ac29B8fbAB79CD21d9;}}} else{ if (routeId < 271){ if (routeId == 269){ return 0x537aa8c1Ef6a8Eaf039dd6e1Eb67694a48195cE4;} else{ return 0x96ABAC485fd2D0B03CF4a10df8BD58b8dED28300;}} else{ if (routeId == 271){ return 0xda8e7D46d04Bd4F62705Cd80355BDB6d441DafFD;} else{ return 0xbE50018E7a5c67E2e5f5414393e971CC96F293f2;}}}}} else{ if (routeId < 281){ if (routeId < 277){ if (routeId < 275){ if (routeId == 273){ return 0xa1b3907D6CB542a4cbe2eE441EfFAA909FAb62C3;} else{ return 0x6d08ee8511C0237a515013aC389e7B3968Cb1753;}} else{ if (routeId == 275){ return 0x22faa5B5Fe43eAdbB52745e35a5cdA8bD5F96bbA;} else{ return 0x7a673eB74D79e4868D689E7852abB5f93Ec2fD4b;}}} else{ if (routeId < 279){ if (routeId == 277){ return 0x0b8531F8AFD4190b76F3e10deCaDb84c98b4d419;} else{ return 0x78eABC743A93583DeE403D6b84795490e652216B;}} else{ if (routeId == 279){ return 0x3A95D907b2a7a8604B59BccA08585F58Afe0Aa64;} else{ return 0xf4271f0C8c9Af0F06A80b8832fa820ccE64FAda8;}}}} else{ if (routeId < 285){ if (routeId < 283){ if (routeId == 281){ return 0x74b2DF841245C3748c0d31542e1335659a25C33b;} else{ return 0xdFC99Fd0Ad7D16f30f295a5EEFcE029E04d0fa65;}} else{ if (routeId == 283){ return 0xE992416b6aC1144eD8148a9632973257839027F6;} else{ return 0x54ce55ba954E981BB1fd9399054B35Ce1f2C0816;}}} else{ if (routeId < 287){ if (routeId == 285){ return 0xD4AB52f9e7E5B315Bd7471920baD04F405Ab1c38;} else{ return 0x3670C990994d12837e95eE127fE2f06FD3E2104B;}} else{ if (routeId == 287){ return 0xDcf190B09C47E4f551E30BBb79969c3FdEA1e992;} else{ return 0xa65057B967B59677237e57Ab815B209744b9bc40;}}}}}} else{ if (routeId < 305){ if (routeId < 297){ if (routeId < 293){ if (routeId < 291){ if (routeId == 289){ return 0x6Efc86B40573e4C7F28659B13327D55ae955C483;} else{ return 0x06BcC25CF8e0E72316F53631b3aA7134E9f73Ae0;}} else{ if (routeId == 291){ return 0x710b6414E1D53882b1FCD3A168aD5Ccd435fc6D0;} else{ return 0x5Ebb2C3d78c4e9818074559e7BaE7FCc99781DC1;}}} else{ if (routeId < 295){ if (routeId == 293){ return 0xAf0a409c3AEe0bD08015cfb29D89E90b6e89A88F;} else{ return 0x522559d8b99773C693B80cE06DF559036295Ce44;}} else{ if (routeId == 295){ return 0xB65290A5Bae838aaa7825c9ECEC68041841a1B64;} else{ return 0x801b8F2068edd5Bcb659E6BDa0c425909043C420;}}}} else{ if (routeId < 301){ if (routeId < 299){ if (routeId == 297){ return 0x29b5F00515d093627E0B7bd0b5c8E84F6b4cDb87;} else{ return 0x652839Ae74683cbF9f1293F1019D938F87464D3E;}} else{ if (routeId == 299){ return 0x5Bc95dCebDDE9B79F2b6DC76121BC7936eF8D666;} else{ return 0x90db359CEA62E53051158Ab5F99811C0a07Fe686;}}} else{ if (routeId < 303){ if (routeId == 301){ return 0x2c3625EedadbDcDbB5330eb0d17b3C39ff269807;} else{ return 0xC3f0324471b5c9d415acD625b8d8694a4e48e001;}} else{ if (routeId == 303){ return 0x8C60e7E05fa0FfB6F720233736f245134685799d;} else{ return 0x98fAF2c09aa4EBb995ad0B56152993E7291a500e;}}}}} else{ if (routeId < 313){ if (routeId < 309){ if (routeId < 307){ if (routeId == 305){ return 0x802c1063a861414dFAEc16bacb81429FC0d40D6e;} else{ return 0x11C4AeFCC0dC156f64195f6513CB1Fb3Be0Ae056;}} else{ if (routeId == 307){ return 0xEff1F3258214E31B6B4F640b4389d55715C3Be2B;} else{ return 0x47e379Abe8DDFEA4289aBa01235EFF7E93758fd7;}}} else{ if (routeId < 311){ if (routeId == 309){ return 0x3CC26384c3eA31dDc8D9789e8872CeA6F20cD3ff;} else{ return 0xEdd9EFa6c69108FAA4611097d643E20Ba0Ed1634;}} else{ if (routeId == 311){ return 0xCb93525CA5f3D371F74F3D112bC19526740717B8;} else{ return 0x7071E0124EB4438137e60dF1b8DD8Af1BfB362cF;}}}} else{ if (routeId < 317){ if (routeId < 315){ if (routeId == 313){ return 0x4691096EB0b78C8F4b4A8091E5B66b18e1835c10;} else{ return 0x8d953c9b2d1C2137CF95992079f3A77fCd793272;}} else{ if (routeId == 315){ return 0xbdCc2A3Bf6e3Ba49ff86595e6b2b8D70d8368c92;} else{ return 0x95E6948aB38c61b2D294E8Bd896BCc4cCC0713cf;}}} else{ if (routeId < 319){ if (routeId == 317){ return 0x607b27C881fFEE4Cb95B1c5862FaE7224ccd0b4A;} else{ return 0x09D28aFA166e566A2Ee1cB834ea8e78C7E627eD2;}} else{ if (routeId == 319){ return 0x9c01449b38bDF0B263818401044Fb1401B29fDfA;} else{ return 0x1F7723599bbB658c051F8A39bE2688388d22ceD6;}}}}}}} else{ if (routeId < 353){ if (routeId < 337){ if (routeId < 329){ if (routeId < 325){ if (routeId < 323){ if (routeId == 321){ return 0x52B71603f7b8A5d15B4482e965a0619aa3210194;} else{ return 0x01c0f072CB210406653752FecFA70B42dA9173a2;}} else{ if (routeId == 323){ return 0x3021142f021E943e57fc1886cAF58D06147D09A6;} else{ return 0xe6f2AF38e76AB09Db59225d97d3E770942D3D842;}}} else{ if (routeId < 327){ if (routeId == 325){ return 0x06a25554e5135F08b9e2eD1DEC1fc3CEd52e0B48;} else{ return 0x71d75e670EE3511C8290C705E0620126B710BF8D;}} else{ if (routeId == 327){ return 0x8b9cE142b80FeA7c932952EC533694b1DF9B3c54;} else{ return 0xd7Be24f32f39231116B3fDc483C2A12E1521f73B;}}}} else{ if (routeId < 333){ if (routeId < 331){ if (routeId == 329){ return 0xb40cafBC4797d4Ff64087E087F6D2e661f954CbE;} else{ return 0xBdDCe7771EfEe81893e838f62204A4c76D72757e;}} else{ if (routeId == 331){ return 0x5d3D299EA7Fd4F39AcDb336E26631Dfee41F9287;} else{ return 0x6BfEE09E1Fc0684e0826A9A0dC1352a14B136FAC;}}} else{ if (routeId < 335){ if (routeId == 333){ return 0xd0001bB8E2Cb661436093f96458a4358B5156E3c;} else{ return 0x1867c6485CfD1eD448988368A22bfB17a7747293;}} else{ if (routeId == 335){ return 0x8997EF9F95dF24aB67703AB6C262aABfeEBE33bD;} else{ return 0x1e39E9E601922deD91BCFc8F78836302133465e2;}}}}} else{ if (routeId < 345){ if (routeId < 341){ if (routeId < 339){ if (routeId == 337){ return 0x8A8ec6CeacFf502a782216774E5AF3421562C6ff;} else{ return 0x3B8FC561df5415c8DC01e97Ee6E38435A8F9C40A;}} else{ if (routeId == 339){ return 0xD5d5f5B37E67c43ceA663aEDADFFc3a93a2065B0;} else{ return 0xCC8F55EC43B4f25013CE1946FBB740c43Be5B96D;}}} else{ if (routeId < 343){ if (routeId == 341){ return 0x18f586E816eEeDbb57B8011239150367561B58Fb;} else{ return 0xd0CD802B19c1a52501cb2f07d656e3Cd7B0Ce124;}} else{ if (routeId == 343){ return 0xe0AeD899b39C6e4f2d83e4913a1e9e0cf6368abE;} else{ return 0x0606e1b6c0f1A398C38825DCcc4678a7Cbc2737c;}}}} else{ if (routeId < 349){ if (routeId < 347){ if (routeId == 345){ return 0x2d188e85b27d18EF80f16686EA1593ABF7Ed2A63;} else{ return 0x64412292fA4A135a3300E24366E99ff59Db2eAc1;}} else{ if (routeId == 347){ return 0x38b74c173f3733E8b90aAEf0e98B89791266149F;} else{ return 0x36DAA49A79aaEF4E7a217A11530D3cCD84414124;}}} else{ if (routeId < 351){ if (routeId == 349){ return 0x10f088FE2C88F90270E4449c46c8B1b232511d58;} else{ return 0x4FeDbd25B58586838ABD17D10272697dF1dC3087;}} else{ if (routeId == 351){ return 0x685278209248CB058E5cEe93e37f274A80Faf6eb;} else{ return 0xDd9F8F1eeC3955f78168e2Fb2d1e808fa8A8f15b;}}}}}} else{ if (routeId < 369){ if (routeId < 361){ if (routeId < 357){ if (routeId < 355){ if (routeId == 353){ return 0x7392aEeFD5825aaC28817031dEEBbFaAA20983D9;} else{ return 0x0Cc182555E00767D6FB8AD161A10d0C04C476d91;}} else{ if (routeId == 355){ return 0x90E52837d56715c79FD592E8D58bFD20365798b2;} else{ return 0x6F4451DE14049B6770ad5BF4013118529e68A40C;}}} else{ if (routeId < 359){ if (routeId == 357){ return 0x89B97ef2aFAb9ed9c7f0FDb095d02E6840b52d9c;} else{ return 0x92A5cC5C42d94d3e23aeB1214fFf43Db2B97759E;}} else{ if (routeId == 359){ return 0x63ddc52F135A1dcBA831EAaC11C63849F018b739;} else{ return 0x692A691533B571C2c54C1D7F8043A204b3d8120E;}}}} else{ if (routeId < 365){ if (routeId < 363){ if (routeId == 361){ return 0x97c7492CF083969F61C6f302d45c8270391b921c;} else{ return 0xDeFD2B8643553dAd19548eB14fd94A57F4B9e543;}} else{ if (routeId == 363){ return 0x30645C04205cA3f670B67b02F971B088930ACB8C;} else{ return 0xA6f80ed2d607Cd67aEB4109B64A0BEcc4D7d03CF;}}} else{ if (routeId < 367){ if (routeId == 365){ return 0xBbbbC6c276eB3F7E674f2D39301509236001c42f;} else{ return 0xC20E77d349FB40CE88eB01824e2873ad9f681f3C;}} else{ if (routeId == 367){ return 0x5fCfD9a962De19294467C358C1FA55082285960b;} else{ return 0x4D87BD6a0E4E5cc6332923cb3E85fC71b287F58A;}}}}} else{ if (routeId < 377){ if (routeId < 373){ if (routeId < 371){ if (routeId == 369){ return 0x3AA5B757cd6Dde98214E56D57Dde7fcF0F7aB04E;} else{ return 0xe28eFCE7192e11a2297f44059113C1fD6967b2d4;}} else{ if (routeId == 371){ return 0x3251cAE10a1Cf246e0808D76ACC26F7B5edA0eE5;} else{ return 0xbA2091cc9357Cf4c4F25D64F30d1b4Ba3A5a174B;}}} else{ if (routeId < 375){ if (routeId == 373){ return 0x49c8e1Da9693692096F63C82D11b52d738566d55;} else{ return 0xA0731615aB5FFF451031E9551367A4F7dB27b39c;}} else{ if (routeId == 375){ return 0xFb214541888671AE1403CecC1D59763a12fc1609;} else{ return 0x1D6bCB17642E2336405df73dF22F07688cAec020;}}}} else{ if (routeId < 381){ if (routeId < 379){ if (routeId == 377){ return 0xfC9c0C7bfe187120fF7f4E21446161794A617a9e;} else{ return 0xBa5bF37678EeE2dAB17AEf9D898153258252250E;}} else{ if (routeId == 379){ return 0x7c55690bd2C9961576A32c02f8EB29ed36415Ec7;} else{ return 0xcA40073E868E8Bc611aEc8Fe741D17E68Fe422f6;}}} else{ if (routeId < 383){ if (routeId == 381){ return 0x31641bAFb87E9A58f78835050a7BE56921986339;} else{ return 0xA54766424f6dA74b45EbCc5Bf0Bd1D74D2CCcaAB;}} else{ if (routeId == 383){ return 0xc7bBa57F8C179EDDBaa62117ddA360e28f3F8252;} else{ return 0x5e663ED97ea77d393B8858C90d0683bF180E0ffd;}}}}}}}}} if (routes[routeId] == address(0)) revert ZeroAddressNotAllowed(); return routes[routeId];}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint32",
                                        "name": "routeId"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "routes",
                                        "",
                                        "SocketGateway"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SocketGateway.ZeroAddressNotAllowed"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "65c487afa36c88facf501101efc18c7b"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {
                        "NewRouteAdded": {
                            "event": "NewRouteAdded",
                            "content": "NewRouteAdded(uint32 indexed routeId, address indexed route)"
                        },
                        "RouteDisabled": {
                            "event": "RouteDisabled",
                            "content": "RouteDisabled(uint32 indexed routeId)"
                        },
                        "OwnershipTransferRequested": {
                            "event": "OwnershipTransferRequested",
                            "content": "OwnershipTransferRequested( address indexed _from, address indexed _to )"
                        },
                        "ControllerAdded": {
                            "event": "ControllerAdded",
                            "content": "ControllerAdded( uint32 indexed controllerId, address indexed controllerAddress )"
                        },
                        "ControllerDisabled": {
                            "event": "ControllerDisabled",
                            "content": "ControllerDisabled(uint32 indexed controllerId)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "bytes": "LibBytes",
                        "bytes4": "LibBytes",
                        "ERC20": "SafeTransferLib"
                    }
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "SocketGateway.addressAt": "65c487afa36c88facf501101efc18c7b",
                "SocketGateway.onlyOwner": "b9a44c8e413874da0eff71e6b2a9dd66",
                "userAddress.transfer": "106c99c210292ba876e75685ad2beb0c"
            },
            "md5": "efb48e165d9aaf710a5e8da001a4c83d"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
            "filename": "BridgeImplBase.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\utils\\SafeTransferLib.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "SafeTransferLib": {
                            "original_name": "SafeTransferLib",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\tokens\\ERC20.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "ERC20": {
                            "original_name": "ERC20",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\interfaces\\ISocketGateway.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "ISocketGateway": {
                            "original_name": "ISocketGateway",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\interfaces\\ISocketRoute.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "ISocketRoute": {
                            "original_name": "ISocketRoute",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\errors\\SocketErrors.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "OnlySocketGatewayOwner": {
                            "original_name": "OnlySocketGatewayOwner",
                            "type": {
                                "__CT__": true,
                                "value": 15
                            }
                        },
                        "OnlySocketDeployer": {
                            "original_name": "OnlySocketDeployer",
                            "type": {
                                "__CT__": true,
                                "value": 15
                            }
                        }
                    }
                }
            },
            "contracts": {
                "BridgeImplBase": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": true,
                    "inherits": [],
                    "state_variables": {
                        "NATIVE_TOKEN_ADDRESS": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)",
                            "content": "address public immutable NATIVE_TOKEN_ADDRESS = address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);"
                        },
                        "socketGateway": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public immutable socketGateway;"
                        },
                        "socketDeployFactory": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public immutable socketDeployFactory;"
                        },
                        "socketRoute": {
                            "type": "ISocketRoute",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": null,
                            "content": "ISocketRoute public immutable socketRoute;"
                        },
                        "BRIDGE_AFTER_SWAP_SELECTOR": {
                            "type": "bytes4",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "bytes4(keccak256(\"bridgeAfterSwap(uint256, bytes)\"))",
                            "content": "bytes4 public immutable BRIDGE_AFTER_SWAP_SELECTOR = bytes4(keccak256(\"bridgeAfterSwap(uint256, bytes)\"));"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (address _socketGateway, address _socketDeployFactory){ socketGateway = _socketGateway; socketDeployFactory = _socketDeployFactory; socketRoute = ISocketRoute(_socketGateway);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_socketGateway"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_socketDeployFactory"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "socketGateway",
                                        "",
                                        "BridgeImplBase"
                                    ],
                                    [
                                        "socketDeployFactory",
                                        "",
                                        "BridgeImplBase"
                                    ],
                                    [
                                        "socketRoute",
                                        "",
                                        "BridgeImplBase"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "socketGateway",
                                        "",
                                        "BridgeImplBase"
                                    ],
                                    [
                                        "socketDeployFactory",
                                        "",
                                        "BridgeImplBase"
                                    ],
                                    [
                                        "socketRoute",
                                        "",
                                        "BridgeImplBase"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "31bc2211856c3e3aa5f60b7bb624c94a"
                            }
                        ],
                        "rescueFunds": [
                            {
                                "visibility": "external",
                                "content": "function rescueFunds( address token, address userAddress, uint256 amount ) external isSocketGatewayOwner{ ERC20(token).safeTransfer(userAddress, amount);}",
                                "modifiers": [
                                    "isSocketGatewayOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "userAddress"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BridgeImplBase.isSocketGatewayOwner",
                                        "BridgeImplBase.ERC20"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "02e107ecb0c9ea6ada50044814046384"
                            }
                        ],
                        "rescueEther": [
                            {
                                "visibility": "external",
                                "content": "function rescueEther( address payable userAddress, uint256 amount ) external isSocketGatewayOwner{ userAddress.transfer(amount);}",
                                "modifiers": [
                                    "isSocketGatewayOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "address payable",
                                        "name": "userAddress"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "userAddress.transfer",
                                        "BridgeImplBase.isSocketGatewayOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "e5e97c022cce385ddc83284823e2fc84"
                            }
                        ],
                        "killme": [
                            {
                                "visibility": "external",
                                "content": "function killme() external isSocketDeployFactory{ selfdestruct(payable(msg.sender));}",
                                "modifiers": [
                                    "isSocketDeployFactory"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BridgeImplBase.isSocketDeployFactory",
                                        "BridgeImplBase.selfdestruct"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "6bfeae689aae3f966c3858ae3ce8d128"
                            }
                        ],
                        "bridgeAfterSwap": [
                            {
                                "visibility": "external",
                                "content": "function bridgeAfterSwap( uint256 amount, bytes calldata bridgeData ) external payable virtual;",
                                "modifiers": [
                                    "payable",
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "bridgeData"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": true,
                                "md5": "edc451cc088239c9a3213155ec8b8318"
                            }
                        ]
                    },
                    "modifiers": {
                        "isSocketGatewayOwner": {
                            "parameters": [],
                            "content": "modifier isSocketGatewayOwner(){ if (msg.sender != ISocketGateway(socketGateway).owner()){ revert OnlySocketGatewayOwner();} _;}",
                            "reads": [
                                [
                                    "socketGateway",
                                    "",
                                    "BridgeImplBase"
                                ]
                            ],
                            "writes": [],
                            "external_calls": {
                                "__set__": true,
                                "values": [
                                    "BridgeImplBase.ISocketGateway",
                                    "BridgeImplBase.OnlySocketGatewayOwner"
                                ]
                            },
                            "md5": "6aa94456738d60c2daad284eb4ea5c71"
                        },
                        "isSocketDeployFactory": {
                            "parameters": [],
                            "content": "modifier isSocketDeployFactory(){ if (msg.sender != socketDeployFactory){ revert OnlySocketDeployer();} _;}",
                            "reads": [
                                [
                                    "socketDeployFactory",
                                    "",
                                    "BridgeImplBase"
                                ]
                            ],
                            "writes": [],
                            "external_calls": {
                                "__set__": true,
                                "values": [
                                    "BridgeImplBase.OnlySocketDeployer"
                                ]
                            },
                            "md5": "d15527a663ef4e0be07e4787f91e7eef"
                        }
                    },
                    "structs": {},
                    "events": {
                        "SocketBridge": {
                            "event": "SocketBridge",
                            "content": "SocketBridge( uint256 amount, address token, uint256 toChainId, bytes32 bridgeName, address sender, address receiver, bytes32 metadata )"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "ERC20": "SafeTransferLib"
                    }
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "BridgeImplBase.isSocketGatewayOwner": "6aa94456738d60c2daad284eb4ea5c71",
                "userAddress.transfer": "106c99c210292ba876e75685ad2beb0c",
                "BridgeImplBase.isSocketDeployFactory": "d15527a663ef4e0be07e4787f91e7eef"
            },
            "md5": "192a4f1e78350486ba379761b683d8c2"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\across\\interfaces\\across.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\across\\interfaces\\across.sol",
            "filename": "across.sol",
            "imported_contracts": {},
            "contracts": {
                "SpokePool": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "deposit": [
                            {
                                "visibility": "external",
                                "content": "function deposit( address recipient, address originToken, uint256 amount, uint256 destinationChainId, int64 relayerFeePct, uint32 quoteTimestamp, bytes memory message, uint256 maxCount ) external payable;",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "recipient"
                                    },
                                    {
                                        "type": "address",
                                        "name": "originToken"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "destinationChainId"
                                    },
                                    {
                                        "type": "int64",
                                        "name": "relayerFeePct"
                                    },
                                    {
                                        "type": "uint32",
                                        "name": "quoteTimestamp"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "message"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "maxCount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": true,
                                "md5": "4a33f226c84a0018cc0db4eb148faf77"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "ca2071b23ec58f081889f11adcd29d4e"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\static\\RouteIdentifiers.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\static\\RouteIdentifiers.sol",
            "filename": "RouteIdentifiers.sol",
            "imported_contracts": {},
            "contracts": {},
            "state_variables": {
                "ACROSS": {
                    "type": "bytes32",
                    "visibility": "internal",
                    "is_constant": true,
                    "is_immutable": false,
                    "is_override": false,
                    "initial_value": "keccak256(\"Across\")",
                    "content": "bytes32 constant ACROSS = keccak256(\"Across\");"
                },
                "ANYSWAP": {
                    "type": "bytes32",
                    "visibility": "internal",
                    "is_constant": true,
                    "is_immutable": false,
                    "is_override": false,
                    "initial_value": "keccak256(\"Anyswap\")",
                    "content": "bytes32 constant ANYSWAP = keccak256(\"Anyswap\");"
                },
                "CBRIDGE": {
                    "type": "bytes32",
                    "visibility": "internal",
                    "is_constant": true,
                    "is_immutable": false,
                    "is_override": false,
                    "initial_value": "keccak256(\"CBridge\")",
                    "content": "bytes32 constant CBRIDGE = keccak256(\"CBridge\");"
                },
                "HOP": {
                    "type": "bytes32",
                    "visibility": "internal",
                    "is_constant": true,
                    "is_immutable": false,
                    "is_override": false,
                    "initial_value": "keccak256(\"Hop\")",
                    "content": "bytes32 constant HOP = keccak256(\"Hop\");"
                },
                "HYPHEN": {
                    "type": "bytes32",
                    "visibility": "internal",
                    "is_constant": true,
                    "is_immutable": false,
                    "is_override": false,
                    "initial_value": "keccak256(\"Hyphen\")",
                    "content": "bytes32 constant HYPHEN = keccak256(\"Hyphen\");"
                },
                "NATIVE_OPTIMISM": {
                    "type": "bytes32",
                    "visibility": "internal",
                    "is_constant": true,
                    "is_immutable": false,
                    "is_override": false,
                    "initial_value": "keccak256(\"NativeOptimism\")",
                    "content": "bytes32 constant NATIVE_OPTIMISM = keccak256(\"NativeOptimism\");"
                },
                "NATIVE_ARBITRUM": {
                    "type": "bytes32",
                    "visibility": "internal",
                    "is_constant": true,
                    "is_immutable": false,
                    "is_override": false,
                    "initial_value": "keccak256(\"NativeArbitrum\")",
                    "content": "bytes32 constant NATIVE_ARBITRUM = keccak256(\"NativeArbitrum\");"
                },
                "NATIVE_POLYGON": {
                    "type": "bytes32",
                    "visibility": "internal",
                    "is_constant": true,
                    "is_immutable": false,
                    "is_override": false,
                    "initial_value": "keccak256(\"NativePolygon\")",
                    "content": "bytes32 constant NATIVE_POLYGON = keccak256(\"NativePolygon\");"
                },
                "REFUEL": {
                    "type": "bytes32",
                    "visibility": "internal",
                    "is_constant": true,
                    "is_immutable": false,
                    "is_override": false,
                    "initial_value": "keccak256(\"Refuel\")",
                    "content": "bytes32 constant REFUEL = keccak256(\"Refuel\");"
                },
                "STARGATE": {
                    "type": "bytes32",
                    "visibility": "internal",
                    "is_constant": true,
                    "is_immutable": false,
                    "is_override": false,
                    "initial_value": "keccak256(\"Stargate\")",
                    "content": "bytes32 constant STARGATE = keccak256(\"Stargate\");"
                },
                "ONEINCH": {
                    "type": "bytes32",
                    "visibility": "internal",
                    "is_constant": true,
                    "is_immutable": false,
                    "is_override": false,
                    "initial_value": "keccak256(\"OneInch\")",
                    "content": "bytes32 constant ONEINCH = keccak256(\"OneInch\");"
                },
                "ZEROX": {
                    "type": "bytes32",
                    "visibility": "internal",
                    "is_constant": true,
                    "is_immutable": false,
                    "is_override": false,
                    "initial_value": "keccak256(\"Zerox\")",
                    "content": "bytes32 constant ZEROX = keccak256(\"Zerox\");"
                },
                "RAINBOW": {
                    "type": "bytes32",
                    "visibility": "internal",
                    "is_constant": true,
                    "is_immutable": false,
                    "is_override": false,
                    "initial_value": "keccak256(\"Rainbow\")",
                    "content": "bytes32 constant RAINBOW = keccak256(\"Rainbow\");"
                },
                "CCTP": {
                    "type": "bytes32",
                    "visibility": "internal",
                    "is_constant": true,
                    "is_immutable": false,
                    "is_override": false,
                    "initial_value": "keccak256(\"cctp\")",
                    "content": "bytes32 constant CCTP = keccak256(\"cctp\");"
                },
                "CONNEXT": {
                    "type": "bytes32",
                    "visibility": "internal",
                    "is_constant": true,
                    "is_immutable": false,
                    "is_override": false,
                    "initial_value": "keccak256(\"Connext\")",
                    "content": "bytes32 constant CONNEXT = keccak256(\"Connext\");"
                },
                "SYNAPSE": {
                    "type": "bytes32",
                    "visibility": "internal",
                    "is_constant": true,
                    "is_immutable": false,
                    "is_override": false,
                    "initial_value": "keccak256(\"Synapse\")",
                    "content": "bytes32 constant SYNAPSE = keccak256(\"Synapse\");"
                },
                "ZKSYNC": {
                    "type": "bytes32",
                    "visibility": "internal",
                    "is_constant": true,
                    "is_immutable": false,
                    "is_override": false,
                    "initial_value": "keccak256(\"ZkSync\")",
                    "content": "bytes32 constant ZKSYNC = keccak256(\"ZkSync\");"
                },
                "SYMBIOSIS": {
                    "type": "bytes32",
                    "visibility": "internal",
                    "is_constant": true,
                    "is_immutable": false,
                    "is_override": false,
                    "initial_value": "keccak256(\"Symbiosis\")",
                    "content": "bytes32 constant SYMBIOSIS = keccak256(\"Symbiosis\");"
                },
                "GNOSIS_NATIVE_BRIDGE": {
                    "type": "bytes32",
                    "visibility": "internal",
                    "is_constant": true,
                    "is_immutable": false,
                    "is_override": false,
                    "initial_value": "keccak256(\"NativeGnosis\")",
                    "content": "bytes32 constant GNOSIS_NATIVE_BRIDGE = keccak256(\"NativeGnosis\");"
                }
            },
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "e8cbf7ac30bfd0d086efe9afd5fe86f7"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\across\\Across.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\across\\Across.sol",
            "filename": "Across.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\across\\interfaces\\across.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\utils\\SafeTransferLib.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "SafeTransferLib": {
                            "original_name": "SafeTransferLib",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\tokens\\ERC20.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "ERC20": {
                            "original_name": "ERC20",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\static\\RouteIdentifiers.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "ACROSS": {
                            "original_name": "ACROSS",
                            "type": {
                                "__CT__": true,
                                "value": 18
                            }
                        }
                    }
                }
            },
            "contracts": {
                "AcrossImpl": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "BridgeImplBase"
                    ],
                    "state_variables": {
                        "AcrossIdentifier": {
                            "type": "bytes32",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "ACROSS",
                            "content": "bytes32 public immutable AcrossIdentifier = ACROSS;"
                        },
                        "ACROSS_ERC20_EXTERNAL_BRIDGE_FUNCTION_SELECTOR": {
                            "type": "bytes4",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "bytes4( keccak256( \"bridgeERC20To(uint256, uint256, bytes32, address, address, uint32, int64)\" ) )",
                            "content": "bytes4 public immutable ACROSS_ERC20_EXTERNAL_BRIDGE_FUNCTION_SELECTOR = bytes4( keccak256( \"bridgeERC20To(uint256, uint256, bytes32, address, address, uint32, int64)\" ) );"
                        },
                        "ACROSS_NATIVE_EXTERNAL_BRIDGE_FUNCTION_SELECTOR": {
                            "type": "bytes4",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "bytes4( keccak256( \"bridgeNativeTo(uint256, uint256, bytes32, address, uint32, int64)\" ) )",
                            "content": "bytes4 public immutable ACROSS_NATIVE_EXTERNAL_BRIDGE_FUNCTION_SELECTOR = bytes4( keccak256( \"bridgeNativeTo(uint256, uint256, bytes32, address, uint32, int64)\" ) );"
                        },
                        "ACROSS_SWAP_BRIDGE_SELECTOR": {
                            "type": "bytes4",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "bytes4( keccak256( \"swapAndBridge(uint32, bytes, (uint256, address, uint32, int64, bytes32))\" ) )",
                            "content": "bytes4 public immutable ACROSS_SWAP_BRIDGE_SELECTOR = bytes4( keccak256( \"swapAndBridge(uint32, bytes, (uint256, address, uint32, int64, bytes32))\" ) );"
                        },
                        "spokePool": {
                            "type": "SpokePool",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": null,
                            "content": "SpokePool public immutable spokePool;"
                        },
                        "spokePoolAddress": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public immutable spokePoolAddress;"
                        },
                        "WETH": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public immutable WETH;"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor ( address _spokePool, address _wethAddress, address _socketGateway, address _socketDeployFactory ) BridgeImplBase(_socketGateway, _socketDeployFactory){ spokePool = SpokePool(_spokePool); spokePoolAddress = _spokePool; WETH = _wethAddress;}",
                                "modifiers": [
                                    "BridgeImplBase(_socketGateway, _socketDeployFactory)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_spokePool"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_wethAddress"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_socketGateway"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_socketDeployFactory"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "spokePool",
                                        "",
                                        "AcrossImpl"
                                    ],
                                    [
                                        "spokePoolAddress",
                                        "",
                                        "AcrossImpl"
                                    ],
                                    [
                                        "WETH",
                                        "",
                                        "AcrossImpl"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "spokePool",
                                        "",
                                        "AcrossImpl"
                                    ],
                                    [
                                        "spokePoolAddress",
                                        "",
                                        "AcrossImpl"
                                    ],
                                    [
                                        "WETH",
                                        "",
                                        "AcrossImpl"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "8414a822158333e3194b620aa94369c0"
                            }
                        ],
                        "bridgeAfterSwap": [
                            {
                                "visibility": "external",
                                "content": "function bridgeAfterSwap( uint256 amount, bytes calldata bridgeData ) external payable override{ AcrossBridgeData memory acrossBridgeData = abi.decode( bridgeData, (AcrossBridgeData) ); if (acrossBridgeData.token == NATIVE_TOKEN_ADDRESS){ spokePool.deposit{ value: amount} ( acrossBridgeData.receiverAddress, WETH, amount, acrossBridgeData.toChainId, acrossBridgeData.relayerFeePct, acrossBridgeData.quoteTimestamp, \"\", UINT256_MAX );} else{ if ( amount > ERC20(acrossBridgeData.token).allowance( address(this), address(spokePoolAddress) ) ){ ERC20(acrossBridgeData.token).safeApprove( address(spokePoolAddress), UINT256_MAX );} spokePool.deposit( acrossBridgeData.receiverAddress, acrossBridgeData.token, amount, acrossBridgeData.toChainId, acrossBridgeData.relayerFeePct, acrossBridgeData.quoteTimestamp, \"\", UINT256_MAX );} emit SocketBridge( amount, acrossBridgeData.token, acrossBridgeData.toChainId, AcrossIdentifier, msg.sender, acrossBridgeData.receiverAddress, acrossBridgeData.metadata );}",
                                "modifiers": [
                                    "payable",
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "bridgeData"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "AcrossIdentifier",
                                        "",
                                        "AcrossImpl"
                                    ],
                                    [
                                        "spokePool",
                                        "",
                                        "AcrossImpl"
                                    ],
                                    [
                                        "spokePoolAddress",
                                        "",
                                        "AcrossImpl"
                                    ],
                                    [
                                        "WETH",
                                        "",
                                        "AcrossImpl"
                                    ],
                                    [
                                        "NATIVE_TOKEN_ADDRESS",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ],
                                    [
                                        "allowance",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\tokens\\ERC20.sol",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AcrossImpl.ERC20",
                                        "SpokePool.deposit",
                                        "AcrossImpl.SocketBridge"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "6009cf94710cbcfce422916931620871"
                            }
                        ],
                        "swapAndBridge": [
                            {
                                "visibility": "external",
                                "content": "function swapAndBridge( uint32 swapId, bytes calldata swapData, AcrossBridgeDataNoToken calldata acrossBridgeData ) external payable{ (bool success, bytes memory result) = socketRoute .getRoute(swapId) .delegatecall(swapData); if (!success){ assembly{ revert(add(result, 32), mload(result))}} (uint256 bridgeAmount, address token) = abi.decode( result, (uint256, address) ); if (token == NATIVE_TOKEN_ADDRESS){ spokePool.deposit{ value: bridgeAmount} ( acrossBridgeData.receiverAddress, WETH, bridgeAmount, acrossBridgeData.toChainId, acrossBridgeData.relayerFeePct, acrossBridgeData.quoteTimestamp, \"\", UINT256_MAX );} else{ if ( bridgeAmount > ERC20(token).allowance(address(this), address(spokePoolAddress)) ){ ERC20(token).safeApprove( address(spokePoolAddress), UINT256_MAX );} spokePool.deposit( acrossBridgeData.receiverAddress, token, bridgeAmount, acrossBridgeData.toChainId, acrossBridgeData.relayerFeePct, acrossBridgeData.quoteTimestamp, \"\", UINT256_MAX );} emit SocketBridge( bridgeAmount, token, acrossBridgeData.toChainId, AcrossIdentifier, msg.sender, acrossBridgeData.receiverAddress, acrossBridgeData.metadata );}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint32",
                                        "name": "swapId"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "swapData"
                                    },
                                    {
                                        "type": "AcrossBridgeDataNoToken calldata",
                                        "name": "acrossBridgeData"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "AcrossIdentifier",
                                        "",
                                        "AcrossImpl"
                                    ],
                                    [
                                        "spokePool",
                                        "",
                                        "AcrossImpl"
                                    ],
                                    [
                                        "spokePoolAddress",
                                        "",
                                        "AcrossImpl"
                                    ],
                                    [
                                        "WETH",
                                        "",
                                        "AcrossImpl"
                                    ],
                                    [
                                        "NATIVE_TOKEN_ADDRESS",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ],
                                    [
                                        "socketRoute",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ],
                                    [
                                        "allowance",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\tokens\\ERC20.sol",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AcrossImpl.ERC20",
                                        "SpokePool.deposit",
                                        "socketRoute.getRoute",
                                        "AcrossImpl.SocketBridge"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "4e5a8d67e72d3d8b07d815b3f714a95f"
                            }
                        ],
                        "bridgeERC20To": [
                            {
                                "visibility": "external",
                                "content": "function bridgeERC20To( uint256 amount, uint256 toChainId, bytes32 metadata, address receiverAddress, address token, uint32 quoteTimestamp, int64 relayerFeePct ) external payable{ ERC20 tokenInstance = ERC20(token); tokenInstance.safeTransferFrom(msg.sender, socketGateway, amount); if ( amount > ERC20(token).allowance(address(this), address(spokePoolAddress)) ){ ERC20(token).safeApprove(address(spokePoolAddress), UINT256_MAX);} spokePool.deposit( receiverAddress, address(token), amount, toChainId, relayerFeePct, quoteTimestamp, \"\", UINT256_MAX ); emit SocketBridge( amount, token, toChainId, AcrossIdentifier, msg.sender, receiverAddress, metadata );}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "toChainId"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "metadata"
                                    },
                                    {
                                        "type": "address",
                                        "name": "receiverAddress"
                                    },
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "uint32",
                                        "name": "quoteTimestamp"
                                    },
                                    {
                                        "type": "int64",
                                        "name": "relayerFeePct"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "AcrossIdentifier",
                                        "",
                                        "AcrossImpl"
                                    ],
                                    [
                                        "spokePool",
                                        "",
                                        "AcrossImpl"
                                    ],
                                    [
                                        "spokePoolAddress",
                                        "",
                                        "AcrossImpl"
                                    ],
                                    [
                                        "socketGateway",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ],
                                    [
                                        "allowance",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\tokens\\ERC20.sol",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20.safeTransferFrom",
                                        "AcrossImpl.ERC20",
                                        "SpokePool.deposit",
                                        "AcrossImpl.SocketBridge"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "b04a8da91d2281bb7af2a27f5b64f051"
                            }
                        ],
                        "bridgeNativeTo": [
                            {
                                "visibility": "external",
                                "content": "function bridgeNativeTo( uint256 amount, uint256 toChainId, bytes32 metadata, address receiverAddress, uint32 quoteTimestamp, int64 relayerFeePct ) external payable{ spokePool.deposit{ value: amount} ( receiverAddress, WETH, amount, toChainId, relayerFeePct, quoteTimestamp, \"\", UINT256_MAX ); emit SocketBridge( amount, NATIVE_TOKEN_ADDRESS, toChainId, AcrossIdentifier, msg.sender, receiverAddress, metadata );}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "toChainId"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "metadata"
                                    },
                                    {
                                        "type": "address",
                                        "name": "receiverAddress"
                                    },
                                    {
                                        "type": "uint32",
                                        "name": "quoteTimestamp"
                                    },
                                    {
                                        "type": "int64",
                                        "name": "relayerFeePct"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "AcrossIdentifier",
                                        "",
                                        "AcrossImpl"
                                    ],
                                    [
                                        "spokePool",
                                        "",
                                        "AcrossImpl"
                                    ],
                                    [
                                        "WETH",
                                        "",
                                        "AcrossImpl"
                                    ],
                                    [
                                        "NATIVE_TOKEN_ADDRESS",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AcrossImpl.SocketBridge"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "4c4b695c50696fe13af52ff252fa9ca9"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {
                        "AcrossBridgeDataNoToken": {
                            "content": "AcrossBridgeDataNoToken{ uint256 toChainId; address receiverAddress; uint32 quoteTimestamp; int64 relayerFeePct; bytes32 metadata;}"
                        },
                        "AcrossBridgeData": {
                            "content": "AcrossBridgeData{ uint256 toChainId; address receiverAddress; address token; uint32 quoteTimestamp; int64 relayerFeePct; bytes32 metadata;}"
                        }
                    },
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "ERC20": "SafeTransferLib"
                    }
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "SpokePool.deposit": "4a33f226c84a0018cc0db4eb148faf77",
                "ERC20.safeTransferFrom": "f59cf721ba6479ab2b5aa8ba2685eff0"
            },
            "md5": "3edc39bf1f0ff01a960f6b54d9f2a17a"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\anyswap-router-v4\\l1\\Anyswap.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\anyswap-router-v4\\l1\\Anyswap.sol",
            "filename": "Anyswap.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\utils\\SafeTransferLib.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "SafeTransferLib": {
                            "original_name": "SafeTransferLib",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\tokens\\ERC20.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "ERC20": {
                            "original_name": "ERC20",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "BridgeImplBase": {
                            "original_name": "BridgeImplBase",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\static\\RouteIdentifiers.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "ANYSWAP": {
                            "original_name": "ANYSWAP",
                            "type": {
                                "__CT__": true,
                                "value": 18
                            }
                        }
                    }
                }
            },
            "contracts": {
                "AnyswapV4Router": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "anySwapOutUnderlying": [
                            {
                                "visibility": "external",
                                "content": "function anySwapOutUnderlying( address token, address to, uint256 amount, uint256 toChainID ) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "toChainID"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "aa14fcb54ca5f49ead9c1dfb8b67b621"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                },
                "AnyswapImplL1": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "BridgeImplBase"
                    ],
                    "state_variables": {
                        "AnyswapIdentifier": {
                            "type": "bytes32",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "ANYSWAP",
                            "content": "bytes32 public immutable AnyswapIdentifier = ANYSWAP;"
                        },
                        "ANYSWAP_L1_ERC20_EXTERNAL_BRIDGE_FUNCTION_SELECTOR": {
                            "type": "bytes4",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "bytes4( keccak256( \"bridgeERC20To(uint256, uint256, bytes32, address, address, address)\" ) )",
                            "content": "bytes4 public immutable ANYSWAP_L1_ERC20_EXTERNAL_BRIDGE_FUNCTION_SELECTOR = bytes4( keccak256( \"bridgeERC20To(uint256, uint256, bytes32, address, address, address)\" ) );"
                        },
                        "ANYSWAP_SWAP_BRIDGE_SELECTOR": {
                            "type": "bytes4",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "bytes4( keccak256( \"swapAndBridge(uint32, bytes, (uint256, address, address, bytes32))\" ) )",
                            "content": "bytes4 public immutable ANYSWAP_SWAP_BRIDGE_SELECTOR = bytes4( keccak256( \"swapAndBridge(uint32, bytes, (uint256, address, address, bytes32))\" ) );"
                        },
                        "router": {
                            "type": "AnyswapV4Router",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": null,
                            "content": "AnyswapV4Router public immutable router;"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor ( address _router, address _socketGateway, address _socketDeployFactory ) BridgeImplBase(_socketGateway, _socketDeployFactory){ router = AnyswapV4Router(_router);}",
                                "modifiers": [
                                    "BridgeImplBase(_socketGateway, _socketDeployFactory)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_router"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_socketGateway"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_socketDeployFactory"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "router",
                                        "",
                                        "AnyswapImplL1"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "router",
                                        "",
                                        "AnyswapImplL1"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "53d15853ecb9875cfc5d51d994780025"
                            }
                        ],
                        "bridgeAfterSwap": [
                            {
                                "visibility": "external",
                                "content": "function bridgeAfterSwap( uint256 amount, bytes calldata bridgeData ) external payable override{ AnyswapBridgeData memory anyswapBridgeData = abi.decode( bridgeData, (AnyswapBridgeData) ); ERC20(anyswapBridgeData.token).safeApprove(address(router), amount); router.anySwapOutUnderlying( anyswapBridgeData.wrapperTokenAddress, anyswapBridgeData.receiverAddress, amount, anyswapBridgeData.toChainId ); emit SocketBridge( amount, anyswapBridgeData.token, anyswapBridgeData.toChainId, AnyswapIdentifier, msg.sender, anyswapBridgeData.receiverAddress, anyswapBridgeData.metadata );}",
                                "modifiers": [
                                    "payable",
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "bridgeData"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "AnyswapIdentifier",
                                        "",
                                        "AnyswapImplL1"
                                    ],
                                    [
                                        "router",
                                        "",
                                        "AnyswapImplL1"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyswapV4Router.anySwapOutUnderlying",
                                        "AnyswapImplL1.ERC20",
                                        "AnyswapImplL1.SocketBridge"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "17816fc07bc07b9ef54a129a4d0c8f08"
                            }
                        ],
                        "swapAndBridge": [
                            {
                                "visibility": "external",
                                "content": "function swapAndBridge( uint32 swapId, bytes calldata swapData, AnyswapBridgeDataNoToken calldata anyswapBridgeData ) external payable{ (bool success, bytes memory result) = socketRoute .getRoute(swapId) .delegatecall(swapData); if (!success){ assembly{ revert(add(result, 32), mload(result))}} (uint256 bridgeAmount, address token) = abi.decode( result, (uint256, address) ); ERC20(token).safeApprove(address(router), bridgeAmount); router.anySwapOutUnderlying( anyswapBridgeData.wrapperTokenAddress, anyswapBridgeData.receiverAddress, bridgeAmount, anyswapBridgeData.toChainId ); emit SocketBridge( bridgeAmount, token, anyswapBridgeData.toChainId, AnyswapIdentifier, msg.sender, anyswapBridgeData.receiverAddress, anyswapBridgeData.metadata );}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint32",
                                        "name": "swapId"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "swapData"
                                    },
                                    {
                                        "type": "AnyswapBridgeDataNoToken calldata",
                                        "name": "anyswapBridgeData"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "AnyswapIdentifier",
                                        "",
                                        "AnyswapImplL1"
                                    ],
                                    [
                                        "router",
                                        "",
                                        "AnyswapImplL1"
                                    ],
                                    [
                                        "socketRoute",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyswapImplL1.ERC20",
                                        "AnyswapV4Router.anySwapOutUnderlying",
                                        "AnyswapImplL1.SocketBridge",
                                        "socketRoute.getRoute"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "bca7a26151bb86ab195d212a21e826c0"
                            }
                        ],
                        "bridgeERC20To": [
                            {
                                "visibility": "external",
                                "content": "function bridgeERC20To( uint256 amount, uint256 toChainId, bytes32 metadata, address receiverAddress, address token, address wrapperTokenAddress ) external payable{ ERC20 tokenInstance = ERC20(token); tokenInstance.safeTransferFrom(msg.sender, socketGateway, amount); tokenInstance.safeApprove(address(router), amount); router.anySwapOutUnderlying( wrapperTokenAddress, receiverAddress, amount, toChainId ); emit SocketBridge( amount, token, toChainId, AnyswapIdentifier, msg.sender, receiverAddress, metadata );}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "toChainId"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "metadata"
                                    },
                                    {
                                        "type": "address",
                                        "name": "receiverAddress"
                                    },
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "wrapperTokenAddress"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "AnyswapIdentifier",
                                        "",
                                        "AnyswapImplL1"
                                    ],
                                    [
                                        "router",
                                        "",
                                        "AnyswapImplL1"
                                    ],
                                    [
                                        "socketGateway",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyswapImplL1.ERC20",
                                        "AnyswapImplL1.SocketBridge",
                                        "ERC20.safeTransferFrom",
                                        "ERC20.safeApprove",
                                        "AnyswapV4Router.anySwapOutUnderlying"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "e136c383bcf6dae05777aaa24939990e"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {
                        "AnyswapBridgeDataNoToken": {
                            "content": "AnyswapBridgeDataNoToken{ uint256 toChainId; address receiverAddress; address wrapperTokenAddress; bytes32 metadata;}"
                        },
                        "AnyswapBridgeData": {
                            "content": "AnyswapBridgeData{ uint256 toChainId; address receiverAddress; address wrapperTokenAddress; address token; bytes32 metadata;}"
                        }
                    },
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "ERC20": "SafeTransferLib"
                    }
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "AnyswapV4Router.anySwapOutUnderlying": "aa14fcb54ca5f49ead9c1dfb8b67b621",
                "ERC20.safeTransferFrom": "f59cf721ba6479ab2b5aa8ba2685eff0",
                "ERC20.safeApprove": "f339137c724d3793fd28f64cd9b5d9bb"
            },
            "md5": "4e90b39b30531916c8d3436920aa00b4"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\anyswap-router-v4\\l2\\Anyswap.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\anyswap-router-v4\\l2\\Anyswap.sol",
            "filename": "Anyswap.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\utils\\SafeTransferLib.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "SafeTransferLib": {
                            "original_name": "SafeTransferLib",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\tokens\\ERC20.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "ERC20": {
                            "original_name": "ERC20",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "BridgeImplBase": {
                            "original_name": "BridgeImplBase",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\static\\RouteIdentifiers.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "ANYSWAP": {
                            "original_name": "ANYSWAP",
                            "type": {
                                "__CT__": true,
                                "value": 18
                            }
                        }
                    }
                }
            },
            "contracts": {
                "AnyswapV4Router": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "anySwapOutUnderlying": [
                            {
                                "visibility": "external",
                                "content": "function anySwapOutUnderlying( address token, address to, uint256 amount, uint256 toChainID ) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "toChainID"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "aa14fcb54ca5f49ead9c1dfb8b67b621"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                },
                "AnyswapL2Impl": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "BridgeImplBase"
                    ],
                    "state_variables": {
                        "AnyswapIdentifier": {
                            "type": "bytes32",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "ANYSWAP",
                            "content": "bytes32 public immutable AnyswapIdentifier = ANYSWAP;"
                        },
                        "ANYSWAP_L2_ERC20_EXTERNAL_BRIDGE_FUNCTION_SELECTOR": {
                            "type": "bytes4",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "bytes4( keccak256( \"bridgeERC20To(uint256, uint256, bytes32, address, address, address)\" ) )",
                            "content": "bytes4 public immutable ANYSWAP_L2_ERC20_EXTERNAL_BRIDGE_FUNCTION_SELECTOR = bytes4( keccak256( \"bridgeERC20To(uint256, uint256, bytes32, address, address, address)\" ) );"
                        },
                        "ANYSWAP_SWAP_BRIDGE_SELECTOR": {
                            "type": "bytes4",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "bytes4( keccak256( \"swapAndBridge(uint32, bytes, (uint256, address, address, bytes32))\" ) )",
                            "content": "bytes4 public immutable ANYSWAP_SWAP_BRIDGE_SELECTOR = bytes4( keccak256( \"swapAndBridge(uint32, bytes, (uint256, address, address, bytes32))\" ) );"
                        },
                        "router": {
                            "type": "AnyswapV4Router",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": null,
                            "content": "AnyswapV4Router public immutable router;"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor ( address _router, address _socketGateway, address _socketDeployFactory ) BridgeImplBase(_socketGateway, _socketDeployFactory){ router = AnyswapV4Router(_router);}",
                                "modifiers": [
                                    "BridgeImplBase(_socketGateway, _socketDeployFactory)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_router"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_socketGateway"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_socketDeployFactory"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "router",
                                        "",
                                        "AnyswapL2Impl"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "router",
                                        "",
                                        "AnyswapL2Impl"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "53d15853ecb9875cfc5d51d994780025"
                            }
                        ],
                        "bridgeAfterSwap": [
                            {
                                "visibility": "external",
                                "content": "function bridgeAfterSwap( uint256 amount, bytes calldata bridgeData ) external payable override{ AnyswapBridgeData memory anyswapBridgeData = abi.decode( bridgeData, (AnyswapBridgeData) ); router.anySwapOutUnderlying( anyswapBridgeData.wrapperTokenAddress, anyswapBridgeData.receiverAddress, amount, anyswapBridgeData.toChainId ); emit SocketBridge( amount, anyswapBridgeData.token, anyswapBridgeData.toChainId, AnyswapIdentifier, msg.sender, anyswapBridgeData.receiverAddress, anyswapBridgeData.metadata );}",
                                "modifiers": [
                                    "payable",
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "bridgeData"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "AnyswapIdentifier",
                                        "",
                                        "AnyswapL2Impl"
                                    ],
                                    [
                                        "router",
                                        "",
                                        "AnyswapL2Impl"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyswapV4Router.anySwapOutUnderlying",
                                        "AnyswapL2Impl.SocketBridge"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "4125d2e8e64d49645ee3798601db9e6e"
                            }
                        ],
                        "swapAndBridge": [
                            {
                                "visibility": "external",
                                "content": "function swapAndBridge( uint32 swapId, bytes calldata swapData, AnyswapBridgeDataNoToken calldata anyswapBridgeData ) external payable{ (bool success, bytes memory result) = socketRoute .getRoute(swapId) .delegatecall(swapData); if (!success){ assembly{ revert(add(result, 32), mload(result))}} (uint256 bridgeAmount, address token) = abi.decode( result, (uint256, address) ); router.anySwapOutUnderlying( anyswapBridgeData.wrapperTokenAddress, anyswapBridgeData.receiverAddress, bridgeAmount, anyswapBridgeData.toChainId ); emit SocketBridge( bridgeAmount, token, anyswapBridgeData.toChainId, AnyswapIdentifier, msg.sender, anyswapBridgeData.receiverAddress, anyswapBridgeData.metadata );}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint32",
                                        "name": "swapId"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "swapData"
                                    },
                                    {
                                        "type": "AnyswapBridgeDataNoToken calldata",
                                        "name": "anyswapBridgeData"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "AnyswapIdentifier",
                                        "",
                                        "AnyswapL2Impl"
                                    ],
                                    [
                                        "router",
                                        "",
                                        "AnyswapL2Impl"
                                    ],
                                    [
                                        "socketRoute",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyswapL2Impl.SocketBridge",
                                        "AnyswapV4Router.anySwapOutUnderlying",
                                        "socketRoute.getRoute"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "c60734af69ef6d3c6d8ff91508aa1569"
                            }
                        ],
                        "bridgeERC20To": [
                            {
                                "visibility": "external",
                                "content": "function bridgeERC20To( uint256 amount, uint256 toChainId, bytes32 metadata, address receiverAddress, address token, address wrapperTokenAddress ) external payable{ ERC20 tokenInstance = ERC20(token); tokenInstance.safeTransferFrom(msg.sender, socketGateway, amount); router.anySwapOutUnderlying( wrapperTokenAddress, receiverAddress, amount, toChainId ); emit SocketBridge( amount, token, toChainId, AnyswapIdentifier, msg.sender, receiverAddress, metadata );}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "toChainId"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "metadata"
                                    },
                                    {
                                        "type": "address",
                                        "name": "receiverAddress"
                                    },
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "wrapperTokenAddress"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "AnyswapIdentifier",
                                        "",
                                        "AnyswapL2Impl"
                                    ],
                                    [
                                        "router",
                                        "",
                                        "AnyswapL2Impl"
                                    ],
                                    [
                                        "socketGateway",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyswapL2Impl.ERC20",
                                        "ERC20.safeTransferFrom",
                                        "AnyswapV4Router.anySwapOutUnderlying",
                                        "AnyswapL2Impl.SocketBridge"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "68f6c25321b6151d238902e4cf1f8469"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {
                        "AnyswapBridgeDataNoToken": {
                            "content": "AnyswapBridgeDataNoToken{ uint256 toChainId; address receiverAddress; address wrapperTokenAddress; bytes32 metadata;}"
                        },
                        "AnyswapBridgeData": {
                            "content": "AnyswapBridgeData{ uint256 toChainId; address receiverAddress; address wrapperTokenAddress; address token; bytes32 metadata;}"
                        }
                    },
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "ERC20": "SafeTransferLib"
                    }
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "AnyswapV4Router.anySwapOutUnderlying": "aa14fcb54ca5f49ead9c1dfb8b67b621",
                "ERC20.safeTransferFrom": "f59cf721ba6479ab2b5aa8ba2685eff0"
            },
            "md5": "82990743d67965707945595dbf487d2b"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\anyswap-router-v6\\AnyswapV6.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\anyswap-router-v6\\AnyswapV6.sol",
            "filename": "AnyswapV6.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\utils\\SafeTransferLib.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "SafeTransferLib": {
                            "original_name": "SafeTransferLib",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\tokens\\ERC20.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "ERC20": {
                            "original_name": "ERC20",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "BridgeImplBase": {
                            "original_name": "BridgeImplBase",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\static\\RouteIdentifiers.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "ANYSWAP": {
                            "original_name": "ANYSWAP",
                            "type": {
                                "__CT__": true,
                                "value": 18
                            }
                        }
                    }
                }
            },
            "contracts": {
                "AnyswapV6Router": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "anySwapOutUnderlying": [
                            {
                                "visibility": "external",
                                "content": "function anySwapOutUnderlying( address token, address to, uint256 amount, uint256 toChainID ) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "toChainID"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "aa14fcb54ca5f49ead9c1dfb8b67b621"
                            }
                        ],
                        "anySwapOutNative": [
                            {
                                "visibility": "external",
                                "content": "function anySwapOutNative( address token, address to, uint256 toChainID ) external payable;",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "toChainID"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": true,
                                "md5": "2e9529288d1c2a4d72127af0652946a1"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                },
                "AnyswapV6L2Impl": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "BridgeImplBase"
                    ],
                    "state_variables": {
                        "AnyswapIdentifier": {
                            "type": "bytes32",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "ANYSWAP",
                            "content": "bytes32 public immutable AnyswapIdentifier = ANYSWAP;"
                        },
                        "ANYSWAP_L2_ERC20_EXTERNAL_BRIDGE_FUNCTION_SELECTOR": {
                            "type": "bytes4",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "bytes4( keccak256( \"bridgeERC20To(uint256, uint256, bytes32, address, address, address)\" ) )",
                            "content": "bytes4 public immutable ANYSWAP_L2_ERC20_EXTERNAL_BRIDGE_FUNCTION_SELECTOR = bytes4( keccak256( \"bridgeERC20To(uint256, uint256, bytes32, address, address, address)\" ) );"
                        },
                        "ANYSWAP_SWAP_BRIDGE_SELECTOR": {
                            "type": "bytes4",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "bytes4( keccak256( \"swapAndBridge(uint32, bytes, (uint256, address, address, bytes32))\" ) )",
                            "content": "bytes4 public immutable ANYSWAP_SWAP_BRIDGE_SELECTOR = bytes4( keccak256( \"swapAndBridge(uint32, bytes, (uint256, address, address, bytes32))\" ) );"
                        },
                        "router": {
                            "type": "AnyswapV6Router",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": null,
                            "content": "AnyswapV6Router public immutable router;"
                        },
                        "nonevm_router": {
                            "type": "AnyswapV6Router",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": null,
                            "content": "AnyswapV6Router public immutable nonevm_router;"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor ( address _router, address _nonevm_router, address _socketGateway, address _socketDeployFactory ) BridgeImplBase(_socketGateway, _socketDeployFactory){ router = AnyswapV6Router(_router); nonevm_router = AnyswapV6Router(_nonevm_router);}",
                                "modifiers": [
                                    "BridgeImplBase(_socketGateway, _socketDeployFactory)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_router"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_nonevm_router"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_socketGateway"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_socketDeployFactory"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "router",
                                        "",
                                        "AnyswapV6L2Impl"
                                    ],
                                    [
                                        "nonevm_router",
                                        "",
                                        "AnyswapV6L2Impl"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "router",
                                        "",
                                        "AnyswapV6L2Impl"
                                    ],
                                    [
                                        "nonevm_router",
                                        "",
                                        "AnyswapV6L2Impl"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "730b88cc445ad6242f882f2df7f1da98"
                            }
                        ],
                        "bridgeAfterSwap": [
                            {
                                "visibility": "external",
                                "content": "function bridgeAfterSwap( uint256 amount, bytes calldata bridgeData ) external payable override{ AnyswapBridgeData memory anyswapBridgeData = abi.decode( bridgeData, (AnyswapBridgeData) ); AnyswapV6Router _router = anyswapBridgeData.isEvm ? router : nonevm_router; if (anyswapBridgeData.token == NATIVE_TOKEN_ADDRESS){ _router.anySwapOutNative{ value: amount} ( anyswapBridgeData.wrapperTokenAddress, anyswapBridgeData.receiverAddress, anyswapBridgeData.toChainId );} else{ _router.anySwapOutUnderlying( anyswapBridgeData.wrapperTokenAddress, anyswapBridgeData.receiverAddress, amount, anyswapBridgeData.toChainId );} emit SocketBridge( amount, anyswapBridgeData.token, anyswapBridgeData.toChainId, AnyswapIdentifier, msg.sender, anyswapBridgeData.receiverAddress, anyswapBridgeData.metadata );}",
                                "modifiers": [
                                    "payable",
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "bridgeData"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "AnyswapIdentifier",
                                        "",
                                        "AnyswapV6L2Impl"
                                    ],
                                    [
                                        "router",
                                        "",
                                        "AnyswapV6L2Impl"
                                    ],
                                    [
                                        "nonevm_router",
                                        "",
                                        "AnyswapV6L2Impl"
                                    ],
                                    [
                                        "NATIVE_TOKEN_ADDRESS",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyswapV6L2Impl.SocketBridge",
                                        "AnyswapV6Router.anySwapOutUnderlying"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "211813dcc934eedaf24e310607dae727"
                            }
                        ],
                        "swapAndBridge": [
                            {
                                "visibility": "external",
                                "content": "function swapAndBridge( uint32 swapId, bytes calldata swapData, AnyswapBridgeDataNoToken calldata anyswapBridgeData ) external payable{ (bool success, bytes memory result) = socketRoute .getRoute(swapId) .delegatecall(swapData); if (!success){ assembly{ revert(add(result, 32), mload(result))}} (uint256 bridgeAmount, address token) = abi.decode( result, (uint256, address) ); AnyswapV6Router _router = anyswapBridgeData.isEvm ? router : nonevm_router; if (token == NATIVE_TOKEN_ADDRESS){ _router.anySwapOutNative{ value: bridgeAmount} ( anyswapBridgeData.wrapperTokenAddress, anyswapBridgeData.receiverAddress, anyswapBridgeData.toChainId );} else{ _router.anySwapOutUnderlying( anyswapBridgeData.wrapperTokenAddress, anyswapBridgeData.receiverAddress, bridgeAmount, anyswapBridgeData.toChainId );} emit SocketBridge( bridgeAmount, token, anyswapBridgeData.toChainId, AnyswapIdentifier, msg.sender, anyswapBridgeData.receiverAddress, anyswapBridgeData.metadata );}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint32",
                                        "name": "swapId"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "swapData"
                                    },
                                    {
                                        "type": "AnyswapBridgeDataNoToken calldata",
                                        "name": "anyswapBridgeData"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "AnyswapIdentifier",
                                        "",
                                        "AnyswapV6L2Impl"
                                    ],
                                    [
                                        "router",
                                        "",
                                        "AnyswapV6L2Impl"
                                    ],
                                    [
                                        "nonevm_router",
                                        "",
                                        "AnyswapV6L2Impl"
                                    ],
                                    [
                                        "NATIVE_TOKEN_ADDRESS",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ],
                                    [
                                        "socketRoute",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyswapV6L2Impl.SocketBridge",
                                        "AnyswapV6Router.anySwapOutUnderlying",
                                        "socketRoute.getRoute"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "261eb5b629a74632078f027d9e039c56"
                            }
                        ],
                        "bridgeERC20To": [
                            {
                                "visibility": "external",
                                "content": "function bridgeERC20To( uint256 amount, uint256 toChainId, bytes32 metadata, address receiverAddress, address token, address wrapperTokenAddress, bool isEvm ) external payable{ ERC20(token).safeTransferFrom(msg.sender, socketGateway, amount); AnyswapV6Router _router = isEvm ? router : nonevm_router; _router.anySwapOutUnderlying( wrapperTokenAddress, receiverAddress, amount, toChainId ); emit SocketBridge( amount, token, toChainId, AnyswapIdentifier, msg.sender, receiverAddress, metadata );}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "toChainId"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "metadata"
                                    },
                                    {
                                        "type": "address",
                                        "name": "receiverAddress"
                                    },
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "wrapperTokenAddress"
                                    },
                                    {
                                        "type": "bool",
                                        "name": "isEvm"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "AnyswapIdentifier",
                                        "",
                                        "AnyswapV6L2Impl"
                                    ],
                                    [
                                        "router",
                                        "",
                                        "AnyswapV6L2Impl"
                                    ],
                                    [
                                        "nonevm_router",
                                        "",
                                        "AnyswapV6L2Impl"
                                    ],
                                    [
                                        "socketGateway",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyswapV6L2Impl.SocketBridge",
                                        "AnyswapV6Router.anySwapOutUnderlying",
                                        "AnyswapV6L2Impl.ERC20"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "b5c5d5a339d6ce4fbd0cef2831bb32b4"
                            }
                        ],
                        "bridgeNativeTo": [
                            {
                                "visibility": "external",
                                "content": "function bridgeNativeTo( uint256 amount, uint256 toChainId, bytes32 metadata, address receiverAddress, address wrapperTokenAddress, bool isEvm ) external payable{ AnyswapV6Router _router = isEvm ? router : nonevm_router; _router.anySwapOutNative{ value: amount} ( wrapperTokenAddress, receiverAddress, toChainId ); emit SocketBridge( amount, NATIVE_TOKEN_ADDRESS, toChainId, AnyswapIdentifier, msg.sender, receiverAddress, metadata );}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "toChainId"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "metadata"
                                    },
                                    {
                                        "type": "address",
                                        "name": "receiverAddress"
                                    },
                                    {
                                        "type": "address",
                                        "name": "wrapperTokenAddress"
                                    },
                                    {
                                        "type": "bool",
                                        "name": "isEvm"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "AnyswapIdentifier",
                                        "",
                                        "AnyswapV6L2Impl"
                                    ],
                                    [
                                        "router",
                                        "",
                                        "AnyswapV6L2Impl"
                                    ],
                                    [
                                        "nonevm_router",
                                        "",
                                        "AnyswapV6L2Impl"
                                    ],
                                    [
                                        "NATIVE_TOKEN_ADDRESS",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyswapV6L2Impl.SocketBridge"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "c82cc672b956258ce58272e79c0e8251"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {
                        "AnyswapBridgeDataNoToken": {
                            "content": "AnyswapBridgeDataNoToken{ uint256 toChainId; address receiverAddress; address wrapperTokenAddress; bool isEvm; bytes32 metadata;}"
                        },
                        "AnyswapBridgeData": {
                            "content": "AnyswapBridgeData{ uint256 toChainId; address receiverAddress; address wrapperTokenAddress; address token; bool isEvm; bytes32 metadata;}"
                        }
                    },
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "ERC20": "SafeTransferLib"
                    }
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "AnyswapV6Router.anySwapOutUnderlying": "aa14fcb54ca5f49ead9c1dfb8b67b621"
            },
            "md5": "952ad782c18e1ed0f409621bc53dcb5f"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\arbitrum\\interfaces\\arbitrum.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\arbitrum\\interfaces\\arbitrum.sol",
            "filename": "arbitrum.sol",
            "imported_contracts": {},
            "contracts": {
                "L1GatewayRouter": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "outboundTransfer": [
                            {
                                "visibility": "external",
                                "content": "function outboundTransfer( address _token, address _to, uint256 _amount, uint256 _maxGas, uint256 _gasPriceBid, bytes calldata _data ) external payable returns (bytes calldata);",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_amount"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_maxGas"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_gasPriceBid"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "_data"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes calldata",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": true,
                                "md5": "e9ebba6d3f34619a70d5327037014a3b"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "a65ea1856fafc13019767362583628bc"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\arbitrum\\l1\\NativeArbitrum.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\arbitrum\\l1\\NativeArbitrum.sol",
            "filename": "NativeArbitrum.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\utils\\SafeTransferLib.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "SafeTransferLib": {
                            "original_name": "SafeTransferLib",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\tokens\\ERC20.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "ERC20": {
                            "original_name": "ERC20",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\arbitrum\\interfaces\\arbitrum.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "L1GatewayRouter": {
                            "original_name": "L1GatewayRouter",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "BridgeImplBase": {
                            "original_name": "BridgeImplBase",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\static\\RouteIdentifiers.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "NATIVE_ARBITRUM": {
                            "original_name": "NATIVE_ARBITRUM",
                            "type": {
                                "__CT__": true,
                                "value": 18
                            }
                        }
                    }
                }
            },
            "contracts": {
                "NativeArbitrumImpl": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "BridgeImplBase"
                    ],
                    "state_variables": {
                        "NativeArbitrumIdentifier": {
                            "type": "bytes32",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "NATIVE_ARBITRUM",
                            "content": "bytes32 public immutable NativeArbitrumIdentifier = NATIVE_ARBITRUM;"
                        },
                        "DESTINATION_CHAIN_ID": {
                            "type": "uint256",
                            "visibility": "public",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "42161",
                            "content": "uint256 public constant DESTINATION_CHAIN_ID = 42161;"
                        },
                        "NATIVE_ARBITRUM_ERC20_EXTERNAL_BRIDGE_FUNCTION_SELECTOR": {
                            "type": "bytes4",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "bytes4( keccak256( \"bridgeERC20To(uint256, uint256, uint256, uint256, bytes32, address, address, address, bytes)\" ) )",
                            "content": "bytes4 public immutable NATIVE_ARBITRUM_ERC20_EXTERNAL_BRIDGE_FUNCTION_SELECTOR = bytes4( keccak256( \"bridgeERC20To(uint256, uint256, uint256, uint256, bytes32, address, address, address, bytes)\" ) );"
                        },
                        "NATIVE_ARBITRUM_SWAP_BRIDGE_SELECTOR": {
                            "type": "bytes4",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "bytes4( keccak256( \"swapAndBridge(uint32, bytes, (uint256, uint256, uint256, address, address, bytes32, bytes))\" ) )",
                            "content": "bytes4 public immutable NATIVE_ARBITRUM_SWAP_BRIDGE_SELECTOR = bytes4( keccak256( \"swapAndBridge(uint32, bytes, (uint256, uint256, uint256, address, address, bytes32, bytes))\" ) );"
                        },
                        "router": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public immutable router;"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor ( address _router, address _socketGateway, address _socketDeployFactory ) BridgeImplBase(_socketGateway, _socketDeployFactory){ router = _router;}",
                                "modifiers": [
                                    "BridgeImplBase(_socketGateway, _socketDeployFactory)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_router"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_socketGateway"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_socketDeployFactory"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "router",
                                        "",
                                        "NativeArbitrumImpl"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "router",
                                        "",
                                        "NativeArbitrumImpl"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "e91b8363c20d9dbb1d54d068850d38d6"
                            }
                        ],
                        "bridgeAfterSwap": [
                            {
                                "visibility": "external",
                                "content": "function bridgeAfterSwap( uint256 amount, bytes calldata bridgeData ) external payable override{ NativeArbitrumBridgeData memory nativeArbitrumBridgeData = abi.decode( bridgeData, (NativeArbitrumBridgeData) ); if ( amount > ERC20(nativeArbitrumBridgeData.token).allowance( address(this), nativeArbitrumBridgeData.gatewayAddress ) ){ ERC20(nativeArbitrumBridgeData.token).safeApprove( nativeArbitrumBridgeData.gatewayAddress, UINT256_MAX );} L1GatewayRouter(router).outboundTransfer{ value: nativeArbitrumBridgeData.value} ( nativeArbitrumBridgeData.token, nativeArbitrumBridgeData.receiverAddress, amount, nativeArbitrumBridgeData.maxGas, nativeArbitrumBridgeData.gasPriceBid, nativeArbitrumBridgeData.data ); emit SocketBridge( amount, nativeArbitrumBridgeData.token, DESTINATION_CHAIN_ID, NativeArbitrumIdentifier, msg.sender, nativeArbitrumBridgeData.receiverAddress, nativeArbitrumBridgeData.metadata );}",
                                "modifiers": [
                                    "payable",
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "bridgeData"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "NativeArbitrumIdentifier",
                                        "",
                                        "NativeArbitrumImpl"
                                    ],
                                    [
                                        "DESTINATION_CHAIN_ID",
                                        "",
                                        "NativeArbitrumImpl"
                                    ],
                                    [
                                        "router",
                                        "",
                                        "NativeArbitrumImpl"
                                    ],
                                    [
                                        "allowance",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\tokens\\ERC20.sol",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "NativeArbitrumImpl.SocketBridge",
                                        "NativeArbitrumImpl.L1GatewayRouter",
                                        "NativeArbitrumImpl.ERC20"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "125b8c67787a0b776274c9bc9a2773a9"
                            }
                        ],
                        "swapAndBridge": [
                            {
                                "visibility": "external",
                                "content": "function swapAndBridge( uint32 swapId, bytes calldata swapData, NativeArbitrumBridgeDataNoToken calldata nativeArbitrumBridgeData ) external payable{ (bool success, bytes memory result) = socketRoute .getRoute(swapId) .delegatecall(swapData); if (!success){ assembly{ revert(add(result, 32), mload(result))}} (uint256 bridgeAmount, address token) = abi.decode( result, (uint256, address) ); if ( bridgeAmount > ERC20(token).allowance( address(this), nativeArbitrumBridgeData.gatewayAddress ) ){ ERC20(token).safeApprove( nativeArbitrumBridgeData.gatewayAddress, UINT256_MAX );} L1GatewayRouter(router).outboundTransfer{ value: nativeArbitrumBridgeData.value} ( token, nativeArbitrumBridgeData.receiverAddress, bridgeAmount, nativeArbitrumBridgeData.maxGas, nativeArbitrumBridgeData.gasPriceBid, nativeArbitrumBridgeData.data ); emit SocketBridge( bridgeAmount, token, DESTINATION_CHAIN_ID, NativeArbitrumIdentifier, msg.sender, nativeArbitrumBridgeData.receiverAddress, nativeArbitrumBridgeData.metadata );}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint32",
                                        "name": "swapId"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "swapData"
                                    },
                                    {
                                        "type": "NativeArbitrumBridgeDataNoToken calldata",
                                        "name": "nativeArbitrumBridgeData"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "NativeArbitrumIdentifier",
                                        "",
                                        "NativeArbitrumImpl"
                                    ],
                                    [
                                        "DESTINATION_CHAIN_ID",
                                        "",
                                        "NativeArbitrumImpl"
                                    ],
                                    [
                                        "router",
                                        "",
                                        "NativeArbitrumImpl"
                                    ],
                                    [
                                        "allowance",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\tokens\\ERC20.sol",
                                        "ERC20"
                                    ],
                                    [
                                        "socketRoute",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "NativeArbitrumImpl.SocketBridge",
                                        "NativeArbitrumImpl.L1GatewayRouter",
                                        "NativeArbitrumImpl.ERC20",
                                        "socketRoute.getRoute"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "d806e35f276b13e1da73e45f3bc64ec8"
                            }
                        ],
                        "bridgeERC20To": [
                            {
                                "visibility": "external",
                                "content": "function bridgeERC20To( uint256 amount, uint256 value, uint256 maxGas, uint256 gasPriceBid, bytes32 metadata, address receiverAddress, address token, address gatewayAddress, bytes memory data ) external payable{ ERC20 tokenInstance = ERC20(token); tokenInstance.safeTransferFrom(msg.sender, socketGateway, amount); if (amount > ERC20(token).allowance(address(this), gatewayAddress)){ ERC20(token).safeApprove(gatewayAddress, UINT256_MAX);} L1GatewayRouter(router).outboundTransfer{ value: value} ( token, receiverAddress, amount, maxGas, gasPriceBid, data ); emit SocketBridge( amount, token, DESTINATION_CHAIN_ID, NativeArbitrumIdentifier, msg.sender, receiverAddress, metadata );}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "maxGas"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "gasPriceBid"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "metadata"
                                    },
                                    {
                                        "type": "address",
                                        "name": "receiverAddress"
                                    },
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "gatewayAddress"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "data"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "NativeArbitrumIdentifier",
                                        "",
                                        "NativeArbitrumImpl"
                                    ],
                                    [
                                        "DESTINATION_CHAIN_ID",
                                        "",
                                        "NativeArbitrumImpl"
                                    ],
                                    [
                                        "router",
                                        "",
                                        "NativeArbitrumImpl"
                                    ],
                                    [
                                        "allowance",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\tokens\\ERC20.sol",
                                        "ERC20"
                                    ],
                                    [
                                        "socketGateway",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "NativeArbitrumImpl.SocketBridge",
                                        "ERC20.safeTransferFrom",
                                        "NativeArbitrumImpl.L1GatewayRouter",
                                        "NativeArbitrumImpl.ERC20"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "e3d292fa0672a3270345923f0778c4fe"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {
                        "NativeArbitrumBridgeDataNoToken": {
                            "content": "NativeArbitrumBridgeDataNoToken{ uint256 value; uint256 maxGas; uint256 gasPriceBid; address receiverAddress; address gatewayAddress; bytes32 metadata; bytes data;}"
                        },
                        "NativeArbitrumBridgeData": {
                            "content": "NativeArbitrumBridgeData{ uint256 value; uint256 maxGas; uint256 gasPriceBid; address receiverAddress; address gatewayAddress; address token; bytes32 metadata; bytes data;}"
                        }
                    },
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "ERC20": "SafeTransferLib"
                    }
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "ERC20.safeTransferFrom": "f59cf721ba6479ab2b5aa8ba2685eff0"
            },
            "md5": "fef90953f440fa547df9058ff6e59c2e"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\libraries\\Pb.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\libraries\\Pb.sol",
            "filename": "Pb.sol",
            "imported_contracts": {},
            "contracts": {
                "Pb": {
                    "type": {
                        "__CT__": true,
                        "value": 2
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "fromBytes": [
                            {
                                "visibility": "internal",
                                "content": "function fromBytes( bytes memory raw ) internal pure returns (Buffer memory buf){ buf.b = raw; buf.idx = 0;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "raw"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "Buffer memory",
                                        "name": "buf"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "134a077a080f080f723fbcb737b91817"
                            }
                        ],
                        "hasMore": [
                            {
                                "visibility": "internal",
                                "content": "function hasMore(Buffer memory buf) internal pure returns (bool){ return buf.idx < buf.b.length;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "Buffer memory",
                                        "name": "buf"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "002ffbe571d1888c9db7b7c0fe2cd99d"
                            }
                        ],
                        "decKey": [
                            {
                                "visibility": "internal",
                                "content": "function decKey( Buffer memory buf ) internal pure returns (uint256 tag, WireType wiretype){ uint256 v = decVarint(buf); tag = v / 8; wiretype = WireType(v & 7);}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "Buffer memory",
                                        "name": "buf"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": "tag"
                                    },
                                    {
                                        "type": "WireType",
                                        "name": "wiretype"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Pb.WireType",
                                        "Pb.decVarint"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "5cfbc2577183db7ac1f84991694f8d90"
                            }
                        ],
                        "decVarint": [
                            {
                                "visibility": "internal",
                                "content": "function decVarint(Buffer memory buf) internal pure returns (uint256 v){ bytes10 tmp; bytes memory bb = buf.b; v = buf.idx; assembly{ tmp := mload(add(add(bb, 32), v))} uint256 b; v = 0; for (uint256 i = 0; i < 10; i++){ assembly{ b := byte(i, tmp)} v |= (b & 0x7F) << (i * 7); if (b & 0x80 == 0){ buf.idx += i + 1; return v;}} revert();}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "Buffer memory",
                                        "name": "buf"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": "v"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "ac71d3cc354aba0df9ecb20a3ca60b0c"
                            }
                        ],
                        "decBytes": [
                            {
                                "visibility": "internal",
                                "content": "function decBytes( Buffer memory buf ) internal pure returns (bytes memory b){ uint256 len = decVarint(buf); uint256 end = buf.idx + len; require(end <= buf.b.length); b = new bytes(len); bytes memory bufB = buf.b; uint256 bStart; uint256 bufBStart = buf.idx; assembly{ bStart := add(b, 32) bufBStart := add(add(bufB, 32), bufBStart)} for (uint256 i = 0; i < len; i += 32){ assembly{ mstore(add(bStart, i), mload(add(bufBStart, i)))}} buf.idx = end;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "Buffer memory",
                                        "name": "buf"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": "b"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Pb.decVarint"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "4b5a86ae819bdb176cb63d49f2f12da2"
                            }
                        ],
                        "skipValue": [
                            {
                                "visibility": "internal",
                                "content": "function skipValue(Buffer memory buf, WireType wire) internal pure{ if (wire == WireType.Varint){ decVarint(buf);} else if (wire == WireType.LengthDelim){ uint256 len = decVarint(buf); buf.idx += len; require(buf.idx <= buf.b.length);} else{ revert();}}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "Buffer memory",
                                        "name": "buf"
                                    },
                                    {
                                        "type": "WireType",
                                        "name": "wire"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Pb.decVarint"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "a4b3af459ab4233b61fad440aa6229d8"
                            }
                        ],
                        "_uint256": [
                            {
                                "visibility": "internal",
                                "content": "function _uint256(bytes memory b) internal pure returns (uint256 v){ require(b.length <= 32); assembly{ v := mload(add(b, 32))} v = v >> (8 * (32 - b.length));}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "b"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": "v"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "1c9557021bb3469171d6987d47ce84a0"
                            }
                        ],
                        "_address": [
                            {
                                "visibility": "internal",
                                "content": "function _address(bytes memory b) internal pure returns (address v){ v = _addressPayable(b);}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "b"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": "v"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Pb._addressPayable"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "ba826aa4fec4b34f115fecc3f7e73086"
                            }
                        ],
                        "_addressPayable": [
                            {
                                "visibility": "internal",
                                "content": "function _addressPayable( bytes memory b ) internal pure returns (address payable v){ require(b.length == 20); assembly{ v := div(mload(add(b, 32)), 0x1000000000000000000000000)}}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "b"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "address payable",
                                        "name": "v"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "a4ff8d7d83354e046d22a2f907093f2e"
                            }
                        ],
                        "_bytes32": [
                            {
                                "visibility": "internal",
                                "content": "function _bytes32(bytes memory b) internal pure returns (bytes32 v){ require(b.length == 32); assembly{ v := mload(add(b, 32))}}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "b"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": "v"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "7e1473695696307c4094a31343f85c29"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {
                        "Buffer": {
                            "content": "Buffer{ uint256 idx; bytes b;}"
                        }
                    },
                    "events": {},
                    "enums": {
                        "WireType": {
                            "content": "WireType{ Varint, Fixed64, LengthDelim, StartGroup, EndGroup, Fixed32}"
                        }
                    },
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "Pb.decVarint": "ac71d3cc354aba0df9ecb20a3ca60b0c",
                "Pb._addressPayable": "a4ff8d7d83354e046d22a2f907093f2e"
            },
            "md5": "9c4eed68351b2af9964e2cb2ad4d92bf"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\cbridge\\interfaces\\cbridge.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\cbridge\\interfaces\\cbridge.sol",
            "filename": "cbridge.sol",
            "imported_contracts": {},
            "contracts": {
                "ICBridge": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "send": [
                            {
                                "visibility": "external",
                                "content": "function send( address _receiver, address _token, uint256 _amount, uint64 _dstChinId, uint64 _nonce, uint32 _maxSlippage ) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_receiver"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_token"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_amount"
                                    },
                                    {
                                        "type": "uint64",
                                        "name": "_dstChinId"
                                    },
                                    {
                                        "type": "uint64",
                                        "name": "_nonce"
                                    },
                                    {
                                        "type": "uint32",
                                        "name": "_maxSlippage"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "ef4184daf6b77d6f4c27869b2172a81f"
                            }
                        ],
                        "sendNative": [
                            {
                                "visibility": "external",
                                "content": "function sendNative( address _receiver, uint256 _amount, uint64 _dstChinId, uint64 _nonce, uint32 _maxSlippage ) external payable;",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_receiver"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_amount"
                                    },
                                    {
                                        "type": "uint64",
                                        "name": "_dstChinId"
                                    },
                                    {
                                        "type": "uint64",
                                        "name": "_nonce"
                                    },
                                    {
                                        "type": "uint32",
                                        "name": "_maxSlippage"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": true,
                                "md5": "615dcbeb31338955d0d5ed133408e02a"
                            }
                        ],
                        "withdraws": [
                            {
                                "visibility": "external",
                                "content": "function withdraws(bytes32 withdrawId) external view returns (bool);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "withdrawId"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "84f16d6d3d854ca77571ad7b6e211ef7"
                            }
                        ],
                        "withdraw": [
                            {
                                "visibility": "external",
                                "content": "function withdraw( bytes calldata _wdmsg, bytes[] calldata _sigs, address[] calldata _signers, uint256[] calldata _powers ) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "bytes calldata",
                                        "name": "_wdmsg"
                                    },
                                    {
                                        "type": "bytes[] calldata",
                                        "name": "_sigs"
                                    },
                                    {
                                        "type": "address[] calldata",
                                        "name": "_signers"
                                    },
                                    {
                                        "type": "uint256[] calldata",
                                        "name": "_powers"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "ade427e890d369b006d37e8f3b63fc5f"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "d60af4bffac9a1f0a7c79027e65a1d5e"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\cbridge\\interfaces\\ICelerStorageWrapper.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\cbridge\\interfaces\\ICelerStorageWrapper.sol",
            "filename": "ICelerStorageWrapper.sol",
            "imported_contracts": {},
            "contracts": {
                "ICelerStorageWrapper": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "setAddressForTransferId": [
                            {
                                "visibility": "external",
                                "content": "function setAddressForTransferId( bytes32 transferId, address transferIdAddress ) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "transferId"
                                    },
                                    {
                                        "type": "address",
                                        "name": "transferIdAddress"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "6f2cd33bbecfab95376085358c737095"
                            }
                        ],
                        "deleteTransferId": [
                            {
                                "visibility": "external",
                                "content": "function deleteTransferId(bytes32 transferId) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "transferId"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "27a177f7509bb250fa2e2805a40ef956"
                            }
                        ],
                        "getAddressFromTransferId": [
                            {
                                "visibility": "external",
                                "content": "function getAddressFromTransferId( bytes32 transferId ) external view returns (address);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "transferId"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "d02fe0c2b6e2e4e95e0d0044c3ed0328"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "8f1c29e2dedd1645ceb6e16db0fe10e0"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\cbridge\\CelerImpl.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\cbridge\\CelerImpl.sol",
            "filename": "CelerImpl.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\libraries\\Pb.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\utils\\SafeTransferLib.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "SafeTransferLib": {
                            "original_name": "SafeTransferLib",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\tokens\\ERC20.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "ERC20": {
                            "original_name": "ERC20",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\cbridge\\interfaces\\cbridge.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\cbridge\\interfaces\\ICelerStorageWrapper.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\errors\\SocketErrors.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "TransferIdExists": {
                            "original_name": "TransferIdExists",
                            "type": {
                                "__CT__": true,
                                "value": 15
                            }
                        },
                        "InvalidCelerRefund": {
                            "original_name": "InvalidCelerRefund",
                            "type": {
                                "__CT__": true,
                                "value": 15
                            }
                        },
                        "CelerAlreadyRefunded": {
                            "original_name": "CelerAlreadyRefunded",
                            "type": {
                                "__CT__": true,
                                "value": 15
                            }
                        },
                        "CelerRefundNotReady": {
                            "original_name": "CelerRefundNotReady",
                            "type": {
                                "__CT__": true,
                                "value": 15
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "BridgeImplBase": {
                            "original_name": "BridgeImplBase",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\static\\RouteIdentifiers.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "CBRIDGE": {
                            "original_name": "CBRIDGE",
                            "type": {
                                "__CT__": true,
                                "value": 18
                            }
                        }
                    }
                }
            },
            "contracts": {
                "CelerImpl": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "BridgeImplBase"
                    ],
                    "state_variables": {
                        "CBridgeIdentifier": {
                            "type": "bytes32",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "CBRIDGE",
                            "content": "bytes32 public immutable CBridgeIdentifier = CBRIDGE;"
                        },
                        "CELER_ERC20_EXTERNAL_BRIDGE_FUNCTION_SELECTOR": {
                            "type": "bytes4",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "bytes4( keccak256( \"bridgeERC20To(address, address, uint256, bytes32, uint64, uint64, uint32)\" ) )",
                            "content": "bytes4 public immutable CELER_ERC20_EXTERNAL_BRIDGE_FUNCTION_SELECTOR = bytes4( keccak256( \"bridgeERC20To(address, address, uint256, bytes32, uint64, uint64, uint32)\" ) );"
                        },
                        "CELER_NATIVE_EXTERNAL_BRIDGE_FUNCTION_SELECTOR": {
                            "type": "bytes4",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "bytes4( keccak256( \"bridgeNativeTo(address, uint256, bytes32, uint64, uint64, uint32)\" ) )",
                            "content": "bytes4 public immutable CELER_NATIVE_EXTERNAL_BRIDGE_FUNCTION_SELECTOR = bytes4( keccak256( \"bridgeNativeTo(address, uint256, bytes32, uint64, uint64, uint32)\" ) );"
                        },
                        "CELER_SWAP_BRIDGE_SELECTOR": {
                            "type": "bytes4",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "bytes4( keccak256( \"swapAndBridge(uint32, bytes, (address, uint64, uint32, uint64, bytes32))\" ) )",
                            "content": "bytes4 public immutable CELER_SWAP_BRIDGE_SELECTOR = bytes4( keccak256( \"swapAndBridge(uint32, bytes, (address, uint64, uint32, uint64, bytes32))\" ) );"
                        },
                        "router": {
                            "type": "ICBridge",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": null,
                            "content": "ICBridge public immutable router;"
                        },
                        "celerStorageWrapper": {
                            "type": "ICelerStorageWrapper",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": null,
                            "content": "ICelerStorageWrapper public immutable celerStorageWrapper;"
                        },
                        "weth": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public immutable weth;"
                        },
                        "chainId": {
                            "type": "uint64",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint64 public immutable chainId;"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor ( address _routerAddress, address _weth, address _celerStorageWrapperAddress, address _socketGateway, address _socketDeployFactory ) BridgeImplBase(_socketGateway, _socketDeployFactory){ router = ICBridge(_routerAddress); celerStorageWrapper = ICelerStorageWrapper(_celerStorageWrapperAddress); weth = _weth; chainId = uint64(block.chainid);}",
                                "modifiers": [
                                    "BridgeImplBase(_socketGateway, _socketDeployFactory)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_routerAddress"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_weth"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_celerStorageWrapperAddress"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_socketGateway"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_socketDeployFactory"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "router",
                                        "",
                                        "CelerImpl"
                                    ],
                                    [
                                        "celerStorageWrapper",
                                        "",
                                        "CelerImpl"
                                    ],
                                    [
                                        "weth",
                                        "",
                                        "CelerImpl"
                                    ],
                                    [
                                        "chainId",
                                        "",
                                        "CelerImpl"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "router",
                                        "",
                                        "CelerImpl"
                                    ],
                                    [
                                        "celerStorageWrapper",
                                        "",
                                        "CelerImpl"
                                    ],
                                    [
                                        "weth",
                                        "",
                                        "CelerImpl"
                                    ],
                                    [
                                        "chainId",
                                        "",
                                        "CelerImpl"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "5d48b309550b613849445af3a8cde2a9"
                            }
                        ],
                        "bridgeAfterSwap": [
                            {
                                "visibility": "external",
                                "content": "function bridgeAfterSwap( uint256 amount, bytes calldata bridgeData ) external payable override{ CelerBridgeData memory celerBridgeData = abi.decode( bridgeData, (CelerBridgeData) ); if (celerBridgeData.token == NATIVE_TOKEN_ADDRESS){ bytes32 transferId = keccak256( abi.encodePacked( address(this), celerBridgeData.receiverAddress, weth, amount, celerBridgeData.toChainId, celerBridgeData.nonce, chainId ) ); celerStorageWrapper.setAddressForTransferId(transferId, msg.sender); router.sendNative{ value: amount} ( celerBridgeData.receiverAddress, amount, celerBridgeData.toChainId, celerBridgeData.nonce, celerBridgeData.maxSlippage );} else{ bytes32 transferId = keccak256( abi.encodePacked( address(this), celerBridgeData.receiverAddress, celerBridgeData.token, amount, celerBridgeData.toChainId, celerBridgeData.nonce, chainId ) ); celerStorageWrapper.setAddressForTransferId(transferId, msg.sender); router.send( celerBridgeData.receiverAddress, celerBridgeData.token, amount, celerBridgeData.toChainId, celerBridgeData.nonce, celerBridgeData.maxSlippage );} emit SocketBridge( amount, celerBridgeData.token, celerBridgeData.toChainId, CBridgeIdentifier, msg.sender, celerBridgeData.receiverAddress, celerBridgeData.metadata );}",
                                "modifiers": [
                                    "payable",
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "bridgeData"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "CBridgeIdentifier",
                                        "",
                                        "CelerImpl"
                                    ],
                                    [
                                        "router",
                                        "",
                                        "CelerImpl"
                                    ],
                                    [
                                        "celerStorageWrapper",
                                        "",
                                        "CelerImpl"
                                    ],
                                    [
                                        "weth",
                                        "",
                                        "CelerImpl"
                                    ],
                                    [
                                        "chainId",
                                        "",
                                        "CelerImpl"
                                    ],
                                    [
                                        "NATIVE_TOKEN_ADDRESS",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ICBridge.send",
                                        "CelerImpl.SocketBridge",
                                        "ICelerStorageWrapper.setAddressForTransferId"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "3d7e15291c841ca9990ea15c9f1b86aa"
                            }
                        ],
                        "swapAndBridge": [
                            {
                                "visibility": "external",
                                "content": "function swapAndBridge( uint32 swapId, bytes calldata swapData, CelerBridgeDataNoToken calldata celerBridgeData ) external payable{ (bool success, bytes memory result) = socketRoute .getRoute(swapId) .delegatecall(swapData); if (!success){ assembly{ revert(add(result, 32), mload(result))}} (uint256 bridgeAmount, address token) = abi.decode( result, (uint256, address) ); if (token == NATIVE_TOKEN_ADDRESS){ bytes32 transferId = keccak256( abi.encodePacked( address(this), celerBridgeData.receiverAddress, weth, bridgeAmount, celerBridgeData.toChainId, celerBridgeData.nonce, chainId ) ); celerStorageWrapper.setAddressForTransferId(transferId, msg.sender); router.sendNative{ value: bridgeAmount} ( celerBridgeData.receiverAddress, bridgeAmount, celerBridgeData.toChainId, celerBridgeData.nonce, celerBridgeData.maxSlippage );} else{ bytes32 transferId = keccak256( abi.encodePacked( address(this), celerBridgeData.receiverAddress, token, bridgeAmount, celerBridgeData.toChainId, celerBridgeData.nonce, chainId ) ); celerStorageWrapper.setAddressForTransferId(transferId, msg.sender); router.send( celerBridgeData.receiverAddress, token, bridgeAmount, celerBridgeData.toChainId, celerBridgeData.nonce, celerBridgeData.maxSlippage );} emit SocketBridge( bridgeAmount, token, celerBridgeData.toChainId, CBridgeIdentifier, msg.sender, celerBridgeData.receiverAddress, celerBridgeData.metadata );}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint32",
                                        "name": "swapId"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "swapData"
                                    },
                                    {
                                        "type": "CelerBridgeDataNoToken calldata",
                                        "name": "celerBridgeData"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "CBridgeIdentifier",
                                        "",
                                        "CelerImpl"
                                    ],
                                    [
                                        "router",
                                        "",
                                        "CelerImpl"
                                    ],
                                    [
                                        "celerStorageWrapper",
                                        "",
                                        "CelerImpl"
                                    ],
                                    [
                                        "weth",
                                        "",
                                        "CelerImpl"
                                    ],
                                    [
                                        "chainId",
                                        "",
                                        "CelerImpl"
                                    ],
                                    [
                                        "NATIVE_TOKEN_ADDRESS",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ],
                                    [
                                        "socketRoute",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ICBridge.send",
                                        "CelerImpl.SocketBridge",
                                        "ICelerStorageWrapper.setAddressForTransferId",
                                        "socketRoute.getRoute"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "bc8b4b32643f9351d2375bd526ba805d"
                            }
                        ],
                        "bridgeERC20To": [
                            {
                                "visibility": "external",
                                "content": "function bridgeERC20To( address receiverAddress, address token, uint256 amount, bytes32 metadata, uint64 toChainId, uint64 nonce, uint32 maxSlippage ) external payable{ bytes32 transferId = keccak256( abi.encodePacked( address(this), receiverAddress, token, amount, toChainId, nonce, chainId ) ); celerStorageWrapper.setAddressForTransferId(transferId, msg.sender); ERC20 tokenInstance = ERC20(token); tokenInstance.safeTransferFrom(msg.sender, socketGateway, amount); router.send( receiverAddress, token, amount, toChainId, nonce, maxSlippage ); emit SocketBridge( amount, token, toChainId, CBridgeIdentifier, msg.sender, receiverAddress, metadata );}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "receiverAddress"
                                    },
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "metadata"
                                    },
                                    {
                                        "type": "uint64",
                                        "name": "toChainId"
                                    },
                                    {
                                        "type": "uint64",
                                        "name": "nonce"
                                    },
                                    {
                                        "type": "uint32",
                                        "name": "maxSlippage"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "CBridgeIdentifier",
                                        "",
                                        "CelerImpl"
                                    ],
                                    [
                                        "router",
                                        "",
                                        "CelerImpl"
                                    ],
                                    [
                                        "celerStorageWrapper",
                                        "",
                                        "CelerImpl"
                                    ],
                                    [
                                        "chainId",
                                        "",
                                        "CelerImpl"
                                    ],
                                    [
                                        "socketGateway",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ICBridge.send",
                                        "CelerImpl.ERC20",
                                        "ERC20.safeTransferFrom",
                                        "CelerImpl.SocketBridge",
                                        "ICelerStorageWrapper.setAddressForTransferId"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "486bffd8e254b78b37c1e15189b39221"
                            }
                        ],
                        "bridgeNativeTo": [
                            {
                                "visibility": "external",
                                "content": "function bridgeNativeTo( address receiverAddress, uint256 amount, bytes32 metadata, uint64 toChainId, uint64 nonce, uint32 maxSlippage ) external payable{ bytes32 transferId = keccak256( abi.encodePacked( address(this), receiverAddress, weth, amount, toChainId, nonce, chainId ) ); celerStorageWrapper.setAddressForTransferId(transferId, msg.sender); router.sendNative{ value: amount} ( receiverAddress, amount, toChainId, nonce, maxSlippage ); emit SocketBridge( amount, NATIVE_TOKEN_ADDRESS, toChainId, CBridgeIdentifier, msg.sender, receiverAddress, metadata );}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "receiverAddress"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "metadata"
                                    },
                                    {
                                        "type": "uint64",
                                        "name": "toChainId"
                                    },
                                    {
                                        "type": "uint64",
                                        "name": "nonce"
                                    },
                                    {
                                        "type": "uint32",
                                        "name": "maxSlippage"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "CBridgeIdentifier",
                                        "",
                                        "CelerImpl"
                                    ],
                                    [
                                        "router",
                                        "",
                                        "CelerImpl"
                                    ],
                                    [
                                        "celerStorageWrapper",
                                        "",
                                        "CelerImpl"
                                    ],
                                    [
                                        "weth",
                                        "",
                                        "CelerImpl"
                                    ],
                                    [
                                        "chainId",
                                        "",
                                        "CelerImpl"
                                    ],
                                    [
                                        "NATIVE_TOKEN_ADDRESS",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "CelerImpl.SocketBridge",
                                        "ICelerStorageWrapper.setAddressForTransferId"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "b062920321bc01dee833edc844f80c8d"
                            }
                        ],
                        "refundCelerUser": [
                            {
                                "visibility": "external",
                                "content": "function refundCelerUser( bytes calldata _request, bytes[] calldata _sigs, address[] calldata _signers, uint256[] calldata _powers ) external payable{ WithdrawMsg memory request = decWithdrawMsg(_request); bytes32 transferId = keccak256( abi.encodePacked( request.chainid, request.seqnum, request.receiver, request.token, request.amount ) ); uint256 _initialNativeBalance = address(this).balance; uint256 _initialTokenBalance = ERC20(request.token).balanceOf( address(this) ); if (!router.withdraws(transferId)){ router.withdraw(_request, _sigs, _signers, _powers);} if (request.receiver != socketGateway){ revert InvalidCelerRefund();} address _receiver = celerStorageWrapper.getAddressFromTransferId( request.refid ); celerStorageWrapper.deleteTransferId(request.refid); if (_receiver == address(0)){ revert CelerAlreadyRefunded();} uint256 _nativeBalanceAfter = address(this).balance; uint256 _tokenBalanceAfter = ERC20(request.token).balanceOf( address(this) ); if (_nativeBalanceAfter > _initialNativeBalance){ if ((_nativeBalanceAfter - _initialNativeBalance) != request.amount) revert CelerRefundNotReady(); payable(_receiver).transfer(request.amount); return;} if (_tokenBalanceAfter > _initialTokenBalance){ if ((_tokenBalanceAfter - _initialTokenBalance) != request.amount) revert CelerRefundNotReady(); ERC20(request.token).safeTransfer(_receiver, request.amount); return;} revert CelerRefundNotReady();}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes calldata",
                                        "name": "_request"
                                    },
                                    {
                                        "type": "bytes[] calldata",
                                        "name": "_sigs"
                                    },
                                    {
                                        "type": "address[] calldata",
                                        "name": "_signers"
                                    },
                                    {
                                        "type": "uint256[] calldata",
                                        "name": "_powers"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "router",
                                        "",
                                        "CelerImpl"
                                    ],
                                    [
                                        "celerStorageWrapper",
                                        "",
                                        "CelerImpl"
                                    ],
                                    [
                                        "balanceOf",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\tokens\\ERC20.sol",
                                        "ERC20"
                                    ],
                                    [
                                        "socketGateway",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ICBridge.withdraw",
                                        "CelerImpl.InvalidCelerRefund",
                                        "ICBridge.withdraws",
                                        "ICelerStorageWrapper.getAddressFromTransferId",
                                        "CelerImpl.ERC20",
                                        "ICelerStorageWrapper.deleteTransferId",
                                        "CelerImpl.CelerAlreadyRefunded",
                                        "CelerImpl.CelerRefundNotReady",
                                        "CelerImpl.decWithdrawMsg"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "34d81f6a598d74899cdaec6b6b372987"
                            }
                        ],
                        "decWithdrawMsg": [
                            {
                                "visibility": "internal",
                                "content": "function decWithdrawMsg( bytes memory raw ) internal pure returns (WithdrawMsg memory m){ Pb.Buffer memory buf = Pb.fromBytes(raw); uint256 tag; Pb.WireType wire; while (buf.hasMore()){ (tag, wire) = buf.decKey(); if (false){} else if (tag == 1){ m.chainid = uint64(buf.decVarint());} else if (tag == 2){ m.seqnum = uint64(buf.decVarint());} else if (tag == 3){ m.receiver = Pb._address(buf.decBytes());} else if (tag == 4){ m.token = Pb._address(buf.decBytes());} else if (tag == 5){ m.amount = Pb._uint256(buf.decBytes());} else if (tag == 6){ m.refid = Pb._bytes32(buf.decBytes());} else{ buf.skipValue(wire);}}}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "raw"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "WithdrawMsg memory",
                                        "name": "m"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Pb.Buffer.hasMore",
                                        "Pb.Buffer.decVarint",
                                        "Pb._uint256",
                                        "Pb.fromBytes",
                                        "Pb.Buffer.decBytes",
                                        "Pb._bytes32",
                                        "Pb.Buffer.skipValue",
                                        "Pb.Buffer.decKey",
                                        "Pb._address"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "4d9d059bc49a120e0ebe4387b73aff27"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {
                        "WithdrawMsg": {
                            "content": "WithdrawMsg{ uint64 chainid; uint64 seqnum; address receiver; address token; uint256 amount; bytes32 refid;}"
                        },
                        "CelerBridgeDataNoToken": {
                            "content": "CelerBridgeDataNoToken{ address receiverAddress; uint64 toChainId; uint32 maxSlippage; uint64 nonce; bytes32 metadata;}"
                        },
                        "CelerBridgeData": {
                            "content": "CelerBridgeData{ address token; address receiverAddress; uint64 toChainId; uint32 maxSlippage; uint64 nonce; bytes32 metadata;}"
                        }
                    },
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "ERC20": "SafeTransferLib"
                    }
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "ICelerStorageWrapper.setAddressForTransferId": "6f2cd33bbecfab95376085358c737095",
                "ICBridge.send": "ef4184daf6b77d6f4c27869b2172a81f",
                "ERC20.safeTransferFrom": "f59cf721ba6479ab2b5aa8ba2685eff0",
                "CelerImpl.decWithdrawMsg": "4d9d059bc49a120e0ebe4387b73aff27",
                "ICelerStorageWrapper.getAddressFromTransferId": "d02fe0c2b6e2e4e95e0d0044c3ed0328",
                "ICBridge.withdraws": "84f16d6d3d854ca77571ad7b6e211ef7",
                "ICelerStorageWrapper.deleteTransferId": "27a177f7509bb250fa2e2805a40ef956",
                "ICBridge.withdraw": "ade427e890d369b006d37e8f3b63fc5f",
                "Pb.fromBytes": "134a077a080f080f723fbcb737b91817",
                "Pb._address": "ba826aa4fec4b34f115fecc3f7e73086",
                "Pb._uint256": "1c9557021bb3469171d6987d47ce84a0",
                "Pb._bytes32": "7e1473695696307c4094a31343f85c29"
            },
            "md5": "f33ba7a32578a05b9f13a6c62d463891"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\cbridge\\CelerImplV2.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\cbridge\\CelerImplV2.sol",
            "filename": "CelerImplV2.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\libraries\\Pb.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\utils\\SafeTransferLib.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "SafeTransferLib": {
                            "original_name": "SafeTransferLib",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\tokens\\ERC20.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "ERC20": {
                            "original_name": "ERC20",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\cbridge\\interfaces\\cbridge.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\cbridge\\interfaces\\ICelerStorageWrapper.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\errors\\SocketErrors.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "TransferIdExists": {
                            "original_name": "TransferIdExists",
                            "type": {
                                "__CT__": true,
                                "value": 15
                            }
                        },
                        "InvalidCelerRefund": {
                            "original_name": "InvalidCelerRefund",
                            "type": {
                                "__CT__": true,
                                "value": 15
                            }
                        },
                        "CelerAlreadyRefunded": {
                            "original_name": "CelerAlreadyRefunded",
                            "type": {
                                "__CT__": true,
                                "value": 15
                            }
                        },
                        "CelerRefundNotReady": {
                            "original_name": "CelerRefundNotReady",
                            "type": {
                                "__CT__": true,
                                "value": 15
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "BridgeImplBase": {
                            "original_name": "BridgeImplBase",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\static\\RouteIdentifiers.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "CBRIDGE": {
                            "original_name": "CBRIDGE",
                            "type": {
                                "__CT__": true,
                                "value": 18
                            }
                        }
                    }
                }
            },
            "contracts": {
                "CelerV2Impl": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "BridgeImplBase"
                    ],
                    "state_variables": {
                        "CBridgeIdentifier": {
                            "type": "bytes32",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "CBRIDGE",
                            "content": "bytes32 public immutable CBridgeIdentifier = CBRIDGE;"
                        },
                        "CELER_ERC20_EXTERNAL_BRIDGE_FUNCTION_SELECTOR": {
                            "type": "bytes4",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "bytes4( keccak256( \"bridgeERC20To(address, address, uint256, bytes32, uint64, uint64, uint32)\" ) )",
                            "content": "bytes4 public immutable CELER_ERC20_EXTERNAL_BRIDGE_FUNCTION_SELECTOR = bytes4( keccak256( \"bridgeERC20To(address, address, uint256, bytes32, uint64, uint64, uint32)\" ) );"
                        },
                        "CELER_NATIVE_EXTERNAL_BRIDGE_FUNCTION_SELECTOR": {
                            "type": "bytes4",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "bytes4( keccak256( \"bridgeNativeTo(address, uint256, bytes32, uint64, uint64, uint32)\" ) )",
                            "content": "bytes4 public immutable CELER_NATIVE_EXTERNAL_BRIDGE_FUNCTION_SELECTOR = bytes4( keccak256( \"bridgeNativeTo(address, uint256, bytes32, uint64, uint64, uint32)\" ) );"
                        },
                        "CELER_SWAP_BRIDGE_SELECTOR": {
                            "type": "bytes4",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "bytes4( keccak256( \"swapAndBridge(uint32, bytes, (address, uint64, uint32, uint64, bytes32))\" ) )",
                            "content": "bytes4 public immutable CELER_SWAP_BRIDGE_SELECTOR = bytes4( keccak256( \"swapAndBridge(uint32, bytes, (address, uint64, uint32, uint64, bytes32))\" ) );"
                        },
                        "router": {
                            "type": "ICBridge",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": null,
                            "content": "ICBridge public immutable router;"
                        },
                        "celerStorageWrapper": {
                            "type": "ICelerStorageWrapper",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": null,
                            "content": "ICelerStorageWrapper public immutable celerStorageWrapper;"
                        },
                        "weth": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public immutable weth;"
                        },
                        "chainId": {
                            "type": "uint64",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint64 public immutable chainId;"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor ( address _routerAddress, address _weth, address _celerStorageWrapperAddress, address _socketGateway, address _socketDeployFactory ) BridgeImplBase(_socketGateway, _socketDeployFactory){ router = ICBridge(_routerAddress); weth = _weth; chainId = uint64(block.chainid); celerStorageWrapper = ICelerStorageWrapper(_celerStorageWrapperAddress);}",
                                "modifiers": [
                                    "BridgeImplBase(_socketGateway, _socketDeployFactory)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_routerAddress"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_weth"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_celerStorageWrapperAddress"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_socketGateway"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_socketDeployFactory"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "router",
                                        "",
                                        "CelerV2Impl"
                                    ],
                                    [
                                        "celerStorageWrapper",
                                        "",
                                        "CelerV2Impl"
                                    ],
                                    [
                                        "weth",
                                        "",
                                        "CelerV2Impl"
                                    ],
                                    [
                                        "chainId",
                                        "",
                                        "CelerV2Impl"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "router",
                                        "",
                                        "CelerV2Impl"
                                    ],
                                    [
                                        "celerStorageWrapper",
                                        "",
                                        "CelerV2Impl"
                                    ],
                                    [
                                        "weth",
                                        "",
                                        "CelerV2Impl"
                                    ],
                                    [
                                        "chainId",
                                        "",
                                        "CelerV2Impl"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "a56e3cfd370ad006336a5dfb421bb632"
                            }
                        ],
                        "bridgeAfterSwap": [
                            {
                                "visibility": "external",
                                "content": "function bridgeAfterSwap( uint256 amount, bytes calldata bridgeData ) external payable override{ CelerBridgeData memory celerBridgeData = abi.decode( bridgeData, (CelerBridgeData) ); if (celerBridgeData.token == NATIVE_TOKEN_ADDRESS){ bytes32 transferId = keccak256( abi.encodePacked( address(this), celerBridgeData.receiverAddress, weth, amount, celerBridgeData.toChainId, celerBridgeData.nonce, chainId ) ); celerStorageWrapper.setAddressForTransferId(transferId, msg.sender); router.sendNative{ value: amount} ( celerBridgeData.receiverAddress, amount, celerBridgeData.toChainId, celerBridgeData.nonce, celerBridgeData.maxSlippage );} else{ bytes32 transferId = keccak256( abi.encodePacked( address(this), celerBridgeData.receiverAddress, celerBridgeData.token, amount, celerBridgeData.toChainId, celerBridgeData.nonce, chainId ) ); celerStorageWrapper.setAddressForTransferId(transferId, msg.sender); router.send( celerBridgeData.receiverAddress, celerBridgeData.token, amount, celerBridgeData.toChainId, celerBridgeData.nonce, celerBridgeData.maxSlippage );} emit SocketBridge( amount, celerBridgeData.token, celerBridgeData.toChainId, CBridgeIdentifier, msg.sender, celerBridgeData.receiverAddress, celerBridgeData.metadata );}",
                                "modifiers": [
                                    "payable",
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "bridgeData"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "CBridgeIdentifier",
                                        "",
                                        "CelerV2Impl"
                                    ],
                                    [
                                        "router",
                                        "",
                                        "CelerV2Impl"
                                    ],
                                    [
                                        "celerStorageWrapper",
                                        "",
                                        "CelerV2Impl"
                                    ],
                                    [
                                        "weth",
                                        "",
                                        "CelerV2Impl"
                                    ],
                                    [
                                        "chainId",
                                        "",
                                        "CelerV2Impl"
                                    ],
                                    [
                                        "NATIVE_TOKEN_ADDRESS",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ICBridge.send",
                                        "ICelerStorageWrapper.setAddressForTransferId",
                                        "CelerV2Impl.SocketBridge"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "3d7e15291c841ca9990ea15c9f1b86aa"
                            }
                        ],
                        "bridgeAfterSwapNoRefund": [
                            {
                                "visibility": "external",
                                "content": "function bridgeAfterSwapNoRefund( uint256 amount, bytes calldata bridgeData ) external payable{ CelerBridgeData memory celerBridgeData = abi.decode( bridgeData, (CelerBridgeData) ); if (celerBridgeData.token == NATIVE_TOKEN_ADDRESS){ router.sendNative{ value: amount} ( celerBridgeData.receiverAddress, amount, celerBridgeData.toChainId, celerBridgeData.nonce, celerBridgeData.maxSlippage );} else{ router.send( celerBridgeData.receiverAddress, celerBridgeData.token, amount, celerBridgeData.toChainId, celerBridgeData.nonce, celerBridgeData.maxSlippage );} emit SocketBridge( amount, celerBridgeData.token, celerBridgeData.toChainId, CBridgeIdentifier, msg.sender, celerBridgeData.receiverAddress, celerBridgeData.metadata );}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "bridgeData"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "CBridgeIdentifier",
                                        "",
                                        "CelerV2Impl"
                                    ],
                                    [
                                        "router",
                                        "",
                                        "CelerV2Impl"
                                    ],
                                    [
                                        "NATIVE_TOKEN_ADDRESS",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ICBridge.send",
                                        "CelerV2Impl.SocketBridge"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "00f41a27dc26bc726cf00dd2f0f303e5"
                            }
                        ],
                        "swapAndBridge": [
                            {
                                "visibility": "external",
                                "content": "function swapAndBridge( uint32 swapId, bytes calldata swapData, CelerBridgeDataNoToken calldata celerBridgeData ) external payable{ (bool success, bytes memory result) = socketRoute .getRoute(swapId) .delegatecall(swapData); if (!success){ assembly{ revert(add(result, 32), mload(result))}} (uint256 bridgeAmount, address token) = abi.decode( result, (uint256, address) ); if (token == NATIVE_TOKEN_ADDRESS){ bytes32 transferId = keccak256( abi.encodePacked( address(this), celerBridgeData.receiverAddress, weth, bridgeAmount, celerBridgeData.toChainId, celerBridgeData.nonce, chainId ) ); celerStorageWrapper.setAddressForTransferId(transferId, msg.sender); router.sendNative{ value: bridgeAmount} ( celerBridgeData.receiverAddress, bridgeAmount, celerBridgeData.toChainId, celerBridgeData.nonce, celerBridgeData.maxSlippage );} else{ bytes32 transferId = keccak256( abi.encodePacked( address(this), celerBridgeData.receiverAddress, token, bridgeAmount, celerBridgeData.toChainId, celerBridgeData.nonce, chainId ) ); celerStorageWrapper.setAddressForTransferId(transferId, msg.sender); router.send( celerBridgeData.receiverAddress, token, bridgeAmount, celerBridgeData.toChainId, celerBridgeData.nonce, celerBridgeData.maxSlippage );} emit SocketBridge( bridgeAmount, token, celerBridgeData.toChainId, CBridgeIdentifier, msg.sender, celerBridgeData.receiverAddress, celerBridgeData.metadata );}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint32",
                                        "name": "swapId"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "swapData"
                                    },
                                    {
                                        "type": "CelerBridgeDataNoToken calldata",
                                        "name": "celerBridgeData"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "CBridgeIdentifier",
                                        "",
                                        "CelerV2Impl"
                                    ],
                                    [
                                        "router",
                                        "",
                                        "CelerV2Impl"
                                    ],
                                    [
                                        "celerStorageWrapper",
                                        "",
                                        "CelerV2Impl"
                                    ],
                                    [
                                        "weth",
                                        "",
                                        "CelerV2Impl"
                                    ],
                                    [
                                        "chainId",
                                        "",
                                        "CelerV2Impl"
                                    ],
                                    [
                                        "NATIVE_TOKEN_ADDRESS",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ],
                                    [
                                        "socketRoute",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ICBridge.send",
                                        "ICelerStorageWrapper.setAddressForTransferId",
                                        "CelerV2Impl.SocketBridge",
                                        "socketRoute.getRoute"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "bc8b4b32643f9351d2375bd526ba805d"
                            }
                        ],
                        "swapAndBridgeNoRefund": [
                            {
                                "visibility": "external",
                                "content": "function swapAndBridgeNoRefund( uint32 swapId, bytes calldata swapData, CelerBridgeDataNoToken calldata celerBridgeData ) external payable{ (bool success, bytes memory result) = socketRoute .getRoute(swapId) .delegatecall(swapData); if (!success){ assembly{ revert(add(result, 32), mload(result))}} (uint256 bridgeAmount, address token) = abi.decode( result, (uint256, address) ); if (token == NATIVE_TOKEN_ADDRESS){ router.sendNative{ value: bridgeAmount} ( celerBridgeData.receiverAddress, bridgeAmount, celerBridgeData.toChainId, celerBridgeData.nonce, celerBridgeData.maxSlippage );} else{ router.send( celerBridgeData.receiverAddress, token, bridgeAmount, celerBridgeData.toChainId, celerBridgeData.nonce, celerBridgeData.maxSlippage );} emit SocketBridge( bridgeAmount, token, celerBridgeData.toChainId, CBridgeIdentifier, msg.sender, celerBridgeData.receiverAddress, celerBridgeData.metadata );}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint32",
                                        "name": "swapId"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "swapData"
                                    },
                                    {
                                        "type": "CelerBridgeDataNoToken calldata",
                                        "name": "celerBridgeData"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "CBridgeIdentifier",
                                        "",
                                        "CelerV2Impl"
                                    ],
                                    [
                                        "router",
                                        "",
                                        "CelerV2Impl"
                                    ],
                                    [
                                        "NATIVE_TOKEN_ADDRESS",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ],
                                    [
                                        "socketRoute",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ICBridge.send",
                                        "CelerV2Impl.SocketBridge",
                                        "socketRoute.getRoute"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "072812a4414ff6957d780364b75f47be"
                            }
                        ],
                        "bridgeERC20To": [
                            {
                                "visibility": "external",
                                "content": "function bridgeERC20To( address receiverAddress, address token, uint256 amount, bytes32 metadata, uint64 toChainId, uint64 nonce, uint32 maxSlippage ) external payable{ bytes32 transferId = keccak256( abi.encodePacked( address(this), receiverAddress, token, amount, toChainId, nonce, chainId ) ); celerStorageWrapper.setAddressForTransferId(transferId, msg.sender); ERC20 tokenInstance = ERC20(token); tokenInstance.safeTransferFrom(msg.sender, socketGateway, amount); router.send( receiverAddress, token, amount, toChainId, nonce, maxSlippage ); emit SocketBridge( amount, token, toChainId, CBridgeIdentifier, msg.sender, receiverAddress, metadata );}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "receiverAddress"
                                    },
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "metadata"
                                    },
                                    {
                                        "type": "uint64",
                                        "name": "toChainId"
                                    },
                                    {
                                        "type": "uint64",
                                        "name": "nonce"
                                    },
                                    {
                                        "type": "uint32",
                                        "name": "maxSlippage"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "CBridgeIdentifier",
                                        "",
                                        "CelerV2Impl"
                                    ],
                                    [
                                        "router",
                                        "",
                                        "CelerV2Impl"
                                    ],
                                    [
                                        "celerStorageWrapper",
                                        "",
                                        "CelerV2Impl"
                                    ],
                                    [
                                        "chainId",
                                        "",
                                        "CelerV2Impl"
                                    ],
                                    [
                                        "socketGateway",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ICBridge.send",
                                        "CelerV2Impl.SocketBridge",
                                        "ERC20.safeTransferFrom",
                                        "ICelerStorageWrapper.setAddressForTransferId",
                                        "CelerV2Impl.ERC20"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "486bffd8e254b78b37c1e15189b39221"
                            }
                        ],
                        "bridgeNativeTo": [
                            {
                                "visibility": "external",
                                "content": "function bridgeNativeTo( address receiverAddress, uint256 amount, bytes32 metadata, uint64 toChainId, uint64 nonce, uint32 maxSlippage ) external payable{ bytes32 transferId = keccak256( abi.encodePacked( address(this), receiverAddress, weth, amount, toChainId, nonce, chainId ) ); celerStorageWrapper.setAddressForTransferId(transferId, msg.sender); router.sendNative{ value: amount} ( receiverAddress, amount, toChainId, nonce, maxSlippage ); emit SocketBridge( amount, NATIVE_TOKEN_ADDRESS, toChainId, CBridgeIdentifier, msg.sender, receiverAddress, metadata );}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "receiverAddress"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "metadata"
                                    },
                                    {
                                        "type": "uint64",
                                        "name": "toChainId"
                                    },
                                    {
                                        "type": "uint64",
                                        "name": "nonce"
                                    },
                                    {
                                        "type": "uint32",
                                        "name": "maxSlippage"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "CBridgeIdentifier",
                                        "",
                                        "CelerV2Impl"
                                    ],
                                    [
                                        "router",
                                        "",
                                        "CelerV2Impl"
                                    ],
                                    [
                                        "celerStorageWrapper",
                                        "",
                                        "CelerV2Impl"
                                    ],
                                    [
                                        "weth",
                                        "",
                                        "CelerV2Impl"
                                    ],
                                    [
                                        "chainId",
                                        "",
                                        "CelerV2Impl"
                                    ],
                                    [
                                        "NATIVE_TOKEN_ADDRESS",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ICelerStorageWrapper.setAddressForTransferId",
                                        "CelerV2Impl.SocketBridge"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "b062920321bc01dee833edc844f80c8d"
                            }
                        ],
                        "bridgeNativeToOptimised": [
                            {
                                "visibility": "external",
                                "content": "function bridgeNativeToOptimised() external payable{ router.sendNative{ value: msg.value} ( address(bytes20(msg.data[4:24])), msg.value, uint64(uint32(bytes4(msg.data[24:28]))), uint64(uint32(bytes4(msg.data[28:32]))), uint32(bytes4(msg.data[32:36])) ); emit SocketBridge( msg.value, NATIVE_TOKEN_ADDRESS, uint64(uint32(bytes4(msg.data[24:28]))), CBridgeIdentifier, msg.sender, address(bytes20(msg.data[4:24])), hex\"01\" );}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [
                                    [
                                        "CBridgeIdentifier",
                                        "",
                                        "CelerV2Impl"
                                    ],
                                    [
                                        "router",
                                        "",
                                        "CelerV2Impl"
                                    ],
                                    [
                                        "NATIVE_TOKEN_ADDRESS",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "CelerV2Impl.SocketBridge"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "a4f6c6d6b50c9edbec2a0fa9bcf89b43"
                            }
                        ],
                        "bridgeERC20ToOptimised": [
                            {
                                "visibility": "external",
                                "content": "function bridgeERC20ToOptimised() external payable{ ERC20(address(bytes20(msg.data[24:44]))).safeTransferFrom( msg.sender, socketGateway, uint256(uint128(bytes16(msg.data[44:60]))) ); router.send( address(bytes20(msg.data[4:24])), address(bytes20(msg.data[24:44])), uint256(uint128(bytes16(msg.data[44:60]))), uint64(uint32(bytes4(msg.data[60:64]))), uint64(uint32(bytes4(msg.data[64:68]))), uint32(bytes4(msg.data[68:72])) ); emit SocketBridge( uint256(uint128(bytes16(msg.data[44:60]))), address(bytes20(msg.data[24:44])), uint64(uint32(bytes4(msg.data[60:64]))), CBridgeIdentifier, msg.sender, address(bytes20(msg.data[4:24])), hex\"01\" );}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [
                                    [
                                        "CBridgeIdentifier",
                                        "",
                                        "CelerV2Impl"
                                    ],
                                    [
                                        "router",
                                        "",
                                        "CelerV2Impl"
                                    ],
                                    [
                                        "socketGateway",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ICBridge.send",
                                        "CelerV2Impl.SocketBridge",
                                        "CelerV2Impl.ERC20"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "6e930709f5424cbd4996430edac37547"
                            }
                        ],
                        "refundCelerUserAdmin": [
                            {
                                "visibility": "external",
                                "content": "function refundCelerUserAdmin( address _receiver, bytes calldata _request, bytes[] calldata _sigs, address[] calldata _signers, uint256[] calldata _powers ) external payable isSocketGatewayOwner{ WithdrawMsg memory request = decWithdrawMsg(_request); bytes32 transferId = keccak256( abi.encodePacked( request.chainid, request.seqnum, request.receiver, request.token, request.amount ) ); uint256 _initialNativeBalance = address(this).balance; uint256 _initialTokenBalance = ERC20(request.token).balanceOf( address(this) ); if (!router.withdraws(transferId)){ router.withdraw(_request, _sigs, _signers, _powers);} if (request.receiver != socketGateway){ revert InvalidCelerRefund();} if ( celerStorageWrapper.getAddressFromTransferId(request.refid) != address(0) ){ revert InvalidCelerRefund();} uint256 _nativeBalanceAfter = address(this).balance; uint256 _tokenBalanceAfter = ERC20(request.token).balanceOf( address(this) ); if (_nativeBalanceAfter > _initialNativeBalance){ if ((_nativeBalanceAfter - _initialNativeBalance) != request.amount) revert CelerRefundNotReady(); payable(_receiver).transfer(request.amount); return;} if (_tokenBalanceAfter > _initialTokenBalance){ if ((_tokenBalanceAfter - _initialTokenBalance) != request.amount) revert CelerRefundNotReady(); ERC20(request.token).safeTransfer(_receiver, request.amount); return;} revert CelerRefundNotReady();}",
                                "modifiers": [
                                    "payable",
                                    "isSocketGatewayOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_receiver"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "_request"
                                    },
                                    {
                                        "type": "bytes[] calldata",
                                        "name": "_sigs"
                                    },
                                    {
                                        "type": "address[] calldata",
                                        "name": "_signers"
                                    },
                                    {
                                        "type": "uint256[] calldata",
                                        "name": "_powers"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "router",
                                        "",
                                        "CelerV2Impl"
                                    ],
                                    [
                                        "celerStorageWrapper",
                                        "",
                                        "CelerV2Impl"
                                    ],
                                    [
                                        "balanceOf",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\tokens\\ERC20.sol",
                                        "ERC20"
                                    ],
                                    [
                                        "socketGateway",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "celerStorageWrapper",
                                        "",
                                        "CelerV2Impl"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "CelerV2Impl.CelerRefundNotReady",
                                        "ICBridge.withdraw",
                                        "ICBridge.withdraws",
                                        "ICelerStorageWrapper.getAddressFromTransferId",
                                        "CelerV2Impl.decWithdrawMsg",
                                        "CelerV2Impl.InvalidCelerRefund",
                                        "CelerV2Impl.ERC20",
                                        "CelerV2Impl.isSocketGatewayOwner"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "218342c6acf7b94b199725d1f8be140b"
                            }
                        ],
                        "refundCelerUser": [
                            {
                                "visibility": "external",
                                "content": "function refundCelerUser( bytes calldata _request, bytes[] calldata _sigs, address[] calldata _signers, uint256[] calldata _powers ) external payable{ WithdrawMsg memory request = decWithdrawMsg(_request); bytes32 transferId = keccak256( abi.encodePacked( request.chainid, request.seqnum, request.receiver, request.token, request.amount ) ); uint256 _initialNativeBalance = address(this).balance; uint256 _initialTokenBalance = ERC20(request.token).balanceOf( address(this) ); if (!router.withdraws(transferId)){ router.withdraw(_request, _sigs, _signers, _powers);} if (request.receiver != socketGateway){ revert InvalidCelerRefund();} address _receiver = celerStorageWrapper.getAddressFromTransferId( request.refid ); celerStorageWrapper.deleteTransferId(request.refid); if (_receiver == address(0)){ revert CelerAlreadyRefunded();} uint256 _nativeBalanceAfter = address(this).balance; uint256 _tokenBalanceAfter = ERC20(request.token).balanceOf( address(this) ); if (_nativeBalanceAfter > _initialNativeBalance){ if ((_nativeBalanceAfter - _initialNativeBalance) != request.amount) revert CelerRefundNotReady(); payable(_receiver).transfer(request.amount); return;} if (_tokenBalanceAfter > _initialTokenBalance){ if ((_tokenBalanceAfter - _initialTokenBalance) != request.amount) revert CelerRefundNotReady(); ERC20(request.token).safeTransfer(_receiver, request.amount); return;} revert CelerRefundNotReady();}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes calldata",
                                        "name": "_request"
                                    },
                                    {
                                        "type": "bytes[] calldata",
                                        "name": "_sigs"
                                    },
                                    {
                                        "type": "address[] calldata",
                                        "name": "_signers"
                                    },
                                    {
                                        "type": "uint256[] calldata",
                                        "name": "_powers"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "router",
                                        "",
                                        "CelerV2Impl"
                                    ],
                                    [
                                        "celerStorageWrapper",
                                        "",
                                        "CelerV2Impl"
                                    ],
                                    [
                                        "balanceOf",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\tokens\\ERC20.sol",
                                        "ERC20"
                                    ],
                                    [
                                        "socketGateway",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "CelerV2Impl.CelerRefundNotReady",
                                        "ICBridge.withdraw",
                                        "ICBridge.withdraws",
                                        "CelerV2Impl.CelerAlreadyRefunded",
                                        "ICelerStorageWrapper.getAddressFromTransferId",
                                        "CelerV2Impl.decWithdrawMsg",
                                        "ICelerStorageWrapper.deleteTransferId",
                                        "CelerV2Impl.InvalidCelerRefund",
                                        "CelerV2Impl.ERC20"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "34d81f6a598d74899cdaec6b6b372987"
                            }
                        ],
                        "decWithdrawMsg": [
                            {
                                "visibility": "internal",
                                "content": "function decWithdrawMsg( bytes memory raw ) internal pure returns (WithdrawMsg memory m){ Pb.Buffer memory buf = Pb.fromBytes(raw); uint256 tag; Pb.WireType wire; while (buf.hasMore()){ (tag, wire) = buf.decKey(); if (false){} else if (tag == 1){ m.chainid = uint64(buf.decVarint());} else if (tag == 2){ m.seqnum = uint64(buf.decVarint());} else if (tag == 3){ m.receiver = Pb._address(buf.decBytes());} else if (tag == 4){ m.token = Pb._address(buf.decBytes());} else if (tag == 5){ m.amount = Pb._uint256(buf.decBytes());} else if (tag == 6){ m.refid = Pb._bytes32(buf.decBytes());} else{ buf.skipValue(wire);}}}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "raw"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "WithdrawMsg memory",
                                        "name": "m"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Pb.Buffer.hasMore",
                                        "Pb.Buffer.decVarint",
                                        "Pb._uint256",
                                        "Pb.fromBytes",
                                        "Pb.Buffer.decBytes",
                                        "Pb._bytes32",
                                        "Pb.Buffer.skipValue",
                                        "Pb.Buffer.decKey",
                                        "Pb._address"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "4d9d059bc49a120e0ebe4387b73aff27"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {
                        "WithdrawMsg": {
                            "content": "WithdrawMsg{ uint64 chainid; uint64 seqnum; address receiver; address token; uint256 amount; bytes32 refid;}"
                        },
                        "CelerBridgeDataNoToken": {
                            "content": "CelerBridgeDataNoToken{ address receiverAddress; uint64 toChainId; uint32 maxSlippage; uint64 nonce; bytes32 metadata;}"
                        },
                        "CelerBridgeData": {
                            "content": "CelerBridgeData{ address token; address receiverAddress; uint64 toChainId; uint32 maxSlippage; uint64 nonce; bytes32 metadata;}"
                        }
                    },
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "ERC20": "SafeTransferLib"
                    }
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "ICelerStorageWrapper.setAddressForTransferId": "6f2cd33bbecfab95376085358c737095",
                "ICBridge.send": "ef4184daf6b77d6f4c27869b2172a81f",
                "ERC20.safeTransferFrom": "f59cf721ba6479ab2b5aa8ba2685eff0",
                "ICelerStorageWrapper.getAddressFromTransferId": "d02fe0c2b6e2e4e95e0d0044c3ed0328",
                "ICBridge.withdraws": "84f16d6d3d854ca77571ad7b6e211ef7",
                "CelerV2Impl.decWithdrawMsg": "4d9d059bc49a120e0ebe4387b73aff27",
                "ICBridge.withdraw": "ade427e890d369b006d37e8f3b63fc5f",
                "CelerV2Impl.isSocketGatewayOwner": "6aa94456738d60c2daad284eb4ea5c71",
                "ICelerStorageWrapper.deleteTransferId": "27a177f7509bb250fa2e2805a40ef956",
                "Pb.fromBytes": "134a077a080f080f723fbcb737b91817",
                "Pb._address": "ba826aa4fec4b34f115fecc3f7e73086",
                "Pb._uint256": "1c9557021bb3469171d6987d47ce84a0",
                "Pb._bytes32": "7e1473695696307c4094a31343f85c29"
            },
            "md5": "da1902d824466425d49bad1d112a5b6a"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\cbridge\\CelerStorageWrapper.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\cbridge\\CelerStorageWrapper.sol",
            "filename": "CelerStorageWrapper.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\errors\\SocketErrors.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "OnlySocketGateway": {
                            "original_name": "OnlySocketGateway",
                            "type": {
                                "__CT__": true,
                                "value": 15
                            }
                        },
                        "TransferIdExists": {
                            "original_name": "TransferIdExists",
                            "type": {
                                "__CT__": true,
                                "value": 15
                            }
                        },
                        "TransferIdDoesnotExist": {
                            "original_name": "TransferIdDoesnotExist",
                            "type": {
                                "__CT__": true,
                                "value": 15
                            }
                        }
                    }
                }
            },
            "contracts": {
                "CelerStorageWrapper": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {
                        "socketGateway": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public immutable socketGateway;"
                        },
                        "transferIdMapping": {
                            "type": "mapping(bytes32 => address)",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(bytes32 => address) private transferIdMapping;"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (address _socketGateway){ socketGateway = _socketGateway;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_socketGateway"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "socketGateway",
                                        "",
                                        "CelerStorageWrapper"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "socketGateway",
                                        "",
                                        "CelerStorageWrapper"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "8e09a165dd0c4bee1e5ad633fdff99ea"
                            }
                        ],
                        "setAddressForTransferId": [
                            {
                                "visibility": "external",
                                "content": "function setAddressForTransferId( bytes32 transferId, address transferIdAddress ) external{ if (msg.sender != socketGateway){ revert OnlySocketGateway();} if (transferIdMapping[transferId] != address(0)){ revert TransferIdExists();} transferIdMapping[transferId] = transferIdAddress;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "transferId"
                                    },
                                    {
                                        "type": "address",
                                        "name": "transferIdAddress"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "socketGateway",
                                        "",
                                        "CelerStorageWrapper"
                                    ],
                                    [
                                        "transferIdMapping",
                                        "",
                                        "CelerStorageWrapper"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "transferIdMapping",
                                        "",
                                        "CelerStorageWrapper"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "CelerStorageWrapper.TransferIdExists",
                                        "CelerStorageWrapper.OnlySocketGateway"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "195fc10959aef4655488d393103e87d8"
                            }
                        ],
                        "deleteTransferId": [
                            {
                                "visibility": "external",
                                "content": "function deleteTransferId(bytes32 transferId) external{ if (msg.sender != socketGateway){ revert OnlySocketGateway();} if (transferIdMapping[transferId] == address(0)){ revert TransferIdDoesnotExist();} delete transferIdMapping[transferId];}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "transferId"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "socketGateway",
                                        "",
                                        "CelerStorageWrapper"
                                    ],
                                    [
                                        "transferIdMapping",
                                        "",
                                        "CelerStorageWrapper"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "CelerStorageWrapper.TransferIdDoesnotExist",
                                        "CelerStorageWrapper.OnlySocketGateway"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "d55940d6d4b8e79b6e1a6f1299576911"
                            }
                        ],
                        "getAddressFromTransferId": [
                            {
                                "visibility": "external",
                                "content": "function getAddressFromTransferId( bytes32 transferId ) external view returns (address){ return transferIdMapping[transferId];}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "transferId"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "transferIdMapping",
                                        "",
                                        "CelerStorageWrapper"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "10f4e2d8e14614555002e1546ef0c2fd"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "cd41ae28af6a89fc8f070528265846df"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\cctp\\interfaces\\cctp.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\cctp\\interfaces\\cctp.sol",
            "filename": "cctp.sol",
            "imported_contracts": {},
            "contracts": {
                "TokenMessenger": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "depositForBurn": [
                            {
                                "visibility": "external",
                                "content": "function depositForBurn( uint256 amount, uint32 destinationDomain, bytes32 mintRecipient, address burnToken ) external returns (uint64 _nonce);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "uint32",
                                        "name": "destinationDomain"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "mintRecipient"
                                    },
                                    {
                                        "type": "address",
                                        "name": "burnToken"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint64",
                                        "name": "_nonce"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "180fb26590b175bfde82ccf2eded48a7"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "4e91c97963635a7751a935018bf8029d"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\cctp\\Cctp.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\cctp\\Cctp.sol",
            "filename": "Cctp.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\cctp\\interfaces\\cctp.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\utils\\SafeTransferLib.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "SafeTransferLib": {
                            "original_name": "SafeTransferLib",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\tokens\\ERC20.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "ERC20": {
                            "original_name": "ERC20",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\static\\RouteIdentifiers.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "CCTP": {
                            "original_name": "CCTP",
                            "type": {
                                "__CT__": true,
                                "value": 18
                            }
                        }
                    }
                }
            },
            "contracts": {
                "CctpImpl": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "BridgeImplBase"
                    ],
                    "state_variables": {
                        "cctpIndentifier": {
                            "type": "bytes32",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "CCTP",
                            "content": "bytes32 public immutable cctpIndentifier = CCTP;"
                        },
                        "CCTP_ERC20_EXTERNAL_BRIDGE_FUNCTION_SELECTOR": {
                            "type": "bytes4",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "bytes4( keccak256( \"bridgeERC20To(uint256, bytes32, address, address, uint256, uint32, uint256)\" ) )",
                            "content": "bytes4 public immutable CCTP_ERC20_EXTERNAL_BRIDGE_FUNCTION_SELECTOR = bytes4( keccak256( \"bridgeERC20To(uint256, bytes32, address, address, uint256, uint32, uint256)\" ) );"
                        },
                        "CCTP_SWAP_BRIDGE_SELECTOR": {
                            "type": "bytes4",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "bytes4( keccak256( \"swapAndBridge(uint32, bytes, (address, uint32, uint256, uint256, bytes32))\" ) )",
                            "content": "bytes4 public immutable CCTP_SWAP_BRIDGE_SELECTOR = bytes4( keccak256( \"swapAndBridge(uint32, bytes, (address, uint32, uint256, uint256, bytes32))\" ) );"
                        },
                        "tokenMessenger": {
                            "type": "TokenMessenger",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": null,
                            "content": "TokenMessenger public immutable tokenMessenger;"
                        },
                        "feeCollector": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public immutable feeCollector;"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor ( address _tokenMessenger, address _feeCollector, address _socketGateway, address _socketDeployFactory ) BridgeImplBase(_socketGateway, _socketDeployFactory){ tokenMessenger = TokenMessenger(_tokenMessenger); feeCollector = _feeCollector;}",
                                "modifiers": [
                                    "BridgeImplBase(_socketGateway, _socketDeployFactory)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_tokenMessenger"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_feeCollector"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_socketGateway"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_socketDeployFactory"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "tokenMessenger",
                                        "",
                                        "CctpImpl"
                                    ],
                                    [
                                        "feeCollector",
                                        "",
                                        "CctpImpl"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "tokenMessenger",
                                        "",
                                        "CctpImpl"
                                    ],
                                    [
                                        "feeCollector",
                                        "",
                                        "CctpImpl"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "4ea78679d7bbf7f06979f7837e935141"
                            }
                        ],
                        "bridgeAfterSwap": [
                            {
                                "visibility": "external",
                                "content": "function bridgeAfterSwap( uint256 amount, bytes calldata bridgeData ) external payable override{ CctpData memory cctpData = abi.decode(bridgeData, (CctpData)); if (cctpData.token == NATIVE_TOKEN_ADDRESS){ revert(\"Native token not supported\");} else{ ERC20(cctpData.token).transfer(feeCollector, cctpData.feeAmount); tokenMessenger.depositForBurn( amount - cctpData.feeAmount, cctpData.destinationDomain, bytes32(uint256(uint160(cctpData.receiverAddress))), cctpData.token );} emit SocketBridge( amount, cctpData.token, cctpData.toChainId, cctpIndentifier, msg.sender, cctpData.receiverAddress, cctpData.metadata );}",
                                "modifiers": [
                                    "payable",
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "bridgeData"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "cctpIndentifier",
                                        "",
                                        "CctpImpl"
                                    ],
                                    [
                                        "tokenMessenger",
                                        "",
                                        "CctpImpl"
                                    ],
                                    [
                                        "feeCollector",
                                        "",
                                        "CctpImpl"
                                    ],
                                    [
                                        "NATIVE_TOKEN_ADDRESS",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "TokenMessenger.depositForBurn",
                                        "CctpImpl.SocketBridge",
                                        "CctpImpl.ERC20"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "52dde9a34303cd48aebc80cca44097cb"
                            }
                        ],
                        "swapAndBridge": [
                            {
                                "visibility": "external",
                                "content": "function swapAndBridge( uint32 swapId, bytes calldata swapData, CctoDataNoToken calldata cctpData ) external payable{ (bool success, bytes memory result) = socketRoute .getRoute(swapId) .delegatecall(swapData); if (!success){ assembly{ revert(add(result, 32), mload(result))}} (uint256 bridgeAmount, address token) = abi.decode( result, (uint256, address) ); if (token == NATIVE_TOKEN_ADDRESS){ revert(\"Native token not supported\");} else{ ERC20(token).transfer(feeCollector, cctpData.feeAmount); tokenMessenger.depositForBurn( bridgeAmount - cctpData.feeAmount, cctpData.destinationDomain, bytes32(uint256(uint160(cctpData.receiverAddress))), token );} emit SocketBridge( bridgeAmount, token, cctpData.toChainId, cctpIndentifier, msg.sender, cctpData.receiverAddress, cctpData.metadata );}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint32",
                                        "name": "swapId"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "swapData"
                                    },
                                    {
                                        "type": "CctoDataNoToken calldata",
                                        "name": "cctpData"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "cctpIndentifier",
                                        "",
                                        "CctpImpl"
                                    ],
                                    [
                                        "tokenMessenger",
                                        "",
                                        "CctpImpl"
                                    ],
                                    [
                                        "feeCollector",
                                        "",
                                        "CctpImpl"
                                    ],
                                    [
                                        "NATIVE_TOKEN_ADDRESS",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ],
                                    [
                                        "socketRoute",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "CctpImpl.ERC20",
                                        "TokenMessenger.depositForBurn",
                                        "CctpImpl.SocketBridge",
                                        "socketRoute.getRoute"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "9ef15d7dc585999e18eda15b73c00eee"
                            }
                        ],
                        "bridgeERC20To": [
                            {
                                "visibility": "external",
                                "content": "function bridgeERC20To( uint256 amount, bytes32 metadata, address receiverAddress, address token, uint256 toChainId, uint32 destinationDomain, uint256 feeAmount ) external payable{ ERC20 tokenInstance = ERC20(token); tokenInstance.safeTransferFrom(msg.sender, socketGateway, amount); tokenInstance.transfer(feeCollector, feeAmount); tokenMessenger.depositForBurn( amount - feeAmount, destinationDomain, bytes32(uint256(uint160(receiverAddress))), token ); emit SocketBridge( amount, token, toChainId, cctpIndentifier, msg.sender, receiverAddress, metadata );}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "metadata"
                                    },
                                    {
                                        "type": "address",
                                        "name": "receiverAddress"
                                    },
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "toChainId"
                                    },
                                    {
                                        "type": "uint32",
                                        "name": "destinationDomain"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "feeAmount"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "cctpIndentifier",
                                        "",
                                        "CctpImpl"
                                    ],
                                    [
                                        "tokenMessenger",
                                        "",
                                        "CctpImpl"
                                    ],
                                    [
                                        "feeCollector",
                                        "",
                                        "CctpImpl"
                                    ],
                                    [
                                        "socketGateway",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20.transfer",
                                        "TokenMessenger.depositForBurn",
                                        "CctpImpl.SocketBridge",
                                        "ERC20.safeTransferFrom",
                                        "CctpImpl.ERC20"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "a5e3f736e805072c6f9a67646739f310"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {
                        "CctpData": {
                            "content": "CctpData{ address token; address receiverAddress; uint32 destinationDomain; uint256 toChainId; uint256 feeAmount; bytes32 metadata;}"
                        },
                        "CctoDataNoToken": {
                            "content": "CctoDataNoToken{ address receiverAddress; uint32 destinationDomain; uint256 toChainId; uint256 feeAmount; bytes32 metadata;}"
                        }
                    },
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "ERC20": "SafeTransferLib"
                    }
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "TokenMessenger.depositForBurn": "180fb26590b175bfde82ccf2eded48a7",
                "ERC20.safeTransferFrom": "f59cf721ba6479ab2b5aa8ba2685eff0",
                "ERC20.transfer": "106c99c210292ba876e75685ad2beb0c"
            },
            "md5": "3cfa83029d08381ea29d178fb86ab0b7"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\connnext\\Connext.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\connnext\\Connext.sol",
            "filename": "Connext.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\utils\\SafeTransferLib.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "SafeTransferLib": {
                            "original_name": "SafeTransferLib",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\tokens\\ERC20.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "ERC20": {
                            "original_name": "ERC20",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "BridgeImplBase": {
                            "original_name": "BridgeImplBase",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\static\\RouteIdentifiers.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "CONNEXT": {
                            "original_name": "CONNEXT",
                            "type": {
                                "__CT__": true,
                                "value": 18
                            }
                        }
                    }
                }
            },
            "contracts": {
                "IConnextHandler": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "xcall": [
                            {
                                "visibility": "external",
                                "content": "function xcall( uint32 destination, address recipient, address tokenAddress, address delegate, uint256 amount, uint256 slippage, bytes memory callData ) external payable returns (bytes32);",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint32",
                                        "name": "destination"
                                    },
                                    {
                                        "type": "address",
                                        "name": "recipient"
                                    },
                                    {
                                        "type": "address",
                                        "name": "tokenAddress"
                                    },
                                    {
                                        "type": "address",
                                        "name": "delegate"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "slippage"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "callData"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": true,
                                "md5": "6344334419fba37b28b6ef285cb2107a"
                            },
                            {
                                "visibility": "external",
                                "content": "function xcall( uint32 _destination, address _to, address _asset, address _delegate, uint256 _amount, uint256 _slippage, bytes calldata _callData, uint256 _relayerFee ) external returns (bytes32);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint32",
                                        "name": "_destination"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_to"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_asset"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_delegate"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_amount"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_slippage"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "_callData"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_relayerFee"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "5ea1740ecac663dd84298c27b01c68d6"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                },
                "WETH": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "deposit": [
                            {
                                "visibility": "external",
                                "content": "function deposit() external payable;",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": true,
                                "md5": "4f2eec90abd519258d97a4283a54e2f1"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                },
                "ConnextImpl": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "BridgeImplBase"
                    ],
                    "state_variables": {
                        "connextIndetifier": {
                            "type": "bytes32",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "CONNEXT",
                            "content": "bytes32 public immutable connextIndetifier = CONNEXT;"
                        },
                        "wethAddress": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public immutable wethAddress;"
                        },
                        "CONNEXT_ERC20_EXTERNAL_BRIDGE_FUNCTION_SELECTOR": {
                            "type": "bytes4",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "bytes4( keccak256( \"bridgeERC20To(uint256, uint256, uint256, uint256, uint32, address, address, bytes32, bytes)\" ) )",
                            "content": "bytes4 public immutable CONNEXT_ERC20_EXTERNAL_BRIDGE_FUNCTION_SELECTOR = bytes4( keccak256( \"bridgeERC20To(uint256, uint256, uint256, uint256, uint32, address, address, bytes32, bytes)\" ) );"
                        },
                        "CONNECT_NATIVE_EXTERNAL_BRIDGE_FUNCTION_SELECTOR": {
                            "type": "bytes4",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "bytes4( keccak256( \"bridgeNativeTo(uint256, uint256, uint256, uint256, uint32, address, bytes32, bytes)\" ) )",
                            "content": "bytes4 public immutable CONNECT_NATIVE_EXTERNAL_BRIDGE_FUNCTION_SELECTOR = bytes4( keccak256( \"bridgeNativeTo(uint256, uint256, uint256, uint256, uint32, address, bytes32, bytes)\" ) );"
                        },
                        "CONNEXT_SWAP_BRIDGE_SELECTOR": {
                            "type": "bytes4",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "bytes4( keccak256( \"swapAndBridge(uint32, bytes, (uint256, uint256, uint256, uint32, address, bytes32, bytes))\" ) )",
                            "content": "bytes4 public immutable CONNEXT_SWAP_BRIDGE_SELECTOR = bytes4( keccak256( \"swapAndBridge(uint32, bytes, (uint256, uint256, uint256, uint32, address, bytes32, bytes))\" ) );"
                        },
                        "router": {
                            "type": "IConnextHandler",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": null,
                            "content": "IConnextHandler public immutable router;"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor ( address _router, address _wethAddress, address _socketGateway, address _socketDeployFactory ) BridgeImplBase(_socketGateway, _socketDeployFactory){ router = IConnextHandler(_router); wethAddress = _wethAddress;}",
                                "modifiers": [
                                    "BridgeImplBase(_socketGateway, _socketDeployFactory)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_router"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_wethAddress"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_socketGateway"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_socketDeployFactory"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "wethAddress",
                                        "",
                                        "ConnextImpl"
                                    ],
                                    [
                                        "router",
                                        "",
                                        "ConnextImpl"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "wethAddress",
                                        "",
                                        "ConnextImpl"
                                    ],
                                    [
                                        "router",
                                        "",
                                        "ConnextImpl"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "f09d950f2fd4104a0314ebec66fcf16d"
                            }
                        ],
                        "bridgeAfterSwap": [
                            {
                                "visibility": "external",
                                "content": "function bridgeAfterSwap( uint256 amount, bytes calldata bridgeData ) external payable override{ ConnextBridgeData memory connextBridgeData = abi.decode( bridgeData, (ConnextBridgeData) ); if (connextBridgeData.token == NATIVE_TOKEN_ADDRESS){ WETH(wethAddress).deposit{ value: amount} ();} address token = connextBridgeData.token == NATIVE_TOKEN_ADDRESS ? wethAddress : connextBridgeData.token; if (amount > ERC20(token).allowance(address(this), address(router))){ ERC20(token).safeApprove(address(router), UINT256_MAX);} router.xcall( connextBridgeData.dstChainDomain, connextBridgeData.receiverAddress, token, connextBridgeData.delegate, amount - connextBridgeData.relayerFee, connextBridgeData.slippage, connextBridgeData.callData, connextBridgeData.relayerFee ); emit SocketBridge( amount, connextBridgeData.token, connextBridgeData.toChainId, connextIndetifier, connextBridgeData.delegate, connextBridgeData.receiverAddress, connextBridgeData.metadata );}",
                                "modifiers": [
                                    "payable",
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "bridgeData"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "connextIndetifier",
                                        "",
                                        "ConnextImpl"
                                    ],
                                    [
                                        "wethAddress",
                                        "",
                                        "ConnextImpl"
                                    ],
                                    [
                                        "router",
                                        "",
                                        "ConnextImpl"
                                    ],
                                    [
                                        "allowance",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\tokens\\ERC20.sol",
                                        "ERC20"
                                    ],
                                    [
                                        "NATIVE_TOKEN_ADDRESS",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ConnextImpl.SocketBridge",
                                        "ConnextImpl.ERC20",
                                        "IConnextHandler.xcall"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "d0ce79b07aaeb5215d8e0d54c0b3bbcb"
                            }
                        ],
                        "swapAndBridge": [
                            {
                                "visibility": "external",
                                "content": "function swapAndBridge( uint32 swapId, bytes calldata swapData, ConnextBridgeNoTokenData calldata connextBridgeData ) external payable{ (bool success, bytes memory result) = socketRoute .getRoute(swapId) .delegatecall(swapData); if (!success){ assembly{ revert(add(result, 32), mload(result))}} (uint256 bridgeAmount, address token) = abi.decode( result, (uint256, address) ); if (token == NATIVE_TOKEN_ADDRESS){ WETH(wethAddress).deposit{ value: bridgeAmount} ();} address bridgingToken = token == NATIVE_TOKEN_ADDRESS ? wethAddress : token; if ( bridgeAmount > ERC20(bridgingToken).allowance(address(this), address(router)) ){ ERC20(bridgingToken).safeApprove(address(router), UINT256_MAX);} router.xcall( connextBridgeData.dstChainDomain, connextBridgeData.receiverAddress, bridgingToken, connextBridgeData.delegate, bridgeAmount - connextBridgeData.relayerFee, connextBridgeData.slippage, connextBridgeData.callData, connextBridgeData.relayerFee ); emit SocketBridge( bridgeAmount, token, connextBridgeData.toChainId, connextIndetifier, connextBridgeData.delegate, connextBridgeData.receiverAddress, connextBridgeData.metadata );}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint32",
                                        "name": "swapId"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "swapData"
                                    },
                                    {
                                        "type": "ConnextBridgeNoTokenData calldata",
                                        "name": "connextBridgeData"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "connextIndetifier",
                                        "",
                                        "ConnextImpl"
                                    ],
                                    [
                                        "wethAddress",
                                        "",
                                        "ConnextImpl"
                                    ],
                                    [
                                        "router",
                                        "",
                                        "ConnextImpl"
                                    ],
                                    [
                                        "allowance",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\tokens\\ERC20.sol",
                                        "ERC20"
                                    ],
                                    [
                                        "NATIVE_TOKEN_ADDRESS",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ],
                                    [
                                        "socketRoute",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ConnextImpl.SocketBridge",
                                        "ConnextImpl.ERC20",
                                        "socketRoute.getRoute",
                                        "IConnextHandler.xcall"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "1d86077427386f95d0669923c1cc72e2"
                            }
                        ],
                        "bridgeERC20To": [
                            {
                                "visibility": "external",
                                "content": "function bridgeERC20To( uint256 amount, ConnextBridgeData calldata connextBridgeData ) external payable{ ERC20(connextBridgeData.token).safeTransferFrom( msg.sender, socketGateway, amount ); if ( amount > ERC20(connextBridgeData.token).allowance( address(this), address(router) ) ){ ERC20(connextBridgeData.token).safeApprove( address(router), UINT256_MAX );} router.xcall( connextBridgeData.dstChainDomain, connextBridgeData.receiverAddress, connextBridgeData.token, connextBridgeData.delegate, amount - connextBridgeData.relayerFee, connextBridgeData.slippage, connextBridgeData.callData, connextBridgeData.relayerFee ); emit SocketBridge( amount, connextBridgeData.token, connextBridgeData.toChainId, connextIndetifier, connextBridgeData.delegate, connextBridgeData.receiverAddress, connextBridgeData.metadata );}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "ConnextBridgeData calldata",
                                        "name": "connextBridgeData"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "connextIndetifier",
                                        "",
                                        "ConnextImpl"
                                    ],
                                    [
                                        "router",
                                        "",
                                        "ConnextImpl"
                                    ],
                                    [
                                        "allowance",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\tokens\\ERC20.sol",
                                        "ERC20"
                                    ],
                                    [
                                        "socketGateway",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ConnextImpl.SocketBridge",
                                        "ConnextImpl.ERC20",
                                        "IConnextHandler.xcall"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "afdb611358e3f74477a13a9a59c23879"
                            }
                        ],
                        "bridgeNativeTo": [
                            {
                                "visibility": "external",
                                "content": "function bridgeNativeTo( uint256 amount, uint256 toChainId, uint256 slippage, uint256 relayerFee, uint32 dstChainDomain, address receiverAddress, bytes32 metadata, address delegate, bytes memory callData ) external payable{ WETH(wethAddress).deposit{ value: amount} (); if ( amount > ERC20(wethAddress).allowance(address(this), address(router)) ){ ERC20(wethAddress).safeApprove(address(router), UINT256_MAX);} router.xcall( dstChainDomain, receiverAddress, wethAddress, delegate, amount - relayerFee, slippage, callData, relayerFee ); emit SocketBridge( amount, NATIVE_TOKEN_ADDRESS, toChainId, connextIndetifier, delegate, receiverAddress, metadata );}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "toChainId"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "slippage"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "relayerFee"
                                    },
                                    {
                                        "type": "uint32",
                                        "name": "dstChainDomain"
                                    },
                                    {
                                        "type": "address",
                                        "name": "receiverAddress"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "metadata"
                                    },
                                    {
                                        "type": "address",
                                        "name": "delegate"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "callData"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "connextIndetifier",
                                        "",
                                        "ConnextImpl"
                                    ],
                                    [
                                        "wethAddress",
                                        "",
                                        "ConnextImpl"
                                    ],
                                    [
                                        "router",
                                        "",
                                        "ConnextImpl"
                                    ],
                                    [
                                        "allowance",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\tokens\\ERC20.sol",
                                        "ERC20"
                                    ],
                                    [
                                        "NATIVE_TOKEN_ADDRESS",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ConnextImpl.SocketBridge",
                                        "ConnextImpl.ERC20",
                                        "IConnextHandler.xcall"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "7e0e31bb19cb45a82a78e08298f22048"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {
                        "ConnextBridgeNoTokenData": {
                            "content": "ConnextBridgeNoTokenData{ uint256 toChainId; uint256 slippage; uint256 relayerFee; uint32 dstChainDomain; address receiverAddress; bytes32 metadata; bytes callData; address delegate;}"
                        },
                        "ConnextBridgeData": {
                            "content": "ConnextBridgeData{ uint256 toChainId; uint256 slippage; uint256 relayerFee; uint32 dstChainDomain; address token; address receiverAddress; bytes32 metadata; bytes callData; address delegate;}"
                        }
                    },
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "ERC20": "SafeTransferLib"
                    }
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "IConnextHandler.xcall": "6344334419fba37b28b6ef285cb2107a"
            },
            "md5": "553d74fdf8aee73b0de2e8c7ff56f6d1"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\gnosis-native\\interfaces\\gnosisBirdge.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\gnosis-native\\interfaces\\gnosisBirdge.sol",
            "filename": "gnosisBirdge.sol",
            "imported_contracts": {},
            "contracts": {
                "IGnosisXdaiBridge": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "relayTokens": [
                            {
                                "visibility": "external",
                                "content": "function relayTokens(address _receiver, uint256 _amount) external payable;",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_receiver"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": true,
                                "md5": "e753db4bd9382724bdc657f70ecbe2db"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                },
                "IGnosisOmniBridge": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "relayTokens": [
                            {
                                "visibility": "external",
                                "content": "function relayTokens( address token, address _receiver, uint256 _value ) external payable;",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_receiver"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_value"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": true,
                                "md5": "0783a740041ca27e5f5c93cfc639d36f"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                },
                "IGnosisWethOmniBridgeHelper": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "wrapAndRelayTokens": [
                            {
                                "visibility": "external",
                                "content": "function wrapAndRelayTokens(address _receiver) external payable;",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_receiver"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": true,
                                "md5": "3892832e32536b71cf5ced2d60ee35b4"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "1cd01e807c1dfbe30f6713e64ad3c195"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\gnosis-native\\gnosisNativeImpl.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\gnosis-native\\gnosisNativeImpl.sol",
            "filename": "gnosisNativeImpl.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\gnosis-native\\interfaces\\gnosisBirdge.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "IGnosisXdaiBridge": {
                            "original_name": "IGnosisXdaiBridge",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        },
                        "IGnosisOmniBridge": {
                            "original_name": "IGnosisOmniBridge",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        },
                        "IGnosisWethOmniBridgeHelper": {
                            "original_name": "IGnosisWethOmniBridgeHelper",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\utils\\SafeTransferLib.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "SafeTransferLib": {
                            "original_name": "SafeTransferLib",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\tokens\\ERC20.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "ERC20": {
                            "original_name": "ERC20",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\static\\RouteIdentifiers.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "GNOSIS_NATIVE_BRIDGE": {
                            "original_name": "GNOSIS_NATIVE_BRIDGE",
                            "type": {
                                "__CT__": true,
                                "value": 18
                            }
                        }
                    }
                }
            },
            "contracts": {
                "GnosisNativeBridgeImpl": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "BridgeImplBase"
                    ],
                    "state_variables": {
                        "GnosisNativeBridgeIdentifier": {
                            "type": "bytes32",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "GNOSIS_NATIVE_BRIDGE",
                            "content": "bytes32 public immutable GnosisNativeBridgeIdentifier = GNOSIS_NATIVE_BRIDGE;"
                        },
                        "GNOSIS_NATIVE_BRIDGE_ERC20_EXTERNAL_BRIDGE_FUNCTION_SELECTOR": {
                            "type": "bytes4",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "bytes4( keccak256( \"bridgeERC20To(bytes32, address, address, address, uint256, uint256)\" ) )",
                            "content": "bytes4 public immutable GNOSIS_NATIVE_BRIDGE_ERC20_EXTERNAL_BRIDGE_FUNCTION_SELECTOR = bytes4( keccak256( \"bridgeERC20To(bytes32, address, address, address, uint256, uint256)\" ) );"
                        },
                        "GNOSIS_NATIVE_BRIDGE_NATIVE_EXTERNAL_BRIDGE_FUNCTION_SELECTOR": {
                            "type": "bytes4",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "bytes4(keccak256(\"bridgeNativeTo(bytes32, address, uint256, uint256)\"))",
                            "content": "bytes4 public immutable GNOSIS_NATIVE_BRIDGE_NATIVE_EXTERNAL_BRIDGE_FUNCTION_SELECTOR = bytes4(keccak256(\"bridgeNativeTo(bytes32, address, uint256, uint256)\"));"
                        },
                        "GNOSIS_NATIVE_BRIDGE_SWAP_BRIDGE_SELECTOR": {
                            "type": "bytes4",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "bytes4( keccak256( \"swapAndBridge(uint32, bytes, bytes32, address, address, uint256)\" ) )",
                            "content": "bytes4 public immutable GNOSIS_NATIVE_BRIDGE_SWAP_BRIDGE_SELECTOR = bytes4( keccak256( \"swapAndBridge(uint32, bytes, bytes32, address, address, uint256)\" ) );"
                        },
                        "gnosisXdaiBridge": {
                            "type": "IGnosisXdaiBridge",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": null,
                            "content": "IGnosisXdaiBridge private immutable gnosisXdaiBridge;"
                        },
                        "gnosisOmniBridge": {
                            "type": "IGnosisOmniBridge",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": null,
                            "content": "IGnosisOmniBridge private immutable gnosisOmniBridge;"
                        },
                        "gnosisWethOmniBridgeHelper": {
                            "type": "IGnosisWethOmniBridgeHelper",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": null,
                            "content": "IGnosisWethOmniBridgeHelper private immutable gnosisWethOmniBridgeHelper;"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor ( address _gnosisXdaiBridge, address _gnosisOmniBridge, address _gnosisWethOmniBridgeHelper, address _socketGateway, address _socketDeployFactory ) BridgeImplBase(_socketGateway, _socketDeployFactory){ gnosisXdaiBridge = IGnosisXdaiBridge(_gnosisXdaiBridge); gnosisOmniBridge = IGnosisOmniBridge(_gnosisOmniBridge); gnosisWethOmniBridgeHelper = IGnosisWethOmniBridgeHelper( _gnosisWethOmniBridgeHelper );}",
                                "modifiers": [
                                    "BridgeImplBase(_socketGateway, _socketDeployFactory)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_gnosisXdaiBridge"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_gnosisOmniBridge"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_gnosisWethOmniBridgeHelper"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_socketGateway"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_socketDeployFactory"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "gnosisXdaiBridge",
                                        "",
                                        "GnosisNativeBridgeImpl"
                                    ],
                                    [
                                        "gnosisOmniBridge",
                                        "",
                                        "GnosisNativeBridgeImpl"
                                    ],
                                    [
                                        "gnosisWethOmniBridgeHelper",
                                        "",
                                        "GnosisNativeBridgeImpl"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "gnosisXdaiBridge",
                                        "",
                                        "GnosisNativeBridgeImpl"
                                    ],
                                    [
                                        "gnosisOmniBridge",
                                        "",
                                        "GnosisNativeBridgeImpl"
                                    ],
                                    [
                                        "gnosisWethOmniBridgeHelper",
                                        "",
                                        "GnosisNativeBridgeImpl"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "1f0c8e4ac5d61ad00bbee1e3cbf3ee54"
                            }
                        ],
                        "bridgeERC20To": [
                            {
                                "visibility": "external",
                                "content": "function bridgeERC20To( bytes32 metadata, address receiverAddress, address fromTokenAddress, address toTokenAddress, uint256 toChainId, uint256 amount ) external payable{ ERC20(fromTokenAddress).safeTransferFrom( msg.sender, socketGateway, amount ); if (toTokenAddress == NATIVE_TOKEN_ADDRESS){ if ( amount > ERC20(fromTokenAddress).allowance( address(this), address(gnosisXdaiBridge) ) ){ ERC20(fromTokenAddress).safeApprove( address(gnosisXdaiBridge), UINT256_MAX );} gnosisXdaiBridge.relayTokens(receiverAddress, amount);} else{ if ( amount > ERC20(fromTokenAddress).allowance( address(this), address(gnosisOmniBridge) ) ){ ERC20(fromTokenAddress).safeApprove( address(gnosisOmniBridge), UINT256_MAX );} gnosisOmniBridge.relayTokens( fromTokenAddress, receiverAddress, amount );} emit SocketBridge( amount, fromTokenAddress, toChainId, GnosisNativeBridgeIdentifier, msg.sender, receiverAddress, metadata );}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "metadata"
                                    },
                                    {
                                        "type": "address",
                                        "name": "receiverAddress"
                                    },
                                    {
                                        "type": "address",
                                        "name": "fromTokenAddress"
                                    },
                                    {
                                        "type": "address",
                                        "name": "toTokenAddress"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "toChainId"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "GnosisNativeBridgeIdentifier",
                                        "",
                                        "GnosisNativeBridgeImpl"
                                    ],
                                    [
                                        "gnosisXdaiBridge",
                                        "",
                                        "GnosisNativeBridgeImpl"
                                    ],
                                    [
                                        "gnosisOmniBridge",
                                        "",
                                        "GnosisNativeBridgeImpl"
                                    ],
                                    [
                                        "NATIVE_TOKEN_ADDRESS",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ],
                                    [
                                        "socketGateway",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ],
                                    [
                                        "allowance",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\tokens\\ERC20.sol",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "GnosisNativeBridgeImpl.ERC20",
                                        "IGnosisXdaiBridge.relayTokens",
                                        "IGnosisOmniBridge.relayTokens",
                                        "GnosisNativeBridgeImpl.SocketBridge"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "e1818f17f6dbf7975f29fa72cf13bbd8"
                            }
                        ],
                        "bridgeNativeTo": [
                            {
                                "visibility": "external",
                                "content": "function bridgeNativeTo( bytes32 metadata, address receiverAddress, uint256 toChainId, uint256 amount ) external payable{ gnosisWethOmniBridgeHelper.wrapAndRelayTokens{ value: amount} ( receiverAddress ); emit SocketBridge( amount, NATIVE_TOKEN_ADDRESS, toChainId, GnosisNativeBridgeIdentifier, msg.sender, receiverAddress, metadata );}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "metadata"
                                    },
                                    {
                                        "type": "address",
                                        "name": "receiverAddress"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "toChainId"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "GnosisNativeBridgeIdentifier",
                                        "",
                                        "GnosisNativeBridgeImpl"
                                    ],
                                    [
                                        "gnosisWethOmniBridgeHelper",
                                        "",
                                        "GnosisNativeBridgeImpl"
                                    ],
                                    [
                                        "NATIVE_TOKEN_ADDRESS",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "GnosisNativeBridgeImpl.SocketBridge"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "cfc0c614b09dd6c94b91f9455ad2c197"
                            }
                        ],
                        "bridgeAfterSwap": [
                            {
                                "visibility": "external",
                                "content": "function bridgeAfterSwap( uint256 amount, bytes calldata bridgeData ) external payable override{ GnosisNativeBridgeData memory bridgeInfo = abi.decode( bridgeData, (GnosisNativeBridgeData) ); if (bridgeInfo.fromTokenAddress == NATIVE_TOKEN_ADDRESS){ gnosisWethOmniBridgeHelper.wrapAndRelayTokens{ value: amount} ( bridgeInfo.receiverAddress ); emit SocketBridge( amount, NATIVE_TOKEN_ADDRESS, bridgeInfo.toChainId, GnosisNativeBridgeIdentifier, msg.sender, bridgeInfo.receiverAddress, bridgeInfo.metadata );} else if (bridgeInfo.toTokenAddress == NATIVE_TOKEN_ADDRESS){ if ( amount > ERC20(bridgeInfo.fromTokenAddress).allowance( address(this), address(gnosisXdaiBridge) ) ){ ERC20(bridgeInfo.fromTokenAddress).safeApprove( address(gnosisXdaiBridge), UINT256_MAX );} gnosisXdaiBridge.relayTokens(bridgeInfo.receiverAddress, amount); emit SocketBridge( amount, bridgeInfo.fromTokenAddress, bridgeInfo.toChainId, GnosisNativeBridgeIdentifier, msg.sender, bridgeInfo.receiverAddress, bridgeInfo.metadata );} else{ if ( amount > ERC20(bridgeInfo.fromTokenAddress).allowance( address(this), address(gnosisOmniBridge) ) ){ ERC20(bridgeInfo.fromTokenAddress).safeApprove( address(gnosisOmniBridge), UINT256_MAX );} gnosisOmniBridge.relayTokens( bridgeInfo.fromTokenAddress, bridgeInfo.receiverAddress, amount ); emit SocketBridge( amount, bridgeInfo.fromTokenAddress, bridgeInfo.toChainId, GnosisNativeBridgeIdentifier, msg.sender, bridgeInfo.receiverAddress, bridgeInfo.metadata );}}",
                                "modifiers": [
                                    "payable",
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "bridgeData"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "GnosisNativeBridgeIdentifier",
                                        "",
                                        "GnosisNativeBridgeImpl"
                                    ],
                                    [
                                        "gnosisXdaiBridge",
                                        "",
                                        "GnosisNativeBridgeImpl"
                                    ],
                                    [
                                        "gnosisOmniBridge",
                                        "",
                                        "GnosisNativeBridgeImpl"
                                    ],
                                    [
                                        "gnosisWethOmniBridgeHelper",
                                        "",
                                        "GnosisNativeBridgeImpl"
                                    ],
                                    [
                                        "NATIVE_TOKEN_ADDRESS",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ],
                                    [
                                        "allowance",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\tokens\\ERC20.sol",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "GnosisNativeBridgeImpl.ERC20",
                                        "IGnosisXdaiBridge.relayTokens",
                                        "IGnosisOmniBridge.relayTokens",
                                        "GnosisNativeBridgeImpl.SocketBridge"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "1d3e70e07932f4cf47c4ec4fa198ecbb"
                            }
                        ],
                        "swapAndBridge": [
                            {
                                "visibility": "external",
                                "content": "function swapAndBridge( uint32 swapId, bytes calldata swapData, bytes32 metadata, address receiverAddress, address toTokenAddress, uint256 toChainId ) external payable{ (bool success, bytes memory result) = socketRoute .getRoute(swapId) .delegatecall(swapData); if (!success){ assembly{ revert(add(result, 32), mload(result))}} (uint256 bridgeAmount, address token) = abi.decode( result, (uint256, address) ); if (token == NATIVE_TOKEN_ADDRESS){ gnosisWethOmniBridgeHelper.wrapAndRelayTokens{ value: bridgeAmount} ( receiverAddress ); emit SocketBridge( bridgeAmount, NATIVE_TOKEN_ADDRESS, toChainId, GnosisNativeBridgeIdentifier, msg.sender, receiverAddress, metadata );} else if (toTokenAddress == NATIVE_TOKEN_ADDRESS){ if ( bridgeAmount > ERC20(token).allowance(address(this), address(gnosisXdaiBridge)) ){ ERC20(token).safeApprove( address(gnosisXdaiBridge), UINT256_MAX );} gnosisXdaiBridge.relayTokens(receiverAddress, bridgeAmount); emit SocketBridge( bridgeAmount, token, toChainId, GnosisNativeBridgeIdentifier, msg.sender, receiverAddress, metadata );} else{ if ( bridgeAmount > ERC20(token).allowance(address(this), address(gnosisOmniBridge)) ){ ERC20(token).safeApprove( address(gnosisOmniBridge), UINT256_MAX );} gnosisOmniBridge.relayTokens(token, receiverAddress, bridgeAmount); emit SocketBridge( bridgeAmount, token, toChainId, GnosisNativeBridgeIdentifier, msg.sender, receiverAddress, metadata );}}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint32",
                                        "name": "swapId"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "swapData"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "metadata"
                                    },
                                    {
                                        "type": "address",
                                        "name": "receiverAddress"
                                    },
                                    {
                                        "type": "address",
                                        "name": "toTokenAddress"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "toChainId"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "GnosisNativeBridgeIdentifier",
                                        "",
                                        "GnosisNativeBridgeImpl"
                                    ],
                                    [
                                        "gnosisXdaiBridge",
                                        "",
                                        "GnosisNativeBridgeImpl"
                                    ],
                                    [
                                        "gnosisOmniBridge",
                                        "",
                                        "GnosisNativeBridgeImpl"
                                    ],
                                    [
                                        "gnosisWethOmniBridgeHelper",
                                        "",
                                        "GnosisNativeBridgeImpl"
                                    ],
                                    [
                                        "NATIVE_TOKEN_ADDRESS",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ],
                                    [
                                        "socketRoute",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ],
                                    [
                                        "allowance",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\tokens\\ERC20.sol",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "IGnosisOmniBridge.relayTokens",
                                        "GnosisNativeBridgeImpl.ERC20",
                                        "IGnosisXdaiBridge.relayTokens",
                                        "GnosisNativeBridgeImpl.SocketBridge",
                                        "socketRoute.getRoute"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "09f8e32473180174305b84ab0df6e0dd"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {
                        "GnosisNativeBridgeData": {
                            "content": "GnosisNativeBridgeData{ bytes32 metadata; address receiverAddress; address fromTokenAddress; address toTokenAddress; uint256 toChainId; uint256 amount;}"
                        }
                    },
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "ERC20": "SafeTransferLib"
                    }
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "IGnosisOmniBridge.relayTokens": "e753db4bd9382724bdc657f70ecbe2db",
                "IGnosisXdaiBridge.relayTokens": "e753db4bd9382724bdc657f70ecbe2db"
            },
            "md5": "f362531d6c831ec3b3a384457edf50b7"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\hop\\interfaces\\amm.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\hop\\interfaces\\amm.sol",
            "filename": "amm.sol",
            "imported_contracts": {},
            "contracts": {
                "HopAMM": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "swapAndSend": [
                            {
                                "visibility": "external",
                                "content": "function swapAndSend( uint256 chainId, address recipient, uint256 amount, uint256 bonderFee, uint256 amountOutMin, uint256 deadline, uint256 destinationAmountOutMin, uint256 destinationDeadline ) external payable;",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "chainId"
                                    },
                                    {
                                        "type": "address",
                                        "name": "recipient"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "bonderFee"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amountOutMin"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "deadline"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "destinationAmountOutMin"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "destinationDeadline"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": true,
                                "md5": "25d6f6b7e7df5922669bf059bac52a21"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "35236b7e861dc9b01d577fdb075b9604"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\hop\\interfaces\\IHopL1Bridge.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\hop\\interfaces\\IHopL1Bridge.sol",
            "filename": "IHopL1Bridge.sol",
            "imported_contracts": {},
            "contracts": {
                "IHopL1Bridge": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "sendToL2": [
                            {
                                "visibility": "external",
                                "content": "function sendToL2( uint256 chainId, address recipient, uint256 amount, uint256 amountOutMin, uint256 deadline, address relayer, uint256 relayerFee ) external payable;",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "chainId"
                                    },
                                    {
                                        "type": "address",
                                        "name": "recipient"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amountOutMin"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "deadline"
                                    },
                                    {
                                        "type": "address",
                                        "name": "relayer"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "relayerFee"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": true,
                                "md5": "7a584294e489ad9347e46e7bfcf4fc46"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "0c22e6f87b5de71d4c819d1b432b3595"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\hop\\l1\\HopImplL1.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\hop\\l1\\HopImplL1.sol",
            "filename": "HopImplL1.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\hop\\interfaces\\IHopL1Bridge.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\utils\\SafeTransferLib.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "SafeTransferLib": {
                            "original_name": "SafeTransferLib",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\tokens\\ERC20.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "ERC20": {
                            "original_name": "ERC20",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "BridgeImplBase": {
                            "original_name": "BridgeImplBase",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\static\\RouteIdentifiers.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "HOP": {
                            "original_name": "HOP",
                            "type": {
                                "__CT__": true,
                                "value": 18
                            }
                        }
                    }
                }
            },
            "contracts": {
                "HopImplL1": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "BridgeImplBase"
                    ],
                    "state_variables": {
                        "HopIdentifier": {
                            "type": "bytes32",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "HOP",
                            "content": "bytes32 public immutable HopIdentifier = HOP;"
                        },
                        "HOP_L1_ERC20_EXTERNAL_BRIDGE_FUNCTION_SELECTOR": {
                            "type": "bytes4",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "bytes4( keccak256( \"bridgeERC20To(address, address, address, address, uint256, uint256, uint256, uint256, (uint256, bytes32))\" ) )",
                            "content": "bytes4 public immutable HOP_L1_ERC20_EXTERNAL_BRIDGE_FUNCTION_SELECTOR = bytes4( keccak256( \"bridgeERC20To(address, address, address, address, uint256, uint256, uint256, uint256, (uint256, bytes32))\" ) );"
                        },
                        "HOP_L1_NATIVE_EXTERNAL_BRIDGE_FUNCTION_SELECTOR": {
                            "type": "bytes4",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "bytes4( keccak256( \"bridgeNativeTo(address, address, address, uint256, uint256, uint256, uint256, uint256, bytes32)\" ) )",
                            "content": "bytes4 public immutable HOP_L1_NATIVE_EXTERNAL_BRIDGE_FUNCTION_SELECTOR = bytes4( keccak256( \"bridgeNativeTo(address, address, address, uint256, uint256, uint256, uint256, uint256, bytes32)\" ) );"
                        },
                        "HOP_L1_SWAP_BRIDGE_SELECTOR": {
                            "type": "bytes4",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "bytes4( keccak256( \"swapAndBridge(uint32, bytes, (address, address, address, uint256, uint256, uint256, uint256, bytes32))\" ) )",
                            "content": "bytes4 public immutable HOP_L1_SWAP_BRIDGE_SELECTOR = bytes4( keccak256( \"swapAndBridge(uint32, bytes, (address, address, address, uint256, uint256, uint256, uint256, bytes32))\" ) );"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor ( address _socketGateway, address _socketDeployFactory ) BridgeImplBase(_socketGateway, _socketDeployFactory){}",
                                "modifiers": [
                                    "BridgeImplBase(_socketGateway, _socketDeployFactory)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_socketGateway"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_socketDeployFactory"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c540f7904a2cec173bc26e32b01f2e6a"
                            }
                        ],
                        "bridgeAfterSwap": [
                            {
                                "visibility": "external",
                                "content": "function bridgeAfterSwap( uint256 amount, bytes calldata bridgeData ) external payable override{ HopData memory hopData = abi.decode(bridgeData, (HopData)); if (hopData.token == NATIVE_TOKEN_ADDRESS){ IHopL1Bridge(hopData.l1bridgeAddr).sendToL2{ value: amount} ( hopData.toChainId, hopData.receiverAddress, amount, hopData.amountOutMin, hopData.deadline, hopData.relayer, hopData.relayerFee );} else{ IHopL1Bridge(hopData.l1bridgeAddr).sendToL2( hopData.toChainId, hopData.receiverAddress, amount, hopData.amountOutMin, hopData.deadline, hopData.relayer, hopData.relayerFee );} emit SocketBridge( amount, hopData.token, hopData.toChainId, HopIdentifier, msg.sender, hopData.receiverAddress, hopData.metadata );}",
                                "modifiers": [
                                    "payable",
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "bridgeData"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "HopIdentifier",
                                        "",
                                        "HopImplL1"
                                    ],
                                    [
                                        "NATIVE_TOKEN_ADDRESS",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "HopImplL1.SocketBridge",
                                        "HopImplL1.IHopL1Bridge"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "ea4ba009e57ee70a28e3a9cb16aea6d7"
                            }
                        ],
                        "swapAndBridge": [
                            {
                                "visibility": "external",
                                "content": "function swapAndBridge( uint32 swapId, bytes calldata swapData, HopDataNoToken calldata hopData ) external payable{ (bool success, bytes memory result) = socketRoute .getRoute(swapId) .delegatecall(swapData); if (!success){ assembly{ revert(add(result, 32), mload(result))}} (uint256 bridgeAmount, address token) = abi.decode( result, (uint256, address) ); if (token == NATIVE_TOKEN_ADDRESS){ IHopL1Bridge(hopData.l1bridgeAddr).sendToL2{ value: bridgeAmount} ( hopData.toChainId, hopData.receiverAddress, bridgeAmount, hopData.amountOutMin, hopData.deadline, hopData.relayer, hopData.relayerFee );} else{ IHopL1Bridge(hopData.l1bridgeAddr).sendToL2( hopData.toChainId, hopData.receiverAddress, bridgeAmount, hopData.amountOutMin, hopData.deadline, hopData.relayer, hopData.relayerFee );} emit SocketBridge( bridgeAmount, token, hopData.toChainId, HopIdentifier, msg.sender, hopData.receiverAddress, hopData.metadata );}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint32",
                                        "name": "swapId"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "swapData"
                                    },
                                    {
                                        "type": "HopDataNoToken calldata",
                                        "name": "hopData"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "HopIdentifier",
                                        "",
                                        "HopImplL1"
                                    ],
                                    [
                                        "NATIVE_TOKEN_ADDRESS",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ],
                                    [
                                        "socketRoute",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "HopImplL1.SocketBridge",
                                        "HopImplL1.IHopL1Bridge",
                                        "socketRoute.getRoute"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "97dff755fbc01b791420c3a2f45cec8d"
                            }
                        ],
                        "bridgeERC20To": [
                            {
                                "visibility": "external",
                                "content": "function bridgeERC20To( address receiverAddress, address token, address l1bridgeAddr, address relayer, uint256 toChainId, uint256 amount, uint256 amountOutMin, uint256 relayerFee, HopERC20Data calldata hopData ) external payable{ ERC20 tokenInstance = ERC20(token); tokenInstance.safeTransferFrom(msg.sender, socketGateway, amount); IHopL1Bridge(l1bridgeAddr).sendToL2( toChainId, receiverAddress, amount, amountOutMin, hopData.deadline, relayer, relayerFee ); emit SocketBridge( amount, token, toChainId, HopIdentifier, msg.sender, receiverAddress, hopData.metadata );}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "receiverAddress"
                                    },
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "l1bridgeAddr"
                                    },
                                    {
                                        "type": "address",
                                        "name": "relayer"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "toChainId"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amountOutMin"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "relayerFee"
                                    },
                                    {
                                        "type": "HopERC20Data calldata",
                                        "name": "hopData"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "HopIdentifier",
                                        "",
                                        "HopImplL1"
                                    ],
                                    [
                                        "socketGateway",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "HopImplL1.ERC20",
                                        "ERC20.safeTransferFrom",
                                        "HopImplL1.SocketBridge",
                                        "HopImplL1.IHopL1Bridge"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "9dd89ad9e22b2028e81c5f07163019ac"
                            }
                        ],
                        "bridgeNativeTo": [
                            {
                                "visibility": "external",
                                "content": "function bridgeNativeTo( address receiverAddress, address l1bridgeAddr, address relayer, uint256 toChainId, uint256 amount, uint256 amountOutMin, uint256 relayerFee, uint256 deadline, bytes32 metadata ) external payable{ IHopL1Bridge(l1bridgeAddr).sendToL2{ value: amount} ( toChainId, receiverAddress, amount, amountOutMin, deadline, relayer, relayerFee ); emit SocketBridge( amount, NATIVE_TOKEN_ADDRESS, toChainId, HopIdentifier, msg.sender, receiverAddress, metadata );}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "receiverAddress"
                                    },
                                    {
                                        "type": "address",
                                        "name": "l1bridgeAddr"
                                    },
                                    {
                                        "type": "address",
                                        "name": "relayer"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "toChainId"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amountOutMin"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "relayerFee"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "deadline"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "metadata"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "HopIdentifier",
                                        "",
                                        "HopImplL1"
                                    ],
                                    [
                                        "NATIVE_TOKEN_ADDRESS",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "HopImplL1.SocketBridge",
                                        "HopImplL1.IHopL1Bridge"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "20633fdf1c02bb369f566271d738af5d"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {
                        "HopDataNoToken": {
                            "content": "HopDataNoToken{ address receiverAddress; address l1bridgeAddr; address relayer; uint256 toChainId; uint256 amountOutMin; uint256 relayerFee; uint256 deadline; bytes32 metadata;}"
                        },
                        "HopData": {
                            "content": "HopData{ address token; address receiverAddress; address l1bridgeAddr; address relayer; uint256 toChainId; uint256 amountOutMin; uint256 relayerFee; uint256 deadline; bytes32 metadata;}"
                        },
                        "HopERC20Data": {
                            "content": "HopERC20Data{ uint256 deadline; bytes32 metadata;}"
                        }
                    },
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "ERC20": "SafeTransferLib"
                    }
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "ERC20.safeTransferFrom": "f59cf721ba6479ab2b5aa8ba2685eff0"
            },
            "md5": "1de3c635cfb83c56839edb94565145fd"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\hop\\l1\\HopImplL1V2.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\hop\\l1\\HopImplL1V2.sol",
            "filename": "HopImplL1V2.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\hop\\interfaces\\IHopL1Bridge.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\utils\\SafeTransferLib.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "SafeTransferLib": {
                            "original_name": "SafeTransferLib",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\tokens\\ERC20.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "ERC20": {
                            "original_name": "ERC20",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "BridgeImplBase": {
                            "original_name": "BridgeImplBase",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\static\\RouteIdentifiers.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "HOP": {
                            "original_name": "HOP",
                            "type": {
                                "__CT__": true,
                                "value": 18
                            }
                        }
                    }
                }
            },
            "contracts": {
                "HopImplL1V2": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "BridgeImplBase"
                    ],
                    "state_variables": {
                        "HopIdentifier": {
                            "type": "bytes32",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "HOP",
                            "content": "bytes32 public immutable HopIdentifier = HOP;"
                        },
                        "HOP_L1_ERC20_EXTERNAL_BRIDGE_FUNCTION_SELECTOR": {
                            "type": "bytes4",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "bytes4( keccak256( \"bridgeERC20To(address, address, address, address, uint256, uint256, uint256, uint256, (uint256, bytes32))\" ) )",
                            "content": "bytes4 public immutable HOP_L1_ERC20_EXTERNAL_BRIDGE_FUNCTION_SELECTOR = bytes4( keccak256( \"bridgeERC20To(address, address, address, address, uint256, uint256, uint256, uint256, (uint256, bytes32))\" ) );"
                        },
                        "HOP_L1_NATIVE_EXTERNAL_BRIDGE_FUNCTION_SELECTOR": {
                            "type": "bytes4",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "bytes4( keccak256( \"bridgeNativeTo(address, address, address, uint256, uint256, uint256, uint256, uint256, bytes32)\" ) )",
                            "content": "bytes4 public immutable HOP_L1_NATIVE_EXTERNAL_BRIDGE_FUNCTION_SELECTOR = bytes4( keccak256( \"bridgeNativeTo(address, address, address, uint256, uint256, uint256, uint256, uint256, bytes32)\" ) );"
                        },
                        "HOP_L1_SWAP_BRIDGE_SELECTOR": {
                            "type": "bytes4",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "bytes4( keccak256( \"swapAndBridge(uint32, bytes, (address, address, address, uint256, uint256, uint256, uint256, bytes32))\" ) )",
                            "content": "bytes4 public immutable HOP_L1_SWAP_BRIDGE_SELECTOR = bytes4( keccak256( \"swapAndBridge(uint32, bytes, (address, address, address, uint256, uint256, uint256, uint256, bytes32))\" ) );"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor ( address _socketGateway, address _socketDeployFactory ) BridgeImplBase(_socketGateway, _socketDeployFactory){}",
                                "modifiers": [
                                    "BridgeImplBase(_socketGateway, _socketDeployFactory)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_socketGateway"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_socketDeployFactory"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c540f7904a2cec173bc26e32b01f2e6a"
                            }
                        ],
                        "bridgeAfterSwap": [
                            {
                                "visibility": "external",
                                "content": "function bridgeAfterSwap( uint256 amount, bytes calldata bridgeData ) external payable override{ HopData memory hopData = abi.decode(bridgeData, (HopData)); if (hopData.token == NATIVE_TOKEN_ADDRESS){ IHopL1Bridge(hopData.l1bridgeAddr).sendToL2{ value: amount} ( hopData.toChainId, hopData.receiverAddress, amount, hopData.amountOutMin, hopData.deadline, hopData.relayer, hopData.relayerFee );} else{ IHopL1Bridge(hopData.l1bridgeAddr).sendToL2( hopData.toChainId, hopData.receiverAddress, amount, hopData.amountOutMin, hopData.deadline, hopData.relayer, hopData.relayerFee );} emit SocketBridge( amount, hopData.token, hopData.toChainId, HopIdentifier, msg.sender, hopData.receiverAddress, hopData.metadata );}",
                                "modifiers": [
                                    "payable",
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "bridgeData"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "HopIdentifier",
                                        "",
                                        "HopImplL1V2"
                                    ],
                                    [
                                        "NATIVE_TOKEN_ADDRESS",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "HopImplL1V2.IHopL1Bridge",
                                        "HopImplL1V2.SocketBridge"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "ea4ba009e57ee70a28e3a9cb16aea6d7"
                            }
                        ],
                        "swapAndBridge": [
                            {
                                "visibility": "external",
                                "content": "function swapAndBridge( uint32 swapId, bytes calldata swapData, HopDataNoToken calldata hopData ) external payable{ (bool success, bytes memory result) = socketRoute .getRoute(swapId) .delegatecall(swapData); if (!success){ assembly{ revert(add(result, 32), mload(result))}} (uint256 bridgeAmount, address token) = abi.decode( result, (uint256, address) ); if (token == NATIVE_TOKEN_ADDRESS){ IHopL1Bridge(hopData.l1bridgeAddr).sendToL2{ value: bridgeAmount} ( hopData.toChainId, hopData.receiverAddress, bridgeAmount, hopData.amountOutMin, hopData.deadline, hopData.relayer, hopData.relayerFee );} else{ IHopL1Bridge(hopData.l1bridgeAddr).sendToL2( hopData.toChainId, hopData.receiverAddress, bridgeAmount, hopData.amountOutMin, hopData.deadline, hopData.relayer, hopData.relayerFee );} emit SocketBridge( bridgeAmount, token, hopData.toChainId, HopIdentifier, msg.sender, hopData.receiverAddress, hopData.metadata );}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint32",
                                        "name": "swapId"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "swapData"
                                    },
                                    {
                                        "type": "HopDataNoToken calldata",
                                        "name": "hopData"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "HopIdentifier",
                                        "",
                                        "HopImplL1V2"
                                    ],
                                    [
                                        "NATIVE_TOKEN_ADDRESS",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ],
                                    [
                                        "socketRoute",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "HopImplL1V2.SocketBridge",
                                        "HopImplL1V2.IHopL1Bridge",
                                        "socketRoute.getRoute"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "97dff755fbc01b791420c3a2f45cec8d"
                            }
                        ],
                        "bridgeERC20To": [
                            {
                                "visibility": "external",
                                "content": "function bridgeERC20To( address receiverAddress, address token, address l1bridgeAddr, address relayer, uint256 toChainId, uint256 amount, uint256 amountOutMin, uint256 relayerFee, HopERC20Data calldata hopData ) external payable{ ERC20 tokenInstance = ERC20(token); tokenInstance.safeTransferFrom(msg.sender, socketGateway, amount); IHopL1Bridge(l1bridgeAddr).sendToL2( toChainId, receiverAddress, amount, amountOutMin, hopData.deadline, relayer, relayerFee ); emit SocketBridge( amount, token, toChainId, HopIdentifier, msg.sender, receiverAddress, hopData.metadata );}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "receiverAddress"
                                    },
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "l1bridgeAddr"
                                    },
                                    {
                                        "type": "address",
                                        "name": "relayer"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "toChainId"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amountOutMin"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "relayerFee"
                                    },
                                    {
                                        "type": "HopERC20Data calldata",
                                        "name": "hopData"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "HopIdentifier",
                                        "",
                                        "HopImplL1V2"
                                    ],
                                    [
                                        "socketGateway",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20.safeTransferFrom",
                                        "HopImplL1V2.ERC20",
                                        "HopImplL1V2.IHopL1Bridge",
                                        "HopImplL1V2.SocketBridge"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "9dd89ad9e22b2028e81c5f07163019ac"
                            }
                        ],
                        "bridgeNativeTo": [
                            {
                                "visibility": "external",
                                "content": "function bridgeNativeTo( address receiverAddress, address l1bridgeAddr, address relayer, uint256 toChainId, uint256 amount, uint256 amountOutMin, uint256 relayerFee, uint256 deadline, bytes32 metadata ) external payable{ IHopL1Bridge(l1bridgeAddr).sendToL2{ value: amount} ( toChainId, receiverAddress, amount, amountOutMin, deadline, relayer, relayerFee ); emit SocketBridge( amount, NATIVE_TOKEN_ADDRESS, toChainId, HopIdentifier, msg.sender, receiverAddress, metadata );}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "receiverAddress"
                                    },
                                    {
                                        "type": "address",
                                        "name": "l1bridgeAddr"
                                    },
                                    {
                                        "type": "address",
                                        "name": "relayer"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "toChainId"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amountOutMin"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "relayerFee"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "deadline"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "metadata"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "HopIdentifier",
                                        "",
                                        "HopImplL1V2"
                                    ],
                                    [
                                        "NATIVE_TOKEN_ADDRESS",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "HopImplL1V2.IHopL1Bridge",
                                        "HopImplL1V2.SocketBridge"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "20633fdf1c02bb369f566271d738af5d"
                            }
                        ],
                        "bridgeERC20ToOptimised": [
                            {
                                "visibility": "external",
                                "content": "function bridgeERC20ToOptimised() external payable{ ERC20(address(bytes20(msg.data[4:24]))).safeTransferFrom( msg.sender, socketGateway, uint256(uint128(bytes16(msg.data[68:84]))) ); IHopL1Bridge(address(bytes20(msg.data[24:44]))).sendToL2( uint256(uint32(bytes4(msg.data[64:68]))), address(bytes20(msg.data[44:64])), uint256(uint128(bytes16(msg.data[68:84]))), uint256(uint128(bytes16(msg.data[84:100]))), block.timestamp + 7 * 24 * 60 * 60, address(0), 0 ); emit SocketBridge( uint256(uint128(bytes16(msg.data[68:84]))), address(bytes20(msg.data[4:24])), uint256(uint32(bytes4(msg.data[64:68]))), HopIdentifier, msg.sender, address(bytes20(msg.data[44:64])), hex\"01\" );}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [
                                    [
                                        "HopIdentifier",
                                        "",
                                        "HopImplL1V2"
                                    ],
                                    [
                                        "socketGateway",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "HopImplL1V2.ERC20",
                                        "HopImplL1V2.IHopL1Bridge",
                                        "HopImplL1V2.SocketBridge"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "e89b4b3be1a86dce315a64ba87f1936f"
                            }
                        ],
                        "bridgeNativeToOptimised": [
                            {
                                "visibility": "external",
                                "content": "function bridgeNativeToOptimised() external payable{ IHopL1Bridge(address(bytes20(msg.data[4:24]))).sendToL2{ value: msg.value} ( uint256(uint32(bytes4(msg.data[24:28]))), address(bytes20(msg.data[28:48])), msg.value, uint256(uint128(bytes16(msg.data[48:64]))), block.timestamp + 7 * 24 * 60 * 60, address(0), 0 ); emit SocketBridge( msg.value, NATIVE_TOKEN_ADDRESS, uint64(uint32(bytes4(msg.data[24:28]))), HopIdentifier, msg.sender, address(bytes20(msg.data[28:48])), hex\"01\" );}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [
                                    [
                                        "HopIdentifier",
                                        "",
                                        "HopImplL1V2"
                                    ],
                                    [
                                        "NATIVE_TOKEN_ADDRESS",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "HopImplL1V2.IHopL1Bridge",
                                        "HopImplL1V2.SocketBridge"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "bbca072ebfcce8bb9707267244f51f1a"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {
                        "HopDataNoToken": {
                            "content": "HopDataNoToken{ address receiverAddress; address l1bridgeAddr; address relayer; uint256 toChainId; uint256 amountOutMin; uint256 relayerFee; uint256 deadline; bytes32 metadata;}"
                        },
                        "HopData": {
                            "content": "HopData{ address token; address receiverAddress; address l1bridgeAddr; address relayer; uint256 toChainId; uint256 amountOutMin; uint256 relayerFee; uint256 deadline; bytes32 metadata;}"
                        },
                        "HopERC20Data": {
                            "content": "HopERC20Data{ uint256 deadline; bytes32 metadata;}"
                        }
                    },
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "ERC20": "SafeTransferLib"
                    }
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "ERC20.safeTransferFrom": "f59cf721ba6479ab2b5aa8ba2685eff0"
            },
            "md5": "60d5b7fe514496a467ebc8f90990c132"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\hop\\l2\\HopImplL2.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\hop\\l2\\HopImplL2.sol",
            "filename": "HopImplL2.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\hop\\interfaces\\amm.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\utils\\SafeTransferLib.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "SafeTransferLib": {
                            "original_name": "SafeTransferLib",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\tokens\\ERC20.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "ERC20": {
                            "original_name": "ERC20",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "BridgeImplBase": {
                            "original_name": "BridgeImplBase",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\static\\RouteIdentifiers.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "HOP": {
                            "original_name": "HOP",
                            "type": {
                                "__CT__": true,
                                "value": 18
                            }
                        }
                    }
                }
            },
            "contracts": {
                "HopImplL2": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "BridgeImplBase"
                    ],
                    "state_variables": {
                        "HopIdentifier": {
                            "type": "bytes32",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "HOP",
                            "content": "bytes32 public immutable HopIdentifier = HOP;"
                        },
                        "HOP_L2_ERC20_EXTERNAL_BRIDGE_FUNCTION_SELECTOR": {
                            "type": "bytes4",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "bytes4( keccak256( \"bridgeERC20To(address, address, address, uint256, uint256, (uint256, uint256, uint256, uint256, uint256, bytes32))\" ) )",
                            "content": "bytes4 public immutable HOP_L2_ERC20_EXTERNAL_BRIDGE_FUNCTION_SELECTOR = bytes4( keccak256( \"bridgeERC20To(address, address, address, uint256, uint256, (uint256, uint256, uint256, uint256, uint256, bytes32))\" ) );"
                        },
                        "HOP_L2_NATIVE_EXTERNAL_BRIDGE_FUNCTION_SELECTOR": {
                            "type": "bytes4",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "bytes4( keccak256( \"bridgeNativeTo(address, address, uint256, uint256, uint256, uint256, uint256, uint256, uint256, bytes32)\" ) )",
                            "content": "bytes4 public immutable HOP_L2_NATIVE_EXTERNAL_BRIDGE_FUNCTION_SELECTOR = bytes4( keccak256( \"bridgeNativeTo(address, address, uint256, uint256, uint256, uint256, uint256, uint256, uint256, bytes32)\" ) );"
                        },
                        "HOP_L2_SWAP_BRIDGE_SELECTOR": {
                            "type": "bytes4",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "bytes4( keccak256( \"swapAndBridge(uint32, bytes, (address, address, uint256, uint256, uint256, uint256, uint256, uint256, bytes32))\" ) )",
                            "content": "bytes4 public immutable HOP_L2_SWAP_BRIDGE_SELECTOR = bytes4( keccak256( \"swapAndBridge(uint32, bytes, (address, address, uint256, uint256, uint256, uint256, uint256, uint256, bytes32))\" ) );"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor ( address _socketGateway, address _socketDeployFactory ) BridgeImplBase(_socketGateway, _socketDeployFactory){}",
                                "modifiers": [
                                    "BridgeImplBase(_socketGateway, _socketDeployFactory)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_socketGateway"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_socketDeployFactory"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c540f7904a2cec173bc26e32b01f2e6a"
                            }
                        ],
                        "bridgeAfterSwap": [
                            {
                                "visibility": "external",
                                "content": "function bridgeAfterSwap( uint256 amount, bytes calldata bridgeData ) external payable override{ HopBridgeData memory hopData = abi.decode(bridgeData, (HopBridgeData)); if (hopData.token == NATIVE_TOKEN_ADDRESS){ HopAMM(hopData.hopAMM).swapAndSend{ value: amount} ( hopData.toChainId, hopData.receiverAddress, amount, hopData.bonderFee, hopData.amountOutMin, hopData.deadline, hopData.amountOutMinDestination, hopData.deadlineDestination );} else{ HopAMM(hopData.hopAMM).swapAndSend( hopData.toChainId, hopData.receiverAddress, amount, hopData.bonderFee, hopData.amountOutMin, hopData.deadline, hopData.amountOutMinDestination, hopData.deadlineDestination );} emit SocketBridge( amount, hopData.token, hopData.toChainId, HopIdentifier, msg.sender, hopData.receiverAddress, hopData.metadata );}",
                                "modifiers": [
                                    "payable",
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "bridgeData"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "HopIdentifier",
                                        "",
                                        "HopImplL2"
                                    ],
                                    [
                                        "NATIVE_TOKEN_ADDRESS",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "HopImplL2.HopAMM",
                                        "HopImplL2.SocketBridge"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "4f439a517ddfbb4d956faf8f5509111b"
                            }
                        ],
                        "swapAndBridge": [
                            {
                                "visibility": "external",
                                "content": "function swapAndBridge( uint32 swapId, bytes calldata swapData, HopBridgeDataNoToken calldata hopData ) external payable{ (bool success, bytes memory result) = socketRoute .getRoute(swapId) .delegatecall(swapData); if (!success){ assembly{ revert(add(result, 32), mload(result))}} (uint256 bridgeAmount, address token) = abi.decode( result, (uint256, address) ); if (token == NATIVE_TOKEN_ADDRESS){ HopAMM(hopData.hopAMM).swapAndSend{ value: bridgeAmount} ( hopData.toChainId, hopData.receiverAddress, bridgeAmount, hopData.bonderFee, hopData.amountOutMin, hopData.deadline, hopData.amountOutMinDestination, hopData.deadlineDestination );} else{ HopAMM(hopData.hopAMM).swapAndSend( hopData.toChainId, hopData.receiverAddress, bridgeAmount, hopData.bonderFee, hopData.amountOutMin, hopData.deadline, hopData.amountOutMinDestination, hopData.deadlineDestination );} emit SocketBridge( bridgeAmount, token, hopData.toChainId, HopIdentifier, msg.sender, hopData.receiverAddress, hopData.metadata );}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint32",
                                        "name": "swapId"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "swapData"
                                    },
                                    {
                                        "type": "HopBridgeDataNoToken calldata",
                                        "name": "hopData"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "HopIdentifier",
                                        "",
                                        "HopImplL2"
                                    ],
                                    [
                                        "NATIVE_TOKEN_ADDRESS",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ],
                                    [
                                        "socketRoute",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "HopImplL2.HopAMM",
                                        "socketRoute.getRoute",
                                        "HopImplL2.SocketBridge"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "2a2d38bd41184e351834642e31ace454"
                            }
                        ],
                        "bridgeERC20To": [
                            {
                                "visibility": "external",
                                "content": "function bridgeERC20To( address receiverAddress, address token, address hopAMM, uint256 amount, uint256 toChainId, HopBridgeRequestData calldata hopBridgeRequestData ) external payable{ ERC20 tokenInstance = ERC20(token); tokenInstance.safeTransferFrom(msg.sender, socketGateway, amount); HopAMM(hopAMM).swapAndSend( toChainId, receiverAddress, amount, hopBridgeRequestData.bonderFee, hopBridgeRequestData.amountOutMin, hopBridgeRequestData.deadline, hopBridgeRequestData.amountOutMinDestination, hopBridgeRequestData.deadlineDestination ); emit SocketBridge( amount, token, toChainId, HopIdentifier, msg.sender, receiverAddress, hopBridgeRequestData.metadata );}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "receiverAddress"
                                    },
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "hopAMM"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "toChainId"
                                    },
                                    {
                                        "type": "HopBridgeRequestData calldata",
                                        "name": "hopBridgeRequestData"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "HopIdentifier",
                                        "",
                                        "HopImplL2"
                                    ],
                                    [
                                        "socketGateway",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20.safeTransferFrom",
                                        "HopImplL2.HopAMM",
                                        "HopImplL2.ERC20",
                                        "HopImplL2.SocketBridge"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "c6698fe25ef9ed50bbb71fd644ec780c"
                            }
                        ],
                        "bridgeNativeTo": [
                            {
                                "visibility": "external",
                                "content": "function bridgeNativeTo( address receiverAddress, address hopAMM, uint256 amount, uint256 toChainId, uint256 bonderFee, uint256 amountOutMin, uint256 deadline, uint256 amountOutMinDestination, uint256 deadlineDestination, bytes32 metadata ) external payable{ HopAMM(hopAMM).swapAndSend{ value: amount} ( toChainId, receiverAddress, amount, bonderFee, amountOutMin, deadline, amountOutMinDestination, deadlineDestination ); emit SocketBridge( amount, NATIVE_TOKEN_ADDRESS, toChainId, HopIdentifier, msg.sender, receiverAddress, metadata );}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "receiverAddress"
                                    },
                                    {
                                        "type": "address",
                                        "name": "hopAMM"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "toChainId"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "bonderFee"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amountOutMin"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "deadline"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amountOutMinDestination"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "deadlineDestination"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "metadata"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "HopIdentifier",
                                        "",
                                        "HopImplL2"
                                    ],
                                    [
                                        "NATIVE_TOKEN_ADDRESS",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "HopImplL2.HopAMM",
                                        "HopImplL2.SocketBridge"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "25f972b784b2762134e2f6b2aa825fc6"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {
                        "HopBridgeRequestData": {
                            "content": "HopBridgeRequestData{ uint256 bonderFee; uint256 amountOutMin; uint256 deadline; uint256 amountOutMinDestination; uint256 deadlineDestination; bytes32 metadata;}"
                        },
                        "HopBridgeDataNoToken": {
                            "content": "HopBridgeDataNoToken{ address receiverAddress; address hopAMM; uint256 toChainId; uint256 bonderFee; uint256 amountOutMin; uint256 deadline; uint256 amountOutMinDestination; uint256 deadlineDestination; bytes32 metadata;}"
                        },
                        "HopBridgeData": {
                            "content": "HopBridgeData{ address token; address receiverAddress; address hopAMM; uint256 toChainId; uint256 bonderFee; uint256 amountOutMin; uint256 deadline; uint256 amountOutMinDestination; uint256 deadlineDestination; bytes32 metadata;}"
                        }
                    },
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "ERC20": "SafeTransferLib"
                    }
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "ERC20.safeTransferFrom": "f59cf721ba6479ab2b5aa8ba2685eff0"
            },
            "md5": "5cc5e2a141dac8ee6c43ea4ea3f61de2"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\hop\\l2\\HopImplL2V2.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\hop\\l2\\HopImplL2V2.sol",
            "filename": "HopImplL2V2.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\hop\\interfaces\\amm.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\utils\\SafeTransferLib.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "SafeTransferLib": {
                            "original_name": "SafeTransferLib",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\tokens\\ERC20.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "ERC20": {
                            "original_name": "ERC20",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "BridgeImplBase": {
                            "original_name": "BridgeImplBase",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\static\\RouteIdentifiers.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "HOP": {
                            "original_name": "HOP",
                            "type": {
                                "__CT__": true,
                                "value": 18
                            }
                        }
                    }
                }
            },
            "contracts": {
                "HopImplL2V2": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "BridgeImplBase"
                    ],
                    "state_variables": {
                        "HopIdentifier": {
                            "type": "bytes32",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "HOP",
                            "content": "bytes32 public immutable HopIdentifier = HOP;"
                        },
                        "HOP_L2_ERC20_EXTERNAL_BRIDGE_FUNCTION_SELECTOR": {
                            "type": "bytes4",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "bytes4( keccak256( \"bridgeERC20To(address, address, address, uint256, uint256, (uint256, uint256, uint256, uint256, uint256, bytes32))\" ) )",
                            "content": "bytes4 public immutable HOP_L2_ERC20_EXTERNAL_BRIDGE_FUNCTION_SELECTOR = bytes4( keccak256( \"bridgeERC20To(address, address, address, uint256, uint256, (uint256, uint256, uint256, uint256, uint256, bytes32))\" ) );"
                        },
                        "HOP_L2_NATIVE_EXTERNAL_BRIDGE_FUNCTION_SELECTOR": {
                            "type": "bytes4",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "bytes4( keccak256( \"bridgeNativeTo(address, address, uint256, uint256, uint256, uint256, uint256, uint256, uint256, bytes32)\" ) )",
                            "content": "bytes4 public immutable HOP_L2_NATIVE_EXTERNAL_BRIDGE_FUNCTION_SELECTOR = bytes4( keccak256( \"bridgeNativeTo(address, address, uint256, uint256, uint256, uint256, uint256, uint256, uint256, bytes32)\" ) );"
                        },
                        "HOP_L2_SWAP_BRIDGE_SELECTOR": {
                            "type": "bytes4",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "bytes4( keccak256( \"swapAndBridge(uint32, bytes, (address, address, uint256, uint256, uint256, uint256, uint256, uint256, bytes32))\" ) )",
                            "content": "bytes4 public immutable HOP_L2_SWAP_BRIDGE_SELECTOR = bytes4( keccak256( \"swapAndBridge(uint32, bytes, (address, address, uint256, uint256, uint256, uint256, uint256, uint256, bytes32))\" ) );"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor ( address _socketGateway, address _socketDeployFactory ) BridgeImplBase(_socketGateway, _socketDeployFactory){}",
                                "modifiers": [
                                    "BridgeImplBase(_socketGateway, _socketDeployFactory)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_socketGateway"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_socketDeployFactory"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c540f7904a2cec173bc26e32b01f2e6a"
                            }
                        ],
                        "bridgeAfterSwap": [
                            {
                                "visibility": "external",
                                "content": "function bridgeAfterSwap( uint256 amount, bytes calldata bridgeData ) external payable override{ HopBridgeData memory hopData = abi.decode(bridgeData, (HopBridgeData)); if (hopData.token == NATIVE_TOKEN_ADDRESS){ HopAMM(hopData.hopAMM).swapAndSend{ value: amount} ( hopData.toChainId, hopData.receiverAddress, amount, hopData.bonderFee, hopData.amountOutMin, hopData.deadline, hopData.amountOutMinDestination, hopData.deadlineDestination );} else{ HopAMM(hopData.hopAMM).swapAndSend( hopData.toChainId, hopData.receiverAddress, amount, hopData.bonderFee, hopData.amountOutMin, hopData.deadline, hopData.amountOutMinDestination, hopData.deadlineDestination );} emit SocketBridge( amount, hopData.token, hopData.toChainId, HopIdentifier, msg.sender, hopData.receiverAddress, hopData.metadata );}",
                                "modifiers": [
                                    "payable",
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "bridgeData"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "HopIdentifier",
                                        "",
                                        "HopImplL2V2"
                                    ],
                                    [
                                        "NATIVE_TOKEN_ADDRESS",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "HopImplL2V2.SocketBridge",
                                        "HopImplL2V2.HopAMM"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "4f439a517ddfbb4d956faf8f5509111b"
                            }
                        ],
                        "swapAndBridge": [
                            {
                                "visibility": "external",
                                "content": "function swapAndBridge( uint32 swapId, bytes calldata swapData, HopBridgeDataNoToken calldata hopData ) external payable{ (bool success, bytes memory result) = socketRoute .getRoute(swapId) .delegatecall(swapData); if (!success){ assembly{ revert(add(result, 32), mload(result))}} (uint256 bridgeAmount, address token) = abi.decode( result, (uint256, address) ); if (token == NATIVE_TOKEN_ADDRESS){ HopAMM(hopData.hopAMM).swapAndSend{ value: bridgeAmount} ( hopData.toChainId, hopData.receiverAddress, bridgeAmount, hopData.bonderFee, hopData.amountOutMin, hopData.deadline, hopData.amountOutMinDestination, hopData.deadlineDestination );} else{ HopAMM(hopData.hopAMM).swapAndSend( hopData.toChainId, hopData.receiverAddress, bridgeAmount, hopData.bonderFee, hopData.amountOutMin, hopData.deadline, hopData.amountOutMinDestination, hopData.deadlineDestination );} emit SocketBridge( bridgeAmount, token, hopData.toChainId, HopIdentifier, msg.sender, hopData.receiverAddress, hopData.metadata );}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint32",
                                        "name": "swapId"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "swapData"
                                    },
                                    {
                                        "type": "HopBridgeDataNoToken calldata",
                                        "name": "hopData"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "HopIdentifier",
                                        "",
                                        "HopImplL2V2"
                                    ],
                                    [
                                        "NATIVE_TOKEN_ADDRESS",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ],
                                    [
                                        "socketRoute",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "HopImplL2V2.SocketBridge",
                                        "HopImplL2V2.HopAMM",
                                        "socketRoute.getRoute"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "2a2d38bd41184e351834642e31ace454"
                            }
                        ],
                        "bridgeERC20To": [
                            {
                                "visibility": "external",
                                "content": "function bridgeERC20To( address receiverAddress, address token, address hopAMM, uint256 amount, uint256 toChainId, HopBridgeRequestData calldata hopBridgeRequestData ) external payable{ ERC20 tokenInstance = ERC20(token); tokenInstance.safeTransferFrom(msg.sender, socketGateway, amount); HopAMM(hopAMM).swapAndSend( toChainId, receiverAddress, amount, hopBridgeRequestData.bonderFee, hopBridgeRequestData.amountOutMin, hopBridgeRequestData.deadline, hopBridgeRequestData.amountOutMinDestination, hopBridgeRequestData.deadlineDestination ); emit SocketBridge( amount, token, toChainId, HopIdentifier, msg.sender, receiverAddress, hopBridgeRequestData.metadata );}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "receiverAddress"
                                    },
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "hopAMM"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "toChainId"
                                    },
                                    {
                                        "type": "HopBridgeRequestData calldata",
                                        "name": "hopBridgeRequestData"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "HopIdentifier",
                                        "",
                                        "HopImplL2V2"
                                    ],
                                    [
                                        "socketGateway",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "HopImplL2V2.SocketBridge",
                                        "ERC20.safeTransferFrom",
                                        "HopImplL2V2.HopAMM",
                                        "HopImplL2V2.ERC20"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "c6698fe25ef9ed50bbb71fd644ec780c"
                            }
                        ],
                        "bridgeNativeTo": [
                            {
                                "visibility": "external",
                                "content": "function bridgeNativeTo( address receiverAddress, address hopAMM, uint256 amount, uint256 toChainId, uint256 bonderFee, uint256 amountOutMin, uint256 deadline, uint256 amountOutMinDestination, uint256 deadlineDestination, bytes32 metadata ) external payable{ HopAMM(hopAMM).swapAndSend{ value: amount} ( toChainId, receiverAddress, amount, bonderFee, amountOutMin, deadline, amountOutMinDestination, deadlineDestination ); emit SocketBridge( amount, NATIVE_TOKEN_ADDRESS, toChainId, HopIdentifier, msg.sender, receiverAddress, metadata );}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "receiverAddress"
                                    },
                                    {
                                        "type": "address",
                                        "name": "hopAMM"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "toChainId"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "bonderFee"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amountOutMin"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "deadline"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amountOutMinDestination"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "deadlineDestination"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "metadata"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "HopIdentifier",
                                        "",
                                        "HopImplL2V2"
                                    ],
                                    [
                                        "NATIVE_TOKEN_ADDRESS",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "HopImplL2V2.SocketBridge",
                                        "HopImplL2V2.HopAMM"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "25f972b784b2762134e2f6b2aa825fc6"
                            }
                        ],
                        "bridgeERC20ToOptimised": [
                            {
                                "visibility": "external",
                                "content": "function bridgeERC20ToOptimised() external payable{ ERC20(address(bytes20(msg.data[4:24]))).safeTransferFrom( msg.sender, socketGateway, uint256(uint128(bytes16(msg.data[64:80]))) ); uint256 deadline = block.timestamp + 7 * 24 * 60 * 60; HopAMM(address(bytes20(msg.data[24:44]))).swapAndSend( uint256(uint32(bytes4(msg.data[128:132]))), address(bytes20(msg.data[44:64])), uint256(uint128(bytes16(msg.data[64:80]))), uint256(uint128(bytes16(msg.data[80:96]))), uint256(uint128(bytes16(msg.data[96:112]))), deadline, uint256(uint128(bytes16(msg.data[112:128]))), deadline ); emit SocketBridge( uint256(uint128(bytes16(msg.data[64:80]))), address(bytes20(msg.data[4:24])), uint256(uint32(bytes4(msg.data[128:132]))), HopIdentifier, msg.sender, address(bytes20(msg.data[44:64])), hex\"01\" );}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [
                                    [
                                        "HopIdentifier",
                                        "",
                                        "HopImplL2V2"
                                    ],
                                    [
                                        "socketGateway",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "HopImplL2V2.SocketBridge",
                                        "HopImplL2V2.HopAMM",
                                        "HopImplL2V2.ERC20"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "6625857bada6baaecdd1afa4d45a4fb3"
                            }
                        ],
                        "bridgeERC20ToOptimisedToL1": [
                            {
                                "visibility": "external",
                                "content": "function bridgeERC20ToOptimisedToL1() external payable{ ERC20(address(bytes20(msg.data[4:24]))).safeTransferFrom( msg.sender, socketGateway, uint256(uint128(bytes16(msg.data[64:80]))) ); HopAMM(address(bytes20(msg.data[24:44]))).swapAndSend( uint256(uint32(bytes4(msg.data[128:132]))), address(bytes20(msg.data[44:64])), uint256(uint128(bytes16(msg.data[64:80]))), uint256(uint128(bytes16(msg.data[80:96]))), uint256(uint128(bytes16(msg.data[96:112]))), block.timestamp + 7 * 24 * 60 * 60, 0, 0 ); emit SocketBridge( uint256(uint128(bytes16(msg.data[64:80]))), address(bytes20(msg.data[4:24])), uint256(uint32(bytes4(msg.data[128:132]))), HopIdentifier, msg.sender, address(bytes20(msg.data[44:64])), hex\"01\" );}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [
                                    [
                                        "HopIdentifier",
                                        "",
                                        "HopImplL2V2"
                                    ],
                                    [
                                        "socketGateway",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "HopImplL2V2.SocketBridge",
                                        "HopImplL2V2.HopAMM",
                                        "HopImplL2V2.ERC20"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "58ed88ee2dfa97d145eb3498c98c9fe3"
                            }
                        ],
                        "bridgeNativeToOptimised": [
                            {
                                "visibility": "external",
                                "content": "function bridgeNativeToOptimised() external payable{ uint256 deadline = block.timestamp + 7 * 24 * 60 * 60; HopAMM(address(bytes20(msg.data[4:24]))).swapAndSend{ value: msg.value} ( uint256(uint32(bytes4(msg.data[24:28]))), address(bytes20(msg.data[28:48])), msg.value, uint256(uint128(bytes16(msg.data[48:64]))), uint256(uint128(bytes16(msg.data[64:80]))), deadline, uint256(uint128(bytes16(msg.data[80:96]))), deadline ); emit SocketBridge( msg.value, NATIVE_TOKEN_ADDRESS, uint256(uint32(bytes4(msg.data[24:28]))), HopIdentifier, msg.sender, address(bytes20(msg.data[28:48])), hex\"01\" );}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [
                                    [
                                        "HopIdentifier",
                                        "",
                                        "HopImplL2V2"
                                    ],
                                    [
                                        "NATIVE_TOKEN_ADDRESS",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "HopImplL2V2.SocketBridge",
                                        "HopImplL2V2.HopAMM"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "bf3de90a0bc2504329af942c29c12d01"
                            }
                        ],
                        "bridgeNativeToOptimisedToL1": [
                            {
                                "visibility": "external",
                                "content": "function bridgeNativeToOptimisedToL1() external payable{ HopAMM(address(bytes20(msg.data[4:24]))).swapAndSend{ value: msg.value} ( uint256(uint32(bytes4(msg.data[24:28]))), address(bytes20(msg.data[28:48])), msg.value, uint256(uint128(bytes16(msg.data[48:64]))), uint256(uint128(bytes16(msg.data[64:80]))), block.timestamp + 7 * 24 * 60 * 60, 0, 0 ); emit SocketBridge( msg.value, NATIVE_TOKEN_ADDRESS, uint256(uint32(bytes4(msg.data[24:28]))), HopIdentifier, msg.sender, address(bytes20(msg.data[28:48])), hex\"01\" );}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [
                                    [
                                        "HopIdentifier",
                                        "",
                                        "HopImplL2V2"
                                    ],
                                    [
                                        "NATIVE_TOKEN_ADDRESS",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "HopImplL2V2.SocketBridge",
                                        "HopImplL2V2.HopAMM"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "9cea44f76064353cd01b05f243a75867"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {
                        "HopBridgeRequestData": {
                            "content": "HopBridgeRequestData{ uint256 bonderFee; uint256 amountOutMin; uint256 deadline; uint256 amountOutMinDestination; uint256 deadlineDestination; bytes32 metadata;}"
                        },
                        "HopBridgeDataNoToken": {
                            "content": "HopBridgeDataNoToken{ address receiverAddress; address hopAMM; uint256 toChainId; uint256 bonderFee; uint256 amountOutMin; uint256 deadline; uint256 amountOutMinDestination; uint256 deadlineDestination; bytes32 metadata;}"
                        },
                        "HopBridgeData": {
                            "content": "HopBridgeData{ address token; address receiverAddress; address hopAMM; uint256 toChainId; uint256 bonderFee; uint256 amountOutMin; uint256 deadline; uint256 amountOutMinDestination; uint256 deadlineDestination; bytes32 metadata;}"
                        }
                    },
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "ERC20": "SafeTransferLib"
                    }
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "ERC20.safeTransferFrom": "f59cf721ba6479ab2b5aa8ba2685eff0"
            },
            "md5": "2461e0cee7401c6e64a9d062b4a9acfd"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\hyphen\\interfaces\\hyphen.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\hyphen\\interfaces\\hyphen.sol",
            "filename": "hyphen.sol",
            "imported_contracts": {},
            "contracts": {
                "HyphenLiquidityPoolManager": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "depositErc20": [
                            {
                                "visibility": "external",
                                "content": "function depositErc20( uint256 toChainId, address tokenAddress, address receiver, uint256 amount, string calldata tag ) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "toChainId"
                                    },
                                    {
                                        "type": "address",
                                        "name": "tokenAddress"
                                    },
                                    {
                                        "type": "address",
                                        "name": "receiver"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "string calldata",
                                        "name": "tag"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "734abbc1500808f24e8e894ae1bd4e81"
                            }
                        ],
                        "depositNative": [
                            {
                                "visibility": "external",
                                "content": "function depositNative( address receiver, uint256 toChainId, string calldata tag ) external payable;",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "receiver"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "toChainId"
                                    },
                                    {
                                        "type": "string calldata",
                                        "name": "tag"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": true,
                                "md5": "acb79eace2626cfd361acf987136c571"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "d9d387544b97d3a1277f9ce3566ffc49"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\hyphen\\Hyphen.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\hyphen\\Hyphen.sol",
            "filename": "Hyphen.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\hyphen\\interfaces\\hyphen.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\utils\\SafeTransferLib.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "SafeTransferLib": {
                            "original_name": "SafeTransferLib",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\tokens\\ERC20.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "ERC20": {
                            "original_name": "ERC20",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\static\\RouteIdentifiers.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "HYPHEN": {
                            "original_name": "HYPHEN",
                            "type": {
                                "__CT__": true,
                                "value": 18
                            }
                        }
                    }
                }
            },
            "contracts": {
                "HyphenImpl": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "BridgeImplBase"
                    ],
                    "state_variables": {
                        "HyphenIdentifier": {
                            "type": "bytes32",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "HYPHEN",
                            "content": "bytes32 public immutable HyphenIdentifier = HYPHEN;"
                        },
                        "HYPHEN_ERC20_EXTERNAL_BRIDGE_FUNCTION_SELECTOR": {
                            "type": "bytes4",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "bytes4( keccak256(\"bridgeERC20To(uint256, bytes32, address, address, uint256)\") )",
                            "content": "bytes4 public immutable HYPHEN_ERC20_EXTERNAL_BRIDGE_FUNCTION_SELECTOR = bytes4( keccak256(\"bridgeERC20To(uint256, bytes32, address, address, uint256)\") );"
                        },
                        "HYPHEN_NATIVE_EXTERNAL_BRIDGE_FUNCTION_SELECTOR": {
                            "type": "bytes4",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "bytes4(keccak256(\"bridgeNativeTo(uint256, bytes32, address, uint256)\"))",
                            "content": "bytes4 public immutable HYPHEN_NATIVE_EXTERNAL_BRIDGE_FUNCTION_SELECTOR = bytes4(keccak256(\"bridgeNativeTo(uint256, bytes32, address, uint256)\"));"
                        },
                        "HYPHEN_SWAP_BRIDGE_SELECTOR": {
                            "type": "bytes4",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "bytes4( keccak256(\"swapAndBridge(uint32, bytes, (address, uint256, bytes32))\") )",
                            "content": "bytes4 public immutable HYPHEN_SWAP_BRIDGE_SELECTOR = bytes4( keccak256(\"swapAndBridge(uint32, bytes, (address, uint256, bytes32))\") );"
                        },
                        "liquidityPoolManager": {
                            "type": "HyphenLiquidityPoolManager",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": null,
                            "content": "HyphenLiquidityPoolManager public immutable liquidityPoolManager;"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor ( address _liquidityPoolManager, address _socketGateway, address _socketDeployFactory ) BridgeImplBase(_socketGateway, _socketDeployFactory){ liquidityPoolManager = HyphenLiquidityPoolManager( _liquidityPoolManager );}",
                                "modifiers": [
                                    "BridgeImplBase(_socketGateway, _socketDeployFactory)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_liquidityPoolManager"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_socketGateway"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_socketDeployFactory"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "liquidityPoolManager",
                                        "",
                                        "HyphenImpl"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "liquidityPoolManager",
                                        "",
                                        "HyphenImpl"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "888cb39a8bdbb04ebb54ac9395170498"
                            }
                        ],
                        "bridgeAfterSwap": [
                            {
                                "visibility": "external",
                                "content": "function bridgeAfterSwap( uint256 amount, bytes calldata bridgeData ) external payable override{ HyphenData memory hyphenData = abi.decode(bridgeData, (HyphenData)); if (hyphenData.token == NATIVE_TOKEN_ADDRESS){ liquidityPoolManager.depositNative{ value: amount} ( hyphenData.receiverAddress, hyphenData.toChainId, \"SOCKET\" );} else{ liquidityPoolManager.depositErc20( hyphenData.toChainId, hyphenData.token, hyphenData.receiverAddress, amount, \"SOCKET\" );} emit SocketBridge( amount, hyphenData.token, hyphenData.toChainId, HyphenIdentifier, msg.sender, hyphenData.receiverAddress, hyphenData.metadata );}",
                                "modifiers": [
                                    "payable",
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "bridgeData"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "HyphenIdentifier",
                                        "",
                                        "HyphenImpl"
                                    ],
                                    [
                                        "liquidityPoolManager",
                                        "",
                                        "HyphenImpl"
                                    ],
                                    [
                                        "NATIVE_TOKEN_ADDRESS",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "HyphenImpl.SocketBridge",
                                        "HyphenLiquidityPoolManager.depositErc20"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "3358335220eb1fa99e9c54f7a550cdae"
                            }
                        ],
                        "swapAndBridge": [
                            {
                                "visibility": "external",
                                "content": "function swapAndBridge( uint32 swapId, bytes calldata swapData, HyphenDataNoToken calldata hyphenData ) external payable{ (bool success, bytes memory result) = socketRoute .getRoute(swapId) .delegatecall(swapData); if (!success){ assembly{ revert(add(result, 32), mload(result))}} (uint256 bridgeAmount, address token) = abi.decode( result, (uint256, address) ); if (token == NATIVE_TOKEN_ADDRESS){ liquidityPoolManager.depositNative{ value: bridgeAmount} ( hyphenData.receiverAddress, hyphenData.toChainId, \"SOCKET\" );} else{ liquidityPoolManager.depositErc20( hyphenData.toChainId, token, hyphenData.receiverAddress, bridgeAmount, \"SOCKET\" );} emit SocketBridge( bridgeAmount, token, hyphenData.toChainId, HyphenIdentifier, msg.sender, hyphenData.receiverAddress, hyphenData.metadata );}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint32",
                                        "name": "swapId"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "swapData"
                                    },
                                    {
                                        "type": "HyphenDataNoToken calldata",
                                        "name": "hyphenData"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "HyphenIdentifier",
                                        "",
                                        "HyphenImpl"
                                    ],
                                    [
                                        "liquidityPoolManager",
                                        "",
                                        "HyphenImpl"
                                    ],
                                    [
                                        "NATIVE_TOKEN_ADDRESS",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ],
                                    [
                                        "socketRoute",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "HyphenImpl.SocketBridge",
                                        "HyphenLiquidityPoolManager.depositErc20",
                                        "socketRoute.getRoute"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "9ef24c8d275c178c6010a31c93277856"
                            }
                        ],
                        "bridgeERC20To": [
                            {
                                "visibility": "external",
                                "content": "function bridgeERC20To( uint256 amount, bytes32 metadata, address receiverAddress, address token, uint256 toChainId ) external payable{ ERC20 tokenInstance = ERC20(token); tokenInstance.safeTransferFrom(msg.sender, socketGateway, amount); liquidityPoolManager.depositErc20( toChainId, token, receiverAddress, amount, \"SOCKET\" ); emit SocketBridge( amount, token, toChainId, HyphenIdentifier, msg.sender, receiverAddress, metadata );}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "metadata"
                                    },
                                    {
                                        "type": "address",
                                        "name": "receiverAddress"
                                    },
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "toChainId"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "HyphenIdentifier",
                                        "",
                                        "HyphenImpl"
                                    ],
                                    [
                                        "liquidityPoolManager",
                                        "",
                                        "HyphenImpl"
                                    ],
                                    [
                                        "socketGateway",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "HyphenImpl.SocketBridge",
                                        "ERC20.safeTransferFrom",
                                        "HyphenLiquidityPoolManager.depositErc20",
                                        "HyphenImpl.ERC20"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "672b01f0c06df604f0518d0312f0e73f"
                            }
                        ],
                        "bridgeNativeTo": [
                            {
                                "visibility": "external",
                                "content": "function bridgeNativeTo( uint256 amount, bytes32 metadata, address receiverAddress, uint256 toChainId ) external payable{ liquidityPoolManager.depositNative{ value: amount} ( receiverAddress, toChainId, \"SOCKET\" ); emit SocketBridge( amount, NATIVE_TOKEN_ADDRESS, toChainId, HyphenIdentifier, msg.sender, receiverAddress, metadata );}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "metadata"
                                    },
                                    {
                                        "type": "address",
                                        "name": "receiverAddress"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "toChainId"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "HyphenIdentifier",
                                        "",
                                        "HyphenImpl"
                                    ],
                                    [
                                        "liquidityPoolManager",
                                        "",
                                        "HyphenImpl"
                                    ],
                                    [
                                        "NATIVE_TOKEN_ADDRESS",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "HyphenImpl.SocketBridge"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "e69f4ed314d9b5eacb1a453d395bb3c2"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {
                        "HyphenData": {
                            "content": "HyphenData{ address token; address receiverAddress; uint256 toChainId; bytes32 metadata;}"
                        },
                        "HyphenDataNoToken": {
                            "content": "HyphenDataNoToken{ address receiverAddress; uint256 toChainId; bytes32 metadata;}"
                        }
                    },
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "ERC20": "SafeTransferLib"
                    }
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "HyphenLiquidityPoolManager.depositErc20": "734abbc1500808f24e8e894ae1bd4e81",
                "ERC20.safeTransferFrom": "f59cf721ba6479ab2b5aa8ba2685eff0"
            },
            "md5": "1b77f77fe9f934e36f70718cdd165f9f"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\optimism\\interfaces\\optimism.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\optimism\\interfaces\\optimism.sol",
            "filename": "optimism.sol",
            "imported_contracts": {},
            "contracts": {
                "L1StandardBridge": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "depositETHTo": [
                            {
                                "visibility": "external",
                                "content": "function depositETHTo( address _to, uint32 _l2Gas, bytes calldata _data ) external payable;",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_to"
                                    },
                                    {
                                        "type": "uint32",
                                        "name": "_l2Gas"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "_data"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": true,
                                "md5": "3827b9e9e1a87d0885b7ae88b4d76837"
                            }
                        ],
                        "depositERC20To": [
                            {
                                "visibility": "external",
                                "content": "function depositERC20To( address _l1Token, address _l2Token, address _to, uint256 _amount, uint32 _l2Gas, bytes calldata _data ) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_l1Token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_l2Token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_amount"
                                    },
                                    {
                                        "type": "uint32",
                                        "name": "_l2Gas"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "_data"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "6b51e33badf919bb9bb39d867e497f6c"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                },
                "OldL1TokenGateway": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "depositTo": [
                            {
                                "visibility": "external",
                                "content": "function depositTo(address _to, uint256 _amount) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "fc1d3888f45614a34aa454ca983f6f73"
                            }
                        ],
                        "initiateSynthTransfer": [
                            {
                                "visibility": "external",
                                "content": "function initiateSynthTransfer( bytes32 currencyKey, address destination, uint256 amount ) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "currencyKey"
                                    },
                                    {
                                        "type": "address",
                                        "name": "destination"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "b009b26ef8d95134312a8c6aaa7f4076"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                },
                "IOptimismPortal": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "depositTransaction": [
                            {
                                "visibility": "external",
                                "content": "function depositTransaction( address _to, uint256 _value, uint64 _gasLimit, bool _isCreation, bytes memory _data ) external payable;",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_value"
                                    },
                                    {
                                        "type": "uint64",
                                        "name": "_gasLimit"
                                    },
                                    {
                                        "type": "bool",
                                        "name": "_isCreation"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "_data"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": true,
                                "md5": "5a3b3f154b1b0095f64cbbc5f50b94ae"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "9e6388adaad762faec8cb1319264ba0a"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\optimism\\l1\\NativeOpStack.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\optimism\\l1\\NativeOpStack.sol",
            "filename": "NativeOpStack.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\utils\\SafeTransferLib.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "SafeTransferLib": {
                            "original_name": "SafeTransferLib",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\tokens\\ERC20.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "ERC20": {
                            "original_name": "ERC20",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\optimism\\interfaces\\optimism.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "IOptimismPortal": {
                            "original_name": "IOptimismPortal",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "BridgeImplBase": {
                            "original_name": "BridgeImplBase",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                }
            },
            "contracts": {
                "NativeOptimismStack": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "BridgeImplBase"
                    ],
                    "state_variables": {
                        "NATIVE_OPTIMISM_ERC20_EXTERNAL_BRIDGE_FUNCTION_SELECTOR": {
                            "type": "bytes4",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "bytes4( keccak256( \"bridgeERC20To(address, address, address, uint32, (bytes32, bytes32), uint256, uint256, address, bytes)\" ) )",
                            "content": "bytes4 public immutable NATIVE_OPTIMISM_ERC20_EXTERNAL_BRIDGE_FUNCTION_SELECTOR = bytes4( keccak256( \"bridgeERC20To(address, address, address, uint32, (bytes32, bytes32), uint256, uint256, address, bytes)\" ) );"
                        },
                        "NATIVE_OPTIMISM_NATIVE_EXTERNAL_BRIDGE_FUNCTION_SELECTOR": {
                            "type": "bytes4",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "bytes4( keccak256( \"bridgeNativeTo(address, uint32, uint256, uint256, bytes32, bytes32, bytes)\" ) )",
                            "content": "bytes4 public immutable NATIVE_OPTIMISM_NATIVE_EXTERNAL_BRIDGE_FUNCTION_SELECTOR = bytes4( keccak256( \"bridgeNativeTo(address, uint32, uint256, uint256, bytes32, bytes32, bytes)\" ) );"
                        },
                        "NATIVE_OPTIMISM_SWAP_BRIDGE_SELECTOR": {
                            "type": "bytes4",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "bytes4( keccak256( \"swapAndBridge(uint32, bytes, (uint256, bytes32, bytes32, address, address, uint32, address, bytes))\" ) )",
                            "content": "bytes4 public immutable NATIVE_OPTIMISM_SWAP_BRIDGE_SELECTOR = bytes4( keccak256( \"swapAndBridge(uint32, bytes, (uint256, bytes32, bytes32, address, address, uint32, address, bytes))\" ) );"
                        },
                        "optimismPortal": {
                            "type": "IOptimismPortal",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": null,
                            "content": "IOptimismPortal private immutable optimismPortal;"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor ( address _socketGateway, address _socketDeployFactory, address _optimismPortal ) BridgeImplBase(_socketGateway, _socketDeployFactory){ optimismPortal = IOptimismPortal(_optimismPortal);}",
                                "modifiers": [
                                    "BridgeImplBase(_socketGateway, _socketDeployFactory)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_socketGateway"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_socketDeployFactory"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_optimismPortal"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "optimismPortal",
                                        "",
                                        "NativeOptimismStack"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "optimismPortal",
                                        "",
                                        "NativeOptimismStack"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "f234d6b3c662b6b815a86f4ce449b101"
                            }
                        ],
                        "bridgeAfterSwap": [
                            {
                                "visibility": "external",
                                "content": "function bridgeAfterSwap( uint256 amount, bytes calldata bridgeData ) external payable override{ OptimismBridgeData memory optimismBridgeData = abi.decode( bridgeData, (OptimismBridgeData) ); emit SocketBridge( amount, optimismBridgeData.token, optimismBridgeData.toChainId, optimismBridgeData.bridgeHash, msg.sender, optimismBridgeData.receiverAddress, optimismBridgeData.metadata ); if (optimismBridgeData.token == NATIVE_TOKEN_ADDRESS){ optimismPortal.depositTransaction{ value: amount} ( optimismBridgeData.receiverAddress, amount, optimismBridgeData.l2Gas, false, optimismBridgeData.data );} else{ if ( amount > ERC20(optimismBridgeData.token).allowance( address(this), optimismBridgeData.customBridgeAddress ) ){ ERC20(optimismBridgeData.token).safeApprove( optimismBridgeData.customBridgeAddress, UINT256_MAX );} L1StandardBridge(optimismBridgeData.customBridgeAddress) .depositERC20To( optimismBridgeData.token, optimismBridgeData.l2Token, optimismBridgeData.receiverAddress, amount, optimismBridgeData.l2Gas, optimismBridgeData.data ); return;}}",
                                "modifiers": [
                                    "payable",
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "bridgeData"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "optimismPortal",
                                        "",
                                        "NativeOptimismStack"
                                    ],
                                    [
                                        "allowance",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\tokens\\ERC20.sol",
                                        "ERC20"
                                    ],
                                    [
                                        "NATIVE_TOKEN_ADDRESS",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "NativeOptimismStack.L1StandardBridge",
                                        "NativeOptimismStack.SocketBridge",
                                        "NativeOptimismStack.ERC20"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "46caf9cad64459af07920b874217bd8d"
                            }
                        ],
                        "swapAndBridge": [
                            {
                                "visibility": "external",
                                "content": "function swapAndBridge( uint32 swapId, bytes calldata swapData, OptimismBridgeDataNoToken calldata optimismBridgeData ) external payable{ (bool success, bytes memory result) = socketRoute .getRoute(swapId) .delegatecall(swapData); if (!success){ assembly{ revert(add(result, 32), mload(result))}} (uint256 bridgeAmount, address token) = abi.decode( result, (uint256, address) ); emit SocketBridge( bridgeAmount, token, optimismBridgeData.toChainId, optimismBridgeData.bridgeHash, msg.sender, optimismBridgeData.receiverAddress, optimismBridgeData.metadata ); if (token == NATIVE_TOKEN_ADDRESS){ optimismPortal.depositTransaction{ value: bridgeAmount} ( optimismBridgeData.receiverAddress, bridgeAmount, optimismBridgeData.l2Gas, false, optimismBridgeData.data );} else{ if ( bridgeAmount > ERC20(token).allowance( address(this), optimismBridgeData.customBridgeAddress ) ){ ERC20(token).safeApprove( optimismBridgeData.customBridgeAddress, UINT256_MAX );} L1StandardBridge(optimismBridgeData.customBridgeAddress) .depositERC20To( token, optimismBridgeData.l2Token, optimismBridgeData.receiverAddress, bridgeAmount, optimismBridgeData.l2Gas, optimismBridgeData.data ); return;}}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint32",
                                        "name": "swapId"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "swapData"
                                    },
                                    {
                                        "type": "OptimismBridgeDataNoToken calldata",
                                        "name": "optimismBridgeData"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "optimismPortal",
                                        "",
                                        "NativeOptimismStack"
                                    ],
                                    [
                                        "allowance",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\tokens\\ERC20.sol",
                                        "ERC20"
                                    ],
                                    [
                                        "NATIVE_TOKEN_ADDRESS",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ],
                                    [
                                        "socketRoute",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "NativeOptimismStack.L1StandardBridge",
                                        "NativeOptimismStack.SocketBridge",
                                        "socketRoute.getRoute",
                                        "NativeOptimismStack.ERC20"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "f273063487c8e327657e523d51166421"
                            }
                        ],
                        "bridgeERC20To": [
                            {
                                "visibility": "external",
                                "content": "function bridgeERC20To( address token, address receiverAddress, address customBridgeAddress, uint32 l2Gas, bytes32 metadata, uint256 amount, address l2Token, uint256 toChainId, bytes32 bridgeHash, bytes calldata data ) external payable{ ERC20(token).safeTransferFrom(msg.sender, socketGateway, amount); if ( amount > ERC20(token).allowance(address(this), customBridgeAddress) ){ ERC20(token).safeApprove(customBridgeAddress, UINT256_MAX);} emit SocketBridge( amount, token, toChainId, bridgeHash, msg.sender, receiverAddress, metadata ); L1StandardBridge(customBridgeAddress).depositERC20To( token, l2Token, receiverAddress, amount, l2Gas, data ); return;}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "receiverAddress"
                                    },
                                    {
                                        "type": "address",
                                        "name": "customBridgeAddress"
                                    },
                                    {
                                        "type": "uint32",
                                        "name": "l2Gas"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "metadata"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "address",
                                        "name": "l2Token"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "toChainId"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "bridgeHash"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "data"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "allowance",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\tokens\\ERC20.sol",
                                        "ERC20"
                                    ],
                                    [
                                        "socketGateway",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "NativeOptimismStack.L1StandardBridge",
                                        "NativeOptimismStack.SocketBridge",
                                        "NativeOptimismStack.ERC20"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "5165389758b20c50bdefe3f81801d717"
                            }
                        ],
                        "bridgeNativeTo": [
                            {
                                "visibility": "external",
                                "content": "function bridgeNativeTo( address receiverAddress, uint32 l2Gas, uint256 amount, uint256 toChainId, bytes32 metadata, bytes32 bridgeHash, bytes calldata data ) external payable{ optimismPortal.depositTransaction{ value: amount} ( receiverAddress, amount, l2Gas, false, data ); emit SocketBridge( amount, NATIVE_TOKEN_ADDRESS, toChainId, bridgeHash, msg.sender, receiverAddress, metadata );}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "receiverAddress"
                                    },
                                    {
                                        "type": "uint32",
                                        "name": "l2Gas"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "toChainId"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "metadata"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "bridgeHash"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "data"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "optimismPortal",
                                        "",
                                        "NativeOptimismStack"
                                    ],
                                    [
                                        "NATIVE_TOKEN_ADDRESS",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "NativeOptimismStack.SocketBridge"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "97cad512a246e1ca9f7bd1b2fa60a5c2"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {
                        "OptimismBridgeDataNoToken": {
                            "content": "OptimismBridgeDataNoToken{ bytes32 metadata; address receiverAddress; uint256 toChainId; bytes32 bridgeHash; address customBridgeAddress; uint32 l2Gas; address l2Token; bytes data;}"
                        },
                        "OptimismBridgeData": {
                            "content": "OptimismBridgeData{ bytes32 metadata; address receiverAddress; uint256 toChainId; bytes32 bridgeHash; address customBridgeAddress; address token; uint32 l2Gas; address l2Token; bytes data;}"
                        }
                    },
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "ERC20": "SafeTransferLib"
                    }
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "ac63bb956489ea237ed2cf04428a2c98"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\optimism\\l1\\NativeOptimism.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\optimism\\l1\\NativeOptimism.sol",
            "filename": "NativeOptimism.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\utils\\SafeTransferLib.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "SafeTransferLib": {
                            "original_name": "SafeTransferLib",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\tokens\\ERC20.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "ERC20": {
                            "original_name": "ERC20",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\optimism\\interfaces\\optimism.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "BridgeImplBase": {
                            "original_name": "BridgeImplBase",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\errors\\SocketErrors.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "UnsupportedInterfaceId": {
                            "original_name": "UnsupportedInterfaceId",
                            "type": {
                                "__CT__": true,
                                "value": 15
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\static\\RouteIdentifiers.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "NATIVE_OPTIMISM": {
                            "original_name": "NATIVE_OPTIMISM",
                            "type": {
                                "__CT__": true,
                                "value": 18
                            }
                        }
                    }
                }
            },
            "contracts": {
                "NativeOptimismImpl": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "BridgeImplBase"
                    ],
                    "state_variables": {
                        "NativeOptimismIdentifier": {
                            "type": "bytes32",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "NATIVE_OPTIMISM",
                            "content": "bytes32 public immutable NativeOptimismIdentifier = NATIVE_OPTIMISM;"
                        },
                        "DESTINATION_CHAIN_ID": {
                            "type": "uint256",
                            "visibility": "public",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "10",
                            "content": "uint256 public constant DESTINATION_CHAIN_ID = 10;"
                        },
                        "NATIVE_OPTIMISM_ERC20_EXTERNAL_BRIDGE_FUNCTION_SELECTOR": {
                            "type": "bytes4",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "bytes4( keccak256( \"bridgeERC20To(address, address, address, uint32, (bytes32, bytes32), uint256, uint256, address, bytes)\" ) )",
                            "content": "bytes4 public immutable NATIVE_OPTIMISM_ERC20_EXTERNAL_BRIDGE_FUNCTION_SELECTOR = bytes4( keccak256( \"bridgeERC20To(address, address, address, uint32, (bytes32, bytes32), uint256, uint256, address, bytes)\" ) );"
                        },
                        "NATIVE_OPTIMISM_NATIVE_EXTERNAL_BRIDGE_FUNCTION_SELECTOR": {
                            "type": "bytes4",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "bytes4( keccak256( \"bridgeNativeTo(address, address, uint32, uint256, bytes32, bytes)\" ) )",
                            "content": "bytes4 public immutable NATIVE_OPTIMISM_NATIVE_EXTERNAL_BRIDGE_FUNCTION_SELECTOR = bytes4( keccak256( \"bridgeNativeTo(address, address, uint32, uint256, bytes32, bytes)\" ) );"
                        },
                        "NATIVE_OPTIMISM_SWAP_BRIDGE_SELECTOR": {
                            "type": "bytes4",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "bytes4( keccak256( \"swapAndBridge(uint32, bytes, (uint256, bytes32, bytes32, address, address, uint32, address, bytes))\" ) )",
                            "content": "bytes4 public immutable NATIVE_OPTIMISM_SWAP_BRIDGE_SELECTOR = bytes4( keccak256( \"swapAndBridge(uint32, bytes, (uint256, bytes32, bytes32, address, address, uint32, address, bytes))\" ) );"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor ( address _socketGateway, address _socketDeployFactory ) BridgeImplBase(_socketGateway, _socketDeployFactory){}",
                                "modifiers": [
                                    "BridgeImplBase(_socketGateway, _socketDeployFactory)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_socketGateway"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_socketDeployFactory"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c540f7904a2cec173bc26e32b01f2e6a"
                            }
                        ],
                        "bridgeAfterSwap": [
                            {
                                "visibility": "external",
                                "content": "function bridgeAfterSwap( uint256 amount, bytes calldata bridgeData ) external payable override{ OptimismBridgeData memory optimismBridgeData = abi.decode( bridgeData, (OptimismBridgeData) ); emit SocketBridge( amount, optimismBridgeData.token, DESTINATION_CHAIN_ID, NativeOptimismIdentifier, msg.sender, optimismBridgeData.receiverAddress, optimismBridgeData.metadata ); if (optimismBridgeData.token == NATIVE_TOKEN_ADDRESS){ L1StandardBridge(optimismBridgeData.customBridgeAddress) .depositETHTo{ value: amount} ( optimismBridgeData.receiverAddress, optimismBridgeData.l2Gas, optimismBridgeData.data );} else{ if (optimismBridgeData.interfaceId == 0){ revert UnsupportedInterfaceId();} if ( amount > ERC20(optimismBridgeData.token).allowance( address(this), optimismBridgeData.customBridgeAddress ) ){ ERC20(optimismBridgeData.token).safeApprove( optimismBridgeData.customBridgeAddress, UINT256_MAX );} if (optimismBridgeData.interfaceId == 1){ L1StandardBridge(optimismBridgeData.customBridgeAddress) .depositERC20To( optimismBridgeData.token, optimismBridgeData.l2Token, optimismBridgeData.receiverAddress, amount, optimismBridgeData.l2Gas, optimismBridgeData.data ); return;} if (optimismBridgeData.interfaceId == 2){ OldL1TokenGateway(optimismBridgeData.customBridgeAddress) .depositTo(optimismBridgeData.receiverAddress, amount); return;} if (optimismBridgeData.interfaceId == 3){ OldL1TokenGateway(optimismBridgeData.customBridgeAddress) .initiateSynthTransfer( optimismBridgeData.currencyKey, optimismBridgeData.receiverAddress, amount ); return;}}}",
                                "modifiers": [
                                    "payable",
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "bridgeData"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "NativeOptimismIdentifier",
                                        "",
                                        "NativeOptimismImpl"
                                    ],
                                    [
                                        "DESTINATION_CHAIN_ID",
                                        "",
                                        "NativeOptimismImpl"
                                    ],
                                    [
                                        "allowance",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\tokens\\ERC20.sol",
                                        "ERC20"
                                    ],
                                    [
                                        "NATIVE_TOKEN_ADDRESS",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "NativeOptimismImpl.UnsupportedInterfaceId",
                                        "NativeOptimismImpl.L1StandardBridge",
                                        "NativeOptimismImpl.SocketBridge",
                                        "NativeOptimismImpl.OldL1TokenGateway",
                                        "NativeOptimismImpl.ERC20"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "8a9979c7124ddc5f696d055e25f27594"
                            }
                        ],
                        "swapAndBridge": [
                            {
                                "visibility": "external",
                                "content": "function swapAndBridge( uint32 swapId, bytes calldata swapData, OptimismBridgeDataNoToken calldata optimismBridgeData ) external payable{ (bool success, bytes memory result) = socketRoute .getRoute(swapId) .delegatecall(swapData); if (!success){ assembly{ revert(add(result, 32), mload(result))}} (uint256 bridgeAmount, address token) = abi.decode( result, (uint256, address) ); emit SocketBridge( bridgeAmount, token, DESTINATION_CHAIN_ID, NativeOptimismIdentifier, msg.sender, optimismBridgeData.receiverAddress, optimismBridgeData.metadata ); if (token == NATIVE_TOKEN_ADDRESS){ L1StandardBridge(optimismBridgeData.customBridgeAddress) .depositETHTo{ value: bridgeAmount} ( optimismBridgeData.receiverAddress, optimismBridgeData.l2Gas, optimismBridgeData.data );} else{ if (optimismBridgeData.interfaceId == 0){ revert UnsupportedInterfaceId();} if ( bridgeAmount > ERC20(token).allowance( address(this), optimismBridgeData.customBridgeAddress ) ){ ERC20(token).safeApprove( optimismBridgeData.customBridgeAddress, UINT256_MAX );} if (optimismBridgeData.interfaceId == 1){ L1StandardBridge(optimismBridgeData.customBridgeAddress) .depositERC20To( token, optimismBridgeData.l2Token, optimismBridgeData.receiverAddress, bridgeAmount, optimismBridgeData.l2Gas, optimismBridgeData.data ); return;} if (optimismBridgeData.interfaceId == 2){ OldL1TokenGateway(optimismBridgeData.customBridgeAddress) .depositTo( optimismBridgeData.receiverAddress, bridgeAmount ); return;} if (optimismBridgeData.interfaceId == 3){ OldL1TokenGateway(optimismBridgeData.customBridgeAddress) .initiateSynthTransfer( optimismBridgeData.currencyKey, optimismBridgeData.receiverAddress, bridgeAmount ); return;}}}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint32",
                                        "name": "swapId"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "swapData"
                                    },
                                    {
                                        "type": "OptimismBridgeDataNoToken calldata",
                                        "name": "optimismBridgeData"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "NativeOptimismIdentifier",
                                        "",
                                        "NativeOptimismImpl"
                                    ],
                                    [
                                        "DESTINATION_CHAIN_ID",
                                        "",
                                        "NativeOptimismImpl"
                                    ],
                                    [
                                        "allowance",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\tokens\\ERC20.sol",
                                        "ERC20"
                                    ],
                                    [
                                        "NATIVE_TOKEN_ADDRESS",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ],
                                    [
                                        "socketRoute",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "NativeOptimismImpl.UnsupportedInterfaceId",
                                        "NativeOptimismImpl.L1StandardBridge",
                                        "NativeOptimismImpl.SocketBridge",
                                        "NativeOptimismImpl.OldL1TokenGateway",
                                        "socketRoute.getRoute",
                                        "NativeOptimismImpl.ERC20"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "89c2eb5f8c80350adeac32a42a887487"
                            }
                        ],
                        "bridgeERC20To": [
                            {
                                "visibility": "external",
                                "content": "function bridgeERC20To( address token, address receiverAddress, address customBridgeAddress, uint32 l2Gas, OptimismERC20Data calldata optimismData, uint256 amount, uint256 interfaceId, address l2Token, bytes calldata data ) external payable{ if (interfaceId == 0){ revert UnsupportedInterfaceId();} ERC20 tokenInstance = ERC20(token); tokenInstance.safeTransferFrom(msg.sender, socketGateway, amount); if ( amount > tokenInstance.allowance(address(this), customBridgeAddress) ){ tokenInstance.safeApprove(customBridgeAddress, UINT256_MAX);} emit SocketBridge( amount, token, DESTINATION_CHAIN_ID, NativeOptimismIdentifier, msg.sender, receiverAddress, optimismData.metadata ); if (interfaceId == 1){ L1StandardBridge(customBridgeAddress).depositERC20To( token, l2Token, receiverAddress, amount, l2Gas, data ); return;} if (interfaceId == 2){ OldL1TokenGateway(customBridgeAddress).depositTo( receiverAddress, amount ); return;} if (interfaceId == 3){ OldL1TokenGateway(customBridgeAddress).initiateSynthTransfer( optimismData.currencyKey, receiverAddress, amount ); return;}}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "receiverAddress"
                                    },
                                    {
                                        "type": "address",
                                        "name": "customBridgeAddress"
                                    },
                                    {
                                        "type": "uint32",
                                        "name": "l2Gas"
                                    },
                                    {
                                        "type": "OptimismERC20Data calldata",
                                        "name": "optimismData"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "interfaceId"
                                    },
                                    {
                                        "type": "address",
                                        "name": "l2Token"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "data"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "NativeOptimismIdentifier",
                                        "",
                                        "NativeOptimismImpl"
                                    ],
                                    [
                                        "DESTINATION_CHAIN_ID",
                                        "",
                                        "NativeOptimismImpl"
                                    ],
                                    [
                                        "allowance",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\tokens\\ERC20.sol",
                                        "ERC20"
                                    ],
                                    [
                                        "socketGateway",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "NativeOptimismImpl.UnsupportedInterfaceId",
                                        "ERC20.safeApprove",
                                        "NativeOptimismImpl.L1StandardBridge",
                                        "ERC20.safeTransferFrom",
                                        "NativeOptimismImpl.SocketBridge",
                                        "ERC20.allowance",
                                        "NativeOptimismImpl.OldL1TokenGateway",
                                        "NativeOptimismImpl.ERC20"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "e8ff80da0800a8658ac4f51fad14f296"
                            }
                        ],
                        "bridgeNativeTo": [
                            {
                                "visibility": "external",
                                "content": "function bridgeNativeTo( address receiverAddress, address customBridgeAddress, uint32 l2Gas, uint256 amount, bytes32 metadata, bytes calldata data ) external payable{ L1StandardBridge(customBridgeAddress).depositETHTo{ value: amount} ( receiverAddress, l2Gas, data ); emit SocketBridge( amount, NATIVE_TOKEN_ADDRESS, DESTINATION_CHAIN_ID, NativeOptimismIdentifier, msg.sender, receiverAddress, metadata );}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "receiverAddress"
                                    },
                                    {
                                        "type": "address",
                                        "name": "customBridgeAddress"
                                    },
                                    {
                                        "type": "uint32",
                                        "name": "l2Gas"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "metadata"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "data"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "NativeOptimismIdentifier",
                                        "",
                                        "NativeOptimismImpl"
                                    ],
                                    [
                                        "DESTINATION_CHAIN_ID",
                                        "",
                                        "NativeOptimismImpl"
                                    ],
                                    [
                                        "NATIVE_TOKEN_ADDRESS",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "NativeOptimismImpl.L1StandardBridge",
                                        "NativeOptimismImpl.SocketBridge"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "74255d27a6cd08b5b8f53a736bccb7af"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {
                        "OptimismBridgeDataNoToken": {
                            "content": "OptimismBridgeDataNoToken{ uint256 interfaceId; bytes32 currencyKey; bytes32 metadata; address receiverAddress; address customBridgeAddress; uint32 l2Gas; address l2Token; bytes data;}"
                        },
                        "OptimismBridgeData": {
                            "content": "OptimismBridgeData{ uint256 interfaceId; bytes32 currencyKey; bytes32 metadata; address receiverAddress; address customBridgeAddress; address token; uint32 l2Gas; address l2Token; bytes data;}"
                        },
                        "OptimismERC20Data": {
                            "content": "OptimismERC20Data{ bytes32 currencyKey; bytes32 metadata;}"
                        }
                    },
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "ERC20": "SafeTransferLib"
                    }
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "ERC20.safeTransferFrom": "f59cf721ba6479ab2b5aa8ba2685eff0",
                "ERC20.safeApprove": "f339137c724d3793fd28f64cd9b5d9bb"
            },
            "md5": "408a647092fe8bddd17bab2abe71f438"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\polygon\\interfaces\\polygon.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\polygon\\interfaces\\polygon.sol",
            "filename": "polygon.sol",
            "imported_contracts": {},
            "contracts": {
                "IRootChainManager": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "depositEtherFor": [
                            {
                                "visibility": "external",
                                "content": "function depositEtherFor(address user) external payable;",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "user"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": true,
                                "md5": "738319a882308ffcdf5ea7b430cce81a"
                            }
                        ],
                        "depositFor": [
                            {
                                "visibility": "external",
                                "content": "function depositFor( address sender, address token, bytes memory extraData ) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "sender"
                                    },
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "extraData"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "8acbf5fdf2e2d481f03ec26866984392"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "649aeb08ffc48b55c7edbe3f7f864a12"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\polygon\\NativePolygon.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\polygon\\NativePolygon.sol",
            "filename": "NativePolygon.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\utils\\SafeTransferLib.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "SafeTransferLib": {
                            "original_name": "SafeTransferLib",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\tokens\\ERC20.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "ERC20": {
                            "original_name": "ERC20",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\polygon\\interfaces\\polygon.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "BridgeImplBase": {
                            "original_name": "BridgeImplBase",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\static\\RouteIdentifiers.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "NATIVE_POLYGON": {
                            "original_name": "NATIVE_POLYGON",
                            "type": {
                                "__CT__": true,
                                "value": 18
                            }
                        }
                    }
                }
            },
            "contracts": {
                "NativePolygonImpl": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "BridgeImplBase"
                    ],
                    "state_variables": {
                        "NativePolyonIdentifier": {
                            "type": "bytes32",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "NATIVE_POLYGON",
                            "content": "bytes32 public immutable NativePolyonIdentifier = NATIVE_POLYGON;"
                        },
                        "DESTINATION_CHAIN_ID": {
                            "type": "uint256",
                            "visibility": "public",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "137",
                            "content": "uint256 public constant DESTINATION_CHAIN_ID = 137;"
                        },
                        "NATIVE_POLYGON_ERC20_EXTERNAL_BRIDGE_FUNCTION_SELECTOR": {
                            "type": "bytes4",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "bytes4(keccak256(\"bridgeERC20To(uint256, bytes32, address, address)\"))",
                            "content": "bytes4 public immutable NATIVE_POLYGON_ERC20_EXTERNAL_BRIDGE_FUNCTION_SELECTOR = bytes4(keccak256(\"bridgeERC20To(uint256, bytes32, address, address)\"));"
                        },
                        "NATIVE_POLYGON_NATIVE_EXTERNAL_BRIDGE_FUNCTION_SELECTOR": {
                            "type": "bytes4",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "bytes4(keccak256(\"bridgeNativeTo(uint256, bytes32, address)\"))",
                            "content": "bytes4 public immutable NATIVE_POLYGON_NATIVE_EXTERNAL_BRIDGE_FUNCTION_SELECTOR = bytes4(keccak256(\"bridgeNativeTo(uint256, bytes32, address)\"));"
                        },
                        "NATIVE_POLYGON_SWAP_BRIDGE_SELECTOR": {
                            "type": "bytes4",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "bytes4(keccak256(\"swapAndBridge(uint32, address, bytes32, bytes)\"))",
                            "content": "bytes4 public immutable NATIVE_POLYGON_SWAP_BRIDGE_SELECTOR = bytes4(keccak256(\"swapAndBridge(uint32, address, bytes32, bytes)\"));"
                        },
                        "rootChainManagerProxy": {
                            "type": "IRootChainManager",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": null,
                            "content": "IRootChainManager public immutable rootChainManagerProxy;"
                        },
                        "erc20PredicateProxy": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public immutable erc20PredicateProxy;"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor ( address _rootChainManagerProxy, address _erc20PredicateProxy, address _socketGateway, address _socketDeployFactory ) BridgeImplBase(_socketGateway, _socketDeployFactory){ rootChainManagerProxy = IRootChainManager(_rootChainManagerProxy); erc20PredicateProxy = _erc20PredicateProxy;}",
                                "modifiers": [
                                    "BridgeImplBase(_socketGateway, _socketDeployFactory)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_rootChainManagerProxy"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_erc20PredicateProxy"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_socketGateway"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_socketDeployFactory"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "rootChainManagerProxy",
                                        "",
                                        "NativePolygonImpl"
                                    ],
                                    [
                                        "erc20PredicateProxy",
                                        "",
                                        "NativePolygonImpl"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "rootChainManagerProxy",
                                        "",
                                        "NativePolygonImpl"
                                    ],
                                    [
                                        "erc20PredicateProxy",
                                        "",
                                        "NativePolygonImpl"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "aa34db14dcce71732889deee17b577f9"
                            }
                        ],
                        "bridgeAfterSwap": [
                            {
                                "visibility": "external",
                                "content": "function bridgeAfterSwap( uint256 amount, bytes calldata bridgeData ) external payable override{ (address token, address receiverAddress, bytes32 metadata) = abi.decode( bridgeData, (address, address, bytes32) ); if (token == NATIVE_TOKEN_ADDRESS){ IRootChainManager(rootChainManagerProxy).depositEtherFor{ value: amount} (receiverAddress);} else{ if ( amount > ERC20(token).allowance(address(this), erc20PredicateProxy) ){ ERC20(token).safeApprove(erc20PredicateProxy, UINT256_MAX);} IRootChainManager(rootChainManagerProxy).depositFor( receiverAddress, token, abi.encodePacked(amount) );} emit SocketBridge( amount, token, DESTINATION_CHAIN_ID, NativePolyonIdentifier, msg.sender, receiverAddress, metadata );}",
                                "modifiers": [
                                    "payable",
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "bridgeData"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "NativePolyonIdentifier",
                                        "",
                                        "NativePolygonImpl"
                                    ],
                                    [
                                        "DESTINATION_CHAIN_ID",
                                        "",
                                        "NativePolygonImpl"
                                    ],
                                    [
                                        "rootChainManagerProxy",
                                        "",
                                        "NativePolygonImpl"
                                    ],
                                    [
                                        "erc20PredicateProxy",
                                        "",
                                        "NativePolygonImpl"
                                    ],
                                    [
                                        "allowance",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\tokens\\ERC20.sol",
                                        "ERC20"
                                    ],
                                    [
                                        "NATIVE_TOKEN_ADDRESS",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "NativePolygonImpl.ERC20",
                                        "NativePolygonImpl.IRootChainManager",
                                        "NativePolygonImpl.SocketBridge"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "4c2cc1cdb273610a5f21c9088dfe9dfc"
                            }
                        ],
                        "swapAndBridge": [
                            {
                                "visibility": "external",
                                "content": "function swapAndBridge( uint32 swapId, address receiverAddress, bytes32 metadata, bytes calldata swapData ) external payable{ (bool success, bytes memory result) = socketRoute .getRoute(swapId) .delegatecall(swapData); if (!success){ assembly{ revert(add(result, 32), mload(result))}} (uint256 bridgeAmount, address token) = abi.decode( result, (uint256, address) ); if (token == NATIVE_TOKEN_ADDRESS){ IRootChainManager(rootChainManagerProxy).depositEtherFor{ value: bridgeAmount} (receiverAddress);} else{ if ( bridgeAmount > ERC20(token).allowance(address(this), erc20PredicateProxy) ){ ERC20(token).safeApprove(erc20PredicateProxy, UINT256_MAX);} IRootChainManager(rootChainManagerProxy).depositFor( receiverAddress, token, abi.encodePacked(bridgeAmount) );} emit SocketBridge( bridgeAmount, token, DESTINATION_CHAIN_ID, NativePolyonIdentifier, msg.sender, receiverAddress, metadata );}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint32",
                                        "name": "swapId"
                                    },
                                    {
                                        "type": "address",
                                        "name": "receiverAddress"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "metadata"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "swapData"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "NativePolyonIdentifier",
                                        "",
                                        "NativePolygonImpl"
                                    ],
                                    [
                                        "DESTINATION_CHAIN_ID",
                                        "",
                                        "NativePolygonImpl"
                                    ],
                                    [
                                        "rootChainManagerProxy",
                                        "",
                                        "NativePolygonImpl"
                                    ],
                                    [
                                        "erc20PredicateProxy",
                                        "",
                                        "NativePolygonImpl"
                                    ],
                                    [
                                        "allowance",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\tokens\\ERC20.sol",
                                        "ERC20"
                                    ],
                                    [
                                        "NATIVE_TOKEN_ADDRESS",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ],
                                    [
                                        "socketRoute",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "NativePolygonImpl.ERC20",
                                        "NativePolygonImpl.IRootChainManager",
                                        "socketRoute.getRoute",
                                        "NativePolygonImpl.SocketBridge"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "938bc5c33839ef6175dc2eb414a84be2"
                            }
                        ],
                        "bridgeERC20To": [
                            {
                                "visibility": "external",
                                "content": "function bridgeERC20To( uint256 amount, bytes32 metadata, address receiverAddress, address token ) external payable{ ERC20 tokenInstance = ERC20(token); tokenInstance.safeTransferFrom(msg.sender, socketGateway, amount); if ( amount > ERC20(token).allowance(address(this), erc20PredicateProxy) ){ ERC20(token).safeApprove(erc20PredicateProxy, UINT256_MAX);} rootChainManagerProxy.depositFor( receiverAddress, token, abi.encodePacked(amount) ); emit SocketBridge( amount, token, DESTINATION_CHAIN_ID, NativePolyonIdentifier, msg.sender, receiverAddress, metadata );}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "metadata"
                                    },
                                    {
                                        "type": "address",
                                        "name": "receiverAddress"
                                    },
                                    {
                                        "type": "address",
                                        "name": "token"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "NativePolyonIdentifier",
                                        "",
                                        "NativePolygonImpl"
                                    ],
                                    [
                                        "DESTINATION_CHAIN_ID",
                                        "",
                                        "NativePolygonImpl"
                                    ],
                                    [
                                        "rootChainManagerProxy",
                                        "",
                                        "NativePolygonImpl"
                                    ],
                                    [
                                        "erc20PredicateProxy",
                                        "",
                                        "NativePolygonImpl"
                                    ],
                                    [
                                        "allowance",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\tokens\\ERC20.sol",
                                        "ERC20"
                                    ],
                                    [
                                        "socketGateway",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20.safeTransferFrom",
                                        "NativePolygonImpl.ERC20",
                                        "NativePolygonImpl.SocketBridge",
                                        "IRootChainManager.depositFor"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "dd20570878200376d46ffc3c39044007"
                            }
                        ],
                        "bridgeNativeTo": [
                            {
                                "visibility": "external",
                                "content": "function bridgeNativeTo( uint256 amount, bytes32 metadata, address receiverAddress ) external payable{ rootChainManagerProxy.depositEtherFor{ value: amount} (receiverAddress); emit SocketBridge( amount, NATIVE_TOKEN_ADDRESS, DESTINATION_CHAIN_ID, NativePolyonIdentifier, msg.sender, receiverAddress, metadata );}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "metadata"
                                    },
                                    {
                                        "type": "address",
                                        "name": "receiverAddress"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "NativePolyonIdentifier",
                                        "",
                                        "NativePolygonImpl"
                                    ],
                                    [
                                        "DESTINATION_CHAIN_ID",
                                        "",
                                        "NativePolygonImpl"
                                    ],
                                    [
                                        "rootChainManagerProxy",
                                        "",
                                        "NativePolygonImpl"
                                    ],
                                    [
                                        "NATIVE_TOKEN_ADDRESS",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "NativePolygonImpl.SocketBridge"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "0ff41b166c74b67d17d9068e4523f563"
                            }
                        ],
                        "setApprovalForRouters": [
                            {
                                "visibility": "external",
                                "content": "function setApprovalForRouters( address[] memory routeAddresses, address[] memory tokenAddresses, bool isMax ) external isSocketGatewayOwner{ for (uint32 index = 0; index < routeAddresses.length; ){ ERC20(tokenAddresses[index]).safeApprove( routeAddresses[index], isMax ? type (uint256).max : 0 ); unchecked{ ++index;}}}",
                                "modifiers": [
                                    "isSocketGatewayOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "address[] memory",
                                        "name": "routeAddresses"
                                    },
                                    {
                                        "type": "address[] memory",
                                        "name": "tokenAddresses"
                                    },
                                    {
                                        "type": "bool",
                                        "name": "isMax"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "NativePolygonImpl.ERC20",
                                        "NativePolygonImpl.type",
                                        "NativePolygonImpl.isSocketGatewayOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "3f7b0a8309aaf1c2a91c5d49f337e25f"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "ERC20": "SafeTransferLib"
                    }
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "IRootChainManager.depositFor": "8acbf5fdf2e2d481f03ec26866984392",
                "ERC20.safeTransferFrom": "f59cf721ba6479ab2b5aa8ba2685eff0",
                "NativePolygonImpl.isSocketGatewayOwner": "6aa94456738d60c2daad284eb4ea5c71"
            },
            "md5": "32f51986f1bb2e7ce96ddd14d4ef0db4"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\refuel\\interfaces\\refuel.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\refuel\\interfaces\\refuel.sol",
            "filename": "refuel.sol",
            "imported_contracts": {},
            "contracts": {
                "IRefuel": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "depositNativeToken": [
                            {
                                "visibility": "external",
                                "content": "function depositNativeToken( uint256 destinationChainId, address _to ) external payable;",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "destinationChainId"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_to"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": true,
                                "md5": "7f80cca30bd97815acf2d7b599fe5dff"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "71268c01ad15167a6015e770e0f83f70"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\refuel\\refuel.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\refuel\\refuel.sol",
            "filename": "refuel.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\refuel\\interfaces\\refuel.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\static\\RouteIdentifiers.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "REFUEL": {
                            "original_name": "REFUEL",
                            "type": {
                                "__CT__": true,
                                "value": 18
                            }
                        }
                    }
                }
            },
            "contracts": {
                "RefuelBridgeImpl": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "BridgeImplBase"
                    ],
                    "state_variables": {
                        "RefuelIdentifier": {
                            "type": "bytes32",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "REFUEL",
                            "content": "bytes32 public immutable RefuelIdentifier = REFUEL;"
                        },
                        "refuelBridge": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public immutable refuelBridge;"
                        },
                        "REFUEL_NATIVE_EXTERNAL_BRIDGE_FUNCTION_SELECTOR": {
                            "type": "bytes4",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "bytes4(keccak256(\"bridgeNativeTo(uint256, address, uint256, bytes32)\"))",
                            "content": "bytes4 public immutable REFUEL_NATIVE_EXTERNAL_BRIDGE_FUNCTION_SELECTOR = bytes4(keccak256(\"bridgeNativeTo(uint256, address, uint256, bytes32)\"));"
                        },
                        "REFUEL_NATIVE_SWAP_BRIDGE_SELECTOR": {
                            "type": "bytes4",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "bytes4( keccak256(\"swapAndBridge(uint32, address, uint256, bytes32, bytes)\") )",
                            "content": "bytes4 public immutable REFUEL_NATIVE_SWAP_BRIDGE_SELECTOR = bytes4( keccak256(\"swapAndBridge(uint32, address, uint256, bytes32, bytes)\") );"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor ( address _refuelBridge, address _socketGateway, address _socketDeployFactory ) BridgeImplBase(_socketGateway, _socketDeployFactory){ refuelBridge = _refuelBridge;}",
                                "modifiers": [
                                    "BridgeImplBase(_socketGateway, _socketDeployFactory)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_refuelBridge"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_socketGateway"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_socketDeployFactory"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "refuelBridge",
                                        "",
                                        "RefuelBridgeImpl"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "refuelBridge",
                                        "",
                                        "RefuelBridgeImpl"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "7150eb42a5bc5af14979bc77f201dd16"
                            }
                        ],
                        "bridgeAfterSwap": [
                            {
                                "visibility": "external",
                                "content": "function bridgeAfterSwap( uint256 amount, bytes calldata bridgeData ) external payable override{ RefuelBridgeData memory refuelBridgeData = abi.decode( bridgeData, (RefuelBridgeData) ); IRefuel(refuelBridge).depositNativeToken{ value: amount} ( refuelBridgeData.toChainId, refuelBridgeData.receiverAddress ); emit SocketBridge( amount, NATIVE_TOKEN_ADDRESS, refuelBridgeData.toChainId, RefuelIdentifier, msg.sender, refuelBridgeData.receiverAddress, refuelBridgeData.metadata );}",
                                "modifiers": [
                                    "payable",
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "bridgeData"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "RefuelIdentifier",
                                        "",
                                        "RefuelBridgeImpl"
                                    ],
                                    [
                                        "refuelBridge",
                                        "",
                                        "RefuelBridgeImpl"
                                    ],
                                    [
                                        "NATIVE_TOKEN_ADDRESS",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "RefuelBridgeImpl.SocketBridge",
                                        "RefuelBridgeImpl.IRefuel"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "5e6ca6c96178613b61db07372dfd2e3a"
                            }
                        ],
                        "swapAndBridge": [
                            {
                                "visibility": "external",
                                "content": "function swapAndBridge( uint32 swapId, address receiverAddress, uint256 toChainId, bytes32 metadata, bytes calldata swapData ) external payable{ (bool success, bytes memory result) = socketRoute .getRoute(swapId) .delegatecall(swapData); if (!success){ assembly{ revert(add(result, 32), mload(result))}} (uint256 bridgeAmount, ) = abi.decode(result, (uint256, address)); IRefuel(refuelBridge).depositNativeToken{ value: bridgeAmount} ( toChainId, receiverAddress ); emit SocketBridge( bridgeAmount, NATIVE_TOKEN_ADDRESS, toChainId, RefuelIdentifier, msg.sender, receiverAddress, metadata );}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint32",
                                        "name": "swapId"
                                    },
                                    {
                                        "type": "address",
                                        "name": "receiverAddress"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "toChainId"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "metadata"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "swapData"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "RefuelIdentifier",
                                        "",
                                        "RefuelBridgeImpl"
                                    ],
                                    [
                                        "refuelBridge",
                                        "",
                                        "RefuelBridgeImpl"
                                    ],
                                    [
                                        "NATIVE_TOKEN_ADDRESS",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ],
                                    [
                                        "socketRoute",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "RefuelBridgeImpl.SocketBridge",
                                        "RefuelBridgeImpl.IRefuel",
                                        "socketRoute.getRoute"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "117ec899d44465cc545ffe5aa19462d5"
                            }
                        ],
                        "bridgeNativeTo": [
                            {
                                "visibility": "external",
                                "content": "function bridgeNativeTo( uint256 amount, address receiverAddress, uint256 toChainId, bytes32 metadata ) external payable{ IRefuel(refuelBridge).depositNativeToken{ value: amount} ( toChainId, receiverAddress ); emit SocketBridge( amount, NATIVE_TOKEN_ADDRESS, toChainId, RefuelIdentifier, msg.sender, receiverAddress, metadata );}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "address",
                                        "name": "receiverAddress"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "toChainId"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "metadata"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "RefuelIdentifier",
                                        "",
                                        "RefuelBridgeImpl"
                                    ],
                                    [
                                        "refuelBridge",
                                        "",
                                        "RefuelBridgeImpl"
                                    ],
                                    [
                                        "NATIVE_TOKEN_ADDRESS",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "RefuelBridgeImpl.SocketBridge",
                                        "RefuelBridgeImpl.IRefuel"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "486cd6fc77f9c8767b1f0d99618337ff"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {
                        "RefuelBridgeData": {
                            "content": "RefuelBridgeData{ address receiverAddress; uint256 toChainId; bytes32 metadata;}"
                        }
                    },
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "e7cb60352f5ce8cf9312bbdaab8f21d9"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\stargate\\interfaces\\IStargateEthVault.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\stargate\\interfaces\\IStargateEthVault.sol",
            "filename": "IStargateEthVault.sol",
            "imported_contracts": {},
            "contracts": {
                "IStargateEthVault": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "deposit": [
                            {
                                "visibility": "external",
                                "content": "function deposit() external payable;",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": true,
                                "md5": "4f2eec90abd519258d97a4283a54e2f1"
                            }
                        ],
                        "transfer": [
                            {
                                "visibility": "external",
                                "content": "function transfer(address to, uint value) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "value"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "0587b6354cf0d3773c8593eb4103d819"
                            }
                        ],
                        "withdraw": [
                            {
                                "visibility": "external",
                                "content": "function withdraw(uint) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": null
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "b3e698980247640e9fe99c060e4921fc"
                            }
                        ],
                        "approve": [
                            {
                                "visibility": "external",
                                "content": "function approve(address guy, uint wad) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "guy"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "wad"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "34240d6836fe0298c2125255c693bdee"
                            }
                        ],
                        "transferFrom": [
                            {
                                "visibility": "external",
                                "content": "function transferFrom( address src, address dst, uint wad ) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "src"
                                    },
                                    {
                                        "type": "address",
                                        "name": "dst"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "wad"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "236c8f52e4b30c616467dc715b9efd5e"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "6c550b1775e735ee65f1dbb1152e7cf7"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\stargate\\interfaces\\stargate.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\stargate\\interfaces\\stargate.sol",
            "filename": "stargate.sol",
            "imported_contracts": {},
            "contracts": {
                "IBridgeStargate": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "swap": [
                            {
                                "visibility": "external",
                                "content": "function swap( uint16 _dstChainId, uint256 _srcPoolId, uint256 _dstPoolId, address payable _refundAddress, uint256 _amountLD, uint256 _minAmountLD, lzTxObj memory _lzTxParams, bytes calldata _to, bytes calldata _payload ) external payable;",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint16",
                                        "name": "_dstChainId"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_srcPoolId"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_dstPoolId"
                                    },
                                    {
                                        "type": "address payable",
                                        "name": "_refundAddress"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_amountLD"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_minAmountLD"
                                    },
                                    {
                                        "type": "lzTxObj memory",
                                        "name": "_lzTxParams"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "_to"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "_payload"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": true,
                                "md5": "f3fbf55c097f08094ef8988a5c65fb26"
                            }
                        ],
                        "swapETH": [
                            {
                                "visibility": "external",
                                "content": "function swapETH( uint16 _dstChainId, address payable _refundAddress, bytes calldata _toAddress, uint256 _amountLD, uint256 _minAmountLD ) external payable;",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint16",
                                        "name": "_dstChainId"
                                    },
                                    {
                                        "type": "address payable",
                                        "name": "_refundAddress"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "_toAddress"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_amountLD"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_minAmountLD"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": true,
                                "md5": "5915cfcf370addb688c4d9dc87974e42"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {
                        "lzTxObj": {
                            "content": "lzTxObj{ uint256 dstGasForCall; uint256 dstNativeAmount; bytes dstNativeAddr;}"
                        }
                    },
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "b7c49df9161bc8178536fbec6a626c47"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\stargate\\l1\\Stargate.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\stargate\\l1\\Stargate.sol",
            "filename": "Stargate.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\utils\\SafeTransferLib.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "SafeTransferLib": {
                            "original_name": "SafeTransferLib",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\tokens\\ERC20.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "ERC20": {
                            "original_name": "ERC20",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\stargate\\interfaces\\stargate.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "BridgeImplBase": {
                            "original_name": "BridgeImplBase",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\static\\RouteIdentifiers.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "STARGATE": {
                            "original_name": "STARGATE",
                            "type": {
                                "__CT__": true,
                                "value": 18
                            }
                        }
                    }
                }
            },
            "contracts": {
                "StargateImplL1": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "BridgeImplBase"
                    ],
                    "state_variables": {
                        "StargateIdentifier": {
                            "type": "bytes32",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "STARGATE",
                            "content": "bytes32 public immutable StargateIdentifier = STARGATE;"
                        },
                        "STARGATE_L1_ERC20_EXTERNAL_BRIDGE_FUNCTION_SELECTOR": {
                            "type": "bytes4",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "bytes4( keccak256( \"bridgeERC20To(address, address, address, uint256, uint256, (uint256, uint256, uint256, uint256, bytes32, bytes, uint16))\" ) )",
                            "content": "bytes4 public immutable STARGATE_L1_ERC20_EXTERNAL_BRIDGE_FUNCTION_SELECTOR = bytes4( keccak256( \"bridgeERC20To(address, address, address, uint256, uint256, (uint256, uint256, uint256, uint256, bytes32, bytes, uint16))\" ) );"
                        },
                        "STARGATE_L1_NATIVE_EXTERNAL_BRIDGE_FUNCTION_SELECTOR": {
                            "type": "bytes4",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "bytes4( keccak256( \"bridgeNativeTo(address, address, uint16, uint256, uint256, uint256, bytes32)\" ) )",
                            "content": "bytes4 public immutable STARGATE_L1_NATIVE_EXTERNAL_BRIDGE_FUNCTION_SELECTOR = bytes4( keccak256( \"bridgeNativeTo(address, address, uint16, uint256, uint256, uint256, bytes32)\" ) );"
                        },
                        "STARGATE_L1_SWAP_BRIDGE_SELECTOR": {
                            "type": "bytes4",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "bytes4( keccak256( \"swapAndBridge(uint32, bytes, (address, address, uint16, uint256, uint256, uint256, uint256, uint256, uint256, bytes32, bytes))\" ) )",
                            "content": "bytes4 public immutable STARGATE_L1_SWAP_BRIDGE_SELECTOR = bytes4( keccak256( \"swapAndBridge(uint32, bytes, (address, address, uint16, uint256, uint256, uint256, uint256, uint256, uint256, bytes32, bytes))\" ) );"
                        },
                        "router": {
                            "type": "IBridgeStargate",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": null,
                            "content": "IBridgeStargate public immutable router;"
                        },
                        "routerETH": {
                            "type": "IBridgeStargate",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": null,
                            "content": "IBridgeStargate public immutable routerETH;"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor ( address _router, address _routerEth, address _socketGateway, address _socketDeployFactory ) BridgeImplBase(_socketGateway, _socketDeployFactory){ router = IBridgeStargate(_router); routerETH = IBridgeStargate(_routerEth);}",
                                "modifiers": [
                                    "BridgeImplBase(_socketGateway, _socketDeployFactory)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_router"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_routerEth"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_socketGateway"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_socketDeployFactory"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "router",
                                        "",
                                        "StargateImplL1"
                                    ],
                                    [
                                        "routerETH",
                                        "",
                                        "StargateImplL1"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "router",
                                        "",
                                        "StargateImplL1"
                                    ],
                                    [
                                        "routerETH",
                                        "",
                                        "StargateImplL1"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "58b2cfc9a97a1484dd08e244e3c6e82a"
                            }
                        ],
                        "bridgeAfterSwap": [
                            {
                                "visibility": "external",
                                "content": "function bridgeAfterSwap( uint256 amount, bytes calldata bridgeData ) external payable override{ StargateBridgeData memory stargateBridgeData = abi.decode( bridgeData, (StargateBridgeData) ); if (stargateBridgeData.token == NATIVE_TOKEN_ADDRESS){ routerETH.swapETH{ value: amount + stargateBridgeData.optionalValue} ( stargateBridgeData.stargateDstChainId, payable(stargateBridgeData.senderAddress), abi.encodePacked(stargateBridgeData.receiverAddress), amount, stargateBridgeData.minReceivedAmt );} else{ ERC20(stargateBridgeData.token).safeApprove( address(router), amount );{ router.swap{ value: stargateBridgeData.value} ( stargateBridgeData.stargateDstChainId, stargateBridgeData.srcPoolId, stargateBridgeData.dstPoolId, payable(stargateBridgeData.senderAddress), amount, stargateBridgeData.minReceivedAmt, IBridgeStargate.lzTxObj( stargateBridgeData.destinationGasLimit, 0, \"0x\" ), abi.encodePacked(stargateBridgeData.receiverAddress), stargateBridgeData.destinationPayload );}} emit SocketBridge( amount, stargateBridgeData.token, stargateBridgeData.stargateDstChainId, StargateIdentifier, msg.sender, stargateBridgeData.receiverAddress, stargateBridgeData.metadata );}",
                                "modifiers": [
                                    "payable",
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "bridgeData"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "StargateIdentifier",
                                        "",
                                        "StargateImplL1"
                                    ],
                                    [
                                        "router",
                                        "",
                                        "StargateImplL1"
                                    ],
                                    [
                                        "routerETH",
                                        "",
                                        "StargateImplL1"
                                    ],
                                    [
                                        "NATIVE_TOKEN_ADDRESS",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "StargateImplL1.SocketBridge",
                                        "IBridgeStargate.lzTxObj",
                                        "StargateImplL1.ERC20"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "0cefcfbcbedb857ead8729ec27801f18"
                            }
                        ],
                        "swapAndBridge": [
                            {
                                "visibility": "external",
                                "content": "function swapAndBridge( uint32 swapId, bytes calldata swapData, StargateBridgeDataNoToken calldata stargateBridgeData ) external payable{ (bool success, bytes memory result) = socketRoute .getRoute(swapId) .delegatecall(swapData); if (!success){ assembly{ revert(add(result, 32), mload(result))}} (uint256 bridgeAmount, address token) = abi.decode( result, (uint256, address) ); if (token == NATIVE_TOKEN_ADDRESS){ routerETH.swapETH{ value: bridgeAmount + stargateBridgeData.optionalValue} ( stargateBridgeData.stargateDstChainId, payable(stargateBridgeData.senderAddress), abi.encodePacked(stargateBridgeData.receiverAddress), bridgeAmount, stargateBridgeData.minReceivedAmt );} else{ ERC20(token).safeApprove(address(router), bridgeAmount);{ router.swap{ value: stargateBridgeData.value} ( stargateBridgeData.stargateDstChainId, stargateBridgeData.srcPoolId, stargateBridgeData.dstPoolId, payable(stargateBridgeData.senderAddress), bridgeAmount, stargateBridgeData.minReceivedAmt, IBridgeStargate.lzTxObj( stargateBridgeData.destinationGasLimit, 0, \"0x\" ), abi.encodePacked(stargateBridgeData.receiverAddress), stargateBridgeData.destinationPayload );}} emit SocketBridge( bridgeAmount, token, stargateBridgeData.stargateDstChainId, StargateIdentifier, msg.sender, stargateBridgeData.receiverAddress, stargateBridgeData.metadata );}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint32",
                                        "name": "swapId"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "swapData"
                                    },
                                    {
                                        "type": "StargateBridgeDataNoToken calldata",
                                        "name": "stargateBridgeData"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "StargateIdentifier",
                                        "",
                                        "StargateImplL1"
                                    ],
                                    [
                                        "router",
                                        "",
                                        "StargateImplL1"
                                    ],
                                    [
                                        "routerETH",
                                        "",
                                        "StargateImplL1"
                                    ],
                                    [
                                        "NATIVE_TOKEN_ADDRESS",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ],
                                    [
                                        "socketRoute",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "StargateImplL1.SocketBridge",
                                        "IBridgeStargate.lzTxObj",
                                        "StargateImplL1.ERC20",
                                        "socketRoute.getRoute"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "c77f5d4c3fdc25be82c21b000f07607f"
                            }
                        ],
                        "bridgeERC20To": [
                            {
                                "visibility": "external",
                                "content": "function bridgeERC20To( address token, address senderAddress, address receiverAddress, uint256 amount, uint256 value, StargateBridgeExtraData calldata stargateBridgeExtraData ) external payable{ ERC20 tokenInstance = ERC20(token); tokenInstance.safeTransferFrom(msg.sender, socketGateway, amount); tokenInstance.safeApprove(address(router), amount);{ router.swap{ value: value} ( stargateBridgeExtraData.stargateDstChainId, stargateBridgeExtraData.srcPoolId, stargateBridgeExtraData.dstPoolId, payable(senderAddress), amount, stargateBridgeExtraData.minReceivedAmt, IBridgeStargate.lzTxObj( stargateBridgeExtraData.destinationGasLimit, 0, \"0x\" ), abi.encodePacked(receiverAddress), stargateBridgeExtraData.destinationPayload );} emit SocketBridge( amount, token, stargateBridgeExtraData.stargateDstChainId, StargateIdentifier, msg.sender, receiverAddress, stargateBridgeExtraData.metadata );}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "senderAddress"
                                    },
                                    {
                                        "type": "address",
                                        "name": "receiverAddress"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    },
                                    {
                                        "type": "StargateBridgeExtraData calldata",
                                        "name": "stargateBridgeExtraData"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "StargateIdentifier",
                                        "",
                                        "StargateImplL1"
                                    ],
                                    [
                                        "router",
                                        "",
                                        "StargateImplL1"
                                    ],
                                    [
                                        "socketGateway",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "StargateImplL1.SocketBridge",
                                        "IBridgeStargate.lzTxObj",
                                        "ERC20.safeTransferFrom",
                                        "ERC20.safeApprove",
                                        "StargateImplL1.ERC20"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "c9cae64a317390baefa4aac50394e129"
                            }
                        ],
                        "bridgeNativeTo": [
                            {
                                "visibility": "external",
                                "content": "function bridgeNativeTo( address receiverAddress, address senderAddress, uint16 stargateDstChainId, uint256 amount, uint256 minReceivedAmt, uint256 optionalValue, bytes32 metadata ) external payable{ routerETH.swapETH{ value: amount + optionalValue} ( stargateDstChainId, payable(senderAddress), abi.encodePacked(receiverAddress), amount, minReceivedAmt ); emit SocketBridge( amount, NATIVE_TOKEN_ADDRESS, stargateDstChainId, StargateIdentifier, msg.sender, receiverAddress, metadata );}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "receiverAddress"
                                    },
                                    {
                                        "type": "address",
                                        "name": "senderAddress"
                                    },
                                    {
                                        "type": "uint16",
                                        "name": "stargateDstChainId"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "minReceivedAmt"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "optionalValue"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "metadata"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "StargateIdentifier",
                                        "",
                                        "StargateImplL1"
                                    ],
                                    [
                                        "routerETH",
                                        "",
                                        "StargateImplL1"
                                    ],
                                    [
                                        "NATIVE_TOKEN_ADDRESS",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "StargateImplL1.SocketBridge"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "e5992ddbb92d9d1c74392dfe3ef8dbd3"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {
                        "StargateBridgeExtraData": {
                            "content": "StargateBridgeExtraData{ uint256 srcPoolId; uint256 dstPoolId; uint256 destinationGasLimit; uint256 minReceivedAmt; bytes32 metadata; bytes destinationPayload; uint16 stargateDstChainId;}"
                        },
                        "StargateBridgeDataNoToken": {
                            "content": "StargateBridgeDataNoToken{ address receiverAddress; address senderAddress; uint16 stargateDstChainId; uint256 value; uint256 srcPoolId; uint256 dstPoolId; uint256 minReceivedAmt; uint256 optionalValue; uint256 destinationGasLimit; bytes32 metadata; bytes destinationPayload;}"
                        },
                        "StargateBridgeData": {
                            "content": "StargateBridgeData{ address token; address receiverAddress; address senderAddress; uint16 stargateDstChainId; uint256 value; uint256 srcPoolId; uint256 dstPoolId; uint256 minReceivedAmt; uint256 optionalValue; uint256 destinationGasLimit; bytes32 metadata; bytes destinationPayload;}"
                        }
                    },
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "ERC20": "SafeTransferLib"
                    }
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "ERC20.safeTransferFrom": "f59cf721ba6479ab2b5aa8ba2685eff0",
                "ERC20.safeApprove": "f339137c724d3793fd28f64cd9b5d9bb"
            },
            "md5": "e0fbc527acc919e1726dc00b3cdc47f5"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\stargate\\l2\\Stargate.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\stargate\\l2\\Stargate.sol",
            "filename": "Stargate.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\utils\\SafeTransferLib.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "SafeTransferLib": {
                            "original_name": "SafeTransferLib",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\tokens\\ERC20.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "ERC20": {
                            "original_name": "ERC20",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\stargate\\interfaces\\stargate.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\errors\\SocketErrors.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "BridgeImplBase": {
                            "original_name": "BridgeImplBase",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\static\\RouteIdentifiers.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "STARGATE": {
                            "original_name": "STARGATE",
                            "type": {
                                "__CT__": true,
                                "value": 18
                            }
                        }
                    }
                }
            },
            "contracts": {
                "StargateImplL2": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "BridgeImplBase"
                    ],
                    "state_variables": {
                        "StargateIdentifier": {
                            "type": "bytes32",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "STARGATE",
                            "content": "bytes32 public immutable StargateIdentifier = STARGATE;"
                        },
                        "STARGATE_L2_ERC20_EXTERNAL_BRIDGE_FUNCTION_SELECTOR": {
                            "type": "bytes4",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "bytes4( keccak256( \"bridgeERC20To(address, address, address, uint256, uint256, (uint256, uint256, uint256, uint256, bytes32, bytes, uint16))\" ) )",
                            "content": "bytes4 public immutable STARGATE_L2_ERC20_EXTERNAL_BRIDGE_FUNCTION_SELECTOR = bytes4( keccak256( \"bridgeERC20To(address, address, address, uint256, uint256, (uint256, uint256, uint256, uint256, bytes32, bytes, uint16))\" ) );"
                        },
                        "STARGATE_L1_SWAP_BRIDGE_SELECTOR": {
                            "type": "bytes4",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "bytes4( keccak256( \"swapAndBridge(uint32, bytes, (address, address, uint16, uint256, uint256, uint256, uint256, uint256, uint256, bytes32, bytes))\" ) )",
                            "content": "bytes4 public immutable STARGATE_L1_SWAP_BRIDGE_SELECTOR = bytes4( keccak256( \"swapAndBridge(uint32, bytes, (address, address, uint16, uint256, uint256, uint256, uint256, uint256, uint256, bytes32, bytes))\" ) );"
                        },
                        "STARGATE_L2_NATIVE_EXTERNAL_BRIDGE_FUNCTION_SELECTOR": {
                            "type": "bytes4",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "bytes4( keccak256( \"bridgeNativeTo(address, address, uint16, uint256, uint256, uint256, bytes32)\" ) )",
                            "content": "bytes4 public immutable STARGATE_L2_NATIVE_EXTERNAL_BRIDGE_FUNCTION_SELECTOR = bytes4( keccak256( \"bridgeNativeTo(address, address, uint16, uint256, uint256, uint256, bytes32)\" ) );"
                        },
                        "router": {
                            "type": "IBridgeStargate",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": null,
                            "content": "IBridgeStargate public immutable router;"
                        },
                        "routerETH": {
                            "type": "IBridgeStargate",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": null,
                            "content": "IBridgeStargate public immutable routerETH;"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor ( address _router, address _routerEth, address _socketGateway, address _socketDeployFactory ) BridgeImplBase(_socketGateway, _socketDeployFactory){ router = IBridgeStargate(_router); routerETH = IBridgeStargate(_routerEth);}",
                                "modifiers": [
                                    "BridgeImplBase(_socketGateway, _socketDeployFactory)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_router"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_routerEth"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_socketGateway"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_socketDeployFactory"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "router",
                                        "",
                                        "StargateImplL2"
                                    ],
                                    [
                                        "routerETH",
                                        "",
                                        "StargateImplL2"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "router",
                                        "",
                                        "StargateImplL2"
                                    ],
                                    [
                                        "routerETH",
                                        "",
                                        "StargateImplL2"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "58b2cfc9a97a1484dd08e244e3c6e82a"
                            }
                        ],
                        "bridgeAfterSwap": [
                            {
                                "visibility": "external",
                                "content": "function bridgeAfterSwap( uint256 amount, bytes calldata bridgeData ) external payable override{ StargateBridgeData memory stargateBridgeData = abi.decode( bridgeData, (StargateBridgeData) ); if (stargateBridgeData.token == NATIVE_TOKEN_ADDRESS){ routerETH.swapETH{ value: amount + stargateBridgeData.optionalValue} ( stargateBridgeData.stargateDstChainId, payable(stargateBridgeData.senderAddress), abi.encodePacked(stargateBridgeData.receiverAddress), amount, stargateBridgeData.minReceivedAmt );} else{ if ( amount > ERC20(stargateBridgeData.token).allowance( address(this), address(router) ) ){ ERC20(stargateBridgeData.token).safeApprove( address(router), UINT256_MAX );}{ router.swap{ value: stargateBridgeData.value} ( stargateBridgeData.stargateDstChainId, stargateBridgeData.srcPoolId, stargateBridgeData.dstPoolId, payable(stargateBridgeData.senderAddress), amount, stargateBridgeData.minReceivedAmt, IBridgeStargate.lzTxObj( stargateBridgeData.destinationGasLimit, 0, \"0x\" ), abi.encodePacked(stargateBridgeData.receiverAddress), stargateBridgeData.destinationPayload );}} emit SocketBridge( amount, stargateBridgeData.token, stargateBridgeData.stargateDstChainId, StargateIdentifier, msg.sender, stargateBridgeData.receiverAddress, stargateBridgeData.metadata );}",
                                "modifiers": [
                                    "payable",
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "bridgeData"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "StargateIdentifier",
                                        "",
                                        "StargateImplL2"
                                    ],
                                    [
                                        "router",
                                        "",
                                        "StargateImplL2"
                                    ],
                                    [
                                        "routerETH",
                                        "",
                                        "StargateImplL2"
                                    ],
                                    [
                                        "allowance",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\tokens\\ERC20.sol",
                                        "ERC20"
                                    ],
                                    [
                                        "NATIVE_TOKEN_ADDRESS",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "IBridgeStargate.lzTxObj",
                                        "StargateImplL2.ERC20",
                                        "StargateImplL2.SocketBridge"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "b61191c8aab51aeba1ea2712df393c05"
                            }
                        ],
                        "swapAndBridge": [
                            {
                                "visibility": "external",
                                "content": "function swapAndBridge( uint32 swapId, bytes calldata swapData, StargateBridgeDataNoToken calldata stargateBridgeData ) external payable{ (bool success, bytes memory result) = socketRoute .getRoute(swapId) .delegatecall(swapData); if (!success){ assembly{ revert(add(result, 32), mload(result))}} (uint256 bridgeAmount, address token) = abi.decode( result, (uint256, address) ); if (token == NATIVE_TOKEN_ADDRESS){ routerETH.swapETH{ value: bridgeAmount + stargateBridgeData.optionalValue} ( stargateBridgeData.stargateDstChainId, payable(stargateBridgeData.senderAddress), abi.encodePacked(stargateBridgeData.receiverAddress), bridgeAmount, stargateBridgeData.minReceivedAmt );} else{ if ( bridgeAmount > ERC20(token).allowance(address(this), address(router)) ){ ERC20(token).safeApprove(address(router), UINT256_MAX);}{ router.swap{ value: stargateBridgeData.value} ( stargateBridgeData.stargateDstChainId, stargateBridgeData.srcPoolId, stargateBridgeData.dstPoolId, payable(stargateBridgeData.senderAddress), bridgeAmount, stargateBridgeData.minReceivedAmt, IBridgeStargate.lzTxObj( stargateBridgeData.destinationGasLimit, 0, \"0x\" ), abi.encodePacked(stargateBridgeData.receiverAddress), stargateBridgeData.destinationPayload );}} emit SocketBridge( bridgeAmount, token, stargateBridgeData.stargateDstChainId, StargateIdentifier, msg.sender, stargateBridgeData.receiverAddress, stargateBridgeData.metadata );}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint32",
                                        "name": "swapId"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "swapData"
                                    },
                                    {
                                        "type": "StargateBridgeDataNoToken calldata",
                                        "name": "stargateBridgeData"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "StargateIdentifier",
                                        "",
                                        "StargateImplL2"
                                    ],
                                    [
                                        "router",
                                        "",
                                        "StargateImplL2"
                                    ],
                                    [
                                        "routerETH",
                                        "",
                                        "StargateImplL2"
                                    ],
                                    [
                                        "allowance",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\tokens\\ERC20.sol",
                                        "ERC20"
                                    ],
                                    [
                                        "NATIVE_TOKEN_ADDRESS",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ],
                                    [
                                        "socketRoute",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "StargateImplL2.SocketBridge",
                                        "IBridgeStargate.lzTxObj",
                                        "StargateImplL2.ERC20",
                                        "socketRoute.getRoute"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "ce39469d12956d7f10a2313239ce2d2c"
                            }
                        ],
                        "bridgeERC20To": [
                            {
                                "visibility": "external",
                                "content": "function bridgeERC20To( address token, address senderAddress, address receiverAddress, uint256 amount, uint256 optionalValue, StargateBridgeExtraData calldata stargateBridgeExtraData ) external payable{ ERC20 tokenInstance = ERC20(token); tokenInstance.safeTransferFrom(msg.sender, socketGateway, amount); if (amount > tokenInstance.allowance(address(this), address(router))){ tokenInstance.safeApprove(address(router), UINT256_MAX);}{ router.swap{ value: optionalValue} ( stargateBridgeExtraData.stargateDstChainId, stargateBridgeExtraData.srcPoolId, stargateBridgeExtraData.dstPoolId, payable(senderAddress), amount, stargateBridgeExtraData.minReceivedAmt, IBridgeStargate.lzTxObj( stargateBridgeExtraData.destinationGasLimit, 0, \"0x\" ), abi.encodePacked(receiverAddress), stargateBridgeExtraData.destinationPayload );} emit SocketBridge( amount, token, stargateBridgeExtraData.stargateDstChainId, StargateIdentifier, msg.sender, receiverAddress, stargateBridgeExtraData.metadata );}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "senderAddress"
                                    },
                                    {
                                        "type": "address",
                                        "name": "receiverAddress"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "optionalValue"
                                    },
                                    {
                                        "type": "StargateBridgeExtraData calldata",
                                        "name": "stargateBridgeExtraData"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "StargateIdentifier",
                                        "",
                                        "StargateImplL2"
                                    ],
                                    [
                                        "router",
                                        "",
                                        "StargateImplL2"
                                    ],
                                    [
                                        "allowance",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\tokens\\ERC20.sol",
                                        "ERC20"
                                    ],
                                    [
                                        "socketGateway",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "IBridgeStargate.lzTxObj",
                                        "StargateImplL2.SocketBridge",
                                        "ERC20.safeApprove",
                                        "ERC20.safeTransferFrom",
                                        "ERC20.allowance",
                                        "StargateImplL2.ERC20"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "188cfa0acabf8b53cd0db2dcbebf4eb4"
                            }
                        ],
                        "bridgeNativeTo": [
                            {
                                "visibility": "external",
                                "content": "function bridgeNativeTo( address receiverAddress, address senderAddress, uint16 stargateDstChainId, uint256 amount, uint256 minReceivedAmt, uint256 optionalValue, bytes32 metadata ) external payable{ routerETH.swapETH{ value: amount + optionalValue} ( stargateDstChainId, payable(senderAddress), abi.encodePacked(receiverAddress), amount, minReceivedAmt ); emit SocketBridge( amount, NATIVE_TOKEN_ADDRESS, stargateDstChainId, StargateIdentifier, msg.sender, receiverAddress, metadata );}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "receiverAddress"
                                    },
                                    {
                                        "type": "address",
                                        "name": "senderAddress"
                                    },
                                    {
                                        "type": "uint16",
                                        "name": "stargateDstChainId"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "minReceivedAmt"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "optionalValue"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "metadata"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "StargateIdentifier",
                                        "",
                                        "StargateImplL2"
                                    ],
                                    [
                                        "routerETH",
                                        "",
                                        "StargateImplL2"
                                    ],
                                    [
                                        "NATIVE_TOKEN_ADDRESS",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "StargateImplL2.SocketBridge"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "e5992ddbb92d9d1c74392dfe3ef8dbd3"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {
                        "StargateBridgeExtraData": {
                            "content": "StargateBridgeExtraData{ uint256 srcPoolId; uint256 dstPoolId; uint256 destinationGasLimit; uint256 minReceivedAmt; bytes32 metadata; bytes destinationPayload; uint16 stargateDstChainId;}"
                        },
                        "StargateBridgeDataNoToken": {
                            "content": "StargateBridgeDataNoToken{ address receiverAddress; address senderAddress; uint16 stargateDstChainId; uint256 value; uint256 srcPoolId; uint256 dstPoolId; uint256 minReceivedAmt; uint256 optionalValue; uint256 destinationGasLimit; bytes32 metadata; bytes destinationPayload;}"
                        },
                        "StargateBridgeData": {
                            "content": "StargateBridgeData{ address token; address receiverAddress; address senderAddress; uint16 stargateDstChainId; uint256 value; uint256 srcPoolId; uint256 dstPoolId; uint256 minReceivedAmt; uint256 optionalValue; uint256 destinationGasLimit; bytes32 metadata; bytes destinationPayload;}"
                        }
                    },
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "ERC20": "SafeTransferLib"
                    }
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "ERC20.safeTransferFrom": "f59cf721ba6479ab2b5aa8ba2685eff0",
                "ERC20.safeApprove": "f339137c724d3793fd28f64cd9b5d9bb"
            },
            "md5": "ebbe136310d818266427538ef6ed194b"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\stargate\\l2\\StargateV2.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\stargate\\l2\\StargateV2.sol",
            "filename": "StargateV2.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\utils\\SafeTransferLib.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "SafeTransferLib": {
                            "original_name": "SafeTransferLib",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\tokens\\ERC20.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "ERC20": {
                            "original_name": "ERC20",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\stargate\\interfaces\\stargate.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\stargate\\interfaces\\IStargateEthVault.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\errors\\SocketErrors.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "BridgeImplBase": {
                            "original_name": "BridgeImplBase",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\static\\RouteIdentifiers.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "STARGATE": {
                            "original_name": "STARGATE",
                            "type": {
                                "__CT__": true,
                                "value": 18
                            }
                        }
                    }
                }
            },
            "contracts": {
                "StargateImplL2V2": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "BridgeImplBase"
                    ],
                    "state_variables": {
                        "StargateIdentifier": {
                            "type": "bytes32",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "STARGATE",
                            "content": "bytes32 public immutable StargateIdentifier = STARGATE;"
                        },
                        "STARGATE_L2_ERC20_EXTERNAL_BRIDGE_FUNCTION_SELECTOR": {
                            "type": "bytes4",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "bytes4( keccak256( \"bridgeERC20To(address, address, address, uint256, uint256, (uint256, uint256, uint256, uint256, bytes32, bytes, uint16))\" ) )",
                            "content": "bytes4 public immutable STARGATE_L2_ERC20_EXTERNAL_BRIDGE_FUNCTION_SELECTOR = bytes4( keccak256( \"bridgeERC20To(address, address, address, uint256, uint256, (uint256, uint256, uint256, uint256, bytes32, bytes, uint16))\" ) );"
                        },
                        "STARGATE_L1_SWAP_BRIDGE_SELECTOR": {
                            "type": "bytes4",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "bytes4( keccak256( \"swapAndBridge(uint32, bytes, (address, address, uint16, uint256, uint256, uint256, uint256, uint256, uint256, bytes32, bytes))\" ) )",
                            "content": "bytes4 public immutable STARGATE_L1_SWAP_BRIDGE_SELECTOR = bytes4( keccak256( \"swapAndBridge(uint32, bytes, (address, address, uint16, uint256, uint256, uint256, uint256, uint256, uint256, bytes32, bytes))\" ) );"
                        },
                        "STARGATE_L2_NATIVE_EXTERNAL_BRIDGE_FUNCTION_SELECTOR": {
                            "type": "bytes4",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "bytes4( keccak256( \"bridgeNativeTo(address, address, uint16, uint256, uint256, uint256, bytes32)\" ) )",
                            "content": "bytes4 public immutable STARGATE_L2_NATIVE_EXTERNAL_BRIDGE_FUNCTION_SELECTOR = bytes4( keccak256( \"bridgeNativeTo(address, address, uint16, uint256, uint256, uint256, bytes32)\" ) );"
                        },
                        "router": {
                            "type": "IBridgeStargate",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": null,
                            "content": "IBridgeStargate public immutable router;"
                        },
                        "stargateEthVault": {
                            "type": "IStargateEthVault",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": null,
                            "content": "IStargateEthVault public immutable stargateEthVault;"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor ( address _router, address _stragateEthVault, address _socketGateway, address _socketDeployFactory ) BridgeImplBase(_socketGateway, _socketDeployFactory){ router = IBridgeStargate(_router); stargateEthVault = IStargateEthVault(_stragateEthVault);}",
                                "modifiers": [
                                    "BridgeImplBase(_socketGateway, _socketDeployFactory)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_router"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_stragateEthVault"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_socketGateway"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_socketDeployFactory"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "router",
                                        "",
                                        "StargateImplL2V2"
                                    ],
                                    [
                                        "stargateEthVault",
                                        "",
                                        "StargateImplL2V2"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "router",
                                        "",
                                        "StargateImplL2V2"
                                    ],
                                    [
                                        "stargateEthVault",
                                        "",
                                        "StargateImplL2V2"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "9841b32de71e428bab64601751c2a208"
                            }
                        ],
                        "bridgeAfterSwap": [
                            {
                                "visibility": "external",
                                "content": "function bridgeAfterSwap( uint256 amount, bytes calldata bridgeData ) external payable override{ StargateBridgeData memory stargateBridgeData = abi.decode( bridgeData, (StargateBridgeData) ); if (stargateBridgeData.token == NATIVE_TOKEN_ADDRESS){ stargateEthVault.deposit{ value: amount} (); if ( amount > ERC20(address(stargateEthVault)).allowance( address(this), address(router) ) ){ stargateEthVault.approve(address(router), UINT256_MAX);} router.swap{ value: stargateBridgeData.value} ( stargateBridgeData.stargateDstChainId, stargateBridgeData.srcPoolId, stargateBridgeData.dstPoolId, payable(stargateBridgeData.senderAddress), amount, stargateBridgeData.minReceivedAmt, IBridgeStargate.lzTxObj( stargateBridgeData.destinationGasLimit, 0, \"0x\" ), abi.encodePacked(stargateBridgeData.receiverAddress), stargateBridgeData.destinationPayload );} else{ if (stargateBridgeData.isNativeSwapRequired) _performNativeSwap( stargateBridgeData.swapData, stargateBridgeData.swapId, stargateBridgeData.value ); if ( amount > ERC20(stargateBridgeData.token).allowance( address(this), address(router) ) ){ ERC20(stargateBridgeData.token).safeApprove( address(router), UINT256_MAX );}{ router.swap{ value: stargateBridgeData.value} ( stargateBridgeData.stargateDstChainId, stargateBridgeData.srcPoolId, stargateBridgeData.dstPoolId, payable(stargateBridgeData.senderAddress), amount, stargateBridgeData.minReceivedAmt, IBridgeStargate.lzTxObj( stargateBridgeData.destinationGasLimit, 0, \"0x\" ), abi.encodePacked(stargateBridgeData.receiverAddress), stargateBridgeData.destinationPayload );}} emit SocketBridge( amount, stargateBridgeData.token, stargateBridgeData.stargateDstChainId, StargateIdentifier, msg.sender, stargateBridgeData.receiverAddress, stargateBridgeData.metadata );}",
                                "modifiers": [
                                    "payable",
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "bridgeData"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "StargateIdentifier",
                                        "",
                                        "StargateImplL2V2"
                                    ],
                                    [
                                        "router",
                                        "",
                                        "StargateImplL2V2"
                                    ],
                                    [
                                        "stargateEthVault",
                                        "",
                                        "StargateImplL2V2"
                                    ],
                                    [
                                        "allowance",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\tokens\\ERC20.sol",
                                        "ERC20"
                                    ],
                                    [
                                        "NATIVE_TOKEN_ADDRESS",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "IBridgeStargate.lzTxObj",
                                        "StargateImplL2V2._performNativeSwap",
                                        "StargateImplL2V2.SocketBridge",
                                        "StargateImplL2V2.ERC20",
                                        "IStargateEthVault.approve"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "05dd9ffcabfa93a66c93c221f3a897f1"
                            }
                        ],
                        "swapAndBridge": [
                            {
                                "visibility": "external",
                                "content": "function swapAndBridge( uint32 swapId, bytes calldata swapData, StargateBridgeDataNoToken calldata stargateBridgeData ) external payable{ (bool success, bytes memory result) = socketRoute .getRoute(swapId) .delegatecall(swapData); if (!success){ assembly{ revert(add(result, 32), mload(result))}} (uint256 bridgeAmount, address token) = abi.decode( result, (uint256, address) ); if (token == NATIVE_TOKEN_ADDRESS){ stargateEthVault.deposit{ value: bridgeAmount} (); if ( bridgeAmount > ERC20(address(stargateEthVault)).allowance( address(this), address(router) ) ){ stargateEthVault.approve(address(router), UINT256_MAX);} router.swap{ value: stargateBridgeData.value} ( stargateBridgeData.stargateDstChainId, stargateBridgeData.srcPoolId, stargateBridgeData.dstPoolId, payable(stargateBridgeData.senderAddress), bridgeAmount, stargateBridgeData.minReceivedAmt, IBridgeStargate.lzTxObj( stargateBridgeData.destinationGasLimit, 0, \"0x\" ), abi.encodePacked(stargateBridgeData.receiverAddress), stargateBridgeData.destinationPayload );} else{ if (stargateBridgeData.isNativeSwapRequired) _performNativeSwap( stargateBridgeData.swapData, stargateBridgeData.swapId, stargateBridgeData.value ); if ( bridgeAmount > ERC20(token).allowance(address(this), address(router)) ){ ERC20(token).safeApprove(address(router), UINT256_MAX);}{ router.swap{ value: stargateBridgeData.value} ( stargateBridgeData.stargateDstChainId, stargateBridgeData.srcPoolId, stargateBridgeData.dstPoolId, payable(stargateBridgeData.senderAddress), bridgeAmount, stargateBridgeData.minReceivedAmt, IBridgeStargate.lzTxObj( stargateBridgeData.destinationGasLimit, 0, \"0x\" ), abi.encodePacked(stargateBridgeData.receiverAddress), stargateBridgeData.destinationPayload );}} emit SocketBridge( bridgeAmount, token, stargateBridgeData.stargateDstChainId, StargateIdentifier, msg.sender, stargateBridgeData.receiverAddress, stargateBridgeData.metadata );}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint32",
                                        "name": "swapId"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "swapData"
                                    },
                                    {
                                        "type": "StargateBridgeDataNoToken calldata",
                                        "name": "stargateBridgeData"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "StargateIdentifier",
                                        "",
                                        "StargateImplL2V2"
                                    ],
                                    [
                                        "router",
                                        "",
                                        "StargateImplL2V2"
                                    ],
                                    [
                                        "stargateEthVault",
                                        "",
                                        "StargateImplL2V2"
                                    ],
                                    [
                                        "allowance",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\tokens\\ERC20.sol",
                                        "ERC20"
                                    ],
                                    [
                                        "NATIVE_TOKEN_ADDRESS",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ],
                                    [
                                        "socketRoute",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "IBridgeStargate.lzTxObj",
                                        "StargateImplL2V2._performNativeSwap",
                                        "StargateImplL2V2.SocketBridge",
                                        "StargateImplL2V2.ERC20",
                                        "IStargateEthVault.approve",
                                        "socketRoute.getRoute"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "8d122937e3991ee5e8021b3a785880c3"
                            }
                        ],
                        "bridgeERC20To": [
                            {
                                "visibility": "external",
                                "content": "function bridgeERC20To( address token, address senderAddress, address receiverAddress, uint256 amount, StargateBridgeExtraData calldata stargateBridgeExtraData ) external payable{ _performNativeSwap( stargateBridgeExtraData.swapData, stargateBridgeExtraData.swapId, stargateBridgeExtraData.value ); ERC20 tokenInstance = ERC20(token); tokenInstance.safeTransferFrom(msg.sender, socketGateway, amount); if (amount > tokenInstance.allowance(address(this), address(router))){ tokenInstance.safeApprove(address(router), UINT256_MAX);}{ router.swap{ value: stargateBridgeExtraData.value} ( stargateBridgeExtraData.stargateDstChainId, stargateBridgeExtraData.srcPoolId, stargateBridgeExtraData.dstPoolId, payable(senderAddress), amount, stargateBridgeExtraData.minReceivedAmt, IBridgeStargate.lzTxObj( stargateBridgeExtraData.destinationGasLimit, 0, \"0x\" ), abi.encodePacked(receiverAddress), stargateBridgeExtraData.destinationPayload );} emit SocketBridge( amount, token, stargateBridgeExtraData.stargateDstChainId, StargateIdentifier, msg.sender, receiverAddress, stargateBridgeExtraData.metadata );}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "senderAddress"
                                    },
                                    {
                                        "type": "address",
                                        "name": "receiverAddress"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "StargateBridgeExtraData calldata",
                                        "name": "stargateBridgeExtraData"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "StargateIdentifier",
                                        "",
                                        "StargateImplL2V2"
                                    ],
                                    [
                                        "router",
                                        "",
                                        "StargateImplL2V2"
                                    ],
                                    [
                                        "allowance",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\tokens\\ERC20.sol",
                                        "ERC20"
                                    ],
                                    [
                                        "socketGateway",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "IBridgeStargate.lzTxObj",
                                        "StargateImplL2V2._performNativeSwap",
                                        "ERC20.safeApprove",
                                        "ERC20.safeTransferFrom",
                                        "StargateImplL2V2.SocketBridge",
                                        "StargateImplL2V2.ERC20",
                                        "ERC20.allowance"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "150c7b2c8cac243aa57ba6a78f5d6041"
                            }
                        ],
                        "bridgeNativeTo": [
                            {
                                "visibility": "external",
                                "content": "function bridgeNativeTo( address senderAddress, address receiverAddress, uint256 amount, StargateBridgeExtraData calldata stargateBridgeExtraData ) external payable{ stargateEthVault.deposit{ value: amount} (); if ( amount > ERC20(address(stargateEthVault)).allowance( address(this), address(router) ) ){ stargateEthVault.approve(address(router), UINT256_MAX);} router.swap{ value: stargateBridgeExtraData.value} ( stargateBridgeExtraData.stargateDstChainId, stargateBridgeExtraData.srcPoolId, stargateBridgeExtraData.dstPoolId, payable(senderAddress), amount, stargateBridgeExtraData.minReceivedAmt, IBridgeStargate.lzTxObj( stargateBridgeExtraData.destinationGasLimit, 0, \"0x\" ), abi.encodePacked(receiverAddress), stargateBridgeExtraData.destinationPayload ); emit SocketBridge( amount, NATIVE_TOKEN_ADDRESS, stargateBridgeExtraData.stargateDstChainId, StargateIdentifier, msg.sender, receiverAddress, stargateBridgeExtraData.metadata );}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "senderAddress"
                                    },
                                    {
                                        "type": "address",
                                        "name": "receiverAddress"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "StargateBridgeExtraData calldata",
                                        "name": "stargateBridgeExtraData"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "StargateIdentifier",
                                        "",
                                        "StargateImplL2V2"
                                    ],
                                    [
                                        "router",
                                        "",
                                        "StargateImplL2V2"
                                    ],
                                    [
                                        "stargateEthVault",
                                        "",
                                        "StargateImplL2V2"
                                    ],
                                    [
                                        "allowance",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\tokens\\ERC20.sol",
                                        "ERC20"
                                    ],
                                    [
                                        "NATIVE_TOKEN_ADDRESS",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "IStargateEthVault.approve",
                                        "IBridgeStargate.lzTxObj",
                                        "StargateImplL2V2.ERC20",
                                        "StargateImplL2V2.SocketBridge"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "8c4a9e62f05c12e35d95ab6398a85c3e"
                            }
                        ],
                        "_performNativeSwap": [
                            {
                                "visibility": "private",
                                "content": "function _performNativeSwap( bytes memory swapData, uint32 swapId, uint256 valueRequired ) private{ (bool success, bytes memory result) = socketRoute .getRoute(swapId) .delegatecall(swapData); if (!success){ assembly{ revert(add(result, 32), mload(result))}} (uint256 valueReceived, ) = abi.decode(result, (uint256, address)); if (valueReceived > valueRequired){ msg.sender.call{ value: valueReceived - valueRequired} (\"\");}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "swapData"
                                    },
                                    {
                                        "type": "uint32",
                                        "name": "swapId"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "valueRequired"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "socketRoute",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "socketRoute.getRoute"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "6c6388bec9e3a60ab39cdce58964a8dc"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {
                        "StargateBridgeExtraData": {
                            "content": "StargateBridgeExtraData{ uint256 srcPoolId; uint256 dstPoolId; uint256 destinationGasLimit; uint256 minReceivedAmt; uint256 value; uint16 stargateDstChainId; uint32 swapId; bytes32 metadata; bytes swapData; bytes destinationPayload;}"
                        },
                        "StargateBridgeDataNoToken": {
                            "content": "StargateBridgeDataNoToken{ address receiverAddress; address senderAddress; uint256 value; uint256 srcPoolId; uint256 dstPoolId; uint256 minReceivedAmt; uint256 destinationGasLimit; bool isNativeSwapRequired; uint16 stargateDstChainId; uint32 swapId; bytes swapData; bytes32 metadata; bytes destinationPayload;}"
                        },
                        "StargateBridgeData": {
                            "content": "StargateBridgeData{ address token; address receiverAddress; address senderAddress; uint16 stargateDstChainId; uint256 value; uint256 srcPoolId; uint256 dstPoolId; uint256 minReceivedAmt; bool isNativeSwapRequired; uint256 destinationGasLimit; uint32 swapId; bytes swapData; bytes32 metadata; bytes destinationPayload;}"
                        }
                    },
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "ERC20": "SafeTransferLib"
                    }
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "StargateImplL2V2._performNativeSwap": "6c6388bec9e3a60ab39cdce58964a8dc",
                "IStargateEthVault.approve": "7b3acb46e2cf14ccb887bceed2fa033f",
                "ERC20.safeTransferFrom": "f59cf721ba6479ab2b5aa8ba2685eff0",
                "ERC20.safeApprove": "f339137c724d3793fd28f64cd9b5d9bb"
            },
            "md5": "923b928547690edb3ed52a49197d437d"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\symbiosis\\interfaces\\symbiosis.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\symbiosis\\interfaces\\symbiosis.sol",
            "filename": "symbiosis.sol",
            "imported_contracts": {},
            "contracts": {
                "ISymbiosisMetaRouter": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "metaRoute": [
                            {
                                "visibility": "external",
                                "content": "function metaRoute( MetaRouteTransaction calldata _metarouteTransaction ) external payable;",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "MetaRouteTransaction calldata",
                                        "name": "_metarouteTransaction"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": true,
                                "md5": "97f97604d85782ce61c9cebf76d6a50f"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {
                        "MetaRouteTransaction": {
                            "content": "MetaRouteTransaction{ bytes firstSwapCalldata; bytes secondSwapCalldata; address[] approvedTokens; address firstDexRouter; address secondDexRouter; uint256 amount; bool nativeIn; address relayRecipient; bytes otherSideCalldata;}"
                        }
                    },
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "cb1124e4d117f5cd068cc4855eaf0af5"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\symbiosis\\SymbiosisBridgeImp.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\symbiosis\\SymbiosisBridgeImp.sol",
            "filename": "SymbiosisBridgeImp.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\symbiosis\\interfaces\\symbiosis.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "ISymbiosisMetaRouter": {
                            "original_name": "ISymbiosisMetaRouter",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\utils\\SafeTransferLib.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "SafeTransferLib": {
                            "original_name": "SafeTransferLib",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\tokens\\ERC20.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "ERC20": {
                            "original_name": "ERC20",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\static\\RouteIdentifiers.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "SYMBIOSIS": {
                            "original_name": "SYMBIOSIS",
                            "type": {
                                "__CT__": true,
                                "value": 18
                            }
                        }
                    }
                }
            },
            "contracts": {
                "SymbiosisBridgeImpl": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "BridgeImplBase"
                    ],
                    "state_variables": {
                        "SymbiosisIdentifier": {
                            "type": "bytes32",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "SYMBIOSIS",
                            "content": "bytes32 public immutable SymbiosisIdentifier = SYMBIOSIS;"
                        },
                        "SYMBIOSIS_ERC20_EXTERNAL_BRIDGE_FUNCTION_SELECTOR": {
                            "type": "bytes4",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "bytes4( keccak256( \"bridgeERC20To(bytes32, address, address, uint256, (bytes, bytes, address[], address, address, uint256, bool, address, bytes))\" ) )",
                            "content": "bytes4 public immutable SYMBIOSIS_ERC20_EXTERNAL_BRIDGE_FUNCTION_SELECTOR = bytes4( keccak256( \"bridgeERC20To(bytes32, address, address, uint256, (bytes, bytes, address[], address, address, uint256, bool, address, bytes))\" ) );"
                        },
                        "SYMBIOSIS_NATIVE_EXTERNAL_BRIDGE_FUNCTION_SELECTOR": {
                            "type": "bytes4",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "bytes4( keccak256( \"bridgeNativeTo(bytes32, address, uint256, (bytes, bytes, address[], address, address, uint256, bool, address, bytes))\" ) )",
                            "content": "bytes4 public immutable SYMBIOSIS_NATIVE_EXTERNAL_BRIDGE_FUNCTION_SELECTOR = bytes4( keccak256( \"bridgeNativeTo(bytes32, address, uint256, (bytes, bytes, address[], address, address, uint256, bool, address, bytes))\" ) );"
                        },
                        "SYMBIOSIS_SWAP_BRIDGE_SELECTOR": {
                            "type": "bytes4",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "bytes4( keccak256( \"swapAndBridge(uint32, bytes, bytes32, address, uint256, (bytes, bytes, address[], address, address, uint256, bool, address, bytes))\" ) )",
                            "content": "bytes4 public immutable SYMBIOSIS_SWAP_BRIDGE_SELECTOR = bytes4( keccak256( \"swapAndBridge(uint32, bytes, bytes32, address, uint256, (bytes, bytes, address[], address, address, uint256, bool, address, bytes))\" ) );"
                        },
                        "symbiosisMetaRouter": {
                            "type": "ISymbiosisMetaRouter",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": null,
                            "content": "ISymbiosisMetaRouter private immutable symbiosisMetaRouter;"
                        },
                        "symbiosisGateway": {
                            "type": "address",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address private immutable symbiosisGateway;"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor ( address _symbiosisMetaRouter, address _symbiosisGateway, address _socketGateway, address _socketDeployFactory ) BridgeImplBase(_socketGateway, _socketDeployFactory){ symbiosisMetaRouter = ISymbiosisMetaRouter(_symbiosisMetaRouter); symbiosisGateway = _symbiosisGateway;}",
                                "modifiers": [
                                    "BridgeImplBase(_socketGateway, _socketDeployFactory)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_symbiosisMetaRouter"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_symbiosisGateway"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_socketGateway"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_socketDeployFactory"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "symbiosisMetaRouter",
                                        "",
                                        "SymbiosisBridgeImpl"
                                    ],
                                    [
                                        "symbiosisGateway",
                                        "",
                                        "SymbiosisBridgeImpl"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "symbiosisMetaRouter",
                                        "",
                                        "SymbiosisBridgeImpl"
                                    ],
                                    [
                                        "symbiosisGateway",
                                        "",
                                        "SymbiosisBridgeImpl"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c748d17a2c5a7ea83632c9be8ea8bc50"
                            }
                        ],
                        "bridgeERC20To": [
                            {
                                "visibility": "external",
                                "content": "function bridgeERC20To( bytes32 metadata, address receiverAddress, address token, uint256 toChainId, SymbiosisMetaRouteData calldata _symbiosisData ) external payable{ ERC20(token).safeTransferFrom( msg.sender, socketGateway, _symbiosisData.amount ); if ( _symbiosisData.amount > ERC20(token).allowance(address(this), address(symbiosisGateway)) ){ ERC20(token).safeApprove(address(symbiosisGateway), UINT256_MAX);} symbiosisMetaRouter.metaRoute( ISymbiosisMetaRouter.MetaRouteTransaction( _symbiosisData.firstSwapCalldata, _symbiosisData.secondSwapCalldata, _symbiosisData.approvedTokens, _symbiosisData.firstDexRouter, _symbiosisData.secondDexRouter, _symbiosisData.amount, _symbiosisData.nativeIn, _symbiosisData.relayRecipient, _symbiosisData.otherSideCalldata ) ); emit SocketBridge( _symbiosisData.amount, token, toChainId, SymbiosisIdentifier, msg.sender, receiverAddress, metadata );}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "metadata"
                                    },
                                    {
                                        "type": "address",
                                        "name": "receiverAddress"
                                    },
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "toChainId"
                                    },
                                    {
                                        "type": "SymbiosisMetaRouteData calldata",
                                        "name": "_symbiosisData"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "SymbiosisIdentifier",
                                        "",
                                        "SymbiosisBridgeImpl"
                                    ],
                                    [
                                        "symbiosisMetaRouter",
                                        "",
                                        "SymbiosisBridgeImpl"
                                    ],
                                    [
                                        "symbiosisGateway",
                                        "",
                                        "SymbiosisBridgeImpl"
                                    ],
                                    [
                                        "socketGateway",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ],
                                    [
                                        "allowance",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\tokens\\ERC20.sol",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ISymbiosisMetaRouter.MetaRouteTransaction",
                                        "ISymbiosisMetaRouter.metaRoute",
                                        "SymbiosisBridgeImpl.ERC20",
                                        "SymbiosisBridgeImpl.SocketBridge"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "90bff164bcbbec715b4eb83a9fe4a4c2"
                            }
                        ],
                        "bridgeNativeTo": [
                            {
                                "visibility": "external",
                                "content": "function bridgeNativeTo( bytes32 metadata, address receiverAddress, uint256 toChainId, SymbiosisMetaRouteData calldata _symbiosisData ) external payable{ symbiosisMetaRouter.metaRoute{ value: _symbiosisData.amount} ( ISymbiosisMetaRouter.MetaRouteTransaction( _symbiosisData.firstSwapCalldata, _symbiosisData.secondSwapCalldata, _symbiosisData.approvedTokens, _symbiosisData.firstDexRouter, _symbiosisData.secondDexRouter, _symbiosisData.amount, _symbiosisData.nativeIn, _symbiosisData.relayRecipient, _symbiosisData.otherSideCalldata ) ); emit SocketBridge( _symbiosisData.amount, NATIVE_TOKEN_ADDRESS, toChainId, SymbiosisIdentifier, msg.sender, receiverAddress, metadata );}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "metadata"
                                    },
                                    {
                                        "type": "address",
                                        "name": "receiverAddress"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "toChainId"
                                    },
                                    {
                                        "type": "SymbiosisMetaRouteData calldata",
                                        "name": "_symbiosisData"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "SymbiosisIdentifier",
                                        "",
                                        "SymbiosisBridgeImpl"
                                    ],
                                    [
                                        "symbiosisMetaRouter",
                                        "",
                                        "SymbiosisBridgeImpl"
                                    ],
                                    [
                                        "NATIVE_TOKEN_ADDRESS",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ISymbiosisMetaRouter.MetaRouteTransaction",
                                        "SymbiosisBridgeImpl.SocketBridge"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "d98ce8f6db7007e7b98a2c2e901a4a6d"
                            }
                        ],
                        "bridgeAfterSwap": [
                            {
                                "visibility": "external",
                                "content": "function bridgeAfterSwap( uint256 amount, bytes calldata bridgeData ) external payable override{ SymbiosisBridgeData memory bridgeInfo = abi.decode( bridgeData, (SymbiosisBridgeData) ); if (bridgeInfo.token == NATIVE_TOKEN_ADDRESS){ symbiosisMetaRouter.metaRoute{ value: amount} ( ISymbiosisMetaRouter.MetaRouteTransaction( bridgeInfo._symbiosisData.firstSwapCalldata, bridgeInfo._symbiosisData.secondSwapCalldata, bridgeInfo._symbiosisData.approvedTokens, bridgeInfo._symbiosisData.firstDexRouter, bridgeInfo._symbiosisData.secondDexRouter, amount, bridgeInfo._symbiosisData.nativeIn, bridgeInfo._symbiosisData.relayRecipient, bridgeInfo._symbiosisData.otherSideCalldata ) );} else{ if ( amount > ERC20(bridgeInfo.token).allowance( address(this), address(symbiosisGateway) ) ){ ERC20(bridgeInfo.token).safeApprove( address(symbiosisGateway), UINT256_MAX );} symbiosisMetaRouter.metaRoute( ISymbiosisMetaRouter.MetaRouteTransaction( bridgeInfo._symbiosisData.firstSwapCalldata, bridgeInfo._symbiosisData.secondSwapCalldata, bridgeInfo._symbiosisData.approvedTokens, bridgeInfo._symbiosisData.firstDexRouter, bridgeInfo._symbiosisData.secondDexRouter, amount, bridgeInfo._symbiosisData.nativeIn, bridgeInfo._symbiosisData.relayRecipient, bridgeInfo._symbiosisData.otherSideCalldata ) );} emit SocketBridge( amount, bridgeInfo.token, bridgeInfo.toChainId, SymbiosisIdentifier, msg.sender, bridgeInfo.receiverAddress, bridgeInfo.metadata );}",
                                "modifiers": [
                                    "payable",
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "bridgeData"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "SymbiosisIdentifier",
                                        "",
                                        "SymbiosisBridgeImpl"
                                    ],
                                    [
                                        "symbiosisMetaRouter",
                                        "",
                                        "SymbiosisBridgeImpl"
                                    ],
                                    [
                                        "symbiosisGateway",
                                        "",
                                        "SymbiosisBridgeImpl"
                                    ],
                                    [
                                        "NATIVE_TOKEN_ADDRESS",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ],
                                    [
                                        "allowance",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\tokens\\ERC20.sol",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ISymbiosisMetaRouter.MetaRouteTransaction",
                                        "ISymbiosisMetaRouter.metaRoute",
                                        "SymbiosisBridgeImpl.ERC20",
                                        "SymbiosisBridgeImpl.SocketBridge"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "95239b5b6fe3ed90ff4ff976c0070d8e"
                            }
                        ],
                        "swapAndBridge": [
                            {
                                "visibility": "external",
                                "content": "function swapAndBridge( uint32 swapId, bytes calldata swapData, bytes32 metadata, address receiverAddress, uint256 toChainId, SymbiosisMetaRouteData calldata _symbiosisData ) external payable{ (bool success, bytes memory result) = socketRoute .getRoute(swapId) .delegatecall(swapData); if (!success){ assembly{ revert(add(result, 32), mload(result))}} (uint256 bridgeAmount, address token) = abi.decode( result, (uint256, address) ); if (token == NATIVE_TOKEN_ADDRESS){ symbiosisMetaRouter.metaRoute{ value: bridgeAmount} ( ISymbiosisMetaRouter.MetaRouteTransaction( _symbiosisData.firstSwapCalldata, _symbiosisData.secondSwapCalldata, _symbiosisData.approvedTokens, _symbiosisData.firstDexRouter, _symbiosisData.secondDexRouter, bridgeAmount, _symbiosisData.nativeIn, _symbiosisData.relayRecipient, _symbiosisData.otherSideCalldata ) );} else{ if ( bridgeAmount > ERC20(token).allowance(address(this), address(symbiosisGateway)) ){ ERC20(token).safeApprove( address(symbiosisGateway), UINT256_MAX );} symbiosisMetaRouter.metaRoute( ISymbiosisMetaRouter.MetaRouteTransaction( _symbiosisData.firstSwapCalldata, _symbiosisData.secondSwapCalldata, _symbiosisData.approvedTokens, _symbiosisData.firstDexRouter, _symbiosisData.secondDexRouter, bridgeAmount, _symbiosisData.nativeIn, _symbiosisData.relayRecipient, _symbiosisData.otherSideCalldata ) );} emit SocketBridge( bridgeAmount, token, toChainId, SymbiosisIdentifier, msg.sender, receiverAddress, metadata );}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint32",
                                        "name": "swapId"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "swapData"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "metadata"
                                    },
                                    {
                                        "type": "address",
                                        "name": "receiverAddress"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "toChainId"
                                    },
                                    {
                                        "type": "SymbiosisMetaRouteData calldata",
                                        "name": "_symbiosisData"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "SymbiosisIdentifier",
                                        "",
                                        "SymbiosisBridgeImpl"
                                    ],
                                    [
                                        "symbiosisMetaRouter",
                                        "",
                                        "SymbiosisBridgeImpl"
                                    ],
                                    [
                                        "symbiosisGateway",
                                        "",
                                        "SymbiosisBridgeImpl"
                                    ],
                                    [
                                        "NATIVE_TOKEN_ADDRESS",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ],
                                    [
                                        "socketRoute",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ],
                                    [
                                        "allowance",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\tokens\\ERC20.sol",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SymbiosisBridgeImpl.ERC20",
                                        "SymbiosisBridgeImpl.SocketBridge",
                                        "ISymbiosisMetaRouter.metaRoute",
                                        "ISymbiosisMetaRouter.MetaRouteTransaction",
                                        "socketRoute.getRoute"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "fb10475925f42c8e6b20ab088eac0bd0"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {
                        "SymbiosisMetaRouteData": {
                            "content": "SymbiosisMetaRouteData{ bytes firstSwapCalldata; bytes secondSwapCalldata; address[] approvedTokens; address firstDexRouter; address secondDexRouter; uint256 amount; bool nativeIn; address relayRecipient; bytes otherSideCalldata;}"
                        },
                        "SymbiosisBridgeData": {
                            "content": "SymbiosisBridgeData{ address token; address receiverAddress; uint256 toChainId; bytes32 metadata; SymbiosisMetaRouteData _symbiosisData;}"
                        }
                    },
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "ERC20": "SafeTransferLib"
                    }
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "ISymbiosisMetaRouter.metaRoute": "97f97604d85782ce61c9cebf76d6a50f"
            },
            "md5": "cce93a483428898404c2090ee44a90b0"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\synapse\\interfaces\\ISynapseRouter.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\synapse\\interfaces\\ISynapseRouter.sol",
            "filename": "ISynapseRouter.sol",
            "imported_contracts": {},
            "contracts": {
                "ISynapseRouter": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "bridge": [
                            {
                                "visibility": "external",
                                "content": "function bridge( address to, uint256 chainId, address token, uint256 amount, SwapQuery memory originQuery, SwapQuery memory destQuery ) external payable;",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "chainId"
                                    },
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "SwapQuery memory",
                                        "name": "originQuery"
                                    },
                                    {
                                        "type": "SwapQuery memory",
                                        "name": "destQuery"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": true,
                                "md5": "bd43faaa3d8bddde29943652130c9b79"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {
                        "SwapQuery": {
                            "content": "SwapQuery{ address swapAdapter; address tokenOut; uint256 minAmountOut; uint256 deadline; bytes rawParams;}"
                        }
                    },
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "a37319f9fe17c2b4f743fd646c94c844"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\synapse\\SynapseBridgeImpl.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\synapse\\SynapseBridgeImpl.sol",
            "filename": "SynapseBridgeImpl.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\synapse\\interfaces\\ISynapseRouter.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\utils\\SafeTransferLib.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "SafeTransferLib": {
                            "original_name": "SafeTransferLib",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\tokens\\ERC20.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "ERC20": {
                            "original_name": "ERC20",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\static\\RouteIdentifiers.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "SYNAPSE": {
                            "original_name": "SYNAPSE",
                            "type": {
                                "__CT__": true,
                                "value": 18
                            }
                        }
                    }
                }
            },
            "contracts": {
                "SynapseBridgeImpl": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "BridgeImplBase"
                    ],
                    "state_variables": {
                        "SynapseIdentifier": {
                            "type": "bytes32",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "SYNAPSE",
                            "content": "bytes32 public immutable SynapseIdentifier = SYNAPSE;"
                        },
                        "SYNAPSE_ERC20_EXTERNAL_BRIDGE_FUNCTION_SELECTOR": {
                            "type": "bytes4",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "bytes4( keccak256( \"bridgeERC20To(uint256, bytes32, address, address, uint256, (address, address, uint256, uint256, bytes), (address, address, uint256, uint256, bytes))\" ) )",
                            "content": "bytes4 public immutable SYNAPSE_ERC20_EXTERNAL_BRIDGE_FUNCTION_SELECTOR = bytes4( keccak256( \"bridgeERC20To(uint256, bytes32, address, address, uint256, (address, address, uint256, uint256, bytes), (address, address, uint256, uint256, bytes))\" ) );"
                        },
                        "SYNAPSE_NATIVE_EXTERNAL_BRIDGE_FUNCTION_SELECTOR": {
                            "type": "bytes4",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "bytes4( keccak256( \"bridgeNativeTo(uint256, bytes32, address, uint256, (address, address, uint256, uint256, bytes), (address, address, uint256, uint256, bytes))\" ) )",
                            "content": "bytes4 public immutable SYNAPSE_NATIVE_EXTERNAL_BRIDGE_FUNCTION_SELECTOR = bytes4( keccak256( \"bridgeNativeTo(uint256, bytes32, address, uint256, (address, address, uint256, uint256, bytes), (address, address, uint256, uint256, bytes))\" ) );"
                        },
                        "SYNAPSE_SWAP_BRIDGE_SELECTOR": {
                            "type": "bytes4",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "bytes4( keccak256( \"swapAndBridge(uint32, bytes, (address, uint256, bytes32, (address, address, uint256, uint256, bytes), (address, address, uint256, uint256, bytes)))\" ) )",
                            "content": "bytes4 public immutable SYNAPSE_SWAP_BRIDGE_SELECTOR = bytes4( keccak256( \"swapAndBridge(uint32, bytes, (address, uint256, bytes32, (address, address, uint256, uint256, bytes), (address, address, uint256, uint256, bytes)))\" ) );"
                        },
                        "synapseRouter": {
                            "type": "ISynapseRouter",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": null,
                            "content": "ISynapseRouter public immutable synapseRouter;"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor ( address _synapseRouter, address _socketGateway, address _socketDeployFactory ) BridgeImplBase(_socketGateway, _socketDeployFactory){ synapseRouter = ISynapseRouter(_synapseRouter);}",
                                "modifiers": [
                                    "BridgeImplBase(_socketGateway, _socketDeployFactory)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_synapseRouter"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_socketGateway"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_socketDeployFactory"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "synapseRouter",
                                        "",
                                        "SynapseBridgeImpl"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "synapseRouter",
                                        "",
                                        "SynapseBridgeImpl"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "5a9192066b00956f7642eb60ebcdda48"
                            }
                        ],
                        "bridgeAfterSwap": [
                            {
                                "visibility": "external",
                                "content": "function bridgeAfterSwap( uint256 amount, bytes calldata bridgeData ) external payable override{ SynapseData memory synapseData = abi.decode(bridgeData, (SynapseData)); if (synapseData.token == NATIVE_TOKEN_ADDRESS){ synapseRouter.bridge{ value: amount} ( synapseData.receiverAddress, synapseData.toChainId, NATIVE_TOKEN_ADDRESS, amount, synapseData.originQuery, synapseData.destinationQuery );} else{ if ( amount > ERC20(synapseData.token).allowance( address(this), address(synapseRouter) ) ){ ERC20(synapseData.token).safeApprove( address(synapseRouter), UINT256_MAX );} synapseRouter.bridge( synapseData.receiverAddress, synapseData.toChainId, synapseData.token, amount, synapseData.originQuery, synapseData.destinationQuery );} emit SocketBridge( amount, synapseData.token, synapseData.toChainId, SynapseIdentifier, msg.sender, synapseData.receiverAddress, synapseData.metadata );}",
                                "modifiers": [
                                    "payable",
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "bridgeData"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "SynapseIdentifier",
                                        "",
                                        "SynapseBridgeImpl"
                                    ],
                                    [
                                        "synapseRouter",
                                        "",
                                        "SynapseBridgeImpl"
                                    ],
                                    [
                                        "NATIVE_TOKEN_ADDRESS",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ],
                                    [
                                        "allowance",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\tokens\\ERC20.sol",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SynapseBridgeImpl.ERC20",
                                        "SynapseBridgeImpl.SocketBridge",
                                        "ISynapseRouter.bridge"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "6585b35384d2114cb77949617e5c2951"
                            }
                        ],
                        "swapAndBridge": [
                            {
                                "visibility": "external",
                                "content": "function swapAndBridge( uint32 swapId, bytes calldata swapData, SynapseDataNoToken calldata synapseData ) external payable{ (bool success, bytes memory result) = socketRoute .getRoute(swapId) .delegatecall(swapData); if (!success){ assembly{ revert(add(result, 32), mload(result))}} (uint256 bridgeAmount, address token) = abi.decode( result, (uint256, address) ); if (token == NATIVE_TOKEN_ADDRESS){ synapseRouter.bridge{ value: bridgeAmount} ( synapseData.receiverAddress, synapseData.toChainId, token, bridgeAmount, synapseData.originQuery, synapseData.destinationQuery );} else{ if ( bridgeAmount > ERC20(token).allowance(address(this), address(synapseRouter)) ){ ERC20(token).safeApprove(address(synapseRouter), UINT256_MAX);} synapseRouter.bridge( synapseData.receiverAddress, synapseData.toChainId, token, bridgeAmount, synapseData.originQuery, synapseData.destinationQuery );} emit SocketBridge( bridgeAmount, token, synapseData.toChainId, SynapseIdentifier, msg.sender, synapseData.receiverAddress, synapseData.metadata );}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint32",
                                        "name": "swapId"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "swapData"
                                    },
                                    {
                                        "type": "SynapseDataNoToken calldata",
                                        "name": "synapseData"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "SynapseIdentifier",
                                        "",
                                        "SynapseBridgeImpl"
                                    ],
                                    [
                                        "synapseRouter",
                                        "",
                                        "SynapseBridgeImpl"
                                    ],
                                    [
                                        "NATIVE_TOKEN_ADDRESS",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ],
                                    [
                                        "socketRoute",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ],
                                    [
                                        "allowance",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\tokens\\ERC20.sol",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SynapseBridgeImpl.ERC20",
                                        "SynapseBridgeImpl.SocketBridge",
                                        "socketRoute.getRoute",
                                        "ISynapseRouter.bridge"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "8eec1364b2f7ba30022e1272be3d53a6"
                            }
                        ],
                        "bridgeERC20To": [
                            {
                                "visibility": "external",
                                "content": "function bridgeERC20To( uint256 amount, bytes32 metadata, address receiverAddress, address token, uint256 toChainId, ISynapseRouter.SwapQuery calldata originQuery, ISynapseRouter.SwapQuery calldata destinationQuery ) external payable{ ERC20(token).safeTransferFrom(msg.sender, socketGateway, amount); if ( amount > ERC20(token).allowance(address(this), address(synapseRouter)) ){ ERC20(token).safeApprove(address(synapseRouter), UINT256_MAX);} synapseRouter.bridge( receiverAddress, toChainId, token, amount, originQuery, destinationQuery ); emit SocketBridge( amount, token, toChainId, SynapseIdentifier, msg.sender, receiverAddress, metadata );}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "metadata"
                                    },
                                    {
                                        "type": "address",
                                        "name": "receiverAddress"
                                    },
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "toChainId"
                                    },
                                    {
                                        "type": "ISynapseRouter.SwapQuery calldata",
                                        "name": "originQuery"
                                    },
                                    {
                                        "type": "ISynapseRouter.SwapQuery calldata",
                                        "name": "destinationQuery"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "SynapseIdentifier",
                                        "",
                                        "SynapseBridgeImpl"
                                    ],
                                    [
                                        "synapseRouter",
                                        "",
                                        "SynapseBridgeImpl"
                                    ],
                                    [
                                        "socketGateway",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ],
                                    [
                                        "allowance",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\tokens\\ERC20.sol",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SynapseBridgeImpl.ERC20",
                                        "SynapseBridgeImpl.SocketBridge",
                                        "ISynapseRouter.bridge"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "79370a1734bdb2387b4f9f4553a22f84"
                            }
                        ],
                        "bridgeNativeTo": [
                            {
                                "visibility": "external",
                                "content": "function bridgeNativeTo( uint256 amount, bytes32 metadata, address receiverAddress, uint256 toChainId, ISynapseRouter.SwapQuery calldata originQuery, ISynapseRouter.SwapQuery calldata destinationQuery ) external payable{ synapseRouter.bridge{ value: amount} ( receiverAddress, toChainId, NATIVE_TOKEN_ADDRESS, amount, originQuery, destinationQuery ); emit SocketBridge( amount, NATIVE_TOKEN_ADDRESS, toChainId, SynapseIdentifier, msg.sender, receiverAddress, metadata );}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "metadata"
                                    },
                                    {
                                        "type": "address",
                                        "name": "receiverAddress"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "toChainId"
                                    },
                                    {
                                        "type": "ISynapseRouter.SwapQuery calldata",
                                        "name": "originQuery"
                                    },
                                    {
                                        "type": "ISynapseRouter.SwapQuery calldata",
                                        "name": "destinationQuery"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "SynapseIdentifier",
                                        "",
                                        "SynapseBridgeImpl"
                                    ],
                                    [
                                        "synapseRouter",
                                        "",
                                        "SynapseBridgeImpl"
                                    ],
                                    [
                                        "NATIVE_TOKEN_ADDRESS",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SynapseBridgeImpl.SocketBridge"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "3a0ebb1e2dff002589913c2a82a90c43"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {
                        "SynapseData": {
                            "content": "SynapseData{ address token; address receiverAddress; uint256 toChainId; bytes32 metadata; ISynapseRouter.SwapQuery originQuery; ISynapseRouter.SwapQuery destinationQuery;}"
                        },
                        "SynapseDataNoToken": {
                            "content": "SynapseDataNoToken{ address receiverAddress; uint256 toChainId; bytes32 metadata; ISynapseRouter.SwapQuery originQuery; ISynapseRouter.SwapQuery destinationQuery;}"
                        }
                    },
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "ERC20": "SafeTransferLib"
                    }
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "ISynapseRouter.bridge": "bd43faaa3d8bddde29943652130c9b79"
            },
            "md5": "f8b94d8f86e4984716f463cafc980cff"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\zksync\\interfaces\\IZkSyncL1ERC20Bridge.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\zksync\\interfaces\\IZkSyncL1ERC20Bridge.sol",
            "filename": "IZkSyncL1ERC20Bridge.sol",
            "imported_contracts": {},
            "contracts": {
                "IZkSyncL1ERC20Bridge": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "deposit": [
                            {
                                "visibility": "external",
                                "content": "function deposit( address _l2Receiver, address _l1Token, uint256 _amount, uint256 _l2TxGasLimit, uint256 _l2TxGasPerPubdataByte, address _refundRecipient ) external payable returns (bytes32 l2TxHash);",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_l2Receiver"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_l1Token"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_amount"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_l2TxGasLimit"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_l2TxGasPerPubdataByte"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_refundRecipient"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": "l2TxHash"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": true,
                                "md5": "ebe0a19d890dbe83583ec7d9b930fd5d"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "7d5bb366798f25ca4f0328ee8ed29985"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\zksync\\interfaces\\IZkSyncL1Mailbox.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\zksync\\interfaces\\IZkSyncL1Mailbox.sol",
            "filename": "IZkSyncL1Mailbox.sol",
            "imported_contracts": {},
            "contracts": {
                "IZkSyncL1Mailbox": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "requestL2Transaction": [
                            {
                                "visibility": "external",
                                "content": "function requestL2Transaction( address _contractL2, uint256 _l2Value, bytes calldata _calldata, uint256 _l2GasLimit, uint256 _l2GasPerPubdataByteLimit, bytes[] calldata _factoryDeps, address _refundRecipient ) external payable returns (bytes32 canonicalTxHash);",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_contractL2"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_l2Value"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "_calldata"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_l2GasLimit"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_l2GasPerPubdataByteLimit"
                                    },
                                    {
                                        "type": "bytes[] calldata",
                                        "name": "_factoryDeps"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_refundRecipient"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": "canonicalTxHash"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": true,
                                "md5": "cd75a6fd4399186f96e7f04aab7ace76"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "b53d91df1bf3bf7b1c48644cdba90897"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\zksync\\ZkSyncBridgeImpl.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\zksync\\ZkSyncBridgeImpl.sol",
            "filename": "ZkSyncBridgeImpl.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\zksync\\interfaces\\IZkSyncL1ERC20Bridge.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\zksync\\interfaces\\IZkSyncL1Mailbox.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\utils\\SafeTransferLib.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "SafeTransferLib": {
                            "original_name": "SafeTransferLib",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\tokens\\ERC20.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "ERC20": {
                            "original_name": "ERC20",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\static\\RouteIdentifiers.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "ZKSYNC": {
                            "original_name": "ZKSYNC",
                            "type": {
                                "__CT__": true,
                                "value": 18
                            }
                        }
                    }
                }
            },
            "contracts": {
                "ZkSyncBridgeImpl": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "BridgeImplBase"
                    ],
                    "state_variables": {
                        "ZkSyncIdentifier": {
                            "type": "bytes32",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "ZKSYNC",
                            "content": "bytes32 public immutable ZkSyncIdentifier = ZKSYNC;"
                        },
                        "ZKSYNC_ERC20_EXTERNAL_BRIDGE_FUNCTION_SELECTOR": {
                            "type": "bytes4",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "bytes4( keccak256( \"bridgeERC20To(uint256, uint256, bytes32, address, address, uint256, uint256, uint256)\" ) )",
                            "content": "bytes4 public immutable ZKSYNC_ERC20_EXTERNAL_BRIDGE_FUNCTION_SELECTOR = bytes4( keccak256( \"bridgeERC20To(uint256, uint256, bytes32, address, address, uint256, uint256, uint256)\" ) );"
                        },
                        "ZKSYNC_NATIVE_EXTERNAL_BRIDGE_FUNCTION_SELECTOR": {
                            "type": "bytes4",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "bytes4( keccak256( \"bridgeNativeTo(uint256, uint256, bytes32, address, uint256, uint256, uint256)\" ) )",
                            "content": "bytes4 public immutable ZKSYNC_NATIVE_EXTERNAL_BRIDGE_FUNCTION_SELECTOR = bytes4( keccak256( \"bridgeNativeTo(uint256, uint256, bytes32, address, uint256, uint256, uint256)\" ) );"
                        },
                        "zkSyncL1ERC20Bridge": {
                            "type": "IZkSyncL1ERC20Bridge",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": null,
                            "content": "IZkSyncL1ERC20Bridge public immutable zkSyncL1ERC20Bridge;"
                        },
                        "zkSyncL1Mailbox": {
                            "type": "IZkSyncL1Mailbox",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": null,
                            "content": "IZkSyncL1Mailbox public immutable zkSyncL1Mailbox;"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor ( address _zkSyncL1ERC20Bridge, address _mailboxFacetProxy, address _socketGateway, address _socketDeployFactory ) BridgeImplBase(_socketGateway, _socketDeployFactory){ zkSyncL1ERC20Bridge = IZkSyncL1ERC20Bridge(_zkSyncL1ERC20Bridge); zkSyncL1Mailbox = IZkSyncL1Mailbox(_mailboxFacetProxy);}",
                                "modifiers": [
                                    "BridgeImplBase(_socketGateway, _socketDeployFactory)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_zkSyncL1ERC20Bridge"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_mailboxFacetProxy"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_socketGateway"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_socketDeployFactory"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "zkSyncL1ERC20Bridge",
                                        "",
                                        "ZkSyncBridgeImpl"
                                    ],
                                    [
                                        "zkSyncL1Mailbox",
                                        "",
                                        "ZkSyncBridgeImpl"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "zkSyncL1ERC20Bridge",
                                        "",
                                        "ZkSyncBridgeImpl"
                                    ],
                                    [
                                        "zkSyncL1Mailbox",
                                        "",
                                        "ZkSyncBridgeImpl"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "de7e4b1fbf50308eefd04198500ef9a2"
                            }
                        ],
                        "bridgeERC20To": [
                            {
                                "visibility": "external",
                                "content": "function bridgeERC20To( uint256 amount, uint256 fees, bytes32 metadata, address receiverAddress, address token, uint256 toChainId, uint256 l2TxGasLimit, uint256 l2TxGasPerPubdataByte ) external payable{ ERC20(token).safeTransferFrom(msg.sender, socketGateway, amount); if ( amount > ERC20(token).allowance(address(this), address(zkSyncL1ERC20Bridge)) ){ ERC20(token).safeApprove(address(zkSyncL1ERC20Bridge), UINT256_MAX);} zkSyncL1ERC20Bridge.deposit{ value: fees} ( receiverAddress, token, amount, l2TxGasLimit, l2TxGasPerPubdataByte, receiverAddress ); emit SocketBridge( amount, token, toChainId, ZkSyncIdentifier, msg.sender, receiverAddress, metadata );}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "fees"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "metadata"
                                    },
                                    {
                                        "type": "address",
                                        "name": "receiverAddress"
                                    },
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "toChainId"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "l2TxGasLimit"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "l2TxGasPerPubdataByte"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "ZkSyncIdentifier",
                                        "",
                                        "ZkSyncBridgeImpl"
                                    ],
                                    [
                                        "zkSyncL1ERC20Bridge",
                                        "",
                                        "ZkSyncBridgeImpl"
                                    ],
                                    [
                                        "socketGateway",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ],
                                    [
                                        "allowance",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\tokens\\ERC20.sol",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ZkSyncBridgeImpl.SocketBridge",
                                        "ZkSyncBridgeImpl.ERC20"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "44e4a558234091e5da83e3d59c5d4e26"
                            }
                        ],
                        "bridgeNativeTo": [
                            {
                                "visibility": "external",
                                "content": "function bridgeNativeTo( uint256 amount, uint256 fees, bytes32 metadata, address receiverAddress, uint256 toChainId, uint256 l2TxGasLimit, uint256 l2TxGasPerPubdataByte ) external payable{ bytes[] memory emptyDeps; zkSyncL1Mailbox.requestL2Transaction{ value: amount + fees} ( receiverAddress, amount, \"0x\", l2TxGasLimit, l2TxGasPerPubdataByte, emptyDeps, receiverAddress ); emit SocketBridge( amount, NATIVE_TOKEN_ADDRESS, toChainId, ZkSyncIdentifier, msg.sender, receiverAddress, metadata );}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "fees"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "metadata"
                                    },
                                    {
                                        "type": "address",
                                        "name": "receiverAddress"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "toChainId"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "l2TxGasLimit"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "l2TxGasPerPubdataByte"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "ZkSyncIdentifier",
                                        "",
                                        "ZkSyncBridgeImpl"
                                    ],
                                    [
                                        "zkSyncL1Mailbox",
                                        "",
                                        "ZkSyncBridgeImpl"
                                    ],
                                    [
                                        "NATIVE_TOKEN_ADDRESS",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ZkSyncBridgeImpl.SocketBridge"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "d09d29665c3e8e4f72ced9ab9ddfe1b4"
                            }
                        ],
                        "bridgeAfterSwap": [
                            {
                                "visibility": "external",
                                "content": "function bridgeAfterSwap( uint256 amount, bytes calldata bridgeData ) external payable override{ ZkSyncBridgeData memory zkSyncBridgeData = abi.decode( bridgeData, (ZkSyncBridgeData) ); bytes[] memory emptyDeps; if (zkSyncBridgeData.token == NATIVE_TOKEN_ADDRESS){ zkSyncL1Mailbox.requestL2Transaction{ value: amount + zkSyncBridgeData.fees} ( zkSyncBridgeData.receiverAddress, amount, \"0x\", zkSyncBridgeData.l2TxGasLimit, zkSyncBridgeData.l2TxGasPerPubdataByte, emptyDeps, zkSyncBridgeData.receiverAddress );} else{ ERC20(zkSyncBridgeData.token).safeTransferFrom( msg.sender, socketGateway, amount ); if ( amount > ERC20(zkSyncBridgeData.token).allowance( address(this), address(zkSyncL1ERC20Bridge) ) ){ ERC20(zkSyncBridgeData.token).safeApprove( address(zkSyncL1ERC20Bridge), UINT256_MAX );} zkSyncL1ERC20Bridge.deposit{ value: zkSyncBridgeData.fees} ( zkSyncBridgeData.receiverAddress, zkSyncBridgeData.token, amount, zkSyncBridgeData.l2TxGasLimit, zkSyncBridgeData.l2TxGasPerPubdataByte, zkSyncBridgeData.receiverAddress );} emit SocketBridge( amount, zkSyncBridgeData.token, zkSyncBridgeData.toChainId, ZkSyncIdentifier, msg.sender, zkSyncBridgeData.receiverAddress, zkSyncBridgeData.metadata );}",
                                "modifiers": [
                                    "payable",
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "bridgeData"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "ZkSyncIdentifier",
                                        "",
                                        "ZkSyncBridgeImpl"
                                    ],
                                    [
                                        "zkSyncL1ERC20Bridge",
                                        "",
                                        "ZkSyncBridgeImpl"
                                    ],
                                    [
                                        "zkSyncL1Mailbox",
                                        "",
                                        "ZkSyncBridgeImpl"
                                    ],
                                    [
                                        "NATIVE_TOKEN_ADDRESS",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ],
                                    [
                                        "socketGateway",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ],
                                    [
                                        "allowance",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\tokens\\ERC20.sol",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ZkSyncBridgeImpl.SocketBridge",
                                        "ZkSyncBridgeImpl.ERC20"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "4299f791c8810fe2d78327dd3cba8baf"
                            }
                        ],
                        "swapAndBridge": [
                            {
                                "visibility": "external",
                                "content": "function swapAndBridge( uint32 swapId, bytes calldata swapData, ZkSyncBridgeData calldata zkSyncBridgeData ) external payable{ (bool success, bytes memory result) = socketRoute .getRoute(swapId) .delegatecall(swapData); if (!success){ assembly{ revert(add(result, 32), mload(result))}} (uint256 bridgeAmount, ) = abi.decode(result, (uint256, address)); bytes[] memory emptyDeps; if (zkSyncBridgeData.token == NATIVE_TOKEN_ADDRESS){ zkSyncL1Mailbox.requestL2Transaction{ value: bridgeAmount + zkSyncBridgeData.fees} ( zkSyncBridgeData.receiverAddress, bridgeAmount, \"0x\", zkSyncBridgeData.l2TxGasLimit, zkSyncBridgeData.l2TxGasPerPubdataByte, emptyDeps, zkSyncBridgeData.receiverAddress );} else{ ERC20(zkSyncBridgeData.token).safeTransferFrom( msg.sender, socketGateway, bridgeAmount ); if ( bridgeAmount > ERC20(zkSyncBridgeData.token).allowance( address(this), address(zkSyncL1ERC20Bridge) ) ){ ERC20(zkSyncBridgeData.token).safeApprove( address(zkSyncL1ERC20Bridge), UINT256_MAX );} zkSyncL1ERC20Bridge.deposit{ value: zkSyncBridgeData.fees} ( zkSyncBridgeData.receiverAddress, zkSyncBridgeData.token, bridgeAmount, zkSyncBridgeData.l2TxGasLimit, zkSyncBridgeData.l2TxGasPerPubdataByte, zkSyncBridgeData.receiverAddress );} emit SocketBridge( bridgeAmount, zkSyncBridgeData.token, zkSyncBridgeData.toChainId, ZkSyncIdentifier, msg.sender, zkSyncBridgeData.receiverAddress, zkSyncBridgeData.metadata );}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint32",
                                        "name": "swapId"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "swapData"
                                    },
                                    {
                                        "type": "ZkSyncBridgeData calldata",
                                        "name": "zkSyncBridgeData"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "ZkSyncIdentifier",
                                        "",
                                        "ZkSyncBridgeImpl"
                                    ],
                                    [
                                        "zkSyncL1ERC20Bridge",
                                        "",
                                        "ZkSyncBridgeImpl"
                                    ],
                                    [
                                        "zkSyncL1Mailbox",
                                        "",
                                        "ZkSyncBridgeImpl"
                                    ],
                                    [
                                        "NATIVE_TOKEN_ADDRESS",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ],
                                    [
                                        "socketGateway",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ],
                                    [
                                        "socketRoute",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\bridges\\BridgeImplBase.sol",
                                        "BridgeImplBase"
                                    ],
                                    [
                                        "allowance",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\tokens\\ERC20.sol",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ZkSyncBridgeImpl.SocketBridge",
                                        "ZkSyncBridgeImpl.ERC20",
                                        "socketRoute.getRoute"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "9a4433d548b95073ee8d8ca76e5bf930"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {
                        "ZkSyncBridgeData": {
                            "content": "ZkSyncBridgeData{ uint256 amount; uint256 fees; bytes32 metadata; address receiverAddress; address token; uint256 toChainId; uint256 l2TxGasLimit; uint256 l2TxGasPerPubdataByte;}"
                        }
                    },
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "ERC20": "SafeTransferLib"
                    }
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "f8c1c4aef82653b6637ef7237ad97937"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\controllers\\BaseController.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\controllers\\BaseController.sol",
            "filename": "BaseController.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\interfaces\\ISocketRequest.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "ISocketRequest": {
                            "original_name": "ISocketRequest",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\interfaces\\ISocketRoute.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "ISocketRoute": {
                            "original_name": "ISocketRoute",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                }
            },
            "contracts": {
                "BaseController": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": true,
                    "inherits": [],
                    "state_variables": {
                        "NATIVE_TOKEN_ADDRESS": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)",
                            "content": "address public immutable NATIVE_TOKEN_ADDRESS = address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);"
                        },
                        "NULL_ADDRESS": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "address(0)",
                            "content": "address public immutable NULL_ADDRESS = address(0);"
                        },
                        "BRIDGE_AFTER_SWAP_SELECTOR": {
                            "type": "bytes4",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "bytes4(keccak256(\"bridgeAfterSwap(uint256, bytes)\"))",
                            "content": "bytes4 public immutable BRIDGE_AFTER_SWAP_SELECTOR = bytes4(keccak256(\"bridgeAfterSwap(uint256, bytes)\"));"
                        },
                        "socketGatewayAddress": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public immutable socketGatewayAddress;"
                        },
                        "socketRoute": {
                            "type": "ISocketRoute",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": null,
                            "content": "ISocketRoute public immutable socketRoute;"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (address _socketGatewayAddress){ socketGatewayAddress = _socketGatewayAddress; socketRoute = ISocketRoute(_socketGatewayAddress);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_socketGatewayAddress"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "socketGatewayAddress",
                                        "",
                                        "BaseController"
                                    ],
                                    [
                                        "socketRoute",
                                        "",
                                        "BaseController"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "socketGatewayAddress",
                                        "",
                                        "BaseController"
                                    ],
                                    [
                                        "socketRoute",
                                        "",
                                        "BaseController"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "8eea2582f2bef9f1d64095c40361671e"
                            }
                        ],
                        "_executeRoute": [
                            {
                                "visibility": "internal",
                                "content": "function _executeRoute( uint32 routeId, bytes memory data ) internal returns (bytes memory){ (bool success, bytes memory result) = socketRoute .getRoute(routeId) .delegatecall(data); if (!success){ assembly{ revert(add(result, 32), mload(result))}} return result;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint32",
                                        "name": "routeId"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "data"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "socketRoute",
                                        "",
                                        "BaseController"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ISocketRoute.getRoute"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "9701fdc6c942a8da1637117ee79c2fc3"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "ISocketRoute.getRoute": "c9578e2fe3e064df0fbbaa8cecd4af68"
            },
            "md5": "356b593dad4849eb7b8824289cf0a4c0"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\controllers\\FeesTakerController.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\controllers\\FeesTakerController.sol",
            "filename": "FeesTakerController.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\utils\\SafeTransferLib.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "SafeTransferLib": {
                            "original_name": "SafeTransferLib",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\tokens\\ERC20.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "ERC20": {
                            "original_name": "ERC20",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\controllers\\BaseController.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "BaseController": {
                            "original_name": "BaseController",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\interfaces\\ISocketRequest.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "ISocketRequest": {
                            "original_name": "ISocketRequest",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                }
            },
            "contracts": {
                "FeesTakerController": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "BaseController"
                    ],
                    "state_variables": {
                        "FEES_TAKER_SWAP_FUNCTION_SELECTOR": {
                            "type": "bytes4",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "bytes4( keccak256(\"takeFeesAndSwap((address, address, uint256, uint32, bytes))\") )",
                            "content": "bytes4 public immutable FEES_TAKER_SWAP_FUNCTION_SELECTOR = bytes4( keccak256(\"takeFeesAndSwap((address, address, uint256, uint32, bytes))\") );"
                        },
                        "FEES_TAKER_BRIDGE_FUNCTION_SELECTOR": {
                            "type": "bytes4",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "bytes4( keccak256( \"takeFeesAndBridge((address, address, uint256, uint32, bytes))\" ) )",
                            "content": "bytes4 public immutable FEES_TAKER_BRIDGE_FUNCTION_SELECTOR = bytes4( keccak256( \"takeFeesAndBridge((address, address, uint256, uint32, bytes))\" ) );"
                        },
                        "FEES_TAKER_MULTI_BRIDGE_FUNCTION_SELECTOR": {
                            "type": "bytes4",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "bytes4( keccak256( \"takeFeesAndMultiBridge((address, address, uint256, uint32[], bytes[]))\" ) )",
                            "content": "bytes4 public immutable FEES_TAKER_MULTI_BRIDGE_FUNCTION_SELECTOR = bytes4( keccak256( \"takeFeesAndMultiBridge((address, address, uint256, uint32[], bytes[]))\" ) );"
                        },
                        "FEES_TAKER_SWAP_BRIDGE_FUNCTION_SELECTOR": {
                            "type": "bytes4",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "bytes4( keccak256( \"takeFeeAndSwapAndBridge((address, address, uint256, uint32, bytes, uint32, bytes))\" ) )",
                            "content": "bytes4 public immutable FEES_TAKER_SWAP_BRIDGE_FUNCTION_SELECTOR = bytes4( keccak256( \"takeFeeAndSwapAndBridge((address, address, uint256, uint32, bytes, uint32, bytes))\" ) );"
                        },
                        "FEES_TAKER_REFUEL_SWAP_BRIDGE_FUNCTION_SELECTOR": {
                            "type": "bytes4",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "bytes4( keccak256( \"takeFeeAndRefuelAndSwapAndBridge((address, address, uint256, uint32, bytes, uint32, bytes, uint32, bytes))\" ) )",
                            "content": "bytes4 public immutable FEES_TAKER_REFUEL_SWAP_BRIDGE_FUNCTION_SELECTOR = bytes4( keccak256( \"takeFeeAndRefuelAndSwapAndBridge((address, address, uint256, uint32, bytes, uint32, bytes, uint32, bytes))\" ) );"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor ( address _socketGatewayAddress ) BaseController(_socketGatewayAddress){}",
                                "modifiers": [
                                    "BaseController(_socketGatewayAddress)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_socketGatewayAddress"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "bf655ff487c5c0fd86c972f66d8c553a"
                            }
                        ],
                        "takeFeesAndSwap": [
                            {
                                "visibility": "external",
                                "content": "function takeFeesAndSwap( ISocketRequest.FeesTakerSwapRequest calldata ftsRequest ) external payable returns (bytes memory){ if (ftsRequest.feesToken == NATIVE_TOKEN_ADDRESS){ (bool success, ) = ftsRequest.feesTakerAddress.call{ value: ftsRequest.feesAmount} (\"\"); if (!success) revert NativeTokenTransferFailed();} else{ ERC20(ftsRequest.feesToken).safeTransferFrom( msg.sender, ftsRequest.feesTakerAddress, ftsRequest.feesAmount );} emit SocketFeesDeducted( ftsRequest.feesAmount, ftsRequest.feesTakerAddress, ftsRequest.feesToken ); return _executeRoute(ftsRequest.routeId, ftsRequest.swapRequestData);}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "ISocketRequest.FeesTakerSwapRequest calldata",
                                        "name": "ftsRequest"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "NATIVE_TOKEN_ADDRESS",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\controllers\\BaseController.sol",
                                        "BaseController"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "NATIVE_TOKEN_ADDRESS",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\controllers\\BaseController.sol",
                                        "BaseController"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "FeesTakerController.ERC20",
                                        "FeesTakerController._executeRoute",
                                        "FeesTakerController.NativeTokenTransferFailed"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "0e7ad5b05b67cf28cd18010f1cdea391"
                            }
                        ],
                        "takeFeesAndBridge": [
                            {
                                "visibility": "external",
                                "content": "function takeFeesAndBridge( ISocketRequest.FeesTakerBridgeRequest calldata ftbRequest ) external payable returns (bytes memory){ if (ftbRequest.feesToken == NATIVE_TOKEN_ADDRESS){ (bool success, ) = ftbRequest.feesTakerAddress.call{ value: ftbRequest.feesAmount} (\"\"); if (!success) revert NativeTokenTransferFailed();} else{ ERC20(ftbRequest.feesToken).safeTransferFrom( msg.sender, ftbRequest.feesTakerAddress, ftbRequest.feesAmount );} emit SocketFeesDeducted( ftbRequest.feesAmount, ftbRequest.feesTakerAddress, ftbRequest.feesToken ); return _executeRoute(ftbRequest.routeId, ftbRequest.bridgeRequestData);}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "ISocketRequest.FeesTakerBridgeRequest calldata",
                                        "name": "ftbRequest"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "NATIVE_TOKEN_ADDRESS",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\controllers\\BaseController.sol",
                                        "BaseController"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "NATIVE_TOKEN_ADDRESS",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\controllers\\BaseController.sol",
                                        "BaseController"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "FeesTakerController.ERC20",
                                        "FeesTakerController._executeRoute",
                                        "FeesTakerController.NativeTokenTransferFailed"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "8992d1844ecabea44b9eaa7b01be6963"
                            }
                        ],
                        "takeFeesAndMultiBridge": [
                            {
                                "visibility": "external",
                                "content": "function takeFeesAndMultiBridge( ISocketRequest.FeesTakerMultiBridgeRequest calldata ftmbRequest ) external payable{ if (ftmbRequest.feesToken == NATIVE_TOKEN_ADDRESS){ (bool success, ) = ftmbRequest.feesTakerAddress.call{ value: ftmbRequest.feesAmount} (\"\"); if (!success) revert NativeTokenTransferFailed();} else{ ERC20(ftmbRequest.feesToken).safeTransferFrom( msg.sender, ftmbRequest.feesTakerAddress, ftmbRequest.feesAmount );} emit SocketFeesDeducted( ftmbRequest.feesAmount, ftmbRequest.feesTakerAddress, ftmbRequest.feesToken ); for ( uint256 index = 0; index < ftmbRequest.bridgeRouteIds.length; ++index ){ _executeRoute( ftmbRequest.bridgeRouteIds[index], ftmbRequest.bridgeRequestDataItems[index] );}}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "ISocketRequest.FeesTakerMultiBridgeRequest calldata",
                                        "name": "ftmbRequest"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "NATIVE_TOKEN_ADDRESS",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\controllers\\BaseController.sol",
                                        "BaseController"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "NATIVE_TOKEN_ADDRESS",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\controllers\\BaseController.sol",
                                        "BaseController"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "FeesTakerController.ERC20",
                                        "FeesTakerController._executeRoute",
                                        "FeesTakerController.NativeTokenTransferFailed"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "8529e59b959d155d2ee8ab13849fb0a7"
                            }
                        ],
                        "takeFeeAndSwapAndBridge": [
                            {
                                "visibility": "external",
                                "content": "function takeFeeAndSwapAndBridge( ISocketRequest.FeesTakerSwapBridgeRequest calldata fsbRequest ) external payable returns (bytes memory){ if (fsbRequest.feesToken == NATIVE_TOKEN_ADDRESS){ (bool success, ) = fsbRequest.feesTakerAddress.call{ value: fsbRequest.feesAmount} (\"\"); if (!success) revert NativeTokenTransferFailed();} else{ ERC20(fsbRequest.feesToken).safeTransferFrom( msg.sender, fsbRequest.feesTakerAddress, fsbRequest.feesAmount );} emit SocketFeesDeducted( fsbRequest.feesAmount, fsbRequest.feesTakerAddress, fsbRequest.feesToken ); bytes memory swapResponseData = _executeRoute( fsbRequest.swapRouteId, fsbRequest.swapData ); (uint256 swapAmount, ) = abi.decode( swapResponseData, (uint256, address) ); bytes memory bridgeImpldata = abi.encodeWithSelector( BRIDGE_AFTER_SWAP_SELECTOR, swapAmount, fsbRequest.bridgeData ); return _executeRoute(fsbRequest.bridgeRouteId, bridgeImpldata);}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "ISocketRequest.FeesTakerSwapBridgeRequest calldata",
                                        "name": "fsbRequest"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "NATIVE_TOKEN_ADDRESS",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\controllers\\BaseController.sol",
                                        "BaseController"
                                    ],
                                    [
                                        "BRIDGE_AFTER_SWAP_SELECTOR",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\controllers\\BaseController.sol",
                                        "BaseController"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "NATIVE_TOKEN_ADDRESS",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\controllers\\BaseController.sol",
                                        "BaseController"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "FeesTakerController.ERC20",
                                        "FeesTakerController._executeRoute",
                                        "FeesTakerController.NativeTokenTransferFailed"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "1cc0e71c99e4ff37883ecdb6d0c0d6df"
                            }
                        ],
                        "takeFeeAndRefuelAndSwapAndBridge": [
                            {
                                "visibility": "external",
                                "content": "function takeFeeAndRefuelAndSwapAndBridge( ISocketRequest.FeesTakerRefuelSwapBridgeRequest calldata frsbRequest ) external payable returns (bytes memory){ if (frsbRequest.feesToken == NATIVE_TOKEN_ADDRESS){ (bool success, ) = frsbRequest.feesTakerAddress.call{ value: frsbRequest.feesAmount} (\"\"); if (!success) revert NativeTokenTransferFailed();} else{ ERC20(frsbRequest.feesToken).safeTransferFrom( msg.sender, frsbRequest.feesTakerAddress, frsbRequest.feesAmount );} emit SocketFeesDeducted( frsbRequest.feesAmount, frsbRequest.feesTakerAddress, frsbRequest.feesToken ); _executeRoute(frsbRequest.refuelRouteId, frsbRequest.refuelData); bytes memory swapResponseData = _executeRoute( frsbRequest.swapRouteId, frsbRequest.swapData ); (uint256 swapAmount, ) = abi.decode( swapResponseData, (uint256, address) ); bytes memory bridgeImpldata = abi.encodeWithSelector( BRIDGE_AFTER_SWAP_SELECTOR, swapAmount, frsbRequest.bridgeData ); return _executeRoute(frsbRequest.bridgeRouteId, bridgeImpldata);}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "ISocketRequest.FeesTakerRefuelSwapBridgeRequest calldata",
                                        "name": "frsbRequest"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "NATIVE_TOKEN_ADDRESS",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\controllers\\BaseController.sol",
                                        "BaseController"
                                    ],
                                    [
                                        "BRIDGE_AFTER_SWAP_SELECTOR",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\controllers\\BaseController.sol",
                                        "BaseController"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "NATIVE_TOKEN_ADDRESS",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\controllers\\BaseController.sol",
                                        "BaseController"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "FeesTakerController.ERC20",
                                        "FeesTakerController._executeRoute",
                                        "FeesTakerController.NativeTokenTransferFailed"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "f9859b5933212849062700f7f9abae73"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {
                        "SocketFeesDeducted": {
                            "event": "SocketFeesDeducted",
                            "content": "SocketFeesDeducted( uint256 fees, address feesToken, address feesTaker )"
                        }
                    },
                    "enums": {},
                    "errors": {
                        "NativeTokenTransferFailed": {
                            "content": "NativeTokenTransferFailed()"
                        }
                    },
                    "custom_types": {},
                    "using_directives": {
                        "ERC20": "SafeTransferLib"
                    }
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "FeesTakerController._executeRoute": "9701fdc6c942a8da1637117ee79c2fc3"
            },
            "md5": "03973cc03e3d762599165d974808b8ea"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\controllers\\RefuelSwapAndBridgeController.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\controllers\\RefuelSwapAndBridgeController.sol",
            "filename": "RefuelSwapAndBridgeController.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\interfaces\\ISocketRequest.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "ISocketRequest": {
                            "original_name": "ISocketRequest",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\interfaces\\ISocketRoute.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "ISocketRoute": {
                            "original_name": "ISocketRoute",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\controllers\\BaseController.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "BaseController": {
                            "original_name": "BaseController",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                }
            },
            "contracts": {
                "RefuelSwapAndBridgeController": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "BaseController"
                    ],
                    "state_variables": {
                        "REFUEL_SWAP_BRIDGE_FUNCTION_SELECTOR": {
                            "type": "bytes4",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "bytes4( keccak256( \"refuelAndSwapAndBridge((uint32, bytes, uint32, bytes, uint32, bytes))\" ) )",
                            "content": "bytes4 public immutable REFUEL_SWAP_BRIDGE_FUNCTION_SELECTOR = bytes4( keccak256( \"refuelAndSwapAndBridge((uint32, bytes, uint32, bytes, uint32, bytes))\" ) );"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor ( address _socketGatewayAddress ) BaseController(_socketGatewayAddress){}",
                                "modifiers": [
                                    "BaseController(_socketGatewayAddress)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_socketGatewayAddress"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "bf655ff487c5c0fd86c972f66d8c553a"
                            }
                        ],
                        "refuelAndSwapAndBridge": [
                            {
                                "visibility": "public",
                                "content": "function refuelAndSwapAndBridge( ISocketRequest.RefuelSwapBridgeRequest calldata rsbRequest ) public payable returns (bytes memory){ _executeRoute(rsbRequest.refuelRouteId, rsbRequest.refuelData); bytes memory swapResponseData = _executeRoute( rsbRequest.swapRouteId, rsbRequest.swapData ); (uint256 swapAmount, ) = abi.decode( swapResponseData, (uint256, address) ); bytes memory bridgeImpldata = abi.encodeWithSelector( BRIDGE_AFTER_SWAP_SELECTOR, swapAmount, rsbRequest.bridgeData ); return _executeRoute(rsbRequest.bridgeRouteId, bridgeImpldata);}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "ISocketRequest.RefuelSwapBridgeRequest calldata",
                                        "name": "rsbRequest"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "BRIDGE_AFTER_SWAP_SELECTOR",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\controllers\\BaseController.sol",
                                        "BaseController"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "RefuelSwapAndBridgeController._executeRoute"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "44a07c5b7c0a01b7eb549a8ee6d89ff0"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "RefuelSwapAndBridgeController._executeRoute": "9701fdc6c942a8da1637117ee79c2fc3"
            },
            "md5": "0db8490470d481cd4bdc088eaf3a42f5"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\deployFactory\\DisabledSocketRoute.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\deployFactory\\DisabledSocketRoute.sol",
            "filename": "DisabledSocketRoute.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\utils\\SafeTransferLib.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "SafeTransferLib": {
                            "original_name": "SafeTransferLib",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\tokens\\ERC20.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "ERC20": {
                            "original_name": "ERC20",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\interfaces\\ISocketGateway.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "ISocketGateway": {
                            "original_name": "ISocketGateway",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\errors\\SocketErrors.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "OnlySocketGatewayOwner": {
                            "original_name": "OnlySocketGatewayOwner",
                            "type": {
                                "__CT__": true,
                                "value": 15
                            }
                        }
                    }
                }
            },
            "contracts": {
                "DisabledSocketRoute": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {
                        "socketGateway": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public immutable socketGateway;"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (address _socketGateway){ socketGateway = _socketGateway;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_socketGateway"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "socketGateway",
                                        "",
                                        "DisabledSocketRoute"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "socketGateway",
                                        "",
                                        "DisabledSocketRoute"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "8e09a165dd0c4bee1e5ad633fdff99ea"
                            }
                        ],
                        "rescueFunds": [
                            {
                                "visibility": "external",
                                "content": "function rescueFunds( address token, address userAddress, uint256 amount ) external isSocketGatewayOwner{ ERC20(token).safeTransfer(userAddress, amount);}",
                                "modifiers": [
                                    "isSocketGatewayOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "userAddress"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "DisabledSocketRoute.ERC20",
                                        "DisabledSocketRoute.isSocketGatewayOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "02e107ecb0c9ea6ada50044814046384"
                            }
                        ],
                        "rescueEther": [
                            {
                                "visibility": "external",
                                "content": "function rescueEther( address payable userAddress, uint256 amount ) external isSocketGatewayOwner{ userAddress.transfer(amount);}",
                                "modifiers": [
                                    "isSocketGatewayOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "address payable",
                                        "name": "userAddress"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "userAddress.transfer",
                                        "DisabledSocketRoute.isSocketGatewayOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "e5e97c022cce385ddc83284823e2fc84"
                            }
                        ]
                    },
                    "modifiers": {
                        "isSocketGatewayOwner": {
                            "parameters": [],
                            "content": "modifier isSocketGatewayOwner(){ if (msg.sender != ISocketGateway(socketGateway).owner()){ revert OnlySocketGatewayOwner();} _;}",
                            "reads": [
                                [
                                    "socketGateway",
                                    "",
                                    "DisabledSocketRoute"
                                ]
                            ],
                            "writes": [],
                            "external_calls": {
                                "__set__": true,
                                "values": [
                                    "DisabledSocketRoute.OnlySocketGatewayOwner",
                                    "DisabledSocketRoute.ISocketGateway"
                                ]
                            },
                            "md5": "6aa94456738d60c2daad284eb4ea5c71"
                        }
                    },
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {
                        "RouteDisabled": {
                            "content": "RouteDisabled()"
                        }
                    },
                    "custom_types": {},
                    "using_directives": {
                        "ERC20": "SafeTransferLib"
                    }
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "DisabledSocketRoute.isSocketGatewayOwner": "6aa94456738d60c2daad284eb4ea5c71",
                "userAddress.transfer": "106c99c210292ba876e75685ad2beb0c"
            },
            "md5": "e1c8b85d1ca15d79b2760eb858f78cdb"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\interfaces\\ISocketBridgeBase.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\interfaces\\ISocketBridgeBase.sol",
            "filename": "ISocketBridgeBase.sol",
            "imported_contracts": {},
            "contracts": {
                "ISocketBridgeBase": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "killme": [
                            {
                                "visibility": "external",
                                "content": "function killme() external;",
                                "modifiers": [],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "80930e65bea9e2de6fa3ac9d6ee6462d"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "58b1888114f4a8e3757058b9385a611e"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\deployFactory\\SocketDeployFactory.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\deployFactory\\SocketDeployFactory.sol",
            "filename": "SocketDeployFactory.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\utils\\Ownable.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\utils\\SafeTransferLib.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "SafeTransferLib": {
                            "original_name": "SafeTransferLib",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\tokens\\ERC20.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "ERC20": {
                            "original_name": "ERC20",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\interfaces\\ISocketBridgeBase.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "ISocketBridgeBase": {
                            "original_name": "ISocketBridgeBase",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                }
            },
            "contracts": {
                "SocketDeployFactory": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "Ownable"
                    ],
                    "state_variables": {
                        "disabledRouteAddress": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public immutable disabledRouteAddress;"
                        },
                        "_implementations": {
                            "type": "mapping(address => address)",
                            "visibility": "internal",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(address => address) _implementations;"
                        },
                        "isDisabled": {
                            "type": "mapping(uint256 => bool)",
                            "visibility": "internal",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(uint256 => bool) isDisabled;"
                        },
                        "isRouteDeployed": {
                            "type": "mapping(uint256 => bool)",
                            "visibility": "internal",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(uint256 => bool) isRouteDeployed;"
                        },
                        "canDisableRoute": {
                            "type": "mapping(address => bool)",
                            "visibility": "internal",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(address => bool) canDisableRoute;"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (address _owner, address disabledRoute) Ownable(_owner){ disabledRouteAddress = disabledRoute; canDisableRoute[_owner] = true;}",
                                "modifiers": [
                                    "Ownable(_owner)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_owner"
                                    },
                                    {
                                        "type": "address",
                                        "name": "disabledRoute"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "disabledRouteAddress",
                                        "",
                                        "SocketDeployFactory"
                                    ],
                                    [
                                        "canDisableRoute",
                                        "",
                                        "SocketDeployFactory"
                                    ],
                                    [
                                        "_owner",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\utils\\Ownable.sol",
                                        "Ownable"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "disabledRouteAddress",
                                        "",
                                        "SocketDeployFactory"
                                    ],
                                    [
                                        "canDisableRoute",
                                        "",
                                        "SocketDeployFactory"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "44b0c7492e43f3f81239c2dabb151db9"
                            }
                        ],
                        "addDisablerAddress": [
                            {
                                "visibility": "external",
                                "content": "function addDisablerAddress(address disabler) external onlyOwner{ canDisableRoute[disabler] = true;}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "disabler"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "canDisableRoute",
                                        "",
                                        "SocketDeployFactory"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "canDisableRoute",
                                        "",
                                        "SocketDeployFactory"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SocketDeployFactory.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "d9926b738b5a97617730f8149d5520a3"
                            }
                        ],
                        "removeDisablerAddress": [
                            {
                                "visibility": "external",
                                "content": "function removeDisablerAddress(address disabler) external onlyOwner{ canDisableRoute[disabler] = false;}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "disabler"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "canDisableRoute",
                                        "",
                                        "SocketDeployFactory"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "canDisableRoute",
                                        "",
                                        "SocketDeployFactory"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SocketDeployFactory.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "f391691da83d777e9f341df8e13a400b"
                            }
                        ],
                        "deploy": [
                            {
                                "visibility": "external",
                                "content": "function deploy( uint256 routeId, address implementationContract ) external onlyOwner returns (address){ bytes memory initCode = ( hex\"5860208158601c335a63aaf10f428752fa158151803b80938091923cf3\" ); address routeContractAddress = _getContractAddress(routeId); if (isRouteDeployed[routeId]){ revert ContractAlreadyDeployed();} isRouteDeployed[routeId] = true; _implementations[routeContractAddress] = implementationContract; address addr; assembly{ let encoded_data := add(0x20, initCode) let encoded_size := mload(initCode) addr := create2(0, encoded_data, encoded_size, routeId)} require( addr == routeContractAddress, \"Failed to deploy the new socket contract .\" ); emit Deployed(addr); return addr;}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "routeId"
                                    },
                                    {
                                        "type": "address",
                                        "name": "implementationContract"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_implementations",
                                        "",
                                        "SocketDeployFactory"
                                    ],
                                    [
                                        "isRouteDeployed",
                                        "",
                                        "SocketDeployFactory"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_implementations",
                                        "",
                                        "SocketDeployFactory"
                                    ],
                                    [
                                        "isRouteDeployed",
                                        "",
                                        "SocketDeployFactory"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SocketDeployFactory.ContractAlreadyDeployed",
                                        "SocketDeployFactory._getContractAddress",
                                        "SocketDeployFactory.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "3da17ac63f55c64fc0468b2c8aff16cd"
                            }
                        ],
                        "destroy": [
                            {
                                "visibility": "external",
                                "content": "function destroy(uint256 routeId) external onlyDisabler{ _destroy(routeId);}",
                                "modifiers": [
                                    "onlyDisabler"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "routeId"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SocketDeployFactory.onlyDisabler",
                                        "SocketDeployFactory._destroy"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "b93f69a3222b294f4c5e7177f23c600a"
                            }
                        ],
                        "disableRoute": [
                            {
                                "visibility": "external",
                                "content": "function disableRoute( uint256 routeId ) external onlyDisabler returns (address){ return _disableRoute(routeId);}",
                                "modifiers": [
                                    "onlyDisabler"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "routeId"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SocketDeployFactory.onlyDisabler",
                                        "SocketDeployFactory._disableRoute"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "98d3b11c05deca0492817e7a8a10dc9e"
                            }
                        ],
                        "multiDestroy": [
                            {
                                "visibility": "external",
                                "content": "function multiDestroy(uint256[] calldata routeIds) external onlyDisabler{ for (uint32 index = 0; index < routeIds.length; ){ _destroy(routeIds[index]); unchecked{ ++index;}}}",
                                "modifiers": [
                                    "onlyDisabler"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256[] calldata",
                                        "name": "routeIds"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SocketDeployFactory.onlyDisabler",
                                        "SocketDeployFactory._destroy"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "063e9ea8883c9cd2d74631fee6477c3a"
                            }
                        ],
                        "multiDisableRoute": [
                            {
                                "visibility": "external",
                                "content": "function multiDisableRoute( uint256[] calldata routeIds ) external onlyDisabler{ for (uint32 index = 0; index < routeIds.length; ){ _disableRoute(routeIds[index]); unchecked{ ++index;}}}",
                                "modifiers": [
                                    "onlyDisabler"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256[] calldata",
                                        "name": "routeIds"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SocketDeployFactory.onlyDisabler",
                                        "SocketDeployFactory._disableRoute"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "749d840094cc7c89299bf136e58b05be"
                            }
                        ],
                        "getContractAddress": [
                            {
                                "visibility": "external",
                                "content": "function getContractAddress( uint256 routeId ) external view returns (address){ return _getContractAddress(routeId);}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "routeId"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SocketDeployFactory._getContractAddress"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "6cb8525c0d6b7b8be44626fdb9006bce"
                            }
                        ],
                        "getImplementation": [
                            {
                                "visibility": "external",
                                "content": "function getImplementation() external view returns (address implementation){ return _implementations[msg.sender];}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": "implementation"
                                    }
                                ],
                                "reads": [
                                    [
                                        "_implementations",
                                        "",
                                        "SocketDeployFactory"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "fc94790d7c36eea21e2a817582b9d0b1"
                            }
                        ],
                        "_disableRoute": [
                            {
                                "visibility": "internal",
                                "content": "function _disableRoute(uint256 routeId) internal returns (address){ bytes memory initCode = ( hex\"5860208158601c335a63aaf10f428752fa158151803b80938091923cf3\" ); address routeContractAddress = _getContractAddress(routeId); if (!isRouteDeployed[routeId]){ revert CannotBeDisabled();} if (isDisabled[routeId]){ revert AlreadyDisabled();} isDisabled[routeId] = true; _implementations[routeContractAddress] = disabledRouteAddress; address addr; assembly{ let encoded_data := add(0x20, initCode) let encoded_size := mload(initCode) addr := create2(0, encoded_data, encoded_size, routeId)} require( addr == routeContractAddress, \"Failed to deploy the new socket contract .\" ); emit Deployed(addr); return addr;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "routeId"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "disabledRouteAddress",
                                        "",
                                        "SocketDeployFactory"
                                    ],
                                    [
                                        "_implementations",
                                        "",
                                        "SocketDeployFactory"
                                    ],
                                    [
                                        "isDisabled",
                                        "",
                                        "SocketDeployFactory"
                                    ],
                                    [
                                        "isRouteDeployed",
                                        "",
                                        "SocketDeployFactory"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_implementations",
                                        "",
                                        "SocketDeployFactory"
                                    ],
                                    [
                                        "isDisabled",
                                        "",
                                        "SocketDeployFactory"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SocketDeployFactory._getContractAddress",
                                        "SocketDeployFactory.CannotBeDisabled",
                                        "SocketDeployFactory.AlreadyDisabled"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "3370a72e9a1c7f2c2380215698176513"
                            }
                        ],
                        "_destroy": [
                            {
                                "visibility": "internal",
                                "content": "function _destroy(uint256 routeId) internal{ address routeContractAddress = _getContractAddress(routeId); if (!isRouteDeployed[routeId]){ revert NothingToDestroy();} ISocketBridgeBase(routeContractAddress).killme(); emit Destroyed(routeContractAddress);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "routeId"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "isRouteDeployed",
                                        "",
                                        "SocketDeployFactory"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SocketDeployFactory.ISocketBridgeBase",
                                        "SocketDeployFactory._getContractAddress",
                                        "SocketDeployFactory.NothingToDestroy"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "b4b51cb76668ce9b5dee37285cfc2113"
                            }
                        ],
                        "_getContractAddress": [
                            {
                                "visibility": "internal",
                                "content": "function _getContractAddress( uint256 routeId ) internal view returns (address){ bytes memory initCode = ( hex\"5860208158601c335a63aaf10f428752fa158151803b80938091923cf3\" ); return address( uint160( uint256( keccak256( abi.encodePacked( hex\"ff\", address(this), routeId, keccak256(abi.encodePacked(initCode)) ) ) ) ) );}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "routeId"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "0fc99dd5a41871a659f6fadbfd814407"
                            }
                        ],
                        "rescueFunds": [
                            {
                                "visibility": "external",
                                "content": "function rescueFunds( address token, address userAddress, uint256 amount ) external onlyOwner{ ERC20(token).safeTransfer(userAddress, amount);}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "userAddress"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SocketDeployFactory.ERC20",
                                        "SocketDeployFactory.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "3944a5c52501dcdae998b37b0a15b246"
                            }
                        ],
                        "rescueEther": [
                            {
                                "visibility": "external",
                                "content": "function rescueEther( address payable userAddress, uint256 amount ) external onlyOwner{ userAddress.transfer(amount);}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "address payable",
                                        "name": "userAddress"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "userAddress.transfer",
                                        "SocketDeployFactory.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "b68d68f22645125c8e97d3d732b95cf4"
                            }
                        ]
                    },
                    "modifiers": {
                        "onlyDisabler": {
                            "parameters": [],
                            "content": "modifier onlyDisabler(){ if (!canDisableRoute[msg.sender]){ revert OnlyDisabler();} _;}",
                            "reads": [
                                [
                                    "canDisableRoute",
                                    "",
                                    "SocketDeployFactory"
                                ]
                            ],
                            "writes": [],
                            "external_calls": {
                                "__set__": true,
                                "values": [
                                    "SocketDeployFactory.OnlyDisabler"
                                ]
                            },
                            "md5": "c6a18577f55b83760563827c6abebc5d"
                        }
                    },
                    "structs": {},
                    "events": {
                        "Deployed": {
                            "event": "Deployed",
                            "content": "Deployed(address _addr)"
                        },
                        "DisabledRoute": {
                            "event": "DisabledRoute",
                            "content": "DisabledRoute(address _addr)"
                        },
                        "Destroyed": {
                            "event": "Destroyed",
                            "content": "Destroyed(address _addr)"
                        }
                    },
                    "enums": {},
                    "errors": {
                        "ContractAlreadyDeployed": {
                            "content": "ContractAlreadyDeployed()"
                        },
                        "NothingToDestroy": {
                            "content": "NothingToDestroy()"
                        },
                        "AlreadyDisabled": {
                            "content": "AlreadyDisabled()"
                        },
                        "CannotBeDisabled": {
                            "content": "CannotBeDisabled()"
                        },
                        "OnlyDisabler": {
                            "content": "OnlyDisabler()"
                        }
                    },
                    "custom_types": {},
                    "using_directives": {
                        "ERC20": "SafeTransferLib"
                    }
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "SocketDeployFactory.onlyOwner": "b9a44c8e413874da0eff71e6b2a9dd66",
                "SocketDeployFactory._getContractAddress": "0fc99dd5a41871a659f6fadbfd814407",
                "SocketDeployFactory._destroy": "b4b51cb76668ce9b5dee37285cfc2113",
                "SocketDeployFactory.onlyDisabler": "c6a18577f55b83760563827c6abebc5d",
                "SocketDeployFactory._disableRoute": "3370a72e9a1c7f2c2380215698176513",
                "userAddress.transfer": "106c99c210292ba876e75685ad2beb0c"
            },
            "md5": "6f887299a376138ab23bfe7b86133ea5"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\interfaces\\ISocketController.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\interfaces\\ISocketController.sol",
            "filename": "ISocketController.sol",
            "imported_contracts": {},
            "contracts": {
                "ISocketController": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "addController": [
                            {
                                "visibility": "external",
                                "content": "function addController( address _controllerAddress ) external returns (uint32);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_controllerAddress"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint32",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "9aacf08ab09903055fb9dd0c472958a3"
                            }
                        ],
                        "disableController": [
                            {
                                "visibility": "external",
                                "content": "function disableController(uint32 _controllerId) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint32",
                                        "name": "_controllerId"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "db4bc1433946b910052b102e1d2c3f40"
                            }
                        ],
                        "getController": [
                            {
                                "visibility": "external",
                                "content": "function getController(uint32 _controllerId) external returns (address);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint32",
                                        "name": "_controllerId"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "b2328ff8048d4dc62da71c51489f3e59"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "ba65e99d6cb79315a5ef8d55e4c2b676"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\swap\\SwapImplBase.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\swap\\SwapImplBase.sol",
            "filename": "SwapImplBase.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\utils\\SafeTransferLib.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "SafeTransferLib": {
                            "original_name": "SafeTransferLib",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\tokens\\ERC20.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "ERC20": {
                            "original_name": "ERC20",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\interfaces\\ISocketGateway.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "ISocketGateway": {
                            "original_name": "ISocketGateway",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\errors\\SocketErrors.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "OnlySocketGatewayOwner": {
                            "original_name": "OnlySocketGatewayOwner",
                            "type": {
                                "__CT__": true,
                                "value": 15
                            }
                        },
                        "OnlySocketDeployer": {
                            "original_name": "OnlySocketDeployer",
                            "type": {
                                "__CT__": true,
                                "value": 15
                            }
                        }
                    }
                }
            },
            "contracts": {
                "SwapImplBase": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": true,
                    "inherits": [],
                    "state_variables": {
                        "NATIVE_TOKEN_ADDRESS": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)",
                            "content": "address public immutable NATIVE_TOKEN_ADDRESS = address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);"
                        },
                        "socketGateway": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public immutable socketGateway;"
                        },
                        "socketDeployFactory": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public immutable socketDeployFactory;"
                        },
                        "SWAP_FUNCTION_SELECTOR": {
                            "type": "bytes4",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "bytes4( keccak256( \"performAction(address, address, uint256, address, bytes32, bytes)\" ) )",
                            "content": "bytes4 public immutable SWAP_FUNCTION_SELECTOR = bytes4( keccak256( \"performAction(address, address, uint256, address, bytes32, bytes)\" ) );"
                        },
                        "SWAP_WITHIN_FUNCTION_SELECTOR": {
                            "type": "bytes4",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "bytes4(keccak256(\"performActionWithIn(address, address, uint256, bytes)\"))",
                            "content": "bytes4 public immutable SWAP_WITHIN_FUNCTION_SELECTOR = bytes4(keccak256(\"performActionWithIn(address, address, uint256, bytes)\"));"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (address _socketGateway, address _socketDeployFactory){ socketGateway = _socketGateway; socketDeployFactory = _socketDeployFactory;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_socketGateway"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_socketDeployFactory"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "socketGateway",
                                        "",
                                        "SwapImplBase"
                                    ],
                                    [
                                        "socketDeployFactory",
                                        "",
                                        "SwapImplBase"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "socketGateway",
                                        "",
                                        "SwapImplBase"
                                    ],
                                    [
                                        "socketDeployFactory",
                                        "",
                                        "SwapImplBase"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "cc70bb09977323752a05e8b7729b613c"
                            }
                        ],
                        "rescueFunds": [
                            {
                                "visibility": "external",
                                "content": "function rescueFunds( address token, address userAddress, uint256 amount ) external isSocketGatewayOwner{ ERC20(token).safeTransfer(userAddress, amount);}",
                                "modifiers": [
                                    "isSocketGatewayOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "userAddress"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SwapImplBase.isSocketGatewayOwner",
                                        "SwapImplBase.ERC20"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "02e107ecb0c9ea6ada50044814046384"
                            }
                        ],
                        "rescueEther": [
                            {
                                "visibility": "external",
                                "content": "function rescueEther( address payable userAddress, uint256 amount ) external isSocketGatewayOwner{ userAddress.transfer(amount);}",
                                "modifiers": [
                                    "isSocketGatewayOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "address payable",
                                        "name": "userAddress"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SwapImplBase.isSocketGatewayOwner",
                                        "userAddress.transfer"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "e5e97c022cce385ddc83284823e2fc84"
                            }
                        ],
                        "killme": [
                            {
                                "visibility": "external",
                                "content": "function killme() external isSocketDeployFactory{ selfdestruct(payable(msg.sender));}",
                                "modifiers": [
                                    "isSocketDeployFactory"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SwapImplBase.isSocketDeployFactory",
                                        "SwapImplBase.selfdestruct"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "6bfeae689aae3f966c3858ae3ce8d128"
                            }
                        ],
                        "performAction": [
                            {
                                "visibility": "external",
                                "content": "function performAction( address fromToken, address toToken, uint256 amount, address receiverAddress, bytes32 metadata, bytes memory data ) external payable virtual returns (uint256);",
                                "modifiers": [
                                    "payable",
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "fromToken"
                                    },
                                    {
                                        "type": "address",
                                        "name": "toToken"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "address",
                                        "name": "receiverAddress"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "metadata"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "data"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": true,
                                "md5": "4be625a85f7ddf1363e101ad913d547e"
                            }
                        ],
                        "performActionWithIn": [
                            {
                                "visibility": "external",
                                "content": "function performActionWithIn( address fromToken, address toToken, uint256 amount, bytes32 metadata, bytes memory swapExtraData ) external payable virtual returns (uint256, address);",
                                "modifiers": [
                                    "payable",
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "fromToken"
                                    },
                                    {
                                        "type": "address",
                                        "name": "toToken"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "metadata"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "swapExtraData"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    },
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": true,
                                "md5": "0815f5eea419291d899b9b9aa6cea707"
                            }
                        ]
                    },
                    "modifiers": {
                        "isSocketGatewayOwner": {
                            "parameters": [],
                            "content": "modifier isSocketGatewayOwner(){ if (msg.sender != ISocketGateway(socketGateway).owner()){ revert OnlySocketGatewayOwner();} _;}",
                            "reads": [
                                [
                                    "socketGateway",
                                    "",
                                    "SwapImplBase"
                                ]
                            ],
                            "writes": [],
                            "external_calls": {
                                "__set__": true,
                                "values": [
                                    "SwapImplBase.ISocketGateway",
                                    "SwapImplBase.OnlySocketGatewayOwner"
                                ]
                            },
                            "md5": "6aa94456738d60c2daad284eb4ea5c71"
                        },
                        "isSocketDeployFactory": {
                            "parameters": [],
                            "content": "modifier isSocketDeployFactory(){ if (msg.sender != socketDeployFactory){ revert OnlySocketDeployer();} _;}",
                            "reads": [
                                [
                                    "socketDeployFactory",
                                    "",
                                    "SwapImplBase"
                                ]
                            ],
                            "writes": [],
                            "external_calls": {
                                "__set__": true,
                                "values": [
                                    "SwapImplBase.OnlySocketDeployer"
                                ]
                            },
                            "md5": "d15527a663ef4e0be07e4787f91e7eef"
                        }
                    },
                    "structs": {},
                    "events": {
                        "SocketSwapTokens": {
                            "event": "SocketSwapTokens",
                            "content": "SocketSwapTokens( address fromToken, address toToken, uint256 buyAmount, uint256 sellAmount, bytes32 routeName, address receiver, bytes32 metadata )"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "ERC20": "SafeTransferLib"
                    }
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "SwapImplBase.isSocketGatewayOwner": "6aa94456738d60c2daad284eb4ea5c71",
                "userAddress.transfer": "106c99c210292ba876e75685ad2beb0c",
                "SwapImplBase.isSocketDeployFactory": "d15527a663ef4e0be07e4787f91e7eef"
            },
            "md5": "170d0d1e963eddd3d7267a06a42c5661"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\swap\\oneinch\\OneInchImpl.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\swap\\oneinch\\OneInchImpl.sol",
            "filename": "OneInchImpl.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\utils\\SafeTransferLib.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "SafeTransferLib": {
                            "original_name": "SafeTransferLib",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\tokens\\ERC20.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "ERC20": {
                            "original_name": "ERC20",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\swap\\SwapImplBase.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\errors\\SocketErrors.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "SwapFailed": {
                            "original_name": "SwapFailed",
                            "type": {
                                "__CT__": true,
                                "value": 15
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\static\\RouteIdentifiers.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "ONEINCH": {
                            "original_name": "ONEINCH",
                            "type": {
                                "__CT__": true,
                                "value": 18
                            }
                        }
                    }
                }
            },
            "contracts": {
                "OneInchImpl": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "SwapImplBase"
                    ],
                    "state_variables": {
                        "OneInchIdentifier": {
                            "type": "bytes32",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "ONEINCH",
                            "content": "bytes32 public immutable OneInchIdentifier = ONEINCH;"
                        },
                        "ONEINCH_AGGREGATOR": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public immutable ONEINCH_AGGREGATOR;"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor ( address _oneinchAggregator, address _socketGateway, address _socketDeployFactory ) SwapImplBase(_socketGateway, _socketDeployFactory){ ONEINCH_AGGREGATOR = _oneinchAggregator;}",
                                "modifiers": [
                                    "SwapImplBase(_socketGateway, _socketDeployFactory)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_oneinchAggregator"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_socketGateway"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_socketDeployFactory"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "ONEINCH_AGGREGATOR",
                                        "",
                                        "OneInchImpl"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "ONEINCH_AGGREGATOR",
                                        "",
                                        "OneInchImpl"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "0b6f20fc475cd5a53b4e6cc25e190fde"
                            }
                        ],
                        "performAction": [
                            {
                                "visibility": "external",
                                "content": "function performAction( address fromToken, address toToken, uint256 amount, address receiverAddress, bytes32 metadata, bytes calldata swapExtraData ) external payable override returns (uint256){ uint256 returnAmount; if (fromToken != NATIVE_TOKEN_ADDRESS){ ERC20 token = ERC20(fromToken); token.safeTransferFrom(msg.sender, socketGateway, amount); token.safeApprove(ONEINCH_AGGREGATOR, amount);{ (bool success, bytes memory result) = ONEINCH_AGGREGATOR.call( swapExtraData ); token.safeApprove(ONEINCH_AGGREGATOR, 0); if (!success){ revert SwapFailed();} returnAmount = abi.decode(result, (uint256));}} else{ (bool success, bytes memory result) = ONEINCH_AGGREGATOR.call{ value: amount} (swapExtraData); if (!success){ revert SwapFailed();} returnAmount = abi.decode(result, (uint256));} emit SocketSwapTokens( fromToken, toToken, returnAmount, amount, OneInchIdentifier, receiverAddress, metadata ); return returnAmount;}",
                                "modifiers": [
                                    "payable",
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "fromToken"
                                    },
                                    {
                                        "type": "address",
                                        "name": "toToken"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "address",
                                        "name": "receiverAddress"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "metadata"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "swapExtraData"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "OneInchIdentifier",
                                        "",
                                        "OneInchImpl"
                                    ],
                                    [
                                        "ONEINCH_AGGREGATOR",
                                        "",
                                        "OneInchImpl"
                                    ],
                                    [
                                        "NATIVE_TOKEN_ADDRESS",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\swap\\SwapImplBase.sol",
                                        "SwapImplBase"
                                    ],
                                    [
                                        "socketGateway",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\swap\\SwapImplBase.sol",
                                        "SwapImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "OneInchImpl.SwapFailed",
                                        "OneInchImpl.ERC20",
                                        "ERC20.safeApprove",
                                        "ERC20.safeTransferFrom",
                                        "OneInchImpl.SocketSwapTokens",
                                        "ONEINCH_AGGREGATOR.call"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "beaad0df417805f4673b01eb62e417a0"
                            }
                        ],
                        "performActionWithIn": [
                            {
                                "visibility": "external",
                                "content": "function performActionWithIn( address fromToken, address toToken, uint256 amount, bytes32 metadata, bytes calldata swapExtraData ) external payable override returns (uint256, address){ uint256 returnAmount; if (fromToken != NATIVE_TOKEN_ADDRESS){ ERC20 token = ERC20(fromToken); token.safeTransferFrom(msg.sender, socketGateway, amount); token.safeApprove(ONEINCH_AGGREGATOR, amount);{ (bool success, bytes memory result) = ONEINCH_AGGREGATOR.call( swapExtraData ); token.safeApprove(ONEINCH_AGGREGATOR, 0); if (!success){ revert SwapFailed();} returnAmount = abi.decode(result, (uint256));}} else{ (bool success, bytes memory result) = ONEINCH_AGGREGATOR.call{ value: amount} (swapExtraData); if (!success){ revert SwapFailed();} returnAmount = abi.decode(result, (uint256));} emit SocketSwapTokens( fromToken, toToken, returnAmount, amount, OneInchIdentifier, socketGateway, metadata ); return (returnAmount, toToken);}",
                                "modifiers": [
                                    "payable",
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "fromToken"
                                    },
                                    {
                                        "type": "address",
                                        "name": "toToken"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "metadata"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "swapExtraData"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    },
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "OneInchIdentifier",
                                        "",
                                        "OneInchImpl"
                                    ],
                                    [
                                        "ONEINCH_AGGREGATOR",
                                        "",
                                        "OneInchImpl"
                                    ],
                                    [
                                        "NATIVE_TOKEN_ADDRESS",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\swap\\SwapImplBase.sol",
                                        "SwapImplBase"
                                    ],
                                    [
                                        "socketGateway",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\swap\\SwapImplBase.sol",
                                        "SwapImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "OneInchImpl.SwapFailed",
                                        "OneInchImpl.ERC20",
                                        "ERC20.safeApprove",
                                        "ERC20.safeTransferFrom",
                                        "OneInchImpl.SocketSwapTokens",
                                        "ONEINCH_AGGREGATOR.call"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "8fec3c24ad99ef748f887b5ff6fa17a4"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "ERC20": "SafeTransferLib"
                    }
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "ERC20.safeTransferFrom": "f59cf721ba6479ab2b5aa8ba2685eff0",
                "ERC20.safeApprove": "f339137c724d3793fd28f64cd9b5d9bb"
            },
            "md5": "34b0264faa30d847b8d57b1dc7d446cf"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\swap\\rainbow\\Rainbow.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\swap\\rainbow\\Rainbow.sol",
            "filename": "Rainbow.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\utils\\SafeTransferLib.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "SafeTransferLib": {
                            "original_name": "SafeTransferLib",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\tokens\\ERC20.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "ERC20": {
                            "original_name": "ERC20",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\swap\\SwapImplBase.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\errors\\SocketErrors.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "Address0Provided": {
                            "original_name": "Address0Provided",
                            "type": {
                                "__CT__": true,
                                "value": 15
                            }
                        },
                        "SwapFailed": {
                            "original_name": "SwapFailed",
                            "type": {
                                "__CT__": true,
                                "value": 15
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\static\\RouteIdentifiers.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "RAINBOW": {
                            "original_name": "RAINBOW",
                            "type": {
                                "__CT__": true,
                                "value": 18
                            }
                        }
                    }
                }
            },
            "contracts": {
                "RainbowSwapImpl": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "SwapImplBase"
                    ],
                    "state_variables": {
                        "RainbowIdentifier": {
                            "type": "bytes32",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "RAINBOW",
                            "content": "bytes32 public immutable RainbowIdentifier = RAINBOW;"
                        },
                        "NAME": {
                            "type": "bytes32",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "keccak256(\"Rainbow-Router\")",
                            "content": "bytes32 public immutable NAME = keccak256(\"Rainbow-Router\");"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor ( address _rainbowSwapAggregator, address _socketGateway, address _socketDeployFactory ) SwapImplBase(_socketGateway, _socketDeployFactory){ rainbowSwapAggregator = payable(_rainbowSwapAggregator);}",
                                "modifiers": [
                                    "SwapImplBase(_socketGateway, _socketDeployFactory)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_rainbowSwapAggregator"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_socketGateway"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_socketDeployFactory"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "349908481c277b55829fd7c85e15cb0c"
                            }
                        ],
                        "performAction": [
                            {
                                "visibility": "external",
                                "content": "function performAction( address fromToken, address toToken, uint256 amount, address receiverAddress, bytes32 metadata, bytes calldata swapExtraData ) external payable override returns (uint256){ if (fromToken == address(0)){ revert Address0Provided();} uint256 _initialBalanceTokenOut; uint256 _finalBalanceTokenOut; ERC20 toTokenERC20 = ERC20(toToken); if (toToken != NATIVE_TOKEN_ADDRESS){ _initialBalanceTokenOut = toTokenERC20.balanceOf(socketGateway);} else{ _initialBalanceTokenOut = address(this).balance;} if (fromToken != NATIVE_TOKEN_ADDRESS){ ERC20 token = ERC20(fromToken); token.safeTransferFrom(msg.sender, socketGateway, amount); token.safeApprove(rainbowSwapAggregator, amount); (bool success, ) = rainbowSwapAggregator.call(swapExtraData); if (!success){ revert SwapFailed();} token.safeApprove(rainbowSwapAggregator, 0);} else{ (bool success, ) = rainbowSwapAggregator.call{ value: amount} ( swapExtraData ); if (!success){ revert SwapFailed();}} if (toToken != NATIVE_TOKEN_ADDRESS){ _finalBalanceTokenOut = toTokenERC20.balanceOf(socketGateway);} else{ _finalBalanceTokenOut = address(this).balance;} uint256 returnAmount = _finalBalanceTokenOut - _initialBalanceTokenOut; if (toToken == NATIVE_TOKEN_ADDRESS){ payable(receiverAddress).transfer(returnAmount);} else{ toTokenERC20.transfer(receiverAddress, returnAmount);} emit SocketSwapTokens( fromToken, toToken, returnAmount, amount, RainbowIdentifier, receiverAddress, metadata ); return returnAmount;}",
                                "modifiers": [
                                    "payable",
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "fromToken"
                                    },
                                    {
                                        "type": "address",
                                        "name": "toToken"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "address",
                                        "name": "receiverAddress"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "metadata"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "swapExtraData"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "RainbowIdentifier",
                                        "",
                                        "RainbowSwapImpl"
                                    ],
                                    [
                                        "balanceOf",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\tokens\\ERC20.sol",
                                        "ERC20"
                                    ],
                                    [
                                        "NATIVE_TOKEN_ADDRESS",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\swap\\SwapImplBase.sol",
                                        "SwapImplBase"
                                    ],
                                    [
                                        "socketGateway",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\swap\\SwapImplBase.sol",
                                        "SwapImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20.transfer",
                                        "RainbowSwapImpl.Address0Provided",
                                        "RainbowSwapImpl.SwapFailed",
                                        "RainbowSwapImpl.ERC20",
                                        "ERC20.safeApprove",
                                        "ERC20.safeTransferFrom",
                                        "RainbowSwapImpl.SocketSwapTokens",
                                        "rainbowSwapAggregator.call",
                                        "ERC20.balanceOf"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "3b42b48777eea65567f0537e60f68010"
                            }
                        ],
                        "performActionWithIn": [
                            {
                                "visibility": "external",
                                "content": "function performActionWithIn( address fromToken, address toToken, uint256 amount, bytes32 metadata, bytes calldata swapExtraData ) external payable override returns (uint256, address){ if (fromToken == address(0)){ revert Address0Provided();} uint256 _initialBalanceTokenOut; uint256 _finalBalanceTokenOut; ERC20 toTokenERC20 = ERC20(toToken); if (toToken != NATIVE_TOKEN_ADDRESS){ _initialBalanceTokenOut = toTokenERC20.balanceOf(socketGateway);} else{ _initialBalanceTokenOut = address(this).balance;} if (fromToken != NATIVE_TOKEN_ADDRESS){ ERC20 token = ERC20(fromToken); token.safeTransferFrom(msg.sender, socketGateway, amount); token.safeApprove(rainbowSwapAggregator, amount); (bool success, ) = rainbowSwapAggregator.call(swapExtraData); if (!success){ revert SwapFailed();} token.safeApprove(rainbowSwapAggregator, 0);} else{ (bool success, ) = rainbowSwapAggregator.call{ value: amount} ( swapExtraData ); if (!success){ revert SwapFailed();}} if (toToken != NATIVE_TOKEN_ADDRESS){ _finalBalanceTokenOut = toTokenERC20.balanceOf(socketGateway);} else{ _finalBalanceTokenOut = address(this).balance;} uint256 returnAmount = _finalBalanceTokenOut - _initialBalanceTokenOut; emit SocketSwapTokens( fromToken, toToken, returnAmount, amount, RainbowIdentifier, socketGateway, metadata ); return (returnAmount, toToken);}",
                                "modifiers": [
                                    "payable",
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "fromToken"
                                    },
                                    {
                                        "type": "address",
                                        "name": "toToken"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "metadata"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "swapExtraData"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    },
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "RainbowIdentifier",
                                        "",
                                        "RainbowSwapImpl"
                                    ],
                                    [
                                        "balanceOf",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\tokens\\ERC20.sol",
                                        "ERC20"
                                    ],
                                    [
                                        "NATIVE_TOKEN_ADDRESS",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\swap\\SwapImplBase.sol",
                                        "SwapImplBase"
                                    ],
                                    [
                                        "socketGateway",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\swap\\SwapImplBase.sol",
                                        "SwapImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "RainbowSwapImpl.Address0Provided",
                                        "RainbowSwapImpl.SwapFailed",
                                        "RainbowSwapImpl.ERC20",
                                        "ERC20.safeApprove",
                                        "ERC20.safeTransferFrom",
                                        "RainbowSwapImpl.SocketSwapTokens",
                                        "rainbowSwapAggregator.call",
                                        "ERC20.balanceOf"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "1e53ccc7eae77f90e503f8bff1b1dd91"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "ERC20": "SafeTransferLib"
                    }
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "ERC20.safeTransferFrom": "f59cf721ba6479ab2b5aa8ba2685eff0",
                "ERC20.safeApprove": "f339137c724d3793fd28f64cd9b5d9bb",
                "ERC20.transfer": "106c99c210292ba876e75685ad2beb0c"
            },
            "md5": "4ed0ef49e926898d5319cc64d17d7d7e"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\swap\\wrappedTokenSwapper\\swapWrappedImpl.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\swap\\wrappedTokenSwapper\\swapWrappedImpl.sol",
            "filename": "swapWrappedImpl.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\tokens\\ERC20.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "ERC20": {
                            "original_name": "ERC20",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\swap\\SwapImplBase.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\errors\\SocketErrors.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "Address0Provided": {
                            "original_name": "Address0Provided",
                            "type": {
                                "__CT__": true,
                                "value": 15
                            }
                        },
                        "SwapFailed": {
                            "original_name": "SwapFailed",
                            "type": {
                                "__CT__": true,
                                "value": 15
                            }
                        },
                        "PartialSwapsNotAllowed": {
                            "original_name": "PartialSwapsNotAllowed",
                            "type": {
                                "__CT__": true,
                                "value": 15
                            }
                        }
                    }
                }
            },
            "contracts": {
                "WrappedToken": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "withdraw": [
                            {
                                "visibility": "external",
                                "content": "function withdraw(uint256 wad) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "wad"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "4e3312d95f94aa65b73c601a78d24fb2"
                            }
                        ],
                        "deposit": [
                            {
                                "visibility": "external",
                                "content": "function deposit() external payable;",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": true,
                                "md5": "4f2eec90abd519258d97a4283a54e2f1"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                },
                "WrappedTokenSwapperImpl": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "SwapImplBase"
                    ],
                    "state_variables": {
                        "Identifier": {
                            "type": "bytes32",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "\"wrappedTokenSwapperImpl\"",
                            "content": "bytes32 public immutable Identifier = \"wrappedTokenSwapperImpl\";"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor ( address _socketGateway, address _socketDeployFactory ) SwapImplBase(_socketGateway, _socketDeployFactory){}",
                                "modifiers": [
                                    "SwapImplBase(_socketGateway, _socketDeployFactory)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_socketGateway"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_socketDeployFactory"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "284098b95a5a57e3cdfd7ece75ec25db"
                            }
                        ],
                        "performAction": [
                            {
                                "visibility": "external",
                                "content": "function performAction( address fromToken, address toToken, uint256 amount, address receiverAddress, bytes32 metadata, bytes calldata swapExtraData ) external payable override returns (uint256){ uint256 _initialBalanceTokenOut; uint256 _finalBalanceTokenOut; if (fromToken == NATIVE_TOKEN_ADDRESS){ _initialBalanceTokenOut = ERC20(toToken).balanceOf(socketGateway); (bool success, ) = toToken.call{ value: amount} (swapExtraData); if (!success){ revert SwapFailed();} _finalBalanceTokenOut = ERC20(toToken).balanceOf(socketGateway); require( (_finalBalanceTokenOut - _initialBalanceTokenOut) == amount, \"Invalid wrapper contract \" ); ERC20(toToken).transfer(receiverAddress, amount);} else{ _initialBalanceTokenOut = address(socketGateway).balance; ERC20(fromToken).safeTransferFrom( msg.sender, socketGateway, amount ); (bool success, ) = fromToken.call(swapExtraData); if (!success){ revert SwapFailed();} _finalBalanceTokenOut = address(socketGateway).balance; require( (_finalBalanceTokenOut - _initialBalanceTokenOut) == amount, \"Invalid wrapper contract \" ); payable(receiverAddress).transfer(amount);} emit SocketSwapTokens( fromToken, toToken, amount, amount, Identifier, receiverAddress, metadata ); return amount;}",
                                "modifiers": [
                                    "payable",
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "fromToken"
                                    },
                                    {
                                        "type": "address",
                                        "name": "toToken"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "address",
                                        "name": "receiverAddress"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "metadata"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "swapExtraData"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "Identifier",
                                        "",
                                        "WrappedTokenSwapperImpl"
                                    ],
                                    [
                                        "balanceOf",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\tokens\\ERC20.sol",
                                        "ERC20"
                                    ],
                                    [
                                        "NATIVE_TOKEN_ADDRESS",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\swap\\SwapImplBase.sol",
                                        "SwapImplBase"
                                    ],
                                    [
                                        "socketGateway",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\swap\\SwapImplBase.sol",
                                        "SwapImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "WrappedTokenSwapperImpl.ERC20",
                                        "fromToken.call",
                                        "WrappedTokenSwapperImpl.SwapFailed",
                                        "WrappedTokenSwapperImpl.SocketSwapTokens"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "e14c93c6139e3e0cf03c537a2a035e77"
                            }
                        ],
                        "performActionWithIn": [
                            {
                                "visibility": "external",
                                "content": "function performActionWithIn( address fromToken, address toToken, uint256 amount, bytes32 metadata, bytes calldata swapExtraData ) external payable override returns (uint256, address){ uint256 _initialBalanceTokenOut; uint256 _finalBalanceTokenOut; if (fromToken == NATIVE_TOKEN_ADDRESS){ _initialBalanceTokenOut = ERC20(toToken).balanceOf(socketGateway); (bool success, ) = toToken.call{ value: amount} (swapExtraData); if (!success){ revert SwapFailed();} _finalBalanceTokenOut = ERC20(toToken).balanceOf(socketGateway); require( (_finalBalanceTokenOut - _initialBalanceTokenOut) == amount, \"Invalid wrapper contract \" );} else{ _initialBalanceTokenOut = address(socketGateway).balance; ERC20(fromToken).safeTransferFrom( msg.sender, socketGateway, amount ); (bool success, ) = fromToken.call(swapExtraData); if (!success){ revert SwapFailed();} _finalBalanceTokenOut = address(socketGateway).balance; require( (_finalBalanceTokenOut - _initialBalanceTokenOut) == amount, \"Invalid wrapper contract \" );} emit SocketSwapTokens( fromToken, toToken, _finalBalanceTokenOut - _initialBalanceTokenOut, amount, Identifier, socketGateway, metadata ); return (_finalBalanceTokenOut - _initialBalanceTokenOut, toToken);}",
                                "modifiers": [
                                    "payable",
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "fromToken"
                                    },
                                    {
                                        "type": "address",
                                        "name": "toToken"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "metadata"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "swapExtraData"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    },
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "Identifier",
                                        "",
                                        "WrappedTokenSwapperImpl"
                                    ],
                                    [
                                        "balanceOf",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\tokens\\ERC20.sol",
                                        "ERC20"
                                    ],
                                    [
                                        "NATIVE_TOKEN_ADDRESS",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\swap\\SwapImplBase.sol",
                                        "SwapImplBase"
                                    ],
                                    [
                                        "socketGateway",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\swap\\SwapImplBase.sol",
                                        "SwapImplBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "WrappedTokenSwapperImpl.ERC20",
                                        "fromToken.call",
                                        "WrappedTokenSwapperImpl.SwapFailed",
                                        "WrappedTokenSwapperImpl.SocketSwapTokens"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "f5c46c2f2aabbce0491ffa89c96e071c"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "ERC20": "SafeTransferLib"
                    }
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "004988ca9ae6769cc21d8b4a355bf5a7"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\swap\\zerox\\ZeroXSwapImpl.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\swap\\zerox\\ZeroXSwapImpl.sol",
            "filename": "ZeroXSwapImpl.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\utils\\SafeTransferLib.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "SafeTransferLib": {
                            "original_name": "SafeTransferLib",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\tokens\\ERC20.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "ERC20": {
                            "original_name": "ERC20",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\swap\\SwapImplBase.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\errors\\SocketErrors.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "Address0Provided": {
                            "original_name": "Address0Provided",
                            "type": {
                                "__CT__": true,
                                "value": 15
                            }
                        },
                        "SwapFailed": {
                            "original_name": "SwapFailed",
                            "type": {
                                "__CT__": true,
                                "value": 15
                            }
                        },
                        "PartialSwapsNotAllowed": {
                            "original_name": "PartialSwapsNotAllowed",
                            "type": {
                                "__CT__": true,
                                "value": 15
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\static\\RouteIdentifiers.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "ZEROX": {
                            "original_name": "ZEROX",
                            "type": {
                                "__CT__": true,
                                "value": 18
                            }
                        }
                    }
                }
            },
            "contracts": {
                "ZeroXSwapImpl": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "SwapImplBase"
                    ],
                    "state_variables": {
                        "ZeroXIdentifier": {
                            "type": "bytes32",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "ZEROX",
                            "content": "bytes32 public immutable ZeroXIdentifier = ZEROX;"
                        },
                        "NAME": {
                            "type": "bytes32",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "keccak256(\"Zerox-Router\")",
                            "content": "bytes32 public immutable NAME = keccak256(\"Zerox-Router\");"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor ( address _zeroXExchangeProxy, address _socketGateway, address _socketDeployFactory ) SwapImplBase(_socketGateway, _socketDeployFactory){ zeroXExchangeProxy = payable(_zeroXExchangeProxy);}",
                                "modifiers": [
                                    "SwapImplBase(_socketGateway, _socketDeployFactory)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_zeroXExchangeProxy"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_socketGateway"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_socketDeployFactory"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "9e269a4c2b40924f8b4cba28e19070b8"
                            }
                        ],
                        "performAction": [
                            {
                                "visibility": "external",
                                "content": "function performAction( address fromToken, address toToken, uint256 amount, address receiverAddress, bytes32 metadata, bytes calldata swapExtraData ) external payable override returns (uint256){ uint256 _initialBalanceTokenOut; uint256 _finalBalanceTokenOut; uint256 _initialBalanceTokenIn; uint256 _finalBalanceTokenIn; if (fromToken != NATIVE_TOKEN_ADDRESS){ ERC20(fromToken).safeTransferFrom( msg.sender, socketGateway, amount ); ERC20(fromToken).safeApprove(zeroXExchangeProxy, amount);} if (toToken != NATIVE_TOKEN_ADDRESS){ _initialBalanceTokenOut = ERC20(toToken).balanceOf(socketGateway);} else{ _initialBalanceTokenOut = address(this).balance;} if (fromToken != NATIVE_TOKEN_ADDRESS){ _initialBalanceTokenIn = ERC20(fromToken).balanceOf(socketGateway);} else{ _initialBalanceTokenIn = address(this).balance;} if (fromToken != NATIVE_TOKEN_ADDRESS){ (bool success, ) = zeroXExchangeProxy.call(swapExtraData); if (!success){ revert SwapFailed();}} else{ (bool success, ) = zeroXExchangeProxy.call{ value: amount} ( swapExtraData ); if (!success){ revert SwapFailed();}} if (fromToken != NATIVE_TOKEN_ADDRESS){ _finalBalanceTokenIn = ERC20(fromToken).balanceOf(socketGateway);} else{ _finalBalanceTokenIn = address(this).balance;} if (_finalBalanceTokenIn > _initialBalanceTokenIn - amount) revert PartialSwapsNotAllowed(); if (toToken != NATIVE_TOKEN_ADDRESS){ _finalBalanceTokenOut = ERC20(toToken).balanceOf(socketGateway);} else{ _finalBalanceTokenOut = address(this).balance;} uint256 returnAmount = _finalBalanceTokenOut - _initialBalanceTokenOut; if (toToken == NATIVE_TOKEN_ADDRESS){ payable(receiverAddress).transfer(returnAmount);} else{ ERC20(toToken).transfer(receiverAddress, returnAmount);} emit SocketSwapTokens( fromToken, toToken, returnAmount, amount, ZeroXIdentifier, receiverAddress, metadata ); return returnAmount;}",
                                "modifiers": [
                                    "payable",
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "fromToken"
                                    },
                                    {
                                        "type": "address",
                                        "name": "toToken"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "address",
                                        "name": "receiverAddress"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "metadata"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "swapExtraData"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "ZeroXIdentifier",
                                        "",
                                        "ZeroXSwapImpl"
                                    ],
                                    [
                                        "balanceOf",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\tokens\\ERC20.sol",
                                        "ERC20"
                                    ],
                                    [
                                        "NATIVE_TOKEN_ADDRESS",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\swap\\SwapImplBase.sol",
                                        "SwapImplBase"
                                    ],
                                    [
                                        "socketGateway",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\swap\\SwapImplBase.sol",
                                        "SwapImplBase"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "NATIVE_TOKEN_ADDRESS",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\swap\\SwapImplBase.sol",
                                        "SwapImplBase"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "zeroXExchangeProxy.call",
                                        "ZeroXSwapImpl.ERC20",
                                        "ZeroXSwapImpl.PartialSwapsNotAllowed",
                                        "ZeroXSwapImpl.SwapFailed",
                                        "ZeroXSwapImpl.SocketSwapTokens"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "8c965432a10b04210adc72b405cedb37"
                            }
                        ],
                        "performActionWithIn": [
                            {
                                "visibility": "external",
                                "content": "function performActionWithIn( address fromToken, address toToken, uint256 amount, bytes32 metadata, bytes calldata swapExtraData ) external payable override returns (uint256, address){ uint256 _initialBalanceTokenOut; uint256 _finalBalanceTokenOut; uint256 _initialBalanceTokenIn; uint256 _finalBalanceTokenIn; if (fromToken != NATIVE_TOKEN_ADDRESS){ ERC20(fromToken).safeTransferFrom( msg.sender, address(this), amount ); ERC20(fromToken).safeApprove(zeroXExchangeProxy, amount);} if (toToken != NATIVE_TOKEN_ADDRESS){ _initialBalanceTokenOut = ERC20(toToken).balanceOf(socketGateway);} else{ _initialBalanceTokenOut = address(this).balance;} if (fromToken != NATIVE_TOKEN_ADDRESS){ _initialBalanceTokenIn = ERC20(fromToken).balanceOf(socketGateway);} else{ _initialBalanceTokenIn = address(this).balance;} if (fromToken != NATIVE_TOKEN_ADDRESS){ (bool success, ) = zeroXExchangeProxy.call(swapExtraData); if (!success){ revert SwapFailed();}} else{ (bool success, ) = zeroXExchangeProxy.call{ value: amount} ( swapExtraData ); if (!success){ revert SwapFailed();}} if (fromToken != NATIVE_TOKEN_ADDRESS){ _finalBalanceTokenIn = ERC20(fromToken).balanceOf(socketGateway);} else{ _finalBalanceTokenIn = address(this).balance;} if (_finalBalanceTokenIn > _initialBalanceTokenIn - amount) revert PartialSwapsNotAllowed(); if (toToken != NATIVE_TOKEN_ADDRESS){ _finalBalanceTokenOut = ERC20(toToken).balanceOf(socketGateway);} else{ _finalBalanceTokenOut = address(this).balance;} emit SocketSwapTokens( fromToken, toToken, _finalBalanceTokenOut - _initialBalanceTokenOut, amount, ZeroXIdentifier, socketGateway, metadata ); return (_finalBalanceTokenOut - _initialBalanceTokenOut, toToken);}",
                                "modifiers": [
                                    "payable",
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "fromToken"
                                    },
                                    {
                                        "type": "address",
                                        "name": "toToken"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "metadata"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "swapExtraData"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    },
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "ZeroXIdentifier",
                                        "",
                                        "ZeroXSwapImpl"
                                    ],
                                    [
                                        "balanceOf",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\lib\\solmate\\src\\tokens\\ERC20.sol",
                                        "ERC20"
                                    ],
                                    [
                                        "NATIVE_TOKEN_ADDRESS",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\swap\\SwapImplBase.sol",
                                        "SwapImplBase"
                                    ],
                                    [
                                        "socketGateway",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\swap\\SwapImplBase.sol",
                                        "SwapImplBase"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "NATIVE_TOKEN_ADDRESS",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\SocketGateway20240117\\WrappedTokenSwapperImpl\\src\\swap\\SwapImplBase.sol",
                                        "SwapImplBase"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "zeroXExchangeProxy.call",
                                        "ZeroXSwapImpl.ERC20",
                                        "ZeroXSwapImpl.PartialSwapsNotAllowed",
                                        "ZeroXSwapImpl.SwapFailed",
                                        "ZeroXSwapImpl.SocketSwapTokens"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "5a60f7f07ed1b02c18f9e5aceab33c5f"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "ERC20": "SafeTransferLib"
                    }
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "2419ae3fee583db3422a8c35d5ab06a1"
        }
    },
    "handled_md5": {
        "__set__": true,
        "values": [
            "923b928547690edb3ed52a49197d437d",
            "cd41ae28af6a89fc8f070528265846df",
            "a65ea1856fafc13019767362583628bc",
            "9a43a76a597a080202b8f010ed7ec26a",
            "fef90953f440fa547df9058ff6e59c2e",
            "71268c01ad15167a6015e770e0f83f70",
            "b059ed295b9323ba42e78d6d828d4ce4",
            "cce93a483428898404c2090ee44a90b0",
            "c680f27470431cfd537ebbb4467c403e",
            "f362531d6c831ec3b3a384457edf50b7",
            "4e90b39b30531916c8d3436920aa00b4",
            "1de3c635cfb83c56839edb94565145fd",
            "952ad782c18e1ed0f409621bc53dcb5f",
            "4e91c97963635a7751a935018bf8029d",
            "7d5bb366798f25ca4f0328ee8ed29985",
            "03973cc03e3d762599165d974808b8ea",
            "b6660d55c5ffa3b0860617b27a5d4bfa",
            "efb48e165d9aaf710a5e8da001a4c83d",
            "b53d91df1bf3bf7b1c48644cdba90897",
            "ac63bb956489ea237ed2cf04428a2c98",
            "f8b94d8f86e4984716f463cafc980cff",
            "9c2dc5f061d17290ca06081d29fdc3bb",
            "1cd01e807c1dfbe30f6713e64ad3c195",
            "e1c8b85d1ca15d79b2760eb858f78cdb",
            "ba65e99d6cb79315a5ef8d55e4c2b676",
            "d60af4bffac9a1f0a7c79027e65a1d5e",
            "408a647092fe8bddd17bab2abe71f438",
            "2461e0cee7401c6e64a9d062b4a9acfd",
            "d9d387544b97d3a1277f9ce3566ffc49",
            "e8cbf7ac30bfd0d086efe9afd5fe86f7",
            "9c4eed68351b2af9964e2cb2ad4d92bf",
            "1b77f77fe9f934e36f70718cdd165f9f",
            "2419ae3fee583db3422a8c35d5ab06a1",
            "0c22e6f87b5de71d4c819d1b432b3595",
            "950101e177e44b6cc862939655e058d9",
            "004988ca9ae6769cc21d8b4a355bf5a7",
            "da1902d824466425d49bad1d112a5b6a",
            "e7cb60352f5ce8cf9312bbdaab8f21d9",
            "a37319f9fe17c2b4f743fd646c94c844",
            "f33ba7a32578a05b9f13a6c62d463891",
            "0db8490470d481cd4bdc088eaf3a42f5",
            "6f887299a376138ab23bfe7b86133ea5",
            "91ac56589d48e194f65583a618d3c295",
            "82990743d67965707945595dbf487d2b",
            "9e6388adaad762faec8cb1319264ba0a",
            "32f51986f1bb2e7ce96ddd14d4ef0db4",
            "4ed0ef49e926898d5319cc64d17d7d7e",
            "e0fbc527acc919e1726dc00b3cdc47f5",
            "103184f5663fed2d546da1769ddc3277",
            "cca75af967c7d3307a98949d584b61e7",
            "6c550b1775e735ee65f1dbb1152e7cf7",
            "34b0264faa30d847b8d57b1dc7d446cf",
            "f8c1c4aef82653b6637ef7237ad97937",
            "cb1124e4d117f5cd068cc4855eaf0af5",
            "649aeb08ffc48b55c7edbe3f7f864a12",
            "8f1c29e2dedd1645ceb6e16db0fe10e0",
            "ebbe136310d818266427538ef6ed194b",
            "3edc39bf1f0ff01a960f6b54d9f2a17a",
            "60d5b7fe514496a467ebc8f90990c132",
            "58b1888114f4a8e3757058b9385a611e",
            "b7c49df9161bc8178536fbec6a626c47",
            "170d0d1e963eddd3d7267a06a42c5661",
            "ca2071b23ec58f081889f11adcd29d4e",
            "356b593dad4849eb7b8824289cf0a4c0",
            "35236b7e861dc9b01d577fdb075b9604",
            "553d74fdf8aee73b0de2e8c7ff56f6d1",
            "3cfa83029d08381ea29d178fb86ab0b7",
            "ff8ddb5688624144f358e2d12d86f966",
            "5cc5e2a141dac8ee6c43ea4ea3f61de2",
            "192a4f1e78350486ba379761b683d8c2"
        ]
    }
}