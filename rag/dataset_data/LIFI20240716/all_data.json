{
    "solidity_file": {
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20240716\\GasZipFacet\\lib\\openzeppelin-contracts\\contracts\\token\\ERC20\\IERC20.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20240716\\GasZipFacet\\lib\\openzeppelin-contracts\\contracts\\token\\ERC20\\IERC20.sol",
            "filename": "IERC20.sol",
            "imported_contracts": {},
            "contracts": {
                "IERC20": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "totalSupply": [
                            {
                                "visibility": "external",
                                "content": "function totalSupply() external view returns (uint256);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "5e1d12e61f4bf4b37161d9b684742570"
                            }
                        ],
                        "balanceOf": [
                            {
                                "visibility": "external",
                                "content": "function balanceOf(address account) external view returns (uint256);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "account"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "3ac17e7782366957c960d337a4a648cd"
                            }
                        ],
                        "transfer": [
                            {
                                "visibility": "external",
                                "content": "function transfer(address to, uint256 amount) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "f4ffe0b79c8a4a1a9720675d3ac08278"
                            }
                        ],
                        "allowance": [
                            {
                                "visibility": "external",
                                "content": "function allowance(address owner, address spender) external view returns (uint256);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "owner"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c93791d09d789aed33b9725d482af442"
                            }
                        ],
                        "approve": [
                            {
                                "visibility": "external",
                                "content": "function approve(address spender, uint256 amount) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "7c80d707df648dc123a10c69a1150edc"
                            }
                        ],
                        "transferFrom": [
                            {
                                "visibility": "external",
                                "content": "function transferFrom(address from, address to, uint256 amount) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "41ffc2d23781a31f4ec618cbb7e83420"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {
                        "Transfer": {
                            "event": "Transfer",
                            "content": "Transfer(address indexed from, address indexed to, uint256 value)"
                        },
                        "Approval": {
                            "event": "Approval",
                            "content": "Approval(address indexed owner, address indexed spender, uint256 value)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "d9796ff88e818f07072c01a0ca56e158"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20240716\\GasZipFacet\\lib\\openzeppelin-contracts\\contracts\\token\\ERC20\\extensions\\IERC20Permit.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20240716\\GasZipFacet\\lib\\openzeppelin-contracts\\contracts\\token\\ERC20\\extensions\\IERC20Permit.sol",
            "filename": "IERC20Permit.sol",
            "imported_contracts": {},
            "contracts": {
                "IERC20Permit": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "permit": [
                            {
                                "visibility": "external",
                                "content": "function permit( address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s ) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "owner"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "deadline"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "v"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "r"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "s"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "abaa7b8952c208d58b77455671572ce3"
                            }
                        ],
                        "nonces": [
                            {
                                "visibility": "external",
                                "content": "function nonces(address owner) external view returns (uint256);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "owner"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "357d86867bcb5e898ef823b379affee2"
                            }
                        ],
                        "DOMAIN_SEPARATOR": [
                            {
                                "visibility": "external",
                                "content": "function DOMAIN_SEPARATOR() external view returns (bytes32);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "0a5129288a98701e3042bb219b8117b2"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "6ae3cb0bfea33a161b04e94f2e82c4b1"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20240716\\GasZipFacet\\lib\\openzeppelin-contracts\\contracts\\utils\\Address.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20240716\\GasZipFacet\\lib\\openzeppelin-contracts\\contracts\\utils\\Address.sol",
            "filename": "Address.sol",
            "imported_contracts": {},
            "contracts": {
                "Address": {
                    "type": {
                        "__CT__": true,
                        "value": 2
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "isContract": [
                            {
                                "visibility": "internal",
                                "content": "function isContract(address account) internal view returns (bool){ return account.code.length > 0;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "account"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "d5972f1432570efe297b754cd2693d6f"
                            }
                        ],
                        "sendValue": [
                            {
                                "visibility": "internal",
                                "content": "function sendValue(address payable recipient, uint256 amount) internal{ require(address(this).balance >= amount, \"Address: insufficient balance\"); (bool success, ) = recipient.call{ value: amount} (\"\"); require(success, \"Address: unable to send value, recipient may have reverted\");}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address payable",
                                        "name": "recipient"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "4213f1701c2999f67f11de98a51e01f6"
                            }
                        ],
                        "functionCall": [
                            {
                                "visibility": "internal",
                                "content": "function functionCall(address target, bytes memory data) internal returns (bytes memory){ return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "target"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "data"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Address.functionCallWithValue"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "270e14dfa6c4d340344714fd6a36fd00"
                            },
                            {
                                "visibility": "internal",
                                "content": "function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory){ return functionCallWithValue(target, data, 0, errorMessage);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "target"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "data"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "errorMessage"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Address.functionCallWithValue"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "3deb235bd39105633ff4aa02a367005e"
                            }
                        ],
                        "functionCallWithValue": [
                            {
                                "visibility": "internal",
                                "content": "function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory){ return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "target"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "data"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Address.functionCallWithValue",
                                        "Address.verifyCallResultFromTarget"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "9587564662cef65eec554844bed6f202"
                            },
                            {
                                "visibility": "internal",
                                "content": "function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory){ require(address(this).balance >= value, \"Address: insufficient balance for call\"); (bool success, bytes memory returndata) = target.call{ value: value} (data); return verifyCallResultFromTarget(target, success, returndata, errorMessage);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "target"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "data"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "errorMessage"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Address.functionCallWithValue",
                                        "Address.verifyCallResultFromTarget"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "415fb10c2d7ae7d060a260635249aa7d"
                            }
                        ],
                        "functionStaticCall": [
                            {
                                "visibility": "internal",
                                "content": "function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory){ return functionStaticCall(target, data, \"Address: low-level static call failed\");}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "target"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "data"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Address.functionStaticCall",
                                        "target.staticcall",
                                        "Address.verifyCallResultFromTarget"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "994685aae3cda8dbbf0ffec7f803d344"
                            },
                            {
                                "visibility": "internal",
                                "content": "function functionStaticCall( address target, bytes memory data, string memory errorMessage ) internal view returns (bytes memory){ (bool success, bytes memory returndata) = target.staticcall(data); return verifyCallResultFromTarget(target, success, returndata, errorMessage);}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "target"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "data"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "errorMessage"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Address.functionStaticCall",
                                        "target.staticcall",
                                        "Address.verifyCallResultFromTarget"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "bf41c57fa7b52bd9c9ca315357eacff8"
                            }
                        ],
                        "functionDelegateCall": [
                            {
                                "visibility": "internal",
                                "content": "function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory){ return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "target"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "data"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "target.delegatecall",
                                        "Address.verifyCallResultFromTarget",
                                        "Address.functionDelegateCall"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "219660ec0d55ecb352a5cec40b996f90"
                            },
                            {
                                "visibility": "internal",
                                "content": "function functionDelegateCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory){ (bool success, bytes memory returndata) = target.delegatecall(data); return verifyCallResultFromTarget(target, success, returndata, errorMessage);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "target"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "data"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "errorMessage"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "target.delegatecall",
                                        "Address.verifyCallResultFromTarget",
                                        "Address.functionDelegateCall"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "701d9cff42a9c0251737fde00a72ac47"
                            }
                        ],
                        "verifyCallResultFromTarget": [
                            {
                                "visibility": "internal",
                                "content": "function verifyCallResultFromTarget( address target, bool success, bytes memory returndata, string memory errorMessage ) internal view returns (bytes memory){ if (success){ if (returndata.length == 0){ require(isContract(target), \"Address: call to non- contract \");} return returndata;} else{ _revert(returndata, errorMessage);}}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "target"
                                    },
                                    {
                                        "type": "bool",
                                        "name": "success"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "returndata"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "errorMessage"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Address._revert",
                                        "Address.isContract"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "970cb86012633b951e216a6e31e36148"
                            }
                        ],
                        "verifyCallResult": [
                            {
                                "visibility": "internal",
                                "content": "function verifyCallResult( bool success, bytes memory returndata, string memory errorMessage ) internal pure returns (bytes memory){ if (success){ return returndata;} else{ _revert(returndata, errorMessage);}}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bool",
                                        "name": "success"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "returndata"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "errorMessage"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Address._revert"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "daaf718a17d848032c9640555f62540a"
                            }
                        ],
                        "_revert": [
                            {
                                "visibility": "private",
                                "content": "function _revert(bytes memory returndata, string memory errorMessage) private pure{ if (returndata.length > 0){ assembly{ let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size)}} else{ revert(errorMessage);}}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "returndata"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "errorMessage"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "8bb1093039f962e441f6f911e07a815f"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "Address.functionCallWithValue": "9587564662cef65eec554844bed6f202",
                "Address.verifyCallResultFromTarget": "970cb86012633b951e216a6e31e36148",
                "Address.functionStaticCall": "994685aae3cda8dbbf0ffec7f803d344",
                "Address.functionDelegateCall": "219660ec0d55ecb352a5cec40b996f90",
                "Address._revert": "8bb1093039f962e441f6f911e07a815f",
                "Address.isContract": "d5972f1432570efe297b754cd2693d6f"
            },
            "md5": "6139cc76125075177db902b8ee30914c"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20240716\\GasZipFacet\\lib\\openzeppelin-contracts\\contracts\\token\\ERC20\\utils\\SafeERC20.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20240716\\GasZipFacet\\lib\\openzeppelin-contracts\\contracts\\token\\ERC20\\utils\\SafeERC20.sol",
            "filename": "SafeERC20.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20240716\\GasZipFacet\\lib\\openzeppelin-contracts\\contracts\\token\\ERC20\\IERC20.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20240716\\GasZipFacet\\lib\\openzeppelin-contracts\\contracts\\token\\ERC20\\extensions\\IERC20Permit.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20240716\\GasZipFacet\\lib\\openzeppelin-contracts\\contracts\\utils\\Address.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "SafeERC20": {
                    "type": {
                        "__CT__": true,
                        "value": 2
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "safeTransfer": [
                            {
                                "visibility": "internal",
                                "content": "function safeTransfer(IERC20 token, address to, uint256 value) internal{ _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "IERC20",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SafeERC20._callOptionalReturn"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "eea4fa7146b01518dc938446227eee77"
                            }
                        ],
                        "safeTransferFrom": [
                            {
                                "visibility": "internal",
                                "content": "function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal{ _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "IERC20",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SafeERC20._callOptionalReturn"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "6d0886ab47ccffec354b109fb2e8de81"
                            }
                        ],
                        "safeApprove": [
                            {
                                "visibility": "internal",
                                "content": "function safeApprove(IERC20 token, address spender, uint256 value) internal{ require( (value == 0) || (token.allowance(address(this), spender) == 0), \"SafeERC20: approve from non-zero to non-zero allowance\" ); _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "IERC20",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "IERC20.allowance",
                                        "SafeERC20._callOptionalReturn"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "ab540675767ea7e50c2697d6cc9c103d"
                            }
                        ],
                        "safeIncreaseAllowance": [
                            {
                                "visibility": "internal",
                                "content": "function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal{ uint256 oldAllowance = token.allowance(address(this), spender); _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "IERC20",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "IERC20.allowance",
                                        "SafeERC20._callOptionalReturn"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "f2f76aeb2e233b4851d735ed58f46f9a"
                            }
                        ],
                        "safeDecreaseAllowance": [
                            {
                                "visibility": "internal",
                                "content": "function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal{ unchecked{ uint256 oldAllowance = token.allowance(address(this), spender); require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\"); _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "IERC20",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "IERC20.allowance",
                                        "SafeERC20._callOptionalReturn"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "b63f4674d988f9c3f23fb9e74791be20"
                            }
                        ],
                        "forceApprove": [
                            {
                                "visibility": "internal",
                                "content": "function forceApprove(IERC20 token, address spender, uint256 value) internal{ bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value); if (!_callOptionalReturnBool(token, approvalCall)){ _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0)); _callOptionalReturn(token, approvalCall);}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "IERC20",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SafeERC20._callOptionalReturn",
                                        "SafeERC20._callOptionalReturnBool"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "871977c2683a997238920751224412b9"
                            }
                        ],
                        "safePermit": [
                            {
                                "visibility": "internal",
                                "content": "function safePermit( IERC20Permit token, address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s ) internal{ uint256 nonceBefore = token.nonces(owner); token.permit(owner, spender, value, deadline, v, r, s); uint256 nonceAfter = token.nonces(owner); require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "IERC20Permit",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "owner"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "deadline"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "v"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "r"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "s"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "IERC20Permit.permit",
                                        "IERC20Permit.nonces"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "0140feae353e3ccf05432f452224abe7"
                            }
                        ],
                        "_callOptionalReturn": [
                            {
                                "visibility": "private",
                                "content": "function _callOptionalReturn(IERC20 token, bytes memory data) private{ bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\"); require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "IERC20",
                                        "name": "token"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "data"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "IERC20.functionCall"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "bdd34585f40e945e74a5da840da04af7"
                            }
                        ],
                        "_callOptionalReturnBool": [
                            {
                                "visibility": "private",
                                "content": "function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool){ (bool success, bytes memory returndata) = address(token).call(data); return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "IERC20",
                                        "name": "token"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "data"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Address.isContract",
                                        "IERC20.data"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "7b80b777cc2c5ef9041191ffbd01f034"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "address": "Address"
                    }
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "SafeERC20._callOptionalReturn": "bdd34585f40e945e74a5da840da04af7",
                "IERC20.allowance": "c93791d09d789aed33b9725d482af442",
                "SafeERC20._callOptionalReturnBool": "7b80b777cc2c5ef9041191ffbd01f034",
                "IERC20Permit.nonces": "357d86867bcb5e898ef823b379affee2",
                "IERC20Permit.permit": "abaa7b8952c208d58b77455671572ce3",
                "IERC20.functionCall": "270e14dfa6c4d340344714fd6a36fd00",
                "Address.isContract": "d5972f1432570efe297b754cd2693d6f"
            },
            "md5": "81dbccc1c4c22369d5d81fff866feef4"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20240716\\GasZipFacet\\lib\\solady\\src\\tokens\\ERC20.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20240716\\GasZipFacet\\lib\\solady\\src\\tokens\\ERC20.sol",
            "filename": "ERC20.sol",
            "imported_contracts": {},
            "contracts": {
                "ERC20": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": true,
                    "inherits": [],
                    "state_variables": {
                        "_TRANSFER_EVENT_SIGNATURE": {
                            "type": "uint256",
                            "visibility": "private",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
                            "content": "uint256 private constant _TRANSFER_EVENT_SIGNATURE = 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;"
                        },
                        "_APPROVAL_EVENT_SIGNATURE": {
                            "type": "uint256",
                            "visibility": "private",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
                            "content": "uint256 private constant _APPROVAL_EVENT_SIGNATURE = 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925;"
                        },
                        "_TOTAL_SUPPLY_SLOT": {
                            "type": "uint256",
                            "visibility": "private",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "0x05345cdf77eb68f44c",
                            "content": "uint256 private constant _TOTAL_SUPPLY_SLOT = 0x05345cdf77eb68f44c;"
                        },
                        "_BALANCE_SLOT_SEED": {
                            "type": "uint256",
                            "visibility": "private",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "0x87a211a2",
                            "content": "uint256 private constant _BALANCE_SLOT_SEED = 0x87a211a2;"
                        },
                        "_ALLOWANCE_SLOT_SEED": {
                            "type": "uint256",
                            "visibility": "private",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "0x7f5e9f20",
                            "content": "uint256 private constant _ALLOWANCE_SLOT_SEED = 0x7f5e9f20;"
                        },
                        "_NONCES_SLOT_SEED": {
                            "type": "uint256",
                            "visibility": "private",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "0x38377508",
                            "content": "uint256 private constant _NONCES_SLOT_SEED = 0x38377508;"
                        },
                        "_NONCES_SLOT_SEED_WITH_SIGNATURE_PREFIX": {
                            "type": "uint256",
                            "visibility": "private",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "0x383775081901",
                            "content": "uint256 private constant _NONCES_SLOT_SEED_WITH_SIGNATURE_PREFIX = 0x383775081901;"
                        },
                        "_DOMAIN_TYPEHASH": {
                            "type": "bytes32",
                            "visibility": "private",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f",
                            "content": "bytes32 private constant _DOMAIN_TYPEHASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;"
                        },
                        "_VERSION_HASH": {
                            "type": "bytes32",
                            "visibility": "private",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "0xc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6",
                            "content": "bytes32 private constant _VERSION_HASH = 0xc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6;"
                        },
                        "_PERMIT_TYPEHASH": {
                            "type": "bytes32",
                            "visibility": "private",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9",
                            "content": "bytes32 private constant _PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;"
                        }
                    },
                    "functions": {
                        "name": [
                            {
                                "visibility": "public",
                                "content": "function name() public view virtual returns (string memory);",
                                "modifiers": [
                                    "view",
                                    "virtual"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "string memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "7aa24f057d8dbb4d2afa474b890c8715"
                            }
                        ],
                        "symbol": [
                            {
                                "visibility": "public",
                                "content": "function symbol() public view virtual returns (string memory);",
                                "modifiers": [
                                    "view",
                                    "virtual"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "string memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "a8ec8d8e21c2133e172c9524ee027dfd"
                            }
                        ],
                        "decimals": [
                            {
                                "visibility": "public",
                                "content": "function decimals() public view virtual returns (uint8){ return 18;}",
                                "modifiers": [
                                    "view",
                                    "virtual"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint8",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "5227c34c80f9f66dbe3778d69c727e45"
                            }
                        ],
                        "totalSupply": [
                            {
                                "visibility": "public",
                                "content": "function totalSupply() public view virtual returns (uint256 result){ assembly{ result := sload(_TOTAL_SUPPLY_SLOT)}}",
                                "modifiers": [
                                    "view",
                                    "virtual"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": "result"
                                    }
                                ],
                                "reads": [
                                    [
                                        "_TOTAL_SUPPLY_SLOT",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "2ab1960c022f802da5607aea1cd78a5e"
                            }
                        ],
                        "balanceOf": [
                            {
                                "visibility": "public",
                                "content": "function balanceOf(address owner) public view virtual returns (uint256 result){ assembly{ mstore(0x0c, _BALANCE_SLOT_SEED) mstore(0x00, owner) result := sload(keccak256(0x0c, 0x20))}}",
                                "modifiers": [
                                    "view",
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "owner"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": "result"
                                    }
                                ],
                                "reads": [
                                    [
                                        "_BALANCE_SLOT_SEED",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "5019aac6a150418847f0cfbbff21a82c"
                            }
                        ],
                        "allowance": [
                            {
                                "visibility": "public",
                                "content": "function allowance(address owner, address spender) public view virtual returns (uint256 result){ assembly{ mstore(0x20, spender) mstore(0x0c, _ALLOWANCE_SLOT_SEED) mstore(0x00, owner) result := sload(keccak256(0x0c, 0x34))}}",
                                "modifiers": [
                                    "view",
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "owner"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": "result"
                                    }
                                ],
                                "reads": [
                                    [
                                        "_ALLOWANCE_SLOT_SEED",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "f1c63b83f7944635010615216e191134"
                            }
                        ],
                        "approve": [
                            {
                                "visibility": "public",
                                "content": "function approve(address spender, uint256 amount) public virtual returns (bool){ assembly{ mstore(0x20, spender) mstore(0x0c, _ALLOWANCE_SLOT_SEED) mstore(0x00, caller()) sstore(keccak256(0x0c, 0x34), amount) mstore(0x00, amount) log3(0x00, 0x20, _APPROVAL_EVENT_SIGNATURE, caller(), shr(96, mload(0x2c)))} return true;}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_APPROVAL_EVENT_SIGNATURE",
                                        "",
                                        "ERC20"
                                    ],
                                    [
                                        "_ALLOWANCE_SLOT_SEED",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "4b1fe8544e160414002843af291d5dcd"
                            }
                        ],
                        "transfer": [
                            {
                                "visibility": "public",
                                "content": "function transfer(address to, uint256 amount) public virtual returns (bool){ _beforeTokenTransfer(msg.sender, to, amount); assembly{ mstore(0x0c, _BALANCE_SLOT_SEED) mstore(0x00, caller()) let fromBalanceSlot := keccak256(0x0c, 0x20) let fromBalance := sload(fromBalanceSlot) if gt(amount, fromBalance){ mstore(0x00, 0xf4d678b8) revert(0x1c, 0x04)} sstore(fromBalanceSlot, sub(fromBalance, amount)) mstore(0x00, to) let toBalanceSlot := keccak256(0x0c, 0x20) sstore(toBalanceSlot, add(sload(toBalanceSlot), amount)) mstore(0x20, amount) log3(0x20, 0x20, _TRANSFER_EVENT_SIGNATURE, caller(), shr(96, mload(0x0c)))} _afterTokenTransfer(msg.sender, to, amount); return true;}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_TRANSFER_EVENT_SIGNATURE",
                                        "",
                                        "ERC20"
                                    ],
                                    [
                                        "_BALANCE_SLOT_SEED",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20._afterTokenTransfer",
                                        "ERC20._beforeTokenTransfer"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "c26537e0e1e3846488195345fb003c74"
                            }
                        ],
                        "transferFrom": [
                            {
                                "visibility": "public",
                                "content": "function transferFrom(address from, address to, uint256 amount) public virtual returns (bool){ _beforeTokenTransfer(from, to, amount); assembly{ let from_ := shl(96, from) mstore(0x20, caller()) mstore(0x0c, or(from_, _ALLOWANCE_SLOT_SEED)) let allowanceSlot := keccak256(0x0c, 0x34) let allowance_ := sload(allowanceSlot) if add(allowance_, 1){ if gt(amount, allowance_){ mstore(0x00, 0x13be252b) revert(0x1c, 0x04)} sstore(allowanceSlot, sub(allowance_, amount))} mstore(0x0c, or(from_, _BALANCE_SLOT_SEED)) let fromBalanceSlot := keccak256(0x0c, 0x20) let fromBalance := sload(fromBalanceSlot) if gt(amount, fromBalance){ mstore(0x00, 0xf4d678b8) revert(0x1c, 0x04)} sstore(fromBalanceSlot, sub(fromBalance, amount)) mstore(0x00, to) let toBalanceSlot := keccak256(0x0c, 0x20) sstore(toBalanceSlot, add(sload(toBalanceSlot), amount)) mstore(0x20, amount) log3(0x20, 0x20, _TRANSFER_EVENT_SIGNATURE, shr(96, from_), shr(96, mload(0x0c)))} _afterTokenTransfer(from, to, amount); return true;}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_TRANSFER_EVENT_SIGNATURE",
                                        "",
                                        "ERC20"
                                    ],
                                    [
                                        "_BALANCE_SLOT_SEED",
                                        "",
                                        "ERC20"
                                    ],
                                    [
                                        "_ALLOWANCE_SLOT_SEED",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20._afterTokenTransfer",
                                        "ERC20._beforeTokenTransfer"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "44a6fca12fe5b433498e5e703871509b"
                            }
                        ],
                        "_constantNameHash": [
                            {
                                "visibility": "internal",
                                "content": "function _constantNameHash() internal view virtual returns (bytes32 result){}",
                                "modifiers": [
                                    "view",
                                    "virtual"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": "result"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "527af7595650a9af034b5701cd7de76f"
                            }
                        ],
                        "nonces": [
                            {
                                "visibility": "public",
                                "content": "function nonces(address owner) public view virtual returns (uint256 result){ assembly{ mstore(0x0c, _NONCES_SLOT_SEED) mstore(0x00, owner) result := sload(keccak256(0x0c, 0x20))}}",
                                "modifiers": [
                                    "view",
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "owner"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": "result"
                                    }
                                ],
                                "reads": [
                                    [
                                        "_NONCES_SLOT_SEED",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "2bad72ea88619a2a528dd19c5d8280f3"
                            }
                        ],
                        "permit": [
                            {
                                "visibility": "public",
                                "content": "function permit( address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s ) public virtual{ bytes32 nameHash = _constantNameHash(); if (nameHash == bytes32(0)) nameHash = keccak256(bytes(name())); assembly{ if gt(timestamp(), deadline){ mstore(0x00, 0x1a15a3cc) revert(0x1c, 0x04)} let m := mload(0x40) owner := shr(96, shl(96, owner)) spender := shr(96, shl(96, spender)) mstore(0x0e, _NONCES_SLOT_SEED_WITH_SIGNATURE_PREFIX) mstore(0x00, owner) let nonceSlot := keccak256(0x0c, 0x20) let nonceValue := sload(nonceSlot) mstore(m, _DOMAIN_TYPEHASH) mstore(add(m, 0x20), nameHash) mstore(add(m, 0x40), _VERSION_HASH) mstore(add(m, 0x60), chainid()) mstore(add(m, 0x80), address()) mstore(0x2e, keccak256(m, 0xa0)) mstore(m, _PERMIT_TYPEHASH) mstore(add(m, 0x20), owner) mstore(add(m, 0x40), spender) mstore(add(m, 0x60), value) mstore(add(m, 0x80), nonceValue) mstore(add(m, 0xa0), deadline) mstore(0x4e, keccak256(m, 0xc0)) mstore(0x00, keccak256(0x2c, 0x42)) mstore(0x20, and(0xff, v)) mstore(0x40, r) mstore(0x60, s) let t := staticcall(gas(), 1, 0, 0x80, 0x20, 0x20) if iszero(eq(mload(returndatasize()), owner)){ mstore(0x00, 0xddafbaef) revert(0x1c, 0x04)} sstore(nonceSlot, add(nonceValue, t)) mstore(0x40, or(shl(160, _ALLOWANCE_SLOT_SEED), spender)) sstore(keccak256(0x2c, 0x34), value) log3(add(m, 0x60), 0x20, _APPROVAL_EVENT_SIGNATURE, owner, spender) mstore(0x40, m) mstore(0x60, 0)}}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "owner"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "deadline"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "v"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "r"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "s"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_APPROVAL_EVENT_SIGNATURE",
                                        "",
                                        "ERC20"
                                    ],
                                    [
                                        "_ALLOWANCE_SLOT_SEED",
                                        "",
                                        "ERC20"
                                    ],
                                    [
                                        "_NONCES_SLOT_SEED_WITH_SIGNATURE_PREFIX",
                                        "",
                                        "ERC20"
                                    ],
                                    [
                                        "_DOMAIN_TYPEHASH",
                                        "",
                                        "ERC20"
                                    ],
                                    [
                                        "_VERSION_HASH",
                                        "",
                                        "ERC20"
                                    ],
                                    [
                                        "_PERMIT_TYPEHASH",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20._constantNameHash",
                                        "ERC20.name"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "d3e2862a535b3eb247b1a2f61102e030"
                            }
                        ],
                        "DOMAIN_SEPARATOR": [
                            {
                                "visibility": "public",
                                "content": "function DOMAIN_SEPARATOR() public view virtual returns (bytes32 result){ bytes32 nameHash = _constantNameHash(); if (nameHash == bytes32(0)) nameHash = keccak256(bytes(name())); assembly{ let m := mload(0x40) mstore(m, _DOMAIN_TYPEHASH) mstore(add(m, 0x20), nameHash) mstore(add(m, 0x40), _VERSION_HASH) mstore(add(m, 0x60), chainid()) mstore(add(m, 0x80), address()) result := keccak256(m, 0xa0)}}",
                                "modifiers": [
                                    "view",
                                    "virtual"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": "result"
                                    }
                                ],
                                "reads": [
                                    [
                                        "_DOMAIN_TYPEHASH",
                                        "",
                                        "ERC20"
                                    ],
                                    [
                                        "_VERSION_HASH",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20._constantNameHash",
                                        "ERC20.name"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "51176c26f3ef0d3bc19be4ba5394aff6"
                            }
                        ],
                        "_mint": [
                            {
                                "visibility": "internal",
                                "content": "function _mint(address to, uint256 amount) internal virtual{ _beforeTokenTransfer(address(0), to, amount); assembly{ let totalSupplyBefore := sload(_TOTAL_SUPPLY_SLOT) let totalSupplyAfter := add(totalSupplyBefore, amount) if lt(totalSupplyAfter, totalSupplyBefore){ mstore(0x00, 0xe5cfe957) revert(0x1c, 0x04)} sstore(_TOTAL_SUPPLY_SLOT, totalSupplyAfter) mstore(0x0c, _BALANCE_SLOT_SEED) mstore(0x00, to) let toBalanceSlot := keccak256(0x0c, 0x20) sstore(toBalanceSlot, add(sload(toBalanceSlot), amount)) mstore(0x20, amount) log3(0x20, 0x20, _TRANSFER_EVENT_SIGNATURE, 0, shr(96, mload(0x0c)))} _afterTokenTransfer(address(0), to, amount);}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_TRANSFER_EVENT_SIGNATURE",
                                        "",
                                        "ERC20"
                                    ],
                                    [
                                        "_TOTAL_SUPPLY_SLOT",
                                        "",
                                        "ERC20"
                                    ],
                                    [
                                        "_BALANCE_SLOT_SEED",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20._afterTokenTransfer",
                                        "ERC20._beforeTokenTransfer"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "d8e905ff07fbc7a9fe05df39533e8d99"
                            }
                        ],
                        "_burn": [
                            {
                                "visibility": "internal",
                                "content": "function _burn(address from, uint256 amount) internal virtual{ _beforeTokenTransfer(from, address(0), amount); assembly{ mstore(0x0c, _BALANCE_SLOT_SEED) mstore(0x00, from) let fromBalanceSlot := keccak256(0x0c, 0x20) let fromBalance := sload(fromBalanceSlot) if gt(amount, fromBalance){ mstore(0x00, 0xf4d678b8) revert(0x1c, 0x04)} sstore(fromBalanceSlot, sub(fromBalance, amount)) sstore(_TOTAL_SUPPLY_SLOT, sub(sload(_TOTAL_SUPPLY_SLOT), amount)) mstore(0x00, amount) log3(0x00, 0x20, _TRANSFER_EVENT_SIGNATURE, shr(96, shl(96, from)), 0)} _afterTokenTransfer(from, address(0), amount);}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_TRANSFER_EVENT_SIGNATURE",
                                        "",
                                        "ERC20"
                                    ],
                                    [
                                        "_TOTAL_SUPPLY_SLOT",
                                        "",
                                        "ERC20"
                                    ],
                                    [
                                        "_BALANCE_SLOT_SEED",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20._afterTokenTransfer",
                                        "ERC20._beforeTokenTransfer"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "f391a731e389d5dc8acf8e027e3fd77d"
                            }
                        ],
                        "_transfer": [
                            {
                                "visibility": "internal",
                                "content": "function _transfer(address from, address to, uint256 amount) internal virtual{ _beforeTokenTransfer(from, to, amount); assembly{ let from_ := shl(96, from) mstore(0x0c, or(from_, _BALANCE_SLOT_SEED)) let fromBalanceSlot := keccak256(0x0c, 0x20) let fromBalance := sload(fromBalanceSlot) if gt(amount, fromBalance){ mstore(0x00, 0xf4d678b8) revert(0x1c, 0x04)} sstore(fromBalanceSlot, sub(fromBalance, amount)) mstore(0x00, to) let toBalanceSlot := keccak256(0x0c, 0x20) sstore(toBalanceSlot, add(sload(toBalanceSlot), amount)) mstore(0x20, amount) log3(0x20, 0x20, _TRANSFER_EVENT_SIGNATURE, shr(96, from_), shr(96, mload(0x0c)))} _afterTokenTransfer(from, to, amount);}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_TRANSFER_EVENT_SIGNATURE",
                                        "",
                                        "ERC20"
                                    ],
                                    [
                                        "_BALANCE_SLOT_SEED",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20._afterTokenTransfer",
                                        "ERC20._beforeTokenTransfer"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "22d7f7c1ad69cb497745c0cfbd30f322"
                            }
                        ],
                        "_spendAllowance": [
                            {
                                "visibility": "internal",
                                "content": "function _spendAllowance(address owner, address spender, uint256 amount) internal virtual{ assembly{ mstore(0x20, spender) mstore(0x0c, _ALLOWANCE_SLOT_SEED) mstore(0x00, owner) let allowanceSlot := keccak256(0x0c, 0x34) let allowance_ := sload(allowanceSlot) if add(allowance_, 1){ if gt(amount, allowance_){ mstore(0x00, 0x13be252b) revert(0x1c, 0x04)} sstore(allowanceSlot, sub(allowance_, amount))}}}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "owner"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_ALLOWANCE_SLOT_SEED",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "5338b43a72f5e77e4567eea928638bb6"
                            }
                        ],
                        "_approve": [
                            {
                                "visibility": "internal",
                                "content": "function _approve(address owner, address spender, uint256 amount) internal virtual{ assembly{ let owner_ := shl(96, owner) mstore(0x20, spender) mstore(0x0c, or(owner_, _ALLOWANCE_SLOT_SEED)) sstore(keccak256(0x0c, 0x34), amount) mstore(0x00, amount) log3(0x00, 0x20, _APPROVAL_EVENT_SIGNATURE, shr(96, owner_), shr(96, mload(0x2c)))}}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "owner"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_APPROVAL_EVENT_SIGNATURE",
                                        "",
                                        "ERC20"
                                    ],
                                    [
                                        "_ALLOWANCE_SLOT_SEED",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "2b9615e2ba7940427e1637645be45ae1"
                            }
                        ],
                        "_beforeTokenTransfer": [
                            {
                                "visibility": "internal",
                                "content": "function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual{}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "ba41c5ef0cd7854682c8a8381eef9051"
                            }
                        ],
                        "_afterTokenTransfer": [
                            {
                                "visibility": "internal",
                                "content": "function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual{}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "a97f3105e53bd4204d7db497a358e7e2"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {
                        "Transfer": {
                            "event": "Transfer",
                            "content": "Transfer(address indexed from, address indexed to, uint256 amount)"
                        },
                        "Approval": {
                            "event": "Approval",
                            "content": "Approval(address indexed owner, address indexed spender, uint256 amount)"
                        }
                    },
                    "enums": {},
                    "errors": {
                        "TotalSupplyOverflow": {
                            "content": "TotalSupplyOverflow()"
                        },
                        "AllowanceOverflow": {
                            "content": "AllowanceOverflow()"
                        },
                        "AllowanceUnderflow": {
                            "content": "AllowanceUnderflow()"
                        },
                        "InsufficientBalance": {
                            "content": "InsufficientBalance()"
                        },
                        "InsufficientAllowance": {
                            "content": "InsufficientAllowance()"
                        },
                        "InvalidPermit": {
                            "content": "InvalidPermit()"
                        },
                        "PermitExpired": {
                            "content": "PermitExpired()"
                        }
                    },
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "ERC20._afterTokenTransfer": "a97f3105e53bd4204d7db497a358e7e2",
                "ERC20._beforeTokenTransfer": "ba41c5ef0cd7854682c8a8381eef9051",
                "ERC20._constantNameHash": "527af7595650a9af034b5701cd7de76f",
                "ERC20.name": "7aa24f057d8dbb4d2afa474b890c8715"
            },
            "md5": "21a42839196479bf2edb54cd94617c46"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20240716\\GasZipFacet\\lib\\solady\\src\\utils\\SafeTransferLib.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20240716\\GasZipFacet\\lib\\solady\\src\\utils\\SafeTransferLib.sol",
            "filename": "SafeTransferLib.sol",
            "imported_contracts": {},
            "contracts": {
                "SafeTransferLib": {
                    "type": {
                        "__CT__": true,
                        "value": 2
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {
                        "GAS_STIPEND_NO_STORAGE_WRITES": {
                            "type": "uint256",
                            "visibility": "internal",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "2300",
                            "content": "uint256 internal constant GAS_STIPEND_NO_STORAGE_WRITES = 2300;"
                        },
                        "GAS_STIPEND_NO_GRIEF": {
                            "type": "uint256",
                            "visibility": "internal",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "100000",
                            "content": "uint256 internal constant GAS_STIPEND_NO_GRIEF = 100000;"
                        },
                        "DAI_DOMAIN_SEPARATOR": {
                            "type": "bytes32",
                            "visibility": "internal",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "0xdbb8cf42e1ecb028be3f3dbc922e1d878b963f411dc388ced501601c60f7c6f7",
                            "content": "bytes32 internal constant DAI_DOMAIN_SEPARATOR = 0xdbb8cf42e1ecb028be3f3dbc922e1d878b963f411dc388ced501601c60f7c6f7;"
                        },
                        "WETH9": {
                            "type": "address",
                            "visibility": "internal",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
                            "content": "address internal constant WETH9 = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;"
                        },
                        "PERMIT2": {
                            "type": "address",
                            "visibility": "internal",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "0x000000000022D473030F116dDEE9F6B43aC78BA3",
                            "content": "address internal constant PERMIT2 = 0x000000000022D473030F116dDEE9F6B43aC78BA3;"
                        }
                    },
                    "functions": {
                        "safeTransferETH": [
                            {
                                "visibility": "internal",
                                "content": "function safeTransferETH(address to, uint256 amount) internal{ assembly{ if iszero(call(gas(), to, amount, codesize(), 0x00, codesize(), 0x00)){ mstore(0x00, 0xb12d13eb) revert(0x1c, 0x04)}}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "838061b3165db5c219ab90655be178ed"
                            }
                        ],
                        "safeTransferAllETH": [
                            {
                                "visibility": "internal",
                                "content": "function safeTransferAllETH(address to) internal{ assembly{ if iszero(call(gas(), to, selfbalance(), codesize(), 0x00, codesize(), 0x00)){ mstore(0x00, 0xb12d13eb) revert(0x1c, 0x04)}}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "to"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "7fcbcb6ca12021854e444973409f05b5"
                            }
                        ],
                        "forceSafeTransferETH": [
                            {
                                "visibility": "internal",
                                "content": "function forceSafeTransferETH(address to, uint256 amount, uint256 gasStipend) internal{ assembly{ if lt(selfbalance(), amount){ mstore(0x00, 0xb12d13eb) revert(0x1c, 0x04)} if iszero(call(gasStipend, to, amount, codesize(), 0x00, codesize(), 0x00)){ mstore(0x00, to) mstore8(0x0b, 0x73) mstore8(0x20, 0xff) if iszero(create(amount, 0x0b, 0x16)){ revert(codesize(), codesize())}}}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "gasStipend"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "15bf568ceb6aed5533c70c9a1f437984"
                            },
                            {
                                "visibility": "internal",
                                "content": "function forceSafeTransferETH(address to, uint256 amount) internal{ assembly{ if lt(selfbalance(), amount){ mstore(0x00, 0xb12d13eb) revert(0x1c, 0x04)} if iszero(call(GAS_STIPEND_NO_GRIEF, to, amount, codesize(), 0x00, codesize(), 0x00)){ mstore(0x00, to) mstore8(0x0b, 0x73) mstore8(0x20, 0xff) if iszero(create(amount, 0x0b, 0x16)){ revert(codesize(), codesize())}}}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "GAS_STIPEND_NO_GRIEF",
                                        "",
                                        "SafeTransferLib"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "b81b066bd0c483d92441a65fb0966bd6"
                            }
                        ],
                        "forceSafeTransferAllETH": [
                            {
                                "visibility": "internal",
                                "content": "function forceSafeTransferAllETH(address to, uint256 gasStipend) internal{ assembly{ if iszero(call(gasStipend, to, selfbalance(), codesize(), 0x00, codesize(), 0x00)){ mstore(0x00, to) mstore8(0x0b, 0x73) mstore8(0x20, 0xff) if iszero(create(selfbalance(), 0x0b, 0x16)){ revert(codesize(), codesize())}}}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "gasStipend"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "881d178d0882dbd69c92f27307eccb6c"
                            },
                            {
                                "visibility": "internal",
                                "content": "function forceSafeTransferAllETH(address to) internal{ assembly{ if iszero(call(GAS_STIPEND_NO_GRIEF, to, selfbalance(), codesize(), 0x00, codesize(), 0x00)){ mstore(0x00, to) mstore8(0x0b, 0x73) mstore8(0x20, 0xff) if iszero(create(selfbalance(), 0x0b, 0x16)){ revert(codesize(), codesize())}}}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "to"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "GAS_STIPEND_NO_GRIEF",
                                        "",
                                        "SafeTransferLib"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c48e92ff25b8eba7f8d94496459fc2ef"
                            }
                        ],
                        "trySafeTransferETH": [
                            {
                                "visibility": "internal",
                                "content": "function trySafeTransferETH(address to, uint256 amount, uint256 gasStipend) internal returns (bool success){ assembly{ success := call(gasStipend, to, amount, codesize(), 0x00, codesize(), 0x00)}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "gasStipend"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": "success"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "b4f1137d91f6092b7e3ec05713825260"
                            }
                        ],
                        "trySafeTransferAllETH": [
                            {
                                "visibility": "internal",
                                "content": "function trySafeTransferAllETH(address to, uint256 gasStipend) internal returns (bool success){ assembly{ success := call(gasStipend, to, selfbalance(), codesize(), 0x00, codesize(), 0x00)}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "gasStipend"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": "success"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "6a3af0a99b7f56a813289924dba2a7a8"
                            }
                        ],
                        "safeTransferFrom": [
                            {
                                "visibility": "internal",
                                "content": "function safeTransferFrom(address token, address from, address to, uint256 amount) internal{ assembly{ let m := mload(0x40) mstore(0x60, amount) mstore(0x40, to) mstore(0x2c, shl(96, from)) mstore(0x0c, 0x23b872dd000000000000000000000000) if iszero( and( or(eq(mload(0x00), 1), iszero(returndatasize())), call(gas(), token, 0, 0x1c, 0x64, 0x00, 0x20) ) ){ mstore(0x00, 0x7939f424) revert(0x1c, 0x04)} mstore(0x60, 0) mstore(0x40, m)}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "ac2525b82af18a6aa752e54d597839aa"
                            }
                        ],
                        "trySafeTransferFrom": [
                            {
                                "visibility": "internal",
                                "content": "function trySafeTransferFrom(address token, address from, address to, uint256 amount) internal returns (bool success){ assembly{ let m := mload(0x40) mstore(0x60, amount) mstore(0x40, to) mstore(0x2c, shl(96, from)) mstore(0x0c, 0x23b872dd000000000000000000000000) success := and( or(eq(mload(0x00), 1), iszero(returndatasize())), call(gas(), token, 0, 0x1c, 0x64, 0x00, 0x20) ) mstore(0x60, 0) mstore(0x40, m)}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": "success"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "7bd3c69c6b074f0f67bdf45537b76b14"
                            }
                        ],
                        "safeTransferAllFrom": [
                            {
                                "visibility": "internal",
                                "content": "function safeTransferAllFrom(address token, address from, address to) internal returns (uint256 amount){ assembly{ let m := mload(0x40) mstore(0x40, to) mstore(0x2c, shl(96, from)) mstore(0x0c, 0x70a08231000000000000000000000000) if iszero( and( gt(returndatasize(), 0x1f), staticcall(gas(), token, 0x1c, 0x24, 0x60, 0x20) ) ){ mstore(0x00, 0x7939f424) revert(0x1c, 0x04)} mstore(0x00, 0x23b872dd) amount := mload(0x60) if iszero( and( or(eq(mload(0x00), 1), iszero(returndatasize())), call(gas(), token, 0, 0x1c, 0x64, 0x00, 0x20) ) ){ mstore(0x00, 0x7939f424) revert(0x1c, 0x04)} mstore(0x60, 0) mstore(0x40, m)}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "7fadd503e3ba37c28109ed4e848f5a34"
                            }
                        ],
                        "safeTransfer": [
                            {
                                "visibility": "internal",
                                "content": "function safeTransfer(address token, address to, uint256 amount) internal{ assembly{ mstore(0x14, to) mstore(0x34, amount) mstore(0x00, 0xa9059cbb000000000000000000000000) if iszero( and( or(eq(mload(0x00), 1), iszero(returndatasize())), call(gas(), token, 0, 0x10, 0x44, 0x00, 0x20) ) ){ mstore(0x00, 0x90b8ec18) revert(0x1c, 0x04)} mstore(0x34, 0)}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "b43770e03bff420efc238c16b8ee5f18"
                            }
                        ],
                        "safeTransferAll": [
                            {
                                "visibility": "internal",
                                "content": "function safeTransferAll(address token, address to) internal returns (uint256 amount){ assembly{ mstore(0x00, 0x70a08231) mstore(0x20, address()) if iszero( and( gt(returndatasize(), 0x1f), staticcall(gas(), token, 0x1c, 0x24, 0x34, 0x20) ) ){ mstore(0x00, 0x90b8ec18) revert(0x1c, 0x04)} mstore(0x14, to) amount := mload(0x34) mstore(0x00, 0xa9059cbb000000000000000000000000) if iszero( and( or(eq(mload(0x00), 1), iszero(returndatasize())), call(gas(), token, 0, 0x10, 0x44, 0x00, 0x20) ) ){ mstore(0x00, 0x90b8ec18) revert(0x1c, 0x04)} mstore(0x34, 0)}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "aa371d3d9c6efef7e21920a1bf977b06"
                            }
                        ],
                        "safeApprove": [
                            {
                                "visibility": "internal",
                                "content": "function safeApprove(address token, address to, uint256 amount) internal{ assembly{ mstore(0x14, to) mstore(0x34, amount) mstore(0x00, 0x095ea7b3000000000000000000000000) if iszero( and( or(eq(mload(0x00), 1), iszero(returndatasize())), call(gas(), token, 0, 0x10, 0x44, 0x00, 0x20) ) ){ mstore(0x00, 0x3e3f8f73) revert(0x1c, 0x04)} mstore(0x34, 0)}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "bd36eefd5999b2cf6e097c31e4fdd6ad"
                            }
                        ],
                        "safeApproveWithRetry": [
                            {
                                "visibility": "internal",
                                "content": "function safeApproveWithRetry(address token, address to, uint256 amount) internal{ assembly{ mstore(0x14, to) mstore(0x34, amount) mstore(0x00, 0x095ea7b3000000000000000000000000) if iszero( and( or(eq(mload(0x00), 1), iszero(returndatasize())), call(gas(), token, 0, 0x10, 0x44, 0x00, 0x20) ) ){ mstore(0x34, 0) mstore(0x00, 0x095ea7b3000000000000000000000000) pop(call(gas(), token, 0, 0x10, 0x44, codesize(), 0x00)) mstore(0x34, amount) if iszero( and( or(eq(mload(0x00), 1), iszero(returndatasize())), call(gas(), token, 0, 0x10, 0x44, 0x00, 0x20) ) ){ mstore(0x00, 0x3e3f8f73) revert(0x1c, 0x04)}} mstore(0x34, 0)}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "849138856dc0933b815b37f29cbd77a2"
                            }
                        ],
                        "balanceOf": [
                            {
                                "visibility": "internal",
                                "content": "function balanceOf(address token, address account) internal view returns (uint256 amount){ assembly{ mstore(0x14, account) mstore(0x00, 0x70a08231000000000000000000000000) amount := mul( mload(0x20), and( gt(returndatasize(), 0x1f), staticcall(gas(), token, 0x10, 0x24, 0x20, 0x20) ) )}}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "account"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "8e32692c2a015177a9413dd6eb6d9ebe"
                            }
                        ],
                        "safeTransferFrom2": [
                            {
                                "visibility": "internal",
                                "content": "function safeTransferFrom2(address token, address from, address to, uint256 amount) internal{ if (!trySafeTransferFrom(token, from, to, amount)){ permit2TransferFrom(token, from, to, amount);}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SafeTransferLib.trySafeTransferFrom",
                                        "SafeTransferLib.permit2TransferFrom"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "a79bdee98a219e66f4dc9d6ea06ed177"
                            }
                        ],
                        "permit2TransferFrom": [
                            {
                                "visibility": "internal",
                                "content": "function permit2TransferFrom(address token, address from, address to, uint256 amount) internal{ assembly{ let m := mload(0x40) mstore(add(m, 0x74), shr(96, shl(96, token))) mstore(add(m, 0x54), amount) mstore(add(m, 0x34), to) mstore(add(m, 0x20), shl(96, from)) mstore(m, 0x36c78516000000000000000000000000) let p := PERMIT2 let exists := eq(chainid(), 1) if iszero(exists){ exists := iszero(iszero(extcodesize(p)))} if iszero(and(call(gas(), p, 0, add(m, 0x10), 0x84, codesize(), 0x00), exists)){ mstore(0x00, 0x7939f4248757f0fd) revert(add(0x18, shl(2, iszero(iszero(shr(160, amount))))), 0x04)}}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "PERMIT2",
                                        "",
                                        "SafeTransferLib"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "ae43b55842b0276e38d82154551bad7f"
                            }
                        ],
                        "permit2": [
                            {
                                "visibility": "internal",
                                "content": "function permit2( address token, address owner, address spender, uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s ) internal{ bool success; assembly{ for{} shl(96, xor(token, WETH9)){}{ mstore(0x00, 0x3644e515) if iszero( and( lt(iszero(mload(0x00)), eq(returndatasize(), 0x20)), staticcall(5000, token, 0x1c, 0x04, 0x00, 0x20) ) ){ break} let m := mload(0x40) mstore(add(m, 0x34), spender) mstore(add(m, 0x20), shl(96, owner)) mstore(add(m, 0x74), deadline) if eq(mload(0x00), DAI_DOMAIN_SEPARATOR){ mstore(0x14, owner) mstore(0x00, 0x7ecebe00000000000000000000000000) mstore(add(m, 0x94), staticcall(gas(), token, 0x10, 0x24, add(m, 0x54), 0x20)) mstore(m, 0x8fcbaf0c000000000000000000000000) mstore(add(m, 0xb4), and(0xff, v)) mstore(add(m, 0xd4), r) mstore(add(m, 0xf4), s) success := call(gas(), token, 0, add(m, 0x10), 0x104, codesize(), 0x00) break} mstore(m, 0xd505accf000000000000000000000000) mstore(add(m, 0x54), amount) mstore(add(m, 0x94), and(0xff, v)) mstore(add(m, 0xb4), r) mstore(add(m, 0xd4), s) success := call(gas(), token, 0, add(m, 0x10), 0xe4, codesize(), 0x00) break}} if (!success) simplePermit2(token, owner, spender, amount, deadline, v, r, s);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "owner"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "deadline"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "v"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "r"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "s"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "DAI_DOMAIN_SEPARATOR",
                                        "",
                                        "SafeTransferLib"
                                    ],
                                    [
                                        "WETH9",
                                        "",
                                        "SafeTransferLib"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SafeTransferLib.simplePermit2"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "a91a27560039a3d108dc937778a751c5"
                            }
                        ],
                        "simplePermit2": [
                            {
                                "visibility": "internal",
                                "content": "function simplePermit2( address token, address owner, address spender, uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s ) internal{ assembly{ let m := mload(0x40) mstore(m, 0x927da105){ let addressMask := shr(96, not(0)) mstore(add(m, 0x20), and(addressMask, owner)) mstore(add(m, 0x40), and(addressMask, token)) mstore(add(m, 0x60), and(addressMask, spender)) mstore(add(m, 0xc0), and(addressMask, spender))} let p := mul(PERMIT2, iszero(shr(160, amount))) if iszero( and( gt(returndatasize(), 0x5f), staticcall(gas(), p, add(m, 0x1c), 0x64, add(m, 0x60), 0x60) ) ){ mstore(0x00, 0x6b836e6b8757f0fd) revert(add(0x18, shl(2, iszero(p))), 0x04)} mstore(m, 0x2b67b570) mstore(add(m, 0x60), amount) mstore(add(m, 0x80), 0xffffffffffff) mstore(add(m, 0xe0), deadline) mstore(add(m, 0x100), 0x100) mstore(add(m, 0x120), 0x41) mstore(add(m, 0x140), r) mstore(add(m, 0x160), s) mstore(add(m, 0x180), shl(248, v)) if iszero(call(gas(), p, 0, add(m, 0x1c), 0x184, codesize(), 0x00)){ mstore(0x00, 0x6b836e6b) revert(0x1c, 0x04)}}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "owner"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "deadline"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "v"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "r"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "s"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "PERMIT2",
                                        "",
                                        "SafeTransferLib"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "0d8ae021c272f5df23765d70e043e28a"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {
                        "ETHTransferFailed": {
                            "content": "ETHTransferFailed()"
                        },
                        "TransferFromFailed": {
                            "content": "TransferFromFailed()"
                        },
                        "TransferFailed": {
                            "content": "TransferFailed()"
                        },
                        "ApproveFailed": {
                            "content": "ApproveFailed()"
                        },
                        "Permit2Failed": {
                            "content": "Permit2Failed()"
                        },
                        "Permit2AmountOverflow": {
                            "content": "Permit2AmountOverflow()"
                        }
                    },
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "SafeTransferLib.trySafeTransferFrom": "7bd3c69c6b074f0f67bdf45537b76b14",
                "SafeTransferLib.permit2TransferFrom": "ae43b55842b0276e38d82154551bad7f",
                "SafeTransferLib.simplePermit2": "0d8ae021c272f5df23765d70e043e28a"
            },
            "md5": "68dc72edde5cd7b4ed473aa10c7bd63f"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20240716\\GasZipFacet\\src\\Errors\\GenericErrors.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20240716\\GasZipFacet\\src\\Errors\\GenericErrors.sol",
            "filename": "GenericErrors.sol",
            "imported_contracts": {},
            "contracts": {},
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {
                "AlreadyInitialized": {
                    "content": "AlreadyInitialized()"
                },
                "CannotAuthoriseSelf": {
                    "content": "CannotAuthoriseSelf()"
                },
                "CannotBridgeToSameNetwork": {
                    "content": "CannotBridgeToSameNetwork()"
                },
                "ContractCallNotAllowed": {
                    "content": "ContractCallNotAllowed()"
                },
                "CumulativeSlippageTooHigh": {
                    "content": "CumulativeSlippageTooHigh(uint256 minAmount, uint256 receivedAmount)"
                },
                "ExternalCallFailed": {
                    "content": "ExternalCallFailed()"
                },
                "InformationMismatch": {
                    "content": "InformationMismatch()"
                },
                "InsufficientBalance": {
                    "content": "InsufficientBalance(uint256 required, uint256 balance)"
                },
                "InvalidAmount": {
                    "content": "InvalidAmount()"
                },
                "InvalidCallData": {
                    "content": "InvalidCallData()"
                },
                "InvalidConfig": {
                    "content": "InvalidConfig()"
                },
                "InvalidContract": {
                    "content": "InvalidContract()"
                },
                "InvalidDestinationChain": {
                    "content": "InvalidDestinationChain()"
                },
                "InvalidFallbackAddress": {
                    "content": "InvalidFallbackAddress()"
                },
                "InvalidReceiver": {
                    "content": "InvalidReceiver()"
                },
                "InvalidSendingToken": {
                    "content": "InvalidSendingToken()"
                },
                "NativeAssetNotSupported": {
                    "content": "NativeAssetNotSupported()"
                },
                "NativeAssetTransferFailed": {
                    "content": "NativeAssetTransferFailed()"
                },
                "NoSwapDataProvided": {
                    "content": "NoSwapDataProvided()"
                },
                "NoSwapFromZeroBalance": {
                    "content": "NoSwapFromZeroBalance()"
                },
                "NotAContract": {
                    "content": "NotAContract()"
                },
                "NotInitialized": {
                    "content": "NotInitialized()"
                },
                "NoTransferToNullAddress": {
                    "content": "NoTransferToNullAddress()"
                },
                "NullAddrIsNotAnERC20Token": {
                    "content": "NullAddrIsNotAnERC20Token()"
                },
                "NullAddrIsNotAValidSpender": {
                    "content": "NullAddrIsNotAValidSpender()"
                },
                "OnlyContractOwner": {
                    "content": "OnlyContractOwner()"
                },
                "RecoveryAddressCannotBeZero": {
                    "content": "RecoveryAddressCannotBeZero()"
                },
                "ReentrancyError": {
                    "content": "ReentrancyError()"
                },
                "TokenNotSupported": {
                    "content": "TokenNotSupported()"
                },
                "UnAuthorized": {
                    "content": "UnAuthorized()"
                },
                "UnsupportedChainId": {
                    "content": "UnsupportedChainId(uint256 chainId)"
                },
                "WithdrawFailed": {
                    "content": "WithdrawFailed()"
                },
                "ZeroAmount": {
                    "content": "ZeroAmount()"
                }
            },
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "e98de1da5e0db7ab62bb88dc57e00b4f"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20240716\\GasZipFacet\\src\\Interfaces\\ILiFi.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20240716\\GasZipFacet\\src\\Interfaces\\ILiFi.sol",
            "filename": "ILiFi.sol",
            "imported_contracts": {},
            "contracts": {
                "ILiFi": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {},
                    "modifiers": {},
                    "structs": {
                        "BridgeData": {
                            "content": "BridgeData{ bytes32 transactionId; string bridge; string integrator; address referrer; address sendingAssetId; address receiver; uint256 minAmount; uint256 destinationChainId; bool hasSourceSwaps; bool hasDestinationCall;}"
                        }
                    },
                    "events": {
                        "LiFiTransferStarted": {
                            "event": "LiFiTransferStarted",
                            "content": "LiFiTransferStarted(ILiFi.BridgeData bridgeData)"
                        },
                        "LiFiTransferCompleted": {
                            "event": "LiFiTransferCompleted",
                            "content": "LiFiTransferCompleted( bytes32 indexed transactionId, address receivingAssetId, address receiver, uint256 amount, uint256 timestamp )"
                        },
                        "LiFiTransferRecovered": {
                            "event": "LiFiTransferRecovered",
                            "content": "LiFiTransferRecovered( bytes32 indexed transactionId, address receivingAssetId, address receiver, uint256 amount, uint256 timestamp )"
                        },
                        "LiFiGenericSwapCompleted": {
                            "event": "LiFiGenericSwapCompleted",
                            "content": "LiFiGenericSwapCompleted( bytes32 indexed transactionId, string integrator, string referrer, address receiver, address fromAssetId, address toAssetId, uint256 fromAmount, uint256 toAmount )"
                        },
                        "LiFiSwappedGeneric": {
                            "event": "LiFiSwappedGeneric",
                            "content": "LiFiSwappedGeneric( bytes32 indexed transactionId, string integrator, string referrer, address fromAssetId, address toAssetId, uint256 fromAmount, uint256 toAmount )"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": [
                        [
                            "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20240716\\GasZipFacet\\src\\Helpers\\SwapperV2.sol",
                            "SwapperV2"
                        ],
                        [
                            "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20240716\\GasZipFacet\\src\\Facets\\GasZipFacet.sol",
                            "GasZipFacet"
                        ]
                    ]
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "b76ef513a415fc0cafbd46561661f992"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20240716\\GasZipFacet\\src\\Libraries\\LibAsset.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20240716\\GasZipFacet\\src\\Libraries\\LibAsset.sol",
            "filename": "LibAsset.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20240716\\GasZipFacet\\src\\Errors\\GenericErrors.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "InsufficientBalance": {
                            "original_name": "InsufficientBalance",
                            "type": {
                                "__CT__": true,
                                "value": 15
                            }
                        },
                        "NullAddrIsNotAnERC20Token": {
                            "original_name": "NullAddrIsNotAnERC20Token",
                            "type": {
                                "__CT__": true,
                                "value": 15
                            }
                        },
                        "NullAddrIsNotAValidSpender": {
                            "original_name": "NullAddrIsNotAValidSpender",
                            "type": {
                                "__CT__": true,
                                "value": 15
                            }
                        },
                        "NoTransferToNullAddress": {
                            "original_name": "NoTransferToNullAddress",
                            "type": {
                                "__CT__": true,
                                "value": 15
                            }
                        },
                        "InvalidAmount": {
                            "original_name": "InvalidAmount",
                            "type": {
                                "__CT__": true,
                                "value": 15
                            }
                        },
                        "NativeAssetTransferFailed": {
                            "original_name": "NativeAssetTransferFailed",
                            "type": {
                                "__CT__": true,
                                "value": 15
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20240716\\GasZipFacet\\lib\\openzeppelin-contracts\\contracts\\token\\ERC20\\utils\\SafeERC20.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20240716\\GasZipFacet\\lib\\openzeppelin-contracts\\contracts\\token\\ERC20\\IERC20.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20240716\\GasZipFacet\\src\\Libraries\\LibSwap.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "LibSwap": {
                            "original_name": "LibSwap",
                            "type": {
                                "__CT__": true,
                                "value": 0
                            }
                        }
                    }
                }
            },
            "contracts": {
                "LibAsset": {
                    "type": {
                        "__CT__": true,
                        "value": 2
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {
                        "NULL_ADDRESS": {
                            "type": "address",
                            "visibility": "internal",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "address(0)",
                            "content": "address internal constant NULL_ADDRESS = address(0);"
                        },
                        "NATIVE_ASSETID": {
                            "type": "address",
                            "visibility": "internal",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "NULL_ADDRESS",
                            "content": "address internal constant NATIVE_ASSETID = NULL_ADDRESS;"
                        }
                    },
                    "functions": {
                        "getOwnBalance": [
                            {
                                "visibility": "internal",
                                "content": "function getOwnBalance(address assetId) internal view returns (uint256){ return isNativeAsset(assetId) ? address(this).balance : IERC20(assetId).balanceOf(address(this));}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "assetId"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LibAsset.IERC20",
                                        "LibAsset.isNativeAsset"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "1b51ecb2290b6b3db4f241ddbeb65725"
                            }
                        ],
                        "transferNativeAsset": [
                            {
                                "visibility": "private",
                                "content": "function transferNativeAsset( address payable recipient, uint256 amount ) private{ if (recipient == NULL_ADDRESS) revert NoTransferToNullAddress(); if (amount > address(this).balance) revert InsufficientBalance(amount, address(this).balance); (bool success, ) = recipient.call{ value: amount} (\"\"); if (!success) revert NativeAssetTransferFailed();}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address payable",
                                        "name": "recipient"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "NULL_ADDRESS",
                                        "",
                                        "LibAsset"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LibAsset.InsufficientBalance",
                                        "LibAsset.NativeAssetTransferFailed",
                                        "LibAsset.NoTransferToNullAddress"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "34480bf50f4ccae1767e5b41c64d6bab"
                            }
                        ],
                        "maxApproveERC20": [
                            {
                                "visibility": "internal",
                                "content": "function maxApproveERC20( IERC20 assetId, address spender, uint256 amount ) internal{ if (isNativeAsset(address(assetId))){ return;} if (spender == NULL_ADDRESS){ revert NullAddrIsNotAValidSpender();} if (assetId.allowance(address(this), spender) < amount){ SafeERC20.safeApprove(IERC20(assetId), spender, 0); SafeERC20.safeApprove(IERC20(assetId), spender, MAX_UINT);}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "IERC20",
                                        "name": "assetId"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "NULL_ADDRESS",
                                        "",
                                        "LibAsset"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LibAsset.NullAddrIsNotAValidSpender",
                                        "LibAsset.IERC20",
                                        "IERC20.allowance",
                                        "SafeERC20.safeApprove",
                                        "LibAsset.isNativeAsset"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "2763a92791c55d99853da524e26c2e6d"
                            }
                        ],
                        "transferERC20": [
                            {
                                "visibility": "private",
                                "content": "function transferERC20( address assetId, address recipient, uint256 amount ) private{ if (isNativeAsset(assetId)){ revert NullAddrIsNotAnERC20Token();} if (recipient == NULL_ADDRESS){ revert NoTransferToNullAddress();} uint256 assetBalance = IERC20(assetId).balanceOf(address(this)); if (amount > assetBalance){ revert InsufficientBalance(amount, assetBalance);} SafeERC20.safeTransfer(IERC20(assetId), recipient, amount);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "assetId"
                                    },
                                    {
                                        "type": "address",
                                        "name": "recipient"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "NULL_ADDRESS",
                                        "",
                                        "LibAsset"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LibAsset.NoTransferToNullAddress",
                                        "LibAsset.IERC20",
                                        "LibAsset.NullAddrIsNotAnERC20Token",
                                        "SafeERC20.safeTransfer",
                                        "LibAsset.InsufficientBalance",
                                        "LibAsset.isNativeAsset"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "35784d8b6279e0eb782930466e06beeb"
                            }
                        ],
                        "transferFromERC20": [
                            {
                                "visibility": "internal",
                                "content": "function transferFromERC20( address assetId, address from, address to, uint256 amount ) internal{ if (isNativeAsset(assetId)){ revert NullAddrIsNotAnERC20Token();} if (to == NULL_ADDRESS){ revert NoTransferToNullAddress();} IERC20 asset = IERC20(assetId); uint256 prevBalance = asset.balanceOf(to); SafeERC20.safeTransferFrom(asset, from, to, amount); if (asset.balanceOf(to) - prevBalance != amount){ revert InvalidAmount();}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "assetId"
                                    },
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "NULL_ADDRESS",
                                        "",
                                        "LibAsset"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SafeERC20.safeTransferFrom",
                                        "LibAsset.NoTransferToNullAddress",
                                        "LibAsset.InvalidAmount",
                                        "LibAsset.IERC20",
                                        "LibAsset.NullAddrIsNotAnERC20Token",
                                        "IERC20.balanceOf",
                                        "LibAsset.isNativeAsset"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "e31325517d94e6fe5ea7267ec3dc8cf3"
                            }
                        ],
                        "depositAsset": [
                            {
                                "visibility": "internal",
                                "content": "function depositAsset(address assetId, uint256 amount) internal{ if (amount == 0) revert InvalidAmount(); if (isNativeAsset(assetId)){ if (msg.value < amount) revert InvalidAmount();} else{ uint256 balance = IERC20(assetId).balanceOf(msg.sender); if (balance < amount) revert InsufficientBalance(amount, balance); transferFromERC20(assetId, msg.sender, address(this), amount);}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "assetId"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LibAsset.InvalidAmount",
                                        "LibAsset.IERC20",
                                        "LibAsset.InsufficientBalance",
                                        "LibAsset.transferFromERC20",
                                        "LibAsset.isNativeAsset"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "1e5f7f0600c16a731a02d5e492df3fca"
                            }
                        ],
                        "depositAssets": [
                            {
                                "visibility": "internal",
                                "content": "function depositAssets(LibSwap.SwapData[] calldata swaps) internal{ for (uint256 i = 0; i < swaps.length; ){ LibSwap.SwapData calldata swap = swaps[i]; if (swap.requiresDeposit){ depositAsset(swap.sendingAssetId, swap.fromAmount);} unchecked{ i++;}}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "LibSwap.SwapData[] calldata",
                                        "name": "swaps"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LibAsset.depositAsset"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "df2cbb91d3ef48361e4950c0525a9178"
                            }
                        ],
                        "isNativeAsset": [
                            {
                                "visibility": "internal",
                                "content": "function isNativeAsset(address assetId) internal pure returns (bool){ return assetId == NATIVE_ASSETID;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "assetId"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "NATIVE_ASSETID",
                                        "",
                                        "LibAsset"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "90f6c601dde5476497b7b77972e5160e"
                            }
                        ],
                        "transferAsset": [
                            {
                                "visibility": "internal",
                                "content": "function transferAsset( address assetId, address payable recipient, uint256 amount ) internal{ isNativeAsset(assetId) ? transferNativeAsset(recipient, amount) : transferERC20(assetId, recipient, amount);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "assetId"
                                    },
                                    {
                                        "type": "address payable",
                                        "name": "recipient"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LibAsset.transferNativeAsset",
                                        "LibAsset.transferERC20",
                                        "LibAsset.isNativeAsset"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "23099f43e12b67b01f34f2ffda244552"
                            }
                        ],
                        "isContract": [
                            {
                                "visibility": "internal",
                                "content": "function isContract(address _contractAddr) internal view returns (bool){ uint256 size; assembly{ size := extcodesize(_contractAddr)} return size > 0;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_contractAddr"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "bb78c763a9d80ce729c9d29604464b86"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "LibAsset.isNativeAsset": "90f6c601dde5476497b7b77972e5160e",
                "IERC20.allowance": "c93791d09d789aed33b9725d482af442",
                "SafeERC20.safeApprove": "ab540675767ea7e50c2697d6cc9c103d",
                "SafeERC20.safeTransfer": "eea4fa7146b01518dc938446227eee77",
                "SafeERC20.safeTransferFrom": "6d0886ab47ccffec354b109fb2e8de81",
                "IERC20.balanceOf": "3ac17e7782366957c960d337a4a648cd",
                "LibAsset.transferFromERC20": "e31325517d94e6fe5ea7267ec3dc8cf3",
                "LibAsset.depositAsset": "1e5f7f0600c16a731a02d5e492df3fca",
                "LibAsset.transferERC20": "35784d8b6279e0eb782930466e06beeb",
                "LibAsset.transferNativeAsset": "34480bf50f4ccae1767e5b41c64d6bab"
            },
            "md5": "b9e9a80fb3f54fa889e8312f166511fc"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20240716\\GasZipFacet\\src\\Libraries\\LibBytes.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20240716\\GasZipFacet\\src\\Libraries\\LibBytes.sol",
            "filename": "LibBytes.sol",
            "imported_contracts": {},
            "contracts": {
                "LibBytes": {
                    "type": {
                        "__CT__": true,
                        "value": 2
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {
                        "_SYMBOLS": {
                            "type": "bytes16",
                            "visibility": "private",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "\"0123456789abcdef\"",
                            "content": "bytes16 private constant _SYMBOLS = \"0123456789abcdef\";"
                        }
                    },
                    "functions": {
                        "slice": [
                            {
                                "visibility": "internal",
                                "content": "function slice( bytes memory _bytes, uint256 _start, uint256 _length ) internal pure returns (bytes memory){ if (_length + 31 < _length) revert SliceOverflow(); if (_bytes.length < _start + _length) revert SliceOutOfBounds(); bytes memory tempBytes; assembly{ switch iszero(_length) case 0{ tempBytes := mload(0x40) let lengthmod := and(_length, 31) let mc := add( add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)) ) let end := add(mc, _length) for{ let cc := add( add( add(_bytes, lengthmod), mul(0x20, iszero(lengthmod)) ), _start )} lt(mc, end){ mc := add(mc, 0x20) cc := add(cc, 0x20)}{ mstore(mc, mload(cc))} mstore(tempBytes, _length) mstore(0x40, and(add(mc, 31), not(31)))} default{ tempBytes := mload(0x40) mstore(tempBytes, 0) mstore(0x40, add(tempBytes, 0x20))}} return tempBytes;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "_bytes"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_start"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_length"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LibBytes.SliceOutOfBounds",
                                        "LibBytes.SliceOverflow"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "69570a7360610180cb404c5e72a07f35"
                            }
                        ],
                        "toAddress": [
                            {
                                "visibility": "internal",
                                "content": "function toAddress( bytes memory _bytes, uint256 _start ) internal pure returns (address){ if (_bytes.length < _start + 20){ revert AddressOutOfBounds();} address tempAddress; assembly{ tempAddress := div( mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000 )} return tempAddress;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "_bytes"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_start"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LibBytes.AddressOutOfBounds"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "da71c38f9ce77b6ced17b2b53438adaf"
                            }
                        ],
                        "toHexString": [
                            {
                                "visibility": "internal",
                                "content": "function toHexString( uint256 value, uint256 length ) internal pure returns (string memory){ bytes memory buffer = new bytes(2 * length + 2); buffer[0] = \"0\"; buffer[1] = \"x\"; for (uint256 i = 2 * length + 1; i > 1; --i){ buffer[i] = _SYMBOLS[value & 0xf]; value >>= 4;} require(value == 0, \"Strings: hex length insufficient\"); return string(buffer);}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "length"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "string memory",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_SYMBOLS",
                                        "",
                                        "LibBytes"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "2fa45dcb15ee6f75b880ed92d7f80cc7"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {
                        "SliceOverflow": {
                            "content": "SliceOverflow()"
                        },
                        "SliceOutOfBounds": {
                            "content": "SliceOutOfBounds()"
                        },
                        "AddressOutOfBounds": {
                            "content": "AddressOutOfBounds()"
                        }
                    },
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "d01b2085c967281b5836449ebc3a3819"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20240716\\GasZipFacet\\src\\Libraries\\LibUtil.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20240716\\GasZipFacet\\src\\Libraries\\LibUtil.sol",
            "filename": "LibUtil.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20240716\\GasZipFacet\\src\\Libraries\\LibBytes.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "LibUtil": {
                    "type": {
                        "__CT__": true,
                        "value": 2
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "getRevertMsg": [
                            {
                                "visibility": "internal",
                                "content": "function getRevertMsg( bytes memory _res ) internal pure returns (string memory){ if (_res.length < 68) return \"Transaction reverted silently\"; bytes memory revertData = _res.slice(4, _res.length - 4); return abi.decode(revertData, (string));}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "_res"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "string memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "_res.slice"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "87c4f1d02e2655b4c96997da3a324da0"
                            }
                        ],
                        "isZeroAddress": [
                            {
                                "visibility": "internal",
                                "content": "function isZeroAddress(address addr) internal pure returns (bool){ return addr == address(0);}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "addr"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "35714e15bc97d454030e7138343889b5"
                            }
                        ],
                        "revertWith": [
                            {
                                "visibility": "internal",
                                "content": "function revertWith(bytes memory data) internal pure{ assembly{ let dataSize := mload(data) let dataPtr := add(data, 0x20) revert(dataPtr, dataSize)}}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "data"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "d177dfe7eb3835c16af224d6f0b50345"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "bytes": "LibBytes"
                    }
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "_res.slice": "69570a7360610180cb404c5e72a07f35"
            },
            "md5": "4f5a6677a0dd96ef5b9b8281c354cfc5"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20240716\\GasZipFacet\\src\\Libraries\\LibSwap.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20240716\\GasZipFacet\\src\\Libraries\\LibSwap.sol",
            "filename": "LibSwap.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20240716\\GasZipFacet\\src\\Libraries\\LibAsset.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "LibAsset": {
                            "original_name": "LibAsset",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20240716\\GasZipFacet\\src\\Libraries\\LibUtil.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "LibUtil": {
                            "original_name": "LibUtil",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20240716\\GasZipFacet\\src\\Errors\\GenericErrors.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "InvalidContract": {
                            "original_name": "InvalidContract",
                            "type": {
                                "__CT__": true,
                                "value": 15
                            }
                        },
                        "NoSwapFromZeroBalance": {
                            "original_name": "NoSwapFromZeroBalance",
                            "type": {
                                "__CT__": true,
                                "value": 15
                            }
                        },
                        "InsufficientBalance": {
                            "original_name": "InsufficientBalance",
                            "type": {
                                "__CT__": true,
                                "value": 15
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20240716\\GasZipFacet\\lib\\openzeppelin-contracts\\contracts\\token\\ERC20\\IERC20.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "IERC20": {
                            "original_name": "IERC20",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                }
            },
            "contracts": {
                "LibSwap": {
                    "type": {
                        "__CT__": true,
                        "value": 2
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "swap": [
                            {
                                "visibility": "internal",
                                "content": "function swap(bytes32 transactionId, SwapData calldata _swap) internal{ if (!LibAsset.isContract(_swap.callTo)) revert InvalidContract(); uint256 fromAmount = _swap.fromAmount; if (fromAmount == 0) revert NoSwapFromZeroBalance(); uint256 nativeValue = LibAsset.isNativeAsset(_swap.sendingAssetId) ? _swap.fromAmount : 0; uint256 initialSendingAssetBalance = LibAsset.getOwnBalance( _swap.sendingAssetId ); uint256 initialReceivingAssetBalance = LibAsset.getOwnBalance( _swap.receivingAssetId ); if (nativeValue == 0){ LibAsset.maxApproveERC20( IERC20(_swap.sendingAssetId), _swap.approveTo, _swap.fromAmount );} if (initialSendingAssetBalance < _swap.fromAmount){ revert InsufficientBalance( _swap.fromAmount, initialSendingAssetBalance );} (bool success, bytes memory res) = _swap.callTo.call{ value: nativeValue} (_swap.callData); if (!success){ LibUtil.revertWith(res);} uint256 newBalance = LibAsset.getOwnBalance(_swap.receivingAssetId); emit AssetSwapped( transactionId, _swap.callTo, _swap.sendingAssetId, _swap.receivingAssetId, _swap.fromAmount, newBalance > initialReceivingAssetBalance ? newBalance - initialReceivingAssetBalance : newBalance, block.timestamp );}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "transactionId"
                                    },
                                    {
                                        "type": "SwapData calldata",
                                        "name": "_swap"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LibSwap.InsufficientBalance",
                                        "LibAsset.isContract",
                                        "LibSwap.InvalidContract",
                                        "LibSwap.IERC20",
                                        "LibUtil.revertWith",
                                        "LibAsset.maxApproveERC20",
                                        "LibAsset.getOwnBalance",
                                        "LibAsset.isNativeAsset",
                                        "LibSwap.NoSwapFromZeroBalance"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "c72e28a0b0bba4e62d9df514099bd3d5"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {
                        "SwapData": {
                            "content": "SwapData{ address callTo; address approveTo; address sendingAssetId; address receivingAssetId; uint256 fromAmount; bytes callData; bool requiresDeposit;}"
                        }
                    },
                    "events": {
                        "AssetSwapped": {
                            "event": "AssetSwapped",
                            "content": "AssetSwapped( bytes32 transactionId, address dex, address fromAssetId, address toAssetId, uint256 fromAmount, uint256 toAmount, uint256 timestamp )"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "LibUtil.revertWith": "d177dfe7eb3835c16af224d6f0b50345",
                "LibAsset.maxApproveERC20": "2763a92791c55d99853da524e26c2e6d",
                "LibAsset.getOwnBalance": "1b51ecb2290b6b3db4f241ddbeb65725",
                "LibAsset.isNativeAsset": "90f6c601dde5476497b7b77972e5160e",
                "LibAsset.isContract": "bb78c763a9d80ce729c9d29604464b86"
            },
            "md5": "36072e4c407701329d24d6c653f48e28"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20240716\\GasZipFacet\\src\\Helpers\\ReentrancyGuard.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20240716\\GasZipFacet\\src\\Helpers\\ReentrancyGuard.sol",
            "filename": "ReentrancyGuard.sol",
            "imported_contracts": {},
            "contracts": {
                "ReentrancyGuard": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": true,
                    "inherits": [],
                    "state_variables": {
                        "NAMESPACE": {
                            "type": "bytes32",
                            "visibility": "private",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "keccak256(\"com.lifi.reentrancyguard\")",
                            "content": "bytes32 private constant NAMESPACE = keccak256(\"com.lifi.reentrancyguard\");"
                        },
                        "_NOT_ENTERED": {
                            "type": "uint256",
                            "visibility": "private",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "0",
                            "content": "uint256 private constant _NOT_ENTERED = 0;"
                        },
                        "_ENTERED": {
                            "type": "uint256",
                            "visibility": "private",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "1",
                            "content": "uint256 private constant _ENTERED = 1;"
                        }
                    },
                    "functions": {
                        "reentrancyStorage": [
                            {
                                "visibility": "private",
                                "content": "function reentrancyStorage() private pure returns (ReentrancyStorage storage data){ bytes32 position = NAMESPACE; assembly{ data.slot := position}}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "ReentrancyStorage storage",
                                        "name": "data"
                                    }
                                ],
                                "reads": [
                                    [
                                        "NAMESPACE",
                                        "",
                                        "ReentrancyGuard"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "e7493193fca5c63e4efced6e82ef2d30"
                            }
                        ]
                    },
                    "modifiers": {
                        "nonReentrant": {
                            "parameters": [],
                            "content": "modifier nonReentrant(){ ReentrancyStorage storage s = reentrancyStorage(); if (s.status == _ENTERED) revert ReentrancyError(); s.status = _ENTERED; _; s.status = _NOT_ENTERED;}",
                            "reads": [
                                [
                                    "_NOT_ENTERED",
                                    "",
                                    "ReentrancyGuard"
                                ],
                                [
                                    "_ENTERED",
                                    "",
                                    "ReentrancyGuard"
                                ]
                            ],
                            "writes": [],
                            "external_calls": {
                                "__set__": true,
                                "values": [
                                    "ReentrancyGuard.ReentrancyError",
                                    "ReentrancyGuard.reentrancyStorage"
                                ]
                            },
                            "md5": "cc736cd29a0e50e5494e8b9dfb01c62c"
                        }
                    },
                    "structs": {
                        "ReentrancyStorage": {
                            "content": "ReentrancyStorage{ uint256 status;}"
                        }
                    },
                    "events": {},
                    "enums": {},
                    "errors": {
                        "ReentrancyError": {
                            "content": "ReentrancyError()"
                        }
                    },
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "ReentrancyGuard.reentrancyStorage": "e7493193fca5c63e4efced6e82ef2d30"
            },
            "md5": "3982c8fe19d0fa8ec23178ac7cfbafc8"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20240716\\GasZipFacet\\src\\Libraries\\LibAllowList.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20240716\\GasZipFacet\\src\\Libraries\\LibAllowList.sol",
            "filename": "LibAllowList.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20240716\\GasZipFacet\\src\\Errors\\GenericErrors.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "InvalidContract": {
                            "original_name": "InvalidContract",
                            "type": {
                                "__CT__": true,
                                "value": 15
                            }
                        }
                    }
                }
            },
            "contracts": {
                "LibAllowList": {
                    "type": {
                        "__CT__": true,
                        "value": 2
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "addAllowedContract": [
                            {
                                "visibility": "internal",
                                "content": "function addAllowedContract(address _contract) internal{ _checkAddress(_contract); AllowListStorage storage als = _getStorage(); if (als.allowlist[_contract]) return; als.allowlist[_contract] = true; als.contracts.push(_contract);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_contract"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LibAllowList._getStorage",
                                        "LibAllowList._checkAddress"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "ec77844e4b23238048d3c13c40cc0cca"
                            }
                        ],
                        "contractIsAllowed": [
                            {
                                "visibility": "internal",
                                "content": "function contractIsAllowed( address _contract ) internal view returns (bool){ return _getStorage().allowlist[_contract];}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_contract"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LibAllowList._getStorage"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "d74555f81a48803a7cebd25d0cd0272a"
                            }
                        ],
                        "removeAllowedContract": [
                            {
                                "visibility": "internal",
                                "content": "function removeAllowedContract(address _contract) internal{ AllowListStorage storage als = _getStorage(); if (!als.allowlist[_contract]){ return;} als.allowlist[_contract] = false; uint256 length = als.contracts.length; for (uint256 i = 0; i < length; i++){ if (als.contracts[i] == _contract){ als.contracts[i] = als.contracts[length - 1]; als.contracts.pop(); break;}}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_contract"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LibAllowList._getStorage"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "4975486e82bc91e22d187795276ea922"
                            }
                        ],
                        "getAllowedContracts": [
                            {
                                "visibility": "internal",
                                "content": "function getAllowedContracts() internal view returns (address[] memory){ return _getStorage().contracts;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address[] memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LibAllowList._getStorage"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "ac8b2a3daf334db977de0437ebe3f1fc"
                            }
                        ],
                        "addAllowedSelector": [
                            {
                                "visibility": "internal",
                                "content": "function addAllowedSelector(bytes4 _selector) internal{ _getStorage().selectorAllowList[_selector] = true;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "bytes4",
                                        "name": "_selector"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LibAllowList._getStorage"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "c87947d8526b5cd86d7d5d258cbbadf5"
                            }
                        ],
                        "removeAllowedSelector": [
                            {
                                "visibility": "internal",
                                "content": "function removeAllowedSelector(bytes4 _selector) internal{ _getStorage().selectorAllowList[_selector] = false;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "bytes4",
                                        "name": "_selector"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LibAllowList._getStorage"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "b0fa939c2be26c9c271d6ea19fbc3407"
                            }
                        ],
                        "selectorIsAllowed": [
                            {
                                "visibility": "internal",
                                "content": "function selectorIsAllowed(bytes4 _selector) internal view returns (bool){ return _getStorage().selectorAllowList[_selector];}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes4",
                                        "name": "_selector"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LibAllowList._getStorage"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "fc6a991a81be1a2c8c6c4ae4d5f4fb93"
                            }
                        ],
                        "_getStorage": [
                            {
                                "visibility": "internal",
                                "content": "function _getStorage() internal pure returns (AllowListStorage storage als){ bytes32 position = NAMESPACE; assembly{ als.slot := position}}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "AllowListStorage storage",
                                        "name": "als"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "65f97bfb6847a947373160c48c2e929d"
                            }
                        ],
                        "_checkAddress": [
                            {
                                "visibility": "private",
                                "content": "function _checkAddress(address _contract) private view{ if (_contract == address(0)) revert InvalidContract(); if (_contract.code.length == 0) revert InvalidContract();}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_contract"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LibAllowList.InvalidContract"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "0a7256ac835d0aa99148569726350d9e"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {
                        "AllowListStorage": {
                            "content": "AllowListStorage{ mapping(address => bool) allowlist; mapping(bytes4 => bool) selectorAllowList; address[] contracts;}"
                        }
                    },
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "LibAllowList._getStorage": "65f97bfb6847a947373160c48c2e929d",
                "LibAllowList._checkAddress": "0a7256ac835d0aa99148569726350d9e"
            },
            "md5": "bd344ed074ad289d8056d68b05f091a8"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20240716\\GasZipFacet\\src\\Helpers\\SwapperV2.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20240716\\GasZipFacet\\src\\Helpers\\SwapperV2.sol",
            "filename": "SwapperV2.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20240716\\GasZipFacet\\src\\Interfaces\\ILiFi.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "ILiFi": {
                            "original_name": "ILiFi",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20240716\\GasZipFacet\\src\\Libraries\\LibSwap.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "LibSwap": {
                            "original_name": "LibSwap",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20240716\\GasZipFacet\\src\\Libraries\\LibAsset.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "LibAsset": {
                            "original_name": "LibAsset",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20240716\\GasZipFacet\\src\\Libraries\\LibAllowList.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "LibAllowList": {
                            "original_name": "LibAllowList",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20240716\\GasZipFacet\\src\\Errors\\GenericErrors.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "ContractCallNotAllowed": {
                            "original_name": "ContractCallNotAllowed",
                            "type": {
                                "__CT__": true,
                                "value": 15
                            }
                        },
                        "NoSwapDataProvided": {
                            "original_name": "NoSwapDataProvided",
                            "type": {
                                "__CT__": true,
                                "value": 15
                            }
                        },
                        "CumulativeSlippageTooHigh": {
                            "original_name": "CumulativeSlippageTooHigh",
                            "type": {
                                "__CT__": true,
                                "value": 15
                            }
                        }
                    }
                }
            },
            "contracts": {
                "SwapperV2": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "ILiFi"
                    ],
                    "state_variables": {},
                    "functions": {
                        "_depositAndSwap": [
                            {
                                "visibility": "internal",
                                "content": "function _depositAndSwap( bytes32 _transactionId, uint256 _minAmount, LibSwap.SwapData[] calldata _swaps, address payable _leftoverReceiver ) internal returns (uint256){ uint256 numSwaps = _swaps.length; if (numSwaps == 0){ revert NoSwapDataProvided();} address finalTokenId = _swaps[numSwaps - 1].receivingAssetId; uint256 initialBalance = LibAsset.getOwnBalance(finalTokenId); if (LibAsset.isNativeAsset(finalTokenId)){ initialBalance -= msg.value;} uint256[] memory initialBalances = _fetchBalances(_swaps); LibAsset.depositAssets(_swaps); _executeSwaps( _transactionId, _swaps, _leftoverReceiver, initialBalances ); uint256 newBalance = LibAsset.getOwnBalance(finalTokenId) - initialBalance; if (newBalance < _minAmount){ revert CumulativeSlippageTooHigh(_minAmount, newBalance);} return newBalance;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "_transactionId"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_minAmount"
                                    },
                                    {
                                        "type": "LibSwap.SwapData[] calldata",
                                        "name": "_swaps"
                                    },
                                    {
                                        "type": "address payable",
                                        "name": "_leftoverReceiver"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LibAsset.depositAssets",
                                        "LibAsset.isNativeAsset",
                                        "SwapperV2._executeSwaps",
                                        "SwapperV2._fetchBalances",
                                        "SwapperV2.CumulativeSlippageTooHigh",
                                        "LibAsset.getOwnBalance",
                                        "SwapperV2.NoSwapDataProvided"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "cad1b7ec5a1ade21a548528517840b13"
                            },
                            {
                                "visibility": "internal",
                                "content": "function _depositAndSwap( bytes32 _transactionId, uint256 _minAmount, LibSwap.SwapData[] calldata _swaps, address payable _leftoverReceiver, uint256 _nativeReserve ) internal returns (uint256){ uint256 numSwaps = _swaps.length; if (numSwaps == 0){ revert NoSwapDataProvided();} address finalTokenId = _swaps[numSwaps - 1].receivingAssetId; uint256 initialBalance = LibAsset.getOwnBalance(finalTokenId); if (LibAsset.isNativeAsset(finalTokenId)){ initialBalance -= msg.value;} uint256[] memory initialBalances = _fetchBalances(_swaps); LibAsset.depositAssets(_swaps); ReserveData memory rd = ReserveData( _transactionId, _leftoverReceiver, _nativeReserve ); _executeSwaps(rd, _swaps, initialBalances); uint256 newBalance = LibAsset.getOwnBalance(finalTokenId) - initialBalance; if (LibAsset.isNativeAsset(finalTokenId)){ newBalance -= _nativeReserve;} if (newBalance < _minAmount){ revert CumulativeSlippageTooHigh(_minAmount, newBalance);} return newBalance;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "_transactionId"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_minAmount"
                                    },
                                    {
                                        "type": "LibSwap.SwapData[] calldata",
                                        "name": "_swaps"
                                    },
                                    {
                                        "type": "address payable",
                                        "name": "_leftoverReceiver"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_nativeReserve"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LibAsset.depositAssets",
                                        "LibAsset.isNativeAsset",
                                        "SwapperV2._executeSwaps",
                                        "SwapperV2._fetchBalances",
                                        "SwapperV2.CumulativeSlippageTooHigh",
                                        "LibAsset.getOwnBalance",
                                        "SwapperV2.NoSwapDataProvided"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "0f1c111ab2ce17c0262e7939c3341712"
                            }
                        ],
                        "_executeSwaps": [
                            {
                                "visibility": "internal",
                                "content": "function _executeSwaps( bytes32 _transactionId, LibSwap.SwapData[] calldata _swaps, address payable _leftoverReceiver, uint256[] memory _initialBalances ) internal noLeftovers(_swaps, _leftoverReceiver, _initialBalances){ uint256 numSwaps = _swaps.length; for (uint256 i = 0; i < numSwaps; ){ LibSwap.SwapData calldata currentSwap = _swaps[i]; if ( !((LibAsset.isNativeAsset(currentSwap.sendingAssetId) || LibAllowList.contractIsAllowed(currentSwap.approveTo)) && LibAllowList.contractIsAllowed(currentSwap.callTo) && LibAllowList.selectorIsAllowed( bytes4(currentSwap.callData[:4]) )) ) revert ContractCallNotAllowed(); LibSwap.swap(_transactionId, currentSwap); unchecked{ ++i;}}}",
                                "modifiers": [
                                    "noLeftovers(_swaps, _leftoverReceiver, _initialBalances)"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "_transactionId"
                                    },
                                    {
                                        "type": "LibSwap.SwapData[] calldata",
                                        "name": "_swaps"
                                    },
                                    {
                                        "type": "address payable",
                                        "name": "_leftoverReceiver"
                                    },
                                    {
                                        "type": "uint256[] memory",
                                        "name": "_initialBalances"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LibAllowList.selectorIsAllowed",
                                        "LibAllowList.contractIsAllowed",
                                        "LibSwap.swap",
                                        "SwapperV2.noLeftovers",
                                        "SwapperV2.ContractCallNotAllowed",
                                        "SwapperV2.noLeftoversReserve",
                                        "LibAsset.isNativeAsset"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "e28cb630e303f8d21814e20811e66e5b"
                            },
                            {
                                "visibility": "internal",
                                "content": "function _executeSwaps( ReserveData memory _reserveData, LibSwap.SwapData[] calldata _swaps, uint256[] memory _initialBalances ) internal noLeftoversReserve( _swaps, _reserveData.leftoverReceiver, _initialBalances, _reserveData.nativeReserve ){ uint256 numSwaps = _swaps.length; for (uint256 i = 0; i < numSwaps; ){ LibSwap.SwapData calldata currentSwap = _swaps[i]; if ( !((LibAsset.isNativeAsset(currentSwap.sendingAssetId) || LibAllowList.contractIsAllowed(currentSwap.approveTo)) && LibAllowList.contractIsAllowed(currentSwap.callTo) && LibAllowList.selectorIsAllowed( bytes4(currentSwap.callData[:4]) )) ) revert ContractCallNotAllowed(); LibSwap.swap(_reserveData.transactionId, currentSwap); unchecked{ ++i;}}}",
                                "modifiers": [
                                    "noLeftoversReserve( _swaps, _reserveData.leftoverReceiver, _initialBalances, _reserveData.nativeReserve )"
                                ],
                                "parameters": [
                                    {
                                        "type": "ReserveData memory",
                                        "name": "_reserveData"
                                    },
                                    {
                                        "type": "LibSwap.SwapData[] calldata",
                                        "name": "_swaps"
                                    },
                                    {
                                        "type": "uint256[] memory",
                                        "name": "_initialBalances"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LibAllowList.selectorIsAllowed",
                                        "LibAllowList.contractIsAllowed",
                                        "LibSwap.swap",
                                        "SwapperV2.noLeftovers",
                                        "SwapperV2.ContractCallNotAllowed",
                                        "SwapperV2.noLeftoversReserve",
                                        "LibAsset.isNativeAsset"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "b447302c1eb2bc40d5b4e404737dd6e6"
                            }
                        ],
                        "_fetchBalances": [
                            {
                                "visibility": "private",
                                "content": "function _fetchBalances( LibSwap.SwapData[] calldata _swaps ) private view returns (uint256[] memory){ uint256 numSwaps = _swaps.length; uint256[] memory balances = new uint256[](numSwaps); address asset; for (uint256 i = 0; i < numSwaps; ){ asset = _swaps[i].receivingAssetId; balances[i] = LibAsset.getOwnBalance(asset); if (LibAsset.isNativeAsset(asset)){ balances[i] -= msg.value;} unchecked{ ++i;}} return balances;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "LibSwap.SwapData[] calldata",
                                        "name": "_swaps"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256[] memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LibAsset.getOwnBalance",
                                        "LibAsset.isNativeAsset"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "800b05b182fe4dc359006c9d246831de"
                            }
                        ]
                    },
                    "modifiers": {
                        "noLeftovers": {
                            "parameters": [
                                {
                                    "type": "LibSwap.SwapData[] calldata",
                                    "name": "_swaps"
                                },
                                {
                                    "type": "address payable",
                                    "name": "_leftoverReceiver"
                                },
                                {
                                    "type": "uint256[] memory",
                                    "name": "_initialBalances"
                                }
                            ],
                            "content": "modifier noLeftovers( LibSwap.SwapData[] calldata _swaps, address payable _leftoverReceiver, uint256[] memory _initialBalances ){ uint256 numSwaps = _swaps.length; if (numSwaps != 1){ address finalAsset = _swaps[numSwaps - 1].receivingAssetId; uint256 curBalance; _; for (uint256 i = 0; i < numSwaps - 1; ){ address curAsset = _swaps[i].receivingAssetId; if (curAsset != finalAsset){ curBalance = LibAsset.getOwnBalance(curAsset) - _initialBalances[i]; if (curBalance > 0){ LibAsset.transferAsset( curAsset, _leftoverReceiver, curBalance );}} unchecked{ ++i;}}} else{ _;}}",
                            "reads": [],
                            "writes": [],
                            "external_calls": {
                                "__set__": true,
                                "values": [
                                    "LibAsset.getOwnBalance",
                                    "LibAsset.transferAsset"
                                ]
                            },
                            "md5": "da817093e82e82c621a47a137fdde2d0"
                        },
                        "noLeftoversReserve": {
                            "parameters": [
                                {
                                    "type": "LibSwap.SwapData[] calldata",
                                    "name": "_swaps"
                                },
                                {
                                    "type": "address payable",
                                    "name": "_leftoverReceiver"
                                },
                                {
                                    "type": "uint256[] memory",
                                    "name": "_initialBalances"
                                },
                                {
                                    "type": "uint256",
                                    "name": "_nativeReserve"
                                }
                            ],
                            "content": "modifier noLeftoversReserve( LibSwap.SwapData[] calldata _swaps, address payable _leftoverReceiver, uint256[] memory _initialBalances, uint256 _nativeReserve ){ uint256 numSwaps = _swaps.length; if (numSwaps != 1){ address finalAsset = _swaps[numSwaps - 1].receivingAssetId; uint256 curBalance; _; for (uint256 i = 0; i < numSwaps - 1; ){ address curAsset = _swaps[i].receivingAssetId; if (curAsset != finalAsset){ curBalance = LibAsset.getOwnBalance(curAsset) - _initialBalances[i]; uint256 reserve = LibAsset.isNativeAsset(curAsset) ? _nativeReserve : 0; if (curBalance > 0){ LibAsset.transferAsset( curAsset, _leftoverReceiver, curBalance - reserve );}} unchecked{ ++i;}}} else{ _;}}",
                            "reads": [],
                            "writes": [],
                            "external_calls": {
                                "__set__": true,
                                "values": [
                                    "LibAsset.getOwnBalance",
                                    "LibAsset.transferAsset",
                                    "LibAsset.isNativeAsset"
                                ]
                            },
                            "md5": "f7b0b67672a099ad7b2c708452ed3119"
                        },
                        "refundExcessNative": {
                            "parameters": [
                                {
                                    "type": "address payable",
                                    "name": "_refundReceiver"
                                }
                            ],
                            "content": "modifier refundExcessNative(address payable _refundReceiver){ uint256 initialBalance = address(this).balance - msg.value; _; uint256 finalBalance = address(this).balance; if (finalBalance > initialBalance){ LibAsset.transferAsset( LibAsset.NATIVE_ASSETID, _refundReceiver, finalBalance - initialBalance );}}",
                            "reads": [
                                [
                                    "NATIVE_ASSETID",
                                    "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20240716\\GasZipFacet\\src\\Libraries\\LibAsset.sol",
                                    "LibAsset"
                                ]
                            ],
                            "writes": [],
                            "external_calls": {
                                "__set__": true,
                                "values": [
                                    "LibAsset.transferAsset"
                                ]
                            },
                            "md5": "0187cc69618da51a09c88650b1e643e3"
                        }
                    },
                    "structs": {
                        "ReserveData": {
                            "content": "ReserveData{ bytes32 transactionId; address payable leftoverReceiver; uint256 nativeReserve;}"
                        }
                    },
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "LibAsset.transferAsset": "23099f43e12b67b01f34f2ffda244552",
                "LibAsset.getOwnBalance": "1b51ecb2290b6b3db4f241ddbeb65725",
                "LibAsset.isNativeAsset": "90f6c601dde5476497b7b77972e5160e",
                "SwapperV2._fetchBalances": "800b05b182fe4dc359006c9d246831de",
                "SwapperV2._executeSwaps": "e28cb630e303f8d21814e20811e66e5b",
                "LibAsset.depositAssets": "df2cbb91d3ef48361e4950c0525a9178",
                "LibAllowList.contractIsAllowed": "d74555f81a48803a7cebd25d0cd0272a",
                "LibAllowList.selectorIsAllowed": "fc6a991a81be1a2c8c6c4ae4d5f4fb93",
                "LibSwap.swap": "c72e28a0b0bba4e62d9df514099bd3d5",
                "SwapperV2.noLeftoversReserve": "f7b0b67672a099ad7b2c708452ed3119",
                "SwapperV2.noLeftovers": "da817093e82e82c621a47a137fdde2d0"
            },
            "md5": "5c804830e935cd709abdee9040234d39"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20240716\\GasZipFacet\\src\\Helpers\\Validatable.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20240716\\GasZipFacet\\src\\Helpers\\Validatable.sol",
            "filename": "Validatable.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20240716\\GasZipFacet\\src\\Libraries\\LibAsset.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "LibAsset": {
                            "original_name": "LibAsset",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20240716\\GasZipFacet\\src\\Libraries\\LibUtil.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "LibUtil": {
                            "original_name": "LibUtil",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20240716\\GasZipFacet\\src\\Errors\\GenericErrors.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "InvalidReceiver": {
                            "original_name": "InvalidReceiver",
                            "type": {
                                "__CT__": true,
                                "value": 15
                            }
                        },
                        "InformationMismatch": {
                            "original_name": "InformationMismatch",
                            "type": {
                                "__CT__": true,
                                "value": 15
                            }
                        },
                        "InvalidSendingToken": {
                            "original_name": "InvalidSendingToken",
                            "type": {
                                "__CT__": true,
                                "value": 15
                            }
                        },
                        "InvalidAmount": {
                            "original_name": "InvalidAmount",
                            "type": {
                                "__CT__": true,
                                "value": 15
                            }
                        },
                        "NativeAssetNotSupported": {
                            "original_name": "NativeAssetNotSupported",
                            "type": {
                                "__CT__": true,
                                "value": 15
                            }
                        },
                        "InvalidDestinationChain": {
                            "original_name": "InvalidDestinationChain",
                            "type": {
                                "__CT__": true,
                                "value": 15
                            }
                        },
                        "CannotBridgeToSameNetwork": {
                            "original_name": "CannotBridgeToSameNetwork",
                            "type": {
                                "__CT__": true,
                                "value": 15
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20240716\\GasZipFacet\\src\\Interfaces\\ILiFi.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "ILiFi": {
                            "original_name": "ILiFi",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20240716\\GasZipFacet\\src\\Libraries\\LibSwap.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "LibSwap": {
                            "original_name": "LibSwap",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                }
            },
            "contracts": {
                "Validatable": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {},
                    "modifiers": {
                        "validateBridgeData": {
                            "parameters": [
                                {
                                    "type": "ILiFi.BridgeData memory",
                                    "name": "_bridgeData"
                                }
                            ],
                            "content": "modifier validateBridgeData(ILiFi.BridgeData memory _bridgeData){ if (LibUtil.isZeroAddress(_bridgeData.receiver)){ revert InvalidReceiver();} if (_bridgeData.minAmount == 0){ revert InvalidAmount();} if (_bridgeData.destinationChainId == block.chainid){ revert CannotBridgeToSameNetwork();} _;}",
                            "reads": [],
                            "writes": [],
                            "external_calls": {
                                "__set__": true,
                                "values": [
                                    "Validatable.InvalidReceiver",
                                    "LibUtil.isZeroAddress",
                                    "Validatable.CannotBridgeToSameNetwork",
                                    "Validatable.InvalidAmount"
                                ]
                            },
                            "md5": "c982dbf1de1c4474f879f81ec654c610"
                        },
                        "noNativeAsset": {
                            "parameters": [
                                {
                                    "type": "ILiFi.BridgeData memory",
                                    "name": "_bridgeData"
                                }
                            ],
                            "content": "modifier noNativeAsset(ILiFi.BridgeData memory _bridgeData){ if (LibAsset.isNativeAsset(_bridgeData.sendingAssetId)){ revert NativeAssetNotSupported();} _;}",
                            "reads": [],
                            "writes": [],
                            "external_calls": {
                                "__set__": true,
                                "values": [
                                    "Validatable.NativeAssetNotSupported",
                                    "LibAsset.isNativeAsset"
                                ]
                            },
                            "md5": "7e5620556eb913254487a16b2d2229b8"
                        },
                        "onlyAllowSourceToken": {
                            "parameters": [
                                {
                                    "type": "ILiFi.BridgeData memory",
                                    "name": "_bridgeData"
                                },
                                {
                                    "type": "address",
                                    "name": "_token"
                                }
                            ],
                            "content": "modifier onlyAllowSourceToken( ILiFi.BridgeData memory _bridgeData, address _token ){ if (_bridgeData.sendingAssetId != _token){ revert InvalidSendingToken();} _;}",
                            "reads": [],
                            "writes": [],
                            "external_calls": {
                                "__set__": true,
                                "values": [
                                    "Validatable.InvalidSendingToken"
                                ]
                            },
                            "md5": "9572ff4aa15342d9683017d50abd994e"
                        },
                        "onlyAllowDestinationChain": {
                            "parameters": [
                                {
                                    "type": "ILiFi.BridgeData memory",
                                    "name": "_bridgeData"
                                },
                                {
                                    "type": "uint256",
                                    "name": "_chainId"
                                }
                            ],
                            "content": "modifier onlyAllowDestinationChain( ILiFi.BridgeData memory _bridgeData, uint256 _chainId ){ if (_bridgeData.destinationChainId != _chainId){ revert InvalidDestinationChain();} _;}",
                            "reads": [],
                            "writes": [],
                            "external_calls": {
                                "__set__": true,
                                "values": [
                                    "Validatable.InvalidDestinationChain"
                                ]
                            },
                            "md5": "9bc1cc385ba9f2c5f352aaffd917dbca"
                        },
                        "containsSourceSwaps": {
                            "parameters": [
                                {
                                    "type": "ILiFi.BridgeData memory",
                                    "name": "_bridgeData"
                                }
                            ],
                            "content": "modifier containsSourceSwaps(ILiFi.BridgeData memory _bridgeData){ if (!_bridgeData.hasSourceSwaps){ revert InformationMismatch();} _;}",
                            "reads": [],
                            "writes": [],
                            "external_calls": {
                                "__set__": true,
                                "values": [
                                    "Validatable.InformationMismatch"
                                ]
                            },
                            "md5": "8c3bbc390a841d4f0601ea2f970a78ec"
                        },
                        "doesNotContainSourceSwaps": {
                            "parameters": [
                                {
                                    "type": "ILiFi.BridgeData memory",
                                    "name": "_bridgeData"
                                }
                            ],
                            "content": "modifier doesNotContainSourceSwaps(ILiFi.BridgeData memory _bridgeData){ if (_bridgeData.hasSourceSwaps){ revert InformationMismatch();} _;}",
                            "reads": [],
                            "writes": [],
                            "external_calls": {
                                "__set__": true,
                                "values": [
                                    "Validatable.InformationMismatch"
                                ]
                            },
                            "md5": "b19939d9ff74cfdd7a3f41ff63361ce2"
                        },
                        "doesNotContainDestinationCalls": {
                            "parameters": [
                                {
                                    "type": "ILiFi.BridgeData memory",
                                    "name": "_bridgeData"
                                }
                            ],
                            "content": "modifier doesNotContainDestinationCalls( ILiFi.BridgeData memory _bridgeData ){ if (_bridgeData.hasDestinationCall){ revert InformationMismatch();} _;}",
                            "reads": [],
                            "writes": [],
                            "external_calls": {
                                "__set__": true,
                                "values": [
                                    "Validatable.InformationMismatch"
                                ]
                            },
                            "md5": "6ee01eea5e8d8aa0663a9c919e3cb6a5"
                        }
                    },
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "LibUtil.isZeroAddress": "35714e15bc97d454030e7138343889b5",
                "LibAsset.isNativeAsset": "90f6c601dde5476497b7b77972e5160e"
            },
            "md5": "fb75035c0438e433ca9174ec36da217b"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20240716\\GasZipFacet\\src\\Facets\\GasZipFacet.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20240716\\GasZipFacet\\src\\Facets\\GasZipFacet.sol",
            "filename": "GasZipFacet.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20240716\\GasZipFacet\\src\\Interfaces\\ILiFi.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "ILiFi": {
                            "original_name": "ILiFi",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20240716\\GasZipFacet\\src\\Libraries\\LibSwap.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "LibSwap": {
                            "original_name": "LibSwap",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20240716\\GasZipFacet\\src\\Libraries\\LibAsset.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "LibAsset": {
                            "original_name": "LibAsset",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20240716\\GasZipFacet\\src\\Helpers\\ReentrancyGuard.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "ReentrancyGuard": {
                            "original_name": "ReentrancyGuard",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20240716\\GasZipFacet\\src\\Helpers\\SwapperV2.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "SwapperV2": {
                            "original_name": "SwapperV2",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20240716\\GasZipFacet\\src\\Helpers\\Validatable.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "Validatable": {
                            "original_name": "Validatable",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20240716\\GasZipFacet\\lib\\solady\\src\\utils\\SafeTransferLib.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "SafeTransferLib": {
                            "original_name": "SafeTransferLib",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20240716\\GasZipFacet\\lib\\solady\\src\\tokens\\ERC20.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "ERC20": {
                            "original_name": "ERC20",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20240716\\GasZipFacet\\src\\Errors\\GenericErrors.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "NativeAssetTransferFailed": {
                            "original_name": "NativeAssetTransferFailed",
                            "type": {
                                "__CT__": true,
                                "value": 15
                            }
                        },
                        "InvalidCallData": {
                            "original_name": "InvalidCallData",
                            "type": {
                                "__CT__": true,
                                "value": 15
                            }
                        }
                    }
                }
            },
            "contracts": {
                "IGasZip": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "deposit": [
                            {
                                "visibility": "external",
                                "content": "function deposit( uint256 destinationChains, address recipient ) external payable;",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "destinationChains"
                                    },
                                    {
                                        "type": "address",
                                        "name": "recipient"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": true,
                                "md5": "7c913498bfacdab6908c9eb8cd7ddbdf"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                },
                "GasZipFacet": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "ILiFi",
                        "ReentrancyGuard",
                        "SwapperV2",
                        "Validatable"
                    ],
                    "state_variables": {
                        "gasZipRouter": {
                            "type": "IGasZip",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": null,
                            "content": "IGasZip public immutable gasZipRouter;"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (address _gasZipRouter){ gasZipRouter = IGasZip(_gasZipRouter);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_gasZipRouter"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "gasZipRouter",
                                        "",
                                        "GasZipFacet"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "gasZipRouter",
                                        "",
                                        "GasZipFacet"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "81d69d830fd9ac98cb12d7dd253fbe6c"
                            }
                        ],
                        "startBridgeTokensViaGasZip": [
                            {
                                "visibility": "external",
                                "content": "function startBridgeTokensViaGasZip( ILiFi.BridgeData memory _bridgeData, GasZipData calldata _gasZipData ) external payable nonReentrant refundExcessNative(payable(msg.sender)) validateBridgeData(_bridgeData) doesNotContainSourceSwaps(_bridgeData) doesNotContainDestinationCalls(_bridgeData){ if (!LibAsset.isNativeAsset(_bridgeData.sendingAssetId)) revert InvalidCallData(); depositToGasZipNative( _bridgeData.minAmount, _gasZipData.gasZipChainId, _bridgeData.receiver ); emit LiFiTransferStarted(_bridgeData);}",
                                "modifiers": [
                                    "payable",
                                    "nonReentrant",
                                    "refundExcessNative(payable(msg.sender))",
                                    "validateBridgeData(_bridgeData)",
                                    "doesNotContainSourceSwaps(_bridgeData)",
                                    "doesNotContainDestinationCalls(_bridgeData)"
                                ],
                                "parameters": [
                                    {
                                        "type": "ILiFi.BridgeData memory",
                                        "name": "_bridgeData"
                                    },
                                    {
                                        "type": "GasZipData calldata",
                                        "name": "_gasZipData"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "GasZipFacet.depositToGasZipNative",
                                        "GasZipFacet.doesNotContainDestinationCalls",
                                        "GasZipFacet.refundExcessNative",
                                        "GasZipFacet.nonReentrant",
                                        "GasZipFacet.InvalidCallData",
                                        "GasZipFacet.doesNotContainSourceSwaps",
                                        "GasZipFacet.LiFiTransferStarted",
                                        "GasZipFacet.validateBridgeData",
                                        "LibAsset.isNativeAsset"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "13c2f57b461e7497b2ae89601a9cd47a"
                            }
                        ],
                        "swapAndStartBridgeTokensViaGasZip": [
                            {
                                "visibility": "external",
                                "content": "function swapAndStartBridgeTokensViaGasZip( ILiFi.BridgeData memory _bridgeData, LibSwap.SwapData[] calldata _swapData, GasZipData calldata _gasZipData ) external payable nonReentrant refundExcessNative(payable(msg.sender)) containsSourceSwaps(_bridgeData) doesNotContainDestinationCalls(_bridgeData) validateBridgeData(_bridgeData){ if (LibAsset.isNativeAsset(_bridgeData.sendingAssetId)) revert InvalidCallData(); _bridgeData.minAmount = _depositAndSwap( _bridgeData.transactionId, _bridgeData.minAmount, _swapData, payable(msg.sender) ); depositToGasZipNative( _bridgeData.minAmount, _gasZipData.gasZipChainId, _bridgeData.receiver ); emit LiFiTransferStarted(_bridgeData);}",
                                "modifiers": [
                                    "payable",
                                    "nonReentrant",
                                    "refundExcessNative(payable(msg.sender))",
                                    "containsSourceSwaps(_bridgeData)",
                                    "doesNotContainDestinationCalls(_bridgeData)",
                                    "validateBridgeData(_bridgeData)"
                                ],
                                "parameters": [
                                    {
                                        "type": "ILiFi.BridgeData memory",
                                        "name": "_bridgeData"
                                    },
                                    {
                                        "type": "LibSwap.SwapData[] calldata",
                                        "name": "_swapData"
                                    },
                                    {
                                        "type": "GasZipData calldata",
                                        "name": "_gasZipData"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "GasZipFacet.depositToGasZipNative",
                                        "GasZipFacet.doesNotContainDestinationCalls",
                                        "GasZipFacet.refundExcessNative",
                                        "GasZipFacet._depositAndSwap",
                                        "GasZipFacet.InvalidCallData",
                                        "GasZipFacet.containsSourceSwaps",
                                        "GasZipFacet.nonReentrant",
                                        "GasZipFacet.LiFiTransferStarted",
                                        "GasZipFacet.validateBridgeData",
                                        "LibAsset.isNativeAsset"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "bd3abda2c7672c4d35ca990fa3885547"
                            }
                        ],
                        "depositToGasZipERC20": [
                            {
                                "visibility": "public",
                                "content": "function depositToGasZipERC20( LibSwap.SwapData calldata _swapData, uint256 _destinationChains, address _recipient ) public{ uint256 currentNativeBalance = address(this).balance; LibSwap.swap(0, _swapData); uint256 swapOutputAmount = address(this).balance - currentNativeBalance; gasZipRouter.deposit{ value: swapOutputAmount} ( _destinationChains, _recipient );}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "LibSwap.SwapData calldata",
                                        "name": "_swapData"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_destinationChains"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_recipient"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "gasZipRouter",
                                        "",
                                        "GasZipFacet"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LibSwap.swap"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "4d55dbe900e6b5f61dd13cbae36db1e3"
                            }
                        ],
                        "depositToGasZipNative": [
                            {
                                "visibility": "public",
                                "content": "function depositToGasZipNative( uint256 _amountToZip, uint256 _destinationChains, address _recipient ) public payable{ gasZipRouter.deposit{ value: _amountToZip} ( _destinationChains, _recipient );}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "_amountToZip"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_destinationChains"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_recipient"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "gasZipRouter",
                                        "",
                                        "GasZipFacet"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": true,
                                "md5": "72cf710654fa4374d3d8e6aafac4997c"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {
                        "GasZipData": {
                            "content": "GasZipData{ uint256 gasZipChainId;}"
                        }
                    },
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "address": "SafeTransferLib"
                    }
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "GasZipFacet.depositToGasZipNative": "72cf710654fa4374d3d8e6aafac4997c",
                "GasZipFacet.doesNotContainDestinationCalls": "6ee01eea5e8d8aa0663a9c919e3cb6a5",
                "GasZipFacet.validateBridgeData": "c982dbf1de1c4474f879f81ec654c610",
                "LibAsset.isNativeAsset": "90f6c601dde5476497b7b77972e5160e",
                "GasZipFacet.nonReentrant": "cc736cd29a0e50e5494e8b9dfb01c62c",
                "GasZipFacet.refundExcessNative": "0187cc69618da51a09c88650b1e643e3",
                "GasZipFacet.doesNotContainSourceSwaps": "b19939d9ff74cfdd7a3f41ff63361ce2",
                "GasZipFacet._depositAndSwap": "cad1b7ec5a1ade21a548528517840b13",
                "GasZipFacet.containsSourceSwaps": "8c3bbc390a841d4f0601ea2f970a78ec",
                "LibSwap.swap": "c72e28a0b0bba4e62d9df514099bd3d5"
            },
            "md5": "717cfdbafee93c75c41eb52298a28fcb"
        }
    },
    "handled_md5": {
        "__set__": true,
        "values": [
            "b76ef513a415fc0cafbd46561661f992",
            "3982c8fe19d0fa8ec23178ac7cfbafc8",
            "d9796ff88e818f07072c01a0ca56e158",
            "bd344ed074ad289d8056d68b05f091a8",
            "36072e4c407701329d24d6c653f48e28",
            "717cfdbafee93c75c41eb52298a28fcb",
            "e98de1da5e0db7ab62bb88dc57e00b4f",
            "6139cc76125075177db902b8ee30914c",
            "b9e9a80fb3f54fa889e8312f166511fc",
            "5c804830e935cd709abdee9040234d39",
            "fb75035c0438e433ca9174ec36da217b",
            "68dc72edde5cd7b4ed473aa10c7bd63f",
            "d01b2085c967281b5836449ebc3a3819",
            "4f5a6677a0dd96ef5b9b8281c354cfc5",
            "6ae3cb0bfea33a161b04e94f2e82c4b1",
            "81dbccc1c4c22369d5d81fff866feef4",
            "21a42839196479bf2edb54cd94617c46"
        ]
    }
}