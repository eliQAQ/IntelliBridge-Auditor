{
    "solidity_file": {
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\Migrations.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\Migrations.sol",
            "filename": "Migrations.sol",
            "imported_contracts": {},
            "contracts": {
                "Migrations": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {
                        "owner": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public owner;"
                        },
                        "last_completed_migration": {
                            "type": "uint",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint public last_completed_migration;"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor () public{ owner = msg.sender;}",
                                "modifiers": [],
                                "parameters": [],
                                "returns": [],
                                "reads": [
                                    [
                                        "owner",
                                        "",
                                        "Migrations"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "owner",
                                        "",
                                        "Migrations"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "9625e0e2e3e379dfaee2698a14e1513f"
                            }
                        ],
                        "setCompleted": [
                            {
                                "visibility": "public",
                                "content": "function setCompleted(uint completed) public restricted{ last_completed_migration = completed;}",
                                "modifiers": [
                                    "restricted"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "completed"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "last_completed_migration",
                                        "",
                                        "Migrations"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "last_completed_migration",
                                        "",
                                        "Migrations"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Migrations.restricted"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "d0731d38953dc52e117f1d10c1585a1f"
                            }
                        ],
                        "upgrade": [
                            {
                                "visibility": "public",
                                "content": "function upgrade(address new_address) public restricted{ Migrations upgraded = Migrations(new_address); upgraded.setCompleted(last_completed_migration);}",
                                "modifiers": [
                                    "restricted"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "new_address"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "last_completed_migration",
                                        "",
                                        "Migrations"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Migrations.setCompleted",
                                        "Migrations.restricted"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "baf4c7b409fb8fa8d6f06d36c8b432c8"
                            }
                        ]
                    },
                    "modifiers": {
                        "restricted": {
                            "parameters": [],
                            "content": "modifier restricted(){ if (msg.sender == owner) _;}",
                            "reads": [
                                [
                                    "owner",
                                    "",
                                    "Migrations"
                                ]
                            ],
                            "writes": [],
                            "external_calls": [],
                            "md5": "d1b880978dae9d1e67abfe6b28642946"
                        }
                    },
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "Migrations.restricted": "d1b880978dae9d1e67abfe6b28642946",
                "Migrations.setCompleted": "d0731d38953dc52e117f1d10c1585a1f"
            },
            "md5": "0f8d3da70b0281e413948947313d954e"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\GSN\\Context.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\GSN\\Context.sol",
            "filename": "Context.sol",
            "imported_contracts": {},
            "contracts": {
                "Context": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "internal",
                                "content": "constructor () internal{}",
                                "modifiers": [],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "2a23d0858cde090e7b199aa638ffd5dd"
                            }
                        ],
                        "_msgSender": [
                            {
                                "visibility": "internal",
                                "content": "function _msgSender() internal view returns (address payable){ return msg.sender;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address payable",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "a9b7db3c77abe3957815043d4f2458b9"
                            }
                        ],
                        "_msgData": [
                            {
                                "visibility": "internal",
                                "content": "function _msgData() internal view returns (bytes memory){ this; return msg.data;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "2b2ce6b0dd727ef0cc3f42de9b60e2df"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "e2ba41d5770739481d8ec4269500a2a7"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\common\\ZeroCopySource.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\common\\ZeroCopySource.sol",
            "filename": "ZeroCopySource.sol",
            "imported_contracts": {},
            "contracts": {
                "ZeroCopySource": {
                    "type": {
                        "__CT__": true,
                        "value": 2
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "NextBool": [
                            {
                                "visibility": "internal",
                                "content": "function NextBool(bytes memory buff, uint256 offset) internal pure returns(bool, uint256){ require(offset + 1 <= buff.length && offset < offset + 1, \"Offset exceeds limit\"); byte v; assembly{ v := mload(add(add(buff, 0x20), offset))} bool value; if (v == 0x01){ value = true;} else if (v == 0x00){ value = false;} else{ revert(\"NextBool value error \");} return (value, offset + 1);}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "buff"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "offset"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    },
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "23e3ade68faa32847245c5868760b872"
                            }
                        ],
                        "NextByte": [
                            {
                                "visibility": "internal",
                                "content": "function NextByte(bytes memory buff, uint256 offset) internal pure returns (byte, uint256){ require(offset + 1 <= buff.length && offset < offset + 1, \"NextByte, Offset exceeds maximum\"); byte v; assembly{ v := mload(add(add(buff, 0x20), offset))} return (v, offset + 1);}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "buff"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "offset"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "byte",
                                        "name": null
                                    },
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "15c7c85b500b67ae408d4028208791c2"
                            }
                        ],
                        "NextUint8": [
                            {
                                "visibility": "internal",
                                "content": "function NextUint8(bytes memory buff, uint256 offset) internal pure returns (uint8, uint256){ require(offset + 1 <= buff.length && offset < offset + 1, \"NextUint8, Offset exceeds maximum\"); uint8 v; assembly{ let tmpbytes := mload(0x40) let bvalue := mload(add(add(buff, 0x20), offset)) mstore8(tmpbytes, byte(0, bvalue)) mstore(0x40, add(tmpbytes, 0x01)) v := mload(sub(tmpbytes, 0x1f))} return (v, offset + 1);}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "buff"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "offset"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint8",
                                        "name": null
                                    },
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "322bfbf55919ba69331f0fdc0cb602ac"
                            }
                        ],
                        "NextUint16": [
                            {
                                "visibility": "internal",
                                "content": "function NextUint16(bytes memory buff, uint256 offset) internal pure returns (uint16, uint256){ require(offset + 2 <= buff.length && offset < offset + 2, \"NextUint16, offset exceeds maximum\"); uint16 v; assembly{ let tmpbytes := mload(0x40) let bvalue := mload(add(add(buff, 0x20), offset)) mstore8(tmpbytes, byte(0x01, bvalue)) mstore8(add(tmpbytes, 0x01), byte(0, bvalue)) mstore(0x40, add(tmpbytes, 0x02)) v := mload(sub(tmpbytes, 0x1e))} return (v, offset + 2);}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "buff"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "offset"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint16",
                                        "name": null
                                    },
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "372b9d31a2b019ca542bab130d4cb153"
                            }
                        ],
                        "NextUint32": [
                            {
                                "visibility": "internal",
                                "content": "function NextUint32(bytes memory buff, uint256 offset) internal pure returns (uint32, uint256){ require(offset + 4 <= buff.length && offset < offset + 4, \"NextUint32, offset exceeds maximum\"); uint32 v; assembly{ let tmpbytes := mload(0x40) let byteLen := 0x04 for{ let tindex := 0x00 let bindex := sub(byteLen, 0x01) let bvalue := mload(add(add(buff, 0x20), offset))} lt(tindex, byteLen){ tindex := add(tindex, 0x01) bindex := sub(bindex, 0x01)}{ mstore8(add(tmpbytes, tindex), byte(bindex, bvalue))} mstore(0x40, add(tmpbytes, byteLen)) v := mload(sub(tmpbytes, sub(0x20, byteLen)))} return (v, offset + 4);}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "buff"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "offset"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint32",
                                        "name": null
                                    },
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "81b54c1cec3975b9e9f153bd6e5b4c2e"
                            }
                        ],
                        "NextUint64": [
                            {
                                "visibility": "internal",
                                "content": "function NextUint64(bytes memory buff, uint256 offset) internal pure returns (uint64, uint256){ require(offset + 8 <= buff.length && offset < offset + 8, \"NextUint64, offset exceeds maximum\"); uint64 v; assembly{ let tmpbytes := mload(0x40) let byteLen := 0x08 for{ let tindex := 0x00 let bindex := sub(byteLen, 0x01) let bvalue := mload(add(add(buff, 0x20), offset))} lt(tindex, byteLen){ tindex := add(tindex, 0x01) bindex := sub(bindex, 0x01)}{ mstore8(add(tmpbytes, tindex), byte(bindex, bvalue))} mstore(0x40, add(tmpbytes, byteLen)) v := mload(sub(tmpbytes, sub(0x20, byteLen)))} return (v, offset + 8);}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "buff"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "offset"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint64",
                                        "name": null
                                    },
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "92084c740c7445e12d0689f55f5a0fc9"
                            }
                        ],
                        "NextUint255": [
                            {
                                "visibility": "internal",
                                "content": "function NextUint255(bytes memory buff, uint256 offset) internal pure returns (uint256, uint256){ require(offset + 32 <= buff.length && offset < offset + 32, \"NextUint255, offset exceeds maximum\"); uint256 v; assembly{ let tmpbytes := mload(0x40) let byteLen := 0x20 for{ let tindex := 0x00 let bindex := sub(byteLen, 0x01) let bvalue := mload(add(add(buff, 0x20), offset))} lt(tindex, byteLen){ tindex := add(tindex, 0x01) bindex := sub(bindex, 0x01)}{ mstore8(add(tmpbytes, tindex), byte(bindex, bvalue))} mstore(0x40, add(tmpbytes, byteLen)) v := mload(tmpbytes)} require(v <= 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, \"Value exceeds the range\"); return (v, offset + 32);}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "buff"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "offset"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    },
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "ff2c23fbf3c7aea23dfbe47ba62c0624"
                            }
                        ],
                        "NextVarBytes": [
                            {
                                "visibility": "internal",
                                "content": "function NextVarBytes(bytes memory buff, uint256 offset) internal pure returns(bytes memory, uint256){ uint len; (len, offset) = NextVarUint(buff, offset); require(offset + len <= buff.length && offset < offset + len, \"NextVarBytes, offset exceeds maximum\"); bytes memory tempBytes; assembly{ switch iszero(len) case 0{ tempBytes := mload(0x40) let lengthmod := and(len, 31) let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod))) let end := add(mc, len) for{ let cc := add(add(add(buff, lengthmod), mul(0x20, iszero(lengthmod))), offset)} lt(mc, end){ mc := add(mc, 0x20) cc := add(cc, 0x20)}{ mstore(mc, mload(cc))} mstore(tempBytes, len) mstore(0x40, and(add(mc, 31), not(31)))} default{ tempBytes := mload(0x40) mstore(0x40, add(tempBytes, 0x20))}} return (tempBytes, offset + len);}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "buff"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "offset"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    },
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ZeroCopySource.NextVarUint"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "44832bd86b31e65ad466977a2ba787c7"
                            }
                        ],
                        "NextHash": [
                            {
                                "visibility": "internal",
                                "content": "function NextHash(bytes memory buff, uint256 offset) internal pure returns (bytes32, uint256){ require(offset + 32 <= buff.length && offset < offset + 32, \"NextHash, offset exceeds maximum\"); bytes32 v; assembly{ v := mload(add(buff, add(offset, 0x20)))} return (v, offset + 32);}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "buff"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "offset"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": null
                                    },
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "03828ac17784f68816aab2071abf8bf2"
                            }
                        ],
                        "NextBytes20": [
                            {
                                "visibility": "internal",
                                "content": "function NextBytes20(bytes memory buff, uint256 offset) internal pure returns (bytes20, uint256){ require(offset + 20 <= buff.length && offset < offset + 20, \"NextBytes20, offset exceeds maximum\"); bytes20 v; assembly{ v := mload(add(buff, add(offset, 0x20)))} return (v, offset + 20);}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "buff"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "offset"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes20",
                                        "name": null
                                    },
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "1befeb8170ec99496f40c1235e47f5b6"
                            }
                        ],
                        "NextVarUint": [
                            {
                                "visibility": "internal",
                                "content": "function NextVarUint(bytes memory buff, uint256 offset) internal pure returns(uint, uint256){ byte v; (v, offset) = NextByte(buff, offset); uint value; if (v == 0xFD){ (value, offset) = NextUint16(buff, offset); require(value >= 0xFD && value <= 0xFFFF, \"NextUint16, value outside range\"); return (value, offset);} else if (v == 0xFE){ (value, offset) = NextUint32(buff, offset); require(value > 0xFFFF && value <= 0xFFFFFFFF, \"NextVarUint, value outside range\"); return (value, offset);} else if (v == 0xFF){ (value, offset) = NextUint64(buff, offset); require(value > 0xFFFFFFFF, \"NextVarUint, value outside range\"); return (value, offset);} else{ value = uint8(v); require(value < 0xFD, \"NextVarUint, value outside range\"); return (value, offset);}}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "buff"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "offset"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": null
                                    },
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ZeroCopySource.NextUint64",
                                        "ZeroCopySource.NextByte",
                                        "ZeroCopySource.NextUint16",
                                        "ZeroCopySource.NextUint32"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "eb61d08dab8c10554f70127de04a8e04"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "ZeroCopySource.NextVarUint": "eb61d08dab8c10554f70127de04a8e04",
                "ZeroCopySource.NextUint32": "81b54c1cec3975b9e9f153bd6e5b4c2e",
                "ZeroCopySource.NextUint16": "372b9d31a2b019ca542bab130d4cb153",
                "ZeroCopySource.NextUint64": "92084c740c7445e12d0689f55f5a0fc9",
                "ZeroCopySource.NextByte": "15c7c85b500b67ae408d4028208791c2"
            },
            "md5": "50bbea7bc2388fbe2e381cc81a0e8e28"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\common\\ZeroCopySink.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\common\\ZeroCopySink.sol",
            "filename": "ZeroCopySink.sol",
            "imported_contracts": {},
            "contracts": {
                "ZeroCopySink": {
                    "type": {
                        "__CT__": true,
                        "value": 2
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "WriteBool": [
                            {
                                "visibility": "internal",
                                "content": "function WriteBool(bool b) internal pure returns (bytes memory){ bytes memory buff; assembly{ buff := mload(0x40) mstore(buff, 1) switch iszero(b) case 1{ mstore(add(buff, 0x20), shl(248, 0x00))} default{ mstore(add(buff, 0x20), shl(248, 0x01))} mstore(0x40, add(buff, 0x21))} return buff;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bool",
                                        "name": "b"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "15f343e43b767081b9de8a65f3c22cdc"
                            }
                        ],
                        "WriteByte": [
                            {
                                "visibility": "internal",
                                "content": "function WriteByte(byte b) internal pure returns (bytes memory){ return WriteUint8(uint8(b));}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "byte",
                                        "name": "b"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ZeroCopySink.WriteUint8"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "c5bf6c7c61efcd944e05725d61a24a46"
                            }
                        ],
                        "WriteUint8": [
                            {
                                "visibility": "internal",
                                "content": "function WriteUint8(uint8 v) internal pure returns (bytes memory){ bytes memory buff; assembly{ buff := mload(0x40) mstore(buff, 1) mstore(add(buff, 0x20), shl(248, v)) mstore(0x40, add(buff, 0x21))} return buff;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint8",
                                        "name": "v"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "80a85de70d1d534c0986e16659f6d62c"
                            }
                        ],
                        "WriteUint16": [
                            {
                                "visibility": "internal",
                                "content": "function WriteUint16(uint16 v) internal pure returns (bytes memory){ bytes memory buff; assembly{ buff := mload(0x40) let byteLen := 0x02 mstore(buff, byteLen) for{ let mindex := 0x00 let vindex := 0x1f} lt(mindex, byteLen){ mindex := add(mindex, 0x01) vindex := sub(vindex, 0x01)}{ mstore8(add(add(buff, 0x20), mindex), byte(vindex, v))} mstore(0x40, add(buff, 0x22))} return buff;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint16",
                                        "name": "v"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c67cd28d9a822009a5ac87927a05f3d0"
                            }
                        ],
                        "WriteUint32": [
                            {
                                "visibility": "internal",
                                "content": "function WriteUint32(uint32 v) internal pure returns(bytes memory){ bytes memory buff; assembly{ buff := mload(0x40) let byteLen := 0x04 mstore(buff, byteLen) for{ let mindex := 0x00 let vindex := 0x1f} lt(mindex, byteLen){ mindex := add(mindex, 0x01) vindex := sub(vindex, 0x01)}{ mstore8(add(add(buff, 0x20), mindex), byte(vindex, v))} mstore(0x40, add(buff, 0x24))} return buff;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint32",
                                        "name": "v"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "386aebed1095a56d02680e183673ec61"
                            }
                        ],
                        "WriteUint64": [
                            {
                                "visibility": "internal",
                                "content": "function WriteUint64(uint64 v) internal pure returns(bytes memory){ bytes memory buff; assembly{ buff := mload(0x40) let byteLen := 0x08 mstore(buff, byteLen) for{ let mindex := 0x00 let vindex := 0x1f} lt(mindex, byteLen){ mindex := add(mindex, 0x01) vindex := sub(vindex, 0x01)}{ mstore8(add(add(buff, 0x20), mindex), byte(vindex, v))} mstore(0x40, add(buff, 0x28))} return buff;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint64",
                                        "name": "v"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "167a0b56ff247a6f04718313a4fda54e"
                            }
                        ],
                        "WriteUint255": [
                            {
                                "visibility": "internal",
                                "content": "function WriteUint255(uint256 v) internal pure returns (bytes memory){ require(v <= 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, \"Value exceeds uint255 range\"); bytes memory buff; assembly{ buff := mload(0x40) let byteLen := 0x20 mstore(buff, byteLen) for{ let mindex := 0x00 let vindex := 0x1f} lt(mindex, byteLen){ mindex := add(mindex, 0x01) vindex := sub(vindex, 0x01)}{ mstore8(add(add(buff, 0x20), mindex), byte(vindex, v))} mstore(0x40, add(buff, 0x40))} return buff;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "v"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "3098e5f486fd389bc2412ac67cb37577"
                            }
                        ],
                        "WriteVarBytes": [
                            {
                                "visibility": "internal",
                                "content": "function WriteVarBytes(bytes memory data) internal pure returns (bytes memory){ uint64 l = uint64(data.length); return abi.encodePacked(WriteVarUint(l), data);}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "data"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ZeroCopySink.WriteVarUint"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "4158ce7a596d8e6f8d52a99c62d186ed"
                            }
                        ],
                        "WriteVarUint": [
                            {
                                "visibility": "internal",
                                "content": "function WriteVarUint(uint64 v) internal pure returns (bytes memory){ if (v < 0xFD){ return WriteUint8(uint8(v));} else if (v <= 0xFFFF){ return abi.encodePacked(WriteByte(0xFD), WriteUint16(uint16(v)));} else if (v <= 0xFFFFFFFF){ return abi.encodePacked(WriteByte(0xFE), WriteUint32(uint32(v)));} else{ return abi.encodePacked(WriteByte(0xFF), WriteUint64(uint64(v)));}}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint64",
                                        "name": "v"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ZeroCopySink.WriteUint64",
                                        "ZeroCopySink.WriteUint8",
                                        "ZeroCopySink.WriteByte",
                                        "ZeroCopySink.WriteUint32",
                                        "ZeroCopySink.WriteUint16"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "f84001777513eba6a666a901a653ea62"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "ZeroCopySink.WriteUint8": "80a85de70d1d534c0986e16659f6d62c",
                "ZeroCopySink.WriteVarUint": "f84001777513eba6a666a901a653ea62",
                "ZeroCopySink.WriteUint32": "386aebed1095a56d02680e183673ec61",
                "ZeroCopySink.WriteUint64": "167a0b56ff247a6f04718313a4fda54e",
                "ZeroCopySink.WriteByte": "c5bf6c7c61efcd944e05725d61a24a46",
                "ZeroCopySink.WriteUint16": "c67cd28d9a822009a5ac87927a05f3d0"
            },
            "md5": "0fbcb2bacee597ac69c959041c99e5a2"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\utils\\Utils.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\utils\\Utils.sol",
            "filename": "Utils.sol",
            "imported_contracts": {},
            "contracts": {
                "Utils": {
                    "type": {
                        "__CT__": true,
                        "value": 2
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "bytesToBytes32": [
                            {
                                "visibility": "internal",
                                "content": "function bytesToBytes32(bytes memory _bs) internal pure returns (bytes32 value){ require(_bs.length == 32, \"bytes length is not 32.\"); assembly{ value := mload(add(_bs, 0x20))}}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "_bs"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": "value"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "bcaaf9f85bab0afd414e36dd9802a6c8"
                            }
                        ],
                        "bytesToUint256": [
                            {
                                "visibility": "internal",
                                "content": "function bytesToUint256(bytes memory _bs) internal pure returns (uint256 value){ require(_bs.length == 32, \"bytes length is not 32.\"); assembly{ value := mload(add(_bs, 0x20))} require(value <= 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, \"Value exceeds the range\");}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "_bs"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "8077e0d92047b4aa2bbca3ea6d64f22f"
                            }
                        ],
                        "uint256ToBytes": [
                            {
                                "visibility": "internal",
                                "content": "function uint256ToBytes(uint256 _value) internal pure returns (bytes memory bs){ require(_value <= 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, \"Value exceeds the range\"); assembly{ bs := mload(0x40) mstore(bs, 0x20) mstore(add(bs, 0x20), _value) mstore(0x40, add(bs, 0x40))}}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "_value"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": "bs"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "dcc643656e424f52ffc8b87b948d56ef"
                            }
                        ],
                        "bytesToAddress": [
                            {
                                "visibility": "internal",
                                "content": "function bytesToAddress(bytes memory _bs) internal pure returns (address addr){ require(_bs.length == 20, \"bytes length does not match address\"); assembly{ addr := mload(add(_bs, 0x14))}}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "_bs"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": "addr"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "092fb95d69cb905a32df9a3a9caa7e1e"
                            }
                        ],
                        "addressToBytes": [
                            {
                                "visibility": "internal",
                                "content": "function addressToBytes(address _addr) internal pure returns (bytes memory bs){ assembly{ bs := mload(0x40) mstore(bs, 0x14) mstore(add(bs, 0x20), shl(96, _addr)) mstore(0x40, add(bs, 0x40))}}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_addr"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": "bs"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "1713a248d8faaeabdb90ffb0b456a40a"
                            }
                        ],
                        "hashLeaf": [
                            {
                                "visibility": "internal",
                                "content": "function hashLeaf(bytes memory _data) internal pure returns (bytes32 result){ result = sha256(abi.encodePacked(byte(0x0), _data));}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "_data"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": "result"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "8bc298a88d69ec22525a11259bf7ba61"
                            }
                        ],
                        "hashChildren": [
                            {
                                "visibility": "internal",
                                "content": "function hashChildren(bytes32 _l, bytes32 _r) internal pure returns (bytes32 result){ result = sha256(abi.encodePacked(bytes1(0x01), _l, _r));}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "_l"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "_r"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": "result"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "794ddaca60ed4f2dc91d20f03a741596"
                            }
                        ],
                        "equalStorage": [
                            {
                                "visibility": "internal",
                                "content": "function equalStorage(bytes storage _preBytes, bytes memory _postBytes) internal view returns (bool){ bool success = true; assembly{ let fslot := sload(_preBytes_slot) let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2) let mlength := mload(_postBytes) switch eq(slength, mlength) case 1{ if iszero(iszero(slength)){ switch lt(slength, 32) case 1{ fslot := mul(div(fslot, 0x100), 0x100) if iszero(eq(fslot, mload(add(_postBytes, 0x20)))){ success := 0}} default{ let cb := 1 mstore(0x0, _preBytes_slot) let sc := keccak256(0x0, 0x20) let mc := add(_postBytes, 0x20) let end := add(mc, mlength) for{} eq(add(lt(mc, end), cb), 2){ sc := add(sc, 1) mc := add(mc, 0x20)}{ if iszero(eq(sload(sc), mload(mc))){ success := 0 cb := 0}}}}} default{ success := 0}} return success;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes storage",
                                        "name": "_preBytes"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "_postBytes"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "a98dbe77b37384c01eb9d7794adbd230"
                            }
                        ],
                        "slice": [
                            {
                                "visibility": "internal",
                                "content": "function slice( bytes memory _bytes, uint _start, uint _length ) internal pure returns (bytes memory){ require(_bytes.length >= (_start + _length)); bytes memory tempBytes; assembly{ switch iszero(_length) case 0{ tempBytes := mload(0x40) let lengthmod := and(_length, 31) let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod))) let end := add(mc, _length) for{ let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)} lt(mc, end){ mc := add(mc, 0x20) cc := add(cc, 0x20)}{ mstore(mc, mload(cc))} mstore(tempBytes, _length) mstore(0x40, and(add(mc, 31), not(31)))} default{ tempBytes := mload(0x40) mstore(0x40, add(tempBytes, 0x20))}} return tempBytes;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "_bytes"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "_start"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "_length"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "e06afa1895127c8a4c10525edec2f3c8"
                            }
                        ],
                        "containMAddresses": [
                            {
                                "visibility": "internal",
                                "content": "function containMAddresses(address[] memory _keepers, address[] memory _signers, uint _m) internal pure returns (bool){ uint m = 0; for(uint i = 0; i < _signers.length; i++){ for (uint j = 0; j < _keepers.length; j++){ if (_signers[i] == _keepers[j]){ m++; delete _keepers[j];}}} return m >= _m;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "address[] memory",
                                        "name": "_keepers"
                                    },
                                    {
                                        "type": "address[] memory",
                                        "name": "_signers"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "_m"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "33f640f09e458b46427b01830966659b"
                            }
                        ],
                        "compressMCPubKey": [
                            {
                                "visibility": "internal",
                                "content": "function compressMCPubKey(bytes memory key) internal pure returns (bytes memory newkey){ require(key.length >= 67, \"key lenggh is too short\"); newkey = slice(key, 0, 35); if (uint8(key[66]) % 2 == 0){ newkey[2] = byte(0x02);} else{ newkey[2] = byte(0x03);} return newkey;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "key"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": "newkey"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Utils.slice"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "747a5843ca9ee21313add28dc1a5c74b"
                            }
                        ],
                        "isContract": [
                            {
                                "visibility": "internal",
                                "content": "function isContract(address account) internal view returns (bool){ bytes32 codehash; bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470; assembly{ codehash := extcodehash(account)} return (codehash != 0x0 && codehash != accountHash);}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "account"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "03213a0086847231ca4b607f3e716e3b"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "Utils.slice": "e06afa1895127c8a4c10525edec2f3c8"
            },
            "md5": "122386eadc00cef15b7be2923eefb08e"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\core\\cross_chain_manager\\interface\\IEthCrossChainManager.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\core\\cross_chain_manager\\interface\\IEthCrossChainManager.sol",
            "filename": "IEthCrossChainManager.sol",
            "imported_contracts": {},
            "contracts": {
                "IEthCrossChainManager": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "crossChain": [
                            {
                                "visibility": "external",
                                "content": "function crossChain(uint64 _toChainId, bytes calldata _toContract, bytes calldata _method, bytes calldata _txData) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint64",
                                        "name": "_toChainId"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "_toContract"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "_method"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "_txData"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "cc2b91a03998c595bf5e2c44c4448011"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": [
                        [
                            "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\core\\cross_chain_manager\\logic\\EthCrossChainManager.sol",
                            "EthCrossChainManager"
                        ]
                    ]
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "7466ca6a2f5ad6372c4e28b1e11a2509"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\core\\cross_chain_manager\\interface\\IEthCrossChainManagerProxy.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\core\\cross_chain_manager\\interface\\IEthCrossChainManagerProxy.sol",
            "filename": "IEthCrossChainManagerProxy.sol",
            "imported_contracts": {},
            "contracts": {
                "IEthCrossChainManagerProxy": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "getEthCrossChainManager": [
                            {
                                "visibility": "external",
                                "content": "function getEthCrossChainManager() external view returns (address);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "6d590dcd6e638b115b180b33ed076423"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": [
                        [
                            "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\core\\cross_chain_manager\\upgrade\\EthCrossChainManagerProxy.sol",
                            "EthCrossChainManagerProxy"
                        ]
                    ]
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "487cdaf535d38b0f0411a18c6c90b9de"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\token\\ERC20\\IERC20.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\token\\ERC20\\IERC20.sol",
            "filename": "IERC20.sol",
            "imported_contracts": {},
            "contracts": {
                "IERC20": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "totalSupply": [
                            {
                                "visibility": "external",
                                "content": "function totalSupply() external view returns (uint256);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "5e1d12e61f4bf4b37161d9b684742570"
                            }
                        ],
                        "balanceOf": [
                            {
                                "visibility": "external",
                                "content": "function balanceOf(address account) external view returns (uint256);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "account"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "3ac17e7782366957c960d337a4a648cd"
                            }
                        ],
                        "transfer": [
                            {
                                "visibility": "external",
                                "content": "function transfer(address recipient, uint256 amount) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "recipient"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "98b540da9047ee99bce7fadde65d04b7"
                            }
                        ],
                        "allowance": [
                            {
                                "visibility": "external",
                                "content": "function allowance(address owner, address spender) external view returns (uint256);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "owner"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c93791d09d789aed33b9725d482af442"
                            }
                        ],
                        "approve": [
                            {
                                "visibility": "external",
                                "content": "function approve(address spender, uint256 amount) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "7c80d707df648dc123a10c69a1150edc"
                            }
                        ],
                        "transferFrom": [
                            {
                                "visibility": "external",
                                "content": "function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "sender"
                                    },
                                    {
                                        "type": "address",
                                        "name": "recipient"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c134d67e13a988b449de71dd226682ab"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {
                        "Transfer": {
                            "event": "Transfer",
                            "content": "Transfer(address indexed from, address indexed to, uint256 value)"
                        },
                        "Approval": {
                            "event": "Approval",
                            "content": "Approval(address indexed owner, address indexed spender, uint256 value)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": [
                        [
                            "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\token\\ERC20\\ERC20Detailed.sol",
                            "ERC20Detailed"
                        ],
                        [
                            "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\token\\ERC20\\ERC20.sol",
                            "ERC20"
                        ]
                    ]
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "0e513ce1c9013cbd1e527ec5e4d2195a"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\token\\ERC20\\ERC20Detailed.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\token\\ERC20\\ERC20Detailed.sol",
            "filename": "ERC20Detailed.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\token\\ERC20\\IERC20.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "ERC20Detailed": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "IERC20"
                    ],
                    "state_variables": {
                        "_name": {
                            "type": "string",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "string private _name;"
                        },
                        "_symbol": {
                            "type": "string",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "string private _symbol;"
                        },
                        "_decimals": {
                            "type": "uint8",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint8 private _decimals;"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (string memory name, string memory symbol, uint8 decimals) public{ _name = name; _symbol = symbol; _decimals = decimals;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "string memory",
                                        "name": "name"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "symbol"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "decimals"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_name",
                                        "",
                                        "ERC20Detailed"
                                    ],
                                    [
                                        "_symbol",
                                        "",
                                        "ERC20Detailed"
                                    ],
                                    [
                                        "_decimals",
                                        "",
                                        "ERC20Detailed"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_name",
                                        "",
                                        "ERC20Detailed"
                                    ],
                                    [
                                        "_symbol",
                                        "",
                                        "ERC20Detailed"
                                    ],
                                    [
                                        "_decimals",
                                        "",
                                        "ERC20Detailed"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "d2404ecdfe6816aa8a876e47591b5030"
                            }
                        ],
                        "name": [
                            {
                                "visibility": "public",
                                "content": "function name() public view returns (string memory){ return _name;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "string memory",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_name",
                                        "",
                                        "ERC20Detailed"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "8572f20ecd43eb9f02a2efc81fdc4578"
                            }
                        ],
                        "symbol": [
                            {
                                "visibility": "public",
                                "content": "function symbol() public view returns (string memory){ return _symbol;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "string memory",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_symbol",
                                        "",
                                        "ERC20Detailed"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "b002d129ce65d0f4df01da6ede3b5e4d"
                            }
                        ],
                        "decimals": [
                            {
                                "visibility": "public",
                                "content": "function decimals() public view returns (uint8){ return _decimals;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint8",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_decimals",
                                        "",
                                        "ERC20Detailed"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c396c5ca1d21fa7e84c10681e8d59b07"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "43aaf455900d757ad00ca28fe5d04243"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\math\\SafeMath.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\math\\SafeMath.sol",
            "filename": "SafeMath.sol",
            "imported_contracts": {},
            "contracts": {
                "SafeMath": {
                    "type": {
                        "__CT__": true,
                        "value": 2
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "add": [
                            {
                                "visibility": "internal",
                                "content": "function add(uint256 a, uint256 b) internal pure returns (uint256){ uint256 c = a + b; require(c >= a, \"SafeMath: addition overflow\"); return c;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "a"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "b"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "b83a169007730f80a7fc79bee8748fff"
                            }
                        ],
                        "sub": [
                            {
                                "visibility": "internal",
                                "content": "function sub(uint256 a, uint256 b) internal pure returns (uint256){ return sub(a, b, \"SafeMath: subtraction overflow\");}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "a"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "b"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SafeMath.sub"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "972c2868144778b0617e55a6f97163a0"
                            },
                            {
                                "visibility": "internal",
                                "content": "function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256){ require(b <= a, errorMessage); uint256 c = a - b; return c;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "a"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "b"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "errorMessage"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SafeMath.sub"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "5005b7d925d95cb4c4c0f092235e9f5d"
                            }
                        ],
                        "mul": [
                            {
                                "visibility": "internal",
                                "content": "function mul(uint256 a, uint256 b) internal pure returns (uint256){ if (a == 0){ return 0;} uint256 c = a * b; require(c / a == b, \"SafeMath: multiplication overflow\"); return c;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "a"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "b"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "5622448ca508810ce734d0cb10517566"
                            }
                        ],
                        "div": [
                            {
                                "visibility": "internal",
                                "content": "function div(uint256 a, uint256 b) internal pure returns (uint256){ return div(a, b, \"SafeMath: division by zero\");}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "a"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "b"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SafeMath.div"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "371f945bc2211ac7c63e7277fb7222a7"
                            },
                            {
                                "visibility": "internal",
                                "content": "function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256){ require(b != 0, errorMessage); uint256 c = a / b; return c;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "a"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "b"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "errorMessage"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SafeMath.div"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "7a8f2043a205e371e39aef2d21ed3995"
                            }
                        ],
                        "mod": [
                            {
                                "visibility": "internal",
                                "content": "function mod(uint256 a, uint256 b) internal pure returns (uint256){ return mod(a, b, \"SafeMath: modulo by zero\");}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "a"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "b"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SafeMath.mod"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "50a3733021c21a71491ee85ffb90a2a4"
                            },
                            {
                                "visibility": "internal",
                                "content": "function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256){ require(b != 0, errorMessage); return a % b;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "a"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "b"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "errorMessage"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SafeMath.mod"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "8ec02abe488c084092f946ae1c4a8ccd"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "SafeMath.sub": "972c2868144778b0617e55a6f97163a0",
                "SafeMath.div": "371f945bc2211ac7c63e7277fb7222a7",
                "SafeMath.mod": "50a3733021c21a71491ee85ffb90a2a4"
            },
            "md5": "f17c89446f0f68ece455e45a990ea3b9"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\token\\ERC20\\ERC20.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\token\\ERC20\\ERC20.sol",
            "filename": "ERC20.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\GSN\\Context.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\token\\ERC20\\IERC20.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\math\\SafeMath.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "ERC20": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "Context",
                        "IERC20"
                    ],
                    "state_variables": {
                        "_balances": {
                            "type": "mapping (address => uint256)",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping (address => uint256) private _balances;"
                        },
                        "_allowances": {
                            "type": "mapping (address => mapping (address => uint256))",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping (address => mapping (address => uint256)) private _allowances;"
                        },
                        "_totalSupply": {
                            "type": "uint256",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256 private _totalSupply;"
                        }
                    },
                    "functions": {
                        "totalSupply": [
                            {
                                "visibility": "public",
                                "content": "function totalSupply() public view returns (uint256){ return _totalSupply;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_totalSupply",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "5e6ad72e6028056bb2255274ad077161"
                            }
                        ],
                        "balanceOf": [
                            {
                                "visibility": "public",
                                "content": "function balanceOf(address account) public view returns (uint256){ return _balances[account];}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "account"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_balances",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "ad4eae4ea23632ef2838d60fcaf49fde"
                            }
                        ],
                        "transfer": [
                            {
                                "visibility": "public",
                                "content": "function transfer(address recipient, uint256 amount) public returns (bool){ _transfer(_msgSender(), recipient, amount); return true;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "recipient"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20._msgSender",
                                        "ERC20._transfer"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "a2516d20ff5e2dfd4d99847fff76a3f2"
                            }
                        ],
                        "allowance": [
                            {
                                "visibility": "public",
                                "content": "function allowance(address owner, address spender) public view returns (uint256){ return _allowances[owner][spender];}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "owner"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_allowances",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "592bc064168755118c9f037687aa6211"
                            }
                        ],
                        "approve": [
                            {
                                "visibility": "public",
                                "content": "function approve(address spender, uint256 amount) public returns (bool){ _approve(_msgSender(), spender, amount); return true;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20._msgSender",
                                        "ERC20._approve"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "dde63135ec4b9e7ee1cc6eb25da3b8ba"
                            }
                        ],
                        "transferFrom": [
                            {
                                "visibility": "public",
                                "content": "function transferFrom(address sender, address recipient, uint256 amount) public returns (bool){ _transfer(sender, recipient, amount); _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\")); return true;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "sender"
                                    },
                                    {
                                        "type": "address",
                                        "name": "recipient"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_allowances",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20._msgSender",
                                        "ERC20._approve",
                                        "ERC20._transfer"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "3605d7f86a87c3d1b2a53d3f1493ae68"
                            }
                        ],
                        "increaseAllowance": [
                            {
                                "visibility": "public",
                                "content": "function increaseAllowance(address spender, uint256 addedValue) public returns (bool){ _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue)); return true;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "addedValue"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_allowances",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20._msgSender",
                                        "ERC20._approve"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "66af2c46d28cf0145304c631c700f803"
                            }
                        ],
                        "decreaseAllowance": [
                            {
                                "visibility": "public",
                                "content": "function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool){ _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\")); return true;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "subtractedValue"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_allowances",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20._msgSender",
                                        "ERC20._approve"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "9f3aa62efc251534839eaa0c93bba8b3"
                            }
                        ],
                        "_transfer": [
                            {
                                "visibility": "internal",
                                "content": "function _transfer(address sender, address recipient, uint256 amount) internal{ require(sender != address(0), \"ERC20: transfer from the zero address\"); require(recipient != address(0), \"ERC20: transfer to the zero address\"); _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\"); _balances[recipient] = _balances[recipient].add(amount); emit Transfer(sender, recipient, amount);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "sender"
                                    },
                                    {
                                        "type": "address",
                                        "name": "recipient"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_balances",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_balances",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20.Transfer"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "1ceaa1124f36ab43fd811f2d78d1431e"
                            }
                        ],
                        "_mint": [
                            {
                                "visibility": "internal",
                                "content": "function _mint(address account, uint256 amount) internal{ require(account != address(0), \"ERC20: mint to the zero address\"); _totalSupply = _totalSupply.add(amount); _balances[account] = _balances[account].add(amount); emit Transfer(address(0), account, amount);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "account"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_balances",
                                        "",
                                        "ERC20"
                                    ],
                                    [
                                        "_totalSupply",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_balances",
                                        "",
                                        "ERC20"
                                    ],
                                    [
                                        "_totalSupply",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20.Transfer",
                                        "_totalSupply.add"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "1849059c445ce826b07aabafc80e1d59"
                            }
                        ],
                        "_burn": [
                            {
                                "visibility": "internal",
                                "content": "function _burn(address account, uint256 amount) internal{ require(account != address(0), \"ERC20: burn from the zero address\"); _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\"); _totalSupply = _totalSupply.sub(amount); emit Transfer(account, address(0), amount);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "account"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_balances",
                                        "",
                                        "ERC20"
                                    ],
                                    [
                                        "_totalSupply",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_balances",
                                        "",
                                        "ERC20"
                                    ],
                                    [
                                        "_totalSupply",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "_totalSupply.sub",
                                        "ERC20.Transfer"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "dc244a93980fa244faa9d765efc9913a"
                            }
                        ],
                        "_approve": [
                            {
                                "visibility": "internal",
                                "content": "function _approve(address owner, address spender, uint256 amount) internal{ require(owner != address(0), \"ERC20: approve from the zero address\"); require(spender != address(0), \"ERC20: approve to the zero address\"); _allowances[owner][spender] = amount; emit Approval(owner, spender, amount);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "owner"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_allowances",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_allowances",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20.Approval"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "c73ffec8be8861a4433ee22a6bf25bb3"
                            }
                        ],
                        "_burnFrom": [
                            {
                                "visibility": "internal",
                                "content": "function _burnFrom(address account, uint256 amount) internal{ _burn(account, amount); _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "account"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_allowances",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20._burn",
                                        "ERC20._msgSender",
                                        "ERC20._approve"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "29791211cc2110eec5b89df326e8bbc1"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "uint256": "SafeMath"
                    }
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "ERC20._msgSender": "a9b7db3c77abe3957815043d4f2458b9",
                "ERC20._transfer": "1ceaa1124f36ab43fd811f2d78d1431e",
                "ERC20._approve": "c73ffec8be8861a4433ee22a6bf25bb3",
                "_totalSupply.add": "b83a169007730f80a7fc79bee8748fff",
                "_totalSupply.sub": "972c2868144778b0617e55a6f97163a0",
                "ERC20._burn": "dc244a93980fa244faa9d765efc9913a"
            },
            "md5": "5f10b46efdcc259ac648e3717222ba28"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\token\\ERC20\\ERC20Extended.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\token\\ERC20\\ERC20Extended.sol",
            "filename": "ERC20Extended.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\token\\ERC20\\ERC20Detailed.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\GSN\\Context.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\token\\ERC20\\ERC20.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\core\\cross_chain_manager\\interface\\IEthCrossChainManagerProxy.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "ERC20Extended": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "Context",
                        "ERC20",
                        "ERC20Detailed"
                    ],
                    "state_variables": {
                        "managerProxyContract": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public managerProxyContract;"
                        },
                        "operator": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public operator;"
                        },
                        "bondAssetHashes": {
                            "type": "mapping(uint64 => bytes)",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(uint64 => bytes) public bondAssetHashes;"
                        }
                    },
                    "functions": {
                        "mint": [
                            {
                                "visibility": "public",
                                "content": "function mint(address account, uint256 amount) public onlyManagerContract returns (bool){ _mint(account, amount); return true;}",
                                "modifiers": [
                                    "onlyManagerContract"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "account"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20Extended._mint",
                                        "ERC20Extended.onlyManagerContract"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "f0fff4f5cd45a4863830f5cabb53f34f"
                            }
                        ],
                        "burn": [
                            {
                                "visibility": "public",
                                "content": "function burn(uint256 amount) public returns (bool){ _burn(_msgSender(), amount); return true;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20Extended._msgSender",
                                        "ERC20Extended._burn"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "d5e687e8726aaba636816e6830442722"
                            }
                        ],
                        "setManagerProxy": [
                            {
                                "visibility": "public",
                                "content": "function setManagerProxy(address ethCrossChainManagerProxyAddr) onlyOperator public{ managerProxyContract = ethCrossChainManagerProxyAddr; emit SetManagerProxyEvent(managerProxyContract);}",
                                "modifiers": [
                                    "onlyOperator"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "ethCrossChainManagerProxyAddr"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "managerProxyContract",
                                        "",
                                        "ERC20Extended"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "managerProxyContract",
                                        "",
                                        "ERC20Extended"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20Extended.onlyOperator"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "d2b4f11f45819dd5699a0afc076b74c9"
                            }
                        ],
                        "bindAssetHash": [
                            {
                                "visibility": "public",
                                "content": "function bindAssetHash(uint64 chainId, bytes memory contractAddr) onlyOperator public{ require(chainId != 0, \"chainId illegal!\"); bondAssetHashes[chainId] = contractAddr; emit BindAssetHash(chainId, contractAddr);}",
                                "modifiers": [
                                    "onlyOperator"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint64",
                                        "name": "chainId"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "contractAddr"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "bondAssetHashes",
                                        "",
                                        "ERC20Extended"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "bondAssetHashes",
                                        "",
                                        "ERC20Extended"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20Extended.onlyOperator"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "20979e4542df3fe65be2cdc2a62bbb9e"
                            }
                        ]
                    },
                    "modifiers": {
                        "onlyManagerContract": {
                            "parameters": [],
                            "content": "modifier onlyManagerContract(){ IEthCrossChainManagerProxy ieccmp = IEthCrossChainManagerProxy(managerProxyContract); require(_msgSender() == ieccmp.getEthCrossChainManager(), \"msgSender is not EthCrossChainManagerContract\"); _;}",
                            "reads": [
                                [
                                    "managerProxyContract",
                                    "",
                                    "ERC20Extended"
                                ]
                            ],
                            "writes": [],
                            "external_calls": {
                                "__set__": true,
                                "values": [
                                    "ERC20Extended._msgSender",
                                    "IEthCrossChainManagerProxy.getEthCrossChainManager",
                                    "ERC20Extended.IEthCrossChainManagerProxy"
                                ]
                            },
                            "md5": "85a7da07a788e5da47646cad3486c302"
                        },
                        "onlyOperator": {
                            "parameters": [],
                            "content": "modifier onlyOperator(){ require(_msgSender() == operator); _;}",
                            "reads": [
                                [
                                    "operator",
                                    "",
                                    "ERC20Extended"
                                ]
                            ],
                            "writes": [],
                            "external_calls": {
                                "__set__": true,
                                "values": [
                                    "ERC20Extended._msgSender"
                                ]
                            },
                            "md5": "1e27705f0b4256fcb0f114fc26302ee1"
                        }
                    },
                    "structs": {},
                    "events": {
                        "BindAssetHash": {
                            "event": "BindAssetHash",
                            "content": "BindAssetHash(uint64 chainId, bytes contractAddr)"
                        },
                        "SetManagerProxyEvent": {
                            "event": "SetManagerProxyEvent",
                            "content": "SetManagerProxyEvent(address managerContract)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "IEthCrossChainManagerProxy.getEthCrossChainManager": "6d590dcd6e638b115b180b33ed076423",
                "ERC20Extended._msgSender": "a9b7db3c77abe3957815043d4f2458b9",
                "ERC20Extended.onlyManagerContract": "85a7da07a788e5da47646cad3486c302",
                "ERC20Extended._mint": "1849059c445ce826b07aabafc80e1d59",
                "ERC20Extended._burn": "dc244a93980fa244faa9d765efc9913a",
                "ERC20Extended.onlyOperator": "1e27705f0b4256fcb0f114fc26302ee1"
            },
            "md5": "8bdd9874191721cc80aecac92e4a59cf"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\core\\assets\\btc\\BTCX.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\core\\assets\\btc\\BTCX.sol",
            "filename": "BTCX.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\GSN\\Context.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\common\\ZeroCopySource.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\common\\ZeroCopySink.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\utils\\Utils.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\core\\cross_chain_manager\\interface\\IEthCrossChainManager.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\core\\cross_chain_manager\\interface\\IEthCrossChainManagerProxy.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\token\\ERC20\\ERC20Extended.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "BTCX": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "ERC20Extended"
                    ],
                    "state_variables": {
                        "redeemScript": {
                            "type": "bytes",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "bytes public redeemScript;"
                        },
                        "minimumLimit": {
                            "type": "uint64",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint64 public minimumLimit;"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (bytes memory _redeemScript) public ERC20Detailed(\"BTC Token\", \"BTCX\", 8){ operator = _msgSender(); redeemScript = _redeemScript;}",
                                "modifiers": [
                                    "ERC20Detailed(\"BTC Token\", \"BTCX\", 8)"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "_redeemScript"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "redeemScript",
                                        "",
                                        "BTCX"
                                    ],
                                    [
                                        "operator",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\token\\ERC20\\ERC20Extended.sol",
                                        "ERC20Extended"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "redeemScript",
                                        "",
                                        "BTCX"
                                    ],
                                    [
                                        "operator",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\token\\ERC20\\ERC20Extended.sol",
                                        "ERC20Extended"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "fb9ceddb6009d19de8a8b228148f947a"
                            }
                        ],
                        "setMinimumLimit": [
                            {
                                "visibility": "public",
                                "content": "function setMinimumLimit(uint64 minimumTransferLimit) onlyOperator public returns (bool){ minimumLimit = minimumTransferLimit; return true;}",
                                "modifiers": [
                                    "onlyOperator"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint64",
                                        "name": "minimumTransferLimit"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "minimumLimit",
                                        "",
                                        "BTCX"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "minimumLimit",
                                        "",
                                        "BTCX"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BTCX.onlyOperator"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "50e662bb15aaa3d22c9575fe9780a678"
                            }
                        ],
                        "unlock": [
                            {
                                "visibility": "public",
                                "content": "function unlock(bytes memory argsBs, bytes memory fromContractAddr, uint64 fromChainId) onlyManagerContract public returns (bool){ TxArgs memory args = _deserializeTxArgs(argsBs); require(fromContractAddr.length != 0, \"from asset contract address cannot be empty\"); require(Utils.equalStorage(bondAssetHashes[fromChainId], fromContractAddr), \"From contract address error !\"); address toAddress = Utils.bytesToAddress(args.toAddress); require(mint(toAddress, uint256(args.amount)), \"mint BTCX in unlock method failed!\"); emit UnlockEvent(address(this), toAddress, args.amount); return true;}",
                                "modifiers": [
                                    "onlyManagerContract"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "argsBs"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "fromContractAddr"
                                    },
                                    {
                                        "type": "uint64",
                                        "name": "fromChainId"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "bondAssetHashes",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\token\\ERC20\\ERC20Extended.sol",
                                        "ERC20Extended"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Utils.equalStorage",
                                        "BTCX._deserializeTxArgs",
                                        "BTCX.mint",
                                        "Utils.bytesToAddress",
                                        "BTCX.onlyManagerContract"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "348e0ee9a9e8aaded2050362c13dce6d"
                            }
                        ],
                        "lock": [
                            {
                                "visibility": "public",
                                "content": "function lock(uint64 toChainId, bytes memory toUserAddr, uint64 amount) public returns (bool){ TxArgs memory txArgs = TxArgs({ toAddress: toUserAddr, amount: amount} ); bytes memory txData; if (toChainId == 1){ require(amount >= minimumLimit, \"btcx amount should be greater than 2000\"); txData = _serializeToBtcTxArgs(txArgs, redeemScript);} else{ txData = _serializeTxArgs(txArgs);} require(burn(uint256(amount)), \"Burn msg.sender BTCX tokens failed\"); IEthCrossChainManagerProxy eccmp = IEthCrossChainManagerProxy(managerProxyContract); address eccmAddr = eccmp.getEthCrossChainManager(); IEthCrossChainManager eccm = IEthCrossChainManager(eccmAddr); require(eccm.crossChain(toChainId, bondAssetHashes[toChainId], \"unlock\", txData), \"EthCrossChainManager crossChain executed error !\"); emit LockEvent(address(this), _msgSender(), toChainId, bondAssetHashes[toChainId], toUserAddr, amount); return true;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint64",
                                        "name": "toChainId"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "toUserAddr"
                                    },
                                    {
                                        "type": "uint64",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "redeemScript",
                                        "",
                                        "BTCX"
                                    ],
                                    [
                                        "minimumLimit",
                                        "",
                                        "BTCX"
                                    ],
                                    [
                                        "managerProxyContract",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\token\\ERC20\\ERC20Extended.sol",
                                        "ERC20Extended"
                                    ],
                                    [
                                        "bondAssetHashes",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\token\\ERC20\\ERC20Extended.sol",
                                        "ERC20Extended"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "IEthCrossChainManagerProxy.getEthCrossChainManager",
                                        "BTCX._serializeToBtcTxArgs",
                                        "IEthCrossChainManager.crossChain",
                                        "BTCX.burn",
                                        "BTCX.IEthCrossChainManagerProxy",
                                        "BTCX._serializeTxArgs",
                                        "BTCX._msgSender",
                                        "BTCX.IEthCrossChainManager"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "807338c8e0bcffad1d0b20b0ecd9e5c3"
                            }
                        ],
                        "_serializeToBtcTxArgs": [
                            {
                                "visibility": "internal",
                                "content": "function _serializeToBtcTxArgs(TxArgs memory args, bytes memory redeemScript) internal pure returns (bytes memory){ bytes memory buff; buff = abi.encodePacked( ZeroCopySink.WriteVarBytes(args.toAddress), ZeroCopySink.WriteUint64(args.amount), ZeroCopySink.WriteVarBytes(redeemScript) ); return buff;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "TxArgs memory",
                                        "name": "args"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "redeemScript"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "redeemScript",
                                        "",
                                        "BTCX"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ZeroCopySink.WriteVarBytes",
                                        "ZeroCopySink.WriteUint64"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "b3b5d49c0a845deec2fe010dc657c093"
                            }
                        ],
                        "_serializeTxArgs": [
                            {
                                "visibility": "internal",
                                "content": "function _serializeTxArgs(TxArgs memory args) internal pure returns (bytes memory){ bytes memory buff; buff = abi.encodePacked( ZeroCopySink.WriteVarBytes(args.toAddress), ZeroCopySink.WriteUint64(args.amount) ); return buff;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "TxArgs memory",
                                        "name": "args"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ZeroCopySink.WriteVarBytes",
                                        "ZeroCopySink.WriteUint64"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "e5fc230f84125cd106840f30a5a930eb"
                            }
                        ],
                        "_deserializeTxArgs": [
                            {
                                "visibility": "internal",
                                "content": "function _deserializeTxArgs(bytes memory valueBs) internal pure returns (TxArgs memory){ TxArgs memory args; uint256 off = 0; (args.toAddress, off) = ZeroCopySource.NextVarBytes(valueBs, off); (args.amount, off) = ZeroCopySource.NextUint64(valueBs, off); return args;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "valueBs"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "TxArgs memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ZeroCopySource.NextUint64",
                                        "ZeroCopySource.NextVarBytes"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "e0cd059f1c977af675070756b52aacc0"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {
                        "TxArgs": {
                            "content": "TxArgs{ bytes toAddress; uint64 amount;}"
                        }
                    },
                    "events": {
                        "UnlockEvent": {
                            "event": "UnlockEvent",
                            "content": "UnlockEvent(address toAssetHash, address toAddress, uint64 amount)"
                        },
                        "LockEvent": {
                            "event": "LockEvent",
                            "content": "LockEvent(address fromAssetHash, address fromAddress, uint64 toChainId, bytes toAssetHash, bytes toAddress, uint64 amount)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "BTCX.onlyOperator": "1e27705f0b4256fcb0f114fc26302ee1",
                "BTCX.mint": "f0fff4f5cd45a4863830f5cabb53f34f",
                "Utils.equalStorage": "a98dbe77b37384c01eb9d7794adbd230",
                "BTCX.onlyManagerContract": "85a7da07a788e5da47646cad3486c302",
                "Utils.bytesToAddress": "092fb95d69cb905a32df9a3a9caa7e1e",
                "BTCX._deserializeTxArgs": "e0cd059f1c977af675070756b52aacc0",
                "IEthCrossChainManagerProxy.getEthCrossChainManager": "6d590dcd6e638b115b180b33ed076423",
                "BTCX.burn": "d5e687e8726aaba636816e6830442722",
                "BTCX._serializeTxArgs": "e5fc230f84125cd106840f30a5a930eb",
                "BTCX._msgSender": "a9b7db3c77abe3957815043d4f2458b9",
                "IEthCrossChainManager.crossChain": "cc2b91a03998c595bf5e2c44c4448011",
                "BTCX._serializeToBtcTxArgs": "b3b5d49c0a845deec2fe010dc657c093",
                "ZeroCopySink.WriteUint64": "167a0b56ff247a6f04718313a4fda54e",
                "ZeroCopySink.WriteVarBytes": "4158ce7a596d8e6f8d52a99c62d186ed",
                "ZeroCopySource.NextVarBytes": "44832bd86b31e65ad466977a2ba787c7",
                "ZeroCopySource.NextUint64": "92084c740c7445e12d0689f55f5a0fc9"
            },
            "md5": "1b57ffad13623998b557a644cb44f968"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\core\\assets\\erc20_template\\ERC20Template.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\core\\assets\\erc20_template\\ERC20Template.sol",
            "filename": "ERC20Template.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\GSN\\Context.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\token\\ERC20\\ERC20.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\token\\ERC20\\ERC20Detailed.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "ERC20Template": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "Context",
                        "ERC20",
                        "ERC20Detailed"
                    ],
                    "state_variables": {},
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor () public ERC20Detailed(\"ERC20 Template\", \"ERC20T\", 9){ _mint(_msgSender(), 10000000000000);}",
                                "modifiers": [
                                    "ERC20Detailed(\"ERC20 Template\", \"ERC20T\", 9)"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "6a1a6879a798857794cfa4cbf2341384"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "d192d3b76957552305ad9875cbb600b9"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\core\\assets\\LPToken_template\\LPToken.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\core\\assets\\LPToken_template\\LPToken.sol",
            "filename": "LPToken.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\GSN\\Context.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\token\\ERC20\\ERC20.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\token\\ERC20\\ERC20Detailed.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "LPToken": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "Context",
                        "ERC20",
                        "ERC20Detailed"
                    ],
                    "state_variables": {},
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (string memory name, string memory symbol, uint8 decimal, address initReceiver, uint initAmount) public ERC20Detailed(name, symbol, decimal){ _mint(initReceiver, initAmount);}",
                                "modifiers": [
                                    "ERC20Detailed(name, symbol, decimal)"
                                ],
                                "parameters": [
                                    {
                                        "type": "string memory",
                                        "name": "name"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "symbol"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "decimal"
                                    },
                                    {
                                        "type": "address",
                                        "name": "initReceiver"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "initAmount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "7743e490e8e7f061591c281318083e64"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "8326d8c7e1244324dde45548899409cd"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\core\\assets\\neo\\eNEO.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\core\\assets\\neo\\eNEO.sol",
            "filename": "eNEO.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\token\\ERC20\\ERC20Detailed.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\GSN\\Context.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\token\\ERC20\\ERC20.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "eNEO": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "Context",
                        "ERC20",
                        "ERC20Detailed"
                    ],
                    "state_variables": {},
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (address lockProxyContractAddress) public ERC20Detailed(\"NEO Token\", \"eNEO\", 8){ _mint(lockProxyContractAddress, 10000000000000000);}",
                                "modifiers": [
                                    "ERC20Detailed(\"NEO Token\", \"eNEO\", 8)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "lockProxyContractAddress"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "32dcbb42d484cc769b85d10058e30a52"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "d6164a79470c6b38aeb0439b19b32dd1"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\core\\assets\\oep4_template\\OEP4Template.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\core\\assets\\oep4_template\\OEP4Template.sol",
            "filename": "OEP4Template.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\token\\ERC20\\ERC20Detailed.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\GSN\\Context.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\math\\SafeMath.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "OEP4Template": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "Context",
                        "ERC20",
                        "ERC20Detailed"
                    ],
                    "state_variables": {
                        "Operator": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public Operator;"
                        },
                        "proxyHash": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public proxyHash;"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (address proxyContractAddress) public ERC20Detailed(\"OEP4 Template\", \"OEP4T\", 9){ _mint(address(this), 10000 * 10 ** 9); Operator = _msgSender(); proxyHash = proxyContractAddress;}",
                                "modifiers": [
                                    "ERC20Detailed(\"OEP4 Template\", \"OEP4T\", 9)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "proxyContractAddress"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "Operator",
                                        "",
                                        "OEP4Template"
                                    ],
                                    [
                                        "proxyHash",
                                        "",
                                        "OEP4Template"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "Operator",
                                        "",
                                        "OEP4Template"
                                    ],
                                    [
                                        "proxyHash",
                                        "",
                                        "OEP4Template"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "2bc2f7429b52b4fdc2eb5b2cab846466"
                            }
                        ],
                        "deletageToProxy": [
                            {
                                "visibility": "public",
                                "content": "function deletageToProxy(address _proxyHash, uint256 _amount) onlyOperator public returns (bool){ if (proxyHash != address(0)){ require(_proxyHash == proxyHash, \"proxy contract address cannot be changed!\");} else{ proxyHash = _proxyHash;} require(this.transfer(_proxyHash, _amount), \"transfer token to proxy contract failed!\"); return true;}",
                                "modifiers": [
                                    "onlyOperator"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_proxyHash"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "proxyHash",
                                        "",
                                        "OEP4Template"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "proxyHash",
                                        "",
                                        "OEP4Template"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "OEP4Template.transfer",
                                        "OEP4Template.onlyOperator"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "0af9a9945708b476282dbb7ba2eedaae"
                            }
                        ]
                    },
                    "modifiers": {
                        "onlyOperator": {
                            "parameters": [],
                            "content": "modifier onlyOperator(){ require(_msgSender() == Operator, \"Only Operator has access!\"); _;}",
                            "reads": [
                                [
                                    "Operator",
                                    "",
                                    "OEP4Template"
                                ]
                            ],
                            "writes": [],
                            "external_calls": {
                                "__set__": true,
                                "values": [
                                    "OEP4Template._msgSender"
                                ]
                            },
                            "md5": "9cf47fcee8a64e2342778aebc4f55aa0"
                        }
                    },
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "OEP4Template._msgSender": "a9b7db3c77abe3957815043d4f2458b9",
                "OEP4Template.onlyOperator": "9cf47fcee8a64e2342778aebc4f55aa0"
            },
            "md5": "1271fc5832ca93ed8b2ff99ac3e0e71a"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\core\\assets\\ong\\ONGX.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\core\\assets\\ong\\ONGX.sol",
            "filename": "ONGX.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\token\\ERC20\\ERC20Detailed.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\GSN\\Context.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\token\\ERC20\\ERC20.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "ONGX": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "Context",
                        "ERC20",
                        "ERC20Detailed"
                    ],
                    "state_variables": {},
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (address proxyContractAddress) public ERC20Detailed(\"Ontology Gas\", \"xONG\", 9){ _mint(proxyContractAddress, 1000000000000000000);}",
                                "modifiers": [
                                    "ERC20Detailed(\"Ontology Gas\", \"xONG\", 9)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "proxyContractAddress"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "2cb169bcf0d96da2d9727ed7e5832c2c"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "33f056732392fcd7e33615647a64f93d"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\core\\assets\\ont\\xONT.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\core\\assets\\ont\\xONT.sol",
            "filename": "xONT.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\token\\ERC20\\ERC20Detailed.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\GSN\\Context.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\token\\ERC20\\ERC20.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "ONTX": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "Context",
                        "ERC20",
                        "ERC20Detailed"
                    ],
                    "state_variables": {},
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (address lockProxyContractAddress) public ERC20Detailed(\"Ontology Token\", \"xONT\", 0){ _mint(lockProxyContractAddress, 1000000000);}",
                                "modifiers": [
                                    "ERC20Detailed(\"Ontology Token\", \"xONT\", 0)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "lockProxyContractAddress"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "a0aa9ae3de5af4118b2dd7d742c6a00f"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "f28d6d615cbfeaff4c24dcab30f14cb4"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\core\\assets\\usdt\\USDT.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\core\\assets\\usdt\\USDT.sol",
            "filename": "USDT.sol",
            "imported_contracts": {},
            "contracts": {
                "SafeMath": {
                    "type": {
                        "__CT__": true,
                        "value": 2
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "mul": [
                            {
                                "visibility": "internal",
                                "content": "function mul(uint256 a, uint256 b) internal pure returns (uint256){ if (a == 0){ return 0;} uint256 c = a * b; assert(c / a == b); return c;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "a"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "b"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "0a7d7041820c90c7e1c7b4594488cd3a"
                            }
                        ],
                        "div": [
                            {
                                "visibility": "internal",
                                "content": "function div(uint256 a, uint256 b) internal pure returns (uint256){ uint256 c = a / b; return c;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "a"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "b"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "98650b4e2e506b5f867f8f60fca0fc01"
                            }
                        ],
                        "sub": [
                            {
                                "visibility": "internal",
                                "content": "function sub(uint256 a, uint256 b) internal pure returns (uint256){ assert(b <= a); return a - b;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "a"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "b"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "bf6b1515ed8c728b3639d65aaa9c362b"
                            }
                        ],
                        "add": [
                            {
                                "visibility": "internal",
                                "content": "function add(uint256 a, uint256 b) internal pure returns (uint256){ uint256 c = a + b; assert(c >= a); return c;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "a"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "b"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "2c785c81098ad5214924d81fa5b57303"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "Ownable": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {
                        "owner": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public owner;"
                        }
                    },
                    "functions": {
                        "Ownable": [
                            {
                                "visibility": "public",
                                "content": "function Ownable() public{ owner = msg.sender;}",
                                "modifiers": [],
                                "parameters": [],
                                "returns": [],
                                "reads": [
                                    [
                                        "owner",
                                        "",
                                        "Ownable"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "owner",
                                        "",
                                        "Ownable"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "fd688a6c0e79229cc74b04b1cc05b488"
                            }
                        ],
                        "transferOwnership": [
                            {
                                "visibility": "public",
                                "content": "function transferOwnership(address newOwner) public onlyOwner{ if (newOwner != address(0)){ owner = newOwner;}}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "newOwner"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "owner",
                                        "",
                                        "Ownable"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "owner",
                                        "",
                                        "Ownable"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Ownable.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "217eafd3ccae0ab1d37e78c2e33e494c"
                            }
                        ]
                    },
                    "modifiers": {
                        "onlyOwner": {
                            "parameters": [],
                            "content": "modifier onlyOwner(){ require(msg.sender == owner); _;}",
                            "reads": [
                                [
                                    "owner",
                                    "",
                                    "Ownable"
                                ]
                            ],
                            "writes": [],
                            "external_calls": [],
                            "md5": "fc2e5e82bfa86a81d2e2e575bebc02d9"
                        }
                    },
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "ERC20Basic": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {
                        "_totalSupply1": {
                            "type": "uint",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint public _totalSupply1;"
                        }
                    },
                    "functions": {
                        "totalSupply": [
                            {
                                "visibility": "public",
                                "content": "function totalSupply() public constant returns (uint);",
                                "modifiers": [
                                    "constant"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "0c609d4a964ccb9ebb14dcaaf493827b"
                            }
                        ],
                        "balanceOf": [
                            {
                                "visibility": "public",
                                "content": "function balanceOf(address who) public constant returns (uint);",
                                "modifiers": [
                                    "constant"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "who"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "0179c53f5a41e7589848ac07d200efd9"
                            }
                        ],
                        "transfer": [
                            {
                                "visibility": "public",
                                "content": "function transfer(address to, uint value) public;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "value"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "0f87fc2b83639458bca873fedc3299b6"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {
                        "Transfer": {
                            "event": "Transfer",
                            "content": "Transfer(address indexed from, address indexed to, uint value)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "ERC20": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "ERC20Basic"
                    ],
                    "state_variables": {},
                    "functions": {
                        "allowance": [
                            {
                                "visibility": "public",
                                "content": "function allowance(address owner, address spender) public constant returns (uint);",
                                "modifiers": [
                                    "constant"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "owner"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "d947ebec5b74c5f5f2a44a19d6fc2f92"
                            }
                        ],
                        "transferFrom": [
                            {
                                "visibility": "public",
                                "content": "function transferFrom(address from, address to, uint value) public;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "value"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "ac786981ed12b2dbf78a0e7d7c50f25a"
                            }
                        ],
                        "approve": [
                            {
                                "visibility": "public",
                                "content": "function approve(address spender, uint value) public;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "value"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "0c8e995409b4df693055196e65baacdc"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {
                        "Approval": {
                            "event": "Approval",
                            "content": "Approval(address indexed owner, address indexed spender, uint value)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "BasicToken": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "Ownable",
                        "ERC20Basic"
                    ],
                    "state_variables": {
                        "balances": {
                            "type": "mapping(address => uint)",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(address => uint) public balances;"
                        },
                        "basisPointsRate": {
                            "type": "uint",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "0",
                            "content": "uint public basisPointsRate = 0;"
                        },
                        "maximumFee": {
                            "type": "uint",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "0",
                            "content": "uint public maximumFee = 0;"
                        }
                    },
                    "functions": {
                        "transfer": [
                            {
                                "visibility": "public",
                                "content": "function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32){ uint fee = (_value.mul(basisPointsRate)).div(10000); if (fee > maximumFee){ fee = maximumFee;} uint sendAmount = _value.sub(fee); balances[msg.sender] = balances[msg.sender].sub(_value); balances[_to] = balances[_to].add(sendAmount); if (fee > 0){ balances[owner] = balances[owner].add(fee); Transfer(msg.sender, owner, fee);} Transfer(msg.sender, _to, sendAmount);}",
                                "modifiers": [
                                    "onlyPayloadSize(2 * 32)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "_value"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "owner",
                                        "",
                                        "Ownable"
                                    ],
                                    [
                                        "balances",
                                        "",
                                        "BasicToken"
                                    ],
                                    [
                                        "basisPointsRate",
                                        "",
                                        "BasicToken"
                                    ],
                                    [
                                        "maximumFee",
                                        "",
                                        "BasicToken"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "balances",
                                        "",
                                        "BasicToken"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BasicToken.transfer",
                                        "_value.sub",
                                        "_value.mul",
                                        "Pausable.whenNotPaused",
                                        "BasicToken.onlyPayloadSize"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "c380e5042691a8053bcadb8b2ca57512"
                            }
                        ],
                        "balanceOf": [
                            {
                                "visibility": "public",
                                "content": "function balanceOf(address _owner) public constant returns (uint balance){ return balances[_owner];}",
                                "modifiers": [
                                    "constant"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_owner"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "balance"
                                    }
                                ],
                                "reads": [
                                    [
                                        "balances",
                                        "",
                                        "BasicToken"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "6ade4c9333b563895a1fbe59c81664c2"
                            }
                        ]
                    },
                    "modifiers": {
                        "onlyPayloadSize": {
                            "parameters": [
                                {
                                    "type": "uint",
                                    "name": "size"
                                }
                            ],
                            "content": "modifier onlyPayloadSize(uint size){ require(!(msg.data.length < size + 4)); _;}",
                            "reads": [],
                            "writes": [],
                            "external_calls": [],
                            "md5": "c5467dd3cb945da77c6dd3d2e8b6e64a"
                        }
                    },
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "uint": "SafeMath"
                    }
                },
                "StandardToken": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "BasicToken",
                        "ERC20"
                    ],
                    "state_variables": {
                        "allowed": {
                            "type": "mapping (address => mapping (address => uint))",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping (address => mapping (address => uint)) public allowed;"
                        },
                        "MAX_UINT": {
                            "type": "uint",
                            "visibility": "public",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "2**256 - 1",
                            "content": "uint public constant MAX_UINT = 2**256 - 1;"
                        }
                    },
                    "functions": {
                        "transferFrom": [
                            {
                                "visibility": "public",
                                "content": "function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32){ var _allowance = allowed[_from][msg.sender]; uint fee = (_value.mul(basisPointsRate)).div(10000); if (fee > maximumFee){ fee = maximumFee;} if (_allowance < MAX_UINT){ allowed[_from][msg.sender] = _allowance.sub(_value);} uint sendAmount = _value.sub(fee); balances[_from] = balances[_from].sub(_value); balances[_to] = balances[_to].add(sendAmount); if (fee > 0){ balances[owner] = balances[owner].add(fee); Transfer(_from, owner, fee);} Transfer(_from, _to, sendAmount);}",
                                "modifiers": [
                                    "onlyPayloadSize(3 * 32)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "_value"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "owner",
                                        "",
                                        "Ownable"
                                    ],
                                    [
                                        "balances",
                                        "",
                                        "BasicToken"
                                    ],
                                    [
                                        "basisPointsRate",
                                        "",
                                        "BasicToken"
                                    ],
                                    [
                                        "maximumFee",
                                        "",
                                        "BasicToken"
                                    ],
                                    [
                                        "allowed",
                                        "",
                                        "StandardToken"
                                    ],
                                    [
                                        "MAX_UINT",
                                        "",
                                        "StandardToken"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "balances",
                                        "",
                                        "BasicToken"
                                    ],
                                    [
                                        "allowed",
                                        "",
                                        "StandardToken"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "_allowance.sub",
                                        "_value.sub",
                                        "_value.mul",
                                        "StandardToken.transferFrom",
                                        "Pausable.whenNotPaused",
                                        "BasicToken.onlyPayloadSize"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "2707efa1ffe0b398f7772c09a5dc8a93"
                            }
                        ],
                        "approve": [
                            {
                                "visibility": "public",
                                "content": "function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32){ require(!((_value != 0) && (allowed[msg.sender][_spender] != 0))); allowed[msg.sender][_spender] = _value; Approval(msg.sender, _spender, _value);}",
                                "modifiers": [
                                    "onlyPayloadSize(2 * 32)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_spender"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "_value"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "allowed",
                                        "",
                                        "StandardToken"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "allowed",
                                        "",
                                        "StandardToken"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "StandardToken.approve",
                                        "BasicToken.onlyPayloadSize"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "679c6dbbbd27b323ef886ad07392a3d0"
                            }
                        ],
                        "allowance": [
                            {
                                "visibility": "public",
                                "content": "function allowance(address _owner, address _spender) public constant returns (uint remaining){ return allowed[_owner][_spender];}",
                                "modifiers": [
                                    "constant"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_owner"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_spender"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "remaining"
                                    }
                                ],
                                "reads": [
                                    [
                                        "allowed",
                                        "",
                                        "StandardToken"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "9abba69b8518fd6d5e2297bae761d786"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "Pausable": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "Ownable"
                    ],
                    "state_variables": {
                        "paused": {
                            "type": "bool",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "false",
                            "content": "bool public paused = false;"
                        }
                    },
                    "functions": {
                        "pause": [
                            {
                                "visibility": "public",
                                "content": "function pause() onlyOwner whenNotPaused public{ paused = true; Pause();}",
                                "modifiers": [
                                    "onlyOwner",
                                    "whenNotPaused"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [
                                    [
                                        "paused",
                                        "",
                                        "Pausable"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "paused",
                                        "",
                                        "Pausable"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Ownable.onlyOwner",
                                        "Pausable.whenNotPaused"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "a11e34f3d0f770a9ab3c7cffc939decb"
                            }
                        ],
                        "unpause": [
                            {
                                "visibility": "public",
                                "content": "function unpause() onlyOwner whenPaused public{ paused = false; Unpause();}",
                                "modifiers": [
                                    "onlyOwner",
                                    "whenPaused"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [
                                    [
                                        "paused",
                                        "",
                                        "Pausable"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "paused",
                                        "",
                                        "Pausable"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Ownable.onlyOwner",
                                        "Pausable.whenPaused"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "dd0ccd739ce58fae4b5f3ccfd155b217"
                            }
                        ]
                    },
                    "modifiers": {
                        "whenNotPaused": {
                            "parameters": [],
                            "content": "modifier whenNotPaused(){ require(!paused); _;}",
                            "reads": [
                                [
                                    "paused",
                                    "",
                                    "Pausable"
                                ]
                            ],
                            "writes": [],
                            "external_calls": [],
                            "md5": "b0530ecfa0249acede9d41d8770159b0"
                        },
                        "whenPaused": {
                            "parameters": [],
                            "content": "modifier whenPaused(){ require(paused); _;}",
                            "reads": [
                                [
                                    "paused",
                                    "",
                                    "Pausable"
                                ]
                            ],
                            "writes": [],
                            "external_calls": [],
                            "md5": "323ad957adcb26a2343a94c5fc1ca397"
                        }
                    },
                    "structs": {},
                    "events": {
                        "Pause": {
                            "event": "Pause",
                            "content": "Pause()"
                        },
                        "Unpause": {
                            "event": "Unpause",
                            "content": "Unpause()"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "BlackList": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "Ownable",
                        "BasicToken"
                    ],
                    "state_variables": {
                        "isBlackListed": {
                            "type": "mapping (address => bool)",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping (address => bool) public isBlackListed;"
                        }
                    },
                    "functions": {
                        "getBlackListStatus": [
                            {
                                "visibility": "external",
                                "content": "function getBlackListStatus(address _maker) external constant returns (bool){ return isBlackListed[_maker];}",
                                "modifiers": [
                                    "constant"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_maker"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "isBlackListed",
                                        "",
                                        "BlackList"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "78af679008223f0c84489e80803a60db"
                            }
                        ],
                        "getOwner": [
                            {
                                "visibility": "external",
                                "content": "function getOwner() external constant returns (address){ return owner;}",
                                "modifiers": [
                                    "constant"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "owner",
                                        "",
                                        "Ownable"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "9f787c9a56fa3ebfa7013bcd66d78a5c"
                            }
                        ],
                        "addBlackList": [
                            {
                                "visibility": "public",
                                "content": "function addBlackList (address _evilUser) public onlyOwner{ isBlackListed[_evilUser] = true; AddedBlackList(_evilUser);}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_evilUser"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "isBlackListed",
                                        "",
                                        "BlackList"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "isBlackListed",
                                        "",
                                        "BlackList"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Ownable.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "05999afb3f44b4a4bc66b8001235a4dd"
                            }
                        ],
                        "removeBlackList": [
                            {
                                "visibility": "public",
                                "content": "function removeBlackList (address _clearedUser) public onlyOwner{ isBlackListed[_clearedUser] = false; RemovedBlackList(_clearedUser);}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_clearedUser"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "isBlackListed",
                                        "",
                                        "BlackList"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "isBlackListed",
                                        "",
                                        "BlackList"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Ownable.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "0054cdc0f856e3c2e6ac54f6777a56b8"
                            }
                        ],
                        "destroyBlackFunds": [
                            {
                                "visibility": "public",
                                "content": "function destroyBlackFunds (address _blackListedUser) public onlyOwner{ require(isBlackListed[_blackListedUser]); uint dirtyFunds = balanceOf(_blackListedUser); balances[_blackListedUser] = 0; _totalSupply -= dirtyFunds; DestroyedBlackFunds(_blackListedUser, dirtyFunds);}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_blackListedUser"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "balances",
                                        "",
                                        "BasicToken"
                                    ],
                                    [
                                        "isBlackListed",
                                        "",
                                        "BlackList"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "balances",
                                        "",
                                        "BasicToken"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BlackList.balanceOf",
                                        "Ownable.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "7348e56df34191e97b8a3437d46082ad"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {
                        "DestroyedBlackFunds": {
                            "event": "DestroyedBlackFunds",
                            "content": "DestroyedBlackFunds(address _blackListedUser, uint _balance)"
                        },
                        "AddedBlackList": {
                            "event": "AddedBlackList",
                            "content": "AddedBlackList(address _user)"
                        },
                        "RemovedBlackList": {
                            "event": "RemovedBlackList",
                            "content": "RemovedBlackList(address _user)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "UpgradedStandardToken": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "StandardToken"
                    ],
                    "state_variables": {},
                    "functions": {
                        "transferByLegacy": [
                            {
                                "visibility": "public",
                                "content": "function transferByLegacy(address from, address to, uint value) public;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "value"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "5ce67c988de82429b7569f95d1034140"
                            }
                        ],
                        "transferFromByLegacy": [
                            {
                                "visibility": "public",
                                "content": "function transferFromByLegacy(address sender, address from, address spender, uint value) public;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "sender"
                                    },
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "value"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "e9309db5169b1d4f8384195f0f80e0ea"
                            }
                        ],
                        "approveByLegacy": [
                            {
                                "visibility": "public",
                                "content": "function approveByLegacy(address from, address spender, uint value) public;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "value"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "ec355338a803fe8594ad0996666e3370"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "TetherToken": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "Pausable",
                        "StandardToken",
                        "BlackList"
                    ],
                    "state_variables": {
                        "name": {
                            "type": "string",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "string public name;"
                        },
                        "symbol": {
                            "type": "string",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "string public symbol;"
                        },
                        "decimals": {
                            "type": "uint",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint public decimals;"
                        },
                        "upgradedAddress": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public upgradedAddress;"
                        },
                        "deprecated": {
                            "type": "bool",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "bool public deprecated;"
                        }
                    },
                    "functions": {
                        "TetherToken": [
                            {
                                "visibility": "public",
                                "content": "function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public{ _totalSupply = _initialSupply; name = _name; symbol = _symbol; decimals = _decimals; balances[owner] = _initialSupply; deprecated = false;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "_initialSupply"
                                    },
                                    {
                                        "type": "string",
                                        "name": "_name"
                                    },
                                    {
                                        "type": "string",
                                        "name": "_symbol"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "_decimals"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "owner",
                                        "",
                                        "Ownable"
                                    ],
                                    [
                                        "balances",
                                        "",
                                        "BasicToken"
                                    ],
                                    [
                                        "name",
                                        "",
                                        "TetherToken"
                                    ],
                                    [
                                        "symbol",
                                        "",
                                        "TetherToken"
                                    ],
                                    [
                                        "decimals",
                                        "",
                                        "TetherToken"
                                    ],
                                    [
                                        "deprecated",
                                        "",
                                        "TetherToken"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "balances",
                                        "",
                                        "BasicToken"
                                    ],
                                    [
                                        "name",
                                        "",
                                        "TetherToken"
                                    ],
                                    [
                                        "symbol",
                                        "",
                                        "TetherToken"
                                    ],
                                    [
                                        "decimals",
                                        "",
                                        "TetherToken"
                                    ],
                                    [
                                        "deprecated",
                                        "",
                                        "TetherToken"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "9add3e9fb522289d603fbe4f9f1316e4"
                            }
                        ],
                        "transfer": [
                            {
                                "visibility": "public",
                                "content": "function transfer(address _to, uint _value) public whenNotPaused{ require(!isBlackListed[msg.sender]); if (deprecated){ return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);} else{ return super.transfer(_to, _value);}}",
                                "modifiers": [
                                    "whenNotPaused"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "_value"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "isBlackListed",
                                        "",
                                        "BlackList"
                                    ],
                                    [
                                        "upgradedAddress",
                                        "",
                                        "TetherToken"
                                    ],
                                    [
                                        "deprecated",
                                        "",
                                        "TetherToken"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "98b3db4b5b52873ec5be118d8cd26599"
                            }
                        ],
                        "transferFrom": [
                            {
                                "visibility": "public",
                                "content": "function transferFrom(address _from, address _to, uint _value) public whenNotPaused{ require(!isBlackListed[_from]); if (deprecated){ return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);} else{ return super.transferFrom(_from, _to, _value);}}",
                                "modifiers": [
                                    "whenNotPaused"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "_value"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "isBlackListed",
                                        "",
                                        "BlackList"
                                    ],
                                    [
                                        "upgradedAddress",
                                        "",
                                        "TetherToken"
                                    ],
                                    [
                                        "deprecated",
                                        "",
                                        "TetherToken"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "9c9b4b3365bc5786edf06d9d18bce960"
                            }
                        ],
                        "balanceOf": [
                            {
                                "visibility": "public",
                                "content": "function balanceOf(address who) public constant returns (uint){ if (deprecated){ return UpgradedStandardToken(upgradedAddress).balanceOf(who);} else{ return super.balanceOf(who);}}",
                                "modifiers": [
                                    "constant"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "who"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "upgradedAddress",
                                        "",
                                        "TetherToken"
                                    ],
                                    [
                                        "deprecated",
                                        "",
                                        "TetherToken"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "cba1dc28b838e76caf5281c401e15c20"
                            }
                        ],
                        "approve": [
                            {
                                "visibility": "public",
                                "content": "function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32){ if (deprecated){ return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);} else{ return super.approve(_spender, _value);}}",
                                "modifiers": [
                                    "onlyPayloadSize(2 * 32)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_spender"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "_value"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "upgradedAddress",
                                        "",
                                        "TetherToken"
                                    ],
                                    [
                                        "deprecated",
                                        "",
                                        "TetherToken"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "550d0597c39f3133754f4b590eafe0c6"
                            }
                        ],
                        "allowance": [
                            {
                                "visibility": "public",
                                "content": "function allowance(address _owner, address _spender) public constant returns (uint remaining){ if (deprecated){ return StandardToken(upgradedAddress).allowance(_owner, _spender);} else{ return super.allowance(_owner, _spender);}}",
                                "modifiers": [
                                    "constant"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_owner"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_spender"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "remaining"
                                    }
                                ],
                                "reads": [
                                    [
                                        "upgradedAddress",
                                        "",
                                        "TetherToken"
                                    ],
                                    [
                                        "deprecated",
                                        "",
                                        "TetherToken"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "TetherToken.allowance"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "b7ba96ab599a6bdc101a97fb3abfeb4f"
                            }
                        ],
                        "deprecate": [
                            {
                                "visibility": "public",
                                "content": "function deprecate(address _upgradedAddress) public onlyOwner{ deprecated = true; upgradedAddress = _upgradedAddress; Deprecate(_upgradedAddress);}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_upgradedAddress"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "upgradedAddress",
                                        "",
                                        "TetherToken"
                                    ],
                                    [
                                        "deprecated",
                                        "",
                                        "TetherToken"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "upgradedAddress",
                                        "",
                                        "TetherToken"
                                    ],
                                    [
                                        "deprecated",
                                        "",
                                        "TetherToken"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Ownable.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "9050c982726ad3d91305d0d054cda828"
                            }
                        ],
                        "totalSupply": [
                            {
                                "visibility": "public",
                                "content": "function totalSupply() public constant returns (uint){ if (deprecated){ return StandardToken(upgradedAddress).totalSupply();} else{ return _totalSupply;}}",
                                "modifiers": [
                                    "constant"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "upgradedAddress",
                                        "",
                                        "TetherToken"
                                    ],
                                    [
                                        "deprecated",
                                        "",
                                        "TetherToken"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "16d38347637c1f82b12e9912d9029805"
                            }
                        ],
                        "issue": [
                            {
                                "visibility": "public",
                                "content": "function issue(uint amount) public onlyOwner{ require(_totalSupply + amount > _totalSupply); require(balances[owner] + amount > balances[owner]); balances[owner] += amount; _totalSupply += amount; Issue(amount);}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "owner",
                                        "",
                                        "Ownable"
                                    ],
                                    [
                                        "balances",
                                        "",
                                        "BasicToken"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "balances",
                                        "",
                                        "BasicToken"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Ownable.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "a2bd9f4e3fa8badfb90e264952b20e0a"
                            }
                        ],
                        "redeem": [
                            {
                                "visibility": "public",
                                "content": "function redeem(uint amount) public onlyOwner{ require(_totalSupply >= amount); require(balances[owner] >= amount); _totalSupply -= amount; balances[owner] -= amount; Redeem(amount);}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "owner",
                                        "",
                                        "Ownable"
                                    ],
                                    [
                                        "balances",
                                        "",
                                        "BasicToken"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "balances",
                                        "",
                                        "BasicToken"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Ownable.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "0c041c1eea5bd98ee6332ca881fbc4be"
                            }
                        ],
                        "setParams": [
                            {
                                "visibility": "public",
                                "content": "function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner{ require(newBasisPoints < 20); require(newMaxFee < 50); basisPointsRate = newBasisPoints; maximumFee = newMaxFee.mul(10**decimals); Params(basisPointsRate, maximumFee);}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "newBasisPoints"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "newMaxFee"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "basisPointsRate",
                                        "",
                                        "BasicToken"
                                    ],
                                    [
                                        "maximumFee",
                                        "",
                                        "BasicToken"
                                    ],
                                    [
                                        "decimals",
                                        "",
                                        "TetherToken"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "basisPointsRate",
                                        "",
                                        "BasicToken"
                                    ],
                                    [
                                        "maximumFee",
                                        "",
                                        "BasicToken"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Ownable.onlyOwner",
                                        "newMaxFee.mul"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "d75666c63fccc1eb691b2466df7888a0"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {
                        "Issue": {
                            "event": "Issue",
                            "content": "Issue(uint amount)"
                        },
                        "Redeem": {
                            "event": "Redeem",
                            "content": "Redeem(uint amount)"
                        },
                        "Deprecate": {
                            "event": "Deprecate",
                            "content": "Deprecate(address newAddress)"
                        },
                        "Params": {
                            "event": "Params",
                            "content": "Params(uint feeBasisPoints, uint maxFee)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "Ownable.onlyOwner": "fc2e5e82bfa86a81d2e2e575bebc02d9",
                "Pausable.whenNotPaused": "b0530ecfa0249acede9d41d8770159b0",
                "BasicToken.onlyPayloadSize": "c5467dd3cb945da77c6dd3d2e8b6e64a",
                "BasicToken.transfer": "c380e5042691a8053bcadb8b2ca57512",
                "StandardToken.transferFrom": "2707efa1ffe0b398f7772c09a5dc8a93",
                "StandardToken.approve": "679c6dbbbd27b323ef886ad07392a3d0",
                "Pausable.whenPaused": "323ad957adcb26a2343a94c5fc1ca397",
                "TetherToken.allowance": "b7ba96ab599a6bdc101a97fb3abfeb4f"
            },
            "md5": "4df2c06952f5e7f3a68a834a7e8efd0e"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\ownership\\Ownable.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\ownership\\Ownable.sol",
            "filename": "Ownable.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\GSN\\Context.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "Ownable": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "Context"
                    ],
                    "state_variables": {
                        "_owner": {
                            "type": "address",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address private _owner;"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "internal",
                                "content": "constructor () internal{ address msgSender = _msgSender(); _owner = msgSender; emit OwnershipTransferred(address(0), msgSender);}",
                                "modifiers": [],
                                "parameters": [],
                                "returns": [],
                                "reads": [
                                    [
                                        "_owner",
                                        "",
                                        "Ownable"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_owner",
                                        "",
                                        "Ownable"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "0bccf07d36d4bad76be5c4148e55c230"
                            }
                        ],
                        "owner": [
                            {
                                "visibility": "public",
                                "content": "function owner() public view returns (address){ return _owner;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_owner",
                                        "",
                                        "Ownable"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "555688ef9e741e6498a76c7e2698e28a"
                            }
                        ],
                        "isOwner": [
                            {
                                "visibility": "public",
                                "content": "function isOwner() public view returns (bool){ return _msgSender() == _owner;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_owner",
                                        "",
                                        "Ownable"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Ownable._msgSender"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "5969d34489c3495fbe4ebab1fe5ca2dd"
                            }
                        ],
                        "renounceOwnership": [
                            {
                                "visibility": "public",
                                "content": "function renounceOwnership() public onlyOwner{ emit OwnershipTransferred(_owner, address(0)); _owner = address(0);}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [
                                    [
                                        "_owner",
                                        "",
                                        "Ownable"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_owner",
                                        "",
                                        "Ownable"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Ownable.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "a476eaaf55cd336db195bec9c73b6a9e"
                            }
                        ],
                        "transferOwnership": [
                            {
                                "visibility": "public",
                                "content": "function transferOwnership(address newOwner) public onlyOwner{ _transferOwnership(newOwner);}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "newOwner"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Ownable._transferOwnership",
                                        "Ownable.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "ddeab6a3d5ff49af53c49a13cae1e0bd"
                            }
                        ],
                        "_transferOwnership": [
                            {
                                "visibility": "internal",
                                "content": "function _transferOwnership(address newOwner) internal{ require(newOwner != address(0), \"Ownable: new owner is the zero address\"); emit OwnershipTransferred(_owner, newOwner); _owner = newOwner;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "newOwner"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_owner",
                                        "",
                                        "Ownable"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_owner",
                                        "",
                                        "Ownable"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "5f956d751de97682c5f86923b73293db"
                            }
                        ]
                    },
                    "modifiers": {
                        "onlyOwner": {
                            "parameters": [],
                            "content": "modifier onlyOwner(){ require(isOwner(), \"Ownable: caller is not the owner\"); _;}",
                            "reads": [],
                            "writes": [],
                            "external_calls": {
                                "__set__": true,
                                "values": [
                                    "Ownable.isOwner"
                                ]
                            },
                            "md5": "e51d4482bbb9c52d712461d06280a59d"
                        }
                    },
                    "structs": {},
                    "events": {
                        "OwnershipTransferred": {
                            "event": "OwnershipTransferred",
                            "content": "OwnershipTransferred(address indexed previousOwner, address indexed newOwner)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "Ownable.isOwner": "5969d34489c3495fbe4ebab1fe5ca2dd",
                "Ownable._msgSender": "a9b7db3c77abe3957815043d4f2458b9",
                "Ownable.onlyOwner": "e51d4482bbb9c52d712461d06280a59d",
                "Ownable._transferOwnership": "5f956d751de97682c5f86923b73293db"
            },
            "md5": "d2e7d9578247e7cbbff07b402aebd132"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\lifecycle\\Pausable.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\lifecycle\\Pausable.sol",
            "filename": "Pausable.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\GSN\\Context.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "Pausable": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "Context"
                    ],
                    "state_variables": {
                        "_paused": {
                            "type": "bool",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "bool private _paused;"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "internal",
                                "content": "constructor () internal{ _paused = false;}",
                                "modifiers": [],
                                "parameters": [],
                                "returns": [],
                                "reads": [
                                    [
                                        "_paused",
                                        "",
                                        "Pausable"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_paused",
                                        "",
                                        "Pausable"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "d16e6d6e12403bddd7cd78a7ea9fd15a"
                            }
                        ],
                        "paused": [
                            {
                                "visibility": "public",
                                "content": "function paused() public view returns (bool){ return _paused;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_paused",
                                        "",
                                        "Pausable"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "2cd42665ca6fa1ede9e137f8a2939e65"
                            }
                        ],
                        "_pause": [
                            {
                                "visibility": "internal",
                                "content": "function _pause() internal whenNotPaused{ _paused = true; emit Paused(_msgSender());}",
                                "modifiers": [
                                    "whenNotPaused"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [
                                    [
                                        "_paused",
                                        "",
                                        "Pausable"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_paused",
                                        "",
                                        "Pausable"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Pausable._msgSender",
                                        "Pausable.whenNotPaused"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "9cd2316c6a13117d8ec2db4cf0f802d6"
                            }
                        ],
                        "_unpause": [
                            {
                                "visibility": "internal",
                                "content": "function _unpause() internal whenPaused{ _paused = false; emit Unpaused(_msgSender());}",
                                "modifiers": [
                                    "whenPaused"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [
                                    [
                                        "_paused",
                                        "",
                                        "Pausable"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_paused",
                                        "",
                                        "Pausable"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Pausable._msgSender",
                                        "Pausable.whenPaused"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "8b26a3ad642d45df7b9f15510d157efd"
                            }
                        ]
                    },
                    "modifiers": {
                        "whenNotPaused": {
                            "parameters": [],
                            "content": "modifier whenNotPaused(){ require(!_paused, \"Pausable: paused\"); _;}",
                            "reads": [
                                [
                                    "_paused",
                                    "",
                                    "Pausable"
                                ]
                            ],
                            "writes": [],
                            "external_calls": [],
                            "md5": "916b8aef83a979053b70140c3000aa2c"
                        },
                        "whenPaused": {
                            "parameters": [],
                            "content": "modifier whenPaused(){ require(_paused, \"Pausable: not paused\"); _;}",
                            "reads": [
                                [
                                    "_paused",
                                    "",
                                    "Pausable"
                                ]
                            ],
                            "writes": [],
                            "external_calls": [],
                            "md5": "e0b4b9a4d589dd82240753f62436415f"
                        }
                    },
                    "structs": {},
                    "events": {
                        "Paused": {
                            "event": "Paused",
                            "content": "Paused(address account)"
                        },
                        "Unpaused": {
                            "event": "Unpaused",
                            "content": "Unpaused(address account)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "Pausable.whenNotPaused": "916b8aef83a979053b70140c3000aa2c",
                "Pausable._msgSender": "a9b7db3c77abe3957815043d4f2458b9",
                "Pausable.whenPaused": "e0b4b9a4d589dd82240753f62436415f"
            },
            "md5": "feacda6c29c42060b7ca5d5473311cd2"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\core\\cross_chain_manager\\interface\\IEthCrossChainData.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\core\\cross_chain_manager\\interface\\IEthCrossChainData.sol",
            "filename": "IEthCrossChainData.sol",
            "imported_contracts": {},
            "contracts": {
                "IEthCrossChainData": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "putCurEpochStartHeight": [
                            {
                                "visibility": "external",
                                "content": "function putCurEpochStartHeight(uint32 curEpochStartHeight) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint32",
                                        "name": "curEpochStartHeight"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "fbc09cc5b031a15f48056ff06dcdd8f6"
                            }
                        ],
                        "getCurEpochStartHeight": [
                            {
                                "visibility": "external",
                                "content": "function getCurEpochStartHeight() external view returns (uint32);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint32",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "6b7e100c38bc1ebd4ebcc8546b730fdd"
                            }
                        ],
                        "putCurEpochConPubKeyBytes": [
                            {
                                "visibility": "external",
                                "content": "function putCurEpochConPubKeyBytes(bytes calldata curEpochPkBytes) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "bytes calldata",
                                        "name": "curEpochPkBytes"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "a0b8b187e414009e24e932ca36bea89e"
                            }
                        ],
                        "getCurEpochConPubKeyBytes": [
                            {
                                "visibility": "external",
                                "content": "function getCurEpochConPubKeyBytes() external view returns (bytes memory);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "18ea3c2a24eee4f6d41934b3b20fb80b"
                            }
                        ],
                        "markFromChainTxExist": [
                            {
                                "visibility": "external",
                                "content": "function markFromChainTxExist(uint64 fromChainId, bytes32 fromChainTx) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint64",
                                        "name": "fromChainId"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "fromChainTx"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "ccbe1a50942cda08fddca9b379d6b21c"
                            }
                        ],
                        "checkIfFromChainTxExist": [
                            {
                                "visibility": "external",
                                "content": "function checkIfFromChainTxExist(uint64 fromChainId, bytes32 fromChainTx) external view returns (bool);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint64",
                                        "name": "fromChainId"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "fromChainTx"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "32d6e8fb73b167e1009b7b3923ccc145"
                            }
                        ],
                        "getEthTxHashIndex": [
                            {
                                "visibility": "external",
                                "content": "function getEthTxHashIndex() external view returns (uint256);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "7dd48cbcb70a6a8294714d062fcbfeda"
                            }
                        ],
                        "putEthTxHash": [
                            {
                                "visibility": "external",
                                "content": "function putEthTxHash(bytes32 ethTxHash) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "ethTxHash"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "03bf7da89ab5600fc7f84553221c7a1e"
                            }
                        ],
                        "putExtraData": [
                            {
                                "visibility": "external",
                                "content": "function putExtraData(bytes32 key1, bytes32 key2, bytes calldata value) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "key1"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "key2"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "value"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "6b1e28e5aea0429e38d15d27173cbd1c"
                            }
                        ],
                        "getExtraData": [
                            {
                                "visibility": "external",
                                "content": "function getExtraData(bytes32 key1, bytes32 key2) external view returns (bytes memory);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "key1"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "key2"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "dda9d1194f6e8490da59233830a0cf25"
                            }
                        ],
                        "transferOwnership": [
                            {
                                "visibility": "external",
                                "content": "function transferOwnership(address newOwner) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "newOwner"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "40bf4235c287eecfd5bf6e3a2bcac50b"
                            }
                        ],
                        "pause": [
                            {
                                "visibility": "external",
                                "content": "function pause() external returns (bool);",
                                "modifiers": [],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "faa8b3fb82be55223d8b122c954562a5"
                            }
                        ],
                        "unpause": [
                            {
                                "visibility": "external",
                                "content": "function unpause() external returns (bool);",
                                "modifiers": [],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "89c8e8c04a73b49bebb9f405575b4f76"
                            }
                        ],
                        "paused": [
                            {
                                "visibility": "external",
                                "content": "function paused() external view returns (bool);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "249d4fd073df6c3c691d0712caa8c460"
                            }
                        ],
                        "getEthTxHash": [
                            {
                                "visibility": "external",
                                "content": "function getEthTxHash(uint256 ethTxHashIndex) external view returns (bytes32);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "ethTxHashIndex"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "4003d013a40c9f9e9c62da8625055ffd"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": [
                        [
                            "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\core\\cross_chain_manager\\data\\EthCrossChainData.sol",
                            "EthCrossChainData"
                        ]
                    ]
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "4df133c1c5eaa84f0e562164e30be5a1"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\core\\cross_chain_manager\\data\\EthCrossChainData.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\core\\cross_chain_manager\\data\\EthCrossChainData.sol",
            "filename": "EthCrossChainData.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\ownership\\Ownable.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\lifecycle\\Pausable.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\core\\cross_chain_manager\\interface\\IEthCrossChainData.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "EthCrossChainData": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "IEthCrossChainData",
                        "Ownable",
                        "Pausable"
                    ],
                    "state_variables": {
                        "EthToPolyTxHashMap": {
                            "type": "mapping(uint256 => bytes32)",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(uint256 => bytes32) public EthToPolyTxHashMap;"
                        },
                        "EthToPolyTxHashIndex": {
                            "type": "uint256",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256 public EthToPolyTxHashIndex;"
                        },
                        "ConKeepersPkBytes": {
                            "type": "bytes",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "bytes public ConKeepersPkBytes;"
                        },
                        "CurEpochStartHeight": {
                            "type": "uint32",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint32 public CurEpochStartHeight;"
                        },
                        "FromChainTxExist": {
                            "type": "mapping(uint64 => mapping(bytes32 => bool))",
                            "visibility": "internal",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(uint64 => mapping(bytes32 => bool)) FromChainTxExist;"
                        },
                        "ExtraData": {
                            "type": "mapping(bytes32 => mapping(bytes32 => bytes))",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(bytes32 => mapping(bytes32 => bytes)) public ExtraData;"
                        }
                    },
                    "functions": {
                        "putCurEpochStartHeight": [
                            {
                                "visibility": "public",
                                "content": "function putCurEpochStartHeight(uint32 curEpochStartHeight) public whenNotPaused onlyOwner returns (bool){ CurEpochStartHeight = curEpochStartHeight; return true;}",
                                "modifiers": [
                                    "whenNotPaused",
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint32",
                                        "name": "curEpochStartHeight"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "CurEpochStartHeight",
                                        "",
                                        "EthCrossChainData"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "CurEpochStartHeight",
                                        "",
                                        "EthCrossChainData"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "EthCrossChainData.onlyOwner",
                                        "EthCrossChainData.whenNotPaused"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "71e1ecc90890c94f2e09ddafe89eef6f"
                            }
                        ],
                        "getCurEpochStartHeight": [
                            {
                                "visibility": "public",
                                "content": "function getCurEpochStartHeight() public view returns (uint32){ return CurEpochStartHeight;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint32",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "CurEpochStartHeight",
                                        "",
                                        "EthCrossChainData"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "a4cbd6bec5dc8abfc101c9a741ed2142"
                            }
                        ],
                        "putCurEpochConPubKeyBytes": [
                            {
                                "visibility": "public",
                                "content": "function putCurEpochConPubKeyBytes(bytes memory curEpochPkBytes) public whenNotPaused onlyOwner returns (bool){ ConKeepersPkBytes = curEpochPkBytes; return true;}",
                                "modifiers": [
                                    "whenNotPaused",
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "curEpochPkBytes"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "ConKeepersPkBytes",
                                        "",
                                        "EthCrossChainData"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "ConKeepersPkBytes",
                                        "",
                                        "EthCrossChainData"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "EthCrossChainData.onlyOwner",
                                        "EthCrossChainData.whenNotPaused"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "77a6edb6516d79d42abe35bc86e9df8e"
                            }
                        ],
                        "getCurEpochConPubKeyBytes": [
                            {
                                "visibility": "public",
                                "content": "function getCurEpochConPubKeyBytes() public view returns (bytes memory){ return ConKeepersPkBytes;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "ConKeepersPkBytes",
                                        "",
                                        "EthCrossChainData"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "ff8e238ada47ae8948e0deb3da41f916"
                            }
                        ],
                        "markFromChainTxExist": [
                            {
                                "visibility": "public",
                                "content": "function markFromChainTxExist(uint64 fromChainId, bytes32 fromChainTx) public whenNotPaused onlyOwner returns (bool){ FromChainTxExist[fromChainId][fromChainTx] = true; return true;}",
                                "modifiers": [
                                    "whenNotPaused",
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint64",
                                        "name": "fromChainId"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "fromChainTx"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "FromChainTxExist",
                                        "",
                                        "EthCrossChainData"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "FromChainTxExist",
                                        "",
                                        "EthCrossChainData"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "EthCrossChainData.onlyOwner",
                                        "EthCrossChainData.whenNotPaused"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "d400c25840a24c633dfdbfe4bc194cd7"
                            }
                        ],
                        "checkIfFromChainTxExist": [
                            {
                                "visibility": "public",
                                "content": "function checkIfFromChainTxExist(uint64 fromChainId, bytes32 fromChainTx) public view returns (bool){ return FromChainTxExist[fromChainId][fromChainTx];}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint64",
                                        "name": "fromChainId"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "fromChainTx"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "FromChainTxExist",
                                        "",
                                        "EthCrossChainData"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "ac895daed5ef69650a996278b50f936c"
                            }
                        ],
                        "getEthTxHashIndex": [
                            {
                                "visibility": "public",
                                "content": "function getEthTxHashIndex() public view returns (uint256){ return EthToPolyTxHashIndex;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "EthToPolyTxHashIndex",
                                        "",
                                        "EthCrossChainData"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "f4d670c584fbd910e05292290e7fe896"
                            }
                        ],
                        "putEthTxHash": [
                            {
                                "visibility": "public",
                                "content": "function putEthTxHash(bytes32 ethTxHash) public whenNotPaused onlyOwner returns (bool){ EthToPolyTxHashMap[EthToPolyTxHashIndex] = ethTxHash; EthToPolyTxHashIndex = EthToPolyTxHashIndex + 1; return true;}",
                                "modifiers": [
                                    "whenNotPaused",
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "ethTxHash"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "EthToPolyTxHashMap",
                                        "",
                                        "EthCrossChainData"
                                    ],
                                    [
                                        "EthToPolyTxHashIndex",
                                        "",
                                        "EthCrossChainData"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "EthToPolyTxHashMap",
                                        "",
                                        "EthCrossChainData"
                                    ],
                                    [
                                        "EthToPolyTxHashIndex",
                                        "",
                                        "EthCrossChainData"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "EthCrossChainData.onlyOwner",
                                        "EthCrossChainData.whenNotPaused"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "455fbd3e86c4136d6f15aff58b993e2d"
                            }
                        ],
                        "getEthTxHash": [
                            {
                                "visibility": "public",
                                "content": "function getEthTxHash(uint256 ethTxHashIndex) public view returns (bytes32){ return EthToPolyTxHashMap[ethTxHashIndex];}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "ethTxHashIndex"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "EthToPolyTxHashMap",
                                        "",
                                        "EthCrossChainData"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "b850bc8e79d5932561c636f6212d49fd"
                            }
                        ],
                        "putExtraData": [
                            {
                                "visibility": "public",
                                "content": "function putExtraData(bytes32 key1, bytes32 key2, bytes memory value) public whenNotPaused onlyOwner returns (bool){ ExtraData[key1][key2] = value; return true;}",
                                "modifiers": [
                                    "whenNotPaused",
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "key1"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "key2"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "value"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "ExtraData",
                                        "",
                                        "EthCrossChainData"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "ExtraData",
                                        "",
                                        "EthCrossChainData"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "EthCrossChainData.onlyOwner",
                                        "EthCrossChainData.whenNotPaused"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "8add388d99325e5499a3ccc8e79e5072"
                            }
                        ],
                        "getExtraData": [
                            {
                                "visibility": "public",
                                "content": "function getExtraData(bytes32 key1, bytes32 key2) public view returns (bytes memory){ return ExtraData[key1][key2];}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "key1"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "key2"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "ExtraData",
                                        "",
                                        "EthCrossChainData"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "e04fffd0c2f123d915c8386dba9a3cf1"
                            }
                        ],
                        "pause": [
                            {
                                "visibility": "public",
                                "content": "function pause() onlyOwner whenNotPaused public returns (bool){ _pause(); return true;}",
                                "modifiers": [
                                    "onlyOwner",
                                    "whenNotPaused"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "EthCrossChainData._pause",
                                        "EthCrossChainData.onlyOwner",
                                        "EthCrossChainData.whenNotPaused"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "14cfd27bf3bd8c8a9fe42b6d680a12e6"
                            }
                        ],
                        "unpause": [
                            {
                                "visibility": "public",
                                "content": "function unpause() onlyOwner whenPaused public returns (bool){ _unpause(); return true;}",
                                "modifiers": [
                                    "onlyOwner",
                                    "whenPaused"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "EthCrossChainData.onlyOwner",
                                        "EthCrossChainData._unpause",
                                        "EthCrossChainData.whenPaused"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "e09aaa778b7f834901d917da0697ee8e"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "EthCrossChainData.onlyOwner": "e51d4482bbb9c52d712461d06280a59d",
                "EthCrossChainData.whenNotPaused": "916b8aef83a979053b70140c3000aa2c",
                "EthCrossChainData._pause": "9cd2316c6a13117d8ec2db4cf0f802d6",
                "EthCrossChainData.whenPaused": "e0b4b9a4d589dd82240753f62436415f",
                "EthCrossChainData._unpause": "8b26a3ad642d45df7b9f15510d157efd"
            },
            "md5": "305599c2f810beaaf9176fb30f4075b7"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\core\\cross_chain_manager\\interface\\IUpgradableECCM.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\core\\cross_chain_manager\\interface\\IUpgradableECCM.sol",
            "filename": "IUpgradableECCM.sol",
            "imported_contracts": {},
            "contracts": {
                "IUpgradableECCM": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "pause": [
                            {
                                "visibility": "external",
                                "content": "function pause() external returns (bool);",
                                "modifiers": [],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "faa8b3fb82be55223d8b122c954562a5"
                            }
                        ],
                        "unpause": [
                            {
                                "visibility": "external",
                                "content": "function unpause() external returns (bool);",
                                "modifiers": [],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "89c8e8c04a73b49bebb9f405575b4f76"
                            }
                        ],
                        "paused": [
                            {
                                "visibility": "external",
                                "content": "function paused() external view returns (bool);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "249d4fd073df6c3c691d0712caa8c460"
                            }
                        ],
                        "upgradeToNew": [
                            {
                                "visibility": "external",
                                "content": "function upgradeToNew(address) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "14f160d7e4b15bcb9fbcf372d274f593"
                            }
                        ],
                        "isOwner": [
                            {
                                "visibility": "external",
                                "content": "function isOwner() external view returns (bool);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "6582ecb1affba2b5fe3e92a31afa69a4"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": [
                        [
                            "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\core\\cross_chain_manager\\upgrade\\UpgradableECCM.sol",
                            "UpgradableECCM"
                        ]
                    ]
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "322482e1b814f67df555a96e1ee44af3"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\core\\cross_chain_manager\\libs\\EthCrossChainUtils.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\core\\cross_chain_manager\\libs\\EthCrossChainUtils.sol",
            "filename": "EthCrossChainUtils.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\common\\ZeroCopySource.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\common\\ZeroCopySink.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\utils\\Utils.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "ECCUtils": {
                    "type": {
                        "__CT__": true,
                        "value": 2
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {
                        "POLYCHAIN_PUBKEY_LEN": {
                            "type": "uint",
                            "visibility": "internal",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "67",
                            "content": "uint constant POLYCHAIN_PUBKEY_LEN = 67;"
                        },
                        "POLYCHAIN_SIGNATURE_LEN": {
                            "type": "uint",
                            "visibility": "internal",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "65",
                            "content": "uint constant POLYCHAIN_SIGNATURE_LEN = 65;"
                        }
                    },
                    "functions": {
                        "merkleProve": [
                            {
                                "visibility": "internal",
                                "content": "function merkleProve(bytes memory _auditPath, bytes32 _root) internal pure returns (bytes memory){ uint256 off = 0; bytes memory value; (value, off) = ZeroCopySource.NextVarBytes(_auditPath, off); bytes32 hash = Utils.hashLeaf(value); uint size = (_auditPath.length - off) / 33; bytes32 nodeHash; byte pos; for (uint i = 0; i < size; i++){ (pos, off) = ZeroCopySource.NextByte(_auditPath, off); (nodeHash, off) = ZeroCopySource.NextHash(_auditPath, off); if (pos == 0x00){ hash = Utils.hashChildren(nodeHash, hash);} else if (pos == 0x01){ hash = Utils.hashChildren(hash, nodeHash);} else{ revert(\"merkleProve, NextByte for position info failed\");}} require(hash == _root, \"merkleProve, expect root is not equal actual root\"); return value;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "_auditPath"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "_root"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ZeroCopySource.NextByte",
                                        "Utils.hashLeaf",
                                        "ZeroCopySource.NextHash",
                                        "Utils.hashChildren",
                                        "ZeroCopySource.NextVarBytes"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "4529a57c2ec670b17b772b61e4823578"
                            }
                        ],
                        "_getBookKeeper": [
                            {
                                "visibility": "internal",
                                "content": "function _getBookKeeper(uint _keyLen, uint _m, bytes memory _pubKeyList) internal pure returns (bytes20, address[] memory){ bytes memory buff; buff = ZeroCopySink.WriteUint16(uint16(_keyLen)); address[] memory keepers = new address[](_keyLen); bytes32 hash; bytes memory publicKey; for(uint i = 0; i < _keyLen; i++){ publicKey = Utils.slice(_pubKeyList, i*POLYCHAIN_PUBKEY_LEN, POLYCHAIN_PUBKEY_LEN); buff = abi.encodePacked(buff, ZeroCopySink.WriteVarBytes(Utils.compressMCPubKey(publicKey))); hash = keccak256(Utils.slice(publicKey, 3, 64)); keepers[i] = address(uint160(uint256(hash)));} buff = abi.encodePacked(buff, ZeroCopySink.WriteUint16(uint16(_m))); bytes20 nextBookKeeper = ripemd160(abi.encodePacked(sha256(buff))); return (nextBookKeeper, keepers);}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "_keyLen"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "_m"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "_pubKeyList"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes20",
                                        "name": null
                                    },
                                    {
                                        "type": "address[] memory",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "POLYCHAIN_PUBKEY_LEN",
                                        "",
                                        "ECCUtils"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Utils.slice",
                                        "ZeroCopySink.WriteVarBytes",
                                        "Utils.compressMCPubKey",
                                        "ZeroCopySink.WriteUint16"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "e79545e9155986e021f65ded05311453"
                            }
                        ],
                        "verifyPubkey": [
                            {
                                "visibility": "internal",
                                "content": "function verifyPubkey(bytes memory _pubKeyList) internal pure returns (bytes20, address[] memory){ require(_pubKeyList.length % POLYCHAIN_PUBKEY_LEN == 0, \"_pubKeyList length illegal!\"); uint n = _pubKeyList.length / POLYCHAIN_PUBKEY_LEN; require(n >= 1, \"too short _pubKeyList!\"); return _getBookKeeper(n, n - (n - 1) / 3, _pubKeyList);}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "_pubKeyList"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes20",
                                        "name": null
                                    },
                                    {
                                        "type": "address[] memory",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "POLYCHAIN_PUBKEY_LEN",
                                        "",
                                        "ECCUtils"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ECCUtils._getBookKeeper"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "05712fdd39dfb6c620755c0218d9b521"
                            }
                        ],
                        "verifySig": [
                            {
                                "visibility": "internal",
                                "content": "function verifySig(bytes memory _rawHeader, bytes memory _sigList, address[] memory _keepers, uint _m) internal pure returns (bool){ bytes32 hash = getHeaderHash(_rawHeader); uint signed = 0; uint sigCount = _sigList.length / POLYCHAIN_SIGNATURE_LEN; address[] memory signers = new address[](sigCount); bytes32 r; bytes32 s; uint8 v; for(uint j = 0; j < sigCount; j++){ r = Utils.bytesToBytes32(Utils.slice(_sigList, j*POLYCHAIN_SIGNATURE_LEN, 32)); s = Utils.bytesToBytes32(Utils.slice(_sigList, j*POLYCHAIN_SIGNATURE_LEN + 32, 32)); v = uint8(_sigList[j*POLYCHAIN_SIGNATURE_LEN + 64]) + 27; signers[j] = ecrecover(sha256(abi.encodePacked(hash)), v, r, s);} return Utils.containMAddresses(_keepers, signers, _m);}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "_rawHeader"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "_sigList"
                                    },
                                    {
                                        "type": "address[] memory",
                                        "name": "_keepers"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "_m"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "POLYCHAIN_SIGNATURE_LEN",
                                        "",
                                        "ECCUtils"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Utils.slice",
                                        "Utils.bytesToBytes32",
                                        "Utils.containMAddresses",
                                        "ECCUtils.getHeaderHash"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "915b6747fe5741aa51f5157851781030"
                            }
                        ],
                        "serializeKeepers": [
                            {
                                "visibility": "internal",
                                "content": "function serializeKeepers(address[] memory keepers) internal pure returns (bytes memory){ uint256 keeperLen = keepers.length; bytes memory keepersBytes = ZeroCopySink.WriteUint64(uint64(keeperLen)); for(uint i = 0; i < keeperLen; i++){ keepersBytes = abi.encodePacked(keepersBytes, ZeroCopySink.WriteVarBytes(Utils.addressToBytes(keepers[i])));} return keepersBytes;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "address[] memory",
                                        "name": "keepers"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ZeroCopySink.WriteUint64",
                                        "ZeroCopySink.WriteVarBytes",
                                        "Utils.addressToBytes"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "a6b0fc93cef6462e30d6345771c016ec"
                            }
                        ],
                        "deserializeKeepers": [
                            {
                                "visibility": "internal",
                                "content": "function deserializeKeepers(bytes memory keepersBytes) internal pure returns (address[] memory){ uint256 off = 0; uint64 keeperLen; (keeperLen, off) = ZeroCopySource.NextUint64(keepersBytes, off); address[] memory keepers = new address[](keeperLen); bytes memory keeperBytes; for(uint i = 0; i < keeperLen; i++){ (keeperBytes, off) = ZeroCopySource.NextVarBytes(keepersBytes, off); keepers[i] = Utils.bytesToAddress(keeperBytes);} return keepers;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "keepersBytes"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "address[] memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Utils.bytesToAddress",
                                        "ZeroCopySource.NextUint64",
                                        "ZeroCopySource.NextVarBytes"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "649e9313967fbffa00c68bf33484d026"
                            }
                        ],
                        "deserializeMerkleValue": [
                            {
                                "visibility": "internal",
                                "content": "function deserializeMerkleValue(bytes memory _valueBs) internal pure returns (ToMerkleValue memory){ ToMerkleValue memory toMerkleValue; uint256 off = 0; (toMerkleValue.txHash, off) = ZeroCopySource.NextVarBytes(_valueBs, off); (toMerkleValue.fromChainID, off) = ZeroCopySource.NextUint64(_valueBs, off); TxParam memory txParam; (txParam.txHash, off) = ZeroCopySource.NextVarBytes(_valueBs, off); (txParam.crossChainId, off) = ZeroCopySource.NextVarBytes(_valueBs, off); (txParam.fromContract, off) = ZeroCopySource.NextVarBytes(_valueBs, off); (txParam.toChainId, off) = ZeroCopySource.NextUint64(_valueBs, off); (txParam.toContract, off) = ZeroCopySource.NextVarBytes(_valueBs, off); (txParam.method, off) = ZeroCopySource.NextVarBytes(_valueBs, off); (txParam.args, off) = ZeroCopySource.NextVarBytes(_valueBs, off); toMerkleValue.makeTxParam = txParam; return toMerkleValue;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "_valueBs"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "ToMerkleValue memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ZeroCopySource.NextUint64",
                                        "ZeroCopySource.NextVarBytes"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "a8d80b41e27c2ee09380725ea60aa164"
                            }
                        ],
                        "deserializeHeader": [
                            {
                                "visibility": "internal",
                                "content": "function deserializeHeader(bytes memory _headerBs) internal pure returns (Header memory){ Header memory header; uint256 off = 0; (header.version, off) = ZeroCopySource.NextUint32(_headerBs, off); (header.chainId, off) = ZeroCopySource.NextUint64(_headerBs, off); (header.prevBlockHash, off) = ZeroCopySource.NextHash(_headerBs, off); (header.transactionsRoot, off) = ZeroCopySource.NextHash(_headerBs, off); (header.crossStatesRoot, off) = ZeroCopySource.NextHash(_headerBs, off); (header.blockRoot, off) = ZeroCopySource.NextHash(_headerBs, off); (header.timestamp, off) = ZeroCopySource.NextUint32(_headerBs, off); (header.height, off) = ZeroCopySource.NextUint32(_headerBs, off); (header.consensusData, off) = ZeroCopySource.NextUint64(_headerBs, off); (header.consensusPayload, off) = ZeroCopySource.NextVarBytes(_headerBs, off); (header.nextBookkeeper, off) = ZeroCopySource.NextBytes20(_headerBs, off); return header;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "_headerBs"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "Header memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ZeroCopySource.NextUint64",
                                        "ZeroCopySource.NextUint32",
                                        "ZeroCopySource.NextHash",
                                        "ZeroCopySource.NextBytes20",
                                        "ZeroCopySource.NextVarBytes"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "449c72766e46b6eae8a5316f5f1a4bc7"
                            }
                        ],
                        "getHeaderHash": [
                            {
                                "visibility": "internal",
                                "content": "function getHeaderHash(bytes memory rawHeader) internal pure returns (bytes32){ return sha256(abi.encodePacked(sha256(rawHeader)));}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "rawHeader"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "10f0092cf74ba4b9daabda732c343131"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {
                        "Header": {
                            "content": "Header{ uint32 version; uint64 chainId; uint32 timestamp; uint32 height; uint64 consensusData; bytes32 prevBlockHash; bytes32 transactionsRoot; bytes32 crossStatesRoot; bytes32 blockRoot; bytes consensusPayload; bytes20 nextBookkeeper;}"
                        },
                        "ToMerkleValue": {
                            "content": "ToMerkleValue{ bytes txHash; uint64 fromChainID; TxParam makeTxParam;}"
                        },
                        "TxParam": {
                            "content": "TxParam{ bytes txHash; bytes crossChainId; bytes fromContract; uint64 toChainId; bytes toContract; bytes method; bytes args;}"
                        }
                    },
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "Utils.hashLeaf": "8bc298a88d69ec22525a11259bf7ba61",
                "Utils.hashChildren": "794ddaca60ed4f2dc91d20f03a741596",
                "ZeroCopySource.NextByte": "15c7c85b500b67ae408d4028208791c2",
                "ZeroCopySource.NextVarBytes": "44832bd86b31e65ad466977a2ba787c7",
                "ZeroCopySource.NextHash": "03828ac17784f68816aab2071abf8bf2",
                "Utils.slice": "e06afa1895127c8a4c10525edec2f3c8",
                "Utils.compressMCPubKey": "747a5843ca9ee21313add28dc1a5c74b",
                "ZeroCopySink.WriteVarBytes": "4158ce7a596d8e6f8d52a99c62d186ed",
                "ZeroCopySink.WriteUint16": "c67cd28d9a822009a5ac87927a05f3d0",
                "ECCUtils._getBookKeeper": "e79545e9155986e021f65ded05311453",
                "ECCUtils.getHeaderHash": "10f0092cf74ba4b9daabda732c343131",
                "Utils.bytesToBytes32": "bcaaf9f85bab0afd414e36dd9802a6c8",
                "Utils.containMAddresses": "33f640f09e458b46427b01830966659b",
                "Utils.addressToBytes": "1713a248d8faaeabdb90ffb0b456a40a",
                "ZeroCopySink.WriteUint64": "167a0b56ff247a6f04718313a4fda54e",
                "Utils.bytesToAddress": "092fb95d69cb905a32df9a3a9caa7e1e",
                "ZeroCopySource.NextUint64": "92084c740c7445e12d0689f55f5a0fc9",
                "ZeroCopySource.NextUint32": "81b54c1cec3975b9e9f153bd6e5b4c2e",
                "ZeroCopySource.NextBytes20": "1befeb8170ec99496f40c1235e47f5b6"
            },
            "md5": "aee0d97922cba3d1e75407aa630eef70"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\core\\cross_chain_manager\\upgrade\\UpgradableECCM.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\core\\cross_chain_manager\\upgrade\\UpgradableECCM.sol",
            "filename": "UpgradableECCM.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\core\\cross_chain_manager\\interface\\IEthCrossChainData.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\core\\cross_chain_manager\\interface\\IUpgradableECCM.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\lifecycle\\Pausable.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\ownership\\Ownable.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "UpgradableECCM": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "IUpgradableECCM",
                        "Ownable",
                        "Pausable"
                    ],
                    "state_variables": {
                        "EthCrossChainDataAddress": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public EthCrossChainDataAddress;"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (address ethCrossChainDataAddr) Pausable() Ownable() public{ EthCrossChainDataAddress = ethCrossChainDataAddr;}",
                                "modifiers": [
                                    "Pausable()",
                                    "Ownable()"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "ethCrossChainDataAddr"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "EthCrossChainDataAddress",
                                        "",
                                        "UpgradableECCM"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "EthCrossChainDataAddress",
                                        "",
                                        "UpgradableECCM"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "8b32cd747383e20156e438feaeebc7c5"
                            }
                        ],
                        "pause": [
                            {
                                "visibility": "public",
                                "content": "function pause() onlyOwner public returns (bool){ if (!paused()){ _pause();} IEthCrossChainData eccd = IEthCrossChainData(EthCrossChainDataAddress); if (!eccd.paused()){ require(eccd.pause(), \"pause EthCrossChainData contract failed\");} return true;}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "EthCrossChainDataAddress",
                                        "",
                                        "UpgradableECCM"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "UpgradableECCM.onlyOwner",
                                        "UpgradableECCM.IEthCrossChainData",
                                        "UpgradableECCM._pause",
                                        "IEthCrossChainData.pause",
                                        "UpgradableECCM.paused",
                                        "IEthCrossChainData.paused"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "eb0a02f642e749dfc7831e7a90a1a147"
                            }
                        ],
                        "unpause": [
                            {
                                "visibility": "public",
                                "content": "function unpause() onlyOwner public returns (bool){ if (paused()){ _unpause();} IEthCrossChainData eccd = IEthCrossChainData(EthCrossChainDataAddress); if (eccd.paused()){ require(eccd.unpause(), \"unpause EthCrossChainData contract failed\");} return true;}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "EthCrossChainDataAddress",
                                        "",
                                        "UpgradableECCM"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "UpgradableECCM.onlyOwner",
                                        "UpgradableECCM.IEthCrossChainData",
                                        "IEthCrossChainData.unpause",
                                        "UpgradableECCM._unpause",
                                        "UpgradableECCM.paused",
                                        "IEthCrossChainData.paused"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "265403d2d9562dad8d0a0572692606ff"
                            }
                        ],
                        "upgradeToNew": [
                            {
                                "visibility": "public",
                                "content": "function upgradeToNew(address newEthCrossChainManagerAddress) whenPaused onlyOwner public returns (bool){ IEthCrossChainData eccd = IEthCrossChainData(EthCrossChainDataAddress); eccd.transferOwnership(newEthCrossChainManagerAddress); return true;}",
                                "modifiers": [
                                    "whenPaused",
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "newEthCrossChainManagerAddress"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "EthCrossChainDataAddress",
                                        "",
                                        "UpgradableECCM"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "UpgradableECCM.onlyOwner",
                                        "UpgradableECCM.whenPaused",
                                        "IEthCrossChainData.transferOwnership",
                                        "UpgradableECCM.IEthCrossChainData"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "63bf614722f8d24c4dfc899c6d4ece12"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "UpgradableECCM.paused": "249d4fd073df6c3c691d0712caa8c460",
                "UpgradableECCM.onlyOwner": "e51d4482bbb9c52d712461d06280a59d",
                "IEthCrossChainData.paused": "249d4fd073df6c3c691d0712caa8c460",
                "UpgradableECCM._pause": "9cd2316c6a13117d8ec2db4cf0f802d6",
                "IEthCrossChainData.pause": "14cfd27bf3bd8c8a9fe42b6d680a12e6",
                "UpgradableECCM._unpause": "8b26a3ad642d45df7b9f15510d157efd",
                "IEthCrossChainData.unpause": "e09aaa778b7f834901d917da0697ee8e",
                "UpgradableECCM.whenPaused": "e0b4b9a4d589dd82240753f62436415f",
                "IEthCrossChainData.transferOwnership": "40bf4235c287eecfd5bf6e3a2bcac50b"
            },
            "md5": "52ede2fdbd6927dcdb8f7f4bc64acd09"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\core\\cross_chain_manager\\logic\\EthCrossChainManager.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\core\\cross_chain_manager\\logic\\EthCrossChainManager.sol",
            "filename": "EthCrossChainManager.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\math\\SafeMath.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\common\\ZeroCopySource.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\common\\ZeroCopySink.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\utils\\Utils.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\core\\cross_chain_manager\\upgrade\\UpgradableECCM.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\core\\cross_chain_manager\\libs\\EthCrossChainUtils.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\core\\cross_chain_manager\\interface\\IEthCrossChainManager.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\core\\cross_chain_manager\\interface\\IEthCrossChainData.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "EthCrossChainManager": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "IEthCrossChainManager",
                        "UpgradableECCM"
                    ],
                    "state_variables": {},
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (address _eccd) UpgradableECCM(_eccd) public{}",
                                "modifiers": [
                                    "UpgradableECCM(_eccd)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_eccd"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "7b562e182a289bc611ee6c204181c23e"
                            }
                        ],
                        "initGenesisBlock": [
                            {
                                "visibility": "public",
                                "content": "function initGenesisBlock(bytes memory rawHeader, bytes memory pubKeyList) whenNotPaused public returns(bool){ IEthCrossChainData eccd = IEthCrossChainData(EthCrossChainDataAddress); require(eccd.getCurEpochConPubKeyBytes().length == 0, \"EthCrossChainData contract has already been initialized!\"); ECCUtils.Header memory header = ECCUtils.deserializeHeader(rawHeader); (bytes20 nextBookKeeper, address[] memory keepers) = ECCUtils.verifyPubkey(pubKeyList); require(header.nextBookkeeper == nextBookKeeper, \"NextBookers illegal\"); require(eccd.putCurEpochStartHeight(header.height), \"Save Poly chain current epoch start height to Data contract failed!\"); require(eccd.putCurEpochConPubKeyBytes(ECCUtils.serializeKeepers(keepers)), \"Save Poly chain current epoch book keepers to Data contract failed!\"); emit InitGenesisBlockEvent(header.height, rawHeader); return true;}",
                                "modifiers": [
                                    "whenNotPaused"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "rawHeader"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "pubKeyList"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "EthCrossChainDataAddress",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\core\\cross_chain_manager\\upgrade\\UpgradableECCM.sol",
                                        "UpgradableECCM"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "IEthCrossChainData.getCurEpochConPubKeyBytes",
                                        "ECCUtils.deserializeHeader",
                                        "EthCrossChainManager.IEthCrossChainData",
                                        "EthCrossChainManager.whenNotPaused",
                                        "ECCUtils.verifyPubkey",
                                        "IEthCrossChainData.putCurEpochConPubKeyBytes",
                                        "ECCUtils.serializeKeepers",
                                        "IEthCrossChainData.putCurEpochStartHeight"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "4702737de3d0548024cd6d6a73227d2b"
                            }
                        ],
                        "changeBookKeeper": [
                            {
                                "visibility": "public",
                                "content": "function changeBookKeeper(bytes memory rawHeader, bytes memory pubKeyList, bytes memory sigList) whenNotPaused public returns(bool){ ECCUtils.Header memory header = ECCUtils.deserializeHeader(rawHeader); IEthCrossChainData eccd = IEthCrossChainData(EthCrossChainDataAddress); uint64 curEpochStartHeight = eccd.getCurEpochStartHeight(); require(header.height > curEpochStartHeight, \"The height of header is lower than current epoch start height!\"); require(header.nextBookkeeper != bytes20(0), \"The nextBookKeeper of header is empty\"); address[] memory polyChainBKs = ECCUtils.deserializeKeepers(eccd.getCurEpochConPubKeyBytes()); uint n = polyChainBKs.length; require(ECCUtils.verifySig(rawHeader, sigList, polyChainBKs, n - (n - 1) / 3), \"Verify signature failed!\"); (bytes20 nextBookKeeper, address[] memory keepers) = ECCUtils.verifyPubkey(pubKeyList); require(header.nextBookkeeper == nextBookKeeper, \"NextBookers illegal\"); require(eccd.putCurEpochStartHeight(header.height), \"Save MC LatestHeight to Data contract failed!\"); require(eccd.putCurEpochConPubKeyBytes(ECCUtils.serializeKeepers(keepers)), \"Save Poly chain book keepers bytes to Data contract failed!\"); emit ChangeBookKeeperEvent(header.height, rawHeader); return true;}",
                                "modifiers": [
                                    "whenNotPaused"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "rawHeader"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "pubKeyList"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "sigList"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "EthCrossChainDataAddress",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\core\\cross_chain_manager\\upgrade\\UpgradableECCM.sol",
                                        "UpgradableECCM"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ECCUtils.verifySig",
                                        "IEthCrossChainData.getCurEpochConPubKeyBytes",
                                        "ECCUtils.deserializeKeepers",
                                        "IEthCrossChainData.getCurEpochStartHeight",
                                        "ECCUtils.deserializeHeader",
                                        "EthCrossChainManager.IEthCrossChainData",
                                        "EthCrossChainManager.whenNotPaused",
                                        "ECCUtils.verifyPubkey",
                                        "IEthCrossChainData.putCurEpochConPubKeyBytes",
                                        "ECCUtils.serializeKeepers",
                                        "IEthCrossChainData.putCurEpochStartHeight"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "d585c2626a4ab399ebaae2aa1a7c3974"
                            }
                        ],
                        "crossChain": [
                            {
                                "visibility": "external",
                                "content": "function crossChain(uint64 toChainId, bytes calldata toContract, bytes calldata method, bytes calldata txData) whenNotPaused external returns (bool){ IEthCrossChainData eccd = IEthCrossChainData(EthCrossChainDataAddress); uint256 txHashIndex = eccd.getEthTxHashIndex(); bytes memory paramTxHash = Utils.uint256ToBytes(txHashIndex); bytes memory rawParam = abi.encodePacked(ZeroCopySink.WriteVarBytes(paramTxHash), ZeroCopySink.WriteVarBytes(abi.encodePacked(sha256(abi.encodePacked(address(this), paramTxHash)))), ZeroCopySink.WriteVarBytes(Utils.addressToBytes(msg.sender)), ZeroCopySink.WriteUint64(toChainId), ZeroCopySink.WriteVarBytes(toContract), ZeroCopySink.WriteVarBytes(method), ZeroCopySink.WriteVarBytes(txData) ); require(eccd.putEthTxHash(keccak256(rawParam)), \"Save ethTxHash by index to Data contract failed!\"); emit CrossChainEvent(tx.origin, paramTxHash, msg.sender, toChainId, toContract, rawParam); return true;}",
                                "modifiers": [
                                    "whenNotPaused"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint64",
                                        "name": "toChainId"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "toContract"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "method"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "txData"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "EthCrossChainDataAddress",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\core\\cross_chain_manager\\upgrade\\UpgradableECCM.sol",
                                        "UpgradableECCM"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ZeroCopySink.WriteUint64",
                                        "IEthCrossChainData.getEthTxHashIndex",
                                        "Utils.uint256ToBytes",
                                        "EthCrossChainManager.IEthCrossChainData",
                                        "ZeroCopySink.WriteVarBytes",
                                        "EthCrossChainManager.whenNotPaused",
                                        "Utils.addressToBytes",
                                        "IEthCrossChainData.putEthTxHash"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "742cdb294bb15257c8095ce2db9268f3"
                            }
                        ],
                        "verifyHeaderAndExecuteTx": [
                            {
                                "visibility": "public",
                                "content": "function verifyHeaderAndExecuteTx(bytes memory proof, bytes memory rawHeader, bytes memory headerProof, bytes memory curRawHeader, bytes memory headerSig) whenNotPaused public returns (bool){ ECCUtils.Header memory header = ECCUtils.deserializeHeader(rawHeader); IEthCrossChainData eccd = IEthCrossChainData(EthCrossChainDataAddress); address[] memory polyChainBKs = ECCUtils.deserializeKeepers(eccd.getCurEpochConPubKeyBytes()); uint256 curEpochStartHeight = eccd.getCurEpochStartHeight(); uint n = polyChainBKs.length; if (header.height >= curEpochStartHeight){ require(ECCUtils.verifySig(rawHeader, headerSig, polyChainBKs, n - ( n - 1) / 3), \"Verify poly chain header signature failed!\");} else{ require(ECCUtils.verifySig(curRawHeader, headerSig, polyChainBKs, n - ( n - 1) / 3), \"Verify poly chain current epoch header signature failed!\"); ECCUtils.Header memory curHeader = ECCUtils.deserializeHeader(curRawHeader); bytes memory proveValue = ECCUtils.merkleProve(headerProof, curHeader.blockRoot); require(ECCUtils.getHeaderHash(rawHeader) == Utils.bytesToBytes32(proveValue), \"verify header proof failed!\");} bytes memory toMerkleValueBs = ECCUtils.merkleProve(proof, header.crossStatesRoot); ECCUtils.ToMerkleValue memory toMerkleValue = ECCUtils.deserializeMerkleValue(toMerkleValueBs); require(!eccd.checkIfFromChainTxExist(toMerkleValue.fromChainID, Utils.bytesToBytes32(toMerkleValue.txHash)), \"the transaction has been executed!\"); require(eccd.markFromChainTxExist(toMerkleValue.fromChainID, Utils.bytesToBytes32(toMerkleValue.txHash)), \"Save crosschain tx exist failed!\"); require(toMerkleValue.makeTxParam.toChainId == uint64(2), \"This Tx is not aiming at Ethereum network!\"); address toContract = Utils.bytesToAddress(toMerkleValue.makeTxParam.toContract); require(_executeCrossChainTx(toContract, toMerkleValue.makeTxParam.method, toMerkleValue.makeTxParam.args, toMerkleValue.makeTxParam.fromContract, toMerkleValue.fromChainID), \"Execute CrossChain Tx failed!\"); emit VerifyHeaderAndExecuteTxEvent(toMerkleValue.fromChainID, toMerkleValue.makeTxParam.toContract, toMerkleValue.txHash, toMerkleValue.makeTxParam.txHash); return true;}",
                                "modifiers": [
                                    "whenNotPaused"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "proof"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "rawHeader"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "headerProof"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "curRawHeader"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "headerSig"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "EthCrossChainDataAddress",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\core\\cross_chain_manager\\upgrade\\UpgradableECCM.sol",
                                        "UpgradableECCM"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Utils.bytesToBytes32",
                                        "ECCUtils.verifySig",
                                        "IEthCrossChainData.getCurEpochConPubKeyBytes",
                                        "IEthCrossChainData.checkIfFromChainTxExist",
                                        "ECCUtils.deserializeKeepers",
                                        "IEthCrossChainData.getCurEpochStartHeight",
                                        "ECCUtils.deserializeHeader",
                                        "Utils.bytesToAddress",
                                        "EthCrossChainManager.IEthCrossChainData",
                                        "ECCUtils.getHeaderHash",
                                        "EthCrossChainManager.whenNotPaused",
                                        "IEthCrossChainData.markFromChainTxExist",
                                        "EthCrossChainManager._executeCrossChainTx",
                                        "ECCUtils.merkleProve",
                                        "ECCUtils.deserializeMerkleValue"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "086032fce630615adbd032ec90117ec0"
                            }
                        ],
                        "_executeCrossChainTx": [
                            {
                                "visibility": "internal",
                                "content": "function _executeCrossChainTx(address _toContract, bytes memory _method, bytes memory _args, bytes memory _fromContractAddr, uint64 _fromChainId) internal returns (bool){ require(Utils.isContract(_toContract), \"The passed in address is not a contract !\"); bytes memory returnData; bool success; (success, returnData) = _toContract.call(abi.encodePacked(bytes4(keccak256(abi.encodePacked(_method, \"(bytes, bytes, uint64)\"))), abi.encode(_args, _fromContractAddr, _fromChainId))); require(success == true, \"EthCrossChain call business contract failed\"); require(returnData.length != 0, \"No return value from business contract !\"); (bool res, ) = ZeroCopySource.NextBool(returnData, 31); require(res == true, \"EthCrossChain call business contract return is not true\"); return true;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_toContract"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "_method"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "_args"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "_fromContractAddr"
                                    },
                                    {
                                        "type": "uint64",
                                        "name": "_fromChainId"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ZeroCopySource.NextBool",
                                        "Utils.isContract",
                                        "_toContract.call"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "7059086b0a9521896449812f32300832"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {
                        "InitGenesisBlockEvent": {
                            "event": "InitGenesisBlockEvent",
                            "content": "InitGenesisBlockEvent(uint256 height, bytes rawHeader)"
                        },
                        "ChangeBookKeeperEvent": {
                            "event": "ChangeBookKeeperEvent",
                            "content": "ChangeBookKeeperEvent(uint256 height, bytes rawHeader)"
                        },
                        "CrossChainEvent": {
                            "event": "CrossChainEvent",
                            "content": "CrossChainEvent(address indexed sender, bytes txId, address proxyOrAssetContract, uint64 toChainId, bytes toContract, bytes rawdata)"
                        },
                        "VerifyHeaderAndExecuteTxEvent": {
                            "event": "VerifyHeaderAndExecuteTxEvent",
                            "content": "VerifyHeaderAndExecuteTxEvent(uint64 fromChainID, bytes toContract, bytes crossChainTxHash, bytes fromChainTxHash)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "uint256": "SafeMath"
                    }
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "ECCUtils.deserializeHeader": "449c72766e46b6eae8a5316f5f1a4bc7",
                "IEthCrossChainData.putCurEpochStartHeight": "71e1ecc90890c94f2e09ddafe89eef6f",
                "IEthCrossChainData.putCurEpochConPubKeyBytes": "77a6edb6516d79d42abe35bc86e9df8e",
                "ECCUtils.verifyPubkey": "05712fdd39dfb6c620755c0218d9b521",
                "IEthCrossChainData.getCurEpochConPubKeyBytes": "ff8e238ada47ae8948e0deb3da41f916",
                "ECCUtils.serializeKeepers": "a6b0fc93cef6462e30d6345771c016ec",
                "ECCUtils.deserializeKeepers": "649e9313967fbffa00c68bf33484d026",
                "IEthCrossChainData.getCurEpochStartHeight": "a4cbd6bec5dc8abfc101c9a741ed2142",
                "ECCUtils.verifySig": "915b6747fe5741aa51f5157851781030",
                "IEthCrossChainData.getEthTxHashIndex": "f4d670c584fbd910e05292290e7fe896",
                "Utils.addressToBytes": "1713a248d8faaeabdb90ffb0b456a40a",
                "IEthCrossChainData.putEthTxHash": "455fbd3e86c4136d6f15aff58b993e2d",
                "ZeroCopySink.WriteVarBytes": "4158ce7a596d8e6f8d52a99c62d186ed",
                "ZeroCopySink.WriteUint64": "167a0b56ff247a6f04718313a4fda54e",
                "Utils.uint256ToBytes": "dcc643656e424f52ffc8b87b948d56ef",
                "EthCrossChainManager._executeCrossChainTx": "7059086b0a9521896449812f32300832",
                "IEthCrossChainData.markFromChainTxExist": "d400c25840a24c633dfdbfe4bc194cd7",
                "IEthCrossChainData.checkIfFromChainTxExist": "ac895daed5ef69650a996278b50f936c",
                "Utils.bytesToAddress": "092fb95d69cb905a32df9a3a9caa7e1e",
                "ECCUtils.deserializeMerkleValue": "a8d80b41e27c2ee09380725ea60aa164",
                "ECCUtils.getHeaderHash": "10f0092cf74ba4b9daabda732c343131",
                "ECCUtils.merkleProve": "4529a57c2ec670b17b772b61e4823578",
                "Utils.bytesToBytes32": "bcaaf9f85bab0afd414e36dd9802a6c8",
                "Utils.isContract": "03213a0086847231ca4b607f3e716e3b",
                "ZeroCopySource.NextBool": "23e3ade68faa32847245c5868760b872"
            },
            "md5": "ba6e01ff05637d47ab0a2ce867aa5b87"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\core\\cross_chain_manager\\upgrade\\EthCrossChainManagerProxy.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\core\\cross_chain_manager\\upgrade\\EthCrossChainManagerProxy.sol",
            "filename": "EthCrossChainManagerProxy.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\ownership\\Ownable.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\lifecycle\\Pausable.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\core\\cross_chain_manager\\interface\\IUpgradableECCM.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\core\\cross_chain_manager\\interface\\IEthCrossChainManagerProxy.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "EthCrossChainManagerProxy": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "IEthCrossChainManagerProxy",
                        "Ownable",
                        "Pausable"
                    ],
                    "state_variables": {
                        "EthCrossChainManagerAddr_": {
                            "type": "address",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address private EthCrossChainManagerAddr_;"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (address _ethCrossChainManagerAddr) public{ EthCrossChainManagerAddr_ = _ethCrossChainManagerAddr;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_ethCrossChainManagerAddr"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "EthCrossChainManagerAddr_",
                                        "",
                                        "EthCrossChainManagerProxy"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "EthCrossChainManagerAddr_",
                                        "",
                                        "EthCrossChainManagerProxy"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "3aa62175bdde75a1b4b1e252d7983897"
                            }
                        ],
                        "pause": [
                            {
                                "visibility": "public",
                                "content": "function pause() onlyOwner public returns (bool){ if (paused()){ return true;} _pause(); return true;}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "EthCrossChainManagerProxy.onlyOwner",
                                        "EthCrossChainManagerProxy.paused",
                                        "EthCrossChainManagerProxy._pause"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "43224b33bb6af3178a8d7e7c6f8169dd"
                            }
                        ],
                        "unpause": [
                            {
                                "visibility": "public",
                                "content": "function unpause() onlyOwner public returns (bool){ if (!paused()){ return true;} _unpause(); return true;}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "EthCrossChainManagerProxy.onlyOwner",
                                        "EthCrossChainManagerProxy.paused",
                                        "EthCrossChainManagerProxy._unpause"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "7ba733a7dce53c365b0e4dc54cfe2230"
                            }
                        ],
                        "pauseEthCrossChainManager": [
                            {
                                "visibility": "public",
                                "content": "function pauseEthCrossChainManager() onlyOwner whenNotPaused public returns (bool){ IUpgradableECCM eccm = IUpgradableECCM(EthCrossChainManagerAddr_); require(pause(), \"pause EthCrossChainManagerProxy contract failed!\"); require(eccm.pause(), \"pause EthCrossChainManager contract failed!\");}",
                                "modifiers": [
                                    "onlyOwner",
                                    "whenNotPaused"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "EthCrossChainManagerAddr_",
                                        "",
                                        "EthCrossChainManagerProxy"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "IUpgradableECCM.pause",
                                        "EthCrossChainManagerProxy.pause",
                                        "EthCrossChainManagerProxy.onlyOwner",
                                        "EthCrossChainManagerProxy.IUpgradableECCM",
                                        "EthCrossChainManagerProxy.whenNotPaused"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "baa29d86350520f3b58cb200e2b747b0"
                            }
                        ],
                        "upgradeEthCrossChainManager": [
                            {
                                "visibility": "public",
                                "content": "function upgradeEthCrossChainManager(address _newEthCrossChainManagerAddr) onlyOwner whenPaused public returns (bool){ IUpgradableECCM eccm = IUpgradableECCM(EthCrossChainManagerAddr_); if (!eccm.paused()){ require(eccm.pause(), \"Pause old EthCrossChainManager contract failed!\");} require(eccm.upgradeToNew(_newEthCrossChainManagerAddr), \"EthCrossChainManager upgradeToNew failed!\"); IUpgradableECCM neweccm = IUpgradableECCM(_newEthCrossChainManagerAddr); require(neweccm.isOwner(), \"EthCrossChainManagerProxy is not owner of new EthCrossChainManager contract \"); EthCrossChainManagerAddr_ = _newEthCrossChainManagerAddr;}",
                                "modifiers": [
                                    "onlyOwner",
                                    "whenPaused"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_newEthCrossChainManagerAddr"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "EthCrossChainManagerAddr_",
                                        "",
                                        "EthCrossChainManagerProxy"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "EthCrossChainManagerAddr_",
                                        "",
                                        "EthCrossChainManagerProxy"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "IUpgradableECCM.pause",
                                        "IUpgradableECCM.isOwner",
                                        "IUpgradableECCM.upgradeToNew",
                                        "EthCrossChainManagerProxy.onlyOwner",
                                        "EthCrossChainManagerProxy.whenPaused",
                                        "EthCrossChainManagerProxy.IUpgradableECCM",
                                        "IUpgradableECCM.paused"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "b49a179f1933d3b1ecb4dc313350a94b"
                            }
                        ],
                        "unpauseEthCrossChainManager": [
                            {
                                "visibility": "public",
                                "content": "function unpauseEthCrossChainManager() onlyOwner whenPaused public returns (bool){ IUpgradableECCM eccm = IUpgradableECCM(EthCrossChainManagerAddr_); require(eccm.unpause(), \"unpause EthCrossChainManager contract failed!\"); require(unpause(), \"unpause EthCrossChainManagerProxy contract failed!\");}",
                                "modifiers": [
                                    "onlyOwner",
                                    "whenPaused"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "EthCrossChainManagerAddr_",
                                        "",
                                        "EthCrossChainManagerProxy"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "IUpgradableECCM.unpause",
                                        "EthCrossChainManagerProxy.onlyOwner",
                                        "EthCrossChainManagerProxy.whenPaused",
                                        "EthCrossChainManagerProxy.unpause",
                                        "EthCrossChainManagerProxy.IUpgradableECCM"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "527ba95f0c39c9240f8ce7c954e09be1"
                            }
                        ],
                        "getEthCrossChainManager": [
                            {
                                "visibility": "public",
                                "content": "function getEthCrossChainManager() whenNotPaused public view returns (address){ return EthCrossChainManagerAddr_;}",
                                "modifiers": [
                                    "whenNotPaused",
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "EthCrossChainManagerAddr_",
                                        "",
                                        "EthCrossChainManagerProxy"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "EthCrossChainManagerProxy.whenNotPaused"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "70da4860cc97c748b9d15d83289bc468"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "EthCrossChainManagerProxy.paused": "2cd42665ca6fa1ede9e137f8a2939e65",
                "EthCrossChainManagerProxy._pause": "9cd2316c6a13117d8ec2db4cf0f802d6",
                "EthCrossChainManagerProxy.onlyOwner": "e51d4482bbb9c52d712461d06280a59d",
                "EthCrossChainManagerProxy._unpause": "8b26a3ad642d45df7b9f15510d157efd",
                "EthCrossChainManagerProxy.pause": "43224b33bb6af3178a8d7e7c6f8169dd",
                "EthCrossChainManagerProxy.whenNotPaused": "916b8aef83a979053b70140c3000aa2c",
                "IUpgradableECCM.pause": "eb0a02f642e749dfc7831e7a90a1a147",
                "IUpgradableECCM.upgradeToNew": "63bf614722f8d24c4dfc899c6d4ece12",
                "IUpgradableECCM.isOwner": "5969d34489c3495fbe4ebab1fe5ca2dd",
                "EthCrossChainManagerProxy.whenPaused": "e0b4b9a4d589dd82240753f62436415f",
                "IUpgradableECCM.paused": "2cd42665ca6fa1ede9e137f8a2939e65",
                "IUpgradableECCM.unpause": "265403d2d9562dad8d0a0572692606ff",
                "EthCrossChainManagerProxy.unpause": "7ba733a7dce53c365b0e4dc54cfe2230"
            },
            "md5": "f3423c608e9399de00bcd1aa76b194f0"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\token\\ERC20\\SafeERC20.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\token\\ERC20\\SafeERC20.sol",
            "filename": "SafeERC20.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\token\\ERC20\\IERC20.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\math\\SafeMath.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\utils\\Utils.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "SafeERC20": {
                    "type": {
                        "__CT__": true,
                        "value": 2
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "safeTransfer": [
                            {
                                "visibility": "internal",
                                "content": "function safeTransfer(IERC20 token, address to, uint256 value) internal{ callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "IERC20",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SafeERC20.callOptionalReturn"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "b11a0fddf7dc22f06b2620e7e4df555d"
                            }
                        ],
                        "safeTransferFrom": [
                            {
                                "visibility": "internal",
                                "content": "function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal{ callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "IERC20",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SafeERC20.callOptionalReturn"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "a4d04dde19a092509673b57e918dc01e"
                            }
                        ],
                        "safeApprove": [
                            {
                                "visibility": "internal",
                                "content": "function safeApprove(IERC20 token, address spender, uint256 value) internal{ require((value == 0) || (token.allowance(address(this), spender) == 0), \"SafeERC20: approve from non-zero to non-zero allowance\" ); callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "IERC20",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "IERC20.allowance",
                                        "SafeERC20.callOptionalReturn"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "fb900ca324ce1f8f0ac5dada1a0f4713"
                            }
                        ],
                        "safeIncreaseAllowance": [
                            {
                                "visibility": "internal",
                                "content": "function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal{ uint256 newAllowance = token.allowance(address(this), spender).add(value); callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "IERC20",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "IERC20.allowance",
                                        "SafeERC20.callOptionalReturn"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "ad09e31a87003368d9fa44715d619c0d"
                            }
                        ],
                        "safeDecreaseAllowance": [
                            {
                                "visibility": "internal",
                                "content": "function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal{ uint256 newAllowance = token.allowance(address(this), spender).sub(value); callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "IERC20",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "IERC20.allowance",
                                        "SafeERC20.callOptionalReturn"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "1ad1e12719c4b67ffca1c5031b3a296b"
                            }
                        ],
                        "callOptionalReturn": [
                            {
                                "visibility": "private",
                                "content": "function callOptionalReturn(IERC20 token, bytes memory data) private{ require(Utils.isContract(address(token)), \"SafeERC20: call to non- contract \"); (bool success, bytes memory returndata) = address(token).call(data); require(success, \"SafeERC20: low-level call failed\"); if (returndata.length > 0){ require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "IERC20",
                                        "name": "token"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "data"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Utils.isContract",
                                        "IERC20.data"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "e592ba030a7b36b13400211f6ee684a1"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "uint256": "SafeMath"
                    }
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "SafeERC20.callOptionalReturn": "e592ba030a7b36b13400211f6ee684a1",
                "IERC20.allowance": "592bc064168755118c9f037687aa6211",
                "Utils.isContract": "03213a0086847231ca4b607f3e716e3b"
            },
            "md5": "cc9cb476579ff6efbc70668936803128"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\core\\lock_proxy\\LockProxy.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\core\\lock_proxy\\LockProxy.sol",
            "filename": "LockProxy.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\ownership\\Ownable.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\common\\ZeroCopySource.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\common\\ZeroCopySink.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\utils\\Utils.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\token\\ERC20\\SafeERC20.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\core\\cross_chain_manager\\interface\\IEthCrossChainManager.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\core\\cross_chain_manager\\interface\\IEthCrossChainManagerProxy.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "LockProxy": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "Ownable"
                    ],
                    "state_variables": {
                        "managerProxyContract": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public managerProxyContract;"
                        },
                        "proxyHashMap": {
                            "type": "mapping(uint64 => bytes)",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(uint64 => bytes) public proxyHashMap;"
                        },
                        "assetHashMap": {
                            "type": "mapping(address => mapping(uint64 => bytes))",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(address => mapping(uint64 => bytes)) public assetHashMap;"
                        },
                        "safeTransfer": {
                            "type": "mapping(address => bool)",
                            "visibility": "internal",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(address => bool) safeTransfer;"
                        }
                    },
                    "functions": {
                        "setManagerProxy": [
                            {
                                "visibility": "public",
                                "content": "function setManagerProxy(address ethCCMProxyAddr) onlyOwner public{ managerProxyContract = ethCCMProxyAddr; emit SetManagerProxyEvent(managerProxyContract);}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "ethCCMProxyAddr"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "managerProxyContract",
                                        "",
                                        "LockProxy"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "managerProxyContract",
                                        "",
                                        "LockProxy"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LockProxy.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "921aeb6960a136e093bf531e3e55f5af"
                            }
                        ],
                        "bindProxyHash": [
                            {
                                "visibility": "public",
                                "content": "function bindProxyHash(uint64 toChainId, bytes memory targetProxyHash) onlyOwner public returns (bool){ proxyHashMap[toChainId] = targetProxyHash; emit BindProxyEvent(toChainId, targetProxyHash); return true;}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint64",
                                        "name": "toChainId"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "targetProxyHash"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "proxyHashMap",
                                        "",
                                        "LockProxy"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "proxyHashMap",
                                        "",
                                        "LockProxy"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LockProxy.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "b05bf867900c1dfda73d59791b73a7c4"
                            }
                        ],
                        "bindAssetHash": [
                            {
                                "visibility": "public",
                                "content": "function bindAssetHash(address fromAssetHash, uint64 toChainId, bytes memory toAssetHash) onlyOwner public returns (bool){ assetHashMap[fromAssetHash][toChainId] = toAssetHash; emit BindAssetEvent(fromAssetHash, toChainId, toAssetHash, getBalanceFor(fromAssetHash)); return true;}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "fromAssetHash"
                                    },
                                    {
                                        "type": "uint64",
                                        "name": "toChainId"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "toAssetHash"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "assetHashMap",
                                        "",
                                        "LockProxy"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "assetHashMap",
                                        "",
                                        "LockProxy"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LockProxy.getBalanceFor",
                                        "LockProxy.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "8a9642078dbfcc67200e64b3594c2df7"
                            }
                        ],
                        "lock": [
                            {
                                "visibility": "public",
                                "content": "function lock(address fromAssetHash, uint64 toChainId, bytes memory toAddress, uint256 amount) public payable returns (bool){ require(amount != 0, \"amount cannot be zero!\"); require(_transferToContract(fromAssetHash, amount), \"transfer asset from fromAddress to lock_proxy contract failed!\"); bytes memory toAssetHash = assetHashMap[fromAssetHash][toChainId]; require(toAssetHash.length != 0, \"empty illegal toAssetHash\"); TxArgs memory txArgs = TxArgs({ toAssetHash: toAssetHash, toAddress: toAddress, amount: amount} ); bytes memory txData = _serializeTxArgs(txArgs); IEthCrossChainManagerProxy eccmp = IEthCrossChainManagerProxy(managerProxyContract); address eccmAddr = eccmp.getEthCrossChainManager(); IEthCrossChainManager eccm = IEthCrossChainManager(eccmAddr); bytes memory toProxyHash = proxyHashMap[toChainId]; require(toProxyHash.length != 0, \"empty illegal toProxyHash\"); require(eccm.crossChain(toChainId, toProxyHash, \"unlock\", txData), \"EthCrossChainManager crossChain executed error !\"); emit LockEvent(fromAssetHash, _msgSender(), toChainId, toAssetHash, toAddress, amount); return true;}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "fromAssetHash"
                                    },
                                    {
                                        "type": "uint64",
                                        "name": "toChainId"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "toAddress"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "managerProxyContract",
                                        "",
                                        "LockProxy"
                                    ],
                                    [
                                        "proxyHashMap",
                                        "",
                                        "LockProxy"
                                    ],
                                    [
                                        "assetHashMap",
                                        "",
                                        "LockProxy"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "IEthCrossChainManagerProxy.getEthCrossChainManager",
                                        "LockProxy._transferToContract",
                                        "IEthCrossChainManager.crossChain",
                                        "LockProxy._serializeTxArgs",
                                        "LockProxy.IEthCrossChainManagerProxy",
                                        "LockProxy._msgSender",
                                        "LockProxy.IEthCrossChainManager"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "65a2fb47b68546447e99cfb1661f7bac"
                            }
                        ],
                        "unlock": [
                            {
                                "visibility": "public",
                                "content": "function unlock(bytes memory argsBs, bytes memory fromContractAddr, uint64 fromChainId) onlyManagerContract public returns (bool){ TxArgs memory args = _deserializeTxArgs(argsBs); require(fromContractAddr.length != 0, \"from proxy contract address cannot be empty\"); require(Utils.equalStorage(proxyHashMap[fromChainId], fromContractAddr), \"From Proxy contract address error !\"); require(args.toAssetHash.length != 0, \"toAssetHash cannot be empty\"); address toAssetHash = Utils.bytesToAddress(args.toAssetHash); require(args.toAddress.length != 0, \"toAddress cannot be empty\"); address toAddress = Utils.bytesToAddress(args.toAddress); require(_transferFromContract(toAssetHash, toAddress, args.amount), \"transfer asset from lock_proxy contract to toAddress failed!\"); emit UnlockEvent(toAssetHash, toAddress, args.amount); return true;}",
                                "modifiers": [
                                    "onlyManagerContract"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "argsBs"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "fromContractAddr"
                                    },
                                    {
                                        "type": "uint64",
                                        "name": "fromChainId"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "proxyHashMap",
                                        "",
                                        "LockProxy"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Utils.equalStorage",
                                        "LockProxy._transferFromContract",
                                        "LockProxy.onlyManagerContract",
                                        "Utils.bytesToAddress",
                                        "LockProxy._deserializeTxArgs"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "24e8c725857907a7c030ababfeaa4a48"
                            }
                        ],
                        "getBalanceFor": [
                            {
                                "visibility": "public",
                                "content": "function getBalanceFor(address fromAssetHash) public view returns (uint256){ if (fromAssetHash == address(0)){ address selfAddr = address(this); return selfAddr.balance;} else{ IERC20 erc20Token = IERC20(fromAssetHash); return erc20Token.balanceOf(address(this));}}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "fromAssetHash"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LockProxy.IERC20",
                                        "IERC20.balanceOf"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "79a8eb8fc16c7de92ba1f42449b7a386"
                            }
                        ],
                        "_transferToContract": [
                            {
                                "visibility": "internal",
                                "content": "function _transferToContract(address fromAssetHash, uint256 amount) internal returns (bool){ if (fromAssetHash == address(0)){ require(msg.value != 0, \"transferred ether cannot be zero!\"); require(msg.value == amount, \"transferred ether is not equal to amount!\");} else{ require(msg.value == 0, \"there should be no ether transfer!\"); require(_transferERC20ToContract(fromAssetHash, _msgSender(), address(this), amount), \"transfer erc20 asset to lock_proxy contract failed!\");} return true;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "fromAssetHash"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LockProxy._msgSender",
                                        "LockProxy._transferERC20ToContract"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "80a12a50b8ee6564e4f484f0f1fc3ff4"
                            }
                        ],
                        "_transferFromContract": [
                            {
                                "visibility": "internal",
                                "content": "function _transferFromContract(address toAssetHash, address toAddress, uint256 amount) internal returns (bool){ if (toAssetHash == address(0x0000000000000000000000000000000000000000)){ address(uint160(toAddress)).transfer(amount);} else{ require(_transferERC20FromContract(toAssetHash, toAddress, amount), \"transfer erc20 asset to lock_proxy contract failed!\");} return true;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "toAssetHash"
                                    },
                                    {
                                        "type": "address",
                                        "name": "toAddress"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LockProxy._transferERC20FromContract"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "4840a741501b2c90bb0f8a174c96db1e"
                            }
                        ],
                        "_transferERC20ToContract": [
                            {
                                "visibility": "internal",
                                "content": "function _transferERC20ToContract(address fromAssetHash, address fromAddress, address toAddress, uint256 amount) internal returns (bool){ IERC20 erc20Token = IERC20(fromAssetHash); erc20Token.safeTransferFrom(fromAddress, toAddress, amount); return true;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "fromAssetHash"
                                    },
                                    {
                                        "type": "address",
                                        "name": "fromAddress"
                                    },
                                    {
                                        "type": "address",
                                        "name": "toAddress"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LockProxy.IERC20",
                                        "IERC20.safeTransferFrom"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "14da0607935026b7ddceb43a117425bc"
                            }
                        ],
                        "_transferERC20FromContract": [
                            {
                                "visibility": "internal",
                                "content": "function _transferERC20FromContract(address toAssetHash, address toAddress, uint256 amount) internal returns (bool){ IERC20 erc20Token = IERC20(toAssetHash); erc20Token.safeTransfer(toAddress, amount); return true;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "toAssetHash"
                                    },
                                    {
                                        "type": "address",
                                        "name": "toAddress"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "safeTransfer",
                                        "",
                                        "LockProxy"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "IERC20.safeTransfer",
                                        "LockProxy.IERC20"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "fdff33cd084799447621f6dad595d869"
                            }
                        ],
                        "_serializeTxArgs": [
                            {
                                "visibility": "internal",
                                "content": "function _serializeTxArgs(TxArgs memory args) internal pure returns (bytes memory){ bytes memory buff; buff = abi.encodePacked( ZeroCopySink.WriteVarBytes(args.toAssetHash), ZeroCopySink.WriteVarBytes(args.toAddress), ZeroCopySink.WriteUint255(args.amount) ); return buff;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "TxArgs memory",
                                        "name": "args"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ZeroCopySink.WriteUint255",
                                        "ZeroCopySink.WriteVarBytes"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "d2662f98a7493123d23d556632c9c2ea"
                            }
                        ],
                        "_deserializeTxArgs": [
                            {
                                "visibility": "internal",
                                "content": "function _deserializeTxArgs(bytes memory valueBs) internal pure returns (TxArgs memory){ TxArgs memory args; uint256 off = 0; (args.toAssetHash, off) = ZeroCopySource.NextVarBytes(valueBs, off); (args.toAddress, off) = ZeroCopySource.NextVarBytes(valueBs, off); (args.amount, off) = ZeroCopySource.NextUint255(valueBs, off); return args;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "valueBs"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "TxArgs memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ZeroCopySource.NextVarBytes",
                                        "ZeroCopySource.NextUint255"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "41eb01f685ca39081f24100e24b9da0f"
                            }
                        ]
                    },
                    "modifiers": {
                        "onlyManagerContract": {
                            "parameters": [],
                            "content": "modifier onlyManagerContract(){ IEthCrossChainManagerProxy ieccmp = IEthCrossChainManagerProxy(managerProxyContract); require(_msgSender() == ieccmp.getEthCrossChainManager(), \"msgSender is not EthCrossChainManagerContract\"); _;}",
                            "reads": [
                                [
                                    "managerProxyContract",
                                    "",
                                    "LockProxy"
                                ]
                            ],
                            "writes": [],
                            "external_calls": {
                                "__set__": true,
                                "values": [
                                    "IEthCrossChainManagerProxy.getEthCrossChainManager",
                                    "LockProxy._msgSender",
                                    "LockProxy.IEthCrossChainManagerProxy"
                                ]
                            },
                            "md5": "85a7da07a788e5da47646cad3486c302"
                        }
                    },
                    "structs": {
                        "TxArgs": {
                            "content": "TxArgs{ bytes toAssetHash; bytes toAddress; uint256 amount;}"
                        }
                    },
                    "events": {
                        "SetManagerProxyEvent": {
                            "event": "SetManagerProxyEvent",
                            "content": "SetManagerProxyEvent(address manager)"
                        },
                        "BindProxyEvent": {
                            "event": "BindProxyEvent",
                            "content": "BindProxyEvent(uint64 toChainId, bytes targetProxyHash)"
                        },
                        "BindAssetEvent": {
                            "event": "BindAssetEvent",
                            "content": "BindAssetEvent(address fromAssetHash, uint64 toChainId, bytes targetProxyHash, uint initialAmount)"
                        },
                        "UnlockEvent": {
                            "event": "UnlockEvent",
                            "content": "UnlockEvent(address toAssetHash, address toAddress, uint256 amount)"
                        },
                        "LockEvent": {
                            "event": "LockEvent",
                            "content": "LockEvent(address fromAssetHash, address fromAddress, uint64 toChainId, bytes toAssetHash, bytes toAddress, uint256 amount)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "uint": "SafeMath",
                        "IERC20": "SafeERC20"
                    }
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "IEthCrossChainManagerProxy.getEthCrossChainManager": "70da4860cc97c748b9d15d83289bc468",
                "LockProxy.onlyOwner": "e51d4482bbb9c52d712461d06280a59d",
                "LockProxy.getBalanceFor": "79a8eb8fc16c7de92ba1f42449b7a386",
                "LockProxy._serializeTxArgs": "d2662f98a7493123d23d556632c9c2ea",
                "IEthCrossChainManager.crossChain": "742cdb294bb15257c8095ce2db9268f3",
                "LockProxy._transferToContract": "80a12a50b8ee6564e4f484f0f1fc3ff4",
                "LockProxy._transferFromContract": "4840a741501b2c90bb0f8a174c96db1e",
                "LockProxy._deserializeTxArgs": "41eb01f685ca39081f24100e24b9da0f",
                "LockProxy.onlyManagerContract": "85a7da07a788e5da47646cad3486c302",
                "Utils.bytesToAddress": "092fb95d69cb905a32df9a3a9caa7e1e",
                "Utils.equalStorage": "a98dbe77b37384c01eb9d7794adbd230",
                "LockProxy._transferERC20ToContract": "14da0607935026b7ddceb43a117425bc",
                "LockProxy._transferERC20FromContract": "fdff33cd084799447621f6dad595d869",
                "IERC20.safeTransferFrom": "a4d04dde19a092509673b57e918dc01e",
                "IERC20.safeTransfer": "b11a0fddf7dc22f06b2620e7e4df555d",
                "ZeroCopySink.WriteUint255": "3098e5f486fd389bc2412ac67cb37577",
                "ZeroCopySink.WriteVarBytes": "4158ce7a596d8e6f8d52a99c62d186ed",
                "ZeroCopySource.NextVarBytes": "44832bd86b31e65ad466977a2ba787c7",
                "ZeroCopySource.NextUint255": "ff2c23fbf3c7aea23dfbe47ba62c0624"
            },
            "md5": "32baff3fbc91cbd3250785f6250def08"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\core\\lock_proxy\\LockProxyPip1.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\core\\lock_proxy\\LockProxyPip1.sol",
            "filename": "LockProxyPip1.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\GSN\\Context.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\common\\ZeroCopySource.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\common\\ZeroCopySink.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\utils\\Utils.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\math\\SafeMath.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\core\\cross_chain_manager\\interface\\IEthCrossChainManager.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\core\\cross_chain_manager\\interface\\IEthCrossChainManagerProxy.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "ERC20Interface": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "transfer": [
                            {
                                "visibility": "external",
                                "content": "function transfer(address _to, uint256 _value) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_value"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "68cdb92baa359ceb2574f1c1e6e51c4c"
                            }
                        ],
                        "transferFrom": [
                            {
                                "visibility": "external",
                                "content": "function transferFrom(address _from, address _to, uint _value) external returns (bool success);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "_value"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": "success"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "2610f3e4b1e2b5465581773ee2edd543"
                            }
                        ],
                        "balanceOf": [
                            {
                                "visibility": "external",
                                "content": "function balanceOf(address account) external view returns (uint256);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "account"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "3ac17e7782366957c960d337a4a648cd"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                },
                "LockProxyPip1": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "Context"
                    ],
                    "state_variables": {
                        "managerProxyContract": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public managerProxyContract;"
                        },
                        "registry": {
                            "type": "mapping(bytes32 => bool)",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(bytes32 => bool) public registry;"
                        },
                        "balances": {
                            "type": "mapping(bytes32 => uint256)",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(bytes32 => uint256) public balances;"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (address ethCCMProxyAddr) public{ managerProxyContract = ethCCMProxyAddr; emit SetManagerProxyEvent(managerProxyContract);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "ethCCMProxyAddr"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "managerProxyContract",
                                        "",
                                        "LockProxyPip1"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "managerProxyContract",
                                        "",
                                        "LockProxyPip1"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "ab794d1e9d69b5ad9c4648d0f59f9b1b"
                            }
                        ],
                        "delegateAsset": [
                            {
                                "visibility": "public",
                                "content": "function delegateAsset(uint64 nativeChainId, bytes memory nativeLockProxy, bytes memory nativeAssetHash, uint256 delegatedSupply) public{ require(nativeChainId != 0, \"nativeChainId cannot be zero\"); require(nativeLockProxy.length != 0, \"empty nativeLockProxy\"); require(nativeAssetHash.length != 0, \"empty nativeAssetHash\"); address assetHash = _msgSender(); bytes32 key = _getRegistryKey(assetHash, nativeChainId, nativeLockProxy, nativeAssetHash); require(registry[key] != true, \"asset already registered\"); require(balances[key] == 0, \"balance is not zero\"); require(_balanceFor(assetHash) == delegatedSupply, \"controlled balance does not match delegatedSupply\"); registry[key] = true; RegisterAssetTxArgs memory txArgs = RegisterAssetTxArgs({ assetHash: Utils.addressToBytes(assetHash), nativeAssetHash: nativeAssetHash} ); bytes memory txData = _serializeRegisterAssetTxArgs(txArgs); IEthCrossChainManager eccm = _getEccm(); require(eccm.crossChain(nativeChainId, nativeLockProxy, \"registerAsset\", txData), \"EthCrossChainManager crossChain executed error !\"); balances[key] = delegatedSupply; emit DelegateAssetEvent(assetHash, nativeChainId, nativeLockProxy, nativeAssetHash);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint64",
                                        "name": "nativeChainId"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "nativeLockProxy"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "nativeAssetHash"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "delegatedSupply"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "registry",
                                        "",
                                        "LockProxyPip1"
                                    ],
                                    [
                                        "balances",
                                        "",
                                        "LockProxyPip1"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "registry",
                                        "",
                                        "LockProxyPip1"
                                    ],
                                    [
                                        "balances",
                                        "",
                                        "LockProxyPip1"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LockProxyPip1._getRegistryKey",
                                        "LockProxyPip1._getEccm",
                                        "IEthCrossChainManager.crossChain",
                                        "LockProxyPip1._balanceFor",
                                        "LockProxyPip1._serializeRegisterAssetTxArgs",
                                        "Utils.addressToBytes",
                                        "LockProxyPip1._msgSender"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "5edabffaf6e49d0419656bd55d13a840"
                            }
                        ],
                        "registerAsset": [
                            {
                                "visibility": "public",
                                "content": "function registerAsset(bytes memory argsBs, bytes memory fromContractAddr, uint64 fromChainId) onlyManagerContract public returns (bool){ RegisterAssetTxArgs memory args = _deserializeRegisterAssetTxArgs(argsBs); bytes32 key = _getRegistryKey(Utils.bytesToAddress(args.nativeAssetHash), fromChainId, fromContractAddr, args.assetHash); require(registry[key] != true, \"asset already registerd\"); registry[key] = true; return true;}",
                                "modifiers": [
                                    "onlyManagerContract"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "argsBs"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "fromContractAddr"
                                    },
                                    {
                                        "type": "uint64",
                                        "name": "fromChainId"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "registry",
                                        "",
                                        "LockProxyPip1"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "registry",
                                        "",
                                        "LockProxyPip1"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Utils.bytesToAddress",
                                        "LockProxyPip1._getRegistryKey",
                                        "LockProxyPip1.onlyManagerContract",
                                        "LockProxyPip1._deserializeRegisterAssetTxArgs"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "39c0f4d0d5f9ef639d13f58330661a59"
                            }
                        ],
                        "lock": [
                            {
                                "visibility": "public",
                                "content": "function lock( address fromAssetHash, uint64 toChainId, bytes memory targetProxyHash, bytes memory toAssetHash, bytes memory toAddress, uint256 amount, bool deductFeeInLock, uint256 feeAmount, bytes memory feeAddress ) public payable returns (bool){ require(toChainId != 0, \"toChainId cannot be zero\"); require(targetProxyHash.length != 0, \"empty targetProxyHash\"); require(toAssetHash.length != 0, \"empty toAssetHash\"); require(toAddress.length != 0, \"empty toAddress\"); require(amount != 0, \"amount must be more than zero!\"); require(_transferToContract(fromAssetHash, amount), \"transfer asset from fromAddress to lock_proxy contract failed!\"); bytes32 key = _getRegistryKey(fromAssetHash, toChainId, targetProxyHash, toAssetHash); require(registry[key] == true, \"asset not registered\"); TxArgs memory txArgs = TxArgs({ fromAssetHash: Utils.addressToBytes(fromAssetHash), toAssetHash: toAssetHash, toAddress: toAddress, amount: amount, feeAmount: feeAmount, feeAddress: feeAddress} ); if (feeAmount != 0 && deductFeeInLock){ require(feeAddress.length != 0, \"empty fee address\"); uint256 afterFeeAmount = amount.sub(feeAmount); require(_transferFromContract(fromAssetHash, Utils.bytesToAddress(feeAddress), feeAmount), \"transfer asset from lock_proxy contract to feeAddress failed!\"); txArgs.feeAmount = 0; txArgs.amount = afterFeeAmount;} bytes memory txData = _serializeTxArgs(txArgs); IEthCrossChainManager eccm = _getEccm(); require(eccm.crossChain(toChainId, targetProxyHash, \"unlock\", txData), \"EthCrossChainManager crossChain executed error !\"); balances[key] = balances[key].add(txArgs.amount); emit LockEvent(fromAssetHash, _msgSender(), toChainId, toAssetHash, toAddress, txData); return true;}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "fromAssetHash"
                                    },
                                    {
                                        "type": "uint64",
                                        "name": "toChainId"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "targetProxyHash"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "toAssetHash"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "toAddress"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "bool",
                                        "name": "deductFeeInLock"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "feeAmount"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "feeAddress"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "registry",
                                        "",
                                        "LockProxyPip1"
                                    ],
                                    [
                                        "balances",
                                        "",
                                        "LockProxyPip1"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "balances",
                                        "",
                                        "LockProxyPip1"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LockProxyPip1._transferFromContract",
                                        "LockProxyPip1._getRegistryKey",
                                        "LockProxyPip1._getEccm",
                                        "IEthCrossChainManager.crossChain",
                                        "LockProxyPip1._serializeTxArgs",
                                        "Utils.bytesToAddress",
                                        "LockProxyPip1._transferToContract",
                                        "amount.sub",
                                        "Utils.addressToBytes",
                                        "LockProxyPip1._msgSender"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "21f3188b8bd13725cb5933f826ec34ee"
                            }
                        ],
                        "unlock": [
                            {
                                "visibility": "public",
                                "content": "function unlock(bytes memory argsBs, bytes memory fromContractAddr, uint64 fromChainId) onlyManagerContract public returns (bool){ TxArgs memory args = _deserializeTxArgs(argsBs); address toAssetHash = Utils.bytesToAddress(args.toAssetHash); address toAddress = Utils.bytesToAddress(args.toAddress); bytes32 key = _getRegistryKey(toAssetHash, fromChainId, fromContractAddr, args.fromAssetHash); require(registry[key] == true, \"asset not registered\"); require(balances[key] >= args.amount, \"insufficient balance in registry\"); balances[key] = balances[key].sub(args.amount); uint256 afterFeeAmount = args.amount; if (args.feeAmount != 0){ afterFeeAmount = args.amount.sub(args.feeAmount); address feeAddress = Utils.bytesToAddress(args.feeAddress); require(_transferFromContract(toAssetHash, feeAddress, args.feeAmount), \"transfer asset from lock_proxy contract to feeAddress failed!\"); emit UnlockEvent(toAssetHash, feeAddress, args.feeAmount);} require(_transferFromContract(toAssetHash, toAddress, afterFeeAmount), \"transfer asset from lock_proxy contract to toAddress failed!\"); emit UnlockEvent(toAssetHash, toAddress, args.amount); return true;}",
                                "modifiers": [
                                    "onlyManagerContract"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "argsBs"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "fromContractAddr"
                                    },
                                    {
                                        "type": "uint64",
                                        "name": "fromChainId"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "registry",
                                        "",
                                        "LockProxyPip1"
                                    ],
                                    [
                                        "balances",
                                        "",
                                        "LockProxyPip1"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "balances",
                                        "",
                                        "LockProxyPip1"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LockProxyPip1._transferFromContract",
                                        "LockProxyPip1._getRegistryKey",
                                        "LockProxyPip1._deserializeTxArgs",
                                        "LockProxyPip1.onlyManagerContract",
                                        "Utils.bytesToAddress"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "9809165fd2fe2c22d9e0a24e57cf9b44"
                            }
                        ],
                        "_balanceFor": [
                            {
                                "visibility": "public",
                                "content": "function _balanceFor(address fromAssetHash) public view returns (uint256){ if (fromAssetHash == address(0)){ address selfAddr = address(this); return selfAddr.balance;} else{ ERC20Interface erc20Token = ERC20Interface(fromAssetHash); return erc20Token.balanceOf(address(this));}}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "fromAssetHash"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20Interface.balanceOf"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "8a6b19ce4accc196b5cf9cef3af8ba01"
                            }
                        ],
                        "_getEccm": [
                            {
                                "visibility": "internal",
                                "content": "function _getEccm() internal view returns (IEthCrossChainManager){ IEthCrossChainManagerProxy eccmp = IEthCrossChainManagerProxy(managerProxyContract); address eccmAddr = eccmp.getEthCrossChainManager(); IEthCrossChainManager eccm = IEthCrossChainManager(eccmAddr); return eccm;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "IEthCrossChainManager",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "managerProxyContract",
                                        "",
                                        "LockProxyPip1"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "IEthCrossChainManagerProxy.getEthCrossChainManager",
                                        "LockProxyPip1.IEthCrossChainManagerProxy",
                                        "LockProxyPip1.IEthCrossChainManager"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "b35093223c3eb10b1f5c756639db64a0"
                            }
                        ],
                        "_getRegistryKey": [
                            {
                                "visibility": "internal",
                                "content": "function _getRegistryKey(address assetHash, uint64 nativeChainId, bytes memory nativeLockProxy, bytes memory nativeAssetHash) internal pure returns (bytes32){ return keccak256(abi.encodePacked( assetHash, nativeChainId, nativeLockProxy, nativeAssetHash ));}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "assetHash"
                                    },
                                    {
                                        "type": "uint64",
                                        "name": "nativeChainId"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "nativeLockProxy"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "nativeAssetHash"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "562d2a5702ee1b84fd097e9c96d7478f"
                            }
                        ],
                        "_transferToContract": [
                            {
                                "visibility": "internal",
                                "content": "function _transferToContract(address fromAssetHash, uint256 amount) internal returns (bool){ if (fromAssetHash == address(0)){ require(msg.value == amount, \"transferred ether is not equal to amount!\");} else{ require(_transferERC20ToContract(fromAssetHash, _msgSender(), address(this), amount), \"transfer erc20 asset to lock_proxy contract failed!\");} return true;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "fromAssetHash"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LockProxyPip1._transferERC20ToContract",
                                        "LockProxyPip1._msgSender"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "cf0427aab0a5d05c30768968eef77065"
                            }
                        ],
                        "_transferFromContract": [
                            {
                                "visibility": "internal",
                                "content": "function _transferFromContract(address toAssetHash, address toAddress, uint256 amount) internal returns (bool){ if (toAssetHash == address(0x0000000000000000000000000000000000000000)){ address(uint160(toAddress)).transfer(amount);} else{ require(_transferERC20FromContract(toAssetHash, toAddress, amount), \"transfer erc20 asset to lock_proxy contract failed!\");} return true;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "toAssetHash"
                                    },
                                    {
                                        "type": "address",
                                        "name": "toAddress"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LockProxyPip1._transferERC20FromContract"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "4840a741501b2c90bb0f8a174c96db1e"
                            }
                        ],
                        "_transferERC20ToContract": [
                            {
                                "visibility": "internal",
                                "content": "function _transferERC20ToContract(address fromAssetHash, address fromAddress, address toAddress, uint256 amount) internal returns (bool){ ERC20Interface erc20Token = ERC20Interface(fromAssetHash); require(erc20Token.transferFrom(fromAddress, toAddress, amount), \"trasnfer ERC20 Token failed!\"); return true;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "fromAssetHash"
                                    },
                                    {
                                        "type": "address",
                                        "name": "fromAddress"
                                    },
                                    {
                                        "type": "address",
                                        "name": "toAddress"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20Interface.transferFrom"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "71e993509a137534723424e6661fd82c"
                            }
                        ],
                        "_transferERC20FromContract": [
                            {
                                "visibility": "internal",
                                "content": "function _transferERC20FromContract(address toAssetHash, address toAddress, uint256 amount) internal returns (bool){ ERC20Interface erc20Token = ERC20Interface(toAssetHash); require(erc20Token.transfer(toAddress, amount), \"trasnfer ERC20 Token failed!\"); return true;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "toAssetHash"
                                    },
                                    {
                                        "type": "address",
                                        "name": "toAddress"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20Interface.transfer"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "f556d8b665ec24dbee7278ef1fd98fbd"
                            }
                        ],
                        "_serializeTxArgs": [
                            {
                                "visibility": "internal",
                                "content": "function _serializeTxArgs(TxArgs memory args) internal pure returns (bytes memory){ bytes memory buff; buff = abi.encodePacked( ZeroCopySink.WriteVarBytes(args.fromAssetHash), ZeroCopySink.WriteVarBytes(args.toAssetHash), ZeroCopySink.WriteVarBytes(args.toAddress), ZeroCopySink.WriteUint255(args.amount), ZeroCopySink.WriteUint255(args.feeAmount), ZeroCopySink.WriteVarBytes(args.feeAddress) ); return buff;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "TxArgs memory",
                                        "name": "args"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ZeroCopySink.WriteUint255",
                                        "ZeroCopySink.WriteVarBytes"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "e3358f9acbd164df329e74c1c362612a"
                            }
                        ],
                        "_serializeRegisterAssetTxArgs": [
                            {
                                "visibility": "internal",
                                "content": "function _serializeRegisterAssetTxArgs(RegisterAssetTxArgs memory args) internal pure returns (bytes memory){ bytes memory buff; buff = abi.encodePacked( ZeroCopySink.WriteVarBytes(args.assetHash), ZeroCopySink.WriteVarBytes(args.nativeAssetHash) ); return buff;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "RegisterAssetTxArgs memory",
                                        "name": "args"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ZeroCopySink.WriteVarBytes"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "5e056d4a17a09395eb778e49db77b628"
                            }
                        ],
                        "_deserializeRegisterAssetTxArgs": [
                            {
                                "visibility": "internal",
                                "content": "function _deserializeRegisterAssetTxArgs(bytes memory valueBs) internal pure returns (RegisterAssetTxArgs memory){ RegisterAssetTxArgs memory args; uint256 off = 0; (args.assetHash, off) = ZeroCopySource.NextVarBytes(valueBs, off); (args.nativeAssetHash, off) = ZeroCopySource.NextVarBytes(valueBs, off); return args;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "valueBs"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "RegisterAssetTxArgs memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ZeroCopySource.NextVarBytes"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "6f7efe96a8f9a08fbb28fb98b5da9f25"
                            }
                        ],
                        "_deserializeTxArgs": [
                            {
                                "visibility": "internal",
                                "content": "function _deserializeTxArgs(bytes memory valueBs) internal pure returns (TxArgs memory){ TxArgs memory args; uint256 off = 0; (args.fromAssetHash, off) = ZeroCopySource.NextVarBytes(valueBs, off); (args.toAssetHash, off) = ZeroCopySource.NextVarBytes(valueBs, off); (args.toAddress, off) = ZeroCopySource.NextVarBytes(valueBs, off); (args.amount, off) = ZeroCopySource.NextUint255(valueBs, off); (args.feeAmount, off) = ZeroCopySource.NextUint255(valueBs, off); (args.feeAddress, off) = ZeroCopySource.NextVarBytes(valueBs, off); return args;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "valueBs"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "TxArgs memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ZeroCopySource.NextVarBytes",
                                        "ZeroCopySource.NextUint255"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "0d8fc8db74c5ea2d4f0d0b03625716aa"
                            }
                        ]
                    },
                    "modifiers": {
                        "onlyManagerContract": {
                            "parameters": [],
                            "content": "modifier onlyManagerContract(){ IEthCrossChainManagerProxy ieccmp = IEthCrossChainManagerProxy(managerProxyContract); require(_msgSender() == ieccmp.getEthCrossChainManager(), \"msgSender is not EthCrossChainManagerContract\"); _;}",
                            "reads": [
                                [
                                    "managerProxyContract",
                                    "",
                                    "LockProxyPip1"
                                ]
                            ],
                            "writes": [],
                            "external_calls": {
                                "__set__": true,
                                "values": [
                                    "IEthCrossChainManagerProxy.getEthCrossChainManager",
                                    "LockProxyPip1.IEthCrossChainManagerProxy",
                                    "LockProxyPip1._msgSender"
                                ]
                            },
                            "md5": "85a7da07a788e5da47646cad3486c302"
                        }
                    },
                    "structs": {
                        "RegisterAssetTxArgs": {
                            "content": "RegisterAssetTxArgs{ bytes assetHash; bytes nativeAssetHash;}"
                        },
                        "TxArgs": {
                            "content": "TxArgs{ bytes fromAssetHash; bytes toAssetHash; bytes toAddress; uint256 amount; uint256 feeAmount; bytes feeAddress;}"
                        }
                    },
                    "events": {
                        "SetManagerProxyEvent": {
                            "event": "SetManagerProxyEvent",
                            "content": "SetManagerProxyEvent(address manager)"
                        },
                        "DelegateAssetEvent": {
                            "event": "DelegateAssetEvent",
                            "content": "DelegateAssetEvent(address assetHash, uint64 nativeChainId, bytes nativeLockProxy, bytes nativeAssetHash)"
                        },
                        "UnlockEvent": {
                            "event": "UnlockEvent",
                            "content": "UnlockEvent(address toAssetHash, address toAddress, uint256 amount)"
                        },
                        "LockEvent": {
                            "event": "LockEvent",
                            "content": "LockEvent(address fromAssetHash, address fromAddress, uint64 toChainId, bytes toAssetHash, bytes toAddress, bytes txArgs)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "uint": "SafeMath"
                    }
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "IEthCrossChainManagerProxy.getEthCrossChainManager": "70da4860cc97c748b9d15d83289bc468",
                "LockProxyPip1._msgSender": "a9b7db3c77abe3957815043d4f2458b9",
                "Utils.addressToBytes": "1713a248d8faaeabdb90ffb0b456a40a",
                "LockProxyPip1._getRegistryKey": "562d2a5702ee1b84fd097e9c96d7478f",
                "LockProxyPip1._balanceFor": "8a6b19ce4accc196b5cf9cef3af8ba01",
                "IEthCrossChainManager.crossChain": "742cdb294bb15257c8095ce2db9268f3",
                "LockProxyPip1._getEccm": "b35093223c3eb10b1f5c756639db64a0",
                "LockProxyPip1._serializeRegisterAssetTxArgs": "5e056d4a17a09395eb778e49db77b628",
                "Utils.bytesToAddress": "092fb95d69cb905a32df9a3a9caa7e1e",
                "LockProxyPip1._deserializeRegisterAssetTxArgs": "6f7efe96a8f9a08fbb28fb98b5da9f25",
                "LockProxyPip1.onlyManagerContract": "85a7da07a788e5da47646cad3486c302",
                "LockProxyPip1._transferToContract": "cf0427aab0a5d05c30768968eef77065",
                "LockProxyPip1._transferFromContract": "4840a741501b2c90bb0f8a174c96db1e",
                "amount.sub": "972c2868144778b0617e55a6f97163a0",
                "LockProxyPip1._serializeTxArgs": "e3358f9acbd164df329e74c1c362612a",
                "LockProxyPip1._deserializeTxArgs": "0d8fc8db74c5ea2d4f0d0b03625716aa",
                "ERC20Interface.balanceOf": "3ac17e7782366957c960d337a4a648cd",
                "LockProxyPip1._transferERC20ToContract": "71e993509a137534723424e6661fd82c",
                "LockProxyPip1._transferERC20FromContract": "f556d8b665ec24dbee7278ef1fd98fbd",
                "ERC20Interface.transferFrom": "2610f3e4b1e2b5465581773ee2edd543",
                "ERC20Interface.transfer": "68cdb92baa359ceb2574f1c1e6e51c4c",
                "ZeroCopySink.WriteUint255": "3098e5f486fd389bc2412ac67cb37577",
                "ZeroCopySink.WriteVarBytes": "4158ce7a596d8e6f8d52a99c62d186ed",
                "ZeroCopySource.NextVarBytes": "44832bd86b31e65ad466977a2ba787c7",
                "ZeroCopySource.NextUint255": "ff2c23fbf3c7aea23dfbe47ba62c0624"
            },
            "md5": "30daafa3e7619992a8801f6cb43cdf41"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\core\\lock_proxy\\LockProxyPip4.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\core\\lock_proxy\\LockProxyPip4.sol",
            "filename": "LockProxyPip4.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\ownership\\Ownable.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\common\\ZeroCopySource.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\common\\ZeroCopySink.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\utils\\Utils.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\token\\ERC20\\SafeERC20.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\token\\ERC20\\ERC20Detailed.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\lifecycle\\Pausable.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\core\\cross_chain_manager\\interface\\IEthCrossChainManager.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\core\\cross_chain_manager\\interface\\IEthCrossChainManagerProxy.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "LockProxyPip4": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "Ownable",
                        "Pausable"
                    ],
                    "state_variables": {
                        "StandardDecimals": {
                            "type": "uint8",
                            "visibility": "internal",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "18",
                            "content": "uint8 constant StandardDecimals = 18;"
                        },
                        "managerProxyContract": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public managerProxyContract;"
                        },
                        "proxyHashMap": {
                            "type": "mapping(uint64 => bytes)",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(uint64 => bytes) public proxyHashMap;"
                        },
                        "assetHashMap": {
                            "type": "mapping(address => mapping(uint64 => bytes))",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(address => mapping(uint64 => bytes)) public assetHashMap;"
                        },
                        "assetLPMap": {
                            "type": "mapping(address => address)",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(address => address) public assetLPMap;"
                        }
                    },
                    "functions": {
                        "pause": [
                            {
                                "visibility": "public",
                                "content": "function pause() onlyOwner whenNotPaused public returns (bool){ _pause(); return true;}",
                                "modifiers": [
                                    "onlyOwner",
                                    "whenNotPaused"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LockProxyPip4.onlyOwner",
                                        "LockProxyPip4.whenNotPaused",
                                        "LockProxyPip4._pause"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "14cfd27bf3bd8c8a9fe42b6d680a12e6"
                            }
                        ],
                        "unpause": [
                            {
                                "visibility": "public",
                                "content": "function unpause() onlyOwner whenPaused public returns (bool){ _unpause(); return true;}",
                                "modifiers": [
                                    "onlyOwner",
                                    "whenPaused"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LockProxyPip4._unpause",
                                        "LockProxyPip4.whenPaused",
                                        "LockProxyPip4.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "e09aaa778b7f834901d917da0697ee8e"
                            }
                        ],
                        "setManagerProxy": [
                            {
                                "visibility": "public",
                                "content": "function setManagerProxy(address ethCCMProxyAddr) onlyOwner public{ managerProxyContract = ethCCMProxyAddr; emit SetManagerProxyEvent(managerProxyContract);}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "ethCCMProxyAddr"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "managerProxyContract",
                                        "",
                                        "LockProxyPip4"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "managerProxyContract",
                                        "",
                                        "LockProxyPip4"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LockProxyPip4.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "921aeb6960a136e093bf531e3e55f5af"
                            }
                        ],
                        "bindProxyHash": [
                            {
                                "visibility": "public",
                                "content": "function bindProxyHash(uint64 toChainId, bytes memory targetProxyHash) onlyOwner public returns (bool){ proxyHashMap[toChainId] = targetProxyHash; emit BindProxyEvent(toChainId, targetProxyHash); return true;}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint64",
                                        "name": "toChainId"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "targetProxyHash"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "proxyHashMap",
                                        "",
                                        "LockProxyPip4"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "proxyHashMap",
                                        "",
                                        "LockProxyPip4"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LockProxyPip4.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "b05bf867900c1dfda73d59791b73a7c4"
                            }
                        ],
                        "bindAssetHash": [
                            {
                                "visibility": "public",
                                "content": "function bindAssetHash(address fromAssetHash, uint64 toChainId, bytes memory toAssetHash) onlyOwner public returns (bool){ assetHashMap[fromAssetHash][toChainId] = toAssetHash; emit BindAssetEvent(fromAssetHash, toChainId, toAssetHash, getBalanceFor(fromAssetHash)); return true;}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "fromAssetHash"
                                    },
                                    {
                                        "type": "uint64",
                                        "name": "toChainId"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "toAssetHash"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "assetHashMap",
                                        "",
                                        "LockProxyPip4"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "assetHashMap",
                                        "",
                                        "LockProxyPip4"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LockProxyPip4.getBalanceFor",
                                        "LockProxyPip4.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "8a9642078dbfcc67200e64b3594c2df7"
                            }
                        ],
                        "bindLPToAsset": [
                            {
                                "visibility": "public",
                                "content": "function bindLPToAsset(address originAssetAddress, address LPTokenAddress) onlyOwner public returns (bool){ assetLPMap[originAssetAddress] = LPTokenAddress; emit BindLPToAssetEvent(originAssetAddress, LPTokenAddress); return true;}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "originAssetAddress"
                                    },
                                    {
                                        "type": "address",
                                        "name": "LPTokenAddress"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "assetLPMap",
                                        "",
                                        "LockProxyPip4"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "assetLPMap",
                                        "",
                                        "LockProxyPip4"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LockProxyPip4.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "127efe41f1d372ffb72a36f9a58a2a40"
                            }
                        ],
                        "bindLPAndAsset": [
                            {
                                "visibility": "public",
                                "content": "function bindLPAndAsset(address fromAssetHash, address fromLPHash, uint64 toChainId, bytes memory toAssetHash, bytes memory toLPHash) onlyOwner public returns (bool){ assetHashMap[fromAssetHash][toChainId] = toAssetHash; assetHashMap[fromLPHash][toChainId] = toLPHash; assetLPMap[fromAssetHash] = fromLPHash; emit BindAssetEvent(fromAssetHash, toChainId, toAssetHash, getBalanceFor(fromAssetHash)); emit BindAssetEvent(fromLPHash, toChainId, toLPHash, getBalanceFor(fromLPHash)); emit BindLPToAssetEvent(fromAssetHash, fromLPHash); return true;}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "fromAssetHash"
                                    },
                                    {
                                        "type": "address",
                                        "name": "fromLPHash"
                                    },
                                    {
                                        "type": "uint64",
                                        "name": "toChainId"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "toAssetHash"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "toLPHash"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "assetHashMap",
                                        "",
                                        "LockProxyPip4"
                                    ],
                                    [
                                        "assetLPMap",
                                        "",
                                        "LockProxyPip4"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "assetHashMap",
                                        "",
                                        "LockProxyPip4"
                                    ],
                                    [
                                        "assetLPMap",
                                        "",
                                        "LockProxyPip4"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LockProxyPip4.getBalanceFor",
                                        "LockProxyPip4.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "55da9f9b4dddb0e0206a5deb5bc9b7fb"
                            }
                        ],
                        "bindProxyHashBatch": [
                            {
                                "visibility": "public",
                                "content": "function bindProxyHashBatch(uint64[] memory toChainId, bytes[] memory targetProxyHash) onlyOwner public returns (bool){ require(toChainId.length == targetProxyHash.length, \"bindProxyHashBatch: args length diff\"); for (uint i = 0; i < toChainId.length; i++){ proxyHashMap[toChainId[i]] = targetProxyHash[i]; emit BindProxyEvent(toChainId[i], targetProxyHash[i]);} return true;}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint64[] memory",
                                        "name": "toChainId"
                                    },
                                    {
                                        "type": "bytes[] memory",
                                        "name": "targetProxyHash"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "proxyHashMap",
                                        "",
                                        "LockProxyPip4"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "proxyHashMap",
                                        "",
                                        "LockProxyPip4"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LockProxyPip4.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "8d6269adbe7cac4e2b9ed5e0cbff2eec"
                            }
                        ],
                        "bindAssetHashBatch": [
                            {
                                "visibility": "public",
                                "content": "function bindAssetHashBatch(address[] memory fromAssetHash, uint64[] memory toChainId, bytes[] memory toAssetHash) onlyOwner public returns (bool){ require(toChainId.length == fromAssetHash.length, \"bindAssetHashBatch: args length diff\"); require(toChainId.length == toAssetHash.length, \"bindAssetHashBatch: args length diff\"); for (uint i = 0; i < toChainId.length; i++){ assetHashMap[fromAssetHash[i]][toChainId[i]] = toAssetHash[i]; emit BindAssetEvent(fromAssetHash[i], toChainId[i], toAssetHash[i], getBalanceFor(fromAssetHash[i]));} return true;}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "address[] memory",
                                        "name": "fromAssetHash"
                                    },
                                    {
                                        "type": "uint64[] memory",
                                        "name": "toChainId"
                                    },
                                    {
                                        "type": "bytes[] memory",
                                        "name": "toAssetHash"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "assetHashMap",
                                        "",
                                        "LockProxyPip4"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "assetHashMap",
                                        "",
                                        "LockProxyPip4"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LockProxyPip4.getBalanceFor",
                                        "LockProxyPip4.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "a7609ec1a877c8ff12b6eec0e006e87d"
                            }
                        ],
                        "bindLPToAssetBatch": [
                            {
                                "visibility": "public",
                                "content": "function bindLPToAssetBatch(address[] memory originAssetAddress, address[] memory LPTokenAddress) onlyOwner public returns (bool){ require(originAssetAddress.length == LPTokenAddress.length, \"bindLPToAssetBatch: args length diff\"); for (uint i = 0; i < originAssetAddress.length; i++){ assetLPMap[originAssetAddress[i]] = LPTokenAddress[i]; emit BindLPToAssetEvent(originAssetAddress[i], LPTokenAddress[i]);} return true;}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "address[] memory",
                                        "name": "originAssetAddress"
                                    },
                                    {
                                        "type": "address[] memory",
                                        "name": "LPTokenAddress"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "assetLPMap",
                                        "",
                                        "LockProxyPip4"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "assetLPMap",
                                        "",
                                        "LockProxyPip4"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LockProxyPip4.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "ac3632a5b15f5eaf72c5ebca3d02e1ea"
                            }
                        ],
                        "bindLPAndAssetBatch": [
                            {
                                "visibility": "public",
                                "content": "function bindLPAndAssetBatch(address[] memory fromAssetHash, address[] memory fromLPHash, uint64[] memory toChainId, bytes[] memory toAssetHash, bytes[] memory toLPHash) onlyOwner public returns (bool){ require(fromAssetHash.length == fromLPHash.length, \"bindLPAndAssetBatch: args length diff\"); require(toAssetHash.length == toLPHash.length, \"bindLPAndAssetBatch: args length diff\"); for(uint256 i = 0; i < fromLPHash.length; i++){ assetHashMap[fromAssetHash[i]][toChainId[i]] = toAssetHash[i]; assetHashMap[fromLPHash[i]][toChainId[i]] = toLPHash[i]; assetLPMap[fromAssetHash[i]] = fromLPHash[i]; emit BindAssetEvent(fromAssetHash[i], toChainId[i], toAssetHash[i], getBalanceFor(fromAssetHash[i])); emit BindAssetEvent(fromLPHash[i], toChainId[i], toLPHash[i], getBalanceFor(fromLPHash[i])); emit BindLPToAssetEvent(fromAssetHash[i], fromLPHash[i]);} return true;}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "address[] memory",
                                        "name": "fromAssetHash"
                                    },
                                    {
                                        "type": "address[] memory",
                                        "name": "fromLPHash"
                                    },
                                    {
                                        "type": "uint64[] memory",
                                        "name": "toChainId"
                                    },
                                    {
                                        "type": "bytes[] memory",
                                        "name": "toAssetHash"
                                    },
                                    {
                                        "type": "bytes[] memory",
                                        "name": "toLPHash"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "assetHashMap",
                                        "",
                                        "LockProxyPip4"
                                    ],
                                    [
                                        "assetLPMap",
                                        "",
                                        "LockProxyPip4"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "assetHashMap",
                                        "",
                                        "LockProxyPip4"
                                    ],
                                    [
                                        "assetLPMap",
                                        "",
                                        "LockProxyPip4"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LockProxyPip4.getBalanceFor",
                                        "LockProxyPip4.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "7e15071a181a2c597bb88312ad2ee5d7"
                            }
                        ],
                        "lock": [
                            {
                                "visibility": "public",
                                "content": "function lock(address fromAssetHash, uint64 toChainId, bytes memory toAddress, uint256 amount) public payable returns (bool){ require(amount != 0, \"amount cannot be zero!\"); require(_transferToContract(fromAssetHash, amount), \"transfer asset from fromAddress to lock_proxy contract failed!\"); bytes memory toAssetHash = assetHashMap[fromAssetHash][toChainId]; require(toAssetHash.length != 0, \"empty illegal toAssetHash\"); TxArgs memory txArgs = TxArgs({ toAssetHash: toAssetHash, toAddress: toAddress, amount: _toStandardDecimals(fromAssetHash, amount)} ); bytes memory txData = _serializeTxArgs(txArgs); IEthCrossChainManagerProxy eccmp = IEthCrossChainManagerProxy(managerProxyContract); address eccmAddr = eccmp.getEthCrossChainManager(); IEthCrossChainManager eccm = IEthCrossChainManager(eccmAddr); bytes memory toProxyHash = proxyHashMap[toChainId]; require(toProxyHash.length != 0, \"empty illegal toProxyHash\"); require(eccm.crossChain(toChainId, toProxyHash, \"unlock\", txData), \"EthCrossChainManager crossChain executed error !\"); emit LockEvent(fromAssetHash, _msgSender(), toChainId, toAssetHash, toAddress, amount); return true;}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "fromAssetHash"
                                    },
                                    {
                                        "type": "uint64",
                                        "name": "toChainId"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "toAddress"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "managerProxyContract",
                                        "",
                                        "LockProxyPip4"
                                    ],
                                    [
                                        "proxyHashMap",
                                        "",
                                        "LockProxyPip4"
                                    ],
                                    [
                                        "assetHashMap",
                                        "",
                                        "LockProxyPip4"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "IEthCrossChainManagerProxy.getEthCrossChainManager",
                                        "LockProxyPip4._msgSender",
                                        "IEthCrossChainManager.crossChain",
                                        "LockProxyPip4.IEthCrossChainManagerProxy",
                                        "LockProxyPip4.IEthCrossChainManager",
                                        "LockProxyPip4._toStandardDecimals",
                                        "LockProxyPip4._transferToContract",
                                        "LockProxyPip4._serializeTxArgs"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "10db7a77dba9f0c757f072ca20897ee0"
                            }
                        ],
                        "unlock": [
                            {
                                "visibility": "public",
                                "content": "function unlock(bytes memory argsBs, bytes memory fromContractAddr, uint64 fromChainId) onlyManagerContract public returns (bool){ TxArgs memory args = _deserializeTxArgs(argsBs); require(fromContractAddr.length != 0, \"from proxy contract address cannot be empty\"); require(Utils.equalStorage(proxyHashMap[fromChainId], fromContractAddr), \"From Proxy contract address error !\"); require(args.toAssetHash.length != 0, \"toAssetHash cannot be empty\"); address toAssetHash = Utils.bytesToAddress(args.toAssetHash); require(args.toAddress.length != 0, \"toAddress cannot be empty\"); address toAddress = Utils.bytesToAddress(args.toAddress); uint amount = _fromStandardDecimals(toAssetHash, args.amount); require(_transferFromContract(toAssetHash, toAddress, amount), \"transfer asset from lock_proxy contract to toAddress failed!\"); emit UnlockEvent(toAssetHash, toAddress, amount); return true;}",
                                "modifiers": [
                                    "onlyManagerContract"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "argsBs"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "fromContractAddr"
                                    },
                                    {
                                        "type": "uint64",
                                        "name": "fromChainId"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "proxyHashMap",
                                        "",
                                        "LockProxyPip4"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Utils.equalStorage",
                                        "LockProxyPip4._deserializeTxArgs",
                                        "LockProxyPip4.onlyManagerContract",
                                        "LockProxyPip4._transferFromContract",
                                        "LockProxyPip4._fromStandardDecimals",
                                        "Utils.bytesToAddress"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "2d7b155a7bcd9515c6d4ad90611624a2"
                            }
                        ],
                        "deposit": [
                            {
                                "visibility": "public",
                                "content": "function deposit(address originAssetAddress, uint amount) whenNotPaused payable public returns (bool){ require(amount != 0, \"amount cannot be zero!\"); require(_transferToContract(originAssetAddress, amount), \"transfer asset from fromAddress to lock_proxy contract failed!\"); address LPTokenAddress = assetLPMap[originAssetAddress]; require(LPTokenAddress != address(0), \"do not support deposite this token\"); uint standardAmount = _toStandardDecimals(originAssetAddress, amount); uint lpAmount = _fromStandardDecimals(LPTokenAddress, standardAmount); require(_transferFromContract(LPTokenAddress, msg.sender, lpAmount), \"transfer proof of liquidity from lock_proxy contract to fromAddress failed!\"); emit depositEvent(msg.sender, originAssetAddress, LPTokenAddress, amount); return true;}",
                                "modifiers": [
                                    "whenNotPaused",
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "originAssetAddress"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "assetLPMap",
                                        "",
                                        "LockProxyPip4"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LockProxyPip4._fromStandardDecimals",
                                        "LockProxyPip4._transferFromContract",
                                        "LockProxyPip4._toStandardDecimals",
                                        "LockProxyPip4._transferToContract",
                                        "LockProxyPip4.whenNotPaused"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "ae4f2110d30a827b483b0ac435536392"
                            }
                        ],
                        "withdraw": [
                            {
                                "visibility": "public",
                                "content": "function withdraw(address targetTokenAddress, uint lpAmount) whenNotPaused public returns (bool){ require(lpAmount != 0, \"amount cannot be zero!\"); address LPTokenAddress = assetLPMap[targetTokenAddress]; require(LPTokenAddress != address(0), \"do not support withdraw this token\"); require(_transferToContract(LPTokenAddress, lpAmount), \"transfer proof of liquidity from fromAddress to lock_proxy contract failed!\"); uint standardAmount = _toStandardDecimals(LPTokenAddress, lpAmount); uint amount = _fromStandardDecimals(targetTokenAddress, standardAmount); require(_transferFromContract(targetTokenAddress, msg.sender, amount), \"transfer asset from lock_proxy contract to fromAddress failed!\"); emit withdrawEvent(msg.sender, targetTokenAddress, LPTokenAddress, amount); return true;}",
                                "modifiers": [
                                    "whenNotPaused"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "targetTokenAddress"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "lpAmount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "assetLPMap",
                                        "",
                                        "LockProxyPip4"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LockProxyPip4._fromStandardDecimals",
                                        "LockProxyPip4._transferFromContract",
                                        "LockProxyPip4._toStandardDecimals",
                                        "LockProxyPip4._transferToContract",
                                        "LockProxyPip4.whenNotPaused"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "bab00a1685babaa904094f2b1e1fdcfd"
                            }
                        ],
                        "getBalanceFor": [
                            {
                                "visibility": "public",
                                "content": "function getBalanceFor(address fromAssetHash) public view returns (uint256){ if (fromAssetHash == address(0)){ address selfAddr = address(this); return selfAddr.balance;} else{ IERC20 erc20Token = IERC20(fromAssetHash); return erc20Token.balanceOf(address(this));}}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "fromAssetHash"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LockProxyPip4.IERC20",
                                        "IERC20.balanceOf"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "79a8eb8fc16c7de92ba1f42449b7a386"
                            }
                        ],
                        "_toStandardDecimals": [
                            {
                                "visibility": "internal",
                                "content": "function _toStandardDecimals(address token, uint256 amount) internal view returns (uint256){ uint8 decimals; if (token == address(0)){ decimals = 18;} else{ decimals = ERC20Detailed(token).decimals();} if (decimals == StandardDecimals){ return amount;} else if (decimals < StandardDecimals){ return amount * (10 ** uint(StandardDecimals - decimals));} else{ return amount / (10 ** uint(decimals - StandardDecimals));}}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "StandardDecimals",
                                        "",
                                        "LockProxyPip4"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LockProxyPip4.ERC20Detailed"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "1bd0600be56ba1a2c48a915e6d87b302"
                            }
                        ],
                        "_fromStandardDecimals": [
                            {
                                "visibility": "internal",
                                "content": "function _fromStandardDecimals(address token, uint256 standardAmount) internal view returns (uint256){ uint8 decimals; if (token == address(0)){ decimals = 18;} else{ decimals = ERC20Detailed(token).decimals();} if (decimals == StandardDecimals){ return standardAmount;} else if (decimals < StandardDecimals){ return standardAmount / (10 ** uint(StandardDecimals - decimals));} else{ return standardAmount * (10 ** uint(decimals - StandardDecimals));}}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "standardAmount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "StandardDecimals",
                                        "",
                                        "LockProxyPip4"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LockProxyPip4.ERC20Detailed"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "7325466b0a2b5785a02a07806f2757b0"
                            }
                        ],
                        "_transferToContract": [
                            {
                                "visibility": "internal",
                                "content": "function _transferToContract(address fromAssetHash, uint256 amount) internal returns (bool){ if (fromAssetHash == address(0)){ require(msg.value != 0, \"transferred ether cannot be zero!\"); require(msg.value == amount, \"transferred ether is not equal to amount!\");} else{ require(msg.value == 0, \"there should be no ether transfer!\"); require(_transferERC20ToContract(fromAssetHash, _msgSender(), address(this), amount), \"transfer erc20 asset to lock_proxy contract failed!\");} return true;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "fromAssetHash"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LockProxyPip4._transferERC20ToContract",
                                        "LockProxyPip4._msgSender"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "80a12a50b8ee6564e4f484f0f1fc3ff4"
                            }
                        ],
                        "_transferFromContract": [
                            {
                                "visibility": "internal",
                                "content": "function _transferFromContract(address toAssetHash, address toAddress, uint256 amount) internal returns (bool){ if (toAssetHash == address(0x0000000000000000000000000000000000000000)){ address(uint160(toAddress)).transfer(amount);} else{ require(_transferERC20FromContract(toAssetHash, toAddress, amount), \"transfer erc20 asset to lock_proxy contract failed!\");} return true;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "toAssetHash"
                                    },
                                    {
                                        "type": "address",
                                        "name": "toAddress"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LockProxyPip4._transferERC20FromContract"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "4840a741501b2c90bb0f8a174c96db1e"
                            }
                        ],
                        "_transferERC20ToContract": [
                            {
                                "visibility": "internal",
                                "content": "function _transferERC20ToContract(address fromAssetHash, address fromAddress, address toAddress, uint256 amount) internal returns (bool){ IERC20 erc20Token = IERC20(fromAssetHash); erc20Token.safeTransferFrom(fromAddress, toAddress, amount); return true;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "fromAssetHash"
                                    },
                                    {
                                        "type": "address",
                                        "name": "fromAddress"
                                    },
                                    {
                                        "type": "address",
                                        "name": "toAddress"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "IERC20.safeTransferFrom",
                                        "LockProxyPip4.IERC20"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "14da0607935026b7ddceb43a117425bc"
                            }
                        ],
                        "_transferERC20FromContract": [
                            {
                                "visibility": "internal",
                                "content": "function _transferERC20FromContract(address toAssetHash, address toAddress, uint256 amount) internal returns (bool){ IERC20 erc20Token = IERC20(toAssetHash); erc20Token.safeTransfer(toAddress, amount); return true;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "toAssetHash"
                                    },
                                    {
                                        "type": "address",
                                        "name": "toAddress"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "IERC20.safeTransfer",
                                        "LockProxyPip4.IERC20"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "fdff33cd084799447621f6dad595d869"
                            }
                        ],
                        "_serializeTxArgs": [
                            {
                                "visibility": "internal",
                                "content": "function _serializeTxArgs(TxArgs memory args) internal pure returns (bytes memory){ bytes memory buff; buff = abi.encodePacked( ZeroCopySink.WriteVarBytes(args.toAssetHash), ZeroCopySink.WriteVarBytes(args.toAddress), ZeroCopySink.WriteUint255(args.amount) ); return buff;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "TxArgs memory",
                                        "name": "args"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ZeroCopySink.WriteUint255",
                                        "ZeroCopySink.WriteVarBytes"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "d2662f98a7493123d23d556632c9c2ea"
                            }
                        ],
                        "_deserializeTxArgs": [
                            {
                                "visibility": "internal",
                                "content": "function _deserializeTxArgs(bytes memory valueBs) internal pure returns (TxArgs memory){ TxArgs memory args; uint256 off = 0; (args.toAssetHash, off) = ZeroCopySource.NextVarBytes(valueBs, off); (args.toAddress, off) = ZeroCopySource.NextVarBytes(valueBs, off); (args.amount, off) = ZeroCopySource.NextUint255(valueBs, off); return args;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "valueBs"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "TxArgs memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ZeroCopySource.NextVarBytes",
                                        "ZeroCopySource.NextUint255"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "41eb01f685ca39081f24100e24b9da0f"
                            }
                        ]
                    },
                    "modifiers": {
                        "onlyManagerContract": {
                            "parameters": [],
                            "content": "modifier onlyManagerContract(){ IEthCrossChainManagerProxy ieccmp = IEthCrossChainManagerProxy(managerProxyContract); require(_msgSender() == ieccmp.getEthCrossChainManager(), \"msgSender is not EthCrossChainManagerContract\"); _;}",
                            "reads": [
                                [
                                    "managerProxyContract",
                                    "",
                                    "LockProxyPip4"
                                ]
                            ],
                            "writes": [],
                            "external_calls": {
                                "__set__": true,
                                "values": [
                                    "IEthCrossChainManagerProxy.getEthCrossChainManager",
                                    "LockProxyPip4._msgSender",
                                    "LockProxyPip4.IEthCrossChainManagerProxy"
                                ]
                            },
                            "md5": "85a7da07a788e5da47646cad3486c302"
                        }
                    },
                    "structs": {
                        "TxArgs": {
                            "content": "TxArgs{ bytes toAssetHash; bytes toAddress; uint256 amount;}"
                        }
                    },
                    "events": {
                        "SetManagerProxyEvent": {
                            "event": "SetManagerProxyEvent",
                            "content": "SetManagerProxyEvent(address manager)"
                        },
                        "BindProxyEvent": {
                            "event": "BindProxyEvent",
                            "content": "BindProxyEvent(uint64 toChainId, bytes targetProxyHash)"
                        },
                        "BindAssetEvent": {
                            "event": "BindAssetEvent",
                            "content": "BindAssetEvent(address fromAssetHash, uint64 toChainId, bytes targetProxyHash, uint initialAmount)"
                        },
                        "UnlockEvent": {
                            "event": "UnlockEvent",
                            "content": "UnlockEvent(address toAssetHash, address toAddress, uint256 amount)"
                        },
                        "LockEvent": {
                            "event": "LockEvent",
                            "content": "LockEvent(address fromAssetHash, address fromAddress, uint64 toChainId, bytes toAssetHash, bytes toAddress, uint256 amount)"
                        },
                        "depositEvent": {
                            "event": "depositEvent",
                            "content": "depositEvent(address toAddress, address fromAssetHash, address fromLPHash, uint256 amount)"
                        },
                        "withdrawEvent": {
                            "event": "withdrawEvent",
                            "content": "withdrawEvent(address toAddress, address fromAssetHash, address fromLPHash, uint256 amount)"
                        },
                        "BindLPToAssetEvent": {
                            "event": "BindLPToAssetEvent",
                            "content": "BindLPToAssetEvent(address originAssetAddress, address LPTokenAddress)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "uint": "SafeMath",
                        "IERC20": "SafeERC20"
                    }
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "IEthCrossChainManagerProxy.getEthCrossChainManager": "70da4860cc97c748b9d15d83289bc468",
                "LockProxyPip4.onlyOwner": "e51d4482bbb9c52d712461d06280a59d",
                "LockProxyPip4.whenNotPaused": "916b8aef83a979053b70140c3000aa2c",
                "LockProxyPip4._pause": "9cd2316c6a13117d8ec2db4cf0f802d6",
                "LockProxyPip4.whenPaused": "e0b4b9a4d589dd82240753f62436415f",
                "LockProxyPip4._unpause": "8b26a3ad642d45df7b9f15510d157efd",
                "LockProxyPip4.getBalanceFor": "79a8eb8fc16c7de92ba1f42449b7a386",
                "LockProxyPip4._serializeTxArgs": "d2662f98a7493123d23d556632c9c2ea",
                "LockProxyPip4._toStandardDecimals": "1bd0600be56ba1a2c48a915e6d87b302",
                "IEthCrossChainManager.crossChain": "742cdb294bb15257c8095ce2db9268f3",
                "LockProxyPip4._transferToContract": "80a12a50b8ee6564e4f484f0f1fc3ff4",
                "LockProxyPip4.onlyManagerContract": "85a7da07a788e5da47646cad3486c302",
                "LockProxyPip4._fromStandardDecimals": "7325466b0a2b5785a02a07806f2757b0",
                "LockProxyPip4._deserializeTxArgs": "41eb01f685ca39081f24100e24b9da0f",
                "Utils.bytesToAddress": "092fb95d69cb905a32df9a3a9caa7e1e",
                "Utils.equalStorage": "a98dbe77b37384c01eb9d7794adbd230",
                "LockProxyPip4._transferFromContract": "4840a741501b2c90bb0f8a174c96db1e",
                "LockProxyPip4._transferERC20ToContract": "14da0607935026b7ddceb43a117425bc",
                "LockProxyPip4._transferERC20FromContract": "fdff33cd084799447621f6dad595d869",
                "IERC20.safeTransferFrom": "a4d04dde19a092509673b57e918dc01e",
                "IERC20.safeTransfer": "b11a0fddf7dc22f06b2620e7e4df555d",
                "ZeroCopySink.WriteUint255": "3098e5f486fd389bc2412ac67cb37577",
                "ZeroCopySink.WriteVarBytes": "4158ce7a596d8e6f8d52a99c62d186ed",
                "ZeroCopySource.NextVarBytes": "44832bd86b31e65ad466977a2ba787c7",
                "ZeroCopySource.NextUint255": "ff2c23fbf3c7aea23dfbe47ba62c0624"
            },
            "md5": "a7d411b95ddeded5a15a7d7e14d1b59b"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\core\\lock_proxy\\LockProxySingleAsset.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\core\\lock_proxy\\LockProxySingleAsset.sol",
            "filename": "LockProxySingleAsset.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\ownership\\Ownable.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\common\\ZeroCopySource.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\common\\ZeroCopySink.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\utils\\Utils.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\token\\ERC20\\SafeERC20.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\token\\ERC20\\ERC20.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\token\\ERC20\\ERC20Detailed.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\core\\cross_chain_manager\\interface\\IEthCrossChainManager.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\core\\cross_chain_manager\\interface\\IEthCrossChainManagerProxy.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "bridgeAsset": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "Context",
                        "ERC20",
                        "ERC20Detailed"
                    ],
                    "state_variables": {
                        "bridge": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public bridge;"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (string memory name, string memory symbol, uint8 decimals, address bridge_) public ERC20Detailed(name, symbol, decimals){ bridge = bridge_;}",
                                "modifiers": [
                                    "ERC20Detailed(name, symbol, decimals)"
                                ],
                                "parameters": [
                                    {
                                        "type": "string memory",
                                        "name": "name"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "symbol"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "decimals"
                                    },
                                    {
                                        "type": "address",
                                        "name": "bridge_"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "bridge",
                                        "",
                                        "bridgeAsset"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "bridge",
                                        "",
                                        "bridgeAsset"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "487c2543ef9d5cff8050cf308f34edf4"
                            }
                        ],
                        "mint": [
                            {
                                "visibility": "public",
                                "content": "function mint(address to, uint256 amount) public onlyBridge{ _mint(to, amount);}",
                                "modifiers": [
                                    "onlyBridge"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "bridgeAsset._mint",
                                        "bridgeAsset.onlyBridge"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "913fe4792dd9a648a1dfd4dd59b04b1c"
                            }
                        ],
                        "burnFrom": [
                            {
                                "visibility": "public",
                                "content": "function burnFrom(address account, uint256 amount) public onlyBridge{ _burnFrom(account, amount);}",
                                "modifiers": [
                                    "onlyBridge"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "account"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "bridgeAsset._burnFrom",
                                        "bridgeAsset.onlyBridge"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "1707b67487fe6697814d00ba383e3cb5"
                            }
                        ]
                    },
                    "modifiers": {
                        "onlyBridge": {
                            "parameters": [],
                            "content": "modifier onlyBridge(){ require(_msgSender() == bridge, \"msgSender is not Bridge!\"); _;}",
                            "reads": [
                                [
                                    "bridge",
                                    "",
                                    "bridgeAsset"
                                ]
                            ],
                            "writes": [],
                            "external_calls": {
                                "__set__": true,
                                "values": [
                                    "bridgeAsset._msgSender"
                                ]
                            },
                            "md5": "66ebf2357e5345e31920ae494899baf7"
                        }
                    },
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "LockProxySingleAsset": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "Ownable"
                    ],
                    "state_variables": {
                        "token": {
                            "type": "bridgeAsset",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "bridgeAsset public token;"
                        },
                        "managerProxyContract": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public managerProxyContract;"
                        },
                        "proxyHashMap": {
                            "type": "mapping(uint64 => bytes)",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(uint64 => bytes) public proxyHashMap;"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (string memory name, string memory symbol, uint8 decimals) public{ token = new bridgeAsset(name, symbol, decimals, address(this));}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "string memory",
                                        "name": "name"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "symbol"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "decimals"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "token",
                                        "",
                                        "LockProxySingleAsset"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "token",
                                        "",
                                        "LockProxySingleAsset"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "02fada80b8c25cbd7ac2050dc222d07b"
                            }
                        ],
                        "setManagerProxy": [
                            {
                                "visibility": "public",
                                "content": "function setManagerProxy(address ethCCMProxyAddr) onlyOwner public{ managerProxyContract = ethCCMProxyAddr; emit SetManagerProxyEvent(managerProxyContract);}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "ethCCMProxyAddr"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "managerProxyContract",
                                        "",
                                        "LockProxySingleAsset"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "managerProxyContract",
                                        "",
                                        "LockProxySingleAsset"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LockProxySingleAsset.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "921aeb6960a136e093bf531e3e55f5af"
                            }
                        ],
                        "bindProxyHash": [
                            {
                                "visibility": "public",
                                "content": "function bindProxyHash(uint64 toChainId, bytes memory targetProxyHash) onlyOwner public returns (bool){ proxyHashMap[toChainId] = targetProxyHash; emit BindProxyEvent(toChainId, targetProxyHash); return true;}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint64",
                                        "name": "toChainId"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "targetProxyHash"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "proxyHashMap",
                                        "",
                                        "LockProxySingleAsset"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "proxyHashMap",
                                        "",
                                        "LockProxySingleAsset"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LockProxySingleAsset.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "b05bf867900c1dfda73d59791b73a7c4"
                            }
                        ],
                        "lock": [
                            {
                                "visibility": "public",
                                "content": "function lock(uint64 toChainId, bytes memory toAddress, uint256 amount) public payable returns (bool){ require(amount != 0, \"amount cannot be zero!\"); bridgeAsset(token).burnFrom(_msgSender(), amount); TxArgs memory txArgs = TxArgs({ toAddress: toAddress, amount: amount} ); bytes memory txData = _serializeTxArgs(txArgs); IEthCrossChainManagerProxy eccmp = IEthCrossChainManagerProxy(managerProxyContract); address eccmAddr = eccmp.getEthCrossChainManager(); IEthCrossChainManager eccm = IEthCrossChainManager(eccmAddr); bytes memory toProxyHash = proxyHashMap[toChainId]; require(toProxyHash.length != 0, \"empty illegal toProxyHash\"); require(eccm.crossChain(toChainId, toProxyHash, \"unlock\", txData), \"EthCrossChainManager crossChain executed error !\"); emit LockEvent(address(token), _msgSender(), toChainId, toProxyHash, toAddress, amount); return true;}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint64",
                                        "name": "toChainId"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "toAddress"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "token",
                                        "",
                                        "LockProxySingleAsset"
                                    ],
                                    [
                                        "managerProxyContract",
                                        "",
                                        "LockProxySingleAsset"
                                    ],
                                    [
                                        "proxyHashMap",
                                        "",
                                        "LockProxySingleAsset"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "IEthCrossChainManagerProxy.getEthCrossChainManager",
                                        "LockProxySingleAsset._serializeTxArgs",
                                        "IEthCrossChainManager.crossChain",
                                        "LockProxySingleAsset.IEthCrossChainManager",
                                        "LockProxySingleAsset.IEthCrossChainManagerProxy",
                                        "LockProxySingleAsset._msgSender"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "be64d0e136d42218732cca6317366856"
                            }
                        ],
                        "unlock": [
                            {
                                "visibility": "public",
                                "content": "function unlock(bytes memory argsBs, bytes memory fromContractAddr, uint64 fromChainId) onlyManagerContract public returns (bool){ TxArgs memory args = _deserializeTxArgs(argsBs); require(fromContractAddr.length != 0, \"from proxy contract address cannot be empty\"); require(Utils.equalStorage(proxyHashMap[fromChainId], fromContractAddr), \"From Proxy contract address error !\"); require(args.toAddress.length != 0, \"toAddress cannot be empty\"); address toAddress = Utils.bytesToAddress(args.toAddress); bridgeAsset(token).mint(toAddress, args.amount); emit UnlockEvent(address(token), toAddress, args.amount); return true;}",
                                "modifiers": [
                                    "onlyManagerContract"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "argsBs"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "fromContractAddr"
                                    },
                                    {
                                        "type": "uint64",
                                        "name": "fromChainId"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "token",
                                        "",
                                        "LockProxySingleAsset"
                                    ],
                                    [
                                        "proxyHashMap",
                                        "",
                                        "LockProxySingleAsset"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Utils.equalStorage",
                                        "Utils.bytesToAddress",
                                        "LockProxySingleAsset.onlyManagerContract",
                                        "LockProxySingleAsset._deserializeTxArgs"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "7d9d8e2af06370904f015f5f6bd0b9ef"
                            }
                        ],
                        "_serializeTxArgs": [
                            {
                                "visibility": "internal",
                                "content": "function _serializeTxArgs(TxArgs memory args) internal pure returns (bytes memory){ bytes memory buff; buff = abi.encodePacked( ZeroCopySink.WriteVarBytes(args.toAddress), ZeroCopySink.WriteUint255(args.amount) ); return buff;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "TxArgs memory",
                                        "name": "args"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ZeroCopySink.WriteUint255",
                                        "ZeroCopySink.WriteVarBytes"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "d76fbee7a3df63978f12e499bc4c4333"
                            }
                        ],
                        "_deserializeTxArgs": [
                            {
                                "visibility": "internal",
                                "content": "function _deserializeTxArgs(bytes memory valueBs) internal pure returns (TxArgs memory){ TxArgs memory args; uint256 off = 0; (args.toAddress, off) = ZeroCopySource.NextVarBytes(valueBs, off); (args.amount, off) = ZeroCopySource.NextUint255(valueBs, off); return args;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "valueBs"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "TxArgs memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ZeroCopySource.NextVarBytes",
                                        "ZeroCopySource.NextUint255"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "21b7605707408f8be4fefe76513a907b"
                            }
                        ]
                    },
                    "modifiers": {
                        "onlyManagerContract": {
                            "parameters": [],
                            "content": "modifier onlyManagerContract(){ IEthCrossChainManagerProxy ieccmp = IEthCrossChainManagerProxy(managerProxyContract); require(_msgSender() == ieccmp.getEthCrossChainManager(), \"msgSender is not EthCrossChainManagerContract\"); _;}",
                            "reads": [
                                [
                                    "managerProxyContract",
                                    "",
                                    "LockProxySingleAsset"
                                ]
                            ],
                            "writes": [],
                            "external_calls": {
                                "__set__": true,
                                "values": [
                                    "IEthCrossChainManagerProxy.getEthCrossChainManager",
                                    "LockProxySingleAsset.IEthCrossChainManagerProxy",
                                    "LockProxySingleAsset._msgSender"
                                ]
                            },
                            "md5": "85a7da07a788e5da47646cad3486c302"
                        }
                    },
                    "structs": {
                        "TxArgs": {
                            "content": "TxArgs{ bytes toAddress; uint256 amount;}"
                        }
                    },
                    "events": {
                        "SetManagerProxyEvent": {
                            "event": "SetManagerProxyEvent",
                            "content": "SetManagerProxyEvent(address manager)"
                        },
                        "BindProxyEvent": {
                            "event": "BindProxyEvent",
                            "content": "BindProxyEvent(uint64 toChainId, bytes targetProxyHash)"
                        },
                        "UnlockEvent": {
                            "event": "UnlockEvent",
                            "content": "UnlockEvent(address toAssetHash, address toAddress, uint256 amount)"
                        },
                        "LockEvent": {
                            "event": "LockEvent",
                            "content": "LockEvent(address fromAssetHash, address fromAddress, uint64 toChainId, bytes toAssetHash, bytes toAddress, uint256 amount)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "uint": "SafeMath",
                        "IERC20": "SafeERC20"
                    }
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "bridgeAsset._mint": "1849059c445ce826b07aabafc80e1d59",
                "bridgeAsset.onlyBridge": "66ebf2357e5345e31920ae494899baf7",
                "bridgeAsset._burnFrom": "29791211cc2110eec5b89df326e8bbc1",
                "IEthCrossChainManagerProxy.getEthCrossChainManager": "70da4860cc97c748b9d15d83289bc468",
                "LockProxySingleAsset.onlyOwner": "e51d4482bbb9c52d712461d06280a59d",
                "IEthCrossChainManager.crossChain": "742cdb294bb15257c8095ce2db9268f3",
                "LockProxySingleAsset._serializeTxArgs": "d76fbee7a3df63978f12e499bc4c4333",
                "LockProxySingleAsset.onlyManagerContract": "85a7da07a788e5da47646cad3486c302",
                "Utils.bytesToAddress": "092fb95d69cb905a32df9a3a9caa7e1e",
                "LockProxySingleAsset._deserializeTxArgs": "21b7605707408f8be4fefe76513a907b",
                "Utils.equalStorage": "a98dbe77b37384c01eb9d7794adbd230",
                "ZeroCopySink.WriteUint255": "3098e5f486fd389bc2412ac67cb37577",
                "ZeroCopySink.WriteVarBytes": "4158ce7a596d8e6f8d52a99c62d186ed",
                "ZeroCopySource.NextVarBytes": "44832bd86b31e65ad466977a2ba787c7",
                "ZeroCopySource.NextUint255": "ff2c23fbf3c7aea23dfbe47ba62c0624"
            },
            "md5": "034460130e9bf5e9ee7d98690f47bec0"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\core\\lock_proxy\\LockProxyWithLP.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\core\\lock_proxy\\LockProxyWithLP.sol",
            "filename": "LockProxyWithLP.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\ownership\\Ownable.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\common\\ZeroCopySource.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\common\\ZeroCopySink.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\utils\\Utils.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\token\\ERC20\\SafeERC20.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\lifecycle\\Pausable.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\core\\cross_chain_manager\\interface\\IEthCrossChainManager.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\core\\cross_chain_manager\\interface\\IEthCrossChainManagerProxy.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "LockProxyWithLP": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "Ownable",
                        "Pausable"
                    ],
                    "state_variables": {
                        "managerProxyContract": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public managerProxyContract;"
                        },
                        "proxyHashMap": {
                            "type": "mapping(uint64 => bytes)",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(uint64 => bytes) public proxyHashMap;"
                        },
                        "assetHashMap": {
                            "type": "mapping(address => mapping(uint64 => bytes))",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(address => mapping(uint64 => bytes)) public assetHashMap;"
                        },
                        "assetLPMap": {
                            "type": "mapping(address => address)",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(address => address) public assetLPMap;"
                        }
                    },
                    "functions": {
                        "pause": [
                            {
                                "visibility": "public",
                                "content": "function pause() onlyOwner whenNotPaused public returns (bool){ _pause(); return true;}",
                                "modifiers": [
                                    "onlyOwner",
                                    "whenNotPaused"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LockProxyWithLP._pause",
                                        "LockProxyWithLP.onlyOwner",
                                        "LockProxyWithLP.whenNotPaused"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "14cfd27bf3bd8c8a9fe42b6d680a12e6"
                            }
                        ],
                        "unpause": [
                            {
                                "visibility": "public",
                                "content": "function unpause() onlyOwner whenPaused public returns (bool){ _unpause(); return true;}",
                                "modifiers": [
                                    "onlyOwner",
                                    "whenPaused"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LockProxyWithLP._unpause",
                                        "LockProxyWithLP.whenPaused",
                                        "LockProxyWithLP.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "e09aaa778b7f834901d917da0697ee8e"
                            }
                        ],
                        "setManagerProxy": [
                            {
                                "visibility": "public",
                                "content": "function setManagerProxy(address ethCCMProxyAddr) onlyOwner public{ managerProxyContract = ethCCMProxyAddr; emit SetManagerProxyEvent(managerProxyContract);}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "ethCCMProxyAddr"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "managerProxyContract",
                                        "",
                                        "LockProxyWithLP"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "managerProxyContract",
                                        "",
                                        "LockProxyWithLP"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LockProxyWithLP.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "921aeb6960a136e093bf531e3e55f5af"
                            }
                        ],
                        "bindProxyHash": [
                            {
                                "visibility": "public",
                                "content": "function bindProxyHash(uint64 toChainId, bytes memory targetProxyHash) onlyOwner public returns (bool){ proxyHashMap[toChainId] = targetProxyHash; emit BindProxyEvent(toChainId, targetProxyHash); return true;}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint64",
                                        "name": "toChainId"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "targetProxyHash"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "proxyHashMap",
                                        "",
                                        "LockProxyWithLP"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "proxyHashMap",
                                        "",
                                        "LockProxyWithLP"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LockProxyWithLP.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "b05bf867900c1dfda73d59791b73a7c4"
                            }
                        ],
                        "bindAssetHash": [
                            {
                                "visibility": "public",
                                "content": "function bindAssetHash(address fromAssetHash, uint64 toChainId, bytes memory toAssetHash) onlyOwner public returns (bool){ assetHashMap[fromAssetHash][toChainId] = toAssetHash; emit BindAssetEvent(fromAssetHash, toChainId, toAssetHash, getBalanceFor(fromAssetHash)); return true;}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "fromAssetHash"
                                    },
                                    {
                                        "type": "uint64",
                                        "name": "toChainId"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "toAssetHash"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "assetHashMap",
                                        "",
                                        "LockProxyWithLP"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "assetHashMap",
                                        "",
                                        "LockProxyWithLP"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LockProxyWithLP.getBalanceFor",
                                        "LockProxyWithLP.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "8a9642078dbfcc67200e64b3594c2df7"
                            }
                        ],
                        "bindLPToAsset": [
                            {
                                "visibility": "public",
                                "content": "function bindLPToAsset(address originAssetAddress, address LPTokenAddress) onlyOwner public returns (bool){ assetLPMap[originAssetAddress] = LPTokenAddress; emit BindLPToAssetEvent(originAssetAddress, LPTokenAddress); return true;}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "originAssetAddress"
                                    },
                                    {
                                        "type": "address",
                                        "name": "LPTokenAddress"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "assetLPMap",
                                        "",
                                        "LockProxyWithLP"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "assetLPMap",
                                        "",
                                        "LockProxyWithLP"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LockProxyWithLP.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "127efe41f1d372ffb72a36f9a58a2a40"
                            }
                        ],
                        "bindLPAndAsset": [
                            {
                                "visibility": "public",
                                "content": "function bindLPAndAsset(address fromAssetHash, address fromLPHash, uint64 toChainId, bytes memory toAssetHash, bytes memory toLPHash) onlyOwner public returns (bool){ assetHashMap[fromAssetHash][toChainId] = toAssetHash; assetHashMap[fromLPHash][toChainId] = toLPHash; assetLPMap[fromAssetHash] = fromLPHash; emit BindAssetEvent(fromAssetHash, toChainId, toAssetHash, getBalanceFor(fromAssetHash)); emit BindAssetEvent(fromLPHash, toChainId, toLPHash, getBalanceFor(fromLPHash)); emit BindLPToAssetEvent(fromAssetHash, fromLPHash); return true;}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "fromAssetHash"
                                    },
                                    {
                                        "type": "address",
                                        "name": "fromLPHash"
                                    },
                                    {
                                        "type": "uint64",
                                        "name": "toChainId"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "toAssetHash"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "toLPHash"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "assetHashMap",
                                        "",
                                        "LockProxyWithLP"
                                    ],
                                    [
                                        "assetLPMap",
                                        "",
                                        "LockProxyWithLP"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "assetHashMap",
                                        "",
                                        "LockProxyWithLP"
                                    ],
                                    [
                                        "assetLPMap",
                                        "",
                                        "LockProxyWithLP"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LockProxyWithLP.getBalanceFor",
                                        "LockProxyWithLP.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "55da9f9b4dddb0e0206a5deb5bc9b7fb"
                            }
                        ],
                        "bindProxyHashBatch": [
                            {
                                "visibility": "public",
                                "content": "function bindProxyHashBatch(uint64[] memory toChainId, bytes[] memory targetProxyHash) onlyOwner public returns (bool){ require(toChainId.length == targetProxyHash.length, \"bindProxyHashBatch: args length diff\"); for (uint i = 0; i < toChainId.length; i++){ proxyHashMap[toChainId[i]] = targetProxyHash[i]; emit BindProxyEvent(toChainId[i], targetProxyHash[i]);} return true;}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint64[] memory",
                                        "name": "toChainId"
                                    },
                                    {
                                        "type": "bytes[] memory",
                                        "name": "targetProxyHash"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "proxyHashMap",
                                        "",
                                        "LockProxyWithLP"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "proxyHashMap",
                                        "",
                                        "LockProxyWithLP"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LockProxyWithLP.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "8d6269adbe7cac4e2b9ed5e0cbff2eec"
                            }
                        ],
                        "bindAssetHashBatch": [
                            {
                                "visibility": "public",
                                "content": "function bindAssetHashBatch(address[] memory fromAssetHash, uint64[] memory toChainId, bytes[] memory toAssetHash) onlyOwner public returns (bool){ require(toChainId.length == fromAssetHash.length, \"bindAssetHashBatch: args length diff\"); require(toChainId.length == toAssetHash.length, \"bindAssetHashBatch: args length diff\"); for (uint i = 0; i < toChainId.length; i++){ assetHashMap[fromAssetHash[i]][toChainId[i]] = toAssetHash[i]; emit BindAssetEvent(fromAssetHash[i], toChainId[i], toAssetHash[i], getBalanceFor(fromAssetHash[i]));} return true;}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "address[] memory",
                                        "name": "fromAssetHash"
                                    },
                                    {
                                        "type": "uint64[] memory",
                                        "name": "toChainId"
                                    },
                                    {
                                        "type": "bytes[] memory",
                                        "name": "toAssetHash"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "assetHashMap",
                                        "",
                                        "LockProxyWithLP"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "assetHashMap",
                                        "",
                                        "LockProxyWithLP"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LockProxyWithLP.getBalanceFor",
                                        "LockProxyWithLP.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "a7609ec1a877c8ff12b6eec0e006e87d"
                            }
                        ],
                        "bindLPToAssetBatch": [
                            {
                                "visibility": "public",
                                "content": "function bindLPToAssetBatch(address[] memory originAssetAddress, address[] memory LPTokenAddress) onlyOwner public returns (bool){ require(originAssetAddress.length == LPTokenAddress.length, \"bindLPToAssetBatch: args length diff\"); for (uint i = 0; i < originAssetAddress.length; i++){ assetLPMap[originAssetAddress[i]] = LPTokenAddress[i]; emit BindLPToAssetEvent(originAssetAddress[i], LPTokenAddress[i]);} return true;}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "address[] memory",
                                        "name": "originAssetAddress"
                                    },
                                    {
                                        "type": "address[] memory",
                                        "name": "LPTokenAddress"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "assetLPMap",
                                        "",
                                        "LockProxyWithLP"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "assetLPMap",
                                        "",
                                        "LockProxyWithLP"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LockProxyWithLP.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "ac3632a5b15f5eaf72c5ebca3d02e1ea"
                            }
                        ],
                        "bindLPAndAssetBatch": [
                            {
                                "visibility": "public",
                                "content": "function bindLPAndAssetBatch(address[] memory fromAssetHash, address[] memory fromLPHash, uint64[] memory toChainId, bytes[] memory toAssetHash, bytes[] memory toLPHash) onlyOwner public returns (bool){ require(fromAssetHash.length == fromLPHash.length, \"bindLPAndAssetBatch: args length diff\"); require(toAssetHash.length == toLPHash.length, \"bindLPAndAssetBatch: args length diff\"); for(uint256 i = 0; i < fromLPHash.length; i++){ assetHashMap[fromAssetHash[i]][toChainId[i]] = toAssetHash[i]; assetHashMap[fromLPHash[i]][toChainId[i]] = toLPHash[i]; assetLPMap[fromAssetHash[i]] = fromLPHash[i]; emit BindAssetEvent(fromAssetHash[i], toChainId[i], toAssetHash[i], getBalanceFor(fromAssetHash[i])); emit BindAssetEvent(fromLPHash[i], toChainId[i], toLPHash[i], getBalanceFor(fromLPHash[i])); emit BindLPToAssetEvent(fromAssetHash[i], fromLPHash[i]);} return true;}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "address[] memory",
                                        "name": "fromAssetHash"
                                    },
                                    {
                                        "type": "address[] memory",
                                        "name": "fromLPHash"
                                    },
                                    {
                                        "type": "uint64[] memory",
                                        "name": "toChainId"
                                    },
                                    {
                                        "type": "bytes[] memory",
                                        "name": "toAssetHash"
                                    },
                                    {
                                        "type": "bytes[] memory",
                                        "name": "toLPHash"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "assetHashMap",
                                        "",
                                        "LockProxyWithLP"
                                    ],
                                    [
                                        "assetLPMap",
                                        "",
                                        "LockProxyWithLP"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "assetHashMap",
                                        "",
                                        "LockProxyWithLP"
                                    ],
                                    [
                                        "assetLPMap",
                                        "",
                                        "LockProxyWithLP"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LockProxyWithLP.getBalanceFor",
                                        "LockProxyWithLP.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "7e15071a181a2c597bb88312ad2ee5d7"
                            }
                        ],
                        "lock": [
                            {
                                "visibility": "public",
                                "content": "function lock(address fromAssetHash, uint64 toChainId, bytes memory toAddress, uint256 amount) public payable returns (bool){ require(amount != 0, \"amount cannot be zero!\"); require(_transferToContract(fromAssetHash, amount), \"transfer asset from fromAddress to lock_proxy contract failed!\"); bytes memory toAssetHash = assetHashMap[fromAssetHash][toChainId]; require(toAssetHash.length != 0, \"empty illegal toAssetHash\"); TxArgs memory txArgs = TxArgs({ toAssetHash: toAssetHash, toAddress: toAddress, amount: amount} ); bytes memory txData = _serializeTxArgs(txArgs); IEthCrossChainManagerProxy eccmp = IEthCrossChainManagerProxy(managerProxyContract); address eccmAddr = eccmp.getEthCrossChainManager(); IEthCrossChainManager eccm = IEthCrossChainManager(eccmAddr); bytes memory toProxyHash = proxyHashMap[toChainId]; require(toProxyHash.length != 0, \"empty illegal toProxyHash\"); require(eccm.crossChain(toChainId, toProxyHash, \"unlock\", txData), \"EthCrossChainManager crossChain executed error !\"); emit LockEvent(fromAssetHash, _msgSender(), toChainId, toAssetHash, toAddress, amount); return true;}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "fromAssetHash"
                                    },
                                    {
                                        "type": "uint64",
                                        "name": "toChainId"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "toAddress"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "managerProxyContract",
                                        "",
                                        "LockProxyWithLP"
                                    ],
                                    [
                                        "proxyHashMap",
                                        "",
                                        "LockProxyWithLP"
                                    ],
                                    [
                                        "assetHashMap",
                                        "",
                                        "LockProxyWithLP"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LockProxyWithLP._transferToContract",
                                        "IEthCrossChainManagerProxy.getEthCrossChainManager",
                                        "IEthCrossChainManager.crossChain",
                                        "LockProxyWithLP._serializeTxArgs",
                                        "LockProxyWithLP.IEthCrossChainManagerProxy",
                                        "LockProxyWithLP.IEthCrossChainManager",
                                        "LockProxyWithLP._msgSender"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "65a2fb47b68546447e99cfb1661f7bac"
                            }
                        ],
                        "unlock": [
                            {
                                "visibility": "public",
                                "content": "function unlock(bytes memory argsBs, bytes memory fromContractAddr, uint64 fromChainId) onlyManagerContract public returns (bool){ TxArgs memory args = _deserializeTxArgs(argsBs); require(fromContractAddr.length != 0, \"from proxy contract address cannot be empty\"); require(Utils.equalStorage(proxyHashMap[fromChainId], fromContractAddr), \"From Proxy contract address error !\"); require(args.toAssetHash.length != 0, \"toAssetHash cannot be empty\"); address toAssetHash = Utils.bytesToAddress(args.toAssetHash); require(args.toAddress.length != 0, \"toAddress cannot be empty\"); address toAddress = Utils.bytesToAddress(args.toAddress); require(_transferFromContract(toAssetHash, toAddress, args.amount), \"transfer asset from lock_proxy contract to toAddress failed!\"); emit UnlockEvent(toAssetHash, toAddress, args.amount); return true;}",
                                "modifiers": [
                                    "onlyManagerContract"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "argsBs"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "fromContractAddr"
                                    },
                                    {
                                        "type": "uint64",
                                        "name": "fromChainId"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "proxyHashMap",
                                        "",
                                        "LockProxyWithLP"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Utils.equalStorage",
                                        "LockProxyWithLP._deserializeTxArgs",
                                        "LockProxyWithLP.onlyManagerContract",
                                        "Utils.bytesToAddress",
                                        "LockProxyWithLP._transferFromContract"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "24e8c725857907a7c030ababfeaa4a48"
                            }
                        ],
                        "deposit": [
                            {
                                "visibility": "public",
                                "content": "function deposit(address originAssetAddress, uint amount) whenNotPaused payable public returns (bool){ require(amount != 0, \"amount cannot be zero!\"); require(_transferToContract(originAssetAddress, amount), \"transfer asset from fromAddress to lock_proxy contract failed!\"); address LPTokenAddress = assetLPMap[originAssetAddress]; require(LPTokenAddress != address(0), \"do not support deposite this token\"); require(_transferFromContract(LPTokenAddress, msg.sender, amount), \"transfer proof of liquidity from lock_proxy contract to fromAddress failed!\"); emit depositEvent(msg.sender, originAssetAddress, LPTokenAddress, amount); return true;}",
                                "modifiers": [
                                    "whenNotPaused",
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "originAssetAddress"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "assetLPMap",
                                        "",
                                        "LockProxyWithLP"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LockProxyWithLP._transferToContract",
                                        "LockProxyWithLP._transferFromContract",
                                        "LockProxyWithLP.whenNotPaused"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "349f607448cd7b2915f3770c71255574"
                            }
                        ],
                        "withdraw": [
                            {
                                "visibility": "public",
                                "content": "function withdraw(address targetTokenAddress, uint amount) whenNotPaused public returns (bool){ require(amount != 0, \"amount cannot be zero!\"); address LPTokenAddress = assetLPMap[targetTokenAddress]; require(LPTokenAddress != address(0), \"do not support withdraw this token\"); require(_transferToContract(LPTokenAddress, amount), \"transfer proof of liquidity from fromAddress to lock_proxy contract failed!\"); require(_transferFromContract(targetTokenAddress, msg.sender, amount), \"transfer asset from lock_proxy contract to fromAddress failed!\"); emit withdrawEvent(msg.sender, targetTokenAddress, LPTokenAddress, amount); return true;}",
                                "modifiers": [
                                    "whenNotPaused"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "targetTokenAddress"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "assetLPMap",
                                        "",
                                        "LockProxyWithLP"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LockProxyWithLP._transferToContract",
                                        "LockProxyWithLP._transferFromContract",
                                        "LockProxyWithLP.whenNotPaused"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "4911dc4d28fa4a553a407fd92cd1f9e5"
                            }
                        ],
                        "getBalanceFor": [
                            {
                                "visibility": "public",
                                "content": "function getBalanceFor(address fromAssetHash) public view returns (uint256){ if (fromAssetHash == address(0)){ address selfAddr = address(this); return selfAddr.balance;} else{ IERC20 erc20Token = IERC20(fromAssetHash); return erc20Token.balanceOf(address(this));}}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "fromAssetHash"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "IERC20.balanceOf",
                                        "LockProxyWithLP.IERC20"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "79a8eb8fc16c7de92ba1f42449b7a386"
                            }
                        ],
                        "_transferToContract": [
                            {
                                "visibility": "internal",
                                "content": "function _transferToContract(address fromAssetHash, uint256 amount) internal returns (bool){ if (fromAssetHash == address(0)){ require(msg.value != 0, \"transferred ether cannot be zero!\"); require(msg.value == amount, \"transferred ether is not equal to amount!\");} else{ require(msg.value == 0, \"there should be no ether transfer!\"); require(_transferERC20ToContract(fromAssetHash, _msgSender(), address(this), amount), \"transfer erc20 asset to lock_proxy contract failed!\");} return true;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "fromAssetHash"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LockProxyWithLP._transferERC20ToContract",
                                        "LockProxyWithLP._msgSender"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "80a12a50b8ee6564e4f484f0f1fc3ff4"
                            }
                        ],
                        "_transferFromContract": [
                            {
                                "visibility": "internal",
                                "content": "function _transferFromContract(address toAssetHash, address toAddress, uint256 amount) internal returns (bool){ if (toAssetHash == address(0x0000000000000000000000000000000000000000)){ address(uint160(toAddress)).transfer(amount);} else{ require(_transferERC20FromContract(toAssetHash, toAddress, amount), \"transfer erc20 asset to lock_proxy contract failed!\");} return true;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "toAssetHash"
                                    },
                                    {
                                        "type": "address",
                                        "name": "toAddress"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LockProxyWithLP._transferERC20FromContract"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "4840a741501b2c90bb0f8a174c96db1e"
                            }
                        ],
                        "_transferERC20ToContract": [
                            {
                                "visibility": "internal",
                                "content": "function _transferERC20ToContract(address fromAssetHash, address fromAddress, address toAddress, uint256 amount) internal returns (bool){ IERC20 erc20Token = IERC20(fromAssetHash); erc20Token.safeTransferFrom(fromAddress, toAddress, amount); return true;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "fromAssetHash"
                                    },
                                    {
                                        "type": "address",
                                        "name": "fromAddress"
                                    },
                                    {
                                        "type": "address",
                                        "name": "toAddress"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "IERC20.safeTransferFrom",
                                        "LockProxyWithLP.IERC20"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "14da0607935026b7ddceb43a117425bc"
                            }
                        ],
                        "_transferERC20FromContract": [
                            {
                                "visibility": "internal",
                                "content": "function _transferERC20FromContract(address toAssetHash, address toAddress, uint256 amount) internal returns (bool){ IERC20 erc20Token = IERC20(toAssetHash); erc20Token.safeTransfer(toAddress, amount); return true;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "toAssetHash"
                                    },
                                    {
                                        "type": "address",
                                        "name": "toAddress"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "IERC20.safeTransfer",
                                        "LockProxyWithLP.IERC20"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "fdff33cd084799447621f6dad595d869"
                            }
                        ],
                        "_serializeTxArgs": [
                            {
                                "visibility": "internal",
                                "content": "function _serializeTxArgs(TxArgs memory args) internal pure returns (bytes memory){ bytes memory buff; buff = abi.encodePacked( ZeroCopySink.WriteVarBytes(args.toAssetHash), ZeroCopySink.WriteVarBytes(args.toAddress), ZeroCopySink.WriteUint255(args.amount) ); return buff;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "TxArgs memory",
                                        "name": "args"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ZeroCopySink.WriteUint255",
                                        "ZeroCopySink.WriteVarBytes"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "d2662f98a7493123d23d556632c9c2ea"
                            }
                        ],
                        "_deserializeTxArgs": [
                            {
                                "visibility": "internal",
                                "content": "function _deserializeTxArgs(bytes memory valueBs) internal pure returns (TxArgs memory){ TxArgs memory args; uint256 off = 0; (args.toAssetHash, off) = ZeroCopySource.NextVarBytes(valueBs, off); (args.toAddress, off) = ZeroCopySource.NextVarBytes(valueBs, off); (args.amount, off) = ZeroCopySource.NextUint255(valueBs, off); return args;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "valueBs"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "TxArgs memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ZeroCopySource.NextVarBytes",
                                        "ZeroCopySource.NextUint255"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "41eb01f685ca39081f24100e24b9da0f"
                            }
                        ]
                    },
                    "modifiers": {
                        "onlyManagerContract": {
                            "parameters": [],
                            "content": "modifier onlyManagerContract(){ IEthCrossChainManagerProxy ieccmp = IEthCrossChainManagerProxy(managerProxyContract); require(_msgSender() == ieccmp.getEthCrossChainManager(), \"msgSender is not EthCrossChainManagerContract\"); _;}",
                            "reads": [
                                [
                                    "managerProxyContract",
                                    "",
                                    "LockProxyWithLP"
                                ]
                            ],
                            "writes": [],
                            "external_calls": {
                                "__set__": true,
                                "values": [
                                    "IEthCrossChainManagerProxy.getEthCrossChainManager",
                                    "LockProxyWithLP.IEthCrossChainManagerProxy",
                                    "LockProxyWithLP._msgSender"
                                ]
                            },
                            "md5": "85a7da07a788e5da47646cad3486c302"
                        }
                    },
                    "structs": {
                        "TxArgs": {
                            "content": "TxArgs{ bytes toAssetHash; bytes toAddress; uint256 amount;}"
                        }
                    },
                    "events": {
                        "SetManagerProxyEvent": {
                            "event": "SetManagerProxyEvent",
                            "content": "SetManagerProxyEvent(address manager)"
                        },
                        "BindProxyEvent": {
                            "event": "BindProxyEvent",
                            "content": "BindProxyEvent(uint64 toChainId, bytes targetProxyHash)"
                        },
                        "BindAssetEvent": {
                            "event": "BindAssetEvent",
                            "content": "BindAssetEvent(address fromAssetHash, uint64 toChainId, bytes targetProxyHash, uint initialAmount)"
                        },
                        "UnlockEvent": {
                            "event": "UnlockEvent",
                            "content": "UnlockEvent(address toAssetHash, address toAddress, uint256 amount)"
                        },
                        "LockEvent": {
                            "event": "LockEvent",
                            "content": "LockEvent(address fromAssetHash, address fromAddress, uint64 toChainId, bytes toAssetHash, bytes toAddress, uint256 amount)"
                        },
                        "depositEvent": {
                            "event": "depositEvent",
                            "content": "depositEvent(address toAddress, address fromAssetHash, address fromLPHash, uint256 amount)"
                        },
                        "withdrawEvent": {
                            "event": "withdrawEvent",
                            "content": "withdrawEvent(address toAddress, address fromAssetHash, address fromLPHash, uint256 amount)"
                        },
                        "BindLPToAssetEvent": {
                            "event": "BindLPToAssetEvent",
                            "content": "BindLPToAssetEvent(address originAssetAddress, address LPTokenAddress)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "uint": "SafeMath",
                        "IERC20": "SafeERC20"
                    }
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "IEthCrossChainManagerProxy.getEthCrossChainManager": "70da4860cc97c748b9d15d83289bc468",
                "LockProxyWithLP.whenNotPaused": "916b8aef83a979053b70140c3000aa2c",
                "LockProxyWithLP.onlyOwner": "e51d4482bbb9c52d712461d06280a59d",
                "LockProxyWithLP._pause": "9cd2316c6a13117d8ec2db4cf0f802d6",
                "LockProxyWithLP._unpause": "8b26a3ad642d45df7b9f15510d157efd",
                "LockProxyWithLP.whenPaused": "e0b4b9a4d589dd82240753f62436415f",
                "LockProxyWithLP.getBalanceFor": "79a8eb8fc16c7de92ba1f42449b7a386",
                "LockProxyWithLP._transferToContract": "80a12a50b8ee6564e4f484f0f1fc3ff4",
                "IEthCrossChainManager.crossChain": "742cdb294bb15257c8095ce2db9268f3",
                "LockProxyWithLP._serializeTxArgs": "d2662f98a7493123d23d556632c9c2ea",
                "LockProxyWithLP._transferFromContract": "4840a741501b2c90bb0f8a174c96db1e",
                "LockProxyWithLP._deserializeTxArgs": "41eb01f685ca39081f24100e24b9da0f",
                "Utils.bytesToAddress": "092fb95d69cb905a32df9a3a9caa7e1e",
                "Utils.equalStorage": "a98dbe77b37384c01eb9d7794adbd230",
                "LockProxyWithLP.onlyManagerContract": "85a7da07a788e5da47646cad3486c302",
                "LockProxyWithLP._transferERC20ToContract": "14da0607935026b7ddceb43a117425bc",
                "LockProxyWithLP._transferERC20FromContract": "fdff33cd084799447621f6dad595d869",
                "IERC20.safeTransferFrom": "a4d04dde19a092509673b57e918dc01e",
                "IERC20.safeTransfer": "b11a0fddf7dc22f06b2620e7e4df555d",
                "ZeroCopySink.WriteUint255": "3098e5f486fd389bc2412ac67cb37577",
                "ZeroCopySink.WriteVarBytes": "4158ce7a596d8e6f8d52a99c62d186ed",
                "ZeroCopySource.NextVarBytes": "44832bd86b31e65ad466977a2ba787c7",
                "ZeroCopySource.NextUint255": "ff2c23fbf3c7aea23dfbe47ba62c0624"
            },
            "md5": "2a787e2f07085db607855b29c1df6483"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\core\\lock_proxy\\RippleLockProxy.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\core\\lock_proxy\\RippleLockProxy.sol",
            "filename": "RippleLockProxy.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\ownership\\Ownable.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\common\\ZeroCopySource.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\common\\ZeroCopySink.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\utils\\Utils.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\token\\ERC20\\SafeERC20.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\token\\ERC20\\ERC20.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\token\\ERC20\\ERC20Detailed.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\core\\cross_chain_manager\\interface\\IEthCrossChainManager.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\core\\cross_chain_manager\\interface\\IEthCrossChainManagerProxy.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "bridgeAsset": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "Context",
                        "ERC20",
                        "ERC20Detailed"
                    ],
                    "state_variables": {
                        "bridge": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public bridge;"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (string memory name, string memory symbol, uint8 decimals, address bridge_) public ERC20Detailed(name, symbol, decimals){ bridge = bridge_;}",
                                "modifiers": [
                                    "ERC20Detailed(name, symbol, decimals)"
                                ],
                                "parameters": [
                                    {
                                        "type": "string memory",
                                        "name": "name"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "symbol"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "decimals"
                                    },
                                    {
                                        "type": "address",
                                        "name": "bridge_"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "bridge",
                                        "",
                                        "bridgeAsset"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "bridge",
                                        "",
                                        "bridgeAsset"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "487c2543ef9d5cff8050cf308f34edf4"
                            }
                        ],
                        "mint": [
                            {
                                "visibility": "public",
                                "content": "function mint(address to, uint256 amount) public onlyBridge{ _mint(to, amount);}",
                                "modifiers": [
                                    "onlyBridge"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "bridgeAsset._mint",
                                        "bridgeAsset.onlyBridge"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "913fe4792dd9a648a1dfd4dd59b04b1c"
                            }
                        ],
                        "burnFrom": [
                            {
                                "visibility": "public",
                                "content": "function burnFrom(address account, uint256 amount) public onlyBridge{ _burnFrom(account, amount);}",
                                "modifiers": [
                                    "onlyBridge"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "account"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "bridgeAsset._burnFrom",
                                        "bridgeAsset.onlyBridge"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "1707b67487fe6697814d00ba383e3cb5"
                            }
                        ]
                    },
                    "modifiers": {
                        "onlyBridge": {
                            "parameters": [],
                            "content": "modifier onlyBridge(){ require(_msgSender() == bridge, \"msgSender is not Bridge!\"); _;}",
                            "reads": [
                                [
                                    "bridge",
                                    "",
                                    "bridgeAsset"
                                ]
                            ],
                            "writes": [],
                            "external_calls": {
                                "__set__": true,
                                "values": [
                                    "bridgeAsset._msgSender"
                                ]
                            },
                            "md5": "66ebf2357e5345e31920ae494899baf7"
                        }
                    },
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "RippleLockProxy": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "Ownable"
                    ],
                    "state_variables": {
                        "token": {
                            "type": "bridgeAsset",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "bridgeAsset public token;"
                        },
                        "managerProxyContract": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public managerProxyContract;"
                        },
                        "proxyHashMap": {
                            "type": "mapping(uint64 => bytes)",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(uint64 => bytes) public proxyHashMap;"
                        },
                        "rippleMinAmount": {
                            "type": "uint",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "30000000",
                            "content": "uint public rippleMinAmount = 30000000;"
                        },
                        "rippleChainId": {
                            "type": "uint64",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "39",
                            "content": "uint64 public rippleChainId = 39;"
                        },
                        "rippleAddressLength": {
                            "type": "uint",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "20",
                            "content": "uint public rippleAddressLength = 20;"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (string memory name, string memory symbol, uint8 decimals) public{ token = new bridgeAsset(name, symbol, decimals, address(this));}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "string memory",
                                        "name": "name"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "symbol"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "decimals"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "token",
                                        "",
                                        "RippleLockProxy"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "token",
                                        "",
                                        "RippleLockProxy"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "02fada80b8c25cbd7ac2050dc222d07b"
                            }
                        ],
                        "setManagerProxy": [
                            {
                                "visibility": "public",
                                "content": "function setManagerProxy(address ethCCMProxyAddr) onlyOwner public{ managerProxyContract = ethCCMProxyAddr; emit SetManagerProxyEvent(managerProxyContract);}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "ethCCMProxyAddr"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "managerProxyContract",
                                        "",
                                        "RippleLockProxy"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "managerProxyContract",
                                        "",
                                        "RippleLockProxy"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "RippleLockProxy.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "921aeb6960a136e093bf531e3e55f5af"
                            }
                        ],
                        "bindProxyHash": [
                            {
                                "visibility": "public",
                                "content": "function bindProxyHash(uint64 toChainId, bytes memory targetProxyHash) onlyOwner public returns (bool){ proxyHashMap[toChainId] = targetProxyHash; emit BindProxyEvent(toChainId, targetProxyHash); return true;}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint64",
                                        "name": "toChainId"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "targetProxyHash"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "proxyHashMap",
                                        "",
                                        "RippleLockProxy"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "proxyHashMap",
                                        "",
                                        "RippleLockProxy"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "RippleLockProxy.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "b05bf867900c1dfda73d59791b73a7c4"
                            }
                        ],
                        "rippleSetup": [
                            {
                                "visibility": "external",
                                "content": "function rippleSetup(uint64 _rippleChainId, uint _rippleMinAmount, uint _rippleAddressLength) external onlyOwner{ rippleChainId = _rippleChainId; rippleAddressLength = _rippleAddressLength; rippleMinAmount = _rippleMinAmount;}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint64",
                                        "name": "_rippleChainId"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "_rippleMinAmount"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "_rippleAddressLength"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "rippleMinAmount",
                                        "",
                                        "RippleLockProxy"
                                    ],
                                    [
                                        "rippleChainId",
                                        "",
                                        "RippleLockProxy"
                                    ],
                                    [
                                        "rippleAddressLength",
                                        "",
                                        "RippleLockProxy"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "rippleMinAmount",
                                        "",
                                        "RippleLockProxy"
                                    ],
                                    [
                                        "rippleChainId",
                                        "",
                                        "RippleLockProxy"
                                    ],
                                    [
                                        "rippleAddressLength",
                                        "",
                                        "RippleLockProxy"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "RippleLockProxy.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "10be64df4c9f14dc1349ec6642232a11"
                            },
                            {
                                "visibility": "external",
                                "content": "function rippleSetup(uint64 _rippleChainId) external onlyOwner{ rippleChainId = _rippleChainId;}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint64",
                                        "name": "_rippleChainId"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "rippleChainId",
                                        "",
                                        "RippleLockProxy"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "rippleChainId",
                                        "",
                                        "RippleLockProxy"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "RippleLockProxy.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "54381b6e35c9e9ac1a93e9ba074a1ca7"
                            }
                        ],
                        "lock": [
                            {
                                "visibility": "public",
                                "content": "function lock(uint64 toChainId, bytes memory toAddress, uint256 amount) public payable returns (bool){ _rippleCheck(toChainId, toAddress, amount); require(amount != 0, \"amount cannot be zero!\"); bridgeAsset(token).burnFrom(_msgSender(), amount); TxArgs memory txArgs = TxArgs({ toAddress: toAddress, amount: amount} ); bytes memory txData = _serializeTxArgs(txArgs); IEthCrossChainManagerProxy eccmp = IEthCrossChainManagerProxy(managerProxyContract); address eccmAddr = eccmp.getEthCrossChainManager(); IEthCrossChainManager eccm = IEthCrossChainManager(eccmAddr); bytes memory toProxyHash = proxyHashMap[toChainId]; require(toProxyHash.length != 0, \"empty illegal toProxyHash\"); require(eccm.crossChain(toChainId, toProxyHash, \"unlock\", txData), \"EthCrossChainManager crossChain executed error !\"); emit LockEvent(address(token), _msgSender(), toChainId, toProxyHash, toAddress, amount); return true;}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint64",
                                        "name": "toChainId"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "toAddress"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "token",
                                        "",
                                        "RippleLockProxy"
                                    ],
                                    [
                                        "managerProxyContract",
                                        "",
                                        "RippleLockProxy"
                                    ],
                                    [
                                        "proxyHashMap",
                                        "",
                                        "RippleLockProxy"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "IEthCrossChainManagerProxy.getEthCrossChainManager",
                                        "RippleLockProxy.IEthCrossChainManagerProxy",
                                        "IEthCrossChainManager.crossChain",
                                        "RippleLockProxy._msgSender",
                                        "RippleLockProxy._serializeTxArgs",
                                        "RippleLockProxy._rippleCheck",
                                        "RippleLockProxy.IEthCrossChainManager"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "4b05ad18016dcef41ca17ac0149fc062"
                            }
                        ],
                        "unlock": [
                            {
                                "visibility": "public",
                                "content": "function unlock(bytes memory argsBs, bytes memory fromContractAddr, uint64 fromChainId) onlyManagerContract public returns (bool){ TxArgs memory args = _deserializeTxArgs(argsBs); require(fromContractAddr.length != 0, \"from proxy contract address cannot be empty\"); require(Utils.equalStorage(proxyHashMap[fromChainId], fromContractAddr), \"From Proxy contract address error !\"); require(args.toAddress.length != 0, \"toAddress cannot be empty\"); address toAddress = Utils.bytesToAddress(args.toAddress); bridgeAsset(token).mint(toAddress, args.amount); emit UnlockEvent(address(token), toAddress, args.amount); return true;}",
                                "modifiers": [
                                    "onlyManagerContract"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "argsBs"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "fromContractAddr"
                                    },
                                    {
                                        "type": "uint64",
                                        "name": "fromChainId"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "token",
                                        "",
                                        "RippleLockProxy"
                                    ],
                                    [
                                        "proxyHashMap",
                                        "",
                                        "RippleLockProxy"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Utils.equalStorage",
                                        "RippleLockProxy._deserializeTxArgs",
                                        "Utils.bytesToAddress",
                                        "RippleLockProxy.onlyManagerContract"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "7d9d8e2af06370904f015f5f6bd0b9ef"
                            }
                        ],
                        "_rippleCheck": [
                            {
                                "visibility": "internal",
                                "content": "function _rippleCheck(uint64 toChainId, bytes memory toAddress, uint amount) internal view{ if (toChainId == rippleChainId){ require(toAddress.length == rippleAddressLength, \"invalid ripple address\"); require(amount >= rippleMinAmount, \"amount less than the minimum\");}}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint64",
                                        "name": "toChainId"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "toAddress"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "rippleMinAmount",
                                        "",
                                        "RippleLockProxy"
                                    ],
                                    [
                                        "rippleChainId",
                                        "",
                                        "RippleLockProxy"
                                    ],
                                    [
                                        "rippleAddressLength",
                                        "",
                                        "RippleLockProxy"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "49fe48fc75312547b80dba5ae106f03f"
                            }
                        ],
                        "_serializeTxArgs": [
                            {
                                "visibility": "internal",
                                "content": "function _serializeTxArgs(TxArgs memory args) internal pure returns (bytes memory){ bytes memory buff; buff = abi.encodePacked( ZeroCopySink.WriteVarBytes(args.toAddress), ZeroCopySink.WriteUint255(args.amount) ); return buff;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "TxArgs memory",
                                        "name": "args"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ZeroCopySink.WriteUint255",
                                        "ZeroCopySink.WriteVarBytes"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "d76fbee7a3df63978f12e499bc4c4333"
                            }
                        ],
                        "_deserializeTxArgs": [
                            {
                                "visibility": "internal",
                                "content": "function _deserializeTxArgs(bytes memory valueBs) internal pure returns (TxArgs memory){ TxArgs memory args; uint256 off = 0; (args.toAddress, off) = ZeroCopySource.NextVarBytes(valueBs, off); (args.amount, off) = ZeroCopySource.NextUint255(valueBs, off); return args;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "valueBs"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "TxArgs memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ZeroCopySource.NextVarBytes",
                                        "ZeroCopySource.NextUint255"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "21b7605707408f8be4fefe76513a907b"
                            }
                        ]
                    },
                    "modifiers": {
                        "onlyManagerContract": {
                            "parameters": [],
                            "content": "modifier onlyManagerContract(){ IEthCrossChainManagerProxy ieccmp = IEthCrossChainManagerProxy(managerProxyContract); require(_msgSender() == ieccmp.getEthCrossChainManager(), \"msgSender is not EthCrossChainManagerContract\"); _;}",
                            "reads": [
                                [
                                    "managerProxyContract",
                                    "",
                                    "RippleLockProxy"
                                ]
                            ],
                            "writes": [],
                            "external_calls": {
                                "__set__": true,
                                "values": [
                                    "IEthCrossChainManagerProxy.getEthCrossChainManager",
                                    "RippleLockProxy.IEthCrossChainManagerProxy",
                                    "RippleLockProxy._msgSender"
                                ]
                            },
                            "md5": "85a7da07a788e5da47646cad3486c302"
                        }
                    },
                    "structs": {
                        "TxArgs": {
                            "content": "TxArgs{ bytes toAddress; uint256 amount;}"
                        }
                    },
                    "events": {
                        "SetManagerProxyEvent": {
                            "event": "SetManagerProxyEvent",
                            "content": "SetManagerProxyEvent(address manager)"
                        },
                        "BindProxyEvent": {
                            "event": "BindProxyEvent",
                            "content": "BindProxyEvent(uint64 toChainId, bytes targetProxyHash)"
                        },
                        "UnlockEvent": {
                            "event": "UnlockEvent",
                            "content": "UnlockEvent(address toAssetHash, address toAddress, uint256 amount)"
                        },
                        "LockEvent": {
                            "event": "LockEvent",
                            "content": "LockEvent(address fromAssetHash, address fromAddress, uint64 toChainId, bytes toAssetHash, bytes toAddress, uint256 amount)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "uint": "SafeMath",
                        "IERC20": "SafeERC20"
                    }
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "bridgeAsset._mint": "1849059c445ce826b07aabafc80e1d59",
                "bridgeAsset.onlyBridge": "66ebf2357e5345e31920ae494899baf7",
                "bridgeAsset._burnFrom": "29791211cc2110eec5b89df326e8bbc1",
                "IEthCrossChainManagerProxy.getEthCrossChainManager": "70da4860cc97c748b9d15d83289bc468",
                "RippleLockProxy.onlyOwner": "e51d4482bbb9c52d712461d06280a59d",
                "RippleLockProxy._serializeTxArgs": "d76fbee7a3df63978f12e499bc4c4333",
                "IEthCrossChainManager.crossChain": "742cdb294bb15257c8095ce2db9268f3",
                "RippleLockProxy._rippleCheck": "49fe48fc75312547b80dba5ae106f03f",
                "RippleLockProxy.onlyManagerContract": "85a7da07a788e5da47646cad3486c302",
                "Utils.bytesToAddress": "092fb95d69cb905a32df9a3a9caa7e1e",
                "Utils.equalStorage": "a98dbe77b37384c01eb9d7794adbd230",
                "RippleLockProxy._deserializeTxArgs": "21b7605707408f8be4fefe76513a907b",
                "ZeroCopySink.WriteUint255": "3098e5f486fd389bc2412ac67cb37577",
                "ZeroCopySink.WriteVarBytes": "4158ce7a596d8e6f8d52a99c62d186ed",
                "ZeroCopySource.NextVarBytes": "44832bd86b31e65ad466977a2ba787c7",
                "ZeroCopySource.NextUint255": "ff2c23fbf3c7aea23dfbe47ba62c0624"
            },
            "md5": "163a8bcc4a34748517022e830df71309"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\utils\\ReentrancyGuard.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\utils\\ReentrancyGuard.sol",
            "filename": "ReentrancyGuard.sol",
            "imported_contracts": {},
            "contracts": {
                "ReentrancyGuard": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {
                        "_notEntered": {
                            "type": "bool",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "bool private _notEntered;"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "internal",
                                "content": "constructor () internal{ _notEntered = true;}",
                                "modifiers": [],
                                "parameters": [],
                                "returns": [],
                                "reads": [
                                    [
                                        "_notEntered",
                                        "",
                                        "ReentrancyGuard"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_notEntered",
                                        "",
                                        "ReentrancyGuard"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "caa565401a8335d9e1af9ed1c976cb8b"
                            }
                        ]
                    },
                    "modifiers": {
                        "nonReentrant": {
                            "parameters": [],
                            "content": "modifier nonReentrant(){ require(_notEntered, \"ReentrancyGuard: reentrant call\"); _notEntered = false; _; _notEntered = true;}",
                            "reads": [
                                [
                                    "_notEntered",
                                    "",
                                    "ReentrancyGuard"
                                ]
                            ],
                            "writes": [
                                [
                                    "_notEntered",
                                    "",
                                    "ReentrancyGuard"
                                ]
                            ],
                            "external_calls": [],
                            "md5": "cc2bc7a15485c438a15c09f84d12d03d"
                        }
                    },
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "1714c23d5401f157989495580e28f04a"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\core\\wrapper\\interfaces\\ILockProxy.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\core\\wrapper\\interfaces\\ILockProxy.sol",
            "filename": "ILockProxy.sol",
            "imported_contracts": {},
            "contracts": {
                "ILockProxy": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "managerProxyContract": [
                            {
                                "visibility": "external",
                                "content": "function managerProxyContract() external view returns (address);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "2fa74fb5ca92acffd0b6bd319ddb13b2"
                            }
                        ],
                        "proxyHashMap": [
                            {
                                "visibility": "external",
                                "content": "function proxyHashMap(uint64) external view returns (bytes memory);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint64",
                                        "name": null
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "569cf72fc8036b07be588399a9c5c900"
                            }
                        ],
                        "assetHashMap": [
                            {
                                "visibility": "external",
                                "content": "function assetHashMap(address, uint64) external view returns (bytes memory);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": null
                                    },
                                    {
                                        "type": "uint64",
                                        "name": null
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "a5db4a1181f41b2ccbd461d531390722"
                            }
                        ],
                        "getBalanceFor": [
                            {
                                "visibility": "external",
                                "content": "function getBalanceFor(address) external view returns (uint256);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "acafbd81bfe8f7e31d4d95a7ccc8e8ba"
                            }
                        ],
                        "setManagerProxy": [
                            {
                                "visibility": "external",
                                "content": "function setManagerProxy( address eccmpAddr ) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "eccmpAddr"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "8ce4549d913dd4b7f6c1f0252d479c92"
                            }
                        ],
                        "bindProxyHash": [
                            {
                                "visibility": "external",
                                "content": "function bindProxyHash( uint64 toChainId, bytes calldata targetProxyHash ) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint64",
                                        "name": "toChainId"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "targetProxyHash"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "5d6f334e609b42b3e274af1df16ee6f2"
                            }
                        ],
                        "bindAssetHash": [
                            {
                                "visibility": "external",
                                "content": "function bindAssetHash( address fromAssetHash, uint64 toChainId, bytes calldata toAssetHash ) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "fromAssetHash"
                                    },
                                    {
                                        "type": "uint64",
                                        "name": "toChainId"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "toAssetHash"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "7e38032e7fd6fb1d17be1855b557459b"
                            }
                        ],
                        "lock": [
                            {
                                "visibility": "external",
                                "content": "function lock( address fromAssetHash, uint64 toChainId, bytes calldata toAddress, uint256 amount ) external payable returns (bool);",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "fromAssetHash"
                                    },
                                    {
                                        "type": "uint64",
                                        "name": "toChainId"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "toAddress"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": true,
                                "md5": "4466218b0fdefe668c81412b489a13a4"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "3efddade90ff594e7f6067be83004bf7"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\core\\wrapper\\PolyWrapper_v1.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\core\\wrapper\\PolyWrapper_v1.sol",
            "filename": "PolyWrapper_v1.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\token\\ERC20\\SafeERC20.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\token\\ERC20\\IERC20.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\ownership\\Ownable.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\utils\\ReentrancyGuard.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\math\\SafeMath.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\lifecycle\\Pausable.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\core\\wrapper\\interfaces\\ILockProxy.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "PolyWrapperV1": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "Ownable",
                        "Pausable",
                        "ReentrancyGuard"
                    ],
                    "state_variables": {
                        "chainId": {
                            "type": "uint",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint public chainId;"
                        },
                        "feeCollector": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public feeCollector;"
                        },
                        "lockProxy": {
                            "type": "ILockProxy",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "ILockProxy public lockProxy;"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (address _owner, uint _chainId) public{ require(_chainId != 0, \"!legal\"); transferOwnership(_owner); chainId = _chainId;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_owner"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "_chainId"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "chainId",
                                        "",
                                        "PolyWrapperV1"
                                    ],
                                    [
                                        "_owner",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\ownership\\Ownable.sol",
                                        "Ownable"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "chainId",
                                        "",
                                        "PolyWrapperV1"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "91980bb8530297963c941f2fdd5f552a"
                            }
                        ],
                        "setFeeCollector": [
                            {
                                "visibility": "external",
                                "content": "function setFeeCollector(address collector) external onlyOwner{ require(collector != address(0), \"emtpy address\"); feeCollector = collector;}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "collector"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "feeCollector",
                                        "",
                                        "PolyWrapperV1"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "feeCollector",
                                        "",
                                        "PolyWrapperV1"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "PolyWrapperV1.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "4bb959754a0193d99d2cf04c8adf58ba"
                            }
                        ],
                        "setLockProxy": [
                            {
                                "visibility": "external",
                                "content": "function setLockProxy(address _lockProxy) external onlyOwner{ require(_lockProxy != address(0)); lockProxy = ILockProxy(_lockProxy); require(lockProxy.managerProxyContract() != address(0), \"not lockproxy\");}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_lockProxy"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "lockProxy",
                                        "",
                                        "PolyWrapperV1"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "lockProxy",
                                        "",
                                        "PolyWrapperV1"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "PolyWrapperV1.onlyOwner",
                                        "ILockProxy.managerProxyContract",
                                        "PolyWrapperV1.ILockProxy"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "d1697dfe7761233d0b99babb367f1a5c"
                            }
                        ],
                        "pause": [
                            {
                                "visibility": "external",
                                "content": "function pause() external onlyOwner{ _pause();}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "PolyWrapperV1.onlyOwner",
                                        "PolyWrapperV1._pause"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "0201e5b6543089fd4cf20dce66058466"
                            }
                        ],
                        "unpause": [
                            {
                                "visibility": "external",
                                "content": "function unpause() external onlyOwner{ _unpause();}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "PolyWrapperV1._unpause",
                                        "PolyWrapperV1.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "65cdb09d6fbe9eb02d67f756b942a87b"
                            }
                        ],
                        "extractFee": [
                            {
                                "visibility": "external",
                                "content": "function extractFee(address token) external{ require(msg.sender == feeCollector, \"!feeCollector\"); if (token == address(0)){ msg.sender.transfer(address(this).balance);} else{ IERC20(token).safeTransfer(feeCollector, IERC20(token).balanceOf(address(this)));}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "feeCollector",
                                        "",
                                        "PolyWrapperV1"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "PolyWrapperV1.IERC20"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "e23479a85272c7bba9f1c16b2a4c7d5a"
                            }
                        ],
                        "lock": [
                            {
                                "visibility": "public",
                                "content": "function lock(address fromAsset, uint64 toChainId, bytes memory toAddress, uint amount, uint fee, uint id) public payable nonReentrant whenNotPaused{ require(toChainId != chainId && toChainId != 0, \"!toChainId\"); require(amount > fee, \"amount less than fee\"); require(toAddress.length !=0, \"empty toAddress\"); address addr; assembly{ addr := mload(add(toAddress, 0x14))} require(addr != address(0), \"zero toAddress\"); _pull(fromAsset, amount); _push(fromAsset, toChainId, toAddress, amount.sub(fee)); emit PolyWrapperLock(fromAsset, msg.sender, toChainId, toAddress, amount.sub(fee), fee, id);}",
                                "modifiers": [
                                    "payable",
                                    "nonReentrant",
                                    "whenNotPaused"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "fromAsset"
                                    },
                                    {
                                        "type": "uint64",
                                        "name": "toChainId"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "toAddress"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "fee"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "id"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "chainId",
                                        "",
                                        "PolyWrapperV1"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "PolyWrapperV1._push",
                                        "PolyWrapperV1.whenNotPaused",
                                        "PolyWrapperV1.nonReentrant",
                                        "amount.sub",
                                        "PolyWrapperV1._pull"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "29bca5661f29965d7e2bcea6e6f4eff9"
                            }
                        ],
                        "speedUp": [
                            {
                                "visibility": "public",
                                "content": "function speedUp(address fromAsset, bytes memory txHash, uint fee) public payable nonReentrant whenNotPaused{ _pull(fromAsset, fee); emit PolyWrapperSpeedUp(fromAsset, txHash, msg.sender, fee);}",
                                "modifiers": [
                                    "payable",
                                    "nonReentrant",
                                    "whenNotPaused"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "fromAsset"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "txHash"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "fee"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "PolyWrapperV1.nonReentrant",
                                        "PolyWrapperV1.whenNotPaused",
                                        "PolyWrapperV1._pull"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "2871b3fd2f875dbfbfe25f515ea7f9fd"
                            }
                        ],
                        "_pull": [
                            {
                                "visibility": "internal",
                                "content": "function _pull(address fromAsset, uint amount) internal{ if (fromAsset == address(0)){ require(msg.value == amount, \"insufficient ether\");} else{ IERC20(fromAsset).safeTransferFrom(msg.sender, address(this), amount);}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "fromAsset"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "PolyWrapperV1.IERC20"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "253340f677b1714dc578d845dc515e79"
                            }
                        ],
                        "_push": [
                            {
                                "visibility": "internal",
                                "content": "function _push(address fromAsset, uint64 toChainId, bytes memory toAddress, uint amount) internal{ if (fromAsset == address(0)){ require(lockProxy.lock.value(amount)(fromAsset, toChainId, toAddress, amount), \"lock ether fail\");} else{ IERC20(fromAsset).safeApprove(address(lockProxy), 0); IERC20(fromAsset).safeApprove(address(lockProxy), amount); require(lockProxy.lock(fromAsset, toChainId, toAddress, amount), \"lock erc20 fail\");}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "fromAsset"
                                    },
                                    {
                                        "type": "uint64",
                                        "name": "toChainId"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "toAddress"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "lockProxy",
                                        "",
                                        "PolyWrapperV1"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ILockProxy.lock",
                                        "PolyWrapperV1.IERC20"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "a64ac9420345c997e9c5500ed3acc2ea"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {
                        "PolyWrapperLock": {
                            "event": "PolyWrapperLock",
                            "content": "PolyWrapperLock(address indexed fromAsset, address indexed sender, uint64 toChainId, bytes toAddress, uint net, uint fee, uint id)"
                        },
                        "PolyWrapperSpeedUp": {
                            "event": "PolyWrapperSpeedUp",
                            "content": "PolyWrapperSpeedUp(address indexed fromAsset, bytes indexed txHash, address indexed sender, uint efee)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "uint": "SafeMath",
                        "IERC20": "SafeERC20"
                    }
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "PolyWrapperV1.onlyOwner": "e51d4482bbb9c52d712461d06280a59d",
                "ILockProxy.managerProxyContract": "2fa74fb5ca92acffd0b6bd319ddb13b2",
                "PolyWrapperV1._pause": "9cd2316c6a13117d8ec2db4cf0f802d6",
                "PolyWrapperV1._unpause": "8b26a3ad642d45df7b9f15510d157efd",
                "PolyWrapperV1.nonReentrant": "cc2bc7a15485c438a15c09f84d12d03d",
                "PolyWrapperV1._push": "a64ac9420345c997e9c5500ed3acc2ea",
                "PolyWrapperV1._pull": "253340f677b1714dc578d845dc515e79",
                "amount.sub": "972c2868144778b0617e55a6f97163a0",
                "PolyWrapperV1.whenNotPaused": "916b8aef83a979053b70140c3000aa2c",
                "ILockProxy.lock": "4466218b0fdefe668c81412b489a13a4"
            },
            "md5": "e87f93bfa914942410a022389a743136"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\core\\wrapper\\PolyWrapper_v2.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\core\\wrapper\\PolyWrapper_v2.sol",
            "filename": "PolyWrapper_v2.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\token\\ERC20\\SafeERC20.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\token\\ERC20\\IERC20.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\ownership\\Ownable.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\utils\\ReentrancyGuard.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\math\\SafeMath.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\lifecycle\\Pausable.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\core\\wrapper\\interfaces\\ILockProxy.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "PolyWrapperV2": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "Ownable",
                        "Pausable",
                        "ReentrancyGuard"
                    ],
                    "state_variables": {
                        "chainId": {
                            "type": "uint",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint public chainId;"
                        },
                        "feeCollector": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public feeCollector;"
                        },
                        "lockProxy": {
                            "type": "ILockProxy",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "ILockProxy public lockProxy;"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (address _owner, uint _chainId) public{ require(_chainId != 0, \"!legal\"); transferOwnership(_owner); chainId = _chainId;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_owner"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "_chainId"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "chainId",
                                        "",
                                        "PolyWrapperV2"
                                    ],
                                    [
                                        "_owner",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\ownership\\Ownable.sol",
                                        "Ownable"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "chainId",
                                        "",
                                        "PolyWrapperV2"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "91980bb8530297963c941f2fdd5f552a"
                            }
                        ],
                        "setFeeCollector": [
                            {
                                "visibility": "external",
                                "content": "function setFeeCollector(address collector) external onlyOwner{ require(collector != address(0), \"emtpy address\"); feeCollector = collector;}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "collector"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "feeCollector",
                                        "",
                                        "PolyWrapperV2"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "feeCollector",
                                        "",
                                        "PolyWrapperV2"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "PolyWrapperV2.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "4bb959754a0193d99d2cf04c8adf58ba"
                            }
                        ],
                        "setLockProxy": [
                            {
                                "visibility": "external",
                                "content": "function setLockProxy(address _lockProxy) external onlyOwner{ require(_lockProxy != address(0)); lockProxy = ILockProxy(_lockProxy); require(lockProxy.managerProxyContract() != address(0), \"not lockproxy\");}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_lockProxy"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "lockProxy",
                                        "",
                                        "PolyWrapperV2"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "lockProxy",
                                        "",
                                        "PolyWrapperV2"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ILockProxy.managerProxyContract",
                                        "PolyWrapperV2.ILockProxy",
                                        "PolyWrapperV2.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "d1697dfe7761233d0b99babb367f1a5c"
                            }
                        ],
                        "pause": [
                            {
                                "visibility": "external",
                                "content": "function pause() external onlyOwner{ _pause();}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "PolyWrapperV2._pause",
                                        "PolyWrapperV2.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "0201e5b6543089fd4cf20dce66058466"
                            }
                        ],
                        "unpause": [
                            {
                                "visibility": "external",
                                "content": "function unpause() external onlyOwner{ _unpause();}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "PolyWrapperV2._unpause",
                                        "PolyWrapperV2.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "65cdb09d6fbe9eb02d67f756b942a87b"
                            }
                        ],
                        "extractFee": [
                            {
                                "visibility": "external",
                                "content": "function extractFee(address token) external{ require(msg.sender == feeCollector, \"!feeCollector\"); if (token == address(0)){ msg.sender.transfer(address(this).balance);} else{ IERC20(token).safeTransfer(feeCollector, IERC20(token).balanceOf(address(this)));}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "feeCollector",
                                        "",
                                        "PolyWrapperV2"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "PolyWrapperV2.IERC20"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "e23479a85272c7bba9f1c16b2a4c7d5a"
                            }
                        ],
                        "lock": [
                            {
                                "visibility": "public",
                                "content": "function lock(address fromAsset, uint64 toChainId, bytes memory toAddress, uint amount, uint fee, uint id) public payable nonReentrant whenNotPaused{ require(toChainId != chainId && toChainId != 0, \"!toChainId\"); require(toAddress.length !=0, \"empty toAddress\"); address addr; assembly{ addr := mload(add(toAddress, 0x14))} require(addr != address(0), \"zero toAddress\"); _pull(fromAsset, amount); amount = _checkoutFee(fromAsset, amount, fee); _push(fromAsset, toChainId, toAddress, amount); emit PolyWrapperLock(fromAsset, msg.sender, toChainId, toAddress, amount, fee, id);}",
                                "modifiers": [
                                    "payable",
                                    "nonReentrant",
                                    "whenNotPaused"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "fromAsset"
                                    },
                                    {
                                        "type": "uint64",
                                        "name": "toChainId"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "toAddress"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "fee"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "id"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "chainId",
                                        "",
                                        "PolyWrapperV2"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "PolyWrapperV2.nonReentrant",
                                        "PolyWrapperV2.whenNotPaused",
                                        "PolyWrapperV2._push",
                                        "PolyWrapperV2._checkoutFee",
                                        "PolyWrapperV2._pull"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "ff911eebfb247513985ae20962f8f9e1"
                            }
                        ],
                        "speedUp": [
                            {
                                "visibility": "public",
                                "content": "function speedUp(address fromAsset, bytes memory txHash, uint fee) public payable nonReentrant whenNotPaused{ _pull(fromAsset, fee); emit PolyWrapperSpeedUp(fromAsset, txHash, msg.sender, fee);}",
                                "modifiers": [
                                    "payable",
                                    "nonReentrant",
                                    "whenNotPaused"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "fromAsset"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "txHash"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "fee"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "PolyWrapperV2.nonReentrant",
                                        "PolyWrapperV2.whenNotPaused",
                                        "PolyWrapperV2._pull"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "2871b3fd2f875dbfbfe25f515ea7f9fd"
                            }
                        ],
                        "_pull": [
                            {
                                "visibility": "internal",
                                "content": "function _pull(address fromAsset, uint amount) internal{ if (fromAsset == address(0)){ require(msg.value == amount, \"insufficient ether\");} else{ IERC20(fromAsset).safeTransferFrom(msg.sender, address(this), amount);}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "fromAsset"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "PolyWrapperV2.IERC20"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "253340f677b1714dc578d845dc515e79"
                            }
                        ],
                        "_checkoutFee": [
                            {
                                "visibility": "internal",
                                "content": "function _checkoutFee(address fromAsset, uint amount, uint fee) internal view returns (uint){ if (fromAsset == address(0)){ require(msg.value >= amount, \"insufficient ether\"); require(amount > fee, \"amount less than fee\"); return amount.sub(fee);} else{ require(msg.value >= fee, \"insufficient ether\"); return amount;}}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "fromAsset"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "fee"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "amount.sub"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "633b8e2f0933be18de091dcdd96d5ef0"
                            }
                        ],
                        "_push": [
                            {
                                "visibility": "internal",
                                "content": "function _push(address fromAsset, uint64 toChainId, bytes memory toAddress, uint amount) internal{ if (fromAsset == address(0)){ require(lockProxy.lock.value(amount)(fromAsset, toChainId, toAddress, amount), \"lock ether fail\");} else{ IERC20(fromAsset).safeApprove(address(lockProxy), 0); IERC20(fromAsset).safeApprove(address(lockProxy), amount); require(lockProxy.lock(fromAsset, toChainId, toAddress, amount), \"lock erc20 fail\");}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "fromAsset"
                                    },
                                    {
                                        "type": "uint64",
                                        "name": "toChainId"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "toAddress"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "lockProxy",
                                        "",
                                        "PolyWrapperV2"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ILockProxy.lock",
                                        "PolyWrapperV2.IERC20"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "a64ac9420345c997e9c5500ed3acc2ea"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {
                        "PolyWrapperLock": {
                            "event": "PolyWrapperLock",
                            "content": "PolyWrapperLock(address indexed fromAsset, address indexed sender, uint64 toChainId, bytes toAddress, uint net, uint fee, uint id)"
                        },
                        "PolyWrapperSpeedUp": {
                            "event": "PolyWrapperSpeedUp",
                            "content": "PolyWrapperSpeedUp(address indexed fromAsset, bytes indexed txHash, address indexed sender, uint efee)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "uint": "SafeMath",
                        "IERC20": "SafeERC20"
                    }
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "PolyWrapperV2.onlyOwner": "e51d4482bbb9c52d712461d06280a59d",
                "ILockProxy.managerProxyContract": "2fa74fb5ca92acffd0b6bd319ddb13b2",
                "PolyWrapperV2._pause": "9cd2316c6a13117d8ec2db4cf0f802d6",
                "PolyWrapperV2._unpause": "8b26a3ad642d45df7b9f15510d157efd",
                "PolyWrapperV2._push": "a64ac9420345c997e9c5500ed3acc2ea",
                "PolyWrapperV2._pull": "253340f677b1714dc578d845dc515e79",
                "PolyWrapperV2.nonReentrant": "cc2bc7a15485c438a15c09f84d12d03d",
                "PolyWrapperV2._checkoutFee": "633b8e2f0933be18de091dcdd96d5ef0",
                "PolyWrapperV2.whenNotPaused": "916b8aef83a979053b70140c3000aa2c",
                "amount.sub": "972c2868144778b0617e55a6f97163a0",
                "ILockProxy.lock": "4466218b0fdefe668c81412b489a13a4"
            },
            "md5": "5964e6df539f58c80d3c037addc0fe2f"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\core\\wrapper\\interfaces\\IPolyWrapper.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\core\\wrapper\\interfaces\\IPolyWrapper.sol",
            "filename": "IPolyWrapper.sol",
            "imported_contracts": {},
            "contracts": {
                "IPolyWrapper": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "feeCollector": [
                            {
                                "visibility": "external",
                                "content": "function feeCollector() external view returns (address);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "890930f1df309d6ba6f01ea9bd1476b1"
                            }
                        ],
                        "lockProxy": [
                            {
                                "visibility": "external",
                                "content": "function lockProxy() external view returns (address);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "d75b143e506861c4516d7946aee913ee"
                            }
                        ],
                        "paused": [
                            {
                                "visibility": "external",
                                "content": "function paused() external view returns (bool);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "249d4fd073df6c3c691d0712caa8c460"
                            }
                        ],
                        "chainId": [
                            {
                                "visibility": "external",
                                "content": "function chainId() external view returns (uint);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "6c48b453989966eee3c1f30fffa7c383"
                            }
                        ],
                        "owner": [
                            {
                                "visibility": "external",
                                "content": "function owner() external view returns (address);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "011cf011737d808d4338bbe04f1845e5"
                            }
                        ],
                        "lock": [
                            {
                                "visibility": "external",
                                "content": "function lock( address fromAsset, uint64 toChainId, bytes calldata toAddress, uint amount, uint fee, uint id ) external payable;",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "fromAsset"
                                    },
                                    {
                                        "type": "uint64",
                                        "name": "toChainId"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "toAddress"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "fee"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "id"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": true,
                                "md5": "e2d0b6501311d010369f2d05b7ef098f"
                            }
                        ],
                        "speedUp": [
                            {
                                "visibility": "external",
                                "content": "function speedUp( address fromAsset, bytes calldata txHash, uint fee ) external payable;",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "fromAsset"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "txHash"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "fee"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": true,
                                "md5": "3f772b7cbc3d0c7dec229d7f1ba054a5"
                            }
                        ],
                        "setFeeCollector": [
                            {
                                "visibility": "external",
                                "content": "function setFeeCollector(address collector) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "collector"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "d6e171c8eb9cf62ab9d17ce25cc2b867"
                            }
                        ],
                        "setLockProxy": [
                            {
                                "visibility": "external",
                                "content": "function setLockProxy(address _lockProxy) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_lockProxy"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "ba7ebecf41c7b7444f40b82422930ca5"
                            }
                        ],
                        "extractFee": [
                            {
                                "visibility": "external",
                                "content": "function extractFee(address token) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "8bf7c81951559e85929cdf066ab428fb"
                            }
                        ],
                        "pause": [
                            {
                                "visibility": "external",
                                "content": "function pause() external;",
                                "modifiers": [],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "3806e94cfd969d325849f330e86c51b3"
                            }
                        ],
                        "unpause": [
                            {
                                "visibility": "external",
                                "content": "function unpause() external;",
                                "modifiers": [],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "753996fe54e3ddf69a9dd0ab1d89681e"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {
                        "PolyWrapperLock": {
                            "event": "PolyWrapperLock",
                            "content": "PolyWrapperLock(address indexed fromAsset, address indexed sender, uint64 toChainId, bytes toAddress, uint net, uint fee, uint id)"
                        },
                        "PolyWrapperSpeedUp": {
                            "event": "PolyWrapperSpeedUp",
                            "content": "PolyWrapperSpeedUp(address indexed fromAsset, bytes indexed txHash, address indexed sender, uint efee)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "616f86367fa8473571ba56497141de44"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\utils\\Encoder.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\utils\\Encoder.sol",
            "filename": "Encoder.sol",
            "imported_contracts": {},
            "contracts": {
                "AbiEncoder": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "encodeWhiteList": [
                            {
                                "visibility": "public",
                                "content": "function encodeWhiteList(address _contract, bytes[] memory _methods) public pure returns(bytes memory){ return abi.encode(_contract, _methods);}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_contract"
                                    },
                                    {
                                        "type": "bytes[] memory",
                                        "name": "_methods"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "ffc5f90868bd17b2d48061ca746eb337"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "7591cbf4f753725a4e367ba2c8adead3"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\mocks\\libs\\common\\ZeroCopySinkMock.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\mocks\\libs\\common\\ZeroCopySinkMock.sol",
            "filename": "ZeroCopySinkMock.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\common\\ZeroCopySink.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "ZeroCopySinkMock": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {
                        "N": {
                            "type": "uint",
                            "visibility": "internal",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "10",
                            "content": "uint N = 10;"
                        }
                    },
                    "functions": {
                        "WriteBool": [
                            {
                                "visibility": "public",
                                "content": "function WriteBool(bool _b) public returns (bytes memory){ bytes memory executeResult; for (uint i = 0; i <= N; i++){ executeResult = ZeroCopySink.WriteBool(_b);} return ZeroCopySink.WriteBool(_b);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "bool",
                                        "name": "_b"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "N",
                                        "",
                                        "ZeroCopySinkMock"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ZeroCopySink.WriteBool"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "1f86e76a100b6bab18baf02bb87ae5d5"
                            }
                        ],
                        "WriteByte": [
                            {
                                "visibility": "public",
                                "content": "function WriteByte(byte _b) public returns (bytes memory){ bytes memory executeResult; for (uint i = 0; i <= N; i++){ executeResult = ZeroCopySink.WriteByte(_b);} return ZeroCopySink.WriteByte(_b);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "byte",
                                        "name": "_b"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "N",
                                        "",
                                        "ZeroCopySinkMock"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ZeroCopySink.WriteByte"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "e6001b93e03666464418df4de5f7c28e"
                            }
                        ],
                        "WriteUint8": [
                            {
                                "visibility": "public",
                                "content": "function WriteUint8(uint8 _v) public returns (bytes memory){ bytes memory executeResult; for (uint i = 0; i <= N; i++){ executeResult = ZeroCopySink.WriteUint8(_v);} return ZeroCopySink.WriteUint8(_v);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint8",
                                        "name": "_v"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "N",
                                        "",
                                        "ZeroCopySinkMock"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ZeroCopySink.WriteUint8"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "674b468c3de5c4a2855b523ff5708dbb"
                            }
                        ],
                        "WriteUint16": [
                            {
                                "visibility": "public",
                                "content": "function WriteUint16(uint16 _v) public returns (bytes memory){ bytes memory executeResult; for (uint i = 0; i <= N; i++){ executeResult = ZeroCopySink.WriteUint16(_v);} return ZeroCopySink.WriteUint16(_v);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint16",
                                        "name": "_v"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "N",
                                        "",
                                        "ZeroCopySinkMock"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ZeroCopySink.WriteUint16"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "0fb5a9d71a75c40c820067b353d00d08"
                            }
                        ],
                        "WriteUint32": [
                            {
                                "visibility": "public",
                                "content": "function WriteUint32(uint32 _v) public returns (bytes memory){ bytes memory executeResult; for (uint i = 0; i <= N; i++){ executeResult = ZeroCopySink.WriteUint32(_v);} return ZeroCopySink.WriteUint32(_v);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint32",
                                        "name": "_v"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "N",
                                        "",
                                        "ZeroCopySinkMock"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ZeroCopySink.WriteUint32"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "b87d6265169e87ebb04cf9976dc32873"
                            }
                        ],
                        "WriteUint64": [
                            {
                                "visibility": "public",
                                "content": "function WriteUint64(uint64 _v) public returns (bytes memory){ bytes memory executeResult; for (uint i = 0; i <= N; i++){ executeResult = ZeroCopySink.WriteUint64(_v);} return ZeroCopySink.WriteUint64(_v);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint64",
                                        "name": "_v"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "N",
                                        "",
                                        "ZeroCopySinkMock"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ZeroCopySink.WriteUint64"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "6bbeec5a1e73d4d66420bf97fc996a76"
                            }
                        ],
                        "WriteUint255": [
                            {
                                "visibility": "public",
                                "content": "function WriteUint255(uint256 _v) public returns (bytes memory){ bytes memory executeResult; for (uint i = 0; i <= N; i++){ executeResult = ZeroCopySink.WriteUint255(_v);} return ZeroCopySink.WriteUint255(_v);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "_v"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "N",
                                        "",
                                        "ZeroCopySinkMock"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ZeroCopySink.WriteUint255"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "184514dc1e82813d53fe65b7878bd80d"
                            }
                        ],
                        "WriteVarBytes": [
                            {
                                "visibility": "public",
                                "content": "function WriteVarBytes(bytes memory _b) public returns (bytes memory){ bytes memory executeResult; for (uint i = 0; i <= N; i++){ executeResult = ZeroCopySink.WriteVarBytes(_b);} return ZeroCopySink.WriteVarBytes(_b);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "_b"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "N",
                                        "",
                                        "ZeroCopySinkMock"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ZeroCopySink.WriteVarBytes"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "53c9066c3d759dcce92ca5ab7eee52db"
                            }
                        ],
                        "WriteVarUint": [
                            {
                                "visibility": "public",
                                "content": "function WriteVarUint(uint64 _v) public returns (bytes memory){ bytes memory executeResult; for (uint i = 0; i <= N; i++){ executeResult = ZeroCopySink.WriteVarUint(_v);} return ZeroCopySink.WriteVarUint(_v);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint64",
                                        "name": "_v"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "N",
                                        "",
                                        "ZeroCopySinkMock"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ZeroCopySink.WriteVarUint"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "019423a2b606c423bcb2fb08e5521863"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "ZeroCopySink.WriteBool": "15f343e43b767081b9de8a65f3c22cdc",
                "ZeroCopySink.WriteByte": "c5bf6c7c61efcd944e05725d61a24a46",
                "ZeroCopySink.WriteUint8": "80a85de70d1d534c0986e16659f6d62c",
                "ZeroCopySink.WriteUint16": "c67cd28d9a822009a5ac87927a05f3d0",
                "ZeroCopySink.WriteUint32": "386aebed1095a56d02680e183673ec61",
                "ZeroCopySink.WriteUint64": "167a0b56ff247a6f04718313a4fda54e",
                "ZeroCopySink.WriteUint255": "3098e5f486fd389bc2412ac67cb37577",
                "ZeroCopySink.WriteVarBytes": "4158ce7a596d8e6f8d52a99c62d186ed",
                "ZeroCopySink.WriteVarUint": "f84001777513eba6a666a901a653ea62"
            },
            "md5": "ca32cace457b6c18514757b0a6c77a22"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\mocks\\libs\\common\\ZeroCopySourceMock.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\mocks\\libs\\common\\ZeroCopySourceMock.sol",
            "filename": "ZeroCopySourceMock.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\common\\ZeroCopySource.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "ZeroCopySourceMock": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {
                        "N": {
                            "type": "uint",
                            "visibility": "internal",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "10",
                            "content": "uint N = 10;"
                        }
                    },
                    "functions": {
                        "NextBool": [
                            {
                                "visibility": "public",
                                "content": "function NextBool(bytes memory _b, uint256 _off) public returns (bool, uint256){ bool res; uint256 offset = 0; for (uint i = 0; i <= N; i++){ (res, offset) = ZeroCopySource.NextBool(_b, _off);} return ZeroCopySource.NextBool(_b, _off);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "_b"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_off"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    },
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "N",
                                        "",
                                        "ZeroCopySourceMock"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ZeroCopySource.NextBool"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "b59b9b0737fe68e3b6b6ea350b8698da"
                            }
                        ],
                        "NextByte": [
                            {
                                "visibility": "public",
                                "content": "function NextByte(bytes memory _b, uint256 _off) public returns (byte, uint256){ return ZeroCopySource.NextByte(_b, _off);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "_b"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_off"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "byte",
                                        "name": null
                                    },
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ZeroCopySource.NextByte"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "f02d52f63666b84b9770f142eb51d8f4"
                            }
                        ],
                        "NextUint8": [
                            {
                                "visibility": "public",
                                "content": "function NextUint8(bytes memory _b, uint256 _off) public returns (uint8, uint256){ return ZeroCopySource.NextUint8(_b, _off);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "_b"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_off"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint8",
                                        "name": null
                                    },
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ZeroCopySource.NextUint8"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "5b2d3fc3402c6d219837c8c437f86f9d"
                            }
                        ],
                        "NextUint16": [
                            {
                                "visibility": "public",
                                "content": "function NextUint16(bytes memory _b, uint256 _off) public returns (uint16, uint256){ return ZeroCopySource.NextUint16(_b, _off);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "_b"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_off"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint16",
                                        "name": null
                                    },
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ZeroCopySource.NextUint16"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "573535e1372e3bcb642b4ad7e5eb07d9"
                            }
                        ],
                        "NextUint32": [
                            {
                                "visibility": "public",
                                "content": "function NextUint32(bytes memory _b, uint256 _off) public returns (uint32, uint256){ return ZeroCopySource.NextUint32(_b, _off);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "_b"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_off"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint32",
                                        "name": null
                                    },
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ZeroCopySource.NextUint32"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "97929e6272766295410284c616595ae5"
                            }
                        ],
                        "NextUint64": [
                            {
                                "visibility": "public",
                                "content": "function NextUint64(bytes memory _b, uint256 _off) public returns (uint64, uint256){ return ZeroCopySource.NextUint64(_b, _off);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "_b"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_off"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint64",
                                        "name": null
                                    },
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ZeroCopySource.NextUint64"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "dea88bc791f9041195a64db8448fae80"
                            }
                        ],
                        "NextVarBytes": [
                            {
                                "visibility": "public",
                                "content": "function NextVarBytes(bytes memory _b, uint256 _off) public returns (bytes memory, uint256){ return ZeroCopySource.NextVarBytes(_b, _off);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "_b"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_off"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    },
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ZeroCopySource.NextVarBytes"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "325858c22f7ee3afdea21848f5487b2d"
                            }
                        ],
                        "NextHash": [
                            {
                                "visibility": "public",
                                "content": "function NextHash(bytes memory _b, uint256 _off) public returns (bytes32, uint256){ return ZeroCopySource.NextHash(_b, _off);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "_b"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_off"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": null
                                    },
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ZeroCopySource.NextHash"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "af6e828547e38847a0e18c46969d2d73"
                            }
                        ],
                        "NextBytes20": [
                            {
                                "visibility": "public",
                                "content": "function NextBytes20(bytes memory _b, uint256 _off) public returns (bytes20, uint256){ return ZeroCopySource.NextBytes20(_b, _off);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "_b"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_off"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes20",
                                        "name": null
                                    },
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ZeroCopySource.NextBytes20"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "de8151dcc7839aed1cff90f6530e00d8"
                            }
                        ],
                        "NextUint255": [
                            {
                                "visibility": "public",
                                "content": "function NextUint255(bytes memory _b, uint256 _off) public returns (uint256, uint256){ return ZeroCopySource.NextUint255(_b, _off);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "_b"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_off"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    },
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ZeroCopySource.NextUint255"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "5b77a217970dd9b5fbcbd8dd56db2054"
                            }
                        ],
                        "NextVarUint": [
                            {
                                "visibility": "public",
                                "content": "function NextVarUint(bytes memory _b, uint256 _off) public returns (uint, uint256){ return ZeroCopySource.NextVarUint(_b, _off);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "_b"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_off"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": null
                                    },
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ZeroCopySource.NextVarUint"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "fd50e83b503cb82446039ebb566bab3f"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "ZeroCopySource.NextBool": "23e3ade68faa32847245c5868760b872",
                "ZeroCopySource.NextByte": "15c7c85b500b67ae408d4028208791c2",
                "ZeroCopySource.NextUint8": "322bfbf55919ba69331f0fdc0cb602ac",
                "ZeroCopySource.NextUint16": "372b9d31a2b019ca542bab130d4cb153",
                "ZeroCopySource.NextUint32": "81b54c1cec3975b9e9f153bd6e5b4c2e",
                "ZeroCopySource.NextUint64": "92084c740c7445e12d0689f55f5a0fc9",
                "ZeroCopySource.NextVarBytes": "44832bd86b31e65ad466977a2ba787c7",
                "ZeroCopySource.NextHash": "03828ac17784f68816aab2071abf8bf2",
                "ZeroCopySource.NextBytes20": "1befeb8170ec99496f40c1235e47f5b6",
                "ZeroCopySource.NextUint255": "ff2c23fbf3c7aea23dfbe47ba62c0624",
                "ZeroCopySource.NextVarUint": "eb61d08dab8c10554f70127de04a8e04"
            },
            "md5": "24ee0d2f636dfaf4eb8d298cff468f3c"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\mocks\\libs\\math\\SafeMathMock.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\mocks\\libs\\math\\SafeMathMock.sol",
            "filename": "SafeMathMock.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\libs\\math\\SafeMath.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "SafeMathMock": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "sub": [
                            {
                                "visibility": "public",
                                "content": "function sub(uint256 a, uint256 b) public pure returns (uint256){ return SafeMath.sub(a, b);}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "a"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "b"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SafeMath.sub"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "7c1b425ea9169830d0867196ecf875a7"
                            }
                        ],
                        "add": [
                            {
                                "visibility": "public",
                                "content": "function add(uint256 a, uint256 b) public pure returns (uint256){ return SafeMath.add(a, b);}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "a"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "b"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SafeMath.add"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "0c7e81124776b0c24a419a1877be80c0"
                            }
                        ],
                        "mul": [
                            {
                                "visibility": "public",
                                "content": "function mul(uint256 a, uint256 b) public pure returns (uint256){ return SafeMath.mul(a, b);}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "a"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "b"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SafeMath.mul"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "45f9d1b1cba841a01a299237a2357c58"
                            }
                        ],
                        "div": [
                            {
                                "visibility": "public",
                                "content": "function div(uint256 a, uint256 b) public pure returns (uint256){ return SafeMath.div(a, b);}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "a"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "b"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SafeMath.div"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "61199c9773081a019683a0e3dcd6b069"
                            }
                        ],
                        "mod": [
                            {
                                "visibility": "public",
                                "content": "function mod(uint256 a, uint256 b) public pure returns (uint256){ return SafeMath.mod(a, b);}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "a"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "b"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SafeMath.mod"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "8fd56e6be7f6d9035a0f44ad1ecc4d5b"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "SafeMath.sub": "972c2868144778b0617e55a6f97163a0",
                "SafeMath.add": "b83a169007730f80a7fc79bee8748fff",
                "SafeMath.mul": "5622448ca508810ce734d0cb10517566",
                "SafeMath.div": "371f945bc2211ac7c63e7277fb7222a7",
                "SafeMath.mod": "50a3733021c21a71491ee85ffb90a2a4"
            },
            "md5": "45a719f74141dac8080577385d33e549"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\mocks\\libs\\utils\\UtilsMock.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\PolyNetwork20210810\\contracts\\mocks\\libs\\utils\\UtilsMock.sol",
            "filename": "UtilsMock.sol",
            "imported_contracts": {
                "": {
                    "in_database": false,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "UtilsMock": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {
                        "storageBytes": {
                            "type": "bytes",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "bytes public storageBytes;"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor () public{ storageBytes = bytes(\"I am global in global storage\");}",
                                "modifiers": [],
                                "parameters": [],
                                "returns": [],
                                "reads": [
                                    [
                                        "storageBytes",
                                        "",
                                        "UtilsMock"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "storageBytes",
                                        "",
                                        "UtilsMock"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "a508eeb9ef8b2c8c84f769d07e71f1a8"
                            }
                        ],
                        "bytesToBytes32": [
                            {
                                "visibility": "public",
                                "content": "function bytesToBytes32(bytes memory _b) public pure returns (bytes32){ return Utils.bytesToBytes32(_b);}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "_b"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Utils.bytesToBytes32"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "d1239e41baafcfd56ea5ea2b2cf0815b"
                            }
                        ],
                        "bytesToUint256": [
                            {
                                "visibility": "public",
                                "content": "function bytesToUint256(bytes memory _v) public pure returns (uint256){ return Utils.bytesToUint256(_v);}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "_v"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Utils.bytesToUint256"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "83c6c24ab07333c856d10188dabc692e"
                            }
                        ],
                        "uint256ToBytes": [
                            {
                                "visibility": "public",
                                "content": "function uint256ToBytes(uint256 _v) public pure returns (bytes memory){ return Utils.uint256ToBytes(_v);}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "_v"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Utils.uint256ToBytes"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "655c7441b466c7de8e52ccb011756fd8"
                            }
                        ],
                        "bytesToAddress": [
                            {
                                "visibility": "public",
                                "content": "function bytesToAddress(bytes memory _v) public pure returns (address){ return Utils.bytesToAddress(_v);}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "_v"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Utils.bytesToAddress"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "724a05716759cf89e347695cb8fbf185"
                            }
                        ],
                        "addressToBytes": [
                            {
                                "visibility": "public",
                                "content": "function addressToBytes(address _v) public pure returns (bytes memory){ return Utils.addressToBytes(_v);}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_v"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Utils.addressToBytes"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "610803bb78494cd6d34e29fe1f789bfc"
                            }
                        ],
                        "hashLeaf": [
                            {
                                "visibility": "public",
                                "content": "function hashLeaf(bytes memory _data) public pure returns (bytes32){ return Utils.hashLeaf(_data);}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "_data"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Utils.hashLeaf"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "d87979b26732d8ea63f16f2a7fd450da"
                            }
                        ],
                        "hashChildren": [
                            {
                                "visibility": "public",
                                "content": "function hashChildren(bytes32 left, bytes32 right) public pure returns (bytes32){ return Utils.hashChildren(left, right);}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "left"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "right"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Utils.hashChildren"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "f413c00a7672e5ad3ceb322b33a1ef35"
                            }
                        ],
                        "equalStorage": [
                            {
                                "visibility": "public",
                                "content": "function equalStorage( bytes memory memoryBytes) public view returns (bool){ return Utils.equalStorage(storageBytes, memoryBytes);}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "memoryBytes"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "storageBytes",
                                        "",
                                        "UtilsMock"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Utils.equalStorage"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "139237984508f350b3fd52b467c61e75"
                            }
                        ],
                        "slice": [
                            {
                                "visibility": "public",
                                "content": "function slice(bytes memory _bytes, uint _start, uint _length )public pure returns (bytes memory){ return Utils.slice(_bytes, _start, _length);}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "_bytes"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "_start"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "_length"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Utils.slice"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "ff5b302906690284f287403ef1524f75"
                            }
                        ],
                        "containMAddresses": [
                            {
                                "visibility": "public",
                                "content": "function containMAddresses(address[] memory keepers, address[] memory signers, uint m) public pure returns(bool){ return Utils.containMAddresses(keepers, signers, m);}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "address[] memory",
                                        "name": "keepers"
                                    },
                                    {
                                        "type": "address[] memory",
                                        "name": "signers"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "m"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Utils.containMAddresses"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "790306396d0282a33e112940c0742f11"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "d22b7b56bbac71868db0fd71e590e516"
        }
    },
    "handled_md5": {
        "__set__": true,
        "values": [
            "8bdd9874191721cc80aecac92e4a59cf",
            "616f86367fa8473571ba56497141de44",
            "d22b7b56bbac71868db0fd71e590e516",
            "4df2c06952f5e7f3a68a834a7e8efd0e",
            "a7d411b95ddeded5a15a7d7e14d1b59b",
            "7466ca6a2f5ad6372c4e28b1e11a2509",
            "487cdaf535d38b0f0411a18c6c90b9de",
            "f17c89446f0f68ece455e45a990ea3b9",
            "d192d3b76957552305ad9875cbb600b9",
            "7591cbf4f753725a4e367ba2c8adead3",
            "43aaf455900d757ad00ca28fe5d04243",
            "f3423c608e9399de00bcd1aa76b194f0",
            "1b57ffad13623998b557a644cb44f968",
            "305599c2f810beaaf9176fb30f4075b7",
            "2a787e2f07085db607855b29c1df6483",
            "ba6e01ff05637d47ab0a2ce867aa5b87",
            "45a719f74141dac8080577385d33e549",
            "122386eadc00cef15b7be2923eefb08e",
            "ca32cace457b6c18514757b0a6c77a22",
            "322482e1b814f67df555a96e1ee44af3",
            "52ede2fdbd6927dcdb8f7f4bc64acd09",
            "0f8d3da70b0281e413948947313d954e",
            "d6164a79470c6b38aeb0439b19b32dd1",
            "cc9cb476579ff6efbc70668936803128",
            "e2ba41d5770739481d8ec4269500a2a7",
            "8326d8c7e1244324dde45548899409cd",
            "034460130e9bf5e9ee7d98690f47bec0",
            "d2e7d9578247e7cbbff07b402aebd132",
            "1271fc5832ca93ed8b2ff99ac3e0e71a",
            "aee0d97922cba3d1e75407aa630eef70",
            "0fbcb2bacee597ac69c959041c99e5a2",
            "33f056732392fcd7e33615647a64f93d",
            "5f10b46efdcc259ac648e3717222ba28",
            "30daafa3e7619992a8801f6cb43cdf41",
            "f28d6d615cbfeaff4c24dcab30f14cb4",
            "5964e6df539f58c80d3c037addc0fe2f",
            "24ee0d2f636dfaf4eb8d298cff468f3c",
            "e87f93bfa914942410a022389a743136",
            "32baff3fbc91cbd3250785f6250def08",
            "163a8bcc4a34748517022e830df71309",
            "1714c23d5401f157989495580e28f04a",
            "0e513ce1c9013cbd1e527ec5e4d2195a",
            "50bbea7bc2388fbe2e381cc81a0e8e28",
            "3efddade90ff594e7f6067be83004bf7",
            "4df133c1c5eaa84f0e562164e30be5a1",
            "feacda6c29c42060b7ca5d5473311cd2"
        ]
    }
}