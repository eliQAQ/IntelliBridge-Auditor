{
    "solidity_file": {
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\HyperBridge20231214\\Initializable.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\HyperBridge20231214\\Initializable.sol",
            "filename": "Initializable.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\utils\\Address.sol": {
                    "in_database": false,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "Initializable": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": true,
                    "inherits": [],
                    "state_variables": {
                        "_initialized": {
                            "type": "uint8",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint8 private _initialized;"
                        },
                        "_initializing": {
                            "type": "bool",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "bool private _initializing;"
                        }
                    },
                    "functions": {
                        "_disableInitializers": [
                            {
                                "visibility": "internal",
                                "content": "function _disableInitializers() internal virtual{ require(!_initializing, \"Initializable: contract is initializing\"); if (_initialized < type (uint8).max){ _initialized = type (uint8).max; emit Initialized( type (uint8).max);}}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [
                                    [
                                        "_initialized",
                                        "",
                                        "Initializable"
                                    ],
                                    [
                                        "_initializing",
                                        "",
                                        "Initializable"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_initialized",
                                        "",
                                        "Initializable"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Initializable.type"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "ed9a063536644864e1b18ca8f1bcc6a9"
                            }
                        ]
                    },
                    "modifiers": {
                        "initializer": {
                            "parameters": [],
                            "content": "modifier initializer(){ bool isTopLevelCall = !_initializing; require( (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1), \"Initializable: contract is already initialized\" ); _initialized = 1; if (isTopLevelCall){ _initializing = true;} _; if (isTopLevelCall){ _initializing = false; emit Initialized(1);}}",
                            "reads": [
                                [
                                    "_initialized",
                                    "",
                                    "Initializable"
                                ],
                                [
                                    "_initializing",
                                    "",
                                    "Initializable"
                                ]
                            ],
                            "writes": [
                                [
                                    "_initialized",
                                    "",
                                    "Initializable"
                                ],
                                [
                                    "_initializing",
                                    "",
                                    "Initializable"
                                ]
                            ],
                            "external_calls": {
                                "__set__": true,
                                "values": [
                                    "Address.isContract"
                                ]
                            },
                            "md5": "b17e307cf29982039dab989750b168f3"
                        },
                        "reinitializer": {
                            "parameters": [
                                {
                                    "type": "uint8",
                                    "name": "version"
                                }
                            ],
                            "content": "modifier reinitializer(uint8 version){ require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\"); _initialized = version; _initializing = true; _; _initializing = false; emit Initialized(version);}",
                            "reads": [
                                [
                                    "_initialized",
                                    "",
                                    "Initializable"
                                ],
                                [
                                    "_initializing",
                                    "",
                                    "Initializable"
                                ]
                            ],
                            "writes": [
                                [
                                    "_initialized",
                                    "",
                                    "Initializable"
                                ],
                                [
                                    "_initializing",
                                    "",
                                    "Initializable"
                                ]
                            ],
                            "external_calls": [],
                            "md5": "cc253d6e6a28a0a885ffc20460167c1a"
                        },
                        "onlyInitializing": {
                            "parameters": [],
                            "content": "modifier onlyInitializing(){ require(_initializing, \"Initializable: contract is not initializing\"); _;}",
                            "reads": [
                                [
                                    "_initializing",
                                    "",
                                    "Initializable"
                                ]
                            ],
                            "writes": [],
                            "external_calls": [],
                            "md5": "9aa43424d4ca4ac38d1414b683de0171"
                        }
                    },
                    "structs": {},
                    "events": {
                        "Initialized": {
                            "event": "Initialized",
                            "content": "Initialized(uint8 version)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "d7a38c42c504f316833031774d3d0eb1"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\HyperBridge20231214\\StandardBridge.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\HyperBridge20231214\\StandardBridge.sol",
            "filename": "StandardBridge.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\HyperBridge20231214\\openzeppelin\\contracts\\token\\ERC20\\IERC20.sol": {
                    "in_database": false,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "IERC20": {
                            "original_name": "IERC20",
                            "type": {
                                "__CT__": true,
                                "value": 0
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\HyperBridge20231214\\openzeppelin\\contracts\\utils\\introspection\\ERC165Checker.sol": {
                    "in_database": false,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "ERC165Checker": {
                            "original_name": "ERC165Checker",
                            "type": {
                                "__CT__": true,
                                "value": 0
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\HyperBridge20231214\\openzeppelin\\contracts\\utils\\Address.sol": {
                    "in_database": false,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "Address": {
                            "original_name": "Address",
                            "type": {
                                "__CT__": true,
                                "value": 0
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\HyperBridge20231214\\openzeppelin\\contracts\\token\\ERC20\\utils\\SafeERC20.sol": {
                    "in_database": false,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "SafeERC20": {
                            "original_name": "SafeERC20",
                            "type": {
                                "__CT__": true,
                                "value": 0
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\libraries\\SafeCall.sol": {
                    "in_database": false,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "SafeCall": {
                            "original_name": "SafeCall",
                            "type": {
                                "__CT__": true,
                                "value": 0
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\HyperBridge20231214\\IOptimismMintableERC20.sol": {
                    "in_database": false,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "IOptimismMintableERC20": {
                            "original_name": "IOptimismMintableERC20",
                            "type": {
                                "__CT__": true,
                                "value": 0
                            }
                        },
                        "ILegacyMintableERC20": {
                            "original_name": "ILegacyMintableERC20",
                            "type": {
                                "__CT__": true,
                                "value": 0
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\HyperBridge20231214\\CrossDomainMessenger.sol": {
                    "in_database": false,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "CrossDomainMessenger": {
                            "original_name": "CrossDomainMessenger",
                            "type": {
                                "__CT__": true,
                                "value": 0
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\HyperBridge20231214\\OptimismMintableERC20.sol": {
                    "in_database": false,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "OptimismMintableERC20": {
                            "original_name": "OptimismMintableERC20",
                            "type": {
                                "__CT__": true,
                                "value": 0
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\HyperBridge20231214\\Initializable.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "Initializable": {
                            "original_name": "Initializable",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                }
            },
            "contracts": {
                "StandardBridge": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": true,
                    "inherits": [
                        "is",
                        "Initializable"
                    ],
                    "state_variables": {
                        "RECEIVE_DEFAULT_GAS_LIMIT": {
                            "type": "uint32",
                            "visibility": "internal",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "200_000",
                            "content": "uint32 internal constant RECEIVE_DEFAULT_GAS_LIMIT = 200_000;"
                        },
                        "OTHER_BRIDGE": {
                            "type": "StandardBridge",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": null,
                            "content": "StandardBridge public immutable OTHER_BRIDGE;"
                        },
                        "spacer_0_2_20": {
                            "type": "address",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address private spacer_0_2_20;"
                        },
                        "spacer_1_0_20": {
                            "type": "address",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address private spacer_1_0_20;"
                        },
                        "deposits": {
                            "type": "mapping(address => mapping(address => uint256))",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(address => mapping(address => uint256)) public deposits;"
                        },
                        "messenger": {
                            "type": "CrossDomainMessenger",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "CrossDomainMessenger public messenger;"
                        },
                        "__gap": {
                            "type": "uint256[46]",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256[46] private __gap;"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (StandardBridge _otherBridge){ OTHER_BRIDGE = _otherBridge;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "StandardBridge",
                                        "name": "_otherBridge"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "OTHER_BRIDGE",
                                        "",
                                        "StandardBridge"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "OTHER_BRIDGE",
                                        "",
                                        "StandardBridge"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "4a046acd2c7408b1cb21d14fc46f9a03"
                            }
                        ],
                        "__StandardBridge_init": [
                            {
                                "visibility": "internal",
                                "content": "function __StandardBridge_init(CrossDomainMessenger _messenger) internal onlyInitializing{ messenger = _messenger;}",
                                "modifiers": [
                                    "onlyInitializing"
                                ],
                                "parameters": [
                                    {
                                        "type": "CrossDomainMessenger",
                                        "name": "_messenger"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "messenger",
                                        "",
                                        "StandardBridge"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "messenger",
                                        "",
                                        "StandardBridge"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "StandardBridge.onlyInitializing"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "2b881c2d6572ef65ce42ad7d08d23375"
                            }
                        ],
                        "MESSENGER": [
                            {
                                "visibility": "external",
                                "content": "function MESSENGER() external view returns (CrossDomainMessenger){ return messenger;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "CrossDomainMessenger",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "messenger",
                                        "",
                                        "StandardBridge"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "00dbc26e666578c3abd6c66000346d1b"
                            }
                        ],
                        "otherBridge": [
                            {
                                "visibility": "external",
                                "content": "function otherBridge() external view returns (StandardBridge){ return OTHER_BRIDGE;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "StandardBridge",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "OTHER_BRIDGE",
                                        "",
                                        "StandardBridge"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "07b5f3c9cc2db1f5eb4fe2e08e06f161"
                            }
                        ],
                        "bridgeETH": [
                            {
                                "visibility": "public",
                                "content": "function bridgeETH(uint32 _minGasLimit, bytes calldata _extraData) public payable onlyEOA{ _initiateBridgeETH(msg.sender, msg.sender, msg.value, _minGasLimit, _extraData);}",
                                "modifiers": [
                                    "payable",
                                    "onlyEOA"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint32",
                                        "name": "_minGasLimit"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "_extraData"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "StandardBridge.onlyEOA",
                                        "StandardBridge._initiateBridgeETH"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "b7077f6d4cef6635ed13c629a90f342b"
                            }
                        ],
                        "bridgeETHTo": [
                            {
                                "visibility": "public",
                                "content": "function bridgeETHTo(address _to, uint32 _minGasLimit, bytes calldata _extraData) public payable{ _initiateBridgeETH(msg.sender, _to, msg.value, _minGasLimit, _extraData);}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_to"
                                    },
                                    {
                                        "type": "uint32",
                                        "name": "_minGasLimit"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "_extraData"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "StandardBridge._initiateBridgeETH"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "1a4e65f0934be640a8b49e961942341a"
                            }
                        ],
                        "bridgeERC20": [
                            {
                                "visibility": "public",
                                "content": "function bridgeERC20( address _localToken, address _remoteToken, uint256 _amount, uint32 _minGasLimit, bytes calldata _extraData ) public virtual onlyEOA{ _initiateBridgeERC20(_localToken, _remoteToken, msg.sender, msg.sender, _amount, _minGasLimit, _extraData);}",
                                "modifiers": [
                                    "virtual",
                                    "onlyEOA"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_localToken"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_remoteToken"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_amount"
                                    },
                                    {
                                        "type": "uint32",
                                        "name": "_minGasLimit"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "_extraData"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "StandardBridge._initiateBridgeERC20",
                                        "StandardBridge.onlyEOA"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "4a599197993404def0f025a7c3efd463"
                            }
                        ],
                        "bridgeERC20To": [
                            {
                                "visibility": "public",
                                "content": "function bridgeERC20To( address _localToken, address _remoteToken, address _to, uint256 _amount, uint32 _minGasLimit, bytes calldata _extraData ) public virtual{ _initiateBridgeERC20(_localToken, _remoteToken, msg.sender, _to, _amount, _minGasLimit, _extraData);}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_localToken"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_remoteToken"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_amount"
                                    },
                                    {
                                        "type": "uint32",
                                        "name": "_minGasLimit"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "_extraData"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "StandardBridge._initiateBridgeERC20"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "bfacd78f842fbbb1d7811285bde1e8a1"
                            }
                        ],
                        "finalizeBridgeETH": [
                            {
                                "visibility": "public",
                                "content": "function finalizeBridgeETH( address _from, address _to, uint256 _amount, bytes calldata _extraData ) public payable onlyOtherBridge{ require(msg.value == _amount, \"StandardBridge: amount sent does not match amount required\"); require(_to != address(this), \"StandardBridge: cannot send to self\"); require(_to != address(messenger), \"StandardBridge: cannot send to messenger\"); _emitETHBridgeFinalized(_from, _to, _amount, _extraData); bool success = SafeCall.call(_to, gasleft(), _amount, hex\"\"); require(success, \"StandardBridge: ETH transfer failed\");}",
                                "modifiers": [
                                    "payable",
                                    "onlyOtherBridge"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_amount"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "_extraData"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "messenger",
                                        "",
                                        "StandardBridge"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "StandardBridge.onlyOtherBridge",
                                        "StandardBridge._emitETHBridgeFinalized",
                                        "SafeCall.call"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "afc58237e3103f76514552af1944af61"
                            }
                        ],
                        "finalizeBridgeERC20": [
                            {
                                "visibility": "public",
                                "content": "function finalizeBridgeERC20( address _localToken, address _remoteToken, address _from, address _to, uint256 _amount, bytes calldata _extraData ) public onlyOtherBridge{ if (_isOptimismMintableERC20(_localToken)){ require( _isCorrectTokenPair(_localToken, _remoteToken), \"StandardBridge: wrong remote token for Optimism Mintable ERC20 local token\" ); OptimismMintableERC20(_localToken).mint(_to, _amount);} else{ deposits[_localToken][_remoteToken] = deposits[_localToken][_remoteToken] - _amount; IERC20(_localToken).safeTransfer(_to, _amount);} _emitERC20BridgeFinalized(_localToken, _remoteToken, _from, _to, _amount, _extraData);}",
                                "modifiers": [
                                    "onlyOtherBridge"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_localToken"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_remoteToken"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_amount"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "_extraData"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "deposits",
                                        "",
                                        "StandardBridge"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "deposits",
                                        "",
                                        "StandardBridge"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "StandardBridge.IERC20",
                                        "StandardBridge._isCorrectTokenPair",
                                        "StandardBridge.onlyOtherBridge",
                                        "StandardBridge._isOptimismMintableERC20",
                                        "StandardBridge.OptimismMintableERC20",
                                        "StandardBridge._emitERC20BridgeFinalized"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "dcaf4280fb41ff2ad4ebc6e803fe59ea"
                            }
                        ],
                        "_initiateBridgeETH": [
                            {
                                "visibility": "internal",
                                "content": "function _initiateBridgeETH( address _from, address _to, uint256 _amount, uint32 _minGasLimit, bytes memory _extraData ) internal{ require(msg.value == _amount, \"StandardBridge: bridging ETH must include sufficient ETH value\"); _emitETHBridgeInitiated(_from, _to, _amount, _extraData); messenger.sendMessage{ value: _amount} ( address(OTHER_BRIDGE), abi.encodeWithSelector(this.finalizeBridgeETH.selector, _from, _to, _amount, _extraData), _minGasLimit );}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_amount"
                                    },
                                    {
                                        "type": "uint32",
                                        "name": "_minGasLimit"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "_extraData"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "OTHER_BRIDGE",
                                        "",
                                        "StandardBridge"
                                    ],
                                    [
                                        "messenger",
                                        "",
                                        "StandardBridge"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "StandardBridge._emitETHBridgeInitiated"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "41708f1fadd0337aa699f93b229d45c1"
                            }
                        ],
                        "_initiateBridgeERC20": [
                            {
                                "visibility": "internal",
                                "content": "function _initiateBridgeERC20( address _localToken, address _remoteToken, address _from, address _to, uint256 _amount, uint32 _minGasLimit, bytes memory _extraData ) internal{ if (_isOptimismMintableERC20(_localToken)){ require( _isCorrectTokenPair(_localToken, _remoteToken), \"StandardBridge: wrong remote token for Optimism Mintable ERC20 local token\" ); OptimismMintableERC20(_localToken).burn(_from, _amount);} else{ IERC20(_localToken).safeTransferFrom(_from, address(this), _amount); deposits[_localToken][_remoteToken] = deposits[_localToken][_remoteToken] + _amount;} _emitERC20BridgeInitiated(_localToken, _remoteToken, _from, _to, _amount, _extraData); messenger.sendMessage( address(OTHER_BRIDGE), abi.encodeWithSelector( this.finalizeBridgeERC20.selector, _remoteToken, _localToken, _from, _to, _amount, _extraData ), _minGasLimit );}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_localToken"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_remoteToken"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_amount"
                                    },
                                    {
                                        "type": "uint32",
                                        "name": "_minGasLimit"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "_extraData"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "OTHER_BRIDGE",
                                        "",
                                        "StandardBridge"
                                    ],
                                    [
                                        "deposits",
                                        "",
                                        "StandardBridge"
                                    ],
                                    [
                                        "messenger",
                                        "",
                                        "StandardBridge"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "deposits",
                                        "",
                                        "StandardBridge"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "CrossDomainMessenger.sendMessage",
                                        "StandardBridge._isCorrectTokenPair",
                                        "StandardBridge.IERC20",
                                        "StandardBridge._isOptimismMintableERC20",
                                        "StandardBridge.OptimismMintableERC20",
                                        "StandardBridge._emitERC20BridgeInitiated"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "cf998e2fa49da2ce9a978ba83a9b57a8"
                            }
                        ],
                        "_isOptimismMintableERC20": [
                            {
                                "visibility": "internal",
                                "content": "function _isOptimismMintableERC20(address _token) internal view returns (bool){ return ERC165Checker.supportsInterface(_token, type (ILegacyMintableERC20).interfaceId) || ERC165Checker.supportsInterface(_token, type (IOptimismMintableERC20).interfaceId);}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_token"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "StandardBridge.type",
                                        "ERC165Checker.supportsInterface"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "c4eaecda96d1e0be410dcc5d1cc90ed2"
                            }
                        ],
                        "_isCorrectTokenPair": [
                            {
                                "visibility": "internal",
                                "content": "function _isCorrectTokenPair(address _mintableToken, address _otherToken) internal view returns (bool){ if (ERC165Checker.supportsInterface(_mintableToken, type (ILegacyMintableERC20).interfaceId)){ return _otherToken == ILegacyMintableERC20(_mintableToken).l1Token();} else{ return _otherToken == IOptimismMintableERC20(_mintableToken).remoteToken();}}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_mintableToken"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_otherToken"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "StandardBridge.IOptimismMintableERC20",
                                        "StandardBridge.type",
                                        "StandardBridge.ILegacyMintableERC20",
                                        "ERC165Checker.supportsInterface"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "2a5d8be1ad9aec7a06bbe4d2efb4323e"
                            }
                        ],
                        "_emitETHBridgeInitiated": [
                            {
                                "visibility": "internal",
                                "content": "function _emitETHBridgeInitiated( address _from, address _to, uint256 _amount, bytes memory _extraData ) internal virtual{ emit ETHBridgeInitiated(_from, _to, _amount, _extraData);}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_amount"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "_extraData"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "86c73c4d83e0e2771e1c4b8fa545e3e1"
                            }
                        ],
                        "_emitETHBridgeFinalized": [
                            {
                                "visibility": "internal",
                                "content": "function _emitETHBridgeFinalized( address _from, address _to, uint256 _amount, bytes memory _extraData ) internal virtual{ emit ETHBridgeFinalized(_from, _to, _amount, _extraData);}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_amount"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "_extraData"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "0edb47719e15e1e22969a5fab1ae2941"
                            }
                        ],
                        "_emitERC20BridgeInitiated": [
                            {
                                "visibility": "internal",
                                "content": "function _emitERC20BridgeInitiated( address _localToken, address _remoteToken, address _from, address _to, uint256 _amount, bytes memory _extraData ) internal virtual{ emit ERC20BridgeInitiated(_localToken, _remoteToken, _from, _to, _amount, _extraData);}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_localToken"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_remoteToken"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_amount"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "_extraData"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "7edc2856a0473bc2abf1a20d0472461a"
                            }
                        ],
                        "_emitERC20BridgeFinalized": [
                            {
                                "visibility": "internal",
                                "content": "function _emitERC20BridgeFinalized( address _localToken, address _remoteToken, address _from, address _to, uint256 _amount, bytes memory _extraData ) internal virtual{ emit ERC20BridgeFinalized(_localToken, _remoteToken, _from, _to, _amount, _extraData);}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_localToken"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_remoteToken"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_amount"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "_extraData"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "ea7302721277272b9e08480564d4e922"
                            }
                        ]
                    },
                    "modifiers": {
                        "onlyEOA": {
                            "parameters": [],
                            "content": "modifier onlyEOA(){ require(!Address.isContract(msg.sender), \"StandardBridge: function can only be called from an EOA\"); _;}",
                            "reads": [],
                            "writes": [],
                            "external_calls": {
                                "__set__": true,
                                "values": [
                                    "Address.isContract"
                                ]
                            },
                            "md5": "c96c755f008f67736fa245a745dee9b4"
                        },
                        "onlyOtherBridge": {
                            "parameters": [],
                            "content": "modifier onlyOtherBridge(){ require( msg.sender == address(messenger) && messenger.xDomainMessageSender() == address(OTHER_BRIDGE), \"StandardBridge: function can only be called from the other bridge\" ); _;}",
                            "reads": [
                                [
                                    "OTHER_BRIDGE",
                                    "",
                                    "StandardBridge"
                                ],
                                [
                                    "messenger",
                                    "",
                                    "StandardBridge"
                                ]
                            ],
                            "writes": [],
                            "external_calls": {
                                "__set__": true,
                                "values": [
                                    "CrossDomainMessenger.xDomainMessageSender"
                                ]
                            },
                            "md5": "26eea44039f2cf708fe5a604de4b6a7c"
                        }
                    },
                    "structs": {},
                    "events": {
                        "ETHBridgeInitiated": {
                            "event": "ETHBridgeInitiated",
                            "content": "ETHBridgeInitiated(address indexed from, address indexed to, uint256 amount, bytes extraData)"
                        },
                        "ETHBridgeFinalized": {
                            "event": "ETHBridgeFinalized",
                            "content": "ETHBridgeFinalized(address indexed from, address indexed to, uint256 amount, bytes extraData)"
                        },
                        "ERC20BridgeInitiated": {
                            "event": "ERC20BridgeInitiated",
                            "content": "ERC20BridgeInitiated( address indexed localToken, address indexed remoteToken, address indexed from, address to, uint256 amount, bytes extraData )"
                        },
                        "ERC20BridgeFinalized": {
                            "event": "ERC20BridgeFinalized",
                            "content": "ERC20BridgeFinalized( address indexed localToken, address indexed remoteToken, address indexed from, address to, uint256 amount, bytes extraData )"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "IERC20": "SafeERC20"
                    }
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "StandardBridge.onlyInitializing": "9aa43424d4ca4ac38d1414b683de0171",
                "StandardBridge._initiateBridgeETH": "41708f1fadd0337aa699f93b229d45c1",
                "StandardBridge.onlyEOA": "c96c755f008f67736fa245a745dee9b4",
                "StandardBridge._initiateBridgeERC20": "cf998e2fa49da2ce9a978ba83a9b57a8",
                "StandardBridge.onlyOtherBridge": "26eea44039f2cf708fe5a604de4b6a7c",
                "StandardBridge._emitETHBridgeFinalized": "0edb47719e15e1e22969a5fab1ae2941",
                "StandardBridge._isOptimismMintableERC20": "c4eaecda96d1e0be410dcc5d1cc90ed2",
                "StandardBridge._emitERC20BridgeFinalized": "ea7302721277272b9e08480564d4e922",
                "StandardBridge._isCorrectTokenPair": "2a5d8be1ad9aec7a06bbe4d2efb4323e",
                "StandardBridge._emitETHBridgeInitiated": "86c73c4d83e0e2771e1c4b8fa545e3e1",
                "StandardBridge._emitERC20BridgeInitiated": "7edc2856a0473bc2abf1a20d0472461a"
            },
            "md5": "d740ea4980f1079025279ecc0c09de90"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\HyperBridge20231214\\L1StandardBridge.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\HyperBridge20231214\\L1StandardBridge.sol",
            "filename": "L1StandardBridge.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\HyperBridge20231214\\src\\libraries\\Predeploys.sol": {
                    "in_database": false,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "Predeploys": {
                            "original_name": "Predeploys",
                            "type": {
                                "__CT__": true,
                                "value": 0
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\HyperBridge20231214\\StandardBridge.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "StandardBridge": {
                            "original_name": "StandardBridge",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\HyperBridge20231214\\src\\universal\\ISemver.sol": {
                    "in_database": false,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "ISemver": {
                            "original_name": "ISemver",
                            "type": {
                                "__CT__": true,
                                "value": 0
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\HyperBridge20231214\\src\\universal\\CrossDomainMessenger.sol": {
                    "in_database": false,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "CrossDomainMessenger": {
                            "original_name": "CrossDomainMessenger",
                            "type": {
                                "__CT__": true,
                                "value": 0
                            }
                        }
                    }
                }
            },
            "contracts": {
                "L1StandardBridge": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "StandardBridge",
                        "ISemver"
                    ],
                    "state_variables": {
                        "version": {
                            "type": "string",
                            "visibility": "public",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "\"1.3.1\"",
                            "content": "string public constant version = \"1.3.1\";"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor () StandardBridge(StandardBridge(payable(Predeploys.L2_STANDARD_BRIDGE))){ initialize({ _messenger: CrossDomainMessenger(address(0))} );}",
                                "modifiers": [
                                    "StandardBridge(StandardBridge(payable(Predeploys.L2_STANDARD_BRIDGE)))"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "d8bcbb679a85ab35ce617f454e0e7664"
                            }
                        ],
                        "initialize": [
                            {
                                "visibility": "public",
                                "content": "function initialize(CrossDomainMessenger _messenger) public clearLegacySlot reinitializer(2){ __StandardBridge_init({ _messenger: _messenger} );}",
                                "modifiers": [
                                    "clearLegacySlot",
                                    "reinitializer(2)"
                                ],
                                "parameters": [
                                    {
                                        "type": "CrossDomainMessenger",
                                        "name": "_messenger"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "db22dedd73c63fe64d390f2e8b1bec3c"
                            }
                        ],
                        "depositETH": [
                            {
                                "visibility": "external",
                                "content": "function depositETH(uint32 _minGasLimit, bytes calldata _extraData) external payable onlyEOA{ _initiateETHDeposit(msg.sender, msg.sender, _minGasLimit, _extraData);}",
                                "modifiers": [
                                    "payable",
                                    "onlyEOA"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint32",
                                        "name": "_minGasLimit"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "_extraData"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": true,
                                "md5": "d9385213dfdcdeb29bded0d7807f6343"
                            }
                        ],
                        "depositETHTo": [
                            {
                                "visibility": "external",
                                "content": "function depositETHTo(address _to, uint32 _minGasLimit, bytes calldata _extraData) external payable{ _initiateETHDeposit(msg.sender, _to, _minGasLimit, _extraData);}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_to"
                                    },
                                    {
                                        "type": "uint32",
                                        "name": "_minGasLimit"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "_extraData"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": true,
                                "md5": "fd1cc83b78a83835310899db02c0b141"
                            }
                        ],
                        "depositERC20": [
                            {
                                "visibility": "external",
                                "content": "function depositERC20( address _l1Token, address _l2Token, uint256 _amount, uint32 _minGasLimit, bytes calldata _extraData ) external virtual onlyEOA{ _initiateERC20Deposit(_l1Token, _l2Token, msg.sender, msg.sender, _amount, _minGasLimit, _extraData);}",
                                "modifiers": [
                                    "virtual",
                                    "onlyEOA"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_l1Token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_l2Token"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_amount"
                                    },
                                    {
                                        "type": "uint32",
                                        "name": "_minGasLimit"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "_extraData"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "214085ffd7f32c4c50e93b0dfd5a46e7"
                            }
                        ],
                        "depositERC20To": [
                            {
                                "visibility": "external",
                                "content": "function depositERC20To( address _l1Token, address _l2Token, address _to, uint256 _amount, uint32 _minGasLimit, bytes calldata _extraData ) external virtual{ _initiateERC20Deposit(_l1Token, _l2Token, msg.sender, _to, _amount, _minGasLimit, _extraData);}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_l1Token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_l2Token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_amount"
                                    },
                                    {
                                        "type": "uint32",
                                        "name": "_minGasLimit"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "_extraData"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "64c8352ef4ceee06e7bb03ee59c9558c"
                            }
                        ],
                        "finalizeETHWithdrawal": [
                            {
                                "visibility": "external",
                                "content": "function finalizeETHWithdrawal( address _from, address _to, uint256 _amount, bytes calldata _extraData ) external payable{ finalizeBridgeETH(_from, _to, _amount, _extraData);}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_amount"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "_extraData"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": true,
                                "md5": "9acfaa2fa000696c83d8e8bfe7ae60e6"
                            }
                        ],
                        "finalizeERC20Withdrawal": [
                            {
                                "visibility": "external",
                                "content": "function finalizeERC20Withdrawal( address _l1Token, address _l2Token, address _from, address _to, uint256 _amount, bytes calldata _extraData ) external{ finalizeBridgeERC20(_l1Token, _l2Token, _from, _to, _amount, _extraData);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_l1Token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_l2Token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_amount"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "_extraData"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "5926e23910c44da86ee227cec867d9ba"
                            }
                        ],
                        "l2TokenBridge": [
                            {
                                "visibility": "external",
                                "content": "function l2TokenBridge() external view returns (address){ return address(OTHER_BRIDGE);}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "OTHER_BRIDGE",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\HyperBridge20231214\\StandardBridge.sol",
                                        "StandardBridge"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "48b8e2f126599af4ab264a929351529e"
                            }
                        ],
                        "_initiateETHDeposit": [
                            {
                                "visibility": "internal",
                                "content": "function _initiateETHDeposit(address _from, address _to, uint32 _minGasLimit, bytes memory _extraData) internal{ _initiateBridgeETH(_from, _to, msg.value, _minGasLimit, _extraData);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_to"
                                    },
                                    {
                                        "type": "uint32",
                                        "name": "_minGasLimit"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "_extraData"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "73050cbf491db83b199e3a5600557198"
                            }
                        ],
                        "_initiateERC20Deposit": [
                            {
                                "visibility": "internal",
                                "content": "function _initiateERC20Deposit( address _l1Token, address _l2Token, address _from, address _to, uint256 _amount, uint32 _minGasLimit, bytes memory _extraData ) internal{ _initiateBridgeERC20(_l1Token, _l2Token, _from, _to, _amount, _minGasLimit, _extraData);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_l1Token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_l2Token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_amount"
                                    },
                                    {
                                        "type": "uint32",
                                        "name": "_minGasLimit"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "_extraData"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "6680086fc9c61af3f5c48eb15b9dd419"
                            }
                        ],
                        "_emitETHBridgeInitiated": [
                            {
                                "visibility": "internal",
                                "content": "function _emitETHBridgeInitiated( address _from, address _to, uint256 _amount, bytes memory _extraData ) internal override{ emit ETHDepositInitiated(_from, _to, _amount, _extraData); super._emitETHBridgeInitiated(_from, _to, _amount, _extraData);}",
                                "modifiers": [
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_amount"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "_extraData"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "bc220d2029ce90fc6b48303725461fa0"
                            }
                        ],
                        "_emitETHBridgeFinalized": [
                            {
                                "visibility": "internal",
                                "content": "function _emitETHBridgeFinalized( address _from, address _to, uint256 _amount, bytes memory _extraData ) internal override{ emit ETHWithdrawalFinalized(_from, _to, _amount, _extraData); super._emitETHBridgeFinalized(_from, _to, _amount, _extraData);}",
                                "modifiers": [
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_amount"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "_extraData"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "981047834028083ea3985538d9076a44"
                            }
                        ],
                        "_emitERC20BridgeInitiated": [
                            {
                                "visibility": "internal",
                                "content": "function _emitERC20BridgeInitiated( address _localToken, address _remoteToken, address _from, address _to, uint256 _amount, bytes memory _extraData ) internal override{ emit ERC20DepositInitiated(_localToken, _remoteToken, _from, _to, _amount, _extraData); super._emitERC20BridgeInitiated(_localToken, _remoteToken, _from, _to, _amount, _extraData);}",
                                "modifiers": [
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_localToken"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_remoteToken"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_amount"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "_extraData"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "be021444576ed2abf06b6105b92f4ae7"
                            }
                        ],
                        "_emitERC20BridgeFinalized": [
                            {
                                "visibility": "internal",
                                "content": "function _emitERC20BridgeFinalized( address _localToken, address _remoteToken, address _from, address _to, uint256 _amount, bytes memory _extraData ) internal override{ emit ERC20WithdrawalFinalized(_localToken, _remoteToken, _from, _to, _amount, _extraData); super._emitERC20BridgeFinalized(_localToken, _remoteToken, _from, _to, _amount, _extraData);}",
                                "modifiers": [
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_localToken"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_remoteToken"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_amount"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "_extraData"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "ae7234af4f9a7c4c02157dd392155b96"
                            }
                        ]
                    },
                    "modifiers": {
                        "clearLegacySlot": {
                            "parameters": [],
                            "content": "modifier clearLegacySlot(){ assembly{ sstore(0, 0)} _;}",
                            "reads": [],
                            "writes": [],
                            "external_calls": [],
                            "md5": "9b36bdd0e0c4f052f34860e766278b0c"
                        }
                    },
                    "structs": {},
                    "events": {
                        "ETHDepositInitiated": {
                            "event": "ETHDepositInitiated",
                            "content": "ETHDepositInitiated(address indexed from, address indexed to, uint256 amount, bytes extraData)"
                        },
                        "ETHWithdrawalFinalized": {
                            "event": "ETHWithdrawalFinalized",
                            "content": "ETHWithdrawalFinalized(address indexed from, address indexed to, uint256 amount, bytes extraData)"
                        },
                        "ERC20DepositInitiated": {
                            "event": "ERC20DepositInitiated",
                            "content": "ERC20DepositInitiated( address indexed l1Token, address indexed l2Token, address indexed from, address to, uint256 amount, bytes extraData )"
                        },
                        "ERC20WithdrawalFinalized": {
                            "event": "ERC20WithdrawalFinalized",
                            "content": "ERC20WithdrawalFinalized( address indexed l1Token, address indexed l2Token, address indexed from, address to, uint256 amount, bytes extraData )"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "14bba67fe6dc1650e33353a236b0b9ea"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\HyperBridge20231214\\0x51ce3d9cfc85c1f6a532b908bb2debb16c7569eb8b76effe614016aac6635f65\\L1ChugSplashProxy.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\HyperBridge20231214\\0x51ce3d9cfc85c1f6a532b908bb2debb16c7569eb8b76effe614016aac6635f65\\L1ChugSplashProxy.sol",
            "filename": "L1ChugSplashProxy.sol",
            "imported_contracts": {},
            "contracts": {
                "IL1ChugSplashDeployer": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "isUpgrading": [
                            {
                                "visibility": "external",
                                "content": "function isUpgrading() external view returns (bool);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "d573042c9b428e7d9bc3dd7546f36f8d"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                },
                "L1ChugSplashProxy": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {
                        "DEPLOY_CODE_PREFIX": {
                            "type": "bytes13",
                            "visibility": "internal",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "0x600D380380600D6000396000f3",
                            "content": "bytes13 internal constant DEPLOY_CODE_PREFIX = 0x600D380380600D6000396000f3;"
                        },
                        "IMPLEMENTATION_KEY": {
                            "type": "bytes32",
                            "visibility": "internal",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc",
                            "content": "bytes32 internal constant IMPLEMENTATION_KEY = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;"
                        },
                        "OWNER_KEY": {
                            "type": "bytes32",
                            "visibility": "internal",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103",
                            "content": "bytes32 internal constant OWNER_KEY = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (address _owner){ _setOwner(_owner);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_owner"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "d0488310854455fab862ca78db0251e5"
                            }
                        ],
                        "setCode": [
                            {
                                "visibility": "external",
                                "content": "function setCode(bytes memory _code) external proxyCallIfNotOwner{ address implementation = _getImplementation(); if (keccak256(_code) == _getAccountCodeHash(implementation)){ return;} bytes memory deploycode = abi.encodePacked(DEPLOY_CODE_PREFIX, _code); address newImplementation; assembly{ newImplementation := create(0x0, add(deploycode, 0x20), mload(deploycode))} require( _getAccountCodeHash(newImplementation) == keccak256(_code), \"L1ChugSplashProxy: code was not correctly deployed\" ); _setImplementation(newImplementation);}",
                                "modifiers": [
                                    "proxyCallIfNotOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "_code"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "DEPLOY_CODE_PREFIX",
                                        "",
                                        "L1ChugSplashProxy"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "L1ChugSplashProxy._getAccountCodeHash",
                                        "L1ChugSplashProxy._getImplementation",
                                        "L1ChugSplashProxy._setImplementation",
                                        "L1ChugSplashProxy.proxyCallIfNotOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "d721377de0dd40348e180f4e6f16b8ab"
                            }
                        ],
                        "setStorage": [
                            {
                                "visibility": "external",
                                "content": "function setStorage(bytes32 _key, bytes32 _value) external proxyCallIfNotOwner{ assembly{ sstore(_key, _value)}}",
                                "modifiers": [
                                    "proxyCallIfNotOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "_key"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "_value"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "L1ChugSplashProxy.proxyCallIfNotOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "ebe336e3af674421c3ea342cf713f6cf"
                            }
                        ],
                        "setOwner": [
                            {
                                "visibility": "external",
                                "content": "function setOwner(address _owner) external proxyCallIfNotOwner{ _setOwner(_owner);}",
                                "modifiers": [
                                    "proxyCallIfNotOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_owner"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "L1ChugSplashProxy._setOwner",
                                        "L1ChugSplashProxy.proxyCallIfNotOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "1d7c013939c76b3c6f6ce73bc0cb5d39"
                            }
                        ],
                        "getOwner": [
                            {
                                "visibility": "external",
                                "content": "function getOwner() external proxyCallIfNotOwner returns (address){ return _getOwner();}",
                                "modifiers": [
                                    "proxyCallIfNotOwner"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "L1ChugSplashProxy._getOwner",
                                        "L1ChugSplashProxy.proxyCallIfNotOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "9d99484fd29bbb1ecd1f67250c443c3a"
                            }
                        ],
                        "getImplementation": [
                            {
                                "visibility": "external",
                                "content": "function getImplementation() external proxyCallIfNotOwner returns (address){ return _getImplementation();}",
                                "modifiers": [
                                    "proxyCallIfNotOwner"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "L1ChugSplashProxy._getImplementation",
                                        "L1ChugSplashProxy.proxyCallIfNotOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "d4f3ae83df9a579039817124f1c49969"
                            }
                        ],
                        "_setImplementation": [
                            {
                                "visibility": "internal",
                                "content": "function _setImplementation(address _implementation) internal{ assembly{ sstore(IMPLEMENTATION_KEY, _implementation)}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_implementation"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "IMPLEMENTATION_KEY",
                                        "",
                                        "L1ChugSplashProxy"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "fca90474a456fc25294cdecbc120fde5"
                            }
                        ],
                        "_setOwner": [
                            {
                                "visibility": "internal",
                                "content": "function _setOwner(address _owner) internal{ assembly{ sstore(OWNER_KEY, _owner)}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_owner"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "OWNER_KEY",
                                        "",
                                        "L1ChugSplashProxy"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "328ae283f2f398690ae0e222a8a30f81"
                            }
                        ],
                        "_doProxyCall": [
                            {
                                "visibility": "internal",
                                "content": "function _doProxyCall() internal onlyWhenNotPaused{ address implementation = _getImplementation(); require(implementation != address(0), \"L1ChugSplashProxy: implementation is not set yet\"); assembly{ calldatacopy(0x0, 0x0, calldatasize()) let success := delegatecall(gas(), implementation, 0x0, calldatasize(), 0x0, 0x0) returndatacopy(0x0, 0x0, returndatasize()) if iszero(success){ revert(0x0, returndatasize())} return(0x0, returndatasize())}}",
                                "modifiers": [
                                    "onlyWhenNotPaused"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "L1ChugSplashProxy._getImplementation",
                                        "L1ChugSplashProxy.onlyWhenNotPaused"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "bd6484b8e4e1d59717ae07e0237e1471"
                            }
                        ],
                        "_getImplementation": [
                            {
                                "visibility": "internal",
                                "content": "function _getImplementation() internal view returns (address){ address implementation; assembly{ implementation := sload(IMPLEMENTATION_KEY)} return implementation;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "IMPLEMENTATION_KEY",
                                        "",
                                        "L1ChugSplashProxy"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "db2cc8e294390f9ecc86ef71ecc3dc16"
                            }
                        ],
                        "_getOwner": [
                            {
                                "visibility": "internal",
                                "content": "function _getOwner() internal view returns (address){ address owner; assembly{ owner := sload(OWNER_KEY)} return owner;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "OWNER_KEY",
                                        "",
                                        "L1ChugSplashProxy"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "55d36de14338df887555ca581da5319f"
                            }
                        ],
                        "_getAccountCodeHash": [
                            {
                                "visibility": "internal",
                                "content": "function _getAccountCodeHash(address _account) internal view returns (bytes32){ bytes32 codeHash; assembly{ codeHash := extcodehash(_account)} return codeHash;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_account"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "615b7a70a16f65380f76548947d28c7f"
                            }
                        ]
                    },
                    "modifiers": {
                        "onlyWhenNotPaused": {
                            "parameters": [],
                            "content": "modifier onlyWhenNotPaused(){ address owner = _getOwner(); (bool success, bytes memory returndata) = owner.staticcall( abi.encodeWithSelector(IL1ChugSplashDeployer.isUpgrading.selector) ); if (success && returndata.length == 32){ uint256 ret = abi.decode(returndata, (uint256)); require(ret == 0, \"L1ChugSplashProxy: system is currently being upgraded\");} _;}",
                            "reads": [],
                            "writes": [],
                            "external_calls": {
                                "__set__": true,
                                "values": [
                                    "L1ChugSplashProxy._getOwner",
                                    "owner.staticcall"
                                ]
                            },
                            "md5": "8ebdc64512cb4d077737e6a6e48371b8"
                        },
                        "proxyCallIfNotOwner": {
                            "parameters": [],
                            "content": "modifier proxyCallIfNotOwner(){ if (msg.sender == _getOwner() || msg.sender == address(0)){ _;} else{ _doProxyCall();}}",
                            "reads": [],
                            "writes": [],
                            "external_calls": {
                                "__set__": true,
                                "values": [
                                    "L1ChugSplashProxy._getOwner",
                                    "L1ChugSplashProxy._doProxyCall"
                                ]
                            },
                            "md5": "8bb3c2c676c75cee39c0cc15979ddd2e"
                        }
                    },
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "L1ChugSplashProxy._getOwner": "55d36de14338df887555ca581da5319f",
                "L1ChugSplashProxy._doProxyCall": "bd6484b8e4e1d59717ae07e0237e1471",
                "L1ChugSplashProxy._setImplementation": "fca90474a456fc25294cdecbc120fde5",
                "L1ChugSplashProxy._getAccountCodeHash": "615b7a70a16f65380f76548947d28c7f",
                "L1ChugSplashProxy._getImplementation": "db2cc8e294390f9ecc86ef71ecc3dc16",
                "L1ChugSplashProxy.proxyCallIfNotOwner": "8bb3c2c676c75cee39c0cc15979ddd2e",
                "L1ChugSplashProxy._setOwner": "328ae283f2f398690ae0e222a8a30f81",
                "L1ChugSplashProxy.onlyWhenNotPaused": "8ebdc64512cb4d077737e6a6e48371b8"
            },
            "md5": "5484077ab177fa2f227ba02d86913089"
        },
        "/home/blockadmin/Malicious_transaction_detection/cross-chain-detect/IntelliBridge-Auditor/rag/dataset/HyperBridge20231214/L1StandardBridge.sol": {
            "filepath": "/home/blockadmin/Malicious_transaction_detection/cross-chain-detect/IntelliBridge-Auditor/rag/dataset/HyperBridge20231214/L1StandardBridge.sol",
            "filename": "L1StandardBridge.sol",
            "imported_contracts": {
                "/home/blockadmin/Malicious_transaction_detection/cross-chain-detect/IntelliBridge-Auditor/rag/dataset/HyperBridge20231214/src/libraries/Predeploys.sol": {
                    "in_database": false,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "Predeploys": {
                            "original_name": "Predeploys",
                            "type": {
                                "__CT__": true,
                                "value": 0
                            }
                        }
                    }
                },
                "/home/blockadmin/Malicious_transaction_detection/cross-chain-detect/IntelliBridge-Auditor/rag/dataset/HyperBridge20231214/src/universal/StandardBridge.sol": {
                    "in_database": false,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "StandardBridge": {
                            "original_name": "StandardBridge",
                            "type": {
                                "__CT__": true,
                                "value": 0
                            }
                        }
                    }
                },
                "/home/blockadmin/Malicious_transaction_detection/cross-chain-detect/IntelliBridge-Auditor/rag/dataset/HyperBridge20231214/src/universal/ISemver.sol": {
                    "in_database": false,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "ISemver": {
                            "original_name": "ISemver",
                            "type": {
                                "__CT__": true,
                                "value": 0
                            }
                        }
                    }
                },
                "/home/blockadmin/Malicious_transaction_detection/cross-chain-detect/IntelliBridge-Auditor/rag/dataset/HyperBridge20231214/src/universal/CrossDomainMessenger.sol": {
                    "in_database": false,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "CrossDomainMessenger": {
                            "original_name": "CrossDomainMessenger",
                            "type": {
                                "__CT__": true,
                                "value": 0
                            }
                        }
                    }
                }
            },
            "contracts": {
                "L1StandardBridge": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "StandardBridge",
                        "ISemver"
                    ],
                    "state_variables": {
                        "version": {
                            "type": "string",
                            "visibility": "public",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "\"1.3.1\"",
                            "content": "string public constant version = \"1.3.1\";"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor () StandardBridge(StandardBridge(payable(Predeploys.L2_STANDARD_BRIDGE))){ initialize({ _messenger: CrossDomainMessenger(address(0))} );}",
                                "modifiers": [
                                    "StandardBridge(StandardBridge(payable(Predeploys.L2_STANDARD_BRIDGE)))"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "d8bcbb679a85ab35ce617f454e0e7664"
                            }
                        ],
                        "initialize": [
                            {
                                "visibility": "public",
                                "content": "function initialize(CrossDomainMessenger _messenger) public clearLegacySlot{ require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\"); _initialized = version; _initializing = true; __StandardBridge_init({ _messenger: _messenger} ); _initializing = false; emit Initialized(version);}",
                                "modifiers": [
                                    "clearLegacySlot"
                                ],
                                "parameters": [
                                    {
                                        "type": "CrossDomainMessenger",
                                        "name": "_messenger"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "version",
                                        "",
                                        "L1StandardBridge"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c1456c0b49eca02f4536e8542e3b6faa"
                            }
                        ],
                        "depositETH": [
                            {
                                "visibility": "external",
                                "content": "function depositETH(uint32 _minGasLimit, bytes calldata _extraData) external payable onlyEOA{ _initiateETHDeposit(msg.sender, msg.sender, _minGasLimit, _extraData);}",
                                "modifiers": [
                                    "payable",
                                    "onlyEOA"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint32",
                                        "name": "_minGasLimit"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "_extraData"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": true,
                                "md5": "d9385213dfdcdeb29bded0d7807f6343"
                            }
                        ],
                        "depositETHTo": [
                            {
                                "visibility": "external",
                                "content": "function depositETHTo(address _to, uint32 _minGasLimit, bytes calldata _extraData) external payable{ _initiateETHDeposit(msg.sender, _to, _minGasLimit, _extraData);}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_to"
                                    },
                                    {
                                        "type": "uint32",
                                        "name": "_minGasLimit"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "_extraData"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": true,
                                "md5": "fd1cc83b78a83835310899db02c0b141"
                            }
                        ],
                        "depositERC20": [
                            {
                                "visibility": "external",
                                "content": "function depositERC20( address _l1Token, address _l2Token, uint256 _amount, uint32 _minGasLimit, bytes calldata _extraData ) external virtual onlyEOA{ _initiateERC20Deposit(_l1Token, _l2Token, msg.sender, msg.sender, _amount, _minGasLimit, _extraData);}",
                                "modifiers": [
                                    "virtual",
                                    "onlyEOA"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_l1Token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_l2Token"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_amount"
                                    },
                                    {
                                        "type": "uint32",
                                        "name": "_minGasLimit"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "_extraData"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "214085ffd7f32c4c50e93b0dfd5a46e7"
                            }
                        ],
                        "depositERC20To": [
                            {
                                "visibility": "external",
                                "content": "function depositERC20To( address _l1Token, address _l2Token, address _to, uint256 _amount, uint32 _minGasLimit, bytes calldata _extraData ) external virtual{ _initiateERC20Deposit(_l1Token, _l2Token, msg.sender, _to, _amount, _minGasLimit, _extraData);}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_l1Token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_l2Token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_amount"
                                    },
                                    {
                                        "type": "uint32",
                                        "name": "_minGasLimit"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "_extraData"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "64c8352ef4ceee06e7bb03ee59c9558c"
                            }
                        ],
                        "finalizeETHWithdrawal": [
                            {
                                "visibility": "external",
                                "content": "function finalizeETHWithdrawal( address _from, address _to, uint256 _amount, bytes calldata _extraData ) external payable{ finalizeBridgeETH(_from, _to, _amount, _extraData);}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_amount"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "_extraData"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": true,
                                "md5": "9acfaa2fa000696c83d8e8bfe7ae60e6"
                            }
                        ],
                        "finalizeERC20Withdrawal": [
                            {
                                "visibility": "external",
                                "content": "function finalizeERC20Withdrawal( address _l1Token, address _l2Token, address _from, address _to, uint256 _amount, bytes calldata _extraData ) external{ finalizeBridgeERC20(_l1Token, _l2Token, _from, _to, _amount, _extraData);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_l1Token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_l2Token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_amount"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "_extraData"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "5926e23910c44da86ee227cec867d9ba"
                            }
                        ],
                        "l2TokenBridge": [
                            {
                                "visibility": "external",
                                "content": "function l2TokenBridge() external view returns (address){ return address(OTHER_BRIDGE);}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "48b8e2f126599af4ab264a929351529e"
                            }
                        ],
                        "_initiateETHDeposit": [
                            {
                                "visibility": "internal",
                                "content": "function _initiateETHDeposit(address _from, address _to, uint32 _minGasLimit, bytes memory _extraData) internal{ _initiateBridgeETH(_from, _to, msg.value, _minGasLimit, _extraData);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_to"
                                    },
                                    {
                                        "type": "uint32",
                                        "name": "_minGasLimit"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "_extraData"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "73050cbf491db83b199e3a5600557198"
                            }
                        ],
                        "_initiateERC20Deposit": [
                            {
                                "visibility": "internal",
                                "content": "function _initiateERC20Deposit( address _l1Token, address _l2Token, address _from, address _to, uint256 _amount, uint32 _minGasLimit, bytes memory _extraData ) internal{ _initiateBridgeERC20(_l1Token, _l2Token, _from, _to, _amount, _minGasLimit, _extraData);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_l1Token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_l2Token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_amount"
                                    },
                                    {
                                        "type": "uint32",
                                        "name": "_minGasLimit"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "_extraData"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "6680086fc9c61af3f5c48eb15b9dd419"
                            }
                        ],
                        "_emitETHBridgeInitiated": [
                            {
                                "visibility": "internal",
                                "content": "function _emitETHBridgeInitiated( address _from, address _to, uint256 _amount, bytes memory _extraData ) internal override{ emit ETHDepositInitiated(_from, _to, _amount, _extraData); super._emitETHBridgeInitiated(_from, _to, _amount, _extraData);}",
                                "modifiers": [
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_amount"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "_extraData"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "bc220d2029ce90fc6b48303725461fa0"
                            }
                        ],
                        "_emitETHBridgeFinalized": [
                            {
                                "visibility": "internal",
                                "content": "function _emitETHBridgeFinalized( address _from, address _to, uint256 _amount, bytes memory _extraData ) internal override{ emit ETHWithdrawalFinalized(_from, _to, _amount, _extraData); super._emitETHBridgeFinalized(_from, _to, _amount, _extraData);}",
                                "modifiers": [
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_amount"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "_extraData"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "981047834028083ea3985538d9076a44"
                            }
                        ],
                        "_emitERC20BridgeInitiated": [
                            {
                                "visibility": "internal",
                                "content": "function _emitERC20BridgeInitiated( address _localToken, address _remoteToken, address _from, address _to, uint256 _amount, bytes memory _extraData ) internal override{ emit ERC20DepositInitiated(_localToken, _remoteToken, _from, _to, _amount, _extraData); super._emitERC20BridgeInitiated(_localToken, _remoteToken, _from, _to, _amount, _extraData);}",
                                "modifiers": [
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_localToken"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_remoteToken"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_amount"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "_extraData"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "be021444576ed2abf06b6105b92f4ae7"
                            }
                        ],
                        "_emitERC20BridgeFinalized": [
                            {
                                "visibility": "internal",
                                "content": "function _emitERC20BridgeFinalized( address _localToken, address _remoteToken, address _from, address _to, uint256 _amount, bytes memory _extraData ) internal override{ emit ERC20WithdrawalFinalized(_localToken, _remoteToken, _from, _to, _amount, _extraData); super._emitERC20BridgeFinalized(_localToken, _remoteToken, _from, _to, _amount, _extraData);}",
                                "modifiers": [
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_localToken"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_remoteToken"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_amount"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "_extraData"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "ae7234af4f9a7c4c02157dd392155b96"
                            }
                        ]
                    },
                    "modifiers": {
                        "clearLegacySlot": {
                            "parameters": [],
                            "content": "modifier clearLegacySlot(){ assembly{ sstore(0, 0)} _;}",
                            "reads": [],
                            "writes": [],
                            "external_calls": [],
                            "md5": "9b36bdd0e0c4f052f34860e766278b0c"
                        }
                    },
                    "structs": {},
                    "events": {
                        "ETHDepositInitiated": {
                            "event": "ETHDepositInitiated",
                            "content": "ETHDepositInitiated(address indexed from, address indexed to, uint256 amount, bytes extraData)"
                        },
                        "ETHWithdrawalFinalized": {
                            "event": "ETHWithdrawalFinalized",
                            "content": "ETHWithdrawalFinalized(address indexed from, address indexed to, uint256 amount, bytes extraData)"
                        },
                        "ERC20DepositInitiated": {
                            "event": "ERC20DepositInitiated",
                            "content": "ERC20DepositInitiated( address indexed l1Token, address indexed l2Token, address indexed from, address to, uint256 amount, bytes extraData )"
                        },
                        "ERC20WithdrawalFinalized": {
                            "event": "ERC20WithdrawalFinalized",
                            "content": "ERC20WithdrawalFinalized( address indexed l1Token, address indexed l2Token, address indexed from, address to, uint256 amount, bytes extraData )"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "5506cec554d89cca42663e0f2e7a7528"
        }
    },
    "handled_md5": {
        "__set__": true,
        "values": [
            "d740ea4980f1079025279ecc0c09de90",
            "d7a38c42c504f316833031774d3d0eb1",
            "5484077ab177fa2f227ba02d86913089",
            "5506cec554d89cca42663e0f2e7a7528",
            "14bba67fe6dc1650e33353a236b0b9ea"
        ]
    }
}