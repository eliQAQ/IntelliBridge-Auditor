{
    "solidity_file": {
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Ronin20240806\\MainchainGatewayV3.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Ronin20240806\\MainchainGatewayV3.sol",
            "filename": "MainchainGatewayV3.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Ronin20240806\\openzeppelin\\contracts\\access\\AccessControlEnumerable.sol": {
                    "in_database": false,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Ronin20240806\\openzeppelin\\contracts\\proxy\\utils\\Initializable.sol": {
                    "in_database": false,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Ronin20240806\\openzeppelin\\contracts\\token\\ERC1155\\utils\\ERC1155Holder.sol": {
                    "in_database": false,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\interfaces\\bridge\\IBridgeManager.sol": {
                    "in_database": false,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "IBridgeManager": {
                            "original_name": "IBridgeManager",
                            "type": {
                                "__CT__": true,
                                "value": 0
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\interfaces\\bridge\\IBridgeManagerCallback.sol": {
                    "in_database": false,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "IBridgeManagerCallback": {
                            "original_name": "IBridgeManagerCallback",
                            "type": {
                                "__CT__": true,
                                "value": 0
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\extensions\\collections\\HasContracts.sol": {
                    "in_database": false,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "HasContracts": {
                            "original_name": "HasContracts",
                            "type": {
                                "__CT__": true,
                                "value": 0
                            }
                        },
                        "ContractType": {
                            "original_name": "ContractType",
                            "type": {
                                "__CT__": true,
                                "value": 0
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\extensions\\WethUnwrapper.sol": {
                    "in_database": false,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\extensions\\WithdrawalLimitation.sol": {
                    "in_database": false,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\libraries\\Transfer.sol": {
                    "in_database": false,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\interfaces\\IMainchainGatewayV3.sol": {
                    "in_database": false,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "MainchainGatewayV3": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "WithdrawalLimitation",
                        "Initializable",
                        "AccessControlEnumerable",
                        "ERC1155Holder",
                        "IMainchainGatewayV3",
                        "HasContracts",
                        "IBridgeManagerCallback"
                    ],
                    "state_variables": {
                        "WITHDRAWAL_UNLOCKER_ROLE": {
                            "type": "bytes32",
                            "visibility": "public",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "keccak256(\"WITHDRAWAL_UNLOCKER_ROLE\")",
                            "content": "bytes32 public constant WITHDRAWAL_UNLOCKER_ROLE = keccak256(\"WITHDRAWAL_UNLOCKER_ROLE\");"
                        },
                        "wrappedNativeToken": {
                            "type": "IWETH",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "IWETH public wrappedNativeToken;"
                        },
                        "roninChainId": {
                            "type": "uint256",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256 public roninChainId;"
                        },
                        "depositCount": {
                            "type": "uint256",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256 public depositCount;"
                        },
                        "_domainSeparator": {
                            "type": "bytes32",
                            "visibility": "internal",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "bytes32 internal _domainSeparator;"
                        },
                        "_roninToken": {
                            "type": "mapping(address => MappedToken)",
                            "visibility": "internal",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(address => MappedToken) internal _roninToken;"
                        },
                        "withdrawalHash": {
                            "type": "mapping(uint256 => bytes32)",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(uint256 => bytes32) public withdrawalHash;"
                        },
                        "withdrawalLocked": {
                            "type": "mapping(uint256 => bool)",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(uint256 => bool) public withdrawalLocked;"
                        },
                        "______deprecatedBridgeOperatorAddedBlock": {
                            "type": "uint256",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256 private ______deprecatedBridgeOperatorAddedBlock;"
                        },
                        "______deprecatedBridgeOperators": {
                            "type": "uint256",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256 private ______deprecatedBridgeOperators;"
                        },
                        "_totalOperatorWeight": {
                            "type": "uint96",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint96 private _totalOperatorWeight;"
                        },
                        "_operatorWeight": {
                            "type": "mapping(address operator => uint96 weight)",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(address operator => uint96 weight) private _operatorWeight;"
                        },
                        "wethUnwrapper": {
                            "type": "WethUnwrapper",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "WethUnwrapper public wethUnwrapper;"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (){ _disableInitializers();}",
                                "modifiers": [],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c0967d89dee44d465f71939609a4c0fc"
                            }
                        ],
                        "initialize": [
                            {
                                "visibility": "external",
                                "content": "function initialize( address _roleSetter, IWETH _wrappedToken, uint256 _roninChainId, uint256 _numerator, uint256 _highTierVWNumerator, uint256 _denominator, address[][3] calldata _addresses, uint256[][4] calldata _thresholds, TokenStandard[] calldata _standards ) external payable virtual initializer{ _setupRole(DEFAULT_ADMIN_ROLE, _roleSetter); roninChainId = _roninChainId; _setWrappedNativeTokenContract(_wrappedToken); _updateDomainSeparator(); _setThreshold(_numerator, _denominator); _setHighTierVoteWeightThreshold(_highTierVWNumerator, _denominator); _verifyThresholds(); if (_addresses[0].length > 0){ _mapTokens(_addresses[0], _addresses[1], _standards); _setHighTierThresholds(_addresses[0], _thresholds[0]); _setLockedThresholds(_addresses[0], _thresholds[1]); _setUnlockFeePercentages(_addresses[0], _thresholds[2]); _setDailyWithdrawalLimits(_addresses[0], _thresholds[3]);} for (uint256 i; i < _addresses[2].length; i++){ _grantRole(WITHDRAWAL_UNLOCKER_ROLE, _addresses[2][i]);}}",
                                "modifiers": [
                                    "payable",
                                    "virtual",
                                    "initializer"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_roleSetter"
                                    },
                                    {
                                        "type": "IWETH",
                                        "name": "_wrappedToken"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_roninChainId"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_numerator"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_highTierVWNumerator"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_denominator"
                                    },
                                    {
                                        "type": "address[][3] calldata",
                                        "name": "_addresses"
                                    },
                                    {
                                        "type": "uint256[][4] calldata",
                                        "name": "_thresholds"
                                    },
                                    {
                                        "type": "TokenStandard[] calldata",
                                        "name": "_standards"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "WITHDRAWAL_UNLOCKER_ROLE",
                                        "",
                                        "MainchainGatewayV3"
                                    ],
                                    [
                                        "roninChainId",
                                        "",
                                        "MainchainGatewayV3"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "roninChainId",
                                        "",
                                        "MainchainGatewayV3"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": true,
                                "md5": "8bc3fd2eb52515c05854cfa1a4aeb5f5"
                            }
                        ],
                        "initializeV2": [
                            {
                                "visibility": "external",
                                "content": "function initializeV2(address bridgeManagerContract) external reinitializer(2){ _setContract(ContractType.BRIDGE_MANAGER, bridgeManagerContract);}",
                                "modifiers": [
                                    "reinitializer(2)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "bridgeManagerContract"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c589b2d609b38add2964458823a9716e"
                            }
                        ],
                        "initializeV3": [
                            {
                                "visibility": "external",
                                "content": "function initializeV3() external reinitializer(3){ IBridgeManager mainchainBridgeManager = IBridgeManager(getContract(ContractType.BRIDGE_MANAGER)); (, address[] memory operators, uint96[] memory weights) = mainchainBridgeManager.getFullBridgeOperatorInfos(); uint96 totalWeight; for (uint i; i < operators.length; i++){ _operatorWeight[operators[i]] = weights[i]; totalWeight += weights[i];} _totalOperatorWeight = totalWeight;}",
                                "modifiers": [
                                    "reinitializer(3)"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [
                                    [
                                        "_totalOperatorWeight",
                                        "",
                                        "MainchainGatewayV3"
                                    ],
                                    [
                                        "_operatorWeight",
                                        "",
                                        "MainchainGatewayV3"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_totalOperatorWeight",
                                        "",
                                        "MainchainGatewayV3"
                                    ],
                                    [
                                        "_operatorWeight",
                                        "",
                                        "MainchainGatewayV3"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "735fc66f5a30d534b7a353800667abdf"
                            }
                        ],
                        "initializeV4": [
                            {
                                "visibility": "external",
                                "content": "function initializeV4(address payable wethUnwrapper_) external reinitializer(4){ wethUnwrapper = WethUnwrapper(wethUnwrapper_);}",
                                "modifiers": [
                                    "reinitializer(4)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address payable",
                                        "name": "wethUnwrapper_"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "wethUnwrapper",
                                        "",
                                        "MainchainGatewayV3"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "wethUnwrapper",
                                        "",
                                        "MainchainGatewayV3"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "bf905f01a67e8c32164d6aca2f3c34b2"
                            }
                        ],
                        "receiveEther": [
                            {
                                "visibility": "external",
                                "content": "function receiveEther() external payable{}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": true,
                                "md5": "e3e8a18e372e8131f18b264f3bbdbbd5"
                            }
                        ],
                        "DOMAIN_SEPARATOR": [
                            {
                                "visibility": "external",
                                "content": "function DOMAIN_SEPARATOR() external view virtual returns (bytes32){ return _domainSeparator;}",
                                "modifiers": [
                                    "view",
                                    "virtual"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_domainSeparator",
                                        "",
                                        "MainchainGatewayV3"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "59dedb0804977327b3fe8330f83170a8"
                            }
                        ],
                        "setWrappedNativeTokenContract": [
                            {
                                "visibility": "external",
                                "content": "function setWrappedNativeTokenContract(IWETH _wrappedToken) external virtual onlyProxyAdmin{ _setWrappedNativeTokenContract(_wrappedToken);}",
                                "modifiers": [
                                    "virtual",
                                    "onlyProxyAdmin"
                                ],
                                "parameters": [
                                    {
                                        "type": "IWETH",
                                        "name": "_wrappedToken"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c2bd8fee89c2958718abf040ebb2fc37"
                            }
                        ],
                        "requestDepositFor": [
                            {
                                "visibility": "external",
                                "content": "function requestDepositFor(Transfer.Request calldata _request) external payable virtual whenNotPaused{ _requestDepositFor(_request, msg.sender);}",
                                "modifiers": [
                                    "payable",
                                    "virtual",
                                    "whenNotPaused"
                                ],
                                "parameters": [
                                    {
                                        "type": "Transfer.Request calldata",
                                        "name": "_request"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": true,
                                "md5": "e4745c1d403023128d16ede79ac36a2a"
                            }
                        ],
                        "requestDepositForBatch": [
                            {
                                "visibility": "external",
                                "content": "function requestDepositForBatch(Transfer.Request[] calldata _requests) external payable virtual whenNotPaused{ uint length = _requests.length; for (uint256 i; i < length; ++i){ _requestDepositFor(_requests[i], msg.sender);}}",
                                "modifiers": [
                                    "payable",
                                    "virtual",
                                    "whenNotPaused"
                                ],
                                "parameters": [
                                    {
                                        "type": "Transfer.Request[] calldata",
                                        "name": "_requests"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": true,
                                "md5": "8fc6fd73c616845188fb22aaa776fac0"
                            }
                        ],
                        "submitWithdrawal": [
                            {
                                "visibility": "external",
                                "content": "function submitWithdrawal(Transfer.Receipt calldata _receipt, Signature[] calldata _signatures) external virtual whenNotPaused returns (bool _locked){ return _submitWithdrawal(_receipt, _signatures);}",
                                "modifiers": [
                                    "virtual",
                                    "whenNotPaused"
                                ],
                                "parameters": [
                                    {
                                        "type": "Transfer.Receipt calldata",
                                        "name": "_receipt"
                                    },
                                    {
                                        "type": "Signature[] calldata",
                                        "name": "_signatures"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": "_locked"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "d9569522015ec23d0bd0c4678cc5c611"
                            }
                        ],
                        "unlockWithdrawal": [
                            {
                                "visibility": "external",
                                "content": "function unlockWithdrawal(Transfer.Receipt calldata receipt) external onlyRole(WITHDRAWAL_UNLOCKER_ROLE){ bytes32 _receiptHash = receipt.hash(); if (withdrawalHash[receipt.id] != receipt.hash()){ revert ErrInvalidReceipt();} if (!withdrawalLocked[receipt.id]){ revert ErrQueryForApprovedWithdrawal();} delete withdrawalLocked[receipt.id]; emit WithdrawalUnlocked(_receiptHash, receipt); address token = receipt.mainchain.tokenAddr; if (receipt.info.erc == TokenStandard.ERC20){ TokenInfo memory feeInfo = receipt.info; feeInfo.quantity = _computeFeePercentage(receipt.info.quantity, unlockFeePercentages[token]); TokenInfo memory withdrawInfo = receipt.info; withdrawInfo.quantity = receipt.info.quantity - feeInfo.quantity; feeInfo.handleAssetOut(payable(msg.sender), token, wrappedNativeToken); withdrawInfo.handleAssetOut(payable(receipt.mainchain.addr), token, wrappedNativeToken);} else{ receipt.info.handleAssetOut(payable(receipt.mainchain.addr), token, wrappedNativeToken);} emit Withdrew(_receiptHash, receipt);}",
                                "modifiers": [
                                    "onlyRole(WITHDRAWAL_UNLOCKER_ROLE)"
                                ],
                                "parameters": [
                                    {
                                        "type": "Transfer.Receipt calldata",
                                        "name": "receipt"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "WITHDRAWAL_UNLOCKER_ROLE",
                                        "",
                                        "MainchainGatewayV3"
                                    ],
                                    [
                                        "wrappedNativeToken",
                                        "",
                                        "MainchainGatewayV3"
                                    ],
                                    [
                                        "withdrawalHash",
                                        "",
                                        "MainchainGatewayV3"
                                    ],
                                    [
                                        "withdrawalLocked",
                                        "",
                                        "MainchainGatewayV3"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "07587a90aa65931a336eb837a5750758"
                            }
                        ],
                        "mapTokens": [
                            {
                                "visibility": "external",
                                "content": "function mapTokens(address[] calldata _mainchainTokens, address[] calldata _roninTokens, TokenStandard[] calldata _standards) external virtual onlyProxyAdmin{ if (_mainchainTokens.length == 0) revert ErrEmptyArray(); _mapTokens(_mainchainTokens, _roninTokens, _standards);}",
                                "modifiers": [
                                    "virtual",
                                    "onlyProxyAdmin"
                                ],
                                "parameters": [
                                    {
                                        "type": "address[] calldata",
                                        "name": "_mainchainTokens"
                                    },
                                    {
                                        "type": "address[] calldata",
                                        "name": "_roninTokens"
                                    },
                                    {
                                        "type": "TokenStandard[] calldata",
                                        "name": "_standards"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "ca80ca4b3c569d43d42ab3fe62ba76e8"
                            }
                        ],
                        "mapTokensAndThresholds": [
                            {
                                "visibility": "external",
                                "content": "function mapTokensAndThresholds( address[] calldata _mainchainTokens, address[] calldata _roninTokens, TokenStandard[] calldata _standards, uint256[][4] calldata _thresholds ) external virtual onlyProxyAdmin{ if (_mainchainTokens.length == 0) revert ErrEmptyArray(); _mapTokens(_mainchainTokens, _roninTokens, _standards); _setHighTierThresholds(_mainchainTokens, _thresholds[0]); _setLockedThresholds(_mainchainTokens, _thresholds[1]); _setUnlockFeePercentages(_mainchainTokens, _thresholds[2]); _setDailyWithdrawalLimits(_mainchainTokens, _thresholds[3]);}",
                                "modifiers": [
                                    "virtual",
                                    "onlyProxyAdmin"
                                ],
                                "parameters": [
                                    {
                                        "type": "address[] calldata",
                                        "name": "_mainchainTokens"
                                    },
                                    {
                                        "type": "address[] calldata",
                                        "name": "_roninTokens"
                                    },
                                    {
                                        "type": "TokenStandard[] calldata",
                                        "name": "_standards"
                                    },
                                    {
                                        "type": "uint256[][4] calldata",
                                        "name": "_thresholds"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "ba1ea4897cf03c4b95280cd30550f611"
                            }
                        ],
                        "getRoninToken": [
                            {
                                "visibility": "public",
                                "content": "function getRoninToken(address mainchainToken) public view returns (MappedToken memory token){ token = _roninToken[mainchainToken]; if (token.tokenAddr == address(0)) revert ErrUnsupportedToken();}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "mainchainToken"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "MappedToken memory",
                                        "name": "token"
                                    }
                                ],
                                "reads": [
                                    [
                                        "_roninToken",
                                        "",
                                        "MainchainGatewayV3"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "6cf3f2984b3730e0a1c1d4a733b24868"
                            }
                        ],
                        "_mapTokens": [
                            {
                                "visibility": "internal",
                                "content": "function _mapTokens(address[] calldata mainchainTokens, address[] calldata roninTokens, TokenStandard[] calldata standards) internal virtual{ if (!(mainchainTokens.length == roninTokens.length && mainchainTokens.length == standards.length)) revert ErrLengthMismatch(msg.sig); for (uint256 i; i < mainchainTokens.length; ++i){ _roninToken[mainchainTokens[i]].tokenAddr = roninTokens[i]; _roninToken[mainchainTokens[i]].erc = standards[i];} emit TokenMapped(mainchainTokens, roninTokens, standards);}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "address[] calldata",
                                        "name": "mainchainTokens"
                                    },
                                    {
                                        "type": "address[] calldata",
                                        "name": "roninTokens"
                                    },
                                    {
                                        "type": "TokenStandard[] calldata",
                                        "name": "standards"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_roninToken",
                                        "",
                                        "MainchainGatewayV3"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "cfd529f9c60fb12b28b9c8ee92bbd123"
                            }
                        ],
                        "_submitWithdrawal": [
                            {
                                "visibility": "internal",
                                "content": "function _submitWithdrawal(Transfer.Receipt calldata receipt, Signature[] memory signatures) internal virtual returns (bool locked){ uint256 id = receipt.id; uint256 quantity = receipt.info.quantity; address tokenAddr = receipt.mainchain.tokenAddr; receipt.info.validate(); if (receipt.kind != Transfer.Kind.Withdrawal) revert ErrInvalidReceiptKind(); if (receipt.mainchain.chainId != block.chainid){ revert ErrInvalidChainId(msg.sig, receipt.mainchain.chainId, block.chainid);} MappedToken memory token = getRoninToken(receipt.mainchain.tokenAddr); if (!(token.erc == receipt.info.erc && token.tokenAddr == receipt.ronin.tokenAddr && receipt.ronin.chainId == roninChainId)){ revert ErrInvalidReceipt();} if (withdrawalHash[id] != 0) revert ErrQueryForProcessedWithdrawal(); if (!(receipt.info.erc == TokenStandard.ERC721 || !_reachedWithdrawalLimit(tokenAddr, quantity))){ revert ErrReachedDailyWithdrawalLimit();} bytes32 receiptHash = receipt.hash(); bytes32 receiptDigest = Transfer.receiptDigest(_domainSeparator, receiptHash); uint256 minimumWeight; (minimumWeight, locked) = _computeMinVoteWeight(receipt.info.erc, tokenAddr, quantity);{ bool passed; address signer; address lastSigner; Signature memory sig; uint256 weight; for (uint256 i; i < signatures.length; i++){ sig = signatures[i]; signer = ecrecover(receiptDigest, sig.v, sig.r, sig.s); if (lastSigner >= signer) revert ErrInvalidOrder(msg.sig); lastSigner = signer; weight += _getWeight(signer); if (weight >= minimumWeight){ passed = true; break;}} if (!passed) revert ErrQueryForInsufficientVoteWeight(); withdrawalHash[id] = receiptHash;} if (locked){ withdrawalLocked[id] = true; emit WithdrawalLocked(receiptHash, receipt); return locked;} _recordWithdrawal(tokenAddr, quantity); receipt.info.handleAssetOut(payable(receipt.mainchain.addr), tokenAddr, wrappedNativeToken); emit Withdrew(receiptHash, receipt);}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "Transfer.Receipt calldata",
                                        "name": "receipt"
                                    },
                                    {
                                        "type": "Signature[] memory",
                                        "name": "signatures"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": "locked"
                                    }
                                ],
                                "reads": [
                                    [
                                        "wrappedNativeToken",
                                        "",
                                        "MainchainGatewayV3"
                                    ],
                                    [
                                        "roninChainId",
                                        "",
                                        "MainchainGatewayV3"
                                    ],
                                    [
                                        "_domainSeparator",
                                        "",
                                        "MainchainGatewayV3"
                                    ],
                                    [
                                        "withdrawalHash",
                                        "",
                                        "MainchainGatewayV3"
                                    ],
                                    [
                                        "withdrawalLocked",
                                        "",
                                        "MainchainGatewayV3"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "withdrawalHash",
                                        "",
                                        "MainchainGatewayV3"
                                    ],
                                    [
                                        "withdrawalLocked",
                                        "",
                                        "MainchainGatewayV3"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "_computeMinVoteWeight",
                                        "_getTotalWeight"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "f745df02f3b8989c01b44ccf384d558c"
                            }
                        ],
                        "_requestDepositFor": [
                            {
                                "visibility": "internal",
                                "content": "function _requestDepositFor(Transfer.Request memory _request, address _requester) internal virtual{ MappedToken memory _token; address _roninWeth = address(wrappedNativeToken); _request.info.validate(); if (_request.tokenAddr == address(0)){ if (_request.info.quantity != msg.value) revert ErrInvalidRequest(); _token = getRoninToken(_roninWeth); if (_token.erc != _request.info.erc) revert ErrInvalidTokenStandard(); _request.tokenAddr = _roninWeth;} else{ if (msg.value != 0) revert ErrInvalidRequest(); _token = getRoninToken(_request.tokenAddr); if (_token.erc != _request.info.erc) revert ErrInvalidTokenStandard(); _request.info.handleAssetIn(_requester, _request.tokenAddr); if (_roninWeth == _request.tokenAddr){ wrappedNativeToken.approve(address(wethUnwrapper), _request.info.quantity); wethUnwrapper.unwrap(_request.info.quantity);}} uint256 _depositId = depositCount++; Transfer.Receipt memory _receipt = _request.into_deposit_receipt(_requester, _depositId, _token.tokenAddr, roninChainId); emit DepositRequested(_receipt.hash(), _receipt);}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "Transfer.Request memory",
                                        "name": "_request"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_requester"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "wrappedNativeToken",
                                        "",
                                        "MainchainGatewayV3"
                                    ],
                                    [
                                        "roninChainId",
                                        "",
                                        "MainchainGatewayV3"
                                    ],
                                    [
                                        "depositCount",
                                        "",
                                        "MainchainGatewayV3"
                                    ],
                                    [
                                        "wethUnwrapper",
                                        "",
                                        "MainchainGatewayV3"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "54ae33e65e7231fdcf8749f4a29927cc"
                            }
                        ],
                        "_computeMinVoteWeight": [
                            {
                                "visibility": "internal",
                                "content": "function _computeMinVoteWeight(TokenStandard _erc, address _token, uint256 _quantity) internal virtual returns (uint256 _weight, bool _locked){ uint256 _totalWeight = _getTotalWeight(); _weight = _minimumVoteWeight(_totalWeight); if (_erc == TokenStandard.ERC20){ if (highTierThreshold[_token] <= _quantity){ _weight = _highTierVoteWeight(_totalWeight);} _locked = _lockedWithdrawalRequest(_token, _quantity);}}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "TokenStandard",
                                        "name": "_erc"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_token"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_quantity"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": "_weight"
                                    },
                                    {
                                        "type": "bool",
                                        "name": "_locked"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "_getTotalWeight"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "777bd27c340aaa2a23c0b5e169907d61"
                            }
                        ],
                        "_updateDomainSeparator": [
                            {
                                "visibility": "internal",
                                "content": "function _updateDomainSeparator() internal{ assembly{ let ptr := mload(0x40) mstore(ptr, 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f) mstore(add(ptr, 0x20), 0x159f52c1e3a2b6a6aad3950adf713516211484e0516dad685ea662a094b7c43b) mstore(add(ptr, 0x40), 0xad7c5bef027816a800da1736444fb58a807ef4c9603b7848673f7e3a68eb14a5) mstore(add(ptr, 0x60), chainid()) mstore(add(ptr, 0x80), address()) sstore(_domainSeparator.slot, keccak256(ptr, 0xa0))}}",
                                "modifiers": [],
                                "parameters": [],
                                "returns": [],
                                "reads": [
                                    [
                                        "_domainSeparator",
                                        "",
                                        "MainchainGatewayV3"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "87fb3e778d1db9604fd9973130f8b153"
                            }
                        ],
                        "_setWrappedNativeTokenContract": [
                            {
                                "visibility": "internal",
                                "content": "function _setWrappedNativeTokenContract(IWETH _wrapedToken) internal{ wrappedNativeToken = _wrapedToken; emit WrappedNativeTokenContractUpdated(_wrapedToken);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "IWETH",
                                        "name": "_wrapedToken"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "wrappedNativeToken",
                                        "",
                                        "MainchainGatewayV3"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "wrappedNativeToken",
                                        "",
                                        "MainchainGatewayV3"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "a97127782f5b44070e8a77b498d31636"
                            }
                        ],
                        "_fallback": [
                            {
                                "visibility": "internal",
                                "content": "function _fallback() internal virtual{ if (msg.sender == address(wrappedNativeToken) || msg.sender == address(wethUnwrapper)){ return;} _createDepositOnFallback();}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [
                                    [
                                        "wrappedNativeToken",
                                        "",
                                        "MainchainGatewayV3"
                                    ],
                                    [
                                        "wethUnwrapper",
                                        "",
                                        "MainchainGatewayV3"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "cd86c014c1517da6740892ca792c1128"
                            }
                        ],
                        "_createDepositOnFallback": [
                            {
                                "visibility": "internal",
                                "content": "function _createDepositOnFallback() internal virtual whenNotPaused{ Transfer.Request memory _request; _request.recipientAddr = msg.sender; _request.info.quantity = msg.value; _requestDepositFor(_request, _request.recipientAddr);}",
                                "modifiers": [
                                    "virtual",
                                    "whenNotPaused"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "793af7aedf19b8475e717415065c6483"
                            }
                        ],
                        "_getTotalWeight": [
                            {
                                "visibility": "internal",
                                "content": "function _getTotalWeight() internal view override returns (uint256){ return _totalOperatorWeight;}",
                                "modifiers": [
                                    "view",
                                    "override"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_totalOperatorWeight",
                                        "",
                                        "MainchainGatewayV3"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "0129b0575f4f715c4d8685708f51e7c6"
                            }
                        ],
                        "_getWeight": [
                            {
                                "visibility": "internal",
                                "content": "function _getWeight(address addr) internal view returns (uint256){ return _operatorWeight[addr];}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "addr"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_operatorWeight",
                                        "",
                                        "MainchainGatewayV3"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "aec204224b4dacf3e07cf19da61c430b"
                            }
                        ],
                        "onBridgeOperatorsAdded": [
                            {
                                "visibility": "external",
                                "content": "function onBridgeOperatorsAdded( address[] calldata operators, uint96[] calldata weights, bool[] memory addeds ) external onlyContract(ContractType.BRIDGE_MANAGER) returns (bytes4){ uint256 length = operators.length; if (length != addeds.length || length != weights.length) revert ErrLengthMismatch(msg.sig); if (length == 0){ return IBridgeManagerCallback.onBridgeOperatorsAdded.selector;} for (uint256 i; i < length; ++i){ unchecked{ if (addeds[i]){ _totalOperatorWeight += weights[i]; _operatorWeight[operators[i]] = weights[i];}}} return IBridgeManagerCallback.onBridgeOperatorsAdded.selector;}",
                                "modifiers": [
                                    "onlyContract(ContractType.BRIDGE_MANAGER)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address[] calldata",
                                        "name": "operators"
                                    },
                                    {
                                        "type": "uint96[] calldata",
                                        "name": "weights"
                                    },
                                    {
                                        "type": "bool[] memory",
                                        "name": "addeds"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes4",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_totalOperatorWeight",
                                        "",
                                        "MainchainGatewayV3"
                                    ],
                                    [
                                        "_operatorWeight",
                                        "",
                                        "MainchainGatewayV3"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_totalOperatorWeight",
                                        "",
                                        "MainchainGatewayV3"
                                    ],
                                    [
                                        "_operatorWeight",
                                        "",
                                        "MainchainGatewayV3"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "81f14aa0b67d7a6f29e1d8dcabd2f7f9"
                            }
                        ],
                        "onBridgeOperatorsRemoved": [
                            {
                                "visibility": "external",
                                "content": "function onBridgeOperatorsRemoved(address[] calldata operators, bool[] calldata removeds) external onlyContract(ContractType.BRIDGE_MANAGER) returns (bytes4){ uint length = operators.length; if (length != removeds.length) revert ErrLengthMismatch(msg.sig); if (length == 0){ return IBridgeManagerCallback.onBridgeOperatorsRemoved.selector;} uint96 totalRemovingWeight; for (uint i; i < length; ++i){ unchecked{ if (removeds[i]){ totalRemovingWeight += _operatorWeight[operators[i]]; delete _operatorWeight[operators[i]];}}} _totalOperatorWeight -= totalRemovingWeight; return IBridgeManagerCallback.onBridgeOperatorsRemoved.selector;}",
                                "modifiers": [
                                    "onlyContract(ContractType.BRIDGE_MANAGER)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address[] calldata",
                                        "name": "operators"
                                    },
                                    {
                                        "type": "bool[] calldata",
                                        "name": "removeds"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes4",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_totalOperatorWeight",
                                        "",
                                        "MainchainGatewayV3"
                                    ],
                                    [
                                        "_operatorWeight",
                                        "",
                                        "MainchainGatewayV3"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_totalOperatorWeight",
                                        "",
                                        "MainchainGatewayV3"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "170d0b26a8a20f38220bda45b2cb3cb4"
                            }
                        ],
                        "supportsInterface": [
                            {
                                "visibility": "public",
                                "content": "function supportsInterface(bytes4 interfaceId) public view override(AccessControlEnumerable, IERC165, ERC1155Receiver) returns (bool){ return interfaceId == type (IMainchainGatewayV3).interfaceId || interfaceId == type (IBridgeManagerCallback).interfaceId || super.supportsInterface(interfaceId);}",
                                "modifiers": [
                                    "view",
                                    "override(AccessControlEnumerable, IERC165, ERC1155Receiver)"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes4",
                                        "name": "interfaceId"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "d3dae0723bb4c06ad5e0dc72598c384e"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "TokenInfo": "LibTokenInfo"
                    }
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "_getTotalWeight": "0129b0575f4f715c4d8685708f51e7c6",
                "_computeMinVoteWeight": "777bd27c340aaa2a23c0b5e169907d61"
            },
            "md5": "ab76da6ecdd5565b7092e324283a5c14"
        }
    },
    "handled_md5": {
        "__set__": true,
        "values": [
            "ab76da6ecdd5565b7092e324283a5c14"
        ]
    }
}