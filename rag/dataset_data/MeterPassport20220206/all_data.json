{
    "solidity_file": {
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\MeterPassport20220206\\Bridge\\Bridge.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\MeterPassport20220206\\Bridge\\Bridge.sol",
            "filename": "Bridge.sol",
            "imported_contracts": {},
            "contracts": {
                "EnumerableSet": {
                    "type": {
                        "__CT__": true,
                        "value": 2
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "_add": [
                            {
                                "visibility": "private",
                                "content": "function _add(Set storage set, bytes32 value) private returns (bool){ if (!_contains(set, value)){ set._values.push(value); set._indexes[value] = set._values.length; return true;} else{ return false;}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "Set storage",
                                        "name": "set"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "value"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "EnumerableSet._contains"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "ad2b7769dc9b89055623e5cf9cf8a379"
                            }
                        ],
                        "_remove": [
                            {
                                "visibility": "private",
                                "content": "function _remove(Set storage set, bytes32 value) private returns (bool){ uint256 valueIndex = set._indexes[value]; if (valueIndex != 0){ uint256 toDeleteIndex = valueIndex - 1; uint256 lastIndex = set._values.length - 1; bytes32 lastvalue = set._values[lastIndex]; set._values[toDeleteIndex] = lastvalue; set._indexes[lastvalue] = toDeleteIndex + 1; set._values.pop(); delete set._indexes[value]; return true;} else{ return false;}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "Set storage",
                                        "name": "set"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "value"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "17c0cb919bc1b5be0cc90a5f63cce6a2"
                            }
                        ],
                        "_contains": [
                            {
                                "visibility": "private",
                                "content": "function _contains(Set storage set, bytes32 value) private view returns (bool){ return set._indexes[value] != 0;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "Set storage",
                                        "name": "set"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "value"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "1741e13e15ea9a9f210919d1c3788e12"
                            }
                        ],
                        "_length": [
                            {
                                "visibility": "private",
                                "content": "function _length(Set storage set) private view returns (uint256){ return set._values.length;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "Set storage",
                                        "name": "set"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "bc694b0bdf3b5a29dac66980d1d4182b"
                            }
                        ],
                        "_at": [
                            {
                                "visibility": "private",
                                "content": "function _at(Set storage set, uint256 index) private view returns (bytes32){ require(set._values.length > index, \"EnumerableSet: index out of bounds\"); return set._values[index];}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "Set storage",
                                        "name": "set"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "index"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "e1759b4e1992d27144a409f7b53a0ae1"
                            }
                        ],
                        "add": [
                            {
                                "visibility": "internal",
                                "content": "function add(AddressSet storage set, address value) internal returns (bool){ return _add(set._inner, bytes32(uint256(value)));}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "AddressSet storage",
                                        "name": "set"
                                    },
                                    {
                                        "type": "address",
                                        "name": "value"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "EnumerableSet._add"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "1fdf3a5d95cb556e55ddaf3c7d6b02ff"
                            },
                            {
                                "visibility": "internal",
                                "content": "function add(UintSet storage set, uint256 value) internal returns (bool){ return _add(set._inner, bytes32(value));}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "UintSet storage",
                                        "name": "set"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "EnumerableSet._add"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "852b0f9f2830320e0672bf0227599b4a"
                            }
                        ],
                        "remove": [
                            {
                                "visibility": "internal",
                                "content": "function remove(AddressSet storage set, address value) internal returns (bool){ return _remove(set._inner, bytes32(uint256(value)));}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "AddressSet storage",
                                        "name": "set"
                                    },
                                    {
                                        "type": "address",
                                        "name": "value"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "EnumerableSet._remove"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "31b1ad98ef7bca056e5b57836449c950"
                            },
                            {
                                "visibility": "internal",
                                "content": "function remove(UintSet storage set, uint256 value) internal returns (bool){ return _remove(set._inner, bytes32(value));}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "UintSet storage",
                                        "name": "set"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "EnumerableSet._remove"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "d4f789eb112120d7d4ed25cdb162a126"
                            }
                        ],
                        "contains": [
                            {
                                "visibility": "internal",
                                "content": "function contains(AddressSet storage set, address value) internal view returns (bool){ return _contains(set._inner, bytes32(uint256(value)));}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "AddressSet storage",
                                        "name": "set"
                                    },
                                    {
                                        "type": "address",
                                        "name": "value"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "EnumerableSet._contains"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "d75a8a9561b44eed6c4ea9a84b67ac90"
                            },
                            {
                                "visibility": "internal",
                                "content": "function contains(UintSet storage set, uint256 value) internal view returns (bool){ return _contains(set._inner, bytes32(value));}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "UintSet storage",
                                        "name": "set"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "EnumerableSet._contains"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "e69466d3da969494102a54751ab9f3a8"
                            }
                        ],
                        "length": [
                            {
                                "visibility": "internal",
                                "content": "function length(AddressSet storage set) internal view returns (uint256){ return _length(set._inner);}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "AddressSet storage",
                                        "name": "set"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "EnumerableSet._length"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "ecedb9e5fc6c79ed204867d3da23afe5"
                            },
                            {
                                "visibility": "internal",
                                "content": "function length(UintSet storage set) internal view returns (uint256){ return _length(set._inner);}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "UintSet storage",
                                        "name": "set"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "EnumerableSet._length"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "cea2e30ad0bc0364c37de49fbeb20dc5"
                            }
                        ],
                        "at": [
                            {
                                "visibility": "internal",
                                "content": "function at(AddressSet storage set, uint256 index) internal view returns (address){ return address(uint256(_at(set._inner, index)));}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "AddressSet storage",
                                        "name": "set"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "index"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "EnumerableSet._at"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "b3d2f6abcb57b09a1952191a978ae7bc"
                            },
                            {
                                "visibility": "internal",
                                "content": "function at(UintSet storage set, uint256 index) internal view returns (uint256){ return uint256(_at(set._inner, index));}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "UintSet storage",
                                        "name": "set"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "index"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "EnumerableSet._at"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "14de3a4f705bba70509f35b3dd44365f"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {
                        "Set": {
                            "content": "Set{ bytes32[] _values; mapping (bytes32 => uint256) _indexes;}"
                        },
                        "AddressSet": {
                            "content": "AddressSet{ Set _inner;}"
                        },
                        "UintSet": {
                            "content": "UintSet{ Set _inner;}"
                        }
                    },
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "Address": {
                    "type": {
                        "__CT__": true,
                        "value": 2
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "isContract": [
                            {
                                "visibility": "internal",
                                "content": "function isContract(address account) internal view returns (bool){ bytes32 codehash; bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470; assembly{ codehash := extcodehash(account)} return (codehash != accountHash && codehash != 0x0);}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "account"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "0bfe93cb7ea36f0ded62a360862b840e"
                            }
                        ],
                        "sendValue": [
                            {
                                "visibility": "internal",
                                "content": "function sendValue(address payable recipient, uint256 amount) internal{ require(address(this).balance >= amount, \"Address: insufficient balance\"); (bool success, ) = recipient.call{ value: amount} (\"\"); require(success, \"Address: unable to send value, recipient may have reverted\");}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address payable",
                                        "name": "recipient"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "4213f1701c2999f67f11de98a51e01f6"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "Context": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "internal",
                                "content": "constructor () internal{}",
                                "modifiers": [],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "2a23d0858cde090e7b199aa638ffd5dd"
                            }
                        ],
                        "_msgSender": [
                            {
                                "visibility": "internal",
                                "content": "function _msgSender() internal view virtual returns (address payable){ return msg.sender;}",
                                "modifiers": [
                                    "view",
                                    "virtual"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address payable",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "00e29fff2bd07c51e23e94ddc6a504c4"
                            }
                        ],
                        "_msgData": [
                            {
                                "visibility": "internal",
                                "content": "function _msgData() internal view virtual returns (bytes memory){ this; return msg.data;}",
                                "modifiers": [
                                    "view",
                                    "virtual"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "85862d5484a7dade4fadbe2620ef8307"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "AccessControl": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": true,
                    "inherits": [
                        "is",
                        "Context"
                    ],
                    "state_variables": {
                        "_roles": {
                            "type": "mapping (bytes32 => RoleData)",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping (bytes32 => RoleData) private _roles;"
                        },
                        "DEFAULT_ADMIN_ROLE": {
                            "type": "bytes32",
                            "visibility": "public",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "0x00",
                            "content": "bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;"
                        }
                    },
                    "functions": {
                        "hasRole": [
                            {
                                "visibility": "public",
                                "content": "function hasRole(bytes32 role, address account) public view returns (bool){ return _roles[role].members.contains(account);}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "role"
                                    },
                                    {
                                        "type": "address",
                                        "name": "account"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_roles",
                                        "",
                                        "AccessControl"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "9fbc7e2af1224ec2a5b77a3507366e7e"
                            }
                        ],
                        "getRoleMemberCount": [
                            {
                                "visibility": "public",
                                "content": "function getRoleMemberCount(bytes32 role) public view returns (uint256){ return _roles[role].members.length();}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "role"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_roles",
                                        "",
                                        "AccessControl"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "19a16dd0a34a0f806edd554f550978bd"
                            }
                        ],
                        "getRoleMember": [
                            {
                                "visibility": "public",
                                "content": "function getRoleMember(bytes32 role, uint256 index) public view returns (address){ return _roles[role].members.at(index);}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "role"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "index"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_roles",
                                        "",
                                        "AccessControl"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "44de99df62eb881a66d6f5892e1bf93d"
                            }
                        ],
                        "getRoleAdmin": [
                            {
                                "visibility": "public",
                                "content": "function getRoleAdmin(bytes32 role) public view returns (bytes32){ return _roles[role].adminRole;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "role"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_roles",
                                        "",
                                        "AccessControl"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "f5e4d0f5949141eddc05c7f023643434"
                            }
                        ],
                        "grantRole": [
                            {
                                "visibility": "public",
                                "content": "function grantRole(bytes32 role, address account) public virtual{ require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to grant\"); _grantRole(role, account);}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "role"
                                    },
                                    {
                                        "type": "address",
                                        "name": "account"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_roles",
                                        "",
                                        "AccessControl"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AccessControl.hasRole",
                                        "AccessControl._grantRole",
                                        "AccessControl._msgSender"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "f4b059da9460f5d3d0f6b41f6571ddc9"
                            }
                        ],
                        "revokeRole": [
                            {
                                "visibility": "public",
                                "content": "function revokeRole(bytes32 role, address account) public virtual{ require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to revoke\"); _revokeRole(role, account);}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "role"
                                    },
                                    {
                                        "type": "address",
                                        "name": "account"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_roles",
                                        "",
                                        "AccessControl"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AccessControl._revokeRole",
                                        "AccessControl.hasRole",
                                        "AccessControl._msgSender"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "a6204e95b6de4df653aa2ed5a13647e8"
                            }
                        ],
                        "renounceRole": [
                            {
                                "visibility": "public",
                                "content": "function renounceRole(bytes32 role, address account) public virtual{ require(account == _msgSender(), \"AccessControl: can only renounce roles for self\"); _revokeRole(role, account);}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "role"
                                    },
                                    {
                                        "type": "address",
                                        "name": "account"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AccessControl._revokeRole",
                                        "AccessControl._msgSender"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "aedd260ef7208937a1679e5447fe9131"
                            }
                        ],
                        "_setupRole": [
                            {
                                "visibility": "internal",
                                "content": "function _setupRole(bytes32 role, address account) internal virtual{ _grantRole(role, account);}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "role"
                                    },
                                    {
                                        "type": "address",
                                        "name": "account"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AccessControl._grantRole"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "af0a23debe0f001cc6c8bf7d6a9618e6"
                            }
                        ],
                        "_setRoleAdmin": [
                            {
                                "visibility": "internal",
                                "content": "function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual{ _roles[role].adminRole = adminRole;}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "role"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "adminRole"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_roles",
                                        "",
                                        "AccessControl"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "48c0248d359b90d47d2a8796ed11f35b"
                            }
                        ],
                        "_grantRole": [
                            {
                                "visibility": "private",
                                "content": "function _grantRole(bytes32 role, address account) private{ if (_roles[role].members.add(account)){ emit RoleGranted(role, account, _msgSender());}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "role"
                                    },
                                    {
                                        "type": "address",
                                        "name": "account"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_roles",
                                        "",
                                        "AccessControl"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AccessControl._msgSender"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "771494ac28e5f2aeb04be27c51120863"
                            }
                        ],
                        "_revokeRole": [
                            {
                                "visibility": "private",
                                "content": "function _revokeRole(bytes32 role, address account) private{ if (_roles[role].members.remove(account)){ emit RoleRevoked(role, account, _msgSender());}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "role"
                                    },
                                    {
                                        "type": "address",
                                        "name": "account"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_roles",
                                        "",
                                        "AccessControl"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AccessControl._msgSender"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "dc2c25cb40f6be919e8b4d4af191851f"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {
                        "RoleData": {
                            "content": "RoleData{ EnumerableSet.AddressSet members; bytes32 adminRole;}"
                        }
                    },
                    "events": {
                        "RoleGranted": {
                            "event": "RoleGranted",
                            "content": "RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)"
                        },
                        "RoleRevoked": {
                            "event": "RoleRevoked",
                            "content": "RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "address": "Address"
                    }
                },
                "Pausable": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {
                        "_paused": {
                            "type": "bool",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "bool private _paused;"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "internal",
                                "content": "constructor () internal{ _paused = false;}",
                                "modifiers": [],
                                "parameters": [],
                                "returns": [],
                                "reads": [
                                    [
                                        "_paused",
                                        "",
                                        "Pausable"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_paused",
                                        "",
                                        "Pausable"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "d16e6d6e12403bddd7cd78a7ea9fd15a"
                            }
                        ],
                        "paused": [
                            {
                                "visibility": "public",
                                "content": "function paused() public view returns (bool){ return _paused;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_paused",
                                        "",
                                        "Pausable"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "2cd42665ca6fa1ede9e137f8a2939e65"
                            }
                        ],
                        "_whenNotPaused": [
                            {
                                "visibility": "private",
                                "content": "function _whenNotPaused() private view{ require(!_paused, \"Pausable: paused\");}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [
                                    [
                                        "_paused",
                                        "",
                                        "Pausable"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "4e74b619a4ae7d47ea63ade339218071"
                            }
                        ],
                        "_whenPaused": [
                            {
                                "visibility": "private",
                                "content": "function _whenPaused() private view{ require(_paused, \"Pausable: not paused\");}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [
                                    [
                                        "_paused",
                                        "",
                                        "Pausable"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "244b861dca8efe704a50f115a4288bf6"
                            }
                        ],
                        "_pause": [
                            {
                                "visibility": "internal",
                                "content": "function _pause() internal virtual whenNotPaused{ _paused = true; emit Paused(msg.sender);}",
                                "modifiers": [
                                    "virtual",
                                    "whenNotPaused"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [
                                    [
                                        "_paused",
                                        "",
                                        "Pausable"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_paused",
                                        "",
                                        "Pausable"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Pausable.whenNotPaused"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "83aa8306c74a9cdc337e162f7945be7b"
                            }
                        ],
                        "_unpause": [
                            {
                                "visibility": "internal",
                                "content": "function _unpause() internal virtual whenPaused{ _paused = false; emit Unpaused(msg.sender);}",
                                "modifiers": [
                                    "virtual",
                                    "whenPaused"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [
                                    [
                                        "_paused",
                                        "",
                                        "Pausable"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_paused",
                                        "",
                                        "Pausable"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Pausable.whenPaused"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "973f4fe38cdb90400de5ab940d7c809b"
                            }
                        ]
                    },
                    "modifiers": {
                        "whenNotPaused": {
                            "parameters": [],
                            "content": "modifier whenNotPaused(){ _whenNotPaused(); _;}",
                            "reads": [],
                            "writes": [],
                            "external_calls": {
                                "__set__": true,
                                "values": [
                                    "Pausable._whenNotPaused"
                                ]
                            },
                            "md5": "13070b7b9d4213c896033612f58ceef6"
                        },
                        "whenPaused": {
                            "parameters": [],
                            "content": "modifier whenPaused(){ _whenPaused(); _;}",
                            "reads": [],
                            "writes": [],
                            "external_calls": {
                                "__set__": true,
                                "values": [
                                    "Pausable._whenPaused"
                                ]
                            },
                            "md5": "ea1719b12ad4b99e8ad37a9c274e591b"
                        }
                    },
                    "structs": {},
                    "events": {
                        "Paused": {
                            "event": "Paused",
                            "content": "Paused(address account)"
                        },
                        "Unpaused": {
                            "event": "Unpaused",
                            "content": "Unpaused(address account)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "SafeMath": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "sub": [
                            {
                                "visibility": "internal",
                                "content": "function sub(uint256 a, uint256 b) internal pure returns (uint256){ return _sub(a, b, \"SafeMath: subtraction overflow\");}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "a"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "b"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SafeMath._sub"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "cb302d12d1cd05f18a2d3c2b39e78043"
                            }
                        ],
                        "_sub": [
                            {
                                "visibility": "internal",
                                "content": "function _sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256){ require(b <= a, errorMessage); uint256 c = a - b; return c;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "a"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "b"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "errorMessage"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "9722b3989e0b9dbec015e2ba7a5898b7"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "IDepositExecute": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "deposit": [
                            {
                                "visibility": "external",
                                "content": "function deposit(bytes32 resourceID, uint8 destinationChainID, uint64 depositNonce, address depositer, bytes calldata data) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "resourceID"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "destinationChainID"
                                    },
                                    {
                                        "type": "uint64",
                                        "name": "depositNonce"
                                    },
                                    {
                                        "type": "address",
                                        "name": "depositer"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "data"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "a15881c9eedaf2c739d41ceeb5bb2875"
                            }
                        ],
                        "executeProposal": [
                            {
                                "visibility": "external",
                                "content": "function executeProposal(bytes32 resourceID, bytes calldata data) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "resourceID"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "data"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "b430808e4e60da9b9edd5a86219fd95a"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                },
                "IBridge": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "_chainID": [
                            {
                                "visibility": "external",
                                "content": "function _chainID() external returns (uint8);",
                                "modifiers": [],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint8",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "454ade5f69e7fa6b21e3598b84d6f6d2"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                },
                "IERCHandler": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "setResource": [
                            {
                                "visibility": "external",
                                "content": "function setResource(bytes32 resourceID, address contractAddress) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "resourceID"
                                    },
                                    {
                                        "type": "address",
                                        "name": "contractAddress"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "552231eeee9723fb36fb620bdbb08075"
                            }
                        ],
                        "setBurnable": [
                            {
                                "visibility": "external",
                                "content": "function setBurnable(address contractAddress) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "contractAddress"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "50c6cff347fc27e2f17494a0a4bae2df"
                            }
                        ],
                        "withdraw": [
                            {
                                "visibility": "external",
                                "content": "function withdraw(address tokenAddress, address recipient, uint256 amountOrTokenID) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "tokenAddress"
                                    },
                                    {
                                        "type": "address",
                                        "name": "recipient"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amountOrTokenID"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "7f6f8007b6e649adf29b6f03d238733f"
                            }
                        ],
                        "_wtokenAddress": [
                            {
                                "visibility": "external",
                                "content": "function _wtokenAddress() external returns (address);",
                                "modifiers": [],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c0bfce1283c6a141b2dca1cf4d3dee1b"
                            }
                        ],
                        "updateBridgeAddress": [
                            {
                                "visibility": "external",
                                "content": "function updateBridgeAddress(address newBridgeAddress) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "newBridgeAddress"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "26b8f52dcde7ab180f418656cb08781b"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                },
                "IGenericHandler": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "setResource": [
                            {
                                "visibility": "external",
                                "content": "function setResource( bytes32 resourceID, address contractAddress, bytes4 depositFunctionSig, uint depositFunctionDepositerOffset, bytes4 executeFunctionSig) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "resourceID"
                                    },
                                    {
                                        "type": "address",
                                        "name": "contractAddress"
                                    },
                                    {
                                        "type": "bytes4",
                                        "name": "depositFunctionSig"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "depositFunctionDepositerOffset"
                                    },
                                    {
                                        "type": "bytes4",
                                        "name": "executeFunctionSig"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "07a16f99040b62181079ca3f076a0041"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                },
                "IWETH": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "deposit": [
                            {
                                "visibility": "external",
                                "content": "function deposit() external payable;",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": true,
                                "md5": "4f2eec90abd519258d97a4283a54e2f1"
                            }
                        ],
                        "transfer": [
                            {
                                "visibility": "external",
                                "content": "function transfer(address to, uint value) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "value"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "0587b6354cf0d3773c8593eb4103d819"
                            }
                        ],
                        "withdraw": [
                            {
                                "visibility": "external",
                                "content": "function withdraw(uint) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": null
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "b3e698980247640e9fe99c060e4921fc"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                },
                "Bridge": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "Pausable",
                        "AccessControl",
                        "SafeMath"
                    ],
                    "state_variables": {
                        "_chainID": {
                            "type": "uint8",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint8 public _chainID;"
                        },
                        "_relayerThreshold": {
                            "type": "uint256",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256 public _relayerThreshold;"
                        },
                        "_totalRelayers": {
                            "type": "uint256",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256 public _totalRelayers;"
                        },
                        "_totalOperators": {
                            "type": "uint256",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256 public _totalOperators;"
                        },
                        "_totalProposals": {
                            "type": "uint256",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256 public _totalProposals;"
                        },
                        "_fee": {
                            "type": "uint256",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256 public _fee;"
                        },
                        "_expiry": {
                            "type": "uint256",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256 public _expiry;"
                        },
                        "_wtokenAddress": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public _wtokenAddress;"
                        },
                        "_depositCounts": {
                            "type": "mapping(uint8 => uint64)",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(uint8 => uint64) public _depositCounts;"
                        },
                        "_specialFee": {
                            "type": "mapping(uint8 => uint256)",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(uint8 => uint256) public _specialFee;"
                        },
                        "_resourceIDToHandlerAddress": {
                            "type": "mapping(bytes32 => address)",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(bytes32 => address) public _resourceIDToHandlerAddress;"
                        },
                        "_depositRecords": {
                            "type": "mapping(uint64 => mapping(uint8 => bytes))",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(uint64 => mapping(uint8 => bytes)) public _depositRecords;"
                        },
                        "_proposals": {
                            "type": "mapping(uint72 => mapping(bytes32 => Proposal))",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(uint72 => mapping(bytes32 => Proposal)) public _proposals;"
                        },
                        "_hasVotedOnProposal": {
                            "type": "mapping(uint72 => mapping(bytes32 => mapping(address => bool)))",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(uint72 => mapping(bytes32 => mapping(address => bool))) public _hasVotedOnProposal;"
                        },
                        "RELAYER_ROLE": {
                            "type": "bytes32",
                            "visibility": "public",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "keccak256(\"RELAYER_ROLE\")",
                            "content": "bytes32 public constant RELAYER_ROLE = keccak256(\"RELAYER_ROLE\");"
                        },
                        "OPERATOR_ROLE": {
                            "type": "bytes32",
                            "visibility": "public",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "keccak256(\"OPERATOR_ROLE\")",
                            "content": "bytes32 public constant OPERATOR_ROLE = keccak256(\"OPERATOR_ROLE\");"
                        }
                    },
                    "functions": {
                        "_onlyAdminOrRelayer": [
                            {
                                "visibility": "private",
                                "content": "function _onlyAdminOrRelayer() private{ require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender) || hasRole(RELAYER_ROLE, msg.sender), \"sender is not relayer or admin\");}",
                                "modifiers": [],
                                "parameters": [],
                                "returns": [],
                                "reads": [
                                    [
                                        "DEFAULT_ADMIN_ROLE",
                                        "",
                                        "AccessControl"
                                    ],
                                    [
                                        "RELAYER_ROLE",
                                        "",
                                        "Bridge"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AccessControl.hasRole"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "e312b08ebbb62fa2e9c5ef36ee3a071f"
                            }
                        ],
                        "_onlyAdminOrOperator": [
                            {
                                "visibility": "private",
                                "content": "function _onlyAdminOrOperator() private{ require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender) || hasRole(OPERATOR_ROLE, msg.sender), \"sender is not operator or admin\");}",
                                "modifiers": [],
                                "parameters": [],
                                "returns": [],
                                "reads": [
                                    [
                                        "DEFAULT_ADMIN_ROLE",
                                        "",
                                        "AccessControl"
                                    ],
                                    [
                                        "OPERATOR_ROLE",
                                        "",
                                        "Bridge"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AccessControl.hasRole"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "f20840dcb19be4cec879e3f934f06230"
                            }
                        ],
                        "_onlyAdmin": [
                            {
                                "visibility": "private",
                                "content": "function _onlyAdmin() private{ require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \"sender doesn't have admin role\");}",
                                "modifiers": [],
                                "parameters": [],
                                "returns": [],
                                "reads": [
                                    [
                                        "DEFAULT_ADMIN_ROLE",
                                        "",
                                        "AccessControl"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AccessControl.hasRole"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "8482f4408f6a739960356e6ac07862f2"
                            }
                        ],
                        "_onlyRelayers": [
                            {
                                "visibility": "private",
                                "content": "function _onlyRelayers() private{ require(hasRole(RELAYER_ROLE, msg.sender), \"sender doesn't have relayer role\");}",
                                "modifiers": [],
                                "parameters": [],
                                "returns": [],
                                "reads": [
                                    [
                                        "RELAYER_ROLE",
                                        "",
                                        "Bridge"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AccessControl.hasRole"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "a6412ace4cec6505c0f7c5b79f7a9431"
                            }
                        ],
                        "_onlyOperators": [
                            {
                                "visibility": "private",
                                "content": "function _onlyOperators() private{ require(hasRole(OPERATOR_ROLE, msg.sender), \"sender doesn't have relayer role\");}",
                                "modifiers": [],
                                "parameters": [],
                                "returns": [],
                                "reads": [
                                    [
                                        "OPERATOR_ROLE",
                                        "",
                                        "Bridge"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AccessControl.hasRole"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "a3b918829d84331ea55d8198c5ef23c3"
                            }
                        ],
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (uint8 chainID, address[] memory initialRelayers, uint256 initialRelayerThreshold, uint256 fee, uint256 expiry) public{ _chainID = chainID; _relayerThreshold = initialRelayerThreshold; _fee = fee; _expiry = expiry; _setupRole(DEFAULT_ADMIN_ROLE, msg.sender); _setRoleAdmin(RELAYER_ROLE, DEFAULT_ADMIN_ROLE); _setRoleAdmin(OPERATOR_ROLE, DEFAULT_ADMIN_ROLE); for (uint256 i; i < initialRelayers.length; i++){ grantRole(RELAYER_ROLE, initialRelayers[i]); _totalRelayers++;}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint8",
                                        "name": "chainID"
                                    },
                                    {
                                        "type": "address[] memory",
                                        "name": "initialRelayers"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "initialRelayerThreshold"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "fee"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "expiry"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "DEFAULT_ADMIN_ROLE",
                                        "",
                                        "AccessControl"
                                    ],
                                    [
                                        "_chainID",
                                        "",
                                        "Bridge"
                                    ],
                                    [
                                        "_relayerThreshold",
                                        "",
                                        "Bridge"
                                    ],
                                    [
                                        "_totalRelayers",
                                        "",
                                        "Bridge"
                                    ],
                                    [
                                        "_fee",
                                        "",
                                        "Bridge"
                                    ],
                                    [
                                        "_expiry",
                                        "",
                                        "Bridge"
                                    ],
                                    [
                                        "RELAYER_ROLE",
                                        "",
                                        "Bridge"
                                    ],
                                    [
                                        "OPERATOR_ROLE",
                                        "",
                                        "Bridge"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_chainID",
                                        "",
                                        "Bridge"
                                    ],
                                    [
                                        "_relayerThreshold",
                                        "",
                                        "Bridge"
                                    ],
                                    [
                                        "_fee",
                                        "",
                                        "Bridge"
                                    ],
                                    [
                                        "_expiry",
                                        "",
                                        "Bridge"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "8688cb707fe368bf2769790a10084830"
                            }
                        ],
                        "isRelayer": [
                            {
                                "visibility": "external",
                                "content": "function isRelayer(address relayer) external view returns (bool){ return hasRole(RELAYER_ROLE, relayer);}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "relayer"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "RELAYER_ROLE",
                                        "",
                                        "Bridge"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AccessControl.hasRole"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "5816ec8b67de23ec20054843cf73c4c0"
                            }
                        ],
                        "isOperator": [
                            {
                                "visibility": "external",
                                "content": "function isOperator(address operator) external view returns (bool){ return hasRole(OPERATOR_ROLE, operator);}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "operator"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "OPERATOR_ROLE",
                                        "",
                                        "Bridge"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AccessControl.hasRole"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "624164127cb66dcc43169c823efedfc6"
                            }
                        ],
                        "renounceAdmin": [
                            {
                                "visibility": "external",
                                "content": "function renounceAdmin(address newAdmin) external onlyAdmin{ grantRole(DEFAULT_ADMIN_ROLE, newAdmin); renounceRole(DEFAULT_ADMIN_ROLE, msg.sender);}",
                                "modifiers": [
                                    "onlyAdmin"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "newAdmin"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "DEFAULT_ADMIN_ROLE",
                                        "",
                                        "AccessControl"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AccessControl.renounceRole",
                                        "AccessControl.grantRole",
                                        "Bridge.onlyAdmin"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "4036ab75993adc5d30fb9b36ee157a1c"
                            }
                        ],
                        "adminPauseTransfers": [
                            {
                                "visibility": "external",
                                "content": "function adminPauseTransfers() external onlyAdminOrOperator{ _pause();}",
                                "modifiers": [
                                    "onlyAdminOrOperator"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Pausable._pause",
                                        "Bridge.onlyAdminOrOperator"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "8b014412c40cbf46c7182d5047c4f0e1"
                            }
                        ],
                        "adminUnpauseTransfers": [
                            {
                                "visibility": "external",
                                "content": "function adminUnpauseTransfers() external onlyAdminOrOperator{ _unpause();}",
                                "modifiers": [
                                    "onlyAdminOrOperator"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Pausable._unpause",
                                        "Bridge.onlyAdminOrOperator"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "bcad1c2b705cea3effb24519b7399655"
                            }
                        ],
                        "adminChangeRelayerThreshold": [
                            {
                                "visibility": "external",
                                "content": "function adminChangeRelayerThreshold(uint256 newThreshold) external onlyAdmin{ _relayerThreshold = newThreshold; emit RelayerThresholdChanged(newThreshold);}",
                                "modifiers": [
                                    "onlyAdmin"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "newThreshold"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_relayerThreshold",
                                        "",
                                        "Bridge"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_relayerThreshold",
                                        "",
                                        "Bridge"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Bridge.onlyAdmin"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "77072c3a443d3d98b010fc890c9c8bf3"
                            }
                        ],
                        "adminAddRelayer": [
                            {
                                "visibility": "external",
                                "content": "function adminAddRelayer(address relayerAddress) external onlyAdmin{ require(!hasRole(RELAYER_ROLE, relayerAddress), \"addr already has relayer role!\"); grantRole(RELAYER_ROLE, relayerAddress); emit RelayerAdded(relayerAddress); _totalRelayers++;}",
                                "modifiers": [
                                    "onlyAdmin"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "relayerAddress"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_totalRelayers",
                                        "",
                                        "Bridge"
                                    ],
                                    [
                                        "RELAYER_ROLE",
                                        "",
                                        "Bridge"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AccessControl.grantRole",
                                        "AccessControl.hasRole",
                                        "Bridge.onlyAdmin"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "7436b2a397330dea2c0e916580354941"
                            }
                        ],
                        "adminRemoveRelayer": [
                            {
                                "visibility": "external",
                                "content": "function adminRemoveRelayer(address relayerAddress) external onlyAdmin{ require(hasRole(RELAYER_ROLE, relayerAddress), \"addr doesn't have relayer role!\"); revokeRole(RELAYER_ROLE, relayerAddress); emit RelayerRemoved(relayerAddress); _totalRelayers--;}",
                                "modifiers": [
                                    "onlyAdmin"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "relayerAddress"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_totalRelayers",
                                        "",
                                        "Bridge"
                                    ],
                                    [
                                        "RELAYER_ROLE",
                                        "",
                                        "Bridge"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AccessControl.revokeRole",
                                        "AccessControl.hasRole",
                                        "Bridge.onlyAdmin"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "8710435c84c81d931b087f22147daa28"
                            }
                        ],
                        "adminAddOperator": [
                            {
                                "visibility": "external",
                                "content": "function adminAddOperator(address operatorAddress) external onlyAdmin{ require(!hasRole(OPERATOR_ROLE, operatorAddress), \"addr already has operator role!\"); grantRole(OPERATOR_ROLE, operatorAddress); emit OperatorAdded(operatorAddress); _totalOperators++;}",
                                "modifiers": [
                                    "onlyAdmin"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "operatorAddress"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_totalOperators",
                                        "",
                                        "Bridge"
                                    ],
                                    [
                                        "OPERATOR_ROLE",
                                        "",
                                        "Bridge"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AccessControl.grantRole",
                                        "AccessControl.hasRole",
                                        "Bridge.onlyAdmin"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "5ac847ca3e4474bd9c9af9097ea76a34"
                            }
                        ],
                        "adminRemoveOperator": [
                            {
                                "visibility": "external",
                                "content": "function adminRemoveOperator(address operatorAddress) external onlyAdmin{ require(hasRole(OPERATOR_ROLE, operatorAddress), \"addr doesn't have operator role!\"); revokeRole(OPERATOR_ROLE, operatorAddress); emit OperatorRemoved(operatorAddress); _totalOperators--;}",
                                "modifiers": [
                                    "onlyAdmin"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "operatorAddress"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_totalOperators",
                                        "",
                                        "Bridge"
                                    ],
                                    [
                                        "OPERATOR_ROLE",
                                        "",
                                        "Bridge"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AccessControl.revokeRole",
                                        "AccessControl.hasRole",
                                        "Bridge.onlyAdmin"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "58ad0129b630df704b09189ee9b24bbd"
                            }
                        ],
                        "adminSetResource": [
                            {
                                "visibility": "external",
                                "content": "function adminSetResource(address handlerAddress, bytes32 resourceID, address tokenAddress) external onlyAdmin{ _resourceIDToHandlerAddress[resourceID] = handlerAddress; IERCHandler handler = IERCHandler(handlerAddress); handler.setResource(resourceID, tokenAddress);}",
                                "modifiers": [
                                    "onlyAdmin"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "handlerAddress"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "resourceID"
                                    },
                                    {
                                        "type": "address",
                                        "name": "tokenAddress"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_resourceIDToHandlerAddress",
                                        "",
                                        "Bridge"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_resourceIDToHandlerAddress",
                                        "",
                                        "Bridge"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "IERCHandler.setResource",
                                        "Bridge.onlyAdmin"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "a83ab6f9c8502f8e8861d4a0a059fa32"
                            }
                        ],
                        "adminSetGenericResource": [
                            {
                                "visibility": "external",
                                "content": "function adminSetGenericResource( address handlerAddress, bytes32 resourceID, address contractAddress, bytes4 depositFunctionSig, uint256 depositFunctionDepositerOffset, bytes4 executeFunctionSig ) external onlyAdmin{ _resourceIDToHandlerAddress[resourceID] = handlerAddress; IGenericHandler handler = IGenericHandler(handlerAddress); handler.setResource(resourceID, contractAddress, depositFunctionSig, depositFunctionDepositerOffset, executeFunctionSig);}",
                                "modifiers": [
                                    "onlyAdmin"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "handlerAddress"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "resourceID"
                                    },
                                    {
                                        "type": "address",
                                        "name": "contractAddress"
                                    },
                                    {
                                        "type": "bytes4",
                                        "name": "depositFunctionSig"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "depositFunctionDepositerOffset"
                                    },
                                    {
                                        "type": "bytes4",
                                        "name": "executeFunctionSig"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_resourceIDToHandlerAddress",
                                        "",
                                        "Bridge"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_resourceIDToHandlerAddress",
                                        "",
                                        "Bridge"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Bridge.onlyAdmin",
                                        "IGenericHandler.setResource"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "0afcf7ed022fb5e2b87e22ce16e775bd"
                            }
                        ],
                        "adminSetBurnable": [
                            {
                                "visibility": "external",
                                "content": "function adminSetBurnable(address handlerAddress, address tokenAddress) external onlyAdmin{ IERCHandler handler = IERCHandler(handlerAddress); handler.setBurnable(tokenAddress);}",
                                "modifiers": [
                                    "onlyAdmin"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "handlerAddress"
                                    },
                                    {
                                        "type": "address",
                                        "name": "tokenAddress"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "IERCHandler.setBurnable",
                                        "Bridge.onlyAdmin"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "347653ae933f7cbcb6655199e1e34d07"
                            }
                        ],
                        "getProposal": [
                            {
                                "visibility": "external",
                                "content": "function getProposal(uint8 originChainID, uint64 depositNonce, bytes32 dataHash) external view returns (Proposal memory){ uint72 nonceAndID = (uint72(depositNonce) << 8) | uint72(originChainID); return _proposals[nonceAndID][dataHash];}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint8",
                                        "name": "originChainID"
                                    },
                                    {
                                        "type": "uint64",
                                        "name": "depositNonce"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "dataHash"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "Proposal memory",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_proposals",
                                        "",
                                        "Bridge"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "2912c81df25cf66fe55c1633e088182a"
                            }
                        ],
                        "adminChangeFee": [
                            {
                                "visibility": "external",
                                "content": "function adminChangeFee(uint256 newFee) external onlyAdmin{ require(_fee != newFee, \"Current fee is equal to new fee\"); _fee = newFee;}",
                                "modifiers": [
                                    "onlyAdmin"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "newFee"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_fee",
                                        "",
                                        "Bridge"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_fee",
                                        "",
                                        "Bridge"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Bridge.onlyAdmin"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "e56d6bf3d75e80c5e5929123d64c88d3"
                            }
                        ],
                        "adminChangeSpecialFee": [
                            {
                                "visibility": "external",
                                "content": "function adminChangeSpecialFee(uint256 newFee, uint8 chainID) external onlyAdminOrOperator{ uint256 current = _specialFee[chainID]; require((current != newFee), \"Current special fee equals to the new fee\"); _specialFee[chainID] = newFee;}",
                                "modifiers": [
                                    "onlyAdminOrOperator"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "newFee"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "chainID"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_specialFee",
                                        "",
                                        "Bridge"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_specialFee",
                                        "",
                                        "Bridge"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Bridge.onlyAdminOrOperator"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "3061b75cfc0d87ca500d3a203589cac7"
                            }
                        ],
                        "_getFee": [
                            {
                                "visibility": "internal",
                                "content": "function _getFee(uint8 destinationChainID) internal view returns (uint256){ uint256 special = _specialFee[destinationChainID]; if (special != 0){ return special;} else{ return _fee;}}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint8",
                                        "name": "destinationChainID"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_fee",
                                        "",
                                        "Bridge"
                                    ],
                                    [
                                        "_specialFee",
                                        "",
                                        "Bridge"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "e1c6a4bcb7274cb78bc759429404775c"
                            }
                        ],
                        "getFee": [
                            {
                                "visibility": "external",
                                "content": "function getFee(uint8 destinationChainID) external view returns (uint256){ return _getFee(destinationChainID);}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint8",
                                        "name": "destinationChainID"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Bridge._getFee"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "60dcbe21be6f0902820b179c53fb0a18"
                            }
                        ],
                        "adminUpdateBridgeAddress": [
                            {
                                "visibility": "external",
                                "content": "function adminUpdateBridgeAddress( address handlerAddress, address newBridgeAddress ) external onlyAdmin{ IERCHandler handler = IERCHandler(handlerAddress); handler.updateBridgeAddress(newBridgeAddress);}",
                                "modifiers": [
                                    "onlyAdmin"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "handlerAddress"
                                    },
                                    {
                                        "type": "address",
                                        "name": "newBridgeAddress"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "IERCHandler.updateBridgeAddress",
                                        "Bridge.onlyAdmin"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "d10bb21d32248733d9fd776524c6062a"
                            }
                        ],
                        "adminWithdraw": [
                            {
                                "visibility": "external",
                                "content": "function adminWithdraw( address handlerAddress, address tokenAddress, address recipient, uint256 amountOrTokenID ) external onlyAdmin{ IERCHandler handler = IERCHandler(handlerAddress); handler.withdraw(tokenAddress, recipient, amountOrTokenID);}",
                                "modifiers": [
                                    "onlyAdmin"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "handlerAddress"
                                    },
                                    {
                                        "type": "address",
                                        "name": "tokenAddress"
                                    },
                                    {
                                        "type": "address",
                                        "name": "recipient"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amountOrTokenID"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "IERCHandler.withdraw",
                                        "Bridge.onlyAdmin"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "169862b6db5b27fa2b66bb83970d1b63"
                            }
                        ],
                        "deposit": [
                            {
                                "visibility": "external",
                                "content": "function deposit(uint8 destinationChainID, bytes32 resourceID, bytes calldata data) external payable whenNotPaused{ uint256 fee = _getFee(destinationChainID); require(msg.value == fee, \"Incorrect fee supplied\"); address handler = _resourceIDToHandlerAddress[resourceID]; require(handler != address(0), \"resourceID not mapped to handler\"); uint64 depositNonce = ++_depositCounts[destinationChainID]; _depositRecords[depositNonce][destinationChainID] = data; IDepositExecute depositHandler = IDepositExecute(handler); depositHandler.deposit(resourceID, destinationChainID, depositNonce, msg.sender, data); emit Deposit(destinationChainID, resourceID, depositNonce);}",
                                "modifiers": [
                                    "payable",
                                    "whenNotPaused"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint8",
                                        "name": "destinationChainID"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "resourceID"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "data"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_depositCounts",
                                        "",
                                        "Bridge"
                                    ],
                                    [
                                        "_resourceIDToHandlerAddress",
                                        "",
                                        "Bridge"
                                    ],
                                    [
                                        "_depositRecords",
                                        "",
                                        "Bridge"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_depositRecords",
                                        "",
                                        "Bridge"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Bridge._getFee",
                                        "Pausable.whenNotPaused",
                                        "IDepositExecute.deposit"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "88c5dd7ba3b1cd3eb3479ba35ac160a4"
                            }
                        ],
                        "depositETH": [
                            {
                                "visibility": "external",
                                "content": "function depositETH(uint8 destinationChainID, bytes32 resourceID, bytes calldata data) external payable whenNotPaused{ uint256 fee = _getFee(destinationChainID); require(msg.value >= fee, \"Insufficient fee supplied\"); address handler = _resourceIDToHandlerAddress[resourceID]; require(handler != address(0), \"resourceID not mapped to handler\"); uint256 value = msg.value - fee; uint256 amount; assembly{ amount := calldataload(0x84)} require (amount == value, \"msg.value and data mismatched\"); address wtokenAddress = IERCHandler(handler)._wtokenAddress(); require(wtokenAddress != address(0), \"_wtokenAddress is 0x\"); IWETH(wtokenAddress).deposit{ value: value} (); IWETH(wtokenAddress).transfer(address(handler), value); uint64 depositNonce = ++_depositCounts[destinationChainID]; _depositRecords[depositNonce][destinationChainID] = data; IDepositExecute depositHandler = IDepositExecute(handler); depositHandler.deposit(resourceID, destinationChainID, depositNonce, msg.sender, data); emit Deposit(destinationChainID, resourceID, depositNonce);}",
                                "modifiers": [
                                    "payable",
                                    "whenNotPaused"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint8",
                                        "name": "destinationChainID"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "resourceID"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "data"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_wtokenAddress",
                                        "",
                                        "Bridge"
                                    ],
                                    [
                                        "_depositCounts",
                                        "",
                                        "Bridge"
                                    ],
                                    [
                                        "_resourceIDToHandlerAddress",
                                        "",
                                        "Bridge"
                                    ],
                                    [
                                        "_depositRecords",
                                        "",
                                        "Bridge"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_depositRecords",
                                        "",
                                        "Bridge"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Bridge._getFee",
                                        "Pausable.whenNotPaused",
                                        "IDepositExecute.deposit"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "8ca3dc753490d1464881cf92b8f4ec12"
                            }
                        ],
                        "voteProposal": [
                            {
                                "visibility": "external",
                                "content": "function voteProposal(uint8 chainID, uint64 depositNonce, bytes32 resourceID, bytes32 dataHash) external onlyRelayers whenNotPaused{ uint72 nonceAndID = (uint72(depositNonce) << 8) | uint72(chainID); Proposal storage proposal = _proposals[nonceAndID][dataHash]; require(_resourceIDToHandlerAddress[resourceID] != address(0), \"no handler for resourceID\"); require(uint(proposal._status) <= 1, \"proposal already passed/executed/cancelled\"); require(!_hasVotedOnProposal[nonceAndID][dataHash][msg.sender], \"relayer already voted\"); if (uint(proposal._status) == 0){ ++_totalProposals; _proposals[nonceAndID][dataHash] = Proposal({ _resourceID : resourceID, _dataHash : dataHash, _yesVotes : new address[](1), _noVotes : new address[](0), _status : ProposalStatus.Active, _proposedBlock : block.number} ); proposal._yesVotes[0] = msg.sender; emit ProposalEvent(chainID, depositNonce, ProposalStatus.Active, resourceID, dataHash);} else{ if (sub(block.number, proposal._proposedBlock) > _expiry){ proposal._status = ProposalStatus.Cancelled; emit ProposalEvent(chainID, depositNonce, ProposalStatus.Cancelled, resourceID, dataHash);} else{ require(dataHash == proposal._dataHash, \"datahash mismatch\"); proposal._yesVotes.push(msg.sender);}} if (proposal._status != ProposalStatus.Cancelled){ _hasVotedOnProposal[nonceAndID][dataHash][msg.sender] = true; emit ProposalVote(chainID, depositNonce, proposal._status, resourceID); if (_relayerThreshold <= 1 || proposal._yesVotes.length >= _relayerThreshold){ proposal._status = ProposalStatus.Passed; emit ProposalEvent(chainID, depositNonce, ProposalStatus.Passed, resourceID, dataHash);}}}",
                                "modifiers": [
                                    "onlyRelayers",
                                    "whenNotPaused"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint8",
                                        "name": "chainID"
                                    },
                                    {
                                        "type": "uint64",
                                        "name": "depositNonce"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "resourceID"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "dataHash"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_relayerThreshold",
                                        "",
                                        "Bridge"
                                    ],
                                    [
                                        "_totalProposals",
                                        "",
                                        "Bridge"
                                    ],
                                    [
                                        "_expiry",
                                        "",
                                        "Bridge"
                                    ],
                                    [
                                        "_resourceIDToHandlerAddress",
                                        "",
                                        "Bridge"
                                    ],
                                    [
                                        "_proposals",
                                        "",
                                        "Bridge"
                                    ],
                                    [
                                        "_hasVotedOnProposal",
                                        "",
                                        "Bridge"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_proposals",
                                        "",
                                        "Bridge"
                                    ],
                                    [
                                        "_hasVotedOnProposal",
                                        "",
                                        "Bridge"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SafeMath.sub",
                                        "Pausable.whenNotPaused",
                                        "Bridge.onlyRelayers"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "29350b1b712b282c47b50eea0d4a0251"
                            }
                        ],
                        "cancelProposal": [
                            {
                                "visibility": "public",
                                "content": "function cancelProposal(uint8 chainID, uint64 depositNonce, bytes32 dataHash) public onlyAdminOrRelayer{ uint72 nonceAndID = (uint72(depositNonce) << 8) | uint72(chainID); Proposal storage proposal = _proposals[nonceAndID][dataHash]; require(proposal._status != ProposalStatus.Cancelled, \"Proposal already cancelled\"); require(sub(block.number, proposal._proposedBlock) > _expiry, \"Proposal not at expiry threshold\"); proposal._status = ProposalStatus.Cancelled; emit ProposalEvent(chainID, depositNonce, ProposalStatus.Cancelled, proposal._resourceID, proposal._dataHash);}",
                                "modifiers": [
                                    "onlyAdminOrRelayer"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint8",
                                        "name": "chainID"
                                    },
                                    {
                                        "type": "uint64",
                                        "name": "depositNonce"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "dataHash"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_expiry",
                                        "",
                                        "Bridge"
                                    ],
                                    [
                                        "_proposals",
                                        "",
                                        "Bridge"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SafeMath.sub",
                                        "Bridge.onlyAdminOrRelayer"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "48d1052ff72545edc43c634b995ff876"
                            }
                        ],
                        "executeProposal": [
                            {
                                "visibility": "external",
                                "content": "function executeProposal(uint8 chainID, uint64 depositNonce, bytes calldata data, bytes32 resourceID) external onlyRelayers whenNotPaused{ address handler = _resourceIDToHandlerAddress[resourceID]; uint72 nonceAndID = (uint72(depositNonce) << 8) | uint72(chainID); bytes32 dataHash = keccak256(abi.encodePacked(handler, data)); Proposal storage proposal = _proposals[nonceAndID][dataHash]; require(proposal._status != ProposalStatus.Inactive, \"proposal is not active\"); require(proposal._status == ProposalStatus.Passed, \"proposal already transferred\"); require(dataHash == proposal._dataHash, \"data doesn't match datahash\"); proposal._status = ProposalStatus.Executed; IDepositExecute depositHandler = IDepositExecute(_resourceIDToHandlerAddress[proposal._resourceID]); depositHandler.executeProposal(proposal._resourceID, data); emit ProposalEvent(chainID, depositNonce, proposal._status, proposal._resourceID, proposal._dataHash);}",
                                "modifiers": [
                                    "onlyRelayers",
                                    "whenNotPaused"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint8",
                                        "name": "chainID"
                                    },
                                    {
                                        "type": "uint64",
                                        "name": "depositNonce"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "data"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "resourceID"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_resourceIDToHandlerAddress",
                                        "",
                                        "Bridge"
                                    ],
                                    [
                                        "_proposals",
                                        "",
                                        "Bridge"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "IDepositExecute.executeProposal",
                                        "Bridge.onlyRelayers",
                                        "Pausable.whenNotPaused"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "81f44978a4daedaf5ed1fd4d0e0721ba"
                            }
                        ],
                        "transferFunds": [
                            {
                                "visibility": "external",
                                "content": "function transferFunds(address payable[] calldata addrs, uint[] calldata amounts) external onlyAdmin{ for (uint256 i = 0; i < addrs.length; i++){ addrs[i].transfer(amounts[i]);}}",
                                "modifiers": [
                                    "onlyAdmin"
                                ],
                                "parameters": [
                                    {
                                        "type": "address payable[] calldata",
                                        "name": "addrs"
                                    },
                                    {
                                        "type": "uint[] calldata",
                                        "name": "amounts"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Bridge.onlyAdmin"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "aeb6613f187806e1368cb1bf35b22607"
                            }
                        ]
                    },
                    "modifiers": {
                        "onlyAdmin": {
                            "parameters": [],
                            "content": "modifier onlyAdmin(){ _onlyAdmin(); _;}",
                            "reads": [],
                            "writes": [],
                            "external_calls": {
                                "__set__": true,
                                "values": [
                                    "Bridge._onlyAdmin"
                                ]
                            },
                            "md5": "af5cbf83ba8ee979b9a58ad9f1a2dbbb"
                        },
                        "onlyAdminOrRelayer": {
                            "parameters": [],
                            "content": "modifier onlyAdminOrRelayer(){ _onlyAdminOrRelayer(); _;}",
                            "reads": [],
                            "writes": [],
                            "external_calls": {
                                "__set__": true,
                                "values": [
                                    "Bridge._onlyAdminOrRelayer"
                                ]
                            },
                            "md5": "0638d48554681048177eb2b754c97b23"
                        },
                        "onlyRelayers": {
                            "parameters": [],
                            "content": "modifier onlyRelayers(){ _onlyRelayers(); _;}",
                            "reads": [],
                            "writes": [],
                            "external_calls": {
                                "__set__": true,
                                "values": [
                                    "Bridge._onlyRelayers"
                                ]
                            },
                            "md5": "2ab10dec0938d7c5d88f304463868c1f"
                        },
                        "onlyOperators": {
                            "parameters": [],
                            "content": "modifier onlyOperators(){ _onlyOperators(); _;}",
                            "reads": [],
                            "writes": [],
                            "external_calls": {
                                "__set__": true,
                                "values": [
                                    "Bridge._onlyOperators"
                                ]
                            },
                            "md5": "ef0c0a2d46dfe46ea882e023f9144bcb"
                        },
                        "onlyAdminOrOperator": {
                            "parameters": [],
                            "content": "modifier onlyAdminOrOperator(){ _onlyAdminOrOperator(); _;}",
                            "reads": [],
                            "writes": [],
                            "external_calls": {
                                "__set__": true,
                                "values": [
                                    "Bridge._onlyAdminOrOperator"
                                ]
                            },
                            "md5": "0ad03cff916f0a85052f21db8bfb7cb9"
                        }
                    },
                    "structs": {
                        "Proposal": {
                            "content": "Proposal{ bytes32 _resourceID; bytes32 _dataHash; address[] _yesVotes; address[] _noVotes; ProposalStatus _status; uint256 _proposedBlock;}"
                        }
                    },
                    "events": {
                        "RelayerThresholdChanged": {
                            "event": "RelayerThresholdChanged",
                            "content": "RelayerThresholdChanged(uint256 indexed newThreshold)"
                        },
                        "RelayerAdded": {
                            "event": "RelayerAdded",
                            "content": "RelayerAdded(address indexed relayer)"
                        },
                        "RelayerRemoved": {
                            "event": "RelayerRemoved",
                            "content": "RelayerRemoved(address indexed relayer)"
                        },
                        "OperatorAdded": {
                            "event": "OperatorAdded",
                            "content": "OperatorAdded(address indexed operator)"
                        },
                        "OperatorRemoved": {
                            "event": "OperatorRemoved",
                            "content": "OperatorRemoved(address indexed operator)"
                        },
                        "Deposit": {
                            "event": "Deposit",
                            "content": "Deposit( uint8 indexed destinationChainID, bytes32 indexed resourceID, uint64 indexed depositNonce )"
                        },
                        "ProposalEvent": {
                            "event": "ProposalEvent",
                            "content": "ProposalEvent( uint8 indexed originChainID, uint64 indexed depositNonce, ProposalStatus indexed status, bytes32 resourceID, bytes32 dataHash )"
                        },
                        "ProposalVote": {
                            "event": "ProposalVote",
                            "content": "ProposalVote( uint8 indexed originChainID, uint64 indexed depositNonce, ProposalStatus indexed status, bytes32 resourceID )"
                        }
                    },
                    "enums": {
                        "Vote": {
                            "content": "Vote{ No, Yes}"
                        },
                        "ProposalStatus": {
                            "content": "ProposalStatus{ Inactive, Active, Passed, Executed, Cancelled}"
                        }
                    },
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "EnumerableSet._contains": "1741e13e15ea9a9f210919d1c3788e12",
                "EnumerableSet._add": "ad2b7769dc9b89055623e5cf9cf8a379",
                "EnumerableSet._remove": "17c0cb919bc1b5be0cc90a5f63cce6a2",
                "EnumerableSet._length": "bc694b0bdf3b5a29dac66980d1d4182b",
                "EnumerableSet._at": "e1759b4e1992d27144a409f7b53a0ae1",
                "AccessControl._grantRole": "771494ac28e5f2aeb04be27c51120863",
                "AccessControl.hasRole": "9fbc7e2af1224ec2a5b77a3507366e7e",
                "AccessControl._revokeRole": "dc2c25cb40f6be919e8b4d4af191851f",
                "Pausable._whenNotPaused": "4e74b619a4ae7d47ea63ade339218071",
                "Pausable._whenPaused": "244b861dca8efe704a50f115a4288bf6",
                "Pausable.whenNotPaused": "13070b7b9d4213c896033612f58ceef6",
                "Pausable.whenPaused": "ea1719b12ad4b99e8ad37a9c274e591b",
                "SafeMath._sub": "9722b3989e0b9dbec015e2ba7a5898b7",
                "Bridge._onlyAdmin": "8482f4408f6a739960356e6ac07862f2",
                "Bridge._onlyAdminOrRelayer": "e312b08ebbb62fa2e9c5ef36ee3a071f",
                "Bridge._onlyRelayers": "a6412ace4cec6505c0f7c5b79f7a9431",
                "Bridge._onlyOperators": "a3b918829d84331ea55d8198c5ef23c3",
                "Bridge._onlyAdminOrOperator": "f20840dcb19be4cec879e3f934f06230",
                "Bridge.onlyAdmin": "af5cbf83ba8ee979b9a58ad9f1a2dbbb",
                "AccessControl.renounceRole": "aedd260ef7208937a1679e5447fe9131",
                "AccessControl.grantRole": "f4b059da9460f5d3d0f6b41f6571ddc9",
                "Bridge.onlyAdminOrOperator": "0ad03cff916f0a85052f21db8bfb7cb9",
                "Pausable._pause": "83aa8306c74a9cdc337e162f7945be7b",
                "Pausable._unpause": "973f4fe38cdb90400de5ab940d7c809b",
                "AccessControl.revokeRole": "a6204e95b6de4df653aa2ed5a13647e8",
                "IERCHandler.setResource": "552231eeee9723fb36fb620bdbb08075",
                "IGenericHandler.setResource": "07a16f99040b62181079ca3f076a0041",
                "IERCHandler.setBurnable": "50c6cff347fc27e2f17494a0a4bae2df",
                "Bridge._getFee": "e1c6a4bcb7274cb78bc759429404775c",
                "IERCHandler.updateBridgeAddress": "26b8f52dcde7ab180f418656cb08781b",
                "IERCHandler.withdraw": "7f6f8007b6e649adf29b6f03d238733f",
                "IDepositExecute.deposit": "a15881c9eedaf2c739d41ceeb5bb2875",
                "SafeMath.sub": "cb302d12d1cd05f18a2d3c2b39e78043",
                "Bridge.onlyRelayers": "2ab10dec0938d7c5d88f304463868c1f",
                "Bridge.onlyAdminOrRelayer": "0638d48554681048177eb2b754c97b23",
                "IDepositExecute.executeProposal": "b430808e4e60da9b9edd5a86219fd95a"
            },
            "md5": "a50b643417508a1dc442ce458c6d6e75"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\MeterPassport20220206\\ERC20Handler\\ERC20Handler.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\MeterPassport20220206\\ERC20Handler\\ERC20Handler.sol",
            "filename": "ERC20Handler.sol",
            "imported_contracts": {},
            "contracts": {
                "IDepositExecute": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "deposit": [
                            {
                                "visibility": "external",
                                "content": "function deposit(bytes32 resourceID, uint8 destinationChainID, uint64 depositNonce, address depositer, bytes calldata data) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "resourceID"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "destinationChainID"
                                    },
                                    {
                                        "type": "uint64",
                                        "name": "depositNonce"
                                    },
                                    {
                                        "type": "address",
                                        "name": "depositer"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "data"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "a15881c9eedaf2c739d41ceeb5bb2875"
                            }
                        ],
                        "executeProposal": [
                            {
                                "visibility": "external",
                                "content": "function executeProposal(bytes32 resourceID, bytes calldata data) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "resourceID"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "data"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "b430808e4e60da9b9edd5a86219fd95a"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": [
                        [
                            "",
                            "ERC20Handler"
                        ]
                    ]
                },
                "IWETH": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "deposit": [
                            {
                                "visibility": "external",
                                "content": "function deposit() external payable;",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": true,
                                "md5": "4f2eec90abd519258d97a4283a54e2f1"
                            }
                        ],
                        "transfer": [
                            {
                                "visibility": "external",
                                "content": "function transfer(address to, uint value) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "value"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "0587b6354cf0d3773c8593eb4103d819"
                            }
                        ],
                        "withdraw": [
                            {
                                "visibility": "external",
                                "content": "function withdraw(uint) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": null
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "b3e698980247640e9fe99c060e4921fc"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                },
                "IERCHandler": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "setResource": [
                            {
                                "visibility": "external",
                                "content": "function setResource(bytes32 resourceID, address contractAddress) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "resourceID"
                                    },
                                    {
                                        "type": "address",
                                        "name": "contractAddress"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "552231eeee9723fb36fb620bdbb08075"
                            }
                        ],
                        "setBurnable": [
                            {
                                "visibility": "external",
                                "content": "function setBurnable(address contractAddress) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "contractAddress"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "50c6cff347fc27e2f17494a0a4bae2df"
                            }
                        ],
                        "withdraw": [
                            {
                                "visibility": "external",
                                "content": "function withdraw(address tokenAddress, address recipient, uint256 amountOrTokenID) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "tokenAddress"
                                    },
                                    {
                                        "type": "address",
                                        "name": "recipient"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amountOrTokenID"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "7f6f8007b6e649adf29b6f03d238733f"
                            }
                        ],
                        "_wtokenAddress": [
                            {
                                "visibility": "external",
                                "content": "function _wtokenAddress() external returns (address);",
                                "modifiers": [],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c0bfce1283c6a141b2dca1cf4d3dee1b"
                            }
                        ],
                        "updateBridgeAddress": [
                            {
                                "visibility": "external",
                                "content": "function updateBridgeAddress(address newBridgeAddress) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "newBridgeAddress"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "26b8f52dcde7ab180f418656cb08781b"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": [
                        [
                            "",
                            "HandlerHelpers"
                        ]
                    ]
                },
                "HandlerHelpers": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "IERCHandler"
                    ],
                    "state_variables": {
                        "_bridgeAddress": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public _bridgeAddress;"
                        },
                        "_wtokenAddress": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": true,
                            "initial_value": null,
                            "content": "address public override _wtokenAddress;"
                        },
                        "_resourceIDToTokenContractAddress": {
                            "type": "mapping (bytes32 => address)",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping (bytes32 => address) public _resourceIDToTokenContractAddress;"
                        },
                        "_tokenContractAddressToResourceID": {
                            "type": "mapping (address => bytes32)",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping (address => bytes32) public _tokenContractAddressToResourceID;"
                        },
                        "_contractWhitelist": {
                            "type": "mapping (address => bool)",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping (address => bool) public _contractWhitelist;"
                        },
                        "_burnList": {
                            "type": "mapping (address => bool)",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping (address => bool) public _burnList;"
                        }
                    },
                    "functions": {
                        "_onlyBridge": [
                            {
                                "visibility": "private",
                                "content": "function _onlyBridge() private{ require(msg.sender == _bridgeAddress, \"sender must be bridge contract \");}",
                                "modifiers": [],
                                "parameters": [],
                                "returns": [],
                                "reads": [
                                    [
                                        "_bridgeAddress",
                                        "",
                                        "HandlerHelpers"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "fee1a9234392ef4f75df54abe2389d55"
                            }
                        ],
                        "setResource": [
                            {
                                "visibility": "external",
                                "content": "function setResource(bytes32 resourceID, address contractAddress) external override onlyBridge{ _setResource(resourceID, contractAddress);}",
                                "modifiers": [
                                    "override",
                                    "onlyBridge"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "resourceID"
                                    },
                                    {
                                        "type": "address",
                                        "name": "contractAddress"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "HandlerHelpers._setResource",
                                        "HandlerHelpers.onlyBridge"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "b36fe6292d2e653f0c523290a129540d"
                            }
                        ],
                        "setBurnable": [
                            {
                                "visibility": "external",
                                "content": "function setBurnable(address contractAddress) external override onlyBridge{ _setBurnable(contractAddress);}",
                                "modifiers": [
                                    "override",
                                    "onlyBridge"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "contractAddress"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "HandlerHelpers._setBurnable",
                                        "HandlerHelpers.onlyBridge"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "720b99b85d012bcac18e47da24095786"
                            }
                        ],
                        "withdraw": [
                            {
                                "visibility": "external",
                                "content": "function withdraw(address tokenAddress, address recipient, uint256 amountOrTokenID) external virtual override{}",
                                "modifiers": [
                                    "virtual",
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "tokenAddress"
                                    },
                                    {
                                        "type": "address",
                                        "name": "recipient"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amountOrTokenID"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c9b0b6db2edf29902113155867125e04"
                            }
                        ],
                        "_setResource": [
                            {
                                "visibility": "internal",
                                "content": "function _setResource(bytes32 resourceID, address contractAddress) internal{ _resourceIDToTokenContractAddress[resourceID] = contractAddress; _tokenContractAddressToResourceID[contractAddress] = resourceID; _contractWhitelist[contractAddress] = true;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "resourceID"
                                    },
                                    {
                                        "type": "address",
                                        "name": "contractAddress"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_resourceIDToTokenContractAddress",
                                        "",
                                        "HandlerHelpers"
                                    ],
                                    [
                                        "_tokenContractAddressToResourceID",
                                        "",
                                        "HandlerHelpers"
                                    ],
                                    [
                                        "_contractWhitelist",
                                        "",
                                        "HandlerHelpers"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_resourceIDToTokenContractAddress",
                                        "",
                                        "HandlerHelpers"
                                    ],
                                    [
                                        "_tokenContractAddressToResourceID",
                                        "",
                                        "HandlerHelpers"
                                    ],
                                    [
                                        "_contractWhitelist",
                                        "",
                                        "HandlerHelpers"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "9717a5a12f0749ad58a467fe45ed7e63"
                            }
                        ],
                        "_setBurnable": [
                            {
                                "visibility": "internal",
                                "content": "function _setBurnable(address contractAddress) internal{ require(_contractWhitelist[contractAddress], \"provided contract is not whitelisted\"); _burnList[contractAddress] = true;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "contractAddress"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_contractWhitelist",
                                        "",
                                        "HandlerHelpers"
                                    ],
                                    [
                                        "_burnList",
                                        "",
                                        "HandlerHelpers"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_burnList",
                                        "",
                                        "HandlerHelpers"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "dc029ea48dbc6331e4711561d93a2b64"
                            }
                        ],
                        "updateBridgeAddress": [
                            {
                                "visibility": "external",
                                "content": "function updateBridgeAddress(address newBridgeAddress) external virtual override{}",
                                "modifiers": [
                                    "virtual",
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "newBridgeAddress"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "6273db6b616ff9c9a888ea78da17908f"
                            }
                        ]
                    },
                    "modifiers": {
                        "onlyBridge": {
                            "parameters": [],
                            "content": "modifier onlyBridge(){ _onlyBridge(); _;}",
                            "reads": [],
                            "writes": [],
                            "external_calls": {
                                "__set__": true,
                                "values": [
                                    "HandlerHelpers._onlyBridge"
                                ]
                            },
                            "md5": "457e4dff43742d217be66bf902930b86"
                        }
                    },
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "SafeMath": {
                    "type": {
                        "__CT__": true,
                        "value": 2
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "add": [
                            {
                                "visibility": "internal",
                                "content": "function add(uint256 a, uint256 b) internal pure returns (uint256){ uint256 c = a + b; require(c >= a, \"SafeMath: addition overflow\"); return c;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "a"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "b"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "b83a169007730f80a7fc79bee8748fff"
                            }
                        ],
                        "sub": [
                            {
                                "visibility": "internal",
                                "content": "function sub(uint256 a, uint256 b) internal pure returns (uint256){ return sub(a, b, \"SafeMath: subtraction overflow\");}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "a"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "b"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SafeMath.sub"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "972c2868144778b0617e55a6f97163a0"
                            },
                            {
                                "visibility": "internal",
                                "content": "function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256){ require(b <= a, errorMessage); uint256 c = a - b; return c;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "a"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "b"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "errorMessage"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SafeMath.sub"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "5005b7d925d95cb4c4c0f092235e9f5d"
                            }
                        ],
                        "mul": [
                            {
                                "visibility": "internal",
                                "content": "function mul(uint256 a, uint256 b) internal pure returns (uint256){ if (a == 0){ return 0;} uint256 c = a * b; require(c / a == b, \"SafeMath: multiplication overflow\"); return c;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "a"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "b"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "5622448ca508810ce734d0cb10517566"
                            }
                        ],
                        "div": [
                            {
                                "visibility": "internal",
                                "content": "function div(uint256 a, uint256 b) internal pure returns (uint256){ return div(a, b, \"SafeMath: division by zero\");}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "a"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "b"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SafeMath.div"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "371f945bc2211ac7c63e7277fb7222a7"
                            },
                            {
                                "visibility": "internal",
                                "content": "function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256){ require(b > 0, errorMessage); uint256 c = a / b; return c;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "a"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "b"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "errorMessage"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SafeMath.div"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "bff731811ec791ca1a5d6bc88d8d75a5"
                            }
                        ],
                        "mod": [
                            {
                                "visibility": "internal",
                                "content": "function mod(uint256 a, uint256 b) internal pure returns (uint256){ return mod(a, b, \"SafeMath: modulo by zero\");}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "a"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "b"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SafeMath.mod"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "50a3733021c21a71491ee85ffb90a2a4"
                            },
                            {
                                "visibility": "internal",
                                "content": "function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256){ require(b != 0, errorMessage); return a % b;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "a"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "b"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "errorMessage"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SafeMath.mod"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "8ec02abe488c084092f946ae1c4a8ccd"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "IERC20": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "totalSupply": [
                            {
                                "visibility": "external",
                                "content": "function totalSupply() external view returns (uint256);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "5e1d12e61f4bf4b37161d9b684742570"
                            }
                        ],
                        "balanceOf": [
                            {
                                "visibility": "external",
                                "content": "function balanceOf(address account) external view returns (uint256);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "account"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "3ac17e7782366957c960d337a4a648cd"
                            }
                        ],
                        "transfer": [
                            {
                                "visibility": "external",
                                "content": "function transfer(address recipient, uint256 amount) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "recipient"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "98b540da9047ee99bce7fadde65d04b7"
                            }
                        ],
                        "allowance": [
                            {
                                "visibility": "external",
                                "content": "function allowance(address owner, address spender) external view returns (uint256);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "owner"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c93791d09d789aed33b9725d482af442"
                            }
                        ],
                        "approve": [
                            {
                                "visibility": "external",
                                "content": "function approve(address spender, uint256 amount) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "7c80d707df648dc123a10c69a1150edc"
                            }
                        ],
                        "transferFrom": [
                            {
                                "visibility": "external",
                                "content": "function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "sender"
                                    },
                                    {
                                        "type": "address",
                                        "name": "recipient"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c134d67e13a988b449de71dd226682ab"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {
                        "Transfer": {
                            "event": "Transfer",
                            "content": "Transfer(address indexed from, address indexed to, uint256 value)"
                        },
                        "Approval": {
                            "event": "Approval",
                            "content": "Approval(address indexed owner, address indexed spender, uint256 value)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": [
                        [
                            "",
                            "ERC20"
                        ]
                    ]
                },
                "EnumerableSet": {
                    "type": {
                        "__CT__": true,
                        "value": 2
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "_add": [
                            {
                                "visibility": "private",
                                "content": "function _add(Set storage set, bytes32 value) private returns (bool){ if (!_contains(set, value)){ set._values.push(value); set._indexes[value] = set._values.length; return true;} else{ return false;}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "Set storage",
                                        "name": "set"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "value"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "EnumerableSet._contains"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "ad2b7769dc9b89055623e5cf9cf8a379"
                            }
                        ],
                        "_remove": [
                            {
                                "visibility": "private",
                                "content": "function _remove(Set storage set, bytes32 value) private returns (bool){ uint256 valueIndex = set._indexes[value]; if (valueIndex != 0){ uint256 toDeleteIndex = valueIndex - 1; uint256 lastIndex = set._values.length - 1; bytes32 lastvalue = set._values[lastIndex]; set._values[toDeleteIndex] = lastvalue; set._indexes[lastvalue] = toDeleteIndex + 1; set._values.pop(); delete set._indexes[value]; return true;} else{ return false;}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "Set storage",
                                        "name": "set"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "value"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "17c0cb919bc1b5be0cc90a5f63cce6a2"
                            }
                        ],
                        "_contains": [
                            {
                                "visibility": "private",
                                "content": "function _contains(Set storage set, bytes32 value) private view returns (bool){ return set._indexes[value] != 0;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "Set storage",
                                        "name": "set"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "value"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "1741e13e15ea9a9f210919d1c3788e12"
                            }
                        ],
                        "_length": [
                            {
                                "visibility": "private",
                                "content": "function _length(Set storage set) private view returns (uint256){ return set._values.length;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "Set storage",
                                        "name": "set"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "bc694b0bdf3b5a29dac66980d1d4182b"
                            }
                        ],
                        "_at": [
                            {
                                "visibility": "private",
                                "content": "function _at(Set storage set, uint256 index) private view returns (bytes32){ require(set._values.length > index, \"EnumerableSet: index out of bounds\"); return set._values[index];}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "Set storage",
                                        "name": "set"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "index"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "e1759b4e1992d27144a409f7b53a0ae1"
                            }
                        ],
                        "add": [
                            {
                                "visibility": "internal",
                                "content": "function add(AddressSet storage set, address value) internal returns (bool){ return _add(set._inner, bytes32(uint256(value)));}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "AddressSet storage",
                                        "name": "set"
                                    },
                                    {
                                        "type": "address",
                                        "name": "value"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "EnumerableSet._add"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "1fdf3a5d95cb556e55ddaf3c7d6b02ff"
                            },
                            {
                                "visibility": "internal",
                                "content": "function add(UintSet storage set, uint256 value) internal returns (bool){ return _add(set._inner, bytes32(value));}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "UintSet storage",
                                        "name": "set"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "EnumerableSet._add"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "852b0f9f2830320e0672bf0227599b4a"
                            }
                        ],
                        "remove": [
                            {
                                "visibility": "internal",
                                "content": "function remove(AddressSet storage set, address value) internal returns (bool){ return _remove(set._inner, bytes32(uint256(value)));}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "AddressSet storage",
                                        "name": "set"
                                    },
                                    {
                                        "type": "address",
                                        "name": "value"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "EnumerableSet._remove"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "31b1ad98ef7bca056e5b57836449c950"
                            },
                            {
                                "visibility": "internal",
                                "content": "function remove(UintSet storage set, uint256 value) internal returns (bool){ return _remove(set._inner, bytes32(value));}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "UintSet storage",
                                        "name": "set"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "EnumerableSet._remove"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "d4f789eb112120d7d4ed25cdb162a126"
                            }
                        ],
                        "contains": [
                            {
                                "visibility": "internal",
                                "content": "function contains(AddressSet storage set, address value) internal view returns (bool){ return _contains(set._inner, bytes32(uint256(value)));}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "AddressSet storage",
                                        "name": "set"
                                    },
                                    {
                                        "type": "address",
                                        "name": "value"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "EnumerableSet._contains"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "d75a8a9561b44eed6c4ea9a84b67ac90"
                            },
                            {
                                "visibility": "internal",
                                "content": "function contains(UintSet storage set, uint256 value) internal view returns (bool){ return _contains(set._inner, bytes32(value));}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "UintSet storage",
                                        "name": "set"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "EnumerableSet._contains"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "e69466d3da969494102a54751ab9f3a8"
                            }
                        ],
                        "length": [
                            {
                                "visibility": "internal",
                                "content": "function length(AddressSet storage set) internal view returns (uint256){ return _length(set._inner);}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "AddressSet storage",
                                        "name": "set"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "EnumerableSet._length"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "ecedb9e5fc6c79ed204867d3da23afe5"
                            },
                            {
                                "visibility": "internal",
                                "content": "function length(UintSet storage set) internal view returns (uint256){ return _length(set._inner);}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "UintSet storage",
                                        "name": "set"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "EnumerableSet._length"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "cea2e30ad0bc0364c37de49fbeb20dc5"
                            }
                        ],
                        "at": [
                            {
                                "visibility": "internal",
                                "content": "function at(AddressSet storage set, uint256 index) internal view returns (address){ return address(uint256(_at(set._inner, index)));}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "AddressSet storage",
                                        "name": "set"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "index"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "EnumerableSet._at"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "b3d2f6abcb57b09a1952191a978ae7bc"
                            },
                            {
                                "visibility": "internal",
                                "content": "function at(UintSet storage set, uint256 index) internal view returns (uint256){ return uint256(_at(set._inner, index));}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "UintSet storage",
                                        "name": "set"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "index"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "EnumerableSet._at"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "14de3a4f705bba70509f35b3dd44365f"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {
                        "Set": {
                            "content": "Set{ bytes32[] _values; mapping (bytes32 => uint256) _indexes;}"
                        },
                        "AddressSet": {
                            "content": "AddressSet{ Set _inner;}"
                        },
                        "UintSet": {
                            "content": "UintSet{ Set _inner;}"
                        }
                    },
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "Address": {
                    "type": {
                        "__CT__": true,
                        "value": 2
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "isContract": [
                            {
                                "visibility": "internal",
                                "content": "function isContract(address account) internal view returns (bool){ bytes32 codehash; bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470; assembly{ codehash := extcodehash(account)} return (codehash != accountHash && codehash != 0x0);}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "account"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "0bfe93cb7ea36f0ded62a360862b840e"
                            }
                        ],
                        "sendValue": [
                            {
                                "visibility": "internal",
                                "content": "function sendValue(address payable recipient, uint256 amount) internal{ require(address(this).balance >= amount, \"Address: insufficient balance\"); (bool success, ) = recipient.call{ value: amount} (\"\"); require(success, \"Address: unable to send value, recipient may have reverted\");}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address payable",
                                        "name": "recipient"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "4213f1701c2999f67f11de98a51e01f6"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "Context": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "internal",
                                "content": "constructor () internal{}",
                                "modifiers": [],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "2a23d0858cde090e7b199aa638ffd5dd"
                            }
                        ],
                        "_msgSender": [
                            {
                                "visibility": "internal",
                                "content": "function _msgSender() internal view virtual returns (address payable){ return msg.sender;}",
                                "modifiers": [
                                    "view",
                                    "virtual"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address payable",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "00e29fff2bd07c51e23e94ddc6a504c4"
                            }
                        ],
                        "_msgData": [
                            {
                                "visibility": "internal",
                                "content": "function _msgData() internal view virtual returns (bytes memory){ this; return msg.data;}",
                                "modifiers": [
                                    "view",
                                    "virtual"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "85862d5484a7dade4fadbe2620ef8307"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "AccessControl": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": true,
                    "inherits": [
                        "is",
                        "Context"
                    ],
                    "state_variables": {
                        "_roles": {
                            "type": "mapping (bytes32 => RoleData)",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping (bytes32 => RoleData) private _roles;"
                        },
                        "DEFAULT_ADMIN_ROLE": {
                            "type": "bytes32",
                            "visibility": "public",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "0x00",
                            "content": "bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;"
                        }
                    },
                    "functions": {
                        "hasRole": [
                            {
                                "visibility": "public",
                                "content": "function hasRole(bytes32 role, address account) public view returns (bool){ return _roles[role].members.contains(account);}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "role"
                                    },
                                    {
                                        "type": "address",
                                        "name": "account"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_roles",
                                        "",
                                        "AccessControl"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "9fbc7e2af1224ec2a5b77a3507366e7e"
                            }
                        ],
                        "getRoleMemberCount": [
                            {
                                "visibility": "public",
                                "content": "function getRoleMemberCount(bytes32 role) public view returns (uint256){ return _roles[role].members.length();}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "role"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_roles",
                                        "",
                                        "AccessControl"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "19a16dd0a34a0f806edd554f550978bd"
                            }
                        ],
                        "getRoleMember": [
                            {
                                "visibility": "public",
                                "content": "function getRoleMember(bytes32 role, uint256 index) public view returns (address){ return _roles[role].members.at(index);}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "role"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "index"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_roles",
                                        "",
                                        "AccessControl"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "44de99df62eb881a66d6f5892e1bf93d"
                            }
                        ],
                        "getRoleAdmin": [
                            {
                                "visibility": "public",
                                "content": "function getRoleAdmin(bytes32 role) public view returns (bytes32){ return _roles[role].adminRole;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "role"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_roles",
                                        "",
                                        "AccessControl"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "f5e4d0f5949141eddc05c7f023643434"
                            }
                        ],
                        "grantRole": [
                            {
                                "visibility": "public",
                                "content": "function grantRole(bytes32 role, address account) public virtual{ require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to grant\"); _grantRole(role, account);}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "role"
                                    },
                                    {
                                        "type": "address",
                                        "name": "account"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_roles",
                                        "",
                                        "AccessControl"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AccessControl.hasRole",
                                        "AccessControl._grantRole",
                                        "AccessControl._msgSender"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "f4b059da9460f5d3d0f6b41f6571ddc9"
                            }
                        ],
                        "revokeRole": [
                            {
                                "visibility": "public",
                                "content": "function revokeRole(bytes32 role, address account) public virtual{ require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to revoke\"); _revokeRole(role, account);}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "role"
                                    },
                                    {
                                        "type": "address",
                                        "name": "account"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_roles",
                                        "",
                                        "AccessControl"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AccessControl._revokeRole",
                                        "AccessControl.hasRole",
                                        "AccessControl._msgSender"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "a6204e95b6de4df653aa2ed5a13647e8"
                            }
                        ],
                        "renounceRole": [
                            {
                                "visibility": "public",
                                "content": "function renounceRole(bytes32 role, address account) public virtual{ require(account == _msgSender(), \"AccessControl: can only renounce roles for self\"); _revokeRole(role, account);}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "role"
                                    },
                                    {
                                        "type": "address",
                                        "name": "account"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AccessControl._revokeRole",
                                        "AccessControl._msgSender"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "aedd260ef7208937a1679e5447fe9131"
                            }
                        ],
                        "_setupRole": [
                            {
                                "visibility": "internal",
                                "content": "function _setupRole(bytes32 role, address account) internal virtual{ _grantRole(role, account);}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "role"
                                    },
                                    {
                                        "type": "address",
                                        "name": "account"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AccessControl._grantRole"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "af0a23debe0f001cc6c8bf7d6a9618e6"
                            }
                        ],
                        "_setRoleAdmin": [
                            {
                                "visibility": "internal",
                                "content": "function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual{ _roles[role].adminRole = adminRole;}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "role"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "adminRole"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_roles",
                                        "",
                                        "AccessControl"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "48c0248d359b90d47d2a8796ed11f35b"
                            }
                        ],
                        "_grantRole": [
                            {
                                "visibility": "private",
                                "content": "function _grantRole(bytes32 role, address account) private{ if (_roles[role].members.add(account)){ emit RoleGranted(role, account, _msgSender());}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "role"
                                    },
                                    {
                                        "type": "address",
                                        "name": "account"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_roles",
                                        "",
                                        "AccessControl"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AccessControl._msgSender"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "771494ac28e5f2aeb04be27c51120863"
                            }
                        ],
                        "_revokeRole": [
                            {
                                "visibility": "private",
                                "content": "function _revokeRole(bytes32 role, address account) private{ if (_roles[role].members.remove(account)){ emit RoleRevoked(role, account, _msgSender());}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "role"
                                    },
                                    {
                                        "type": "address",
                                        "name": "account"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_roles",
                                        "",
                                        "AccessControl"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AccessControl._msgSender"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "dc2c25cb40f6be919e8b4d4af191851f"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {
                        "RoleData": {
                            "content": "RoleData{ EnumerableSet.AddressSet members; bytes32 adminRole;}"
                        }
                    },
                    "events": {
                        "RoleGranted": {
                            "event": "RoleGranted",
                            "content": "RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)"
                        },
                        "RoleRevoked": {
                            "event": "RoleRevoked",
                            "content": "RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "address": "Address"
                    }
                },
                "ERC20": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "Context",
                        "IERC20"
                    ],
                    "state_variables": {
                        "_balances": {
                            "type": "mapping (address => uint256)",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping (address => uint256) private _balances;"
                        },
                        "_allowances": {
                            "type": "mapping (address => mapping (address => uint256))",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping (address => mapping (address => uint256)) private _allowances;"
                        },
                        "_totalSupply": {
                            "type": "uint256",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256 private _totalSupply;"
                        },
                        "_name": {
                            "type": "string",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "string private _name;"
                        },
                        "_symbol": {
                            "type": "string",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "string private _symbol;"
                        },
                        "_decimals": {
                            "type": "uint8",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint8 private _decimals;"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (string memory name, string memory symbol) public{ _name = name; _symbol = symbol; _decimals = 18;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "string memory",
                                        "name": "name"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "symbol"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_name",
                                        "",
                                        "ERC20"
                                    ],
                                    [
                                        "_symbol",
                                        "",
                                        "ERC20"
                                    ],
                                    [
                                        "_decimals",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_name",
                                        "",
                                        "ERC20"
                                    ],
                                    [
                                        "_symbol",
                                        "",
                                        "ERC20"
                                    ],
                                    [
                                        "_decimals",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "7c0cc50083b58ec51607ed82540381f9"
                            }
                        ],
                        "name": [
                            {
                                "visibility": "public",
                                "content": "function name() public view returns (string memory){ return _name;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "string memory",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_name",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "8572f20ecd43eb9f02a2efc81fdc4578"
                            }
                        ],
                        "symbol": [
                            {
                                "visibility": "public",
                                "content": "function symbol() public view returns (string memory){ return _symbol;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "string memory",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_symbol",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "b002d129ce65d0f4df01da6ede3b5e4d"
                            }
                        ],
                        "decimals": [
                            {
                                "visibility": "public",
                                "content": "function decimals() public view returns (uint8){ return _decimals;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint8",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_decimals",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c396c5ca1d21fa7e84c10681e8d59b07"
                            }
                        ],
                        "totalSupply": [
                            {
                                "visibility": "public",
                                "content": "function totalSupply() public view override returns (uint256){ return _totalSupply;}",
                                "modifiers": [
                                    "view",
                                    "override"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_totalSupply",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "bb4ad2b782229755936696d1b68b36a4"
                            }
                        ],
                        "balanceOf": [
                            {
                                "visibility": "public",
                                "content": "function balanceOf(address account) public view override returns (uint256){ return _balances[account];}",
                                "modifiers": [
                                    "view",
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "account"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_balances",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c3e34cfaf7176fb234da98e9806cd30c"
                            }
                        ],
                        "transfer": [
                            {
                                "visibility": "public",
                                "content": "function transfer(address recipient, uint256 amount) public virtual override returns (bool){ _transfer(_msgSender(), recipient, amount); return true;}",
                                "modifiers": [
                                    "virtual",
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "recipient"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20._msgSender",
                                        "ERC20._transfer"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "3ee0674f770c2fd01c8fe1a77d179a27"
                            }
                        ],
                        "allowance": [
                            {
                                "visibility": "public",
                                "content": "function allowance(address owner, address spender) public view virtual override returns (uint256){ return _allowances[owner][spender];}",
                                "modifiers": [
                                    "view",
                                    "virtual",
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "owner"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_allowances",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "d7cbdea72a1a98a5910dc39323a9b2cc"
                            }
                        ],
                        "approve": [
                            {
                                "visibility": "public",
                                "content": "function approve(address spender, uint256 amount) public virtual override returns (bool){ _approve(_msgSender(), spender, amount); return true;}",
                                "modifiers": [
                                    "virtual",
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20._msgSender",
                                        "ERC20._approve"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "6a2b69527387a6c654cc23d45f984ac2"
                            }
                        ],
                        "transferFrom": [
                            {
                                "visibility": "public",
                                "content": "function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool){ _transfer(sender, recipient, amount); _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\")); return true;}",
                                "modifiers": [
                                    "virtual",
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "sender"
                                    },
                                    {
                                        "type": "address",
                                        "name": "recipient"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_allowances",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20._msgSender",
                                        "ERC20._approve",
                                        "ERC20._transfer"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "2148a38f6e5adea8b372012c016d9070"
                            }
                        ],
                        "increaseAllowance": [
                            {
                                "visibility": "public",
                                "content": "function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool){ _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue)); return true;}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "addedValue"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_allowances",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20._msgSender",
                                        "ERC20._approve"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "e2420d124f948c49ec7763d058d15157"
                            }
                        ],
                        "decreaseAllowance": [
                            {
                                "visibility": "public",
                                "content": "function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool){ _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\")); return true;}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "subtractedValue"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_allowances",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20._msgSender",
                                        "ERC20._approve"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "c9787278fddc63fad59c0d8d8adbcafe"
                            }
                        ],
                        "_transfer": [
                            {
                                "visibility": "internal",
                                "content": "function _transfer(address sender, address recipient, uint256 amount) internal virtual{ require(sender != address(0), \"ERC20: transfer from the zero address\"); require(recipient != address(0), \"ERC20: transfer to the zero address\"); _beforeTokenTransfer(sender, recipient, amount); _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\"); _balances[recipient] = _balances[recipient].add(amount); emit Transfer(sender, recipient, amount);}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "sender"
                                    },
                                    {
                                        "type": "address",
                                        "name": "recipient"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_balances",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_balances",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20._beforeTokenTransfer"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "fb62c220e2276721ee024f6b82f94489"
                            }
                        ],
                        "_mint": [
                            {
                                "visibility": "internal",
                                "content": "function _mint(address account, uint256 amount) internal virtual{ require(account != address(0), \"ERC20: mint to the zero address\"); _beforeTokenTransfer(address(0), account, amount); _totalSupply = _totalSupply.add(amount); _balances[account] = _balances[account].add(amount); emit Transfer(address(0), account, amount);}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "account"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_balances",
                                        "",
                                        "ERC20"
                                    ],
                                    [
                                        "_totalSupply",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_balances",
                                        "",
                                        "ERC20"
                                    ],
                                    [
                                        "_totalSupply",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20._beforeTokenTransfer",
                                        "_totalSupply.add"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "096242128c682603db1a0b0d903136f5"
                            }
                        ],
                        "_burn": [
                            {
                                "visibility": "internal",
                                "content": "function _burn(address account, uint256 amount) internal virtual{ require(account != address(0), \"ERC20: burn from the zero address\"); _beforeTokenTransfer(account, address(0), amount); _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\"); _totalSupply = _totalSupply.sub(amount); emit Transfer(account, address(0), amount);}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "account"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_balances",
                                        "",
                                        "ERC20"
                                    ],
                                    [
                                        "_totalSupply",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_balances",
                                        "",
                                        "ERC20"
                                    ],
                                    [
                                        "_totalSupply",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "_totalSupply.sub",
                                        "ERC20._beforeTokenTransfer"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "5a2372c1fd2a727cf0935156c997d1f5"
                            }
                        ],
                        "_approve": [
                            {
                                "visibility": "internal",
                                "content": "function _approve(address owner, address spender, uint256 amount) internal virtual{ require(owner != address(0), \"ERC20: approve from the zero address\"); require(spender != address(0), \"ERC20: approve to the zero address\"); _allowances[owner][spender] = amount; emit Approval(owner, spender, amount);}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "owner"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_allowances",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_allowances",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "39fc3d2c59f8296512abc90ea29b08bf"
                            }
                        ],
                        "_setupDecimals": [
                            {
                                "visibility": "internal",
                                "content": "function _setupDecimals(uint8 decimals_) internal{ _decimals = decimals_;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint8",
                                        "name": "decimals_"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_decimals",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_decimals",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "f7745f15903633a0ae970d1ffac10a13"
                            }
                        ],
                        "_beforeTokenTransfer": [
                            {
                                "visibility": "internal",
                                "content": "function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual{}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20._beforeTokenTransfer",
                                        "ERC20Pausable.paused"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "ba41c5ef0cd7854682c8a8381eef9051"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "uint256": "SafeMath",
                        "address": "Address"
                    }
                },
                "ERC20Burnable": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": true,
                    "inherits": [
                        "is",
                        "Context",
                        "ERC20"
                    ],
                    "state_variables": {},
                    "functions": {
                        "burn": [
                            {
                                "visibility": "public",
                                "content": "function burn(uint256 amount) public virtual{ _burn(_msgSender(), amount);}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20._burn",
                                        "ERC20._msgSender"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "428cefcc6e4f5aace54672f0f6094c37"
                            }
                        ],
                        "burnFrom": [
                            {
                                "visibility": "public",
                                "content": "function burnFrom(address account, uint256 amount) public virtual{ uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \"ERC20: burn amount exceeds allowance\"); _approve(account, _msgSender(), decreasedAllowance); _burn(account, amount);}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "account"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20._burn",
                                        "ERC20Burnable.allowance",
                                        "ERC20._msgSender",
                                        "ERC20._approve"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "38ccb3d820bb411699d3ecfa4b23f070"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "Pausable": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "Context"
                    ],
                    "state_variables": {
                        "_paused": {
                            "type": "bool",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "bool private _paused;"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "internal",
                                "content": "constructor () internal{ _paused = false;}",
                                "modifiers": [],
                                "parameters": [],
                                "returns": [],
                                "reads": [
                                    [
                                        "_paused",
                                        "",
                                        "Pausable"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_paused",
                                        "",
                                        "Pausable"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "d16e6d6e12403bddd7cd78a7ea9fd15a"
                            }
                        ],
                        "paused": [
                            {
                                "visibility": "public",
                                "content": "function paused() public view returns (bool){ return _paused;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_paused",
                                        "",
                                        "Pausable"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "2cd42665ca6fa1ede9e137f8a2939e65"
                            }
                        ],
                        "_pause": [
                            {
                                "visibility": "internal",
                                "content": "function _pause() internal virtual whenNotPaused{ _paused = true; emit Paused(_msgSender());}",
                                "modifiers": [
                                    "virtual",
                                    "whenNotPaused"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [
                                    [
                                        "_paused",
                                        "",
                                        "Pausable"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_paused",
                                        "",
                                        "Pausable"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Pausable._msgSender",
                                        "Pausable.whenNotPaused"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "5f208620cb437050ec0355ecb0c3e32b"
                            }
                        ],
                        "_unpause": [
                            {
                                "visibility": "internal",
                                "content": "function _unpause() internal virtual whenPaused{ _paused = false; emit Unpaused(_msgSender());}",
                                "modifiers": [
                                    "virtual",
                                    "whenPaused"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [
                                    [
                                        "_paused",
                                        "",
                                        "Pausable"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_paused",
                                        "",
                                        "Pausable"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Pausable._msgSender",
                                        "Pausable.whenPaused"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "07005ace67272c8e873543f86aa97854"
                            }
                        ]
                    },
                    "modifiers": {
                        "whenNotPaused": {
                            "parameters": [],
                            "content": "modifier whenNotPaused(){ require(!_paused, \"Pausable: paused\"); _;}",
                            "reads": [
                                [
                                    "_paused",
                                    "",
                                    "Pausable"
                                ]
                            ],
                            "writes": [],
                            "external_calls": [],
                            "md5": "916b8aef83a979053b70140c3000aa2c"
                        },
                        "whenPaused": {
                            "parameters": [],
                            "content": "modifier whenPaused(){ require(_paused, \"Pausable: not paused\"); _;}",
                            "reads": [
                                [
                                    "_paused",
                                    "",
                                    "Pausable"
                                ]
                            ],
                            "writes": [],
                            "external_calls": [],
                            "md5": "e0b4b9a4d589dd82240753f62436415f"
                        }
                    },
                    "structs": {},
                    "events": {
                        "Paused": {
                            "event": "Paused",
                            "content": "Paused(address account)"
                        },
                        "Unpaused": {
                            "event": "Unpaused",
                            "content": "Unpaused(address account)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "ERC20Pausable": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": true,
                    "inherits": [
                        "is",
                        "ERC20",
                        "Pausable"
                    ],
                    "state_variables": {},
                    "functions": {
                        "_beforeTokenTransfer": [
                            {
                                "visibility": "internal",
                                "content": "function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override{ super._beforeTokenTransfer(from, to, amount); require(!paused(), \"ERC20Pausable: token transfer while paused\");}",
                                "modifiers": [
                                    "virtual",
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "13ca67585a32fe8369f90ee8077fe252"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "ERC20PresetMinterPauser": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "Context",
                        "AccessControl",
                        "ERC20Burnable",
                        "ERC20Pausable"
                    ],
                    "state_variables": {
                        "MINTER_ROLE": {
                            "type": "bytes32",
                            "visibility": "public",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "keccak256(\"MINTER_ROLE\")",
                            "content": "bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");"
                        },
                        "PAUSER_ROLE": {
                            "type": "bytes32",
                            "visibility": "public",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "keccak256(\"PAUSER_ROLE\")",
                            "content": "bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (string memory name, string memory symbol) public ERC20(name, symbol){ _setupRole(DEFAULT_ADMIN_ROLE, _msgSender()); _setupRole(MINTER_ROLE, _msgSender()); _setupRole(PAUSER_ROLE, _msgSender());}",
                                "modifiers": [
                                    "ERC20(name, symbol)"
                                ],
                                "parameters": [
                                    {
                                        "type": "string memory",
                                        "name": "name"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "symbol"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "DEFAULT_ADMIN_ROLE",
                                        "",
                                        "AccessControl"
                                    ],
                                    [
                                        "MINTER_ROLE",
                                        "",
                                        "ERC20PresetMinterPauser"
                                    ],
                                    [
                                        "PAUSER_ROLE",
                                        "",
                                        "ERC20PresetMinterPauser"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "4786253fdb3d2833107fe52cb662c170"
                            }
                        ],
                        "mint": [
                            {
                                "visibility": "public",
                                "content": "function mint(address to, uint256 amount) public{ require(hasRole(MINTER_ROLE, _msgSender()), \"ERC20PresetMinterPauser: must have minter role to mint\"); _mint(to, amount);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "MINTER_ROLE",
                                        "",
                                        "ERC20PresetMinterPauser"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Pausable._msgSender",
                                        "AccessControl.hasRole",
                                        "ERC20._mint"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "37933d8beef3fb374564a7eb088f352c"
                            }
                        ],
                        "pause": [
                            {
                                "visibility": "public",
                                "content": "function pause() public{ require(hasRole(PAUSER_ROLE, _msgSender()), \"ERC20PresetMinterPauser: must have pauser role to pause\"); _pause();}",
                                "modifiers": [],
                                "parameters": [],
                                "returns": [],
                                "reads": [
                                    [
                                        "PAUSER_ROLE",
                                        "",
                                        "ERC20PresetMinterPauser"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Pausable._pause",
                                        "Pausable._msgSender",
                                        "AccessControl.hasRole"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "916b4641d4b8b28b5fdc80d92ee764b4"
                            }
                        ],
                        "unpause": [
                            {
                                "visibility": "public",
                                "content": "function unpause() public{ require(hasRole(PAUSER_ROLE, _msgSender()), \"ERC20PresetMinterPauser: must have pauser role to unpause\"); _unpause();}",
                                "modifiers": [],
                                "parameters": [],
                                "returns": [],
                                "reads": [
                                    [
                                        "PAUSER_ROLE",
                                        "",
                                        "ERC20PresetMinterPauser"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Pausable._msgSender",
                                        "AccessControl.hasRole",
                                        "Pausable._unpause"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "95e26c58303a1108dcd7ff95c5faa983"
                            }
                        ],
                        "_beforeTokenTransfer": [
                            {
                                "visibility": "internal",
                                "content": "function _beforeTokenTransfer(address from, address to, uint256 amount) internal override(ERC20, ERC20Pausable){ super._beforeTokenTransfer(from, to, amount);}",
                                "modifiers": [
                                    "override(ERC20, ERC20Pausable)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "a8346614a889859ee34b98afdfdb41c0"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "ERC20Safe": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "fundERC20": [
                            {
                                "visibility": "public",
                                "content": "function fundERC20(address tokenAddress, address owner, uint256 amount) public{ IERC20 erc20 = IERC20(tokenAddress); _safeTransferFrom(erc20, owner, address(this), amount);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "tokenAddress"
                                    },
                                    {
                                        "type": "address",
                                        "name": "owner"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20Safe._safeTransferFrom"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "86a5a9f32a1f12574e8fe78443a417ea"
                            }
                        ],
                        "lockERC20": [
                            {
                                "visibility": "internal",
                                "content": "function lockERC20(address tokenAddress, address owner, address recipient, uint256 amount) internal{ IERC20 erc20 = IERC20(tokenAddress); _safeTransferFrom(erc20, owner, recipient, amount);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "tokenAddress"
                                    },
                                    {
                                        "type": "address",
                                        "name": "owner"
                                    },
                                    {
                                        "type": "address",
                                        "name": "recipient"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20Safe._safeTransferFrom"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "7bbaa844146949c90c7d8fd6a87d71be"
                            }
                        ],
                        "releaseERC20": [
                            {
                                "visibility": "internal",
                                "content": "function releaseERC20(address tokenAddress, address recipient, uint256 amount) internal{ IERC20 erc20 = IERC20(tokenAddress); _safeTransfer(erc20, recipient, amount);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "tokenAddress"
                                    },
                                    {
                                        "type": "address",
                                        "name": "recipient"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20Safe._safeTransfer"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "b337d90475ade3e5a3e3863d38f9b4f9"
                            }
                        ],
                        "mintERC20": [
                            {
                                "visibility": "internal",
                                "content": "function mintERC20(address tokenAddress, address recipient, uint256 amount) internal{ ERC20PresetMinterPauser erc20 = ERC20PresetMinterPauser(tokenAddress); erc20.mint(recipient, amount);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "tokenAddress"
                                    },
                                    {
                                        "type": "address",
                                        "name": "recipient"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20PresetMinterPauser.mint"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "f129b0a4ede76da92913203b5a11d6fe"
                            }
                        ],
                        "burnERC20": [
                            {
                                "visibility": "internal",
                                "content": "function burnERC20(address tokenAddress, address owner, uint256 amount) internal{ ERC20Burnable erc20 = ERC20Burnable(tokenAddress); erc20.burnFrom(owner, amount);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "tokenAddress"
                                    },
                                    {
                                        "type": "address",
                                        "name": "owner"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20Burnable.burnFrom"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "f832a3ae9366292f8529012b2dc5373d"
                            }
                        ],
                        "_safeTransfer": [
                            {
                                "visibility": "private",
                                "content": "function _safeTransfer(IERC20 token, address to, uint256 value) private{ _safeCall(token, abi.encodeWithSelector(token.transfer.selector, to, value));}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "IERC20",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20Safe._safeCall"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "b4627e45878bd2212926aa03e5d4951b"
                            }
                        ],
                        "_safeTransferFrom": [
                            {
                                "visibility": "private",
                                "content": "function _safeTransferFrom(IERC20 token, address from, address to, uint256 value) private{ _safeCall(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "IERC20",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20Safe._safeCall"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "572c3683e9e0dea5085b4af8a513caf2"
                            }
                        ],
                        "_safeCall": [
                            {
                                "visibility": "private",
                                "content": "function _safeCall(IERC20 token, bytes memory data) private{ (bool success, bytes memory returndata) = address(token).call(data); require(success, \"ERC20: call failed\"); if (returndata.length > 0){ require(abi.decode(returndata, (bool)), \"ERC20: operation did not succeed\");}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "IERC20",
                                        "name": "token"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "data"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "IERC20.data"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "4c80b4dfdc9d454d1223983425eafd8f"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "uint256": "SafeMath"
                    }
                },
                "TransferHelper": {
                    "type": {
                        "__CT__": true,
                        "value": 2
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "safeApprove": [
                            {
                                "visibility": "internal",
                                "content": "function safeApprove(address token, address to, uint value) internal{ bytes4 SELECTOR = bytes4(keccak256(bytes('approve(address, uint256)'))); (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value)); require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "value"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "token.call"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "7694468ef44c7c5b79c52be41396a750"
                            }
                        ],
                        "safeTransfer": [
                            {
                                "visibility": "internal",
                                "content": "function safeTransfer(address token, address to, uint value) internal{ bytes4 SELECTOR = bytes4(keccak256(bytes('transfer(address, uint256)'))); (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value)); require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "value"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "token.call"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "73bd6756a1c046a51db600e2028e2623"
                            }
                        ],
                        "safeTransferFrom": [
                            {
                                "visibility": "internal",
                                "content": "function safeTransferFrom(address token, address from, address to, uint value) internal{ bytes4 SELECTOR = bytes4(keccak256(bytes('transferFrom(address, address, uint256)'))); (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, from, to, value)); require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "value"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "token.call"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "3b9ecd7a994d6d693acf941e471aa09a"
                            }
                        ],
                        "safeTransferETH": [
                            {
                                "visibility": "internal",
                                "content": "function safeTransferETH(address to, uint value) internal{ (bool success, ) = to.call{ value:value} (new bytes(0)); require(success, 'TransferHelper: ETH_TRANSFER_FAILED');}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "value"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "72da877c6fc0c919f4e6e58a3e285d3d"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "ERC20Handler": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "IDepositExecute",
                        "HandlerHelpers",
                        "ERC20Safe"
                    ],
                    "state_variables": {
                        "_depositRecords": {
                            "type": "mapping (uint8 => mapping(uint64 => DepositRecord))",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping (uint8 => mapping(uint64 => DepositRecord)) public _depositRecords;"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor ( address bridgeAddress, address wtokenAddress, bytes32[] memory initialResourceIDs, address[] memory initialContractAddresses, address[] memory burnableContractAddresses ) public{ require(initialResourceIDs.length == initialContractAddresses.length, \"initialResourceIDs and initialContractAddresses len mismatch\"); _bridgeAddress = bridgeAddress; _wtokenAddress = wtokenAddress; for (uint256 i = 0; i < initialResourceIDs.length; i++){ _setResource(initialResourceIDs[i], initialContractAddresses[i]);} for (uint256 i = 0; i < burnableContractAddresses.length; i++){ _setBurnable(burnableContractAddresses[i]);}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "bridgeAddress"
                                    },
                                    {
                                        "type": "address",
                                        "name": "wtokenAddress"
                                    },
                                    {
                                        "type": "bytes32[] memory",
                                        "name": "initialResourceIDs"
                                    },
                                    {
                                        "type": "address[] memory",
                                        "name": "initialContractAddresses"
                                    },
                                    {
                                        "type": "address[] memory",
                                        "name": "burnableContractAddresses"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_bridgeAddress",
                                        "",
                                        "HandlerHelpers"
                                    ],
                                    [
                                        "_wtokenAddress",
                                        "",
                                        "HandlerHelpers"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_bridgeAddress",
                                        "",
                                        "HandlerHelpers"
                                    ],
                                    [
                                        "_wtokenAddress",
                                        "",
                                        "HandlerHelpers"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c20b8f097fe73a198f8d18a8022634ca"
                            }
                        ],
                        "getDepositRecord": [
                            {
                                "visibility": "external",
                                "content": "function getDepositRecord(uint64 depositNonce, uint8 destId) external view returns (DepositRecord memory){ return _depositRecords[destId][depositNonce];}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint64",
                                        "name": "depositNonce"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "destId"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "DepositRecord memory",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_depositRecords",
                                        "",
                                        "ERC20Handler"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "44c3b53246ce301145afe82f4b8a6584"
                            }
                        ],
                        "deposit": [
                            {
                                "visibility": "external",
                                "content": "function deposit( bytes32 resourceID, uint8 destinationChainID, uint64 depositNonce, address depositer, bytes calldata data ) external override onlyBridge{ bytes memory recipientAddress; uint256 amount; uint256 lenRecipientAddress; assembly{ amount := calldataload(0xC4) recipientAddress := mload(0x40) lenRecipientAddress := calldataload(0xE4) mstore(0x40, add(0x20, add(recipientAddress, lenRecipientAddress))) calldatacopy( recipientAddress, 0xE4, sub(calldatasize(), 0xE) )} address tokenAddress = _resourceIDToTokenContractAddress[resourceID]; require(_contractWhitelist[tokenAddress], \"provided tokenAddress is not whitelisted\"); if (tokenAddress != _wtokenAddress){ if (_burnList[tokenAddress]){ burnERC20(tokenAddress, depositer, amount);} else{ lockERC20(tokenAddress, depositer, address(this), amount);}} _depositRecords[destinationChainID][depositNonce] = DepositRecord( tokenAddress, uint8(lenRecipientAddress), destinationChainID, resourceID, recipientAddress, depositer, amount );}",
                                "modifiers": [
                                    "override",
                                    "onlyBridge"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "resourceID"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "destinationChainID"
                                    },
                                    {
                                        "type": "uint64",
                                        "name": "depositNonce"
                                    },
                                    {
                                        "type": "address",
                                        "name": "depositer"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "data"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_wtokenAddress",
                                        "",
                                        "HandlerHelpers"
                                    ],
                                    [
                                        "_resourceIDToTokenContractAddress",
                                        "",
                                        "HandlerHelpers"
                                    ],
                                    [
                                        "_contractWhitelist",
                                        "",
                                        "HandlerHelpers"
                                    ],
                                    [
                                        "_burnList",
                                        "",
                                        "HandlerHelpers"
                                    ],
                                    [
                                        "_depositRecords",
                                        "",
                                        "ERC20Handler"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_depositRecords",
                                        "",
                                        "ERC20Handler"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "HandlerHelpers.onlyBridge",
                                        "ERC20Safe.lockERC20",
                                        "ERC20Safe.burnERC20"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "e7f34451afb36874cd284621df84ad33"
                            }
                        ],
                        "executeProposal": [
                            {
                                "visibility": "external",
                                "content": "function executeProposal(bytes32 resourceID, bytes calldata data) external override onlyBridge{ uint256 amount; bytes memory destinationRecipientAddress; assembly{ amount := calldataload(0x64) destinationRecipientAddress := mload(0x40) let lenDestinationRecipientAddress := calldataload(0x84) mstore(0x40, add(0x20, add(destinationRecipientAddress, lenDestinationRecipientAddress))) calldatacopy( destinationRecipientAddress, 0x84, sub(calldatasize(), 0x84) )} bytes20 recipientAddress; address tokenAddress = _resourceIDToTokenContractAddress[resourceID]; assembly{ recipientAddress := mload(add(destinationRecipientAddress, 0x20))} require(_contractWhitelist[tokenAddress], \"provided tokenAddress is not whitelisted\"); if (tokenAddress == _wtokenAddress){ IWETH(_wtokenAddress).withdraw(amount); TransferHelper.safeTransferETH(address(recipientAddress), amount); return;} if (_burnList[tokenAddress]){ mintERC20(tokenAddress, address(recipientAddress), amount);} else{ releaseERC20(tokenAddress, address(recipientAddress), amount);}}",
                                "modifiers": [
                                    "override",
                                    "onlyBridge"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "resourceID"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "data"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_wtokenAddress",
                                        "",
                                        "HandlerHelpers"
                                    ],
                                    [
                                        "_resourceIDToTokenContractAddress",
                                        "",
                                        "HandlerHelpers"
                                    ],
                                    [
                                        "_contractWhitelist",
                                        "",
                                        "HandlerHelpers"
                                    ],
                                    [
                                        "_burnList",
                                        "",
                                        "HandlerHelpers"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "TransferHelper.safeTransferETH",
                                        "ERC20Safe.mintERC20",
                                        "ERC20Safe.releaseERC20",
                                        "HandlerHelpers.onlyBridge"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "692e82b7424d722e6f140619a03a941f"
                            }
                        ],
                        "withdraw": [
                            {
                                "visibility": "external",
                                "content": "function withdraw(address tokenAddress, address recipient, uint amount) external override onlyBridge{ if (tokenAddress == _wtokenAddress){ IWETH(_wtokenAddress).withdraw(amount); TransferHelper.safeTransferETH(recipient, amount);} else{ releaseERC20(tokenAddress, recipient, amount);}}",
                                "modifiers": [
                                    "override",
                                    "onlyBridge"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "tokenAddress"
                                    },
                                    {
                                        "type": "address",
                                        "name": "recipient"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_wtokenAddress",
                                        "",
                                        "HandlerHelpers"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "TransferHelper.safeTransferETH",
                                        "ERC20Safe.releaseERC20",
                                        "HandlerHelpers.onlyBridge"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "79406efc7f95ba066ecd906270c2ecf1"
                            }
                        ],
                        "updateBridgeAddress": [
                            {
                                "visibility": "external",
                                "content": "function updateBridgeAddress(address newBridgeAddress) external override onlyBridge{ require(_bridgeAddress != newBridgeAddress, \"the updated address is the same with the old\"); _bridgeAddress = newBridgeAddress;}",
                                "modifiers": [
                                    "override",
                                    "onlyBridge"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "newBridgeAddress"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_bridgeAddress",
                                        "",
                                        "HandlerHelpers"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_bridgeAddress",
                                        "",
                                        "HandlerHelpers"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "HandlerHelpers.onlyBridge"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "7f6e0e43eb08682060968b513c14ff3e"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {
                        "DepositRecord": {
                            "content": "DepositRecord{ address _tokenAddress; uint8 _lenDestinationRecipientAddress; uint8 _destinationChainID; bytes32 _resourceID; bytes _destinationRecipientAddress; address _depositer; uint _amount;}"
                        }
                    },
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "HandlerHelpers._onlyBridge": "fee1a9234392ef4f75df54abe2389d55",
                "HandlerHelpers._setResource": "9717a5a12f0749ad58a467fe45ed7e63",
                "HandlerHelpers.onlyBridge": "457e4dff43742d217be66bf902930b86",
                "HandlerHelpers._setBurnable": "dc029ea48dbc6331e4711561d93a2b64",
                "SafeMath.sub": "972c2868144778b0617e55a6f97163a0",
                "SafeMath.div": "371f945bc2211ac7c63e7277fb7222a7",
                "SafeMath.mod": "50a3733021c21a71491ee85ffb90a2a4",
                "EnumerableSet._contains": "1741e13e15ea9a9f210919d1c3788e12",
                "EnumerableSet._add": "ad2b7769dc9b89055623e5cf9cf8a379",
                "EnumerableSet._remove": "17c0cb919bc1b5be0cc90a5f63cce6a2",
                "EnumerableSet._length": "bc694b0bdf3b5a29dac66980d1d4182b",
                "EnumerableSet._at": "e1759b4e1992d27144a409f7b53a0ae1",
                "AccessControl._grantRole": "771494ac28e5f2aeb04be27c51120863",
                "AccessControl.hasRole": "9fbc7e2af1224ec2a5b77a3507366e7e",
                "AccessControl._revokeRole": "dc2c25cb40f6be919e8b4d4af191851f",
                "ERC20._transfer": "fb62c220e2276721ee024f6b82f94489",
                "ERC20._approve": "39fc3d2c59f8296512abc90ea29b08bf",
                "ERC20._beforeTokenTransfer": "ba41c5ef0cd7854682c8a8381eef9051",
                "ERC20._burn": "5a2372c1fd2a727cf0935156c997d1f5",
                "Pausable.whenNotPaused": "916b8aef83a979053b70140c3000aa2c",
                "Pausable.whenPaused": "e0b4b9a4d589dd82240753f62436415f",
                "ERC20._mint": "096242128c682603db1a0b0d903136f5",
                "Pausable._pause": "5f208620cb437050ec0355ecb0c3e32b",
                "Pausable._unpause": "07005ace67272c8e873543f86aa97854",
                "ERC20Safe._safeTransferFrom": "572c3683e9e0dea5085b4af8a513caf2",
                "ERC20Safe._safeTransfer": "b4627e45878bd2212926aa03e5d4951b",
                "ERC20PresetMinterPauser.mint": "37933d8beef3fb374564a7eb088f352c",
                "ERC20Burnable.burnFrom": "38ccb3d820bb411699d3ecfa4b23f070",
                "ERC20Safe._safeCall": "4c80b4dfdc9d454d1223983425eafd8f",
                "ERC20Safe.burnERC20": "f832a3ae9366292f8529012b2dc5373d",
                "ERC20Safe.lockERC20": "7bbaa844146949c90c7d8fd6a87d71be",
                "TransferHelper.safeTransferETH": "72da877c6fc0c919f4e6e58a3e285d3d",
                "ERC20Safe.mintERC20": "f129b0a4ede76da92913203b5a11d6fe",
                "ERC20Safe.releaseERC20": "b337d90475ade3e5a3e3863d38f9b4f9"
            },
            "md5": "1097dae05afccaf0bec884948d6dce59"
        }
    },
    "handled_md5": {
        "__set__": true,
        "values": [
            "a50b643417508a1dc442ce458c6d6e75",
            "1097dae05afccaf0bec884948d6dce59"
        ]
    }
}