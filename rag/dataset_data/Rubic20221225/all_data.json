{
    "solidity_file": {
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Rubic20221225\\0x3335A88bb18fD3b6824b59Af62b50CE494143333\\IAccessControlUpgradeable.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Rubic20221225\\0x3335A88bb18fD3b6824b59Af62b50CE494143333\\IAccessControlUpgradeable.sol",
            "filename": "IAccessControlUpgradeable.sol",
            "imported_contracts": {},
            "contracts": {
                "IAccessControlUpgradeable": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "hasRole": [
                            {
                                "visibility": "external",
                                "content": "function hasRole(bytes32 role, address account) external view returns (bool);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "role"
                                    },
                                    {
                                        "type": "address",
                                        "name": "account"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "85da6e397e2a41b4cb5276c6957bb484"
                            }
                        ],
                        "getRoleAdmin": [
                            {
                                "visibility": "external",
                                "content": "function getRoleAdmin(bytes32 role) external view returns (bytes32);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "role"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "0e8b77b5f95f7283059b458c87e283f4"
                            }
                        ],
                        "grantRole": [
                            {
                                "visibility": "external",
                                "content": "function grantRole(bytes32 role, address account) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "role"
                                    },
                                    {
                                        "type": "address",
                                        "name": "account"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "f0c31453b5467f003bd405402e1746c0"
                            }
                        ],
                        "revokeRole": [
                            {
                                "visibility": "external",
                                "content": "function revokeRole(bytes32 role, address account) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "role"
                                    },
                                    {
                                        "type": "address",
                                        "name": "account"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "0e19aa1f35de73bad865bbef9e809cdc"
                            }
                        ],
                        "renounceRole": [
                            {
                                "visibility": "external",
                                "content": "function renounceRole(bytes32 role, address account) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "role"
                                    },
                                    {
                                        "type": "address",
                                        "name": "account"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "cabe0d8f87ddc7226cf77f60e73be286"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {
                        "RoleAdminChanged": {
                            "event": "RoleAdminChanged",
                            "content": "RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)"
                        },
                        "RoleGranted": {
                            "event": "RoleGranted",
                            "content": "RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)"
                        },
                        "RoleRevoked": {
                            "event": "RoleRevoked",
                            "content": "RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": [
                        [
                            "C:\\Users\\wy\\Desktop\\rag\\dataset\\Rubic20221225\\0x3335A88bb18fD3b6824b59Af62b50CE494143333\\AccessControlUpgradeable.sol",
                            "AccessControlUpgradeable"
                        ]
                    ]
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "b3627bd39cdd89b59e165d6fe1ad297d"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Rubic20221225\\0x3335A88bb18fD3b6824b59Af62b50CE494143333\\AddressUpgradeable.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Rubic20221225\\0x3335A88bb18fD3b6824b59Af62b50CE494143333\\AddressUpgradeable.sol",
            "filename": "AddressUpgradeable.sol",
            "imported_contracts": {},
            "contracts": {
                "AddressUpgradeable": {
                    "type": {
                        "__CT__": true,
                        "value": 2
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "isContract": [
                            {
                                "visibility": "internal",
                                "content": "function isContract(address account) internal view returns (bool){ return account.code.length > 0;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "account"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "d5972f1432570efe297b754cd2693d6f"
                            }
                        ],
                        "sendValue": [
                            {
                                "visibility": "internal",
                                "content": "function sendValue(address payable recipient, uint256 amount) internal{ require(address(this).balance >= amount, \"Address: insufficient balance\"); (bool success, ) = recipient.call{ value: amount} (\"\"); require(success, \"Address: unable to send value, recipient may have reverted\");}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address payable",
                                        "name": "recipient"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "4213f1701c2999f67f11de98a51e01f6"
                            }
                        ],
                        "functionCall": [
                            {
                                "visibility": "internal",
                                "content": "function functionCall(address target, bytes memory data) internal returns (bytes memory){ return functionCall(target, data, \"Address: low-level call failed\");}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "target"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "data"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AddressUpgradeable.functionCall",
                                        "AddressUpgradeable.functionCallWithValue"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "9bd9227b4301edafa41944a5a4cc096d"
                            },
                            {
                                "visibility": "internal",
                                "content": "function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory){ return functionCallWithValue(target, data, 0, errorMessage);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "target"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "data"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "errorMessage"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AddressUpgradeable.functionCall",
                                        "AddressUpgradeable.functionCallWithValue"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "3deb235bd39105633ff4aa02a367005e"
                            }
                        ],
                        "functionCallWithValue": [
                            {
                                "visibility": "internal",
                                "content": "function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory){ return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "target"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "data"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AddressUpgradeable.verifyCallResult",
                                        "AddressUpgradeable.functionCallWithValue",
                                        "AddressUpgradeable.isContract"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "e318cf9d6fc0d1d8455ee479a7548ba2"
                            },
                            {
                                "visibility": "internal",
                                "content": "function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory){ require(address(this).balance >= value, \"Address: insufficient balance for call\"); require(isContract(target), \"Address: call to non- contract \"); (bool success, bytes memory returndata) = target.call{ value: value} (data); return verifyCallResult(success, returndata, errorMessage);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "target"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "data"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "errorMessage"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AddressUpgradeable.verifyCallResult",
                                        "AddressUpgradeable.functionCallWithValue",
                                        "AddressUpgradeable.isContract"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "e5ef5c80e3f7edacb669876c8d0bdeda"
                            }
                        ],
                        "functionStaticCall": [
                            {
                                "visibility": "internal",
                                "content": "function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory){ return functionStaticCall(target, data, \"Address: low-level static call failed\");}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "target"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "data"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AddressUpgradeable.verifyCallResult",
                                        "target.staticcall",
                                        "AddressUpgradeable.functionStaticCall",
                                        "AddressUpgradeable.isContract"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "994685aae3cda8dbbf0ffec7f803d344"
                            },
                            {
                                "visibility": "internal",
                                "content": "function functionStaticCall( address target, bytes memory data, string memory errorMessage ) internal view returns (bytes memory){ require(isContract(target), \"Address: static call to non- contract \"); (bool success, bytes memory returndata) = target.staticcall(data); return verifyCallResult(success, returndata, errorMessage);}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "target"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "data"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "errorMessage"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AddressUpgradeable.verifyCallResult",
                                        "target.staticcall",
                                        "AddressUpgradeable.functionStaticCall",
                                        "AddressUpgradeable.isContract"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "ecc83687edc03f1dbae68952e8efe2c3"
                            }
                        ],
                        "verifyCallResult": [
                            {
                                "visibility": "internal",
                                "content": "function verifyCallResult( bool success, bytes memory returndata, string memory errorMessage ) internal pure returns (bytes memory){ if (success){ return returndata;} else{ if (returndata.length > 0){ assembly{ let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size)}} else{ revert(errorMessage);}}}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bool",
                                        "name": "success"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "returndata"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "errorMessage"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "595b1e5bcf25838a84e8abc3e73dc129"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "AddressUpgradeable.functionCallWithValue": "e318cf9d6fc0d1d8455ee479a7548ba2",
                "AddressUpgradeable.functionCall": "9bd9227b4301edafa41944a5a4cc096d",
                "AddressUpgradeable.verifyCallResult": "595b1e5bcf25838a84e8abc3e73dc129",
                "AddressUpgradeable.isContract": "d5972f1432570efe297b754cd2693d6f",
                "AddressUpgradeable.functionStaticCall": "994685aae3cda8dbbf0ffec7f803d344"
            },
            "md5": "1462b592fe0cad99cf4ebf3b72d127ae"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Rubic20221225\\0x3335A88bb18fD3b6824b59Af62b50CE494143333\\Initializable.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Rubic20221225\\0x3335A88bb18fD3b6824b59Af62b50CE494143333\\Initializable.sol",
            "filename": "Initializable.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Rubic20221225\\0x3335A88bb18fD3b6824b59Af62b50CE494143333\\AddressUpgradeable.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "Initializable": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": true,
                    "inherits": [],
                    "state_variables": {
                        "_initialized": {
                            "type": "uint8",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint8 private _initialized;"
                        },
                        "_initializing": {
                            "type": "bool",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "bool private _initializing;"
                        }
                    },
                    "functions": {
                        "_disableInitializers": [
                            {
                                "visibility": "internal",
                                "content": "function _disableInitializers() internal virtual{ require(!_initializing, \"Initializable: contract is initializing\"); if (_initialized < type (uint8).max){ _initialized = type (uint8).max; emit Initialized( type (uint8).max);}}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [
                                    [
                                        "_initialized",
                                        "",
                                        "Initializable"
                                    ],
                                    [
                                        "_initializing",
                                        "",
                                        "Initializable"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_initialized",
                                        "",
                                        "Initializable"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Initializable.type"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "ed9a063536644864e1b18ca8f1bcc6a9"
                            }
                        ]
                    },
                    "modifiers": {
                        "initializer": {
                            "parameters": [],
                            "content": "modifier initializer(){ bool isTopLevelCall = !_initializing; require( (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1), \"Initializable: contract is already initialized\" ); _initialized = 1; if (isTopLevelCall){ _initializing = true;} _; if (isTopLevelCall){ _initializing = false; emit Initialized(1);}}",
                            "reads": [
                                [
                                    "_initialized",
                                    "",
                                    "Initializable"
                                ],
                                [
                                    "_initializing",
                                    "",
                                    "Initializable"
                                ]
                            ],
                            "writes": [
                                [
                                    "_initialized",
                                    "",
                                    "Initializable"
                                ],
                                [
                                    "_initializing",
                                    "",
                                    "Initializable"
                                ]
                            ],
                            "external_calls": {
                                "__set__": true,
                                "values": [
                                    "AddressUpgradeable.isContract"
                                ]
                            },
                            "md5": "319a89ab9d2834e2aa4d9f74c10ee085"
                        },
                        "reinitializer": {
                            "parameters": [
                                {
                                    "type": "uint8",
                                    "name": "version"
                                }
                            ],
                            "content": "modifier reinitializer(uint8 version){ require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\"); _initialized = version; _initializing = true; _; _initializing = false; emit Initialized(version);}",
                            "reads": [
                                [
                                    "_initialized",
                                    "",
                                    "Initializable"
                                ],
                                [
                                    "_initializing",
                                    "",
                                    "Initializable"
                                ]
                            ],
                            "writes": [
                                [
                                    "_initialized",
                                    "",
                                    "Initializable"
                                ],
                                [
                                    "_initializing",
                                    "",
                                    "Initializable"
                                ]
                            ],
                            "external_calls": [],
                            "md5": "cc253d6e6a28a0a885ffc20460167c1a"
                        },
                        "onlyInitializing": {
                            "parameters": [],
                            "content": "modifier onlyInitializing(){ require(_initializing, \"Initializable: contract is not initializing\"); _;}",
                            "reads": [
                                [
                                    "_initializing",
                                    "",
                                    "Initializable"
                                ]
                            ],
                            "writes": [],
                            "external_calls": [],
                            "md5": "9aa43424d4ca4ac38d1414b683de0171"
                        }
                    },
                    "structs": {},
                    "events": {
                        "Initialized": {
                            "event": "Initialized",
                            "content": "Initialized(uint8 version)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "AddressUpgradeable.isContract": "d5972f1432570efe297b754cd2693d6f"
            },
            "md5": "2a64f4b671a7c2574d2b582a8067da37"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Rubic20221225\\0x3335A88bb18fD3b6824b59Af62b50CE494143333\\ContextUpgradeable.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Rubic20221225\\0x3335A88bb18fD3b6824b59Af62b50CE494143333\\ContextUpgradeable.sol",
            "filename": "ContextUpgradeable.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Rubic20221225\\0x3335A88bb18fD3b6824b59Af62b50CE494143333\\Initializable.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "ContextUpgradeable": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": true,
                    "inherits": [
                        "is",
                        "Initializable"
                    ],
                    "state_variables": {
                        "__gap": {
                            "type": "uint256[50]",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256[50] private __gap;"
                        }
                    },
                    "functions": {
                        "__Context_init": [
                            {
                                "visibility": "internal",
                                "content": "function __Context_init() internal onlyInitializing{}",
                                "modifiers": [
                                    "onlyInitializing"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ContextUpgradeable.onlyInitializing"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "51711f974026a47cf07ddd644d9d6314"
                            }
                        ],
                        "__Context_init_unchained": [
                            {
                                "visibility": "internal",
                                "content": "function __Context_init_unchained() internal onlyInitializing{}",
                                "modifiers": [
                                    "onlyInitializing"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ContextUpgradeable.onlyInitializing"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "b455fef82ed6bfd2959d8c51c633ee72"
                            }
                        ],
                        "_msgSender": [
                            {
                                "visibility": "internal",
                                "content": "function _msgSender() internal view virtual returns (address){ return msg.sender;}",
                                "modifiers": [
                                    "view",
                                    "virtual"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "3bc534219d7c704e82b1271e27e1e9f4"
                            }
                        ],
                        "_msgData": [
                            {
                                "visibility": "internal",
                                "content": "function _msgData() internal view virtual returns (bytes calldata){ return msg.data;}",
                                "modifiers": [
                                    "view",
                                    "virtual"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "bytes calldata",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c1cd6682c49c03f9b0f4ec879236408a"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "ContextUpgradeable.onlyInitializing": "9aa43424d4ca4ac38d1414b683de0171"
            },
            "md5": "452ef8f7c8f054d74ce50bc9aff41aae"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Rubic20221225\\0x3335A88bb18fD3b6824b59Af62b50CE494143333\\StringsUpgradeable.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Rubic20221225\\0x3335A88bb18fD3b6824b59Af62b50CE494143333\\StringsUpgradeable.sol",
            "filename": "StringsUpgradeable.sol",
            "imported_contracts": {},
            "contracts": {
                "StringsUpgradeable": {
                    "type": {
                        "__CT__": true,
                        "value": 2
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {
                        "_HEX_SYMBOLS": {
                            "type": "bytes16",
                            "visibility": "private",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "\"0123456789abcdef\"",
                            "content": "bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";"
                        },
                        "_ADDRESS_LENGTH": {
                            "type": "uint8",
                            "visibility": "private",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "20",
                            "content": "uint8 private constant _ADDRESS_LENGTH = 20;"
                        }
                    },
                    "functions": {
                        "toString": [
                            {
                                "visibility": "internal",
                                "content": "function toString(uint256 value) internal pure returns (string memory){ if (value == 0){ return \"0\";} uint256 temp = value; uint256 digits; while (temp != 0){ digits++; temp /= 10;} bytes memory buffer = new bytes(digits); while (value != 0){ digits -= 1; buffer[digits] = bytes1(uint8(48 + uint256(value % 10))); value /= 10;} return string(buffer);}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "string memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "4f15846f4acd97be224e77c90f19c169"
                            }
                        ],
                        "toHexString": [
                            {
                                "visibility": "internal",
                                "content": "function toHexString(uint256 value) internal pure returns (string memory){ if (value == 0){ return \"0x00\";} uint256 temp = value; uint256 length = 0; while (temp != 0){ length++; temp >>= 8;} return toHexString(value, length);}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "string memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "StringsUpgradeable.toHexString"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "c4b4cca5b62a49f3b19067dc0817ccb9"
                            },
                            {
                                "visibility": "internal",
                                "content": "function toHexString(uint256 value, uint256 length) internal pure returns (string memory){ bytes memory buffer = new bytes(2 * length + 2); buffer[0] = \"0\"; buffer[1] = \"x\"; for (uint256 i = 2 * length + 1; i > 1; --i){ buffer[i] = _HEX_SYMBOLS[value & 0xf]; value >>= 4;} require(value == 0, \"Strings: hex length insufficient\"); return string(buffer);}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "length"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "string memory",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_HEX_SYMBOLS",
                                        "",
                                        "StringsUpgradeable"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "StringsUpgradeable.toHexString"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "f09aac1548bab950b968420afeaa9a67"
                            },
                            {
                                "visibility": "internal",
                                "content": "function toHexString(address addr) internal pure returns (string memory){ return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "addr"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "string memory",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_ADDRESS_LENGTH",
                                        "",
                                        "StringsUpgradeable"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "StringsUpgradeable.toHexString"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "91668e0e0a5ba642d4fe80d9b1bf9ece"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "StringsUpgradeable.toHexString": "c4b4cca5b62a49f3b19067dc0817ccb9"
            },
            "md5": "872ecbd26afbee33d2ba7238323c490c"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Rubic20221225\\0x3335A88bb18fD3b6824b59Af62b50CE494143333\\IERC165Upgradeable.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Rubic20221225\\0x3335A88bb18fD3b6824b59Af62b50CE494143333\\IERC165Upgradeable.sol",
            "filename": "IERC165Upgradeable.sol",
            "imported_contracts": {},
            "contracts": {
                "IERC165Upgradeable": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "supportsInterface": [
                            {
                                "visibility": "external",
                                "content": "function supportsInterface(bytes4 interfaceId) external view returns (bool);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes4",
                                        "name": "interfaceId"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "2dc76221abdfa883daba4e5034906f8b"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": [
                        [
                            "C:\\Users\\wy\\Desktop\\rag\\dataset\\Rubic20221225\\0x3335A88bb18fD3b6824b59Af62b50CE494143333\\ERC165Upgradeable.sol",
                            "ERC165Upgradeable"
                        ]
                    ]
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "a1eb600a5eaf250f431e551e3108a6ff"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Rubic20221225\\0x3335A88bb18fD3b6824b59Af62b50CE494143333\\ERC165Upgradeable.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Rubic20221225\\0x3335A88bb18fD3b6824b59Af62b50CE494143333\\ERC165Upgradeable.sol",
            "filename": "ERC165Upgradeable.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Rubic20221225\\0x3335A88bb18fD3b6824b59Af62b50CE494143333\\IERC165Upgradeable.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Rubic20221225\\0x3335A88bb18fD3b6824b59Af62b50CE494143333\\Initializable.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "ERC165Upgradeable": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": true,
                    "inherits": [
                        "is",
                        "Initializable",
                        "IERC165Upgradeable"
                    ],
                    "state_variables": {
                        "__gap": {
                            "type": "uint256[50]",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256[50] private __gap;"
                        }
                    },
                    "functions": {
                        "__ERC165_init": [
                            {
                                "visibility": "internal",
                                "content": "function __ERC165_init() internal onlyInitializing{}",
                                "modifiers": [
                                    "onlyInitializing"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC165Upgradeable.onlyInitializing"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "cbe6a94e372445d90ba947303633fca4"
                            }
                        ],
                        "__ERC165_init_unchained": [
                            {
                                "visibility": "internal",
                                "content": "function __ERC165_init_unchained() internal onlyInitializing{}",
                                "modifiers": [
                                    "onlyInitializing"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC165Upgradeable.onlyInitializing"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "9ba7a884cbb1d18da0e8c3d939014894"
                            }
                        ],
                        "supportsInterface": [
                            {
                                "visibility": "public",
                                "content": "function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool){ return interfaceId == type (IERC165Upgradeable).interfaceId;}",
                                "modifiers": [
                                    "view",
                                    "virtual",
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes4",
                                        "name": "interfaceId"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC165Upgradeable.type"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "20e4a9dea390d6ed3fb55af94244f5fb"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "ERC165Upgradeable.onlyInitializing": "9aa43424d4ca4ac38d1414b683de0171"
            },
            "md5": "eccdfcb74d34d2d85c84c1044e78b156"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Rubic20221225\\0x3335A88bb18fD3b6824b59Af62b50CE494143333\\AccessControlUpgradeable.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Rubic20221225\\0x3335A88bb18fD3b6824b59Af62b50CE494143333\\AccessControlUpgradeable.sol",
            "filename": "AccessControlUpgradeable.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Rubic20221225\\0x3335A88bb18fD3b6824b59Af62b50CE494143333\\IAccessControlUpgradeable.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Rubic20221225\\0x3335A88bb18fD3b6824b59Af62b50CE494143333\\ContextUpgradeable.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Rubic20221225\\0x3335A88bb18fD3b6824b59Af62b50CE494143333\\StringsUpgradeable.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Rubic20221225\\0x3335A88bb18fD3b6824b59Af62b50CE494143333\\ERC165Upgradeable.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Rubic20221225\\0x3335A88bb18fD3b6824b59Af62b50CE494143333\\Initializable.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "AccessControlUpgradeable": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": true,
                    "inherits": [
                        "is",
                        "Initializable",
                        "ContextUpgradeable",
                        "IAccessControlUpgradeable",
                        "ERC165Upgradeable"
                    ],
                    "state_variables": {
                        "_roles": {
                            "type": "mapping(bytes32 => RoleData)",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(bytes32 => RoleData) private _roles;"
                        },
                        "DEFAULT_ADMIN_ROLE": {
                            "type": "bytes32",
                            "visibility": "public",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "0x00",
                            "content": "bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;"
                        },
                        "__gap": {
                            "type": "uint256[49]",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256[49] private __gap;"
                        }
                    },
                    "functions": {
                        "__AccessControl_init": [
                            {
                                "visibility": "internal",
                                "content": "function __AccessControl_init() internal onlyInitializing{}",
                                "modifiers": [
                                    "onlyInitializing"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "57ea3ce182a381b6ae84534369a6b94b"
                            }
                        ],
                        "__AccessControl_init_unchained": [
                            {
                                "visibility": "internal",
                                "content": "function __AccessControl_init_unchained() internal onlyInitializing{}",
                                "modifiers": [
                                    "onlyInitializing"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "2f17c2a507ca8a1da98892c54fa4b070"
                            }
                        ],
                        "supportsInterface": [
                            {
                                "visibility": "public",
                                "content": "function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool){ return interfaceId == type (IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);}",
                                "modifiers": [
                                    "view",
                                    "virtual",
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes4",
                                        "name": "interfaceId"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "99e6a51c08c56e1c597a14c3205ac6f1"
                            }
                        ],
                        "hasRole": [
                            {
                                "visibility": "public",
                                "content": "function hasRole(bytes32 role, address account) public view virtual override returns (bool){ return _roles[role].members[account];}",
                                "modifiers": [
                                    "view",
                                    "virtual",
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "role"
                                    },
                                    {
                                        "type": "address",
                                        "name": "account"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_roles",
                                        "",
                                        "AccessControlUpgradeable"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "b66164048c9b76bed93600cff5932d61"
                            }
                        ],
                        "_checkRole": [
                            {
                                "visibility": "internal",
                                "content": "function _checkRole(bytes32 role) internal view virtual{ _checkRole(role, _msgSender());}",
                                "modifiers": [
                                    "view",
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "role"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "98f654c355df8f653aaeb6eec72f0146"
                            },
                            {
                                "visibility": "internal",
                                "content": "function _checkRole(bytes32 role, address account) internal view virtual{ if (!hasRole(role, account)){ revert( string( abi.encodePacked( \"AccessControl: account \", StringsUpgradeable.toHexString(uint160(account), 20), \" is missing role \", StringsUpgradeable.toHexString(uint256(role), 32) ) ) );}}",
                                "modifiers": [
                                    "view",
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "role"
                                    },
                                    {
                                        "type": "address",
                                        "name": "account"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "63880ff686e9c46df1ace0f7cf62e8bd"
                            }
                        ],
                        "getRoleAdmin": [
                            {
                                "visibility": "public",
                                "content": "function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32){ return _roles[role].adminRole;}",
                                "modifiers": [
                                    "view",
                                    "virtual",
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "role"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_roles",
                                        "",
                                        "AccessControlUpgradeable"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "377dc308d1635599077e0a3536c21cc3"
                            }
                        ],
                        "grantRole": [
                            {
                                "visibility": "public",
                                "content": "function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)){ _grantRole(role, account);}",
                                "modifiers": [
                                    "virtual",
                                    "override",
                                    "onlyRole(getRoleAdmin(role))"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "role"
                                    },
                                    {
                                        "type": "address",
                                        "name": "account"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "bad4c804a6838141c0ea00a288dfb0d3"
                            }
                        ],
                        "revokeRole": [
                            {
                                "visibility": "public",
                                "content": "function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)){ _revokeRole(role, account);}",
                                "modifiers": [
                                    "virtual",
                                    "override",
                                    "onlyRole(getRoleAdmin(role))"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "role"
                                    },
                                    {
                                        "type": "address",
                                        "name": "account"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "8f03bca73a6101092cbe937f1aa6a495"
                            }
                        ],
                        "renounceRole": [
                            {
                                "visibility": "public",
                                "content": "function renounceRole(bytes32 role, address account) public virtual override{ require(account == _msgSender(), \"AccessControl: can only renounce roles for self\"); _revokeRole(role, account);}",
                                "modifiers": [
                                    "virtual",
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "role"
                                    },
                                    {
                                        "type": "address",
                                        "name": "account"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "de81bc48188c09bd517b6889d54317ac"
                            }
                        ],
                        "_setupRole": [
                            {
                                "visibility": "internal",
                                "content": "function _setupRole(bytes32 role, address account) internal virtual{ _grantRole(role, account);}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "role"
                                    },
                                    {
                                        "type": "address",
                                        "name": "account"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "af0a23debe0f001cc6c8bf7d6a9618e6"
                            }
                        ],
                        "_setRoleAdmin": [
                            {
                                "visibility": "internal",
                                "content": "function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual{ bytes32 previousAdminRole = getRoleAdmin(role); _roles[role].adminRole = adminRole; emit RoleAdminChanged(role, previousAdminRole, adminRole);}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "role"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "adminRole"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_roles",
                                        "",
                                        "AccessControlUpgradeable"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "a5154e24ad51965c0ed8b3b0111b9412"
                            }
                        ],
                        "_grantRole": [
                            {
                                "visibility": "internal",
                                "content": "function _grantRole(bytes32 role, address account) internal virtual{ if (!hasRole(role, account)){ _roles[role].members[account] = true; emit RoleGranted(role, account, _msgSender());}}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "role"
                                    },
                                    {
                                        "type": "address",
                                        "name": "account"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_roles",
                                        "",
                                        "AccessControlUpgradeable"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_roles",
                                        "",
                                        "AccessControlUpgradeable"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "073fe24e79b8eccc5248ae6dc3dc2035"
                            }
                        ],
                        "_revokeRole": [
                            {
                                "visibility": "internal",
                                "content": "function _revokeRole(bytes32 role, address account) internal virtual{ if (hasRole(role, account)){ _roles[role].members[account] = false; emit RoleRevoked(role, account, _msgSender());}}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "role"
                                    },
                                    {
                                        "type": "address",
                                        "name": "account"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_roles",
                                        "",
                                        "AccessControlUpgradeable"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_roles",
                                        "",
                                        "AccessControlUpgradeable"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c122ba382a23038b9cacd65bec248f39"
                            }
                        ]
                    },
                    "modifiers": {
                        "onlyRole": {
                            "parameters": [
                                {
                                    "type": "bytes32",
                                    "name": "role"
                                }
                            ],
                            "content": "modifier onlyRole(bytes32 role){ _checkRole(role); _;}",
                            "reads": [],
                            "writes": [],
                            "external_calls": [],
                            "md5": "8fb0b5854efeb468c5042c2d527f85a3"
                        }
                    },
                    "structs": {
                        "RoleData": {
                            "content": "RoleData{ mapping(address => bool) members; bytes32 adminRole;}"
                        }
                    },
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "c0134ac465b1e24802cfab367debdebd"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Rubic20221225\\0x3335A88bb18fD3b6824b59Af62b50CE494143333\\BridgeBase.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Rubic20221225\\0x3335A88bb18fD3b6824b59Af62b50CE494143333\\BridgeBase.sol",
            "filename": "BridgeBase.sol",
            "imported_contracts": {
                "": {
                    "in_database": false,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "BridgeBase": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "AccessControlUpgradeable",
                        "PausableUpgradeable",
                        "ReentrancyGuardUpgradeable"
                    ],
                    "state_variables": {
                        "DENOMINATOR": {
                            "type": "uint256",
                            "visibility": "internal",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "1e6",
                            "content": "uint256 internal constant DENOMINATOR = 1e6;"
                        },
                        "MANAGER_ROLE": {
                            "type": "bytes32",
                            "visibility": "public",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "keccak256('MANAGER_ROLE')",
                            "content": "bytes32 public constant MANAGER_ROLE = keccak256('MANAGER_ROLE');"
                        },
                        "integratorToFeeInfo": {
                            "type": "mapping(address => IntegratorFeeInfo)",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(address => IntegratorFeeInfo) public integratorToFeeInfo;"
                        },
                        "availableIntegratorCryptoFee": {
                            "type": "mapping(address => uint256)",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(address => uint256) public availableIntegratorCryptoFee;"
                        },
                        "minTokenAmount": {
                            "type": "mapping(address => uint256)",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(address => uint256) public minTokenAmount;"
                        },
                        "maxTokenAmount": {
                            "type": "mapping(address => uint256)",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(address => uint256) public maxTokenAmount;"
                        },
                        "availableRubicTokenFee": {
                            "type": "mapping(address => uint256)",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(address => uint256) public availableRubicTokenFee;"
                        },
                        "availableIntegratorTokenFee": {
                            "type": "mapping(address => mapping(address => uint256))",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(address => mapping(address => uint256)) public availableIntegratorTokenFee;"
                        },
                        "RubicPlatformFee": {
                            "type": "uint256",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256 public RubicPlatformFee;"
                        },
                        "fixedCryptoFee": {
                            "type": "uint256",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256 public fixedCryptoFee;"
                        },
                        "availableRubicCryptoFee": {
                            "type": "uint256",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256 public availableRubicCryptoFee;"
                        }
                    },
                    "functions": {
                        "__BridgeBaseInit": [
                            {
                                "visibility": "internal",
                                "content": "function __BridgeBaseInit( uint256 _fixedCryptoFee, uint256 _RubicPlatformFee, address[] memory _routers, address[] memory _tokens, uint256[] memory _minTokenAmounts, uint256[] memory _maxTokenAmounts ) internal onlyInitializing{ __Pausable_init_unchained(); fixedCryptoFee = _fixedCryptoFee; if (_RubicPlatformFee > DENOMINATOR){ revert FeeTooHigh();} RubicPlatformFee = _RubicPlatformFee; uint256 routerLength = _routers.length; for (uint256 i; i < routerLength; ){ availableRouters.add(_routers[i]); unchecked{ ++i;}} uint256 tokensLength = _tokens.length; for (uint256 i; i < tokensLength; ){ if (_minTokenAmounts[i] > _maxTokenAmounts[i]){ revert MinMustBeLowerThanMax();} minTokenAmount[_tokens[i]] = _minTokenAmounts[i]; maxTokenAmount[_tokens[i]] = _maxTokenAmounts[i]; unchecked{ ++i;}} _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);}",
                                "modifiers": [
                                    "onlyInitializing"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "_fixedCryptoFee"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_RubicPlatformFee"
                                    },
                                    {
                                        "type": "address[] memory",
                                        "name": "_routers"
                                    },
                                    {
                                        "type": "address[] memory",
                                        "name": "_tokens"
                                    },
                                    {
                                        "type": "uint256[] memory",
                                        "name": "_minTokenAmounts"
                                    },
                                    {
                                        "type": "uint256[] memory",
                                        "name": "_maxTokenAmounts"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "DENOMINATOR",
                                        "",
                                        "BridgeBase"
                                    ],
                                    [
                                        "minTokenAmount",
                                        "",
                                        "BridgeBase"
                                    ],
                                    [
                                        "maxTokenAmount",
                                        "",
                                        "BridgeBase"
                                    ],
                                    [
                                        "RubicPlatformFee",
                                        "",
                                        "BridgeBase"
                                    ],
                                    [
                                        "fixedCryptoFee",
                                        "",
                                        "BridgeBase"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "minTokenAmount",
                                        "",
                                        "BridgeBase"
                                    ],
                                    [
                                        "maxTokenAmount",
                                        "",
                                        "BridgeBase"
                                    ],
                                    [
                                        "RubicPlatformFee",
                                        "",
                                        "BridgeBase"
                                    ],
                                    [
                                        "fixedCryptoFee",
                                        "",
                                        "BridgeBase"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BridgeBase.__Pausable_init_unchained",
                                        "BridgeBase.MinMustBeLowerThanMax",
                                        "BridgeBase._setupRole",
                                        "EnumerableSetUpgradeable.AddressSet.add",
                                        "BridgeBase.onlyInitializing",
                                        "BridgeBase.FeeTooHigh"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "66bdf2feafbe9d6f55c1f1763e848c19"
                            }
                        ],
                        "accrueFixedCryptoFee": [
                            {
                                "visibility": "internal",
                                "content": "function accrueFixedCryptoFee(address _integrator, IntegratorFeeInfo memory _info) internal returns (uint256){ uint256 _fixedCryptoFee; uint256 _RubicPart; if (_info.isIntegrator){ _fixedCryptoFee = uint256(_info.fixedFeeAmount); if (_fixedCryptoFee > 0){ _RubicPart = (_fixedCryptoFee * _info.RubicFixedCryptoShare) / DENOMINATOR; availableIntegratorCryptoFee[_integrator] += _fixedCryptoFee - _RubicPart;}} else{ _fixedCryptoFee = fixedCryptoFee; _RubicPart = _fixedCryptoFee;} availableRubicCryptoFee += _RubicPart; emit FixedCryptoFee(_RubicPart, _fixedCryptoFee - _RubicPart, _integrator); return (msg.value - _fixedCryptoFee);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_integrator"
                                    },
                                    {
                                        "type": "IntegratorFeeInfo memory",
                                        "name": "_info"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "DENOMINATOR",
                                        "",
                                        "BridgeBase"
                                    ],
                                    [
                                        "availableIntegratorCryptoFee",
                                        "",
                                        "BridgeBase"
                                    ],
                                    [
                                        "fixedCryptoFee",
                                        "",
                                        "BridgeBase"
                                    ],
                                    [
                                        "availableRubicCryptoFee",
                                        "",
                                        "BridgeBase"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "availableIntegratorCryptoFee",
                                        "",
                                        "BridgeBase"
                                    ],
                                    [
                                        "availableRubicCryptoFee",
                                        "",
                                        "BridgeBase"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "fb2b30c0aa1db51d40cbb1bfbff3a345"
                            }
                        ],
                        "accrueTokenFees": [
                            {
                                "visibility": "internal",
                                "content": "function accrueTokenFees( address _integrator, IntegratorFeeInfo memory _info, uint256 _amountWithFee, uint256 _initBlockchainNum, address _token ) internal returns (uint256){ (uint256 _totalFees, uint256 _RubicFee) = _calculateFee(_info, _amountWithFee, _initBlockchainNum); if (_integrator != address(0)){ availableIntegratorTokenFee[_token][_integrator] += _totalFees - _RubicFee;} availableRubicTokenFee[_token] += _RubicFee; emit TokenFee(_RubicFee, _totalFees - _RubicFee, _integrator, _token); return _amountWithFee - _totalFees;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_integrator"
                                    },
                                    {
                                        "type": "IntegratorFeeInfo memory",
                                        "name": "_info"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_amountWithFee"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_initBlockchainNum"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_token"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "availableRubicTokenFee",
                                        "",
                                        "BridgeBase"
                                    ],
                                    [
                                        "availableIntegratorTokenFee",
                                        "",
                                        "BridgeBase"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "availableRubicTokenFee",
                                        "",
                                        "BridgeBase"
                                    ],
                                    [
                                        "availableIntegratorTokenFee",
                                        "",
                                        "BridgeBase"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BridgeBase._calculateFee"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "cf383d71c20ef06e211ac6e198306028"
                            }
                        ],
                        "_calculateFeeWithIntegrator": [
                            {
                                "visibility": "internal",
                                "content": "function _calculateFeeWithIntegrator(uint256 _amountWithFee, IntegratorFeeInfo memory _info) internal pure returns (uint256 _totalFee, uint256 _RubicFee){ if (_info.tokenFee > 0){ _totalFee = FullMath.mulDiv(_amountWithFee, _info.tokenFee, DENOMINATOR); _RubicFee = FullMath.mulDiv(_totalFee, _info.RubicTokenShare, DENOMINATOR);}}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "_amountWithFee"
                                    },
                                    {
                                        "type": "IntegratorFeeInfo memory",
                                        "name": "_info"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": "_totalFee"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_RubicFee"
                                    }
                                ],
                                "reads": [
                                    [
                                        "DENOMINATOR",
                                        "",
                                        "BridgeBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "FullMath.mulDiv"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "0fd0473b5eb9cca355eefa31802ea7a2"
                            }
                        ],
                        "_calculateFee": [
                            {
                                "visibility": "internal",
                                "content": "function _calculateFee( IntegratorFeeInfo memory _info, uint256 _amountWithFee, uint256 ) internal view returns (uint256 _totalFee, uint256 _RubicFee){ if (_info.isIntegrator){ (_totalFee, _RubicFee) = _calculateFeeWithIntegrator(_amountWithFee, _info);} else{ _totalFee = FullMath.mulDiv(_amountWithFee, RubicPlatformFee, DENOMINATOR); _RubicFee = _totalFee;}}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "IntegratorFeeInfo memory",
                                        "name": "_info"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_amountWithFee"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": "_totalFee"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_RubicFee"
                                    }
                                ],
                                "reads": [
                                    [
                                        "DENOMINATOR",
                                        "",
                                        "BridgeBase"
                                    ],
                                    [
                                        "RubicPlatformFee",
                                        "",
                                        "BridgeBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "FullMath.mulDiv",
                                        "BridgeBase._calculateFeeWithIntegrator"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "3438910b047cf717ad7ef3daabea51c0"
                            }
                        ],
                        "_collectIntegrator": [
                            {
                                "visibility": "private",
                                "content": "function _collectIntegrator(address _integrator, address _token) private{ uint256 _amount; if (_token == address(0)){ _amount = availableIntegratorCryptoFee[_integrator]; availableIntegratorCryptoFee[_integrator] = 0; emit FixedCryptoFeeCollected(_amount, _integrator);} _amount += availableIntegratorTokenFee[_token][_integrator]; if (_amount == 0){ revert ZeroAmount();} availableIntegratorTokenFee[_token][_integrator] = 0; sendToken(_token, _amount, _integrator); emit IntegratorTokenFeeCollected(_amount, _integrator, _token);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_integrator"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_token"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "availableIntegratorCryptoFee",
                                        "",
                                        "BridgeBase"
                                    ],
                                    [
                                        "availableIntegratorTokenFee",
                                        "",
                                        "BridgeBase"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "availableIntegratorCryptoFee",
                                        "",
                                        "BridgeBase"
                                    ],
                                    [
                                        "availableIntegratorTokenFee",
                                        "",
                                        "BridgeBase"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BridgeBase.sendToken",
                                        "BridgeBase.ZeroAmount"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "a6c0032ed80c2512033539a4ebb80736"
                            }
                        ],
                        "collectIntegratorFee": [
                            {
                                "visibility": "external",
                                "content": "function collectIntegratorFee(address _token) external nonReentrant{ _collectIntegrator(msg.sender, _token);}",
                                "modifiers": [
                                    "nonReentrant"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_token"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BridgeBase.nonReentrant",
                                        "BridgeBase.onlyManagerOrAdmin",
                                        "BridgeBase._collectIntegrator"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "73b3389a54ff85ae0e03f93081158400"
                            },
                            {
                                "visibility": "external",
                                "content": "function collectIntegratorFee(address _integrator, address _token) external onlyManagerOrAdmin{ _collectIntegrator(_integrator, _token);}",
                                "modifiers": [
                                    "onlyManagerOrAdmin"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_integrator"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_token"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BridgeBase.nonReentrant",
                                        "BridgeBase.onlyManagerOrAdmin",
                                        "BridgeBase._collectIntegrator"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "8f947adb73526e94ff6fa80374cad89d"
                            }
                        ],
                        "collectRubicFee": [
                            {
                                "visibility": "external",
                                "content": "function collectRubicFee(address _token) external onlyManagerOrAdmin{ uint256 _amount = availableRubicTokenFee[_token]; if (_amount == 0){ revert ZeroAmount();} availableRubicTokenFee[_token] = 0; sendToken(_token, _amount, msg.sender); emit RubicTokenFeeCollected(_amount, _token);}",
                                "modifiers": [
                                    "onlyManagerOrAdmin"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_token"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "availableRubicTokenFee",
                                        "",
                                        "BridgeBase"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "availableRubicTokenFee",
                                        "",
                                        "BridgeBase"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BridgeBase.sendToken",
                                        "BridgeBase.ZeroAmount",
                                        "BridgeBase.onlyManagerOrAdmin"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "b67e309e96938f9780377ea2c0a3fd18"
                            }
                        ],
                        "collectRubicCryptoFee": [
                            {
                                "visibility": "external",
                                "content": "function collectRubicCryptoFee() external onlyManagerOrAdmin{ uint256 _cryptoFee = availableRubicCryptoFee; availableRubicCryptoFee = 0; sendToken(address(0), _cryptoFee, msg.sender); emit FixedCryptoFeeCollected(_cryptoFee, msg.sender);}",
                                "modifiers": [
                                    "onlyManagerOrAdmin"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [
                                    [
                                        "availableRubicCryptoFee",
                                        "",
                                        "BridgeBase"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "availableRubicCryptoFee",
                                        "",
                                        "BridgeBase"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BridgeBase.sendToken",
                                        "BridgeBase.onlyManagerOrAdmin"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "e0735c2399bacc496a15e21f6f20b859"
                            }
                        ],
                        "pauseExecution": [
                            {
                                "visibility": "external",
                                "content": "function pauseExecution() external onlyManagerOrAdmin{ _pause();}",
                                "modifiers": [
                                    "onlyManagerOrAdmin"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BridgeBase._pause",
                                        "BridgeBase.onlyManagerOrAdmin"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "3571e4688e9cbfffadf499976869513a"
                            }
                        ],
                        "unpauseExecution": [
                            {
                                "visibility": "external",
                                "content": "function unpauseExecution() external onlyManagerOrAdmin{ _unpause();}",
                                "modifiers": [
                                    "onlyManagerOrAdmin"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BridgeBase.onlyManagerOrAdmin",
                                        "BridgeBase._unpause"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "372cbe47d0d24e6e889c2f778b47bd55"
                            }
                        ],
                        "setIntegratorInfo": [
                            {
                                "visibility": "external",
                                "content": "function setIntegratorInfo(address _integrator, IntegratorFeeInfo memory _info) external onlyManagerOrAdmin{ if (_info.tokenFee > DENOMINATOR){ revert FeeTooHigh();} if (_info.RubicTokenShare > DENOMINATOR || _info.RubicFixedCryptoShare > DENOMINATOR){ revert ShareTooHigh();} integratorToFeeInfo[_integrator] = _info;}",
                                "modifiers": [
                                    "onlyManagerOrAdmin"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_integrator"
                                    },
                                    {
                                        "type": "IntegratorFeeInfo memory",
                                        "name": "_info"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "DENOMINATOR",
                                        "",
                                        "BridgeBase"
                                    ],
                                    [
                                        "integratorToFeeInfo",
                                        "",
                                        "BridgeBase"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "integratorToFeeInfo",
                                        "",
                                        "BridgeBase"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BridgeBase.FeeTooHigh",
                                        "BridgeBase.onlyManagerOrAdmin",
                                        "BridgeBase.ShareTooHigh"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "e0c02e694ae85ea23c3681a57f96cae2"
                            }
                        ],
                        "setFixedCryptoFee": [
                            {
                                "visibility": "external",
                                "content": "function setFixedCryptoFee(uint256 _fixedCryptoFee) external onlyManagerOrAdmin{ fixedCryptoFee = _fixedCryptoFee;}",
                                "modifiers": [
                                    "onlyManagerOrAdmin"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "_fixedCryptoFee"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "fixedCryptoFee",
                                        "",
                                        "BridgeBase"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "fixedCryptoFee",
                                        "",
                                        "BridgeBase"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BridgeBase.onlyManagerOrAdmin"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "044760bd28787c851d3bac6e83233183"
                            }
                        ],
                        "setRubicPlatformFee": [
                            {
                                "visibility": "external",
                                "content": "function setRubicPlatformFee(uint256 _platformFee) external onlyManagerOrAdmin{ if (_platformFee > DENOMINATOR){ revert FeeTooHigh();} RubicPlatformFee = _platformFee;}",
                                "modifiers": [
                                    "onlyManagerOrAdmin"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "_platformFee"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "DENOMINATOR",
                                        "",
                                        "BridgeBase"
                                    ],
                                    [
                                        "RubicPlatformFee",
                                        "",
                                        "BridgeBase"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "RubicPlatformFee",
                                        "",
                                        "BridgeBase"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BridgeBase.FeeTooHigh",
                                        "BridgeBase.onlyManagerOrAdmin"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "e950e4213a2d56da2fbd2c0702997a0d"
                            }
                        ],
                        "setMinTokenAmount": [
                            {
                                "visibility": "external",
                                "content": "function setMinTokenAmount(address _token, uint256 _minTokenAmount) external onlyManagerOrAdmin{ if (_minTokenAmount > maxTokenAmount[_token]){ revert MinMustBeLowerThanMax();} minTokenAmount[_token] = _minTokenAmount;}",
                                "modifiers": [
                                    "onlyManagerOrAdmin"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_token"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_minTokenAmount"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "minTokenAmount",
                                        "",
                                        "BridgeBase"
                                    ],
                                    [
                                        "maxTokenAmount",
                                        "",
                                        "BridgeBase"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "minTokenAmount",
                                        "",
                                        "BridgeBase"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BridgeBase.onlyManagerOrAdmin",
                                        "BridgeBase.MinMustBeLowerThanMax"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "87096b02449ea6b06af77609d5691929"
                            }
                        ],
                        "setMaxTokenAmount": [
                            {
                                "visibility": "external",
                                "content": "function setMaxTokenAmount(address _token, uint256 _maxTokenAmount) external onlyManagerOrAdmin{ if (_maxTokenAmount < minTokenAmount[_token]){ revert MaxMustBeBiggerThanMin();} maxTokenAmount[_token] = _maxTokenAmount;}",
                                "modifiers": [
                                    "onlyManagerOrAdmin"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_token"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_maxTokenAmount"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "minTokenAmount",
                                        "",
                                        "BridgeBase"
                                    ],
                                    [
                                        "maxTokenAmount",
                                        "",
                                        "BridgeBase"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "maxTokenAmount",
                                        "",
                                        "BridgeBase"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BridgeBase.onlyManagerOrAdmin",
                                        "BridgeBase.MaxMustBeBiggerThanMin"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "617b7cbb647611aa4849da61045cc252"
                            }
                        ],
                        "addAvailableRouter": [
                            {
                                "visibility": "external",
                                "content": "function addAvailableRouter(address _router) external onlyManagerOrAdmin{ if (_router == address(0)){ revert ZeroAddress();} availableRouters.add(_router);}",
                                "modifiers": [
                                    "onlyManagerOrAdmin"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_router"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BridgeBase.onlyManagerOrAdmin",
                                        "EnumerableSetUpgradeable.AddressSet.add",
                                        "BridgeBase.ZeroAddress"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "91c6ed154ac0a531ea11108d42b611e2"
                            }
                        ],
                        "removeAvailableRouter": [
                            {
                                "visibility": "external",
                                "content": "function removeAvailableRouter(address _router) external onlyManagerOrAdmin{ availableRouters.remove(_router);}",
                                "modifiers": [
                                    "onlyManagerOrAdmin"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_router"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "EnumerableSetUpgradeable.AddressSet.remove",
                                        "BridgeBase.onlyManagerOrAdmin"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "99d14bf35a9e922b0feee4113c3ea9a9"
                            }
                        ],
                        "transferAdmin": [
                            {
                                "visibility": "external",
                                "content": "function transferAdmin(address _newAdmin) external onlyAdmin{ _revokeRole(DEFAULT_ADMIN_ROLE, msg.sender); _grantRole(DEFAULT_ADMIN_ROLE, _newAdmin);}",
                                "modifiers": [
                                    "onlyAdmin"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_newAdmin"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BridgeBase.onlyAdmin",
                                        "BridgeBase._revokeRole",
                                        "BridgeBase._grantRole"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "cec9ac906812067827151d7bffd3dae5"
                            }
                        ],
                        "getAvailableRouters": [
                            {
                                "visibility": "external",
                                "content": "function getAvailableRouters() external view returns (address[] memory){ return availableRouters.values();}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address[] memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "EnumerableSetUpgradeable.AddressSet.values"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "06886a831d0334ae04f5f5663cfbba90"
                            }
                        ],
                        "checkIsManagerOrAdmin": [
                            {
                                "visibility": "internal",
                                "content": "function checkIsManagerOrAdmin() internal view{ if (!(hasRole(MANAGER_ROLE, msg.sender) || hasRole(DEFAULT_ADMIN_ROLE, msg.sender))){ revert NotAManager();}}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [
                                    [
                                        "MANAGER_ROLE",
                                        "",
                                        "BridgeBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BridgeBase.hasRole",
                                        "BridgeBase.NotAManager"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "6f231b00369dce63aaf3217bcec42c0a"
                            }
                        ],
                        "checkIsAdmin": [
                            {
                                "visibility": "internal",
                                "content": "function checkIsAdmin() internal view{ if (!hasRole(DEFAULT_ADMIN_ROLE, msg.sender)){ revert NotAnAdmin();}}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BridgeBase.hasRole",
                                        "BridgeBase.NotAnAdmin"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "a727ab16cd83c5477e0df042a760c7d6"
                            }
                        ],
                        "sendToken": [
                            {
                                "visibility": "internal",
                                "content": "function sendToken( address _token, uint256 _amount, address _receiver ) internal virtual{ if (_token == address(0)){ AddressUpgradeable.sendValue(payable(_receiver), _amount);} else{ IERC20Upgradeable(_token).safeTransfer(_receiver, _amount);}}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_token"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_amount"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_receiver"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AddressUpgradeable.sendValue",
                                        "BridgeBase.IERC20Upgradeable"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "29a97d219da3ff4d142e492288ac765e"
                            }
                        ]
                    },
                    "modifiers": {
                        "onlyAdmin": {
                            "parameters": [],
                            "content": "modifier onlyAdmin(){ checkIsAdmin(); _;}",
                            "reads": [],
                            "writes": [],
                            "external_calls": {
                                "__set__": true,
                                "values": [
                                    "BridgeBase.checkIsAdmin"
                                ]
                            },
                            "md5": "b28a37e63ec6fb667e3a24118640125e"
                        },
                        "onlyManagerOrAdmin": {
                            "parameters": [],
                            "content": "modifier onlyManagerOrAdmin(){ checkIsManagerOrAdmin(); _;}",
                            "reads": [],
                            "writes": [],
                            "external_calls": {
                                "__set__": true,
                                "values": [
                                    "BridgeBase.checkIsManagerOrAdmin"
                                ]
                            },
                            "md5": "a9c0c28e5eb70ba30b94c919ab0907d6"
                        },
                        "onlyEOA": {
                            "parameters": [],
                            "content": "modifier onlyEOA(){ if (msg.sender != tx.origin){ revert OnlyEOA();} _;}",
                            "reads": [],
                            "writes": [],
                            "external_calls": {
                                "__set__": true,
                                "values": [
                                    "BridgeBase.OnlyEOA"
                                ]
                            },
                            "md5": "eaa636f62bfd30718f7f1bad11c86f11"
                        }
                    },
                    "structs": {
                        "IntegratorFeeInfo": {
                            "content": "IntegratorFeeInfo{ bool isIntegrator; uint32 tokenFee; uint32 RubicTokenShare; uint32 RubicFixedCryptoShare; uint128 fixedFeeAmount;}"
                        },
                        "BaseCrossChainParams": {
                            "content": "BaseCrossChainParams{ address srcInputToken; uint256 srcInputAmount; uint256 dstChainID; address dstOutputToken; uint256 dstMinOutputAmount; address recipient; address integrator; address router;}"
                        }
                    },
                    "events": {
                        "FixedCryptoFee": {
                            "event": "FixedCryptoFee",
                            "content": "FixedCryptoFee(uint256 RubicPart, uint256 integratorPart, address indexed integrator)"
                        },
                        "FixedCryptoFeeCollected": {
                            "event": "FixedCryptoFeeCollected",
                            "content": "FixedCryptoFeeCollected(uint256 amount, address collector)"
                        },
                        "TokenFee": {
                            "event": "TokenFee",
                            "content": "TokenFee(uint256 RubicPart, uint256 integratorPart, address indexed integrator, address token)"
                        },
                        "IntegratorTokenFeeCollected": {
                            "event": "IntegratorTokenFeeCollected",
                            "content": "IntegratorTokenFeeCollected(uint256 amount, address indexed integrator, address token)"
                        },
                        "RubicTokenFeeCollected": {
                            "event": "RubicTokenFeeCollected",
                            "content": "RubicTokenFeeCollected(uint256 amount, address token)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "IERC20Upgradeable": "SafeERC20Upgradeable"
                    }
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "BridgeBase.checkIsAdmin": "a727ab16cd83c5477e0df042a760c7d6",
                "BridgeBase.checkIsManagerOrAdmin": "6f231b00369dce63aaf3217bcec42c0a",
                "BridgeBase._calculateFee": "3438910b047cf717ad7ef3daabea51c0",
                "BridgeBase._calculateFeeWithIntegrator": "0fd0473b5eb9cca355eefa31802ea7a2",
                "BridgeBase.sendToken": "29a97d219da3ff4d142e492288ac765e",
                "BridgeBase._collectIntegrator": "a6c0032ed80c2512033539a4ebb80736",
                "BridgeBase.onlyManagerOrAdmin": "a9c0c28e5eb70ba30b94c919ab0907d6",
                "BridgeBase.onlyAdmin": "b28a37e63ec6fb667e3a24118640125e"
            },
            "md5": "a3a2bc77489025ccb14a76c115aa2e1d"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Rubic20221225\\0x3335A88bb18fD3b6824b59Af62b50CE494143333\\draft-IERC20PermitUpgradeable.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Rubic20221225\\0x3335A88bb18fD3b6824b59Af62b50CE494143333\\draft-IERC20PermitUpgradeable.sol",
            "filename": "draft-IERC20PermitUpgradeable.sol",
            "imported_contracts": {},
            "contracts": {
                "IERC20PermitUpgradeable": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "permit": [
                            {
                                "visibility": "external",
                                "content": "function permit( address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s ) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "owner"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "deadline"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "v"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "r"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "s"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "abaa7b8952c208d58b77455671572ce3"
                            }
                        ],
                        "nonces": [
                            {
                                "visibility": "external",
                                "content": "function nonces(address owner) external view returns (uint256);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "owner"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "357d86867bcb5e898ef823b379affee2"
                            }
                        ],
                        "DOMAIN_SEPARATOR": [
                            {
                                "visibility": "external",
                                "content": "function DOMAIN_SEPARATOR() external view returns (bytes32);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "0a5129288a98701e3042bb219b8117b2"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "b8bb1d141dd6fb1bbfee32ec76f165ce"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Rubic20221225\\0x3335A88bb18fD3b6824b59Af62b50CE494143333\\EnumerableSetUpgradeable.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Rubic20221225\\0x3335A88bb18fD3b6824b59Af62b50CE494143333\\EnumerableSetUpgradeable.sol",
            "filename": "EnumerableSetUpgradeable.sol",
            "imported_contracts": {},
            "contracts": {
                "EnumerableSetUpgradeable": {
                    "type": {
                        "__CT__": true,
                        "value": 2
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "_add": [
                            {
                                "visibility": "private",
                                "content": "function _add(Set storage set, bytes32 value) private returns (bool){ if (!_contains(set, value)){ set._values.push(value); set._indexes[value] = set._values.length; return true;} else{ return false;}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "Set storage",
                                        "name": "set"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "value"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "EnumerableSetUpgradeable._contains"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "ad2b7769dc9b89055623e5cf9cf8a379"
                            }
                        ],
                        "_remove": [
                            {
                                "visibility": "private",
                                "content": "function _remove(Set storage set, bytes32 value) private returns (bool){ uint256 valueIndex = set._indexes[value]; if (valueIndex != 0){ uint256 toDeleteIndex = valueIndex - 1; uint256 lastIndex = set._values.length - 1; if (lastIndex != toDeleteIndex){ bytes32 lastValue = set._values[lastIndex]; set._values[toDeleteIndex] = lastValue; set._indexes[lastValue] = valueIndex;} set._values.pop(); delete set._indexes[value]; return true;} else{ return false;}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "Set storage",
                                        "name": "set"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "value"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "ddac9c7a3148d30ffed09d8ea154f93f"
                            }
                        ],
                        "_contains": [
                            {
                                "visibility": "private",
                                "content": "function _contains(Set storage set, bytes32 value) private view returns (bool){ return set._indexes[value] != 0;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "Set storage",
                                        "name": "set"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "value"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "1741e13e15ea9a9f210919d1c3788e12"
                            }
                        ],
                        "_length": [
                            {
                                "visibility": "private",
                                "content": "function _length(Set storage set) private view returns (uint256){ return set._values.length;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "Set storage",
                                        "name": "set"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "bc694b0bdf3b5a29dac66980d1d4182b"
                            }
                        ],
                        "_at": [
                            {
                                "visibility": "private",
                                "content": "function _at(Set storage set, uint256 index) private view returns (bytes32){ return set._values[index];}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "Set storage",
                                        "name": "set"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "index"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "461c15268fe4bf5a6a05da25411c7fc9"
                            }
                        ],
                        "_values": [
                            {
                                "visibility": "private",
                                "content": "function _values(Set storage set) private view returns (bytes32[] memory){ return set._values;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "Set storage",
                                        "name": "set"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes32[] memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "8d5571846ffc4b7aea75563b407fd73b"
                            }
                        ],
                        "add": [
                            {
                                "visibility": "internal",
                                "content": "function add(Bytes32Set storage set, bytes32 value) internal returns (bool){ return _add(set._inner, value);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "Bytes32Set storage",
                                        "name": "set"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "value"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "EnumerableSetUpgradeable._add"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "a781f1092de2c7ab7383feacecf54193"
                            },
                            {
                                "visibility": "internal",
                                "content": "function add(AddressSet storage set, address value) internal returns (bool){ return _add(set._inner, bytes32(uint256(uint160(value))));}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "AddressSet storage",
                                        "name": "set"
                                    },
                                    {
                                        "type": "address",
                                        "name": "value"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "EnumerableSetUpgradeable._add"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "3edf76a089a91822cd8846059713aba8"
                            },
                            {
                                "visibility": "internal",
                                "content": "function add(UintSet storage set, uint256 value) internal returns (bool){ return _add(set._inner, bytes32(value));}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "UintSet storage",
                                        "name": "set"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "EnumerableSetUpgradeable._add"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "852b0f9f2830320e0672bf0227599b4a"
                            }
                        ],
                        "remove": [
                            {
                                "visibility": "internal",
                                "content": "function remove(Bytes32Set storage set, bytes32 value) internal returns (bool){ return _remove(set._inner, value);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "Bytes32Set storage",
                                        "name": "set"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "value"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "EnumerableSetUpgradeable._remove"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "86fffffe13bc5f2bc6250a9078d33ed1"
                            },
                            {
                                "visibility": "internal",
                                "content": "function remove(AddressSet storage set, address value) internal returns (bool){ return _remove(set._inner, bytes32(uint256(uint160(value))));}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "AddressSet storage",
                                        "name": "set"
                                    },
                                    {
                                        "type": "address",
                                        "name": "value"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "EnumerableSetUpgradeable._remove"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "51efe515eaeadbd9b0605b0513ab73d0"
                            },
                            {
                                "visibility": "internal",
                                "content": "function remove(UintSet storage set, uint256 value) internal returns (bool){ return _remove(set._inner, bytes32(value));}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "UintSet storage",
                                        "name": "set"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "EnumerableSetUpgradeable._remove"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "d4f789eb112120d7d4ed25cdb162a126"
                            }
                        ],
                        "contains": [
                            {
                                "visibility": "internal",
                                "content": "function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool){ return _contains(set._inner, value);}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "Bytes32Set storage",
                                        "name": "set"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "value"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "EnumerableSetUpgradeable._contains"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "ebf215d2fe5dbf37db4a675a5e81ca83"
                            },
                            {
                                "visibility": "internal",
                                "content": "function contains(AddressSet storage set, address value) internal view returns (bool){ return _contains(set._inner, bytes32(uint256(uint160(value))));}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "AddressSet storage",
                                        "name": "set"
                                    },
                                    {
                                        "type": "address",
                                        "name": "value"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "EnumerableSetUpgradeable._contains"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "17662067e0b322fd9c16ef50ecede785"
                            },
                            {
                                "visibility": "internal",
                                "content": "function contains(UintSet storage set, uint256 value) internal view returns (bool){ return _contains(set._inner, bytes32(value));}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "UintSet storage",
                                        "name": "set"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "EnumerableSetUpgradeable._contains"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "e69466d3da969494102a54751ab9f3a8"
                            }
                        ],
                        "length": [
                            {
                                "visibility": "internal",
                                "content": "function length(Bytes32Set storage set) internal view returns (uint256){ return _length(set._inner);}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "Bytes32Set storage",
                                        "name": "set"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "EnumerableSetUpgradeable._length"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "cdddec0bf1b403598c3c0d896191f58b"
                            },
                            {
                                "visibility": "internal",
                                "content": "function length(AddressSet storage set) internal view returns (uint256){ return _length(set._inner);}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "AddressSet storage",
                                        "name": "set"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "EnumerableSetUpgradeable._length"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "ecedb9e5fc6c79ed204867d3da23afe5"
                            },
                            {
                                "visibility": "internal",
                                "content": "function length(UintSet storage set) internal view returns (uint256){ return _length(set._inner);}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "UintSet storage",
                                        "name": "set"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "EnumerableSetUpgradeable._length"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "cea2e30ad0bc0364c37de49fbeb20dc5"
                            }
                        ],
                        "at": [
                            {
                                "visibility": "internal",
                                "content": "function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32){ return _at(set._inner, index);}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "Bytes32Set storage",
                                        "name": "set"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "index"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "EnumerableSetUpgradeable._at"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "af7c729aedc6ec7caf11fecc0c9b1432"
                            },
                            {
                                "visibility": "internal",
                                "content": "function at(AddressSet storage set, uint256 index) internal view returns (address){ return address(uint160(uint256(_at(set._inner, index))));}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "AddressSet storage",
                                        "name": "set"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "index"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "EnumerableSetUpgradeable._at"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "acdc34b74c96fe072d76d09948c8a7ca"
                            },
                            {
                                "visibility": "internal",
                                "content": "function at(UintSet storage set, uint256 index) internal view returns (uint256){ return uint256(_at(set._inner, index));}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "UintSet storage",
                                        "name": "set"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "index"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "EnumerableSetUpgradeable._at"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "14de3a4f705bba70509f35b3dd44365f"
                            }
                        ],
                        "values": [
                            {
                                "visibility": "internal",
                                "content": "function values(Bytes32Set storage set) internal view returns (bytes32[] memory){ return _values(set._inner);}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "Bytes32Set storage",
                                        "name": "set"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes32[] memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "EnumerableSetUpgradeable._values"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "5905459e6d35821c06003f1a5fcca72e"
                            },
                            {
                                "visibility": "internal",
                                "content": "function values(AddressSet storage set) internal view returns (address[] memory){ bytes32[] memory store = _values(set._inner); address[] memory result; assembly{ result := store} return result;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "AddressSet storage",
                                        "name": "set"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "address[] memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "EnumerableSetUpgradeable._values"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "5165b34bf04d75dce671449cb352a978"
                            },
                            {
                                "visibility": "internal",
                                "content": "function values(UintSet storage set) internal view returns (uint256[] memory){ bytes32[] memory store = _values(set._inner); uint256[] memory result; assembly{ result := store} return result;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "UintSet storage",
                                        "name": "set"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256[] memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "EnumerableSetUpgradeable._values"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "809aa0dad21796cd324172614a18dd47"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {
                        "Set": {
                            "content": "Set{ bytes32[] _values; mapping(bytes32 => uint256) _indexes;}"
                        },
                        "Bytes32Set": {
                            "content": "Bytes32Set{ Set _inner;}"
                        },
                        "AddressSet": {
                            "content": "AddressSet{ Set _inner;}"
                        },
                        "UintSet": {
                            "content": "UintSet{ Set _inner;}"
                        }
                    },
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "EnumerableSetUpgradeable._contains": "1741e13e15ea9a9f210919d1c3788e12",
                "EnumerableSetUpgradeable._add": "ad2b7769dc9b89055623e5cf9cf8a379",
                "EnumerableSetUpgradeable._remove": "ddac9c7a3148d30ffed09d8ea154f93f",
                "EnumerableSetUpgradeable._length": "bc694b0bdf3b5a29dac66980d1d4182b",
                "EnumerableSetUpgradeable._at": "461c15268fe4bf5a6a05da25411c7fc9",
                "EnumerableSetUpgradeable._values": "8d5571846ffc4b7aea75563b407fd73b"
            },
            "md5": "2a1fc61540a29dc850b943be61028942"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Rubic20221225\\0x3335A88bb18fD3b6824b59Af62b50CE494143333\\Errors.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Rubic20221225\\0x3335A88bb18fD3b6824b59Af62b50CE494143333\\Errors.sol",
            "filename": "Errors.sol",
            "imported_contracts": {},
            "contracts": {},
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {
                "NotAnAdmin": {
                    "content": "NotAnAdmin()"
                },
                "NotAManager": {
                    "content": "NotAManager()"
                },
                "NotARelayer": {
                    "content": "NotARelayer()"
                },
                "OnlyEOA": {
                    "content": "OnlyEOA()"
                },
                "FeeTooHigh": {
                    "content": "FeeTooHigh()"
                },
                "ShareTooHigh": {
                    "content": "ShareTooHigh()"
                },
                "ZeroAddress": {
                    "content": "ZeroAddress()"
                },
                "ZeroAmount": {
                    "content": "ZeroAmount()"
                },
                "InefficientFixedFee": {
                    "content": "InefficientFixedFee()"
                },
                "ApproveFailed": {
                    "content": "ApproveFailed()"
                },
                "MinMustBeLowerThanMax": {
                    "content": "MinMustBeLowerThanMax()"
                },
                "MaxMustBeBiggerThanMin": {
                    "content": "MaxMustBeBiggerThanMin()"
                },
                "CantSetToNull": {
                    "content": "CantSetToNull()"
                },
                "Unchangeable": {
                    "content": "Unchangeable()"
                },
                "LengthMismatch": {
                    "content": "LengthMismatch()"
                }
            },
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "fb06c948104b01bbd8a2d5b81149a7b2"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Rubic20221225\\0x3335A88bb18fD3b6824b59Af62b50CE494143333\\FullMath.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Rubic20221225\\0x3335A88bb18fD3b6824b59Af62b50CE494143333\\FullMath.sol",
            "filename": "FullMath.sol",
            "imported_contracts": {},
            "contracts": {
                "FullMath": {
                    "type": {
                        "__CT__": true,
                        "value": 2
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "mulDiv": [
                            {
                                "visibility": "internal",
                                "content": "function mulDiv( uint256 a, uint256 b, uint256 denominator ) internal pure returns (uint256 result){ unchecked{ uint256 prod0; uint256 prod1; assembly{ let mm := mulmod(a, b, not(0)) prod0 := mul(a, b) prod1 := sub(sub(mm, prod0), lt(mm, prod0))} if (prod1 == 0){ require(denominator > 0); assembly{ result := div(prod0, denominator)} return result;} require(denominator > prod1); uint256 remainder; assembly{ remainder := mulmod(a, b, denominator)} assembly{ prod1 := sub(prod1, gt(remainder, prod0)) prod0 := sub(prod0, remainder)} uint256 twos = (0 - denominator) & denominator; assembly{ denominator := div(denominator, twos)} assembly{ prod0 := div(prod0, twos)} assembly{ twos := add(div(sub(0, twos), twos), 1)} prod0 |= prod1 * twos; uint256 inv = (3 * denominator) ^ 2; inv *= 2 - denominator * inv; inv *= 2 - denominator * inv; inv *= 2 - denominator * inv; inv *= 2 - denominator * inv; inv *= 2 - denominator * inv; inv *= 2 - denominator * inv; result = prod0 * inv; return result;}}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "a"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "b"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "denominator"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": "result"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "71f706b9d84598d25f61d644703e0636"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "44bbb386f40d54923fcdedf73aea9ada"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Rubic20221225\\0x3335A88bb18fD3b6824b59Af62b50CE494143333\\IERC20Upgradeable.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Rubic20221225\\0x3335A88bb18fD3b6824b59Af62b50CE494143333\\IERC20Upgradeable.sol",
            "filename": "IERC20Upgradeable.sol",
            "imported_contracts": {},
            "contracts": {
                "IERC20Upgradeable": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "totalSupply": [
                            {
                                "visibility": "external",
                                "content": "function totalSupply() external view returns (uint256);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "5e1d12e61f4bf4b37161d9b684742570"
                            }
                        ],
                        "balanceOf": [
                            {
                                "visibility": "external",
                                "content": "function balanceOf(address account) external view returns (uint256);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "account"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "3ac17e7782366957c960d337a4a648cd"
                            }
                        ],
                        "transfer": [
                            {
                                "visibility": "external",
                                "content": "function transfer(address to, uint256 amount) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "f4ffe0b79c8a4a1a9720675d3ac08278"
                            }
                        ],
                        "allowance": [
                            {
                                "visibility": "external",
                                "content": "function allowance(address owner, address spender) external view returns (uint256);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "owner"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c93791d09d789aed33b9725d482af442"
                            }
                        ],
                        "approve": [
                            {
                                "visibility": "external",
                                "content": "function approve(address spender, uint256 amount) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "7c80d707df648dc123a10c69a1150edc"
                            }
                        ],
                        "transferFrom": [
                            {
                                "visibility": "external",
                                "content": "function transferFrom( address from, address to, uint256 amount ) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "359ece5a67467cccf835eeb464b71fef"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {
                        "Transfer": {
                            "event": "Transfer",
                            "content": "Transfer(address indexed from, address indexed to, uint256 value)"
                        },
                        "Approval": {
                            "event": "Approval",
                            "content": "Approval(address indexed owner, address indexed spender, uint256 value)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "472bb34d4693f7e1a6bacdeb0d5ce45b"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Rubic20221225\\0x3335A88bb18fD3b6824b59Af62b50CE494143333\\OnlySourceFunctionality.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Rubic20221225\\0x3335A88bb18fD3b6824b59Af62b50CE494143333\\OnlySourceFunctionality.sol",
            "filename": "OnlySourceFunctionality.sol",
            "imported_contracts": {
                "": {
                    "in_database": false,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "OnlySourceFunctionality": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "BridgeBase"
                    ],
                    "state_variables": {},
                    "functions": {
                        "__OnlySourceFunctionalityInit": [
                            {
                                "visibility": "internal",
                                "content": "function __OnlySourceFunctionalityInit( uint256 _fixedCryptoFee, uint256 _RubicPlatformFee, address[] memory _routers, address[] memory _tokens, uint256[] memory _minTokenAmounts, uint256[] memory _maxTokenAmounts ) internal onlyInitializing{ __BridgeBaseInit(_fixedCryptoFee, _RubicPlatformFee, _routers, _tokens, _minTokenAmounts, _maxTokenAmounts);}",
                                "modifiers": [
                                    "onlyInitializing"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "_fixedCryptoFee"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_RubicPlatformFee"
                                    },
                                    {
                                        "type": "address[] memory",
                                        "name": "_routers"
                                    },
                                    {
                                        "type": "address[] memory",
                                        "name": "_tokens"
                                    },
                                    {
                                        "type": "uint256[] memory",
                                        "name": "_minTokenAmounts"
                                    },
                                    {
                                        "type": "uint256[] memory",
                                        "name": "_maxTokenAmounts"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "OnlySourceFunctionality.__BridgeBaseInit",
                                        "OnlySourceFunctionality.onlyInitializing"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "fa278f1219ecc9c88f0c897e30022b35"
                            }
                        ]
                    },
                    "modifiers": {
                        "eventEmitter": {
                            "parameters": [
                                {
                                    "type": "BaseCrossChainParams calldata",
                                    "name": "_params"
                                }
                            ],
                            "content": "modifier eventEmitter(BaseCrossChainParams calldata _params){ _; emit RequestSent(_params);}",
                            "reads": [],
                            "writes": [],
                            "external_calls": [],
                            "md5": "e230e3110aac281e793547ca169333d4"
                        }
                    },
                    "structs": {},
                    "events": {
                        "RequestSent": {
                            "event": "RequestSent",
                            "content": "RequestSent(BaseCrossChainParams parameters)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "8625a960e5484eca61d385458e4b0e3d"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Rubic20221225\\0x3335A88bb18fD3b6824b59Af62b50CE494143333\\PausableUpgradeable.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Rubic20221225\\0x3335A88bb18fD3b6824b59Af62b50CE494143333\\PausableUpgradeable.sol",
            "filename": "PausableUpgradeable.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Rubic20221225\\0x3335A88bb18fD3b6824b59Af62b50CE494143333\\ContextUpgradeable.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Rubic20221225\\0x3335A88bb18fD3b6824b59Af62b50CE494143333\\Initializable.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "PausableUpgradeable": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": true,
                    "inherits": [
                        "is",
                        "Initializable",
                        "ContextUpgradeable"
                    ],
                    "state_variables": {
                        "_paused": {
                            "type": "bool",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "bool private _paused;"
                        },
                        "__gap": {
                            "type": "uint256[49]",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256[49] private __gap;"
                        }
                    },
                    "functions": {
                        "__Pausable_init": [
                            {
                                "visibility": "internal",
                                "content": "function __Pausable_init() internal onlyInitializing{ __Pausable_init_unchained();}",
                                "modifiers": [
                                    "onlyInitializing"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "PausableUpgradeable.__Pausable_init_unchained",
                                        "PausableUpgradeable.onlyInitializing"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "1ed92d76f6ee6ccfcde78bbb01f27574"
                            }
                        ],
                        "__Pausable_init_unchained": [
                            {
                                "visibility": "internal",
                                "content": "function __Pausable_init_unchained() internal onlyInitializing{ _paused = false;}",
                                "modifiers": [
                                    "onlyInitializing"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [
                                    [
                                        "_paused",
                                        "",
                                        "PausableUpgradeable"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_paused",
                                        "",
                                        "PausableUpgradeable"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "PausableUpgradeable.onlyInitializing"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "9263fc41a213ad38863a51175dbcddfa"
                            }
                        ],
                        "paused": [
                            {
                                "visibility": "public",
                                "content": "function paused() public view virtual returns (bool){ return _paused;}",
                                "modifiers": [
                                    "view",
                                    "virtual"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_paused",
                                        "",
                                        "PausableUpgradeable"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "2a45875f9a64209d907a8aed7b202937"
                            }
                        ],
                        "_requireNotPaused": [
                            {
                                "visibility": "internal",
                                "content": "function _requireNotPaused() internal view virtual{ require(!paused(), \"Pausable: paused\");}",
                                "modifiers": [
                                    "view",
                                    "virtual"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "PausableUpgradeable.paused"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "5fc561475859bb022d942661880774fd"
                            }
                        ],
                        "_requirePaused": [
                            {
                                "visibility": "internal",
                                "content": "function _requirePaused() internal view virtual{ require(paused(), \"Pausable: not paused\");}",
                                "modifiers": [
                                    "view",
                                    "virtual"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "PausableUpgradeable.paused"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "1bef451cd948246229255bd48e745331"
                            }
                        ],
                        "_pause": [
                            {
                                "visibility": "internal",
                                "content": "function _pause() internal virtual whenNotPaused{ _paused = true; emit Paused(_msgSender());}",
                                "modifiers": [
                                    "virtual",
                                    "whenNotPaused"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [
                                    [
                                        "_paused",
                                        "",
                                        "PausableUpgradeable"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_paused",
                                        "",
                                        "PausableUpgradeable"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "PausableUpgradeable._msgSender",
                                        "PausableUpgradeable.whenNotPaused"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "5f208620cb437050ec0355ecb0c3e32b"
                            }
                        ],
                        "_unpause": [
                            {
                                "visibility": "internal",
                                "content": "function _unpause() internal virtual whenPaused{ _paused = false; emit Unpaused(_msgSender());}",
                                "modifiers": [
                                    "virtual",
                                    "whenPaused"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [
                                    [
                                        "_paused",
                                        "",
                                        "PausableUpgradeable"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_paused",
                                        "",
                                        "PausableUpgradeable"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "PausableUpgradeable._msgSender",
                                        "PausableUpgradeable.whenPaused"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "07005ace67272c8e873543f86aa97854"
                            }
                        ]
                    },
                    "modifiers": {
                        "whenNotPaused": {
                            "parameters": [],
                            "content": "modifier whenNotPaused(){ _requireNotPaused(); _;}",
                            "reads": [],
                            "writes": [],
                            "external_calls": {
                                "__set__": true,
                                "values": [
                                    "PausableUpgradeable._requireNotPaused"
                                ]
                            },
                            "md5": "f322add002d88d5e6eab348a5974d98a"
                        },
                        "whenPaused": {
                            "parameters": [],
                            "content": "modifier whenPaused(){ _requirePaused(); _;}",
                            "reads": [],
                            "writes": [],
                            "external_calls": {
                                "__set__": true,
                                "values": [
                                    "PausableUpgradeable._requirePaused"
                                ]
                            },
                            "md5": "8ac7350ab3f2e0cbce5664b915e40d83"
                        }
                    },
                    "structs": {},
                    "events": {
                        "Paused": {
                            "event": "Paused",
                            "content": "Paused(address account)"
                        },
                        "Unpaused": {
                            "event": "Unpaused",
                            "content": "Unpaused(address account)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "PausableUpgradeable.onlyInitializing": "9aa43424d4ca4ac38d1414b683de0171",
                "PausableUpgradeable.__Pausable_init_unchained": "9263fc41a213ad38863a51175dbcddfa",
                "PausableUpgradeable._requireNotPaused": "5fc561475859bb022d942661880774fd",
                "PausableUpgradeable._requirePaused": "1bef451cd948246229255bd48e745331",
                "PausableUpgradeable.paused": "2a45875f9a64209d907a8aed7b202937",
                "PausableUpgradeable.whenNotPaused": "f322add002d88d5e6eab348a5974d98a",
                "PausableUpgradeable._msgSender": "3bc534219d7c704e82b1271e27e1e9f4",
                "PausableUpgradeable.whenPaused": "8ac7350ab3f2e0cbce5664b915e40d83"
            },
            "md5": "d49d7470face4673bbf6b1415930a7f8"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Rubic20221225\\0x3335A88bb18fD3b6824b59Af62b50CE494143333\\ReentrancyGuardUpgradeable.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Rubic20221225\\0x3335A88bb18fD3b6824b59Af62b50CE494143333\\ReentrancyGuardUpgradeable.sol",
            "filename": "ReentrancyGuardUpgradeable.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Rubic20221225\\0x3335A88bb18fD3b6824b59Af62b50CE494143333\\Initializable.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "ReentrancyGuardUpgradeable": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": true,
                    "inherits": [
                        "is",
                        "Initializable"
                    ],
                    "state_variables": {
                        "_NOT_ENTERED": {
                            "type": "uint256",
                            "visibility": "private",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "1",
                            "content": "uint256 private constant _NOT_ENTERED = 1;"
                        },
                        "_ENTERED": {
                            "type": "uint256",
                            "visibility": "private",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "2",
                            "content": "uint256 private constant _ENTERED = 2;"
                        },
                        "_status": {
                            "type": "uint256",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256 private _status;"
                        },
                        "__gap": {
                            "type": "uint256[49]",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256[49] private __gap;"
                        }
                    },
                    "functions": {
                        "__ReentrancyGuard_init": [
                            {
                                "visibility": "internal",
                                "content": "function __ReentrancyGuard_init() internal onlyInitializing{ __ReentrancyGuard_init_unchained();}",
                                "modifiers": [
                                    "onlyInitializing"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ReentrancyGuardUpgradeable.__ReentrancyGuard_init_unchained",
                                        "ReentrancyGuardUpgradeable.onlyInitializing"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "fdb427b7985133c60b2358311b26f832"
                            }
                        ],
                        "__ReentrancyGuard_init_unchained": [
                            {
                                "visibility": "internal",
                                "content": "function __ReentrancyGuard_init_unchained() internal onlyInitializing{ _status = _NOT_ENTERED;}",
                                "modifiers": [
                                    "onlyInitializing"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [
                                    [
                                        "_NOT_ENTERED",
                                        "",
                                        "ReentrancyGuardUpgradeable"
                                    ],
                                    [
                                        "_status",
                                        "",
                                        "ReentrancyGuardUpgradeable"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_status",
                                        "",
                                        "ReentrancyGuardUpgradeable"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ReentrancyGuardUpgradeable.onlyInitializing"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "a4c1f8d704aaf3afdc555372d159b346"
                            }
                        ]
                    },
                    "modifiers": {
                        "nonReentrant": {
                            "parameters": [],
                            "content": "modifier nonReentrant(){ require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\"); _status = _ENTERED; _; _status = _NOT_ENTERED;}",
                            "reads": [
                                [
                                    "_NOT_ENTERED",
                                    "",
                                    "ReentrancyGuardUpgradeable"
                                ],
                                [
                                    "_ENTERED",
                                    "",
                                    "ReentrancyGuardUpgradeable"
                                ],
                                [
                                    "_status",
                                    "",
                                    "ReentrancyGuardUpgradeable"
                                ]
                            ],
                            "writes": [
                                [
                                    "_status",
                                    "",
                                    "ReentrancyGuardUpgradeable"
                                ]
                            ],
                            "external_calls": [],
                            "md5": "bfd26885a528af04ff7161b74f7a2107"
                        }
                    },
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "ReentrancyGuardUpgradeable.__ReentrancyGuard_init_unchained": "a4c1f8d704aaf3afdc555372d159b346",
                "ReentrancyGuardUpgradeable.onlyInitializing": "9aa43424d4ca4ac38d1414b683de0171"
            },
            "md5": "60bf1526c64ac28af7a6f74bf88e542c"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Rubic20221225\\0x3335A88bb18fD3b6824b59Af62b50CE494143333\\RubicProxy-label.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Rubic20221225\\0x3335A88bb18fD3b6824b59Af62b50CE494143333\\RubicProxy-label.sol",
            "filename": "RubicProxy-label.sol",
            "imported_contracts": {
                "": {
                    "in_database": false,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "RubicProxy": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "OnlySourceFunctionality"
                    ],
                    "state_variables": {},
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor ( uint256 _fixedCryptoFee, uint256 _RubicPlatformFee, address[] memory _routers, address[] memory _tokens, uint256[] memory _minTokenAmounts, uint256[] memory _maxTokenAmounts ){ initialize(_fixedCryptoFee, _RubicPlatformFee, _routers, _tokens, _minTokenAmounts, _maxTokenAmounts);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "_fixedCryptoFee"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_RubicPlatformFee"
                                    },
                                    {
                                        "type": "address[] memory",
                                        "name": "_routers"
                                    },
                                    {
                                        "type": "address[] memory",
                                        "name": "_tokens"
                                    },
                                    {
                                        "type": "uint256[] memory",
                                        "name": "_minTokenAmounts"
                                    },
                                    {
                                        "type": "uint256[] memory",
                                        "name": "_maxTokenAmounts"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "511a2ef554b9ab29e0c1e128f410d0aa"
                            }
                        ],
                        "initialize": [
                            {
                                "visibility": "private",
                                "content": "function initialize( uint256 _fixedCryptoFee, uint256 _RubicPlatformFee, address[] memory _routers, address[] memory _tokens, uint256[] memory _minTokenAmounts, uint256[] memory _maxTokenAmounts ) private initializer{ __OnlySourceFunctionalityInit( _fixedCryptoFee, _RubicPlatformFee, _routers, _tokens, _minTokenAmounts, _maxTokenAmounts );}",
                                "modifiers": [
                                    "initializer"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "_fixedCryptoFee"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_RubicPlatformFee"
                                    },
                                    {
                                        "type": "address[] memory",
                                        "name": "_routers"
                                    },
                                    {
                                        "type": "address[] memory",
                                        "name": "_tokens"
                                    },
                                    {
                                        "type": "uint256[] memory",
                                        "name": "_minTokenAmounts"
                                    },
                                    {
                                        "type": "uint256[] memory",
                                        "name": "_maxTokenAmounts"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "RubicProxy.__OnlySourceFunctionalityInit",
                                        "RubicProxy.initializer"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "830dc96820dbc9cb25fc336c4e079d80"
                            }
                        ],
                        "routerCall": [
                            {
                                "visibility": "external",
                                "content": "function routerCall( BaseCrossChainParams calldata _params, address _gateway, bytes calldata _data ) external payable nonReentrant whenNotPaused{ if (!(availableRouters.contains(_params.router) && availableRouters.contains(_gateway))){ revert RouterNotAvailable();} IERC20Upgradeable(_params.srcInputToken).safeTransferFrom(msg.sender, address(this), _params.srcInputAmount); IntegratorFeeInfo memory _info = integratorToFeeInfo[_params.integrator]; uint256 _amountIn = accrueTokenFees( _params.integrator, _info, _params.srcInputAmount, 0, _params.srcInputToken ); SmartApprove.smartApprove(_params.srcInputToken, _amountIn, _gateway); uint256 balanceBefore = IERC20Upgradeable(_params.srcInputToken).balanceOf(address(this)); AddressUpgradeable.functionCallWithValue( _params.router, _data, accrueFixedCryptoFee(_params.integrator, _info) ); if (balanceBefore - IERC20Upgradeable(_params.srcInputToken).balanceOf(address(this)) != _amountIn){ revert DifferentAmountSpent();} emit RequestSent(_params);}",
                                "modifiers": [
                                    "payable",
                                    "nonReentrant",
                                    "whenNotPaused"
                                ],
                                "parameters": [
                                    {
                                        "type": "BaseCrossChainParams calldata",
                                        "name": "_params"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_gateway"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "_data"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "availableRouters.contains",
                                        "AddressUpgradeable.functionCallWithValue",
                                        "RubicProxy.whenNotPaused",
                                        "RubicProxy.RouterNotAvailable",
                                        "SmartApprove.smartApprove",
                                        "RubicProxy.nonReentrant",
                                        "RubicProxy.DifferentAmountSpent",
                                        "RubicProxy.IERC20Upgradeable",
                                        "RubicProxy.accrueTokenFees",
                                        "RubicProxy.accrueFixedCryptoFee",
                                        "RubicProxy.RequestSent"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "3acb93ca78c44fcab6c62f042b02eaea"
                            }
                        ],
                        "routerCallNative": [
                            {
                                "visibility": "external",
                                "content": "function routerCallNative(BaseCrossChainParams calldata _params, bytes calldata _data) external payable nonReentrant whenNotPaused{ if (!availableRouters.contains(_params.router)){ revert RouterNotAvailable();} IntegratorFeeInfo memory _info = integratorToFeeInfo[_params.integrator]; uint256 _amountIn = accrueTokenFees( _params.integrator, _info, accrueFixedCryptoFee(_params.integrator, _info), 0, address(0) ); AddressUpgradeable.functionCallWithValue(_params.router, _data, _amountIn); emit RequestSent(_params);}",
                                "modifiers": [
                                    "payable",
                                    "nonReentrant",
                                    "whenNotPaused"
                                ],
                                "parameters": [
                                    {
                                        "type": "BaseCrossChainParams calldata",
                                        "name": "_params"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "_data"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "availableRouters.contains",
                                        "RubicProxy.whenNotPaused",
                                        "AddressUpgradeable.functionCallWithValue",
                                        "RubicProxy.RouterNotAvailable",
                                        "RubicProxy.nonReentrant",
                                        "RubicProxy.accrueTokenFees",
                                        "RubicProxy.accrueFixedCryptoFee",
                                        "RubicProxy.RequestSent"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "9b843fb545aa2c2e0c12ccc914bac3ef"
                            }
                        ],
                        "sweepTokens": [
                            {
                                "visibility": "external",
                                "content": "function sweepTokens(address _token, uint256 _amount) external onlyAdmin{ sendToken(_token, _amount, msg.sender);}",
                                "modifiers": [
                                    "onlyAdmin"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_token"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "RubicProxy.onlyAdmin",
                                        "RubicProxy.sendToken"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "32533e0475f224140f98e17834d0f5ad"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "IERC20Upgradeable": "SafeERC20Upgradeable"
                    }
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "bfda8d247049231603fc34fbaa57f3e0"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Rubic20221225\\0x3335A88bb18fD3b6824b59Af62b50CE494143333\\SafeERC20Upgradeable.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Rubic20221225\\0x3335A88bb18fD3b6824b59Af62b50CE494143333\\SafeERC20Upgradeable.sol",
            "filename": "SafeERC20Upgradeable.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Rubic20221225\\0x3335A88bb18fD3b6824b59Af62b50CE494143333\\IERC20Upgradeable.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Rubic20221225\\0x3335A88bb18fD3b6824b59Af62b50CE494143333\\draft-IERC20PermitUpgradeable.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Rubic20221225\\0x3335A88bb18fD3b6824b59Af62b50CE494143333\\AddressUpgradeable.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "SafeERC20Upgradeable": {
                    "type": {
                        "__CT__": true,
                        "value": 2
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "safeTransfer": [
                            {
                                "visibility": "internal",
                                "content": "function safeTransfer( IERC20Upgradeable token, address to, uint256 value ) internal{ _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "IERC20Upgradeable",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SafeERC20Upgradeable._callOptionalReturn"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "5d76fe8e5e00ef0c261ad9491ffe0d95"
                            }
                        ],
                        "safeTransferFrom": [
                            {
                                "visibility": "internal",
                                "content": "function safeTransferFrom( IERC20Upgradeable token, address from, address to, uint256 value ) internal{ _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "IERC20Upgradeable",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SafeERC20Upgradeable._callOptionalReturn"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "57431b4278800caf3963f049925622b4"
                            }
                        ],
                        "safeApprove": [
                            {
                                "visibility": "internal",
                                "content": "function safeApprove( IERC20Upgradeable token, address spender, uint256 value ) internal{ require( (value == 0) || (token.allowance(address(this), spender) == 0), \"SafeERC20: approve from non-zero to non-zero allowance\" ); _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "IERC20Upgradeable",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "IERC20Upgradeable.allowance",
                                        "SafeERC20Upgradeable._callOptionalReturn"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "a4d677c1263904c9bbd8a2f8ddda7782"
                            }
                        ],
                        "safeIncreaseAllowance": [
                            {
                                "visibility": "internal",
                                "content": "function safeIncreaseAllowance( IERC20Upgradeable token, address spender, uint256 value ) internal{ uint256 newAllowance = token.allowance(address(this), spender) + value; _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "IERC20Upgradeable",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "IERC20Upgradeable.allowance",
                                        "SafeERC20Upgradeable._callOptionalReturn"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "c9736b9825e336263b2b2397f6c8eb6f"
                            }
                        ],
                        "safeDecreaseAllowance": [
                            {
                                "visibility": "internal",
                                "content": "function safeDecreaseAllowance( IERC20Upgradeable token, address spender, uint256 value ) internal{ unchecked{ uint256 oldAllowance = token.allowance(address(this), spender); require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\"); uint256 newAllowance = oldAllowance - value; _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "IERC20Upgradeable",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "IERC20Upgradeable.allowance",
                                        "SafeERC20Upgradeable._callOptionalReturn"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "4d43e0ae869ff557caeaafa74f68c8d6"
                            }
                        ],
                        "safePermit": [
                            {
                                "visibility": "internal",
                                "content": "function safePermit( IERC20PermitUpgradeable token, address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s ) internal{ uint256 nonceBefore = token.nonces(owner); token.permit(owner, spender, value, deadline, v, r, s); uint256 nonceAfter = token.nonces(owner); require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "IERC20PermitUpgradeable",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "owner"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "deadline"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "v"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "r"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "s"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "IERC20PermitUpgradeable.permit",
                                        "IERC20PermitUpgradeable.nonces"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "dd4868c276e23b6cc309f8f62a399906"
                            }
                        ],
                        "_callOptionalReturn": [
                            {
                                "visibility": "private",
                                "content": "function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private{ bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\"); if (returndata.length > 0){ require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "IERC20Upgradeable",
                                        "name": "token"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "data"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "IERC20Upgradeable.functionCall"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "a4e40b0775bd936809c8fa7e0e3433e8"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "address": "AddressUpgradeable"
                    }
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "SafeERC20Upgradeable._callOptionalReturn": "a4e40b0775bd936809c8fa7e0e3433e8",
                "IERC20Upgradeable.allowance": "c93791d09d789aed33b9725d482af442",
                "IERC20PermitUpgradeable.nonces": "357d86867bcb5e898ef823b379affee2",
                "IERC20PermitUpgradeable.permit": "abaa7b8952c208d58b77455671572ce3",
                "IERC20Upgradeable.functionCall": "9bd9227b4301edafa41944a5a4cc096d"
            },
            "md5": "304de5fcf6fddbe7e6e96cfe247e6db7"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Rubic20221225\\0x3335A88bb18fD3b6824b59Af62b50CE494143333\\SmartApprove.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Rubic20221225\\0x3335A88bb18fD3b6824b59Af62b50CE494143333\\SmartApprove.sol",
            "filename": "SmartApprove.sol",
            "imported_contracts": {
                "": {
                    "in_database": false,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "SmartApprove": {
                    "type": {
                        "__CT__": true,
                        "value": 2
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "smartApprove": [
                            {
                                "visibility": "internal",
                                "content": "function smartApprove( address _tokenIn, uint256 _amount, address _to ) internal{ IERC20Upgradeable tokenIn = IERC20Upgradeable(_tokenIn); uint256 _allowance = tokenIn.allowance(address(this), _to); if (_allowance < _amount){ if (_allowance == 0){ tokenIn.safeApprove(_to, type (uint256).max);} else{ try tokenIn.approve(_to, type (uint256).max) returns (bool res){ if (!res){ revert ApproveFailed();}} catch{ tokenIn.safeApprove(_to, 0); tokenIn.safeApprove(_to, type (uint256).max);}}}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_tokenIn"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_amount"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_to"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "IERC20Upgradeable.safeApprove",
                                        "IERC20Upgradeable.approve",
                                        "IERC20Upgradeable.allowance",
                                        "SmartApprove.IERC20Upgradeable",
                                        "SmartApprove.ApproveFailed",
                                        "SmartApprove.type"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "a2823594d91641f3e7409bd1bde585bc"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "IERC20Upgradeable": "SafeERC20Upgradeable"
                    }
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "648f9faaf6f1a6461be54f3b952b55ab"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Rubic20221225\\contracts\\BridgeBase.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Rubic20221225\\contracts\\BridgeBase.sol",
            "filename": "BridgeBase.sol",
            "imported_contracts": {
                "": {
                    "in_database": false,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "BridgeBase": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "AccessControlUpgradeable",
                        "PausableUpgradeable",
                        "ReentrancyGuardUpgradeable"
                    ],
                    "state_variables": {
                        "DENOMINATOR": {
                            "type": "uint256",
                            "visibility": "internal",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "1e6",
                            "content": "uint256 internal constant DENOMINATOR = 1e6;"
                        },
                        "MANAGER_ROLE": {
                            "type": "bytes32",
                            "visibility": "public",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "keccak256('MANAGER_ROLE')",
                            "content": "bytes32 public constant MANAGER_ROLE = keccak256('MANAGER_ROLE');"
                        },
                        "integratorToFeeInfo": {
                            "type": "mapping(address => IntegratorFeeInfo)",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(address => IntegratorFeeInfo) public integratorToFeeInfo;"
                        },
                        "availableIntegratorCryptoFee": {
                            "type": "mapping(address => uint256)",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(address => uint256) public availableIntegratorCryptoFee;"
                        },
                        "minTokenAmount": {
                            "type": "mapping(address => uint256)",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(address => uint256) public minTokenAmount;"
                        },
                        "maxTokenAmount": {
                            "type": "mapping(address => uint256)",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(address => uint256) public maxTokenAmount;"
                        },
                        "availableRubicTokenFee": {
                            "type": "mapping(address => uint256)",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(address => uint256) public availableRubicTokenFee;"
                        },
                        "availableIntegratorTokenFee": {
                            "type": "mapping(address => mapping(address => uint256))",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(address => mapping(address => uint256)) public availableIntegratorTokenFee;"
                        },
                        "maxRubicPlatformFee": {
                            "type": "uint256",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "250_000",
                            "content": "uint256 public maxRubicPlatformFee = 250_000;"
                        },
                        "RubicPlatformFee": {
                            "type": "uint256",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256 public RubicPlatformFee;"
                        },
                        "fixedCryptoFee": {
                            "type": "uint256",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256 public fixedCryptoFee;"
                        },
                        "availableRubicCryptoFee": {
                            "type": "uint256",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256 public availableRubicCryptoFee;"
                        },
                        "pendingAdmin": {
                            "type": "address",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address private pendingAdmin;"
                        },
                        "previousAdmin": {
                            "type": "address",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address private previousAdmin;"
                        }
                    },
                    "functions": {
                        "__BridgeBaseInit": [
                            {
                                "visibility": "internal",
                                "content": "function __BridgeBaseInit( uint256 _fixedCryptoFee, uint256 _RubicPlatformFee, address[] memory _tokens, uint256[] memory _minTokenAmounts, uint256[] memory _maxTokenAmounts, address _admin ) internal onlyInitializing{ if (_admin == address(0)){ revert ZeroAddress();} __Pausable_init_unchained(); fixedCryptoFee = _fixedCryptoFee; if (_RubicPlatformFee > DENOMINATOR){ revert FeeTooHigh();} RubicPlatformFee = _RubicPlatformFee; uint256 tokensLength = _tokens.length; for (uint256 i; i < tokensLength; ){ if (_minTokenAmounts[i] > _maxTokenAmounts[i]){ revert MinMustBeLowerThanMax();} minTokenAmount[_tokens[i]] = _minTokenAmounts[i]; maxTokenAmount[_tokens[i]] = _maxTokenAmounts[i]; unchecked{ ++i;}} _setupRole(DEFAULT_ADMIN_ROLE, _admin);}",
                                "modifiers": [
                                    "onlyInitializing"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "_fixedCryptoFee"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_RubicPlatformFee"
                                    },
                                    {
                                        "type": "address[] memory",
                                        "name": "_tokens"
                                    },
                                    {
                                        "type": "uint256[] memory",
                                        "name": "_minTokenAmounts"
                                    },
                                    {
                                        "type": "uint256[] memory",
                                        "name": "_maxTokenAmounts"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_admin"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "DENOMINATOR",
                                        "",
                                        "BridgeBase"
                                    ],
                                    [
                                        "minTokenAmount",
                                        "",
                                        "BridgeBase"
                                    ],
                                    [
                                        "maxTokenAmount",
                                        "",
                                        "BridgeBase"
                                    ],
                                    [
                                        "RubicPlatformFee",
                                        "",
                                        "BridgeBase"
                                    ],
                                    [
                                        "fixedCryptoFee",
                                        "",
                                        "BridgeBase"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "minTokenAmount",
                                        "",
                                        "BridgeBase"
                                    ],
                                    [
                                        "maxTokenAmount",
                                        "",
                                        "BridgeBase"
                                    ],
                                    [
                                        "RubicPlatformFee",
                                        "",
                                        "BridgeBase"
                                    ],
                                    [
                                        "fixedCryptoFee",
                                        "",
                                        "BridgeBase"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BridgeBase.__Pausable_init_unchained",
                                        "BridgeBase.MinMustBeLowerThanMax",
                                        "BridgeBase.ZeroAddress",
                                        "BridgeBase._setupRole",
                                        "BridgeBase.onlyInitializing",
                                        "BridgeBase.FeeTooHigh"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "c2b4f31d6e54c316babd9fc7b7b432c6"
                            }
                        ],
                        "accrueFixedCryptoFee": [
                            {
                                "visibility": "internal",
                                "content": "function accrueFixedCryptoFee( address _integrator, IntegratorFeeInfo memory _info ) internal returns (uint256){ uint256 _fixedCryptoFee; uint256 _RubicPart; if (_info.isIntegrator){ _fixedCryptoFee = uint256(_info.fixedFeeAmount); if (_fixedCryptoFee > 0){ _RubicPart = (_fixedCryptoFee * _info.RubicFixedCryptoShare) / DENOMINATOR; availableIntegratorCryptoFee[_integrator] += _fixedCryptoFee - _RubicPart;}} else{ _fixedCryptoFee = fixedCryptoFee; _RubicPart = _fixedCryptoFee;} availableRubicCryptoFee += _RubicPart; emit FixedCryptoFee( _RubicPart, _fixedCryptoFee - _RubicPart, _integrator ); return (msg.value - _fixedCryptoFee);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_integrator"
                                    },
                                    {
                                        "type": "IntegratorFeeInfo memory",
                                        "name": "_info"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "DENOMINATOR",
                                        "",
                                        "BridgeBase"
                                    ],
                                    [
                                        "availableIntegratorCryptoFee",
                                        "",
                                        "BridgeBase"
                                    ],
                                    [
                                        "fixedCryptoFee",
                                        "",
                                        "BridgeBase"
                                    ],
                                    [
                                        "availableRubicCryptoFee",
                                        "",
                                        "BridgeBase"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "availableIntegratorCryptoFee",
                                        "",
                                        "BridgeBase"
                                    ],
                                    [
                                        "availableRubicCryptoFee",
                                        "",
                                        "BridgeBase"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "8aa98744f2aeb795b2db77f4f0397057"
                            }
                        ],
                        "accrueTokenFees": [
                            {
                                "visibility": "internal",
                                "content": "function accrueTokenFees( address _integrator, IntegratorFeeInfo memory _info, uint256 _amountWithFee, uint256 _initBlockchainNum, address _token ) internal returns (uint256){ (uint256 _totalFees, uint256 _RubicFee) = _calculateFee( _info, _amountWithFee, _initBlockchainNum ); if (_integrator != address(0)){ availableIntegratorTokenFee[_token][_integrator] += _totalFees - _RubicFee;} availableRubicTokenFee[_token] += _RubicFee; emit TokenFee( _RubicFee, _totalFees - _RubicFee, _integrator, _token ); return _amountWithFee - _totalFees;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_integrator"
                                    },
                                    {
                                        "type": "IntegratorFeeInfo memory",
                                        "name": "_info"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_amountWithFee"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_initBlockchainNum"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_token"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "availableRubicTokenFee",
                                        "",
                                        "BridgeBase"
                                    ],
                                    [
                                        "availableIntegratorTokenFee",
                                        "",
                                        "BridgeBase"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "availableRubicTokenFee",
                                        "",
                                        "BridgeBase"
                                    ],
                                    [
                                        "availableIntegratorTokenFee",
                                        "",
                                        "BridgeBase"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BridgeBase._calculateFee"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "334799e401244cfaf7ab95ad27740477"
                            }
                        ],
                        "_calculateFeeWithIntegrator": [
                            {
                                "visibility": "internal",
                                "content": "function _calculateFeeWithIntegrator( uint256 _amountWithFee, IntegratorFeeInfo memory _info ) internal pure returns (uint256 _totalFee, uint256 _RubicFee){ if (_info.tokenFee > 0){ _totalFee = FullMath.mulDiv( _amountWithFee, _info.tokenFee, DENOMINATOR ); _RubicFee = FullMath.mulDiv( _totalFee, _info.RubicTokenShare, DENOMINATOR );}}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "_amountWithFee"
                                    },
                                    {
                                        "type": "IntegratorFeeInfo memory",
                                        "name": "_info"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": "_totalFee"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_RubicFee"
                                    }
                                ],
                                "reads": [
                                    [
                                        "DENOMINATOR",
                                        "",
                                        "BridgeBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "FullMath.mulDiv"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "6654f1082ec95526444bc385bb82ebba"
                            }
                        ],
                        "_calculateFee": [
                            {
                                "visibility": "internal",
                                "content": "function _calculateFee( IntegratorFeeInfo memory _info, uint256 _amountWithFee, uint256 ) internal view returns (uint256 _totalFee, uint256 _RubicFee){ if (_info.isIntegrator){ ( _totalFee, _RubicFee ) = _calculateFeeWithIntegrator( _amountWithFee, _info );} else{ _totalFee = FullMath.mulDiv( _amountWithFee, RubicPlatformFee, DENOMINATOR ); _RubicFee = _totalFee;}}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "IntegratorFeeInfo memory",
                                        "name": "_info"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_amountWithFee"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": "_totalFee"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_RubicFee"
                                    }
                                ],
                                "reads": [
                                    [
                                        "DENOMINATOR",
                                        "",
                                        "BridgeBase"
                                    ],
                                    [
                                        "RubicPlatformFee",
                                        "",
                                        "BridgeBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "FullMath.mulDiv",
                                        "BridgeBase._calculateFeeWithIntegrator"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "152744097d8fba47262645e7e6ff99e3"
                            }
                        ],
                        "_collectIntegrator": [
                            {
                                "visibility": "private",
                                "content": "function _collectIntegrator( address _integrator, address _token ) private{ uint256 _amount; if (_token == address(0)){ _amount = availableIntegratorCryptoFee[_integrator]; availableIntegratorCryptoFee[_integrator] = 0; emit FixedCryptoFeeCollected(_amount, _integrator);} _amount += availableIntegratorTokenFee[_token][ _integrator ]; if (_amount == 0){ revert ZeroAmount();} availableIntegratorTokenFee[_token][_integrator] = 0; sendToken(_token, _amount, _integrator); emit IntegratorTokenFeeCollected( _amount, _integrator, _token );}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_integrator"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_token"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "availableIntegratorCryptoFee",
                                        "",
                                        "BridgeBase"
                                    ],
                                    [
                                        "availableIntegratorTokenFee",
                                        "",
                                        "BridgeBase"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "availableIntegratorCryptoFee",
                                        "",
                                        "BridgeBase"
                                    ],
                                    [
                                        "availableIntegratorTokenFee",
                                        "",
                                        "BridgeBase"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BridgeBase.sendToken",
                                        "BridgeBase.ZeroAmount"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "b07b9339fdb7661fffcee774d9208bbf"
                            }
                        ],
                        "collectIntegratorFee": [
                            {
                                "visibility": "external",
                                "content": "function collectIntegratorFee( address _token ) external nonReentrant{ _collectIntegrator(msg.sender, _token);}",
                                "modifiers": [
                                    "nonReentrant"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_token"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BridgeBase.nonReentrant",
                                        "BridgeBase.onlyManagerOrAdmin",
                                        "BridgeBase._collectIntegrator"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "cbada4749771c489956354f6d5f8d241"
                            },
                            {
                                "visibility": "external",
                                "content": "function collectIntegratorFee( address _integrator, address _token ) external onlyManagerOrAdmin{ _collectIntegrator(_integrator, _token);}",
                                "modifiers": [
                                    "onlyManagerOrAdmin"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_integrator"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_token"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BridgeBase.nonReentrant",
                                        "BridgeBase.onlyManagerOrAdmin",
                                        "BridgeBase._collectIntegrator"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "261959b3b9a5ce1ecad4c06bb0811540"
                            }
                        ],
                        "collectRubicFee": [
                            {
                                "visibility": "external",
                                "content": "function collectRubicFee( address _token, address _recipient ) external onlyAdmin{ uint256 _amount = availableRubicTokenFee[_token]; if (_amount == 0){ revert ZeroAmount();} availableRubicTokenFee[_token] = 0; sendToken(_token, _amount, _recipient); emit RubicTokenFeeCollected(_amount, _token);}",
                                "modifiers": [
                                    "onlyAdmin"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_recipient"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "availableRubicTokenFee",
                                        "",
                                        "BridgeBase"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "availableRubicTokenFee",
                                        "",
                                        "BridgeBase"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BridgeBase.onlyAdmin",
                                        "BridgeBase.sendToken",
                                        "BridgeBase.ZeroAmount"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "611035bf7dd2eff5e37a7250befdfc8d"
                            }
                        ],
                        "collectRubicCryptoFee": [
                            {
                                "visibility": "external",
                                "content": "function collectRubicCryptoFee( address _recipient ) external onlyAdmin{ uint256 _cryptoFee = availableRubicCryptoFee; availableRubicCryptoFee = 0; sendToken(address(0), _cryptoFee, _recipient); emit FixedCryptoFeeCollected(_cryptoFee, msg.sender);}",
                                "modifiers": [
                                    "onlyAdmin"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_recipient"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "availableRubicCryptoFee",
                                        "",
                                        "BridgeBase"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "availableRubicCryptoFee",
                                        "",
                                        "BridgeBase"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BridgeBase.onlyAdmin",
                                        "BridgeBase.sendToken"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "4e83e3ef4defce30da06a92504d3174f"
                            }
                        ],
                        "sweepTokens": [
                            {
                                "visibility": "external",
                                "content": "function sweepTokens( address _token, uint256 _amount, address _recipient ) external onlyAdmin{ sendToken(_token, _amount, _recipient); emit SweepTokens(_token, _amount, _recipient);}",
                                "modifiers": [
                                    "onlyAdmin"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_token"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_amount"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_recipient"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BridgeBase.onlyAdmin",
                                        "BridgeBase.sendToken"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "33d2c52085b8358e024374451e33178e"
                            }
                        ],
                        "pauseExecution": [
                            {
                                "visibility": "external",
                                "content": "function pauseExecution() external onlyManagerOrAdmin{ _pause();}",
                                "modifiers": [
                                    "onlyManagerOrAdmin"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BridgeBase._pause",
                                        "BridgeBase.onlyManagerOrAdmin"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "3571e4688e9cbfffadf499976869513a"
                            }
                        ],
                        "unpauseExecution": [
                            {
                                "visibility": "external",
                                "content": "function unpauseExecution() external onlyManagerOrAdmin{ _unpause();}",
                                "modifiers": [
                                    "onlyManagerOrAdmin"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BridgeBase.onlyManagerOrAdmin",
                                        "BridgeBase._unpause"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "372cbe47d0d24e6e889c2f778b47bd55"
                            }
                        ],
                        "setIntegratorInfo": [
                            {
                                "visibility": "external",
                                "content": "function setIntegratorInfo( address _integrator, IntegratorFeeInfo memory _info ) external onlyManagerOrAdmin{ if (_info.tokenFee > DENOMINATOR){ revert FeeTooHigh();} if ( _info.RubicTokenShare > DENOMINATOR || _info.RubicFixedCryptoShare > DENOMINATOR ){ revert ShareTooHigh();} integratorToFeeInfo[_integrator] = _info;}",
                                "modifiers": [
                                    "onlyManagerOrAdmin"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_integrator"
                                    },
                                    {
                                        "type": "IntegratorFeeInfo memory",
                                        "name": "_info"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "DENOMINATOR",
                                        "",
                                        "BridgeBase"
                                    ],
                                    [
                                        "integratorToFeeInfo",
                                        "",
                                        "BridgeBase"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "integratorToFeeInfo",
                                        "",
                                        "BridgeBase"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BridgeBase.FeeTooHigh",
                                        "BridgeBase.onlyManagerOrAdmin",
                                        "BridgeBase.ShareTooHigh"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "fac6a3a66f2a3f967eb91629bbc2b7c4"
                            }
                        ],
                        "setFixedCryptoFee": [
                            {
                                "visibility": "external",
                                "content": "function setFixedCryptoFee( uint256 _fixedCryptoFee ) external onlyManagerOrAdmin{ fixedCryptoFee = _fixedCryptoFee; emit SetFixedCryptoFee(_fixedCryptoFee);}",
                                "modifiers": [
                                    "onlyManagerOrAdmin"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "_fixedCryptoFee"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "fixedCryptoFee",
                                        "",
                                        "BridgeBase"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "fixedCryptoFee",
                                        "",
                                        "BridgeBase"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BridgeBase.onlyManagerOrAdmin"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "42a063ae2108ca471bec92a559621e04"
                            }
                        ],
                        "setRubicPlatformFee": [
                            {
                                "visibility": "external",
                                "content": "function setRubicPlatformFee( uint256 _platformFee ) external onlyManagerOrAdmin{ if (_platformFee > maxRubicPlatformFee){ revert FeeTooHigh();} RubicPlatformFee = _platformFee; emit SetRubicPlatformFee(_platformFee);}",
                                "modifiers": [
                                    "onlyManagerOrAdmin"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "_platformFee"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "maxRubicPlatformFee",
                                        "",
                                        "BridgeBase"
                                    ],
                                    [
                                        "RubicPlatformFee",
                                        "",
                                        "BridgeBase"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "RubicPlatformFee",
                                        "",
                                        "BridgeBase"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BridgeBase.FeeTooHigh",
                                        "BridgeBase.onlyManagerOrAdmin"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "85993a3e21cc36f2705319695c9c3da5"
                            }
                        ],
                        "setMaxRubicPlatformFee": [
                            {
                                "visibility": "external",
                                "content": "function setMaxRubicPlatformFee( uint256 _maxFee ) external onlyAdmin{ if (_maxFee > DENOMINATOR){ revert FeeTooHigh();} maxRubicPlatformFee = _maxFee;}",
                                "modifiers": [
                                    "onlyAdmin"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "_maxFee"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "DENOMINATOR",
                                        "",
                                        "BridgeBase"
                                    ],
                                    [
                                        "maxRubicPlatformFee",
                                        "",
                                        "BridgeBase"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "maxRubicPlatformFee",
                                        "",
                                        "BridgeBase"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BridgeBase.FeeTooHigh",
                                        "BridgeBase.onlyAdmin"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "5408b27bcce2054c3cbee9f22fd072cf"
                            }
                        ],
                        "setMinTokenAmount": [
                            {
                                "visibility": "external",
                                "content": "function setMinTokenAmount( address _token, uint256 _minTokenAmount ) external onlyManagerOrAdmin{ if (_minTokenAmount > maxTokenAmount[_token]){ revert MinMustBeLowerThanMax();} minTokenAmount[_token] = _minTokenAmount;}",
                                "modifiers": [
                                    "onlyManagerOrAdmin"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_token"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_minTokenAmount"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "minTokenAmount",
                                        "",
                                        "BridgeBase"
                                    ],
                                    [
                                        "maxTokenAmount",
                                        "",
                                        "BridgeBase"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "minTokenAmount",
                                        "",
                                        "BridgeBase"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BridgeBase.onlyManagerOrAdmin",
                                        "BridgeBase.MinMustBeLowerThanMax"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "67feae8fcd7e84bc2119970d10af69f9"
                            }
                        ],
                        "setMaxTokenAmount": [
                            {
                                "visibility": "external",
                                "content": "function setMaxTokenAmount( address _token, uint256 _maxTokenAmount ) external onlyManagerOrAdmin{ if (_maxTokenAmount < minTokenAmount[_token]){ revert MaxMustBeBiggerThanMin();} maxTokenAmount[_token] = _maxTokenAmount;}",
                                "modifiers": [
                                    "onlyManagerOrAdmin"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_token"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_maxTokenAmount"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "minTokenAmount",
                                        "",
                                        "BridgeBase"
                                    ],
                                    [
                                        "maxTokenAmount",
                                        "",
                                        "BridgeBase"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "maxTokenAmount",
                                        "",
                                        "BridgeBase"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BridgeBase.onlyManagerOrAdmin",
                                        "BridgeBase.MaxMustBeBiggerThanMin"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "496f4d9f1a7d249cc0f5c965eeb58d60"
                            }
                        ],
                        "transferAdmin": [
                            {
                                "visibility": "external",
                                "content": "function transferAdmin( address _newAdmin ) external onlyAdmin{ pendingAdmin = _newAdmin; previousAdmin = msg.sender; emit InitAdminTransfer(msg.sender, _newAdmin);}",
                                "modifiers": [
                                    "onlyAdmin"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_newAdmin"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "pendingAdmin",
                                        "",
                                        "BridgeBase"
                                    ],
                                    [
                                        "previousAdmin",
                                        "",
                                        "BridgeBase"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "pendingAdmin",
                                        "",
                                        "BridgeBase"
                                    ],
                                    [
                                        "previousAdmin",
                                        "",
                                        "BridgeBase"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BridgeBase.onlyAdmin"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "83735e389244b16220f2c4959ec45e59"
                            }
                        ],
                        "acceptAdmin": [
                            {
                                "visibility": "external",
                                "content": "function acceptAdmin() external{ if (pendingAdmin != msg.sender) revert NotPendingAdmin(); _revokeRole(DEFAULT_ADMIN_ROLE, previousAdmin); _grantRole(DEFAULT_ADMIN_ROLE, msg.sender); emit AcceptAdmin(previousAdmin, msg.sender); pendingAdmin = address(0); previousAdmin = address(0);}",
                                "modifiers": [],
                                "parameters": [],
                                "returns": [],
                                "reads": [
                                    [
                                        "pendingAdmin",
                                        "",
                                        "BridgeBase"
                                    ],
                                    [
                                        "previousAdmin",
                                        "",
                                        "BridgeBase"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "pendingAdmin",
                                        "",
                                        "BridgeBase"
                                    ],
                                    [
                                        "previousAdmin",
                                        "",
                                        "BridgeBase"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BridgeBase.NotPendingAdmin",
                                        "BridgeBase._revokeRole",
                                        "BridgeBase._grantRole"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "397adae6dfc679ae4cb27b85dc7950b0"
                            }
                        ],
                        "checkIsManagerOrAdmin": [
                            {
                                "visibility": "internal",
                                "content": "function checkIsManagerOrAdmin() internal view{ if ( !(hasRole(MANAGER_ROLE, msg.sender) || hasRole(DEFAULT_ADMIN_ROLE, msg.sender)) ){ revert NotAManager();}}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [
                                    [
                                        "MANAGER_ROLE",
                                        "",
                                        "BridgeBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BridgeBase.hasRole",
                                        "BridgeBase.NotAManager"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "f3cf58c95054b5e013c12b324806d593"
                            }
                        ],
                        "checkIsAdmin": [
                            {
                                "visibility": "internal",
                                "content": "function checkIsAdmin() internal view{ if (!hasRole(DEFAULT_ADMIN_ROLE, msg.sender)){ revert NotAnAdmin();}}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BridgeBase.hasRole",
                                        "BridgeBase.NotAnAdmin"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "a727ab16cd83c5477e0df042a760c7d6"
                            }
                        ],
                        "sendToken": [
                            {
                                "visibility": "internal",
                                "content": "function sendToken( address _token, uint256 _amount, address _receiver ) internal virtual{ if (_token == address(0)){ AddressUpgradeable.sendValue( payable(_receiver), _amount );} else{ IERC20Upgradeable(_token).safeTransfer( _receiver, _amount );}}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_token"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_amount"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_receiver"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AddressUpgradeable.sendValue",
                                        "BridgeBase.IERC20Upgradeable"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "4eeece9335298a4528cb3a2a70438135"
                            }
                        ]
                    },
                    "modifiers": {
                        "onlyAdmin": {
                            "parameters": [],
                            "content": "modifier onlyAdmin(){ checkIsAdmin(); _;}",
                            "reads": [],
                            "writes": [],
                            "external_calls": {
                                "__set__": true,
                                "values": [
                                    "BridgeBase.checkIsAdmin"
                                ]
                            },
                            "md5": "b28a37e63ec6fb667e3a24118640125e"
                        },
                        "onlyManagerOrAdmin": {
                            "parameters": [],
                            "content": "modifier onlyManagerOrAdmin(){ checkIsManagerOrAdmin(); _;}",
                            "reads": [],
                            "writes": [],
                            "external_calls": {
                                "__set__": true,
                                "values": [
                                    "BridgeBase.checkIsManagerOrAdmin"
                                ]
                            },
                            "md5": "a9c0c28e5eb70ba30b94c919ab0907d6"
                        },
                        "onlyEOA": {
                            "parameters": [],
                            "content": "modifier onlyEOA(){ if (msg.sender != tx.origin){ revert OnlyEOA();} _;}",
                            "reads": [],
                            "writes": [],
                            "external_calls": {
                                "__set__": true,
                                "values": [
                                    "BridgeBase.OnlyEOA"
                                ]
                            },
                            "md5": "eaa636f62bfd30718f7f1bad11c86f11"
                        }
                    },
                    "structs": {
                        "IntegratorFeeInfo": {
                            "content": "IntegratorFeeInfo{ bool isIntegrator; uint32 tokenFee; uint32 RubicTokenShare; uint32 RubicFixedCryptoShare; uint128 fixedFeeAmount;}"
                        },
                        "BaseCrossChainParams": {
                            "content": "BaseCrossChainParams{ address srcInputToken; uint256 srcInputAmount; uint256 dstChainID; address dstOutputToken; uint256 dstMinOutputAmount; address recipient; address integrator; address router;}"
                        }
                    },
                    "events": {
                        "FixedCryptoFee": {
                            "event": "FixedCryptoFee",
                            "content": "FixedCryptoFee( uint256 RubicPart, uint256 integratorPart, address indexed integrator )"
                        },
                        "FixedCryptoFeeCollected": {
                            "event": "FixedCryptoFeeCollected",
                            "content": "FixedCryptoFeeCollected( uint256 amount, address collector )"
                        },
                        "TokenFee": {
                            "event": "TokenFee",
                            "content": "TokenFee( uint256 RubicPart, uint256 integratorPart, address indexed integrator, address token )"
                        },
                        "IntegratorTokenFeeCollected": {
                            "event": "IntegratorTokenFeeCollected",
                            "content": "IntegratorTokenFeeCollected( uint256 amount, address indexed integrator, address token )"
                        },
                        "RubicTokenFeeCollected": {
                            "event": "RubicTokenFeeCollected",
                            "content": "RubicTokenFeeCollected(uint256 amount, address token)"
                        },
                        "SweepTokens": {
                            "event": "SweepTokens",
                            "content": "SweepTokens(address token, uint256 amount, address recipient)"
                        },
                        "SetFixedCryptoFee": {
                            "event": "SetFixedCryptoFee",
                            "content": "SetFixedCryptoFee(uint256 fee)"
                        },
                        "SetRubicPlatformFee": {
                            "event": "SetRubicPlatformFee",
                            "content": "SetRubicPlatformFee(uint256 fee)"
                        },
                        "InitAdminTransfer": {
                            "event": "InitAdminTransfer",
                            "content": "InitAdminTransfer( address admintShifter, address newAdmin )"
                        },
                        "AcceptAdmin": {
                            "event": "AcceptAdmin",
                            "content": "AcceptAdmin(address adminShifter, address newAdmin)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "IERC20Upgradeable": "SafeERC20Upgradeable"
                    }
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "BridgeBase.checkIsAdmin": "a727ab16cd83c5477e0df042a760c7d6",
                "BridgeBase.checkIsManagerOrAdmin": "f3cf58c95054b5e013c12b324806d593",
                "BridgeBase._calculateFee": "152744097d8fba47262645e7e6ff99e3",
                "BridgeBase._calculateFeeWithIntegrator": "6654f1082ec95526444bc385bb82ebba",
                "BridgeBase.sendToken": "4eeece9335298a4528cb3a2a70438135",
                "BridgeBase._collectIntegrator": "b07b9339fdb7661fffcee774d9208bbf",
                "BridgeBase.onlyManagerOrAdmin": "a9c0c28e5eb70ba30b94c919ab0907d6",
                "BridgeBase.onlyAdmin": "b28a37e63ec6fb667e3a24118640125e"
            },
            "md5": "6abcf57caf6d0f97f7fe48e32789a989"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Rubic20221225\\contracts\\architecture\\OnlySourceFunctionality.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Rubic20221225\\contracts\\architecture\\OnlySourceFunctionality.sol",
            "filename": "OnlySourceFunctionality.sol",
            "imported_contracts": {
                "": {
                    "in_database": false,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "OnlySourceFunctionality": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "BridgeBase"
                    ],
                    "state_variables": {},
                    "functions": {
                        "__OnlySourceFunctionalityInit": [
                            {
                                "visibility": "internal",
                                "content": "function __OnlySourceFunctionalityInit( uint256 _fixedCryptoFee, uint256 _RubicPlatformFee, address[] memory _tokens, uint256[] memory _minTokenAmounts, uint256[] memory _maxTokenAmounts, address _admin ) internal onlyInitializing{ __BridgeBaseInit( _fixedCryptoFee, _RubicPlatformFee, _tokens, _minTokenAmounts, _maxTokenAmounts, _admin );}",
                                "modifiers": [
                                    "onlyInitializing"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "_fixedCryptoFee"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_RubicPlatformFee"
                                    },
                                    {
                                        "type": "address[] memory",
                                        "name": "_tokens"
                                    },
                                    {
                                        "type": "uint256[] memory",
                                        "name": "_minTokenAmounts"
                                    },
                                    {
                                        "type": "uint256[] memory",
                                        "name": "_maxTokenAmounts"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_admin"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "OnlySourceFunctionality.__BridgeBaseInit",
                                        "OnlySourceFunctionality.onlyInitializing"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "4670860d8007281ee4a35b15d3042c77"
                            }
                        ]
                    },
                    "modifiers": {
                        "eventEmitter": {
                            "parameters": [
                                {
                                    "type": "BaseCrossChainParams calldata",
                                    "name": "_params"
                                },
                                {
                                    "type": "string calldata",
                                    "name": "_providerName"
                                }
                            ],
                            "content": "modifier eventEmitter( BaseCrossChainParams calldata _params, string calldata _providerName ){ _; emit RequestSent(_params, _providerName);}",
                            "reads": [],
                            "writes": [],
                            "external_calls": [],
                            "md5": "9bdacae7fcb3bb72e9fd6a6cef01a56d"
                        }
                    },
                    "structs": {},
                    "events": {
                        "RequestSent": {
                            "event": "RequestSent",
                            "content": "RequestSent( BaseCrossChainParams parameters, string providerName )"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "06b98242cf55fbc4ffe616e2a6062dd3"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Rubic20221225\\contracts\\architecture\\WithDestinationFunctionality.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Rubic20221225\\contracts\\architecture\\WithDestinationFunctionality.sol",
            "filename": "WithDestinationFunctionality.sol",
            "imported_contracts": {
                "": {
                    "in_database": false,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "WithDestinationFunctionality": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "BridgeBase"
                    ],
                    "state_variables": {
                        "processedTransactions": {
                            "type": "mapping(bytes32 => SwapStatus)",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(bytes32 => SwapStatus) public processedTransactions;"
                        },
                        "blockchainToGasFee": {
                            "type": "mapping(uint256 => uint256)",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(uint256 => uint256) public blockchainToGasFee;"
                        },
                        "availableRubicGasFee": {
                            "type": "uint256",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256 public availableRubicGasFee;"
                        },
                        "RELAYER_ROLE": {
                            "type": "bytes32",
                            "visibility": "public",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "keccak256('RELAYER_ROLE')",
                            "content": "bytes32 public constant RELAYER_ROLE = keccak256('RELAYER_ROLE');"
                        }
                    },
                    "functions": {
                        "__WithDestinationFunctionalityInit": [
                            {
                                "visibility": "internal",
                                "content": "function __WithDestinationFunctionalityInit( uint256 _fixedCryptoFee, uint256 _RubicPlatformFee, address[] memory _tokens, uint256[] memory _minTokenAmounts, uint256[] memory _maxTokenAmounts, uint256[] memory _blockchainIDs, uint256[] memory _blockchainToGasFee, address _admin ) internal onlyInitializing{ __BridgeBaseInit( _fixedCryptoFee, _RubicPlatformFee, _tokens, _minTokenAmounts, _maxTokenAmounts, _admin ); uint256 length = _blockchainIDs.length; if (_blockchainToGasFee.length != length){ revert LengthMismatch();} for (uint256 i; i < length; ){ blockchainToGasFee[ _blockchainIDs[i] ] = _blockchainToGasFee[i]; unchecked{ ++i;}}}",
                                "modifiers": [
                                    "onlyInitializing"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "_fixedCryptoFee"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_RubicPlatformFee"
                                    },
                                    {
                                        "type": "address[] memory",
                                        "name": "_tokens"
                                    },
                                    {
                                        "type": "uint256[] memory",
                                        "name": "_minTokenAmounts"
                                    },
                                    {
                                        "type": "uint256[] memory",
                                        "name": "_maxTokenAmounts"
                                    },
                                    {
                                        "type": "uint256[] memory",
                                        "name": "_blockchainIDs"
                                    },
                                    {
                                        "type": "uint256[] memory",
                                        "name": "_blockchainToGasFee"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_admin"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "blockchainToGasFee",
                                        "",
                                        "WithDestinationFunctionality"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "blockchainToGasFee",
                                        "",
                                        "WithDestinationFunctionality"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "WithDestinationFunctionality.__BridgeBaseInit",
                                        "WithDestinationFunctionality.onlyInitializing",
                                        "WithDestinationFunctionality.LengthMismatch"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "23972ed427e598b35442cca0e2d0216c"
                            }
                        ],
                        "accrueFixedAndGasFees": [
                            {
                                "visibility": "internal",
                                "content": "function accrueFixedAndGasFees( address _integrator, IntegratorFeeInfo memory _info, uint256 _blockchainID ) internal returns (uint256 _amountWithoutCryptoFee){ uint256 _gasFee = blockchainToGasFee[_blockchainID]; availableRubicGasFee += _gasFee; _amountWithoutCryptoFee = accrueFixedCryptoFee(_integrator, _info) - _gasFee;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_integrator"
                                    },
                                    {
                                        "type": "IntegratorFeeInfo memory",
                                        "name": "_info"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_blockchainID"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": "_amountWithoutCryptoFee"
                                    }
                                ],
                                "reads": [
                                    [
                                        "blockchainToGasFee",
                                        "",
                                        "WithDestinationFunctionality"
                                    ],
                                    [
                                        "availableRubicGasFee",
                                        "",
                                        "WithDestinationFunctionality"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "availableRubicGasFee",
                                        "",
                                        "WithDestinationFunctionality"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "WithDestinationFunctionality.accrueFixedCryptoFee"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "48710814152cf7ea8e54ab06881ec505"
                            }
                        ],
                        "setGasFeeOfBlockchain": [
                            {
                                "visibility": "external",
                                "content": "function setGasFeeOfBlockchain( uint256 _blockchainID, uint256 _gasFee ) external onlyManagerOrAdmin{ blockchainToGasFee[_blockchainID] = _gasFee;}",
                                "modifiers": [
                                    "onlyManagerOrAdmin"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "_blockchainID"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_gasFee"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "blockchainToGasFee",
                                        "",
                                        "WithDestinationFunctionality"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "blockchainToGasFee",
                                        "",
                                        "WithDestinationFunctionality"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "WithDestinationFunctionality.onlyManagerOrAdmin"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "f05f31fcf0a6c904bfe055eea6d0496f"
                            }
                        ],
                        "collectGasFee": [
                            {
                                "visibility": "external",
                                "content": "function collectGasFee( address _to ) external onlyManagerOrAdmin{ uint256 _gasFee = availableRubicGasFee; availableRubicGasFee = 0; sendToken(address(0), _gasFee, _to);}",
                                "modifiers": [
                                    "onlyManagerOrAdmin"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_to"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "availableRubicGasFee",
                                        "",
                                        "WithDestinationFunctionality"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "availableRubicGasFee",
                                        "",
                                        "WithDestinationFunctionality"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "WithDestinationFunctionality.sendToken",
                                        "WithDestinationFunctionality.onlyManagerOrAdmin"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "fca0c4cd83f35d3bfc96cead90dcdf4a"
                            }
                        ],
                        "changeTxStatus": [
                            {
                                "visibility": "external",
                                "content": "function changeTxStatus( bytes32 _id, SwapStatus _statusCode ) external onlyManagerOrAdmin{ if (_statusCode == SwapStatus.Null){ revert CantSetToNull();} SwapStatus _status = processedTransactions[_id]; if ( _status == SwapStatus.Succeeded || _status == SwapStatus.Fallback ){ revert Unchangeable();} processedTransactions[_id] = _statusCode;}",
                                "modifiers": [
                                    "onlyManagerOrAdmin"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "_id"
                                    },
                                    {
                                        "type": "SwapStatus",
                                        "name": "_statusCode"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "processedTransactions",
                                        "",
                                        "WithDestinationFunctionality"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "processedTransactions",
                                        "",
                                        "WithDestinationFunctionality"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "WithDestinationFunctionality.Unchangeable",
                                        "WithDestinationFunctionality.onlyManagerOrAdmin",
                                        "WithDestinationFunctionality.CantSetToNull"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "f355faa221ffc188e447f87d2c80076f"
                            }
                        ],
                        "checkIsRelayer": [
                            {
                                "visibility": "internal",
                                "content": "function checkIsRelayer(address _relayer) internal view{ if (!hasRole(RELAYER_ROLE, _relayer)){ revert NotARelayer();}}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_relayer"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "RELAYER_ROLE",
                                        "",
                                        "WithDestinationFunctionality"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "WithDestinationFunctionality.hasRole",
                                        "WithDestinationFunctionality.NotARelayer"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "9bf190a6a32a55f9c0a108cecb8b2f09"
                            }
                        ]
                    },
                    "modifiers": {
                        "onlyRelayer": {
                            "parameters": [
                                {
                                    "type": "address",
                                    "name": "_relayer"
                                }
                            ],
                            "content": "modifier onlyRelayer(address _relayer){ checkIsRelayer(_relayer); _;}",
                            "reads": [],
                            "writes": [],
                            "external_calls": {
                                "__set__": true,
                                "values": [
                                    "WithDestinationFunctionality.checkIsRelayer"
                                ]
                            },
                            "md5": "5a9a0c7cb01a5d795225ffa06b0f235c"
                        }
                    },
                    "structs": {},
                    "events": {
                        "CrossChainRequestSent": {
                            "event": "CrossChainRequestSent",
                            "content": "CrossChainRequestSent( bytes32 indexed id, BaseCrossChainParams parameters )"
                        },
                        "CrossChainProcessed": {
                            "event": "CrossChainProcessed",
                            "content": "CrossChainProcessed( bytes32 indexed id, address outputTokenAddress, uint256 amount, SwapStatus status )"
                        }
                    },
                    "enums": {
                        "SwapStatus": {
                            "content": "SwapStatus{ Null, Succeeded, Failed, Fallback}"
                        }
                    },
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "WithDestinationFunctionality.checkIsRelayer": "9bf190a6a32a55f9c0a108cecb8b2f09"
            },
            "md5": "6ceb7efc663e33141ccd08229a036b8a"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Rubic20221225\\contracts\\errors\\Errors.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Rubic20221225\\contracts\\errors\\Errors.sol",
            "filename": "Errors.sol",
            "imported_contracts": {},
            "contracts": {},
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {
                "NotAnAdmin": {
                    "content": "NotAnAdmin()"
                },
                "NotAManager": {
                    "content": "NotAManager()"
                },
                "NotARelayer": {
                    "content": "NotARelayer()"
                },
                "OnlyEOA": {
                    "content": "OnlyEOA()"
                },
                "FeeTooHigh": {
                    "content": "FeeTooHigh()"
                },
                "ShareTooHigh": {
                    "content": "ShareTooHigh()"
                },
                "ZeroAddress": {
                    "content": "ZeroAddress()"
                },
                "ZeroAmount": {
                    "content": "ZeroAmount()"
                },
                "InefficientFixedFee": {
                    "content": "InefficientFixedFee()"
                },
                "ApproveFailed": {
                    "content": "ApproveFailed()"
                },
                "MinMustBeLowerThanMax": {
                    "content": "MinMustBeLowerThanMax()"
                },
                "MaxMustBeBiggerThanMin": {
                    "content": "MaxMustBeBiggerThanMin()"
                },
                "CantSetToNull": {
                    "content": "CantSetToNull()"
                },
                "Unchangeable": {
                    "content": "Unchangeable()"
                },
                "LengthMismatch": {
                    "content": "LengthMismatch()"
                },
                "NotPendingAdmin": {
                    "content": "NotPendingAdmin()"
                }
            },
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "e14df9a9ce978747286f0c8727fe6cef"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Rubic20221225\\contracts\\libraries\\ECDSAOffsetRecovery.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Rubic20221225\\contracts\\libraries\\ECDSAOffsetRecovery.sol",
            "filename": "ECDSAOffsetRecovery.sol",
            "imported_contracts": {},
            "contracts": {
                "ECDSAOffsetRecovery": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": true,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "getHashPacked": [
                            {
                                "visibility": "public",
                                "content": "function getHashPacked( address user, uint256 amountWithFee, bytes32 originalTxHash, uint256 blockchainNum ) public pure returns (bytes32){ return keccak256( abi.encodePacked( user, amountWithFee, originalTxHash, blockchainNum ) );}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "user"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amountWithFee"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "originalTxHash"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "blockchainNum"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "6692020b6716047acc28edc6695ce346"
                            }
                        ],
                        "toEthSignedMessageHash": [
                            {
                                "visibility": "public",
                                "content": "function toEthSignedMessageHash( bytes32 hash ) public pure returns (bytes32){ return keccak256( abi.encodePacked( '\\x19Ethereum Signed Message:\\n32', hash ) );}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "hash"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "bc6107dc5f991a9820f2f26abe566973"
                            }
                        ],
                        "ecOffsetRecover": [
                            {
                                "visibility": "public",
                                "content": "function ecOffsetRecover( bytes32 hash, bytes memory signature, uint256 offset ) public pure returns (address){ bytes32 r; bytes32 s; uint8 v; assembly{ r := mload(add(signature, add(offset, 0x20))) s := mload(add(signature, add(offset, 0x40))) v := byte( 0, mload(add(signature, add(offset, 0x60))) )} if (v < 27){ v += 27;} if (v != 27 && v != 28){ return (address(0));} return ecrecover(toEthSignedMessageHash(hash), v, r, s);}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "hash"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "signature"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "offset"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ECDSAOffsetRecovery.toEthSignedMessageHash"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "7a34888cadd9d0493dc3098f62f63123"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "ECDSAOffsetRecovery.toEthSignedMessageHash": "bc6107dc5f991a9820f2f26abe566973"
            },
            "md5": "51c18677ea7cb7b43f291280944c68c4"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Rubic20221225\\contracts\\libraries\\SmartApprove.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Rubic20221225\\contracts\\libraries\\SmartApprove.sol",
            "filename": "SmartApprove.sol",
            "imported_contracts": {
                "": {
                    "in_database": false,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "SmartApprove": {
                    "type": {
                        "__CT__": true,
                        "value": 2
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "smartApprove": [
                            {
                                "visibility": "internal",
                                "content": "function smartApprove( address _tokenIn, uint256 _amount, address _to ) internal{ IERC20Upgradeable tokenIn = IERC20Upgradeable(_tokenIn); uint256 _allowance = tokenIn.allowance( address(this), _to ); if (_allowance < _amount){ if (_allowance == 0){ tokenIn.safeApprove(_to, type (uint256).max);} else{ try tokenIn.approve(_to, type (uint256).max) returns (bool res){ if (!res){ revert ApproveFailed();}} catch{ tokenIn.safeApprove(_to, 0); tokenIn.safeApprove(_to, type (uint256).max);}}}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_tokenIn"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_amount"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_to"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "IERC20Upgradeable.safeApprove",
                                        "IERC20Upgradeable.approve",
                                        "IERC20Upgradeable.allowance",
                                        "SmartApprove.IERC20Upgradeable",
                                        "SmartApprove.ApproveFailed",
                                        "SmartApprove.type"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "a3ad0890dd10ec39f367a30debeda85c"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "IERC20Upgradeable": "SafeERC20Upgradeable"
                    }
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "f158dbd923b8635d1ce58266c01ad6d4"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Rubic20221225\\contracts\\test\\TestDEX.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Rubic20221225\\contracts\\test\\TestDEX.sol",
            "filename": "TestDEX.sol",
            "imported_contracts": {
                "": {
                    "in_database": false,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "ITestDEX": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "swap": [
                            {
                                "visibility": "external",
                                "content": "function swap( address _fromToken, uint256 _inputAmount, address _toToken ) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_fromToken"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_inputAmount"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_toToken"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "7feaa5f85134252cd48ef90b95a03f92"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": [
                        [
                            "C:\\Users\\wy\\Desktop\\rag\\dataset\\Rubic20221225\\contracts\\test\\TestDEX.sol",
                            "TestDEX"
                        ]
                    ]
                },
                "TestDEX": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "ITestDEX"
                    ],
                    "state_variables": {
                        "price": {
                            "type": "uint256",
                            "visibility": "public",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "2",
                            "content": "uint256 public constant price = 2;"
                        }
                    },
                    "functions": {
                        "swap": [
                            {
                                "visibility": "external",
                                "content": "function swap( address _fromToken, uint256 _inputAmount, address _toToken ) external override{ IERC20(_fromToken).transferFrom( msg.sender, address(this), _inputAmount ); IERC20(_toToken).transfer( msg.sender, _inputAmount * price );}",
                                "modifiers": [
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_fromToken"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_inputAmount"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_toToken"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "price",
                                        "",
                                        "TestDEX"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "TestDEX.IERC20"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "2babfee21d8b0d1ede238c5074e28371"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "bcf888eba5f5f0dc628c14c010deea98"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Rubic20221225\\contracts\\test\\TestOnlySource.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Rubic20221225\\contracts\\test\\TestOnlySource.sol",
            "filename": "TestOnlySource.sol",
            "imported_contracts": {
                "": {
                    "in_database": false,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "ITestDEX": {
                            "original_name": "ITestDEX",
                            "type": {
                                "__CT__": true,
                                "value": 0
                            }
                        }
                    }
                }
            },
            "contracts": {
                "TestOnlySource": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "OnlySourceFunctionality"
                    ],
                    "state_variables": {},
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor ( uint256 _fixedCryptoFee, uint256 _RubicPlatformFee, address[] memory _tokens, uint256[] memory _minTokenAmounts, uint256[] memory _maxTokenAmounts, address _admin ){ initialize( _fixedCryptoFee, _RubicPlatformFee, _tokens, _minTokenAmounts, _maxTokenAmounts, _admin );}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "_fixedCryptoFee"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_RubicPlatformFee"
                                    },
                                    {
                                        "type": "address[] memory",
                                        "name": "_tokens"
                                    },
                                    {
                                        "type": "uint256[] memory",
                                        "name": "_minTokenAmounts"
                                    },
                                    {
                                        "type": "uint256[] memory",
                                        "name": "_maxTokenAmounts"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_admin"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "f4900898d7965f494d9d1bfbe2773124"
                            }
                        ],
                        "initialize": [
                            {
                                "visibility": "private",
                                "content": "function initialize( uint256 _fixedCryptoFee, uint256 _RubicPlatformFee, address[] memory _tokens, uint256[] memory _minTokenAmounts, uint256[] memory _maxTokenAmounts, address _admin ) private initializer{ __OnlySourceFunctionalityInit( _fixedCryptoFee, _RubicPlatformFee, _tokens, _minTokenAmounts, _maxTokenAmounts, _admin );}",
                                "modifiers": [
                                    "initializer"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "_fixedCryptoFee"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_RubicPlatformFee"
                                    },
                                    {
                                        "type": "address[] memory",
                                        "name": "_tokens"
                                    },
                                    {
                                        "type": "uint256[] memory",
                                        "name": "_minTokenAmounts"
                                    },
                                    {
                                        "type": "uint256[] memory",
                                        "name": "_maxTokenAmounts"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_admin"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "TestOnlySource.__OnlySourceFunctionalityInit",
                                        "TestOnlySource.initializer"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "42d22546c5ffb37fddaa7f79fbb52fe6"
                            }
                        ],
                        "crossChainWithSwap": [
                            {
                                "visibility": "external",
                                "content": "function crossChainWithSwap( BaseCrossChainParams calldata _params, string calldata _providerName ) external payable nonReentrant whenNotPaused eventEmitter(_params, _providerName){ IntegratorFeeInfo memory _info = integratorToFeeInfo[ _params.integrator ]; IERC20(_params.srcInputToken).transferFrom( msg.sender, address(this), _params.srcInputAmount ); accrueFixedCryptoFee(_params.integrator, _info); uint256 _amountIn = accrueTokenFees( _params.integrator, _info, _params.srcInputAmount, 0, _params.srcInputToken ); SmartApprove.smartApprove( _params.srcInputToken, _amountIn, _params.router ); ITestDEX(_params.router).swap( _params.srcInputToken, _amountIn, _params.dstOutputToken );}",
                                "modifiers": [
                                    "payable",
                                    "nonReentrant",
                                    "whenNotPaused",
                                    "eventEmitter(_params, _providerName)"
                                ],
                                "parameters": [
                                    {
                                        "type": "BaseCrossChainParams calldata",
                                        "name": "_params"
                                    },
                                    {
                                        "type": "string calldata",
                                        "name": "_providerName"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "TestOnlySource.eventEmitter",
                                        "TestOnlySource.IERC20",
                                        "SmartApprove.smartApprove",
                                        "TestOnlySource.accrueTokenFees",
                                        "TestOnlySource.nonReentrant",
                                        "TestOnlySource.accrueFixedCryptoFee",
                                        "TestOnlySource.ITestDEX",
                                        "TestOnlySource.whenNotPaused"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "bd272d641a8b1474c4c700af5c7681bb"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "74ff4a9623da149183dcf991bc78cfbb"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Rubic20221225\\contracts\\test\\TestToken.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Rubic20221225\\contracts\\test\\TestToken.sol",
            "filename": "TestToken.sol",
            "imported_contracts": {
                "": {
                    "in_database": false,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "TestERC20": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "ERC20"
                    ],
                    "state_variables": {},
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor () ERC20('Mintable Token', 'MintTKN'){ _mint(msg.sender, 10000 ether);}",
                                "modifiers": [
                                    "ERC20('Mintable Token', 'MintTKN')"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "03a8c18876aae525b6f603c1e477f667"
                            }
                        ],
                        "mint": [
                            {
                                "visibility": "external",
                                "content": "function mint(address _to, uint256 _amount) external{ _mint(_to, _amount);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "TestERC20._mint"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "17dcbe5443c666f93614554e3e302161"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "061867271fd46c1b5ca01748e9f0c0ae"
        }
    },
    "handled_md5": {
        "__set__": true,
        "values": [
            "06b98242cf55fbc4ffe616e2a6062dd3",
            "a1eb600a5eaf250f431e551e3108a6ff",
            "bcf888eba5f5f0dc628c14c010deea98",
            "061867271fd46c1b5ca01748e9f0c0ae",
            "6abcf57caf6d0f97f7fe48e32789a989",
            "1462b592fe0cad99cf4ebf3b72d127ae",
            "bfda8d247049231603fc34fbaa57f3e0",
            "44bbb386f40d54923fcdedf73aea9ada",
            "304de5fcf6fddbe7e6e96cfe247e6db7",
            "6ceb7efc663e33141ccd08229a036b8a",
            "51c18677ea7cb7b43f291280944c68c4",
            "452ef8f7c8f054d74ce50bc9aff41aae",
            "a3a2bc77489025ccb14a76c115aa2e1d",
            "2a1fc61540a29dc850b943be61028942",
            "fb06c948104b01bbd8a2d5b81149a7b2",
            "b3627bd39cdd89b59e165d6fe1ad297d",
            "e14df9a9ce978747286f0c8727fe6cef",
            "f158dbd923b8635d1ce58266c01ad6d4",
            "d49d7470face4673bbf6b1415930a7f8",
            "2a64f4b671a7c2574d2b582a8067da37",
            "b8bb1d141dd6fb1bbfee32ec76f165ce",
            "c0134ac465b1e24802cfab367debdebd",
            "472bb34d4693f7e1a6bacdeb0d5ce45b",
            "74ff4a9623da149183dcf991bc78cfbb",
            "8625a960e5484eca61d385458e4b0e3d",
            "60bf1526c64ac28af7a6f74bf88e542c",
            "648f9faaf6f1a6461be54f3b952b55ab",
            "872ecbd26afbee33d2ba7238323c490c",
            "eccdfcb74d34d2d85c84c1044e78b156"
        ]
    }
}