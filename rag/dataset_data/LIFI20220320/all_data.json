{
    "solidity_file": {
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\@openzeppelin\\contracts\\utils\\Context.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\@openzeppelin\\contracts\\utils\\Context.sol",
            "filename": "Context.sol",
            "imported_contracts": {},
            "contracts": {
                "Context": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": true,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "_msgSender": [
                            {
                                "visibility": "internal",
                                "content": "function _msgSender() internal view virtual returns (address){ return msg.sender;}",
                                "modifiers": [
                                    "view",
                                    "virtual"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "3bc534219d7c704e82b1271e27e1e9f4"
                            }
                        ],
                        "_msgData": [
                            {
                                "visibility": "internal",
                                "content": "function _msgData() internal view virtual returns (bytes calldata){ return msg.data;}",
                                "modifiers": [
                                    "view",
                                    "virtual"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "bytes calldata",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c1cd6682c49c03f9b0f4ec879236408a"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "b82fcee3b3088b52abf0a8a1e3281c14"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\@openzeppelin\\contracts\\access\\Ownable.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\@openzeppelin\\contracts\\access\\Ownable.sol",
            "filename": "Ownable.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\@openzeppelin\\contracts\\utils\\Context.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "Ownable": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": true,
                    "inherits": [
                        "is",
                        "Context"
                    ],
                    "state_variables": {
                        "_owner": {
                            "type": "address",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address private _owner;"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (){ _setOwner(_msgSender());}",
                                "modifiers": [],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "9ee3bd5c358229b22cba5efbf4651d65"
                            }
                        ],
                        "owner": [
                            {
                                "visibility": "public",
                                "content": "function owner() public view virtual returns (address){ return _owner;}",
                                "modifiers": [
                                    "view",
                                    "virtual"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_owner",
                                        "",
                                        "Ownable"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c000c329207e63e4293ec575de9eb28a"
                            }
                        ],
                        "renounceOwnership": [
                            {
                                "visibility": "public",
                                "content": "function renounceOwnership() public virtual onlyOwner{ _setOwner(address(0));}",
                                "modifiers": [
                                    "virtual",
                                    "onlyOwner"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Ownable.onlyOwner",
                                        "Ownable._setOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "08736c3249a1e763e26ee51db01e9efd"
                            }
                        ],
                        "transferOwnership": [
                            {
                                "visibility": "public",
                                "content": "function transferOwnership(address newOwner) public virtual onlyOwner{ require(newOwner != address(0), \"Ownable: new owner is the zero address\"); _setOwner(newOwner);}",
                                "modifiers": [
                                    "virtual",
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "newOwner"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Ownable.onlyOwner",
                                        "Ownable._setOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "eb9389eeba477db8e4fed0c6ee218da9"
                            }
                        ],
                        "_setOwner": [
                            {
                                "visibility": "private",
                                "content": "function _setOwner(address newOwner) private{ address oldOwner = _owner; _owner = newOwner; emit OwnershipTransferred(oldOwner, newOwner);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "newOwner"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_owner",
                                        "",
                                        "Ownable"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_owner",
                                        "",
                                        "Ownable"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "d199c3da39f76b62d70f4940243d8f30"
                            }
                        ]
                    },
                    "modifiers": {
                        "onlyOwner": {
                            "parameters": [],
                            "content": "modifier onlyOwner(){ require(owner() == _msgSender(), \"Ownable: caller is not the owner\"); _;}",
                            "reads": [],
                            "writes": [],
                            "external_calls": {
                                "__set__": true,
                                "values": [
                                    "Ownable.owner",
                                    "Ownable._msgSender"
                                ]
                            },
                            "md5": "b92099c80fb280641bb32ab9f3280aeb"
                        }
                    },
                    "structs": {},
                    "events": {
                        "OwnershipTransferred": {
                            "event": "OwnershipTransferred",
                            "content": "OwnershipTransferred(address indexed previousOwner, address indexed newOwner)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "Ownable._msgSender": "3bc534219d7c704e82b1271e27e1e9f4",
                "Ownable.owner": "c000c329207e63e4293ec575de9eb28a",
                "Ownable.onlyOwner": "b92099c80fb280641bb32ab9f3280aeb",
                "Ownable._setOwner": "d199c3da39f76b62d70f4940243d8f30"
            },
            "md5": "d9efa643db8e639f6283c6acb7fa71bb"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\@openzeppelin\\contracts\\proxy\\Proxy.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\@openzeppelin\\contracts\\proxy\\Proxy.sol",
            "filename": "Proxy.sol",
            "imported_contracts": {},
            "contracts": {
                "Proxy": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": true,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "_delegate": [
                            {
                                "visibility": "internal",
                                "content": "function _delegate(address implementation) internal virtual{ assembly{ calldatacopy(0, 0, calldatasize()) let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0) returndatacopy(0, 0, returndatasize()) switch result case 0{ revert(0, returndatasize())} default{ return(0, returndatasize())}}}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "implementation"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "7d1ac149e02cbd968171e352d7bbe304"
                            }
                        ],
                        "_implementation": [
                            {
                                "visibility": "internal",
                                "content": "function _implementation() internal view virtual returns (address);",
                                "modifiers": [
                                    "view",
                                    "virtual"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "dcff803b561a1465d14868083540c5d1"
                            }
                        ],
                        "_fallback": [
                            {
                                "visibility": "internal",
                                "content": "function _fallback() internal virtual{ _beforeFallback(); _delegate(_implementation());}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Proxy._beforeFallback",
                                        "Proxy._implementation",
                                        "Proxy._delegate"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "d7ba3641364ac415e53bf5983e33de1c"
                            }
                        ],
                        "_beforeFallback": [
                            {
                                "visibility": "internal",
                                "content": "function _beforeFallback() internal virtual{}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "50276e3f4db0c032ad88050ac37ab739"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "Proxy._beforeFallback": "50276e3f4db0c032ad88050ac37ab739",
                "Proxy._implementation": "dcff803b561a1465d14868083540c5d1",
                "Proxy._delegate": "7d1ac149e02cbd968171e352d7bbe304"
            },
            "md5": "8f4935b6faf77547842549369f8c265a"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\@openzeppelin\\contracts\\proxy\\beacon\\IBeacon.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\@openzeppelin\\contracts\\proxy\\beacon\\IBeacon.sol",
            "filename": "IBeacon.sol",
            "imported_contracts": {},
            "contracts": {
                "IBeacon": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "implementation": [
                            {
                                "visibility": "external",
                                "content": "function implementation() external view returns (address);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "52664394d4458bcb36eed8fcd1391db7"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "72aded58df6ff3c9b4069a6296121c47"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\@openzeppelin\\contracts\\utils\\Address.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\@openzeppelin\\contracts\\utils\\Address.sol",
            "filename": "Address.sol",
            "imported_contracts": {},
            "contracts": {
                "Address": {
                    "type": {
                        "__CT__": true,
                        "value": 2
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "isContract": [
                            {
                                "visibility": "internal",
                                "content": "function isContract(address account) internal view returns (bool){ uint256 size; assembly{ size := extcodesize(account)} return size > 0;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "account"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "b946110d999861cda9a1e7e7629934c3"
                            }
                        ],
                        "sendValue": [
                            {
                                "visibility": "internal",
                                "content": "function sendValue(address payable recipient, uint256 amount) internal{ require(address(this).balance >= amount, \"Address: insufficient balance\"); (bool success, ) = recipient.call{ value: amount} (\"\"); require(success, \"Address: unable to send value, recipient may have reverted\");}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address payable",
                                        "name": "recipient"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "4213f1701c2999f67f11de98a51e01f6"
                            }
                        ],
                        "functionCall": [
                            {
                                "visibility": "internal",
                                "content": "function functionCall(address target, bytes memory data) internal returns (bytes memory){ return functionCall(target, data, \"Address: low-level call failed\");}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "target"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "data"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Address.functionCall",
                                        "Address.functionCallWithValue"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "9bd9227b4301edafa41944a5a4cc096d"
                            },
                            {
                                "visibility": "internal",
                                "content": "function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory){ return functionCallWithValue(target, data, 0, errorMessage);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "target"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "data"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "errorMessage"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Address.functionCall",
                                        "Address.functionCallWithValue"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "3deb235bd39105633ff4aa02a367005e"
                            }
                        ],
                        "functionCallWithValue": [
                            {
                                "visibility": "internal",
                                "content": "function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory){ return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "target"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "data"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Address.functionCallWithValue",
                                        "Address.verifyCallResult",
                                        "Address.isContract"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "e318cf9d6fc0d1d8455ee479a7548ba2"
                            },
                            {
                                "visibility": "internal",
                                "content": "function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory){ require(address(this).balance >= value, \"Address: insufficient balance for call\"); require(isContract(target), \"Address: call to non- contract \"); (bool success, bytes memory returndata) = target.call{ value: value} (data); return verifyCallResult(success, returndata, errorMessage);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "target"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "data"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "errorMessage"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Address.functionCallWithValue",
                                        "Address.verifyCallResult",
                                        "Address.isContract"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "e5ef5c80e3f7edacb669876c8d0bdeda"
                            }
                        ],
                        "functionStaticCall": [
                            {
                                "visibility": "internal",
                                "content": "function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory){ return functionStaticCall(target, data, \"Address: low-level static call failed\");}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "target"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "data"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "target.staticcall",
                                        "Address.functionStaticCall",
                                        "Address.verifyCallResult",
                                        "Address.isContract"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "994685aae3cda8dbbf0ffec7f803d344"
                            },
                            {
                                "visibility": "internal",
                                "content": "function functionStaticCall( address target, bytes memory data, string memory errorMessage ) internal view returns (bytes memory){ require(isContract(target), \"Address: static call to non- contract \"); (bool success, bytes memory returndata) = target.staticcall(data); return verifyCallResult(success, returndata, errorMessage);}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "target"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "data"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "errorMessage"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "target.staticcall",
                                        "Address.functionStaticCall",
                                        "Address.verifyCallResult",
                                        "Address.isContract"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "ecc83687edc03f1dbae68952e8efe2c3"
                            }
                        ],
                        "functionDelegateCall": [
                            {
                                "visibility": "internal",
                                "content": "function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory){ return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "target"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "data"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Address.isContract",
                                        "target.delegatecall",
                                        "Address.verifyCallResult",
                                        "Address.functionDelegateCall"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "219660ec0d55ecb352a5cec40b996f90"
                            },
                            {
                                "visibility": "internal",
                                "content": "function functionDelegateCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory){ require(isContract(target), \"Address: delegate call to non- contract \"); (bool success, bytes memory returndata) = target.delegatecall(data); return verifyCallResult(success, returndata, errorMessage);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "target"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "data"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "errorMessage"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Address.isContract",
                                        "target.delegatecall",
                                        "Address.verifyCallResult",
                                        "Address.functionDelegateCall"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "7bd3e0c4b0038fdfdd3c32bfa76e6e64"
                            }
                        ],
                        "verifyCallResult": [
                            {
                                "visibility": "internal",
                                "content": "function verifyCallResult( bool success, bytes memory returndata, string memory errorMessage ) internal pure returns (bytes memory){ if (success){ return returndata;} else{ if (returndata.length > 0){ assembly{ let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size)}} else{ revert(errorMessage);}}}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bool",
                                        "name": "success"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "returndata"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "errorMessage"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "595b1e5bcf25838a84e8abc3e73dc129"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "Address.functionCallWithValue": "e318cf9d6fc0d1d8455ee479a7548ba2",
                "Address.functionCall": "9bd9227b4301edafa41944a5a4cc096d",
                "Address.verifyCallResult": "595b1e5bcf25838a84e8abc3e73dc129",
                "Address.isContract": "b946110d999861cda9a1e7e7629934c3",
                "Address.functionStaticCall": "994685aae3cda8dbbf0ffec7f803d344",
                "Address.functionDelegateCall": "219660ec0d55ecb352a5cec40b996f90"
            },
            "md5": "3c016ef67d678e41e92e54388f21e64a"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\@openzeppelin\\contracts\\utils\\StorageSlot.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\@openzeppelin\\contracts\\utils\\StorageSlot.sol",
            "filename": "StorageSlot.sol",
            "imported_contracts": {},
            "contracts": {
                "StorageSlot": {
                    "type": {
                        "__CT__": true,
                        "value": 2
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "getAddressSlot": [
                            {
                                "visibility": "internal",
                                "content": "function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r){ assembly{ r.slot := slot}}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "slot"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "AddressSlot storage",
                                        "name": "r"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "b91a87d2f9c8105c23e8f53fb8ea979e"
                            }
                        ],
                        "getBooleanSlot": [
                            {
                                "visibility": "internal",
                                "content": "function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r){ assembly{ r.slot := slot}}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "slot"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "BooleanSlot storage",
                                        "name": "r"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "44b2d3872933f234b44b880c7f83c3b4"
                            }
                        ],
                        "getBytes32Slot": [
                            {
                                "visibility": "internal",
                                "content": "function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r){ assembly{ r.slot := slot}}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "slot"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "Bytes32Slot storage",
                                        "name": "r"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "2528b1245b94a51aff696c7646598595"
                            }
                        ],
                        "getUint256Slot": [
                            {
                                "visibility": "internal",
                                "content": "function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r){ assembly{ r.slot := slot}}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "slot"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "Uint256Slot storage",
                                        "name": "r"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "695d58ac53ab2fccc488cb58cbd291dd"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {
                        "AddressSlot": {
                            "content": "AddressSlot{ address value;}"
                        },
                        "BooleanSlot": {
                            "content": "BooleanSlot{ bool value;}"
                        },
                        "Bytes32Slot": {
                            "content": "Bytes32Slot{ bytes32 value;}"
                        },
                        "Uint256Slot": {
                            "content": "Uint256Slot{ uint256 value;}"
                        }
                    },
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "23053cbeb1897e78cae71ab802a71136"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\@openzeppelin\\contracts\\proxy\\ERC1967\\ERC1967Upgrade.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\@openzeppelin\\contracts\\proxy\\ERC1967\\ERC1967Upgrade.sol",
            "filename": "ERC1967Upgrade.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\@openzeppelin\\contracts\\proxy\\beacon\\IBeacon.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\@openzeppelin\\contracts\\utils\\Address.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\@openzeppelin\\contracts\\utils\\StorageSlot.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "ERC1967Upgrade": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": true,
                    "inherits": [],
                    "state_variables": {
                        "_ROLLBACK_SLOT": {
                            "type": "bytes32",
                            "visibility": "private",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143",
                            "content": "bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;"
                        },
                        "_IMPLEMENTATION_SLOT": {
                            "type": "bytes32",
                            "visibility": "internal",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc",
                            "content": "bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;"
                        },
                        "_ADMIN_SLOT": {
                            "type": "bytes32",
                            "visibility": "internal",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103",
                            "content": "bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;"
                        },
                        "_BEACON_SLOT": {
                            "type": "bytes32",
                            "visibility": "internal",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50",
                            "content": "bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;"
                        }
                    },
                    "functions": {
                        "_getImplementation": [
                            {
                                "visibility": "internal",
                                "content": "function _getImplementation() internal view returns (address){ return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_IMPLEMENTATION_SLOT",
                                        "",
                                        "ERC1967Upgrade"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "StorageSlot.getAddressSlot"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "5a07aad80b3bfa3fa5c0647437bb387d"
                            }
                        ],
                        "_setImplementation": [
                            {
                                "visibility": "private",
                                "content": "function _setImplementation(address newImplementation) private{ require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract \"); StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "newImplementation"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_IMPLEMENTATION_SLOT",
                                        "",
                                        "ERC1967Upgrade"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "StorageSlot.getAddressSlot",
                                        "Address.isContract"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "8531feac112fc16ec4dea8f24384b609"
                            }
                        ],
                        "_upgradeTo": [
                            {
                                "visibility": "internal",
                                "content": "function _upgradeTo(address newImplementation) internal{ _setImplementation(newImplementation); emit Upgraded(newImplementation);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "newImplementation"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC1967Upgrade._setImplementation"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "020862c1db68690b6fc90d8d79d6ca80"
                            }
                        ],
                        "_upgradeToAndCall": [
                            {
                                "visibility": "internal",
                                "content": "function _upgradeToAndCall( address newImplementation, bytes memory data, bool forceCall ) internal{ _upgradeTo(newImplementation); if (data.length > 0 || forceCall){ Address.functionDelegateCall(newImplementation, data);}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "newImplementation"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "data"
                                    },
                                    {
                                        "type": "bool",
                                        "name": "forceCall"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC1967Upgrade._upgradeTo",
                                        "Address.functionDelegateCall"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "3a7a46c292a062256f63a814c08f8b90"
                            }
                        ],
                        "_upgradeToAndCallSecure": [
                            {
                                "visibility": "internal",
                                "content": "function _upgradeToAndCallSecure( address newImplementation, bytes memory data, bool forceCall ) internal{ address oldImplementation = _getImplementation(); _setImplementation(newImplementation); if (data.length > 0 || forceCall){ Address.functionDelegateCall(newImplementation, data);} StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot.getBooleanSlot(_ROLLBACK_SLOT); if (!rollbackTesting.value){ rollbackTesting.value = true; Address.functionDelegateCall( newImplementation, abi.encodeWithSignature(\"upgradeTo(address)\", oldImplementation) ); rollbackTesting.value = false; require(oldImplementation == _getImplementation(), \"ERC1967Upgrade: upgrade breaks further upgrades\"); _upgradeTo(newImplementation);}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "newImplementation"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "data"
                                    },
                                    {
                                        "type": "bool",
                                        "name": "forceCall"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_ROLLBACK_SLOT",
                                        "",
                                        "ERC1967Upgrade"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC1967Upgrade._getImplementation",
                                        "StorageSlot.getBooleanSlot",
                                        "Address.functionDelegateCall",
                                        "ERC1967Upgrade._setImplementation",
                                        "ERC1967Upgrade._upgradeTo"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "11f421f8359d3b11892228e1dda3a462"
                            }
                        ],
                        "_getAdmin": [
                            {
                                "visibility": "internal",
                                "content": "function _getAdmin() internal view returns (address){ return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_ADMIN_SLOT",
                                        "",
                                        "ERC1967Upgrade"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "StorageSlot.getAddressSlot"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "002752e9e93fb70035e1df1e1aa4b2a3"
                            }
                        ],
                        "_setAdmin": [
                            {
                                "visibility": "private",
                                "content": "function _setAdmin(address newAdmin) private{ require(newAdmin != address(0), \"ERC1967: new admin is the zero address\"); StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "newAdmin"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_ADMIN_SLOT",
                                        "",
                                        "ERC1967Upgrade"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "StorageSlot.getAddressSlot"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "dbf9ffd64dcdfc914c6d6e8c9d206fb8"
                            }
                        ],
                        "_changeAdmin": [
                            {
                                "visibility": "internal",
                                "content": "function _changeAdmin(address newAdmin) internal{ emit AdminChanged(_getAdmin(), newAdmin); _setAdmin(newAdmin);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "newAdmin"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC1967Upgrade._getAdmin",
                                        "ERC1967Upgrade._setAdmin"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "94b19e393c1f8296efc1c92555e9646f"
                            }
                        ],
                        "_getBeacon": [
                            {
                                "visibility": "internal",
                                "content": "function _getBeacon() internal view returns (address){ return StorageSlot.getAddressSlot(_BEACON_SLOT).value;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_BEACON_SLOT",
                                        "",
                                        "ERC1967Upgrade"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "StorageSlot.getAddressSlot"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "bfd81a26f54b344806f5b226ad925238"
                            }
                        ],
                        "_setBeacon": [
                            {
                                "visibility": "private",
                                "content": "function _setBeacon(address newBeacon) private{ require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract \"); require( Address.isContract(IBeacon(newBeacon).implementation()), \"ERC1967: beacon implementation is not a contract \" ); StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "newBeacon"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_BEACON_SLOT",
                                        "",
                                        "ERC1967Upgrade"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC1967Upgrade.IBeacon",
                                        "StorageSlot.getAddressSlot",
                                        "Address.isContract"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "86b685dbf8d0dc0d9f68309a58687280"
                            }
                        ],
                        "_upgradeBeaconToAndCall": [
                            {
                                "visibility": "internal",
                                "content": "function _upgradeBeaconToAndCall( address newBeacon, bytes memory data, bool forceCall ) internal{ _setBeacon(newBeacon); emit BeaconUpgraded(newBeacon); if (data.length > 0 || forceCall){ Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "newBeacon"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "data"
                                    },
                                    {
                                        "type": "bool",
                                        "name": "forceCall"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC1967Upgrade.IBeacon",
                                        "ERC1967Upgrade._setBeacon",
                                        "Address.functionDelegateCall"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "b9f857259fdc402097a66f4e13fc8f0b"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {
                        "Upgraded": {
                            "event": "Upgraded",
                            "content": "Upgraded(address indexed implementation)"
                        },
                        "AdminChanged": {
                            "event": "AdminChanged",
                            "content": "AdminChanged(address previousAdmin, address newAdmin)"
                        },
                        "BeaconUpgraded": {
                            "event": "BeaconUpgraded",
                            "content": "BeaconUpgraded(address indexed beacon)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "StorageSlot.getAddressSlot": "b91a87d2f9c8105c23e8f53fb8ea979e",
                "Address.isContract": "b946110d999861cda9a1e7e7629934c3",
                "ERC1967Upgrade._setImplementation": "8531feac112fc16ec4dea8f24384b609",
                "ERC1967Upgrade._upgradeTo": "020862c1db68690b6fc90d8d79d6ca80",
                "Address.functionDelegateCall": "219660ec0d55ecb352a5cec40b996f90",
                "StorageSlot.getBooleanSlot": "44b2d3872933f234b44b880c7f83c3b4",
                "ERC1967Upgrade._getImplementation": "5a07aad80b3bfa3fa5c0647437bb387d",
                "ERC1967Upgrade._getAdmin": "002752e9e93fb70035e1df1e1aa4b2a3",
                "ERC1967Upgrade._setAdmin": "dbf9ffd64dcdfc914c6d6e8c9d206fb8",
                "ERC1967Upgrade._setBeacon": "86b685dbf8d0dc0d9f68309a58687280"
            },
            "md5": "58c742381105f07ea7f169249fa29275"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\@openzeppelin\\contracts\\proxy\\beacon\\BeaconProxy.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\@openzeppelin\\contracts\\proxy\\beacon\\BeaconProxy.sol",
            "filename": "BeaconProxy.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\@openzeppelin\\contracts\\proxy\\beacon\\IBeacon.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\@openzeppelin\\contracts\\proxy\\Proxy.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\@openzeppelin\\contracts\\proxy\\ERC1967\\ERC1967Upgrade.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "BeaconProxy": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "Proxy",
                        "ERC1967Upgrade"
                    ],
                    "state_variables": {},
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (address beacon, bytes memory data) payable{ assert(_BEACON_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.beacon\")) - 1)); _upgradeBeaconToAndCall(beacon, data, false);}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "beacon"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "data"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_BEACON_SLOT",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\@openzeppelin\\contracts\\proxy\\ERC1967\\ERC1967Upgrade.sol",
                                        "ERC1967Upgrade"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": true,
                                "md5": "7cde9f12975ab785795a1438af8569a4"
                            }
                        ],
                        "_beacon": [
                            {
                                "visibility": "internal",
                                "content": "function _beacon() internal view virtual returns (address){ return _getBeacon();}",
                                "modifiers": [
                                    "view",
                                    "virtual"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BeaconProxy._getBeacon"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "b0ff3500e5ad1f796e187d70d9e875c2"
                            }
                        ],
                        "_implementation": [
                            {
                                "visibility": "internal",
                                "content": "function _implementation() internal view virtual override returns (address){ return IBeacon(_getBeacon()).implementation();}",
                                "modifiers": [
                                    "view",
                                    "virtual",
                                    "override"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BeaconProxy._getBeacon",
                                        "BeaconProxy.IBeacon"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "4b987ecd5f49ed8bf3e27e544d51b85c"
                            }
                        ],
                        "_setBeacon": [
                            {
                                "visibility": "internal",
                                "content": "function _setBeacon(address beacon, bytes memory data) internal virtual{ _upgradeBeaconToAndCall(beacon, data, false);}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "beacon"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "data"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BeaconProxy._upgradeBeaconToAndCall"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "9da296a6ec17ecfa4d531417c19c5435"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "BeaconProxy._getBeacon": "bfd81a26f54b344806f5b226ad925238",
                "BeaconProxy._upgradeBeaconToAndCall": "b9f857259fdc402097a66f4e13fc8f0b"
            },
            "md5": "16ae04c146c58817914ec3fdad46ccb1"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol",
            "filename": "IERC20.sol",
            "imported_contracts": {},
            "contracts": {
                "IERC20": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "totalSupply": [
                            {
                                "visibility": "external",
                                "content": "function totalSupply() external view returns (uint256);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "5e1d12e61f4bf4b37161d9b684742570"
                            }
                        ],
                        "balanceOf": [
                            {
                                "visibility": "external",
                                "content": "function balanceOf(address account) external view returns (uint256);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "account"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "3ac17e7782366957c960d337a4a648cd"
                            }
                        ],
                        "transfer": [
                            {
                                "visibility": "external",
                                "content": "function transfer(address recipient, uint256 amount) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "recipient"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "98b540da9047ee99bce7fadde65d04b7"
                            }
                        ],
                        "allowance": [
                            {
                                "visibility": "external",
                                "content": "function allowance(address owner, address spender) external view returns (uint256);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "owner"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c93791d09d789aed33b9725d482af442"
                            }
                        ],
                        "approve": [
                            {
                                "visibility": "external",
                                "content": "function approve(address spender, uint256 amount) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "7c80d707df648dc123a10c69a1150edc"
                            }
                        ],
                        "transferFrom": [
                            {
                                "visibility": "external",
                                "content": "function transferFrom( address sender, address recipient, uint256 amount ) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "sender"
                                    },
                                    {
                                        "type": "address",
                                        "name": "recipient"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "7932ef7c0c445db0af2fbba14709eeae"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {
                        "Transfer": {
                            "event": "Transfer",
                            "content": "Transfer(address indexed from, address indexed to, uint256 value)"
                        },
                        "Approval": {
                            "event": "Approval",
                            "content": "Approval(address indexed owner, address indexed spender, uint256 value)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": [
                        [
                            "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol",
                            "IERC20Metadata"
                        ],
                        [
                            "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol",
                            "ERC20"
                        ],
                        [
                            "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Test\\WormholeRouter.sol",
                            "IWETH"
                        ]
                    ]
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "668b790acb130c90bb963f09b36a51dd"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol",
            "filename": "IERC20Metadata.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "IERC20Metadata": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "IERC20"
                    ],
                    "state_variables": {},
                    "functions": {
                        "name": [
                            {
                                "visibility": "external",
                                "content": "function name() external view returns (string memory);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "string memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "4025788d8802eb9f22e195dc2bedffee"
                            }
                        ],
                        "symbol": [
                            {
                                "visibility": "external",
                                "content": "function symbol() external view returns (string memory);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "string memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "290eeefbf46324b8fc0db56342aa8b5c"
                            }
                        ],
                        "decimals": [
                            {
                                "visibility": "external",
                                "content": "function decimals() external view returns (uint8);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint8",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "af3fd982db2d33756fe4782a6d55350a"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": [
                        [
                            "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol",
                            "ERC20"
                        ]
                    ]
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "958ae7f871089da275cdfacc53f84e6a"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol",
            "filename": "ERC20.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\@openzeppelin\\contracts\\utils\\Context.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "ERC20": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "Context",
                        "IERC20",
                        "IERC20Metadata"
                    ],
                    "state_variables": {
                        "_balances": {
                            "type": "mapping(address => uint256)",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(address => uint256) private _balances;"
                        },
                        "_allowances": {
                            "type": "mapping(address => mapping(address => uint256))",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(address => mapping(address => uint256)) private _allowances;"
                        },
                        "_totalSupply": {
                            "type": "uint256",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256 private _totalSupply;"
                        },
                        "_name": {
                            "type": "string",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "string private _name;"
                        },
                        "_symbol": {
                            "type": "string",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "string private _symbol;"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (string memory name_, string memory symbol_){ _name = name_; _symbol = symbol_;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "string memory",
                                        "name": "name_"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "symbol_"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_name",
                                        "",
                                        "ERC20"
                                    ],
                                    [
                                        "_symbol",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_name",
                                        "",
                                        "ERC20"
                                    ],
                                    [
                                        "_symbol",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "922315639585b649e96671e76c175ffd"
                            }
                        ],
                        "name": [
                            {
                                "visibility": "public",
                                "content": "function name() public view virtual override returns (string memory){ return _name;}",
                                "modifiers": [
                                    "view",
                                    "virtual",
                                    "override"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "string memory",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_name",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "f77b43360b4a43f841600b693c01d19a"
                            }
                        ],
                        "symbol": [
                            {
                                "visibility": "public",
                                "content": "function symbol() public view virtual override returns (string memory){ return _symbol;}",
                                "modifiers": [
                                    "view",
                                    "virtual",
                                    "override"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "string memory",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_symbol",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "b244f0cd75b34ae01aa3653aef24e0fc"
                            }
                        ],
                        "decimals": [
                            {
                                "visibility": "public",
                                "content": "function decimals() public view virtual override returns (uint8){ return 18;}",
                                "modifiers": [
                                    "view",
                                    "virtual",
                                    "override"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint8",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "018a53273ac8e5a3d284f02143b7dd8c"
                            }
                        ],
                        "totalSupply": [
                            {
                                "visibility": "public",
                                "content": "function totalSupply() public view virtual override returns (uint256){ return _totalSupply;}",
                                "modifiers": [
                                    "view",
                                    "virtual",
                                    "override"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_totalSupply",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "edb2b6e1669957d5cfae0073283d1f0a"
                            }
                        ],
                        "balanceOf": [
                            {
                                "visibility": "public",
                                "content": "function balanceOf(address account) public view virtual override returns (uint256){ return _balances[account];}",
                                "modifiers": [
                                    "view",
                                    "virtual",
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "account"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_balances",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "55ed6875b4a2e03408080394832a7564"
                            }
                        ],
                        "transfer": [
                            {
                                "visibility": "public",
                                "content": "function transfer(address recipient, uint256 amount) public virtual override returns (bool){ _transfer(_msgSender(), recipient, amount); return true;}",
                                "modifiers": [
                                    "virtual",
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "recipient"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20._msgSender",
                                        "ERC20._transfer"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "3ee0674f770c2fd01c8fe1a77d179a27"
                            }
                        ],
                        "allowance": [
                            {
                                "visibility": "public",
                                "content": "function allowance(address owner, address spender) public view virtual override returns (uint256){ return _allowances[owner][spender];}",
                                "modifiers": [
                                    "view",
                                    "virtual",
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "owner"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_allowances",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "d7cbdea72a1a98a5910dc39323a9b2cc"
                            }
                        ],
                        "approve": [
                            {
                                "visibility": "public",
                                "content": "function approve(address spender, uint256 amount) public virtual override returns (bool){ _approve(_msgSender(), spender, amount); return true;}",
                                "modifiers": [
                                    "virtual",
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20._msgSender",
                                        "ERC20._approve"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "6a2b69527387a6c654cc23d45f984ac2"
                            }
                        ],
                        "transferFrom": [
                            {
                                "visibility": "public",
                                "content": "function transferFrom( address sender, address recipient, uint256 amount ) public virtual override returns (bool){ _transfer(sender, recipient, amount); uint256 currentAllowance = _allowances[sender][_msgSender()]; require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\"); unchecked{ _approve(sender, _msgSender(), currentAllowance - amount);} return true;}",
                                "modifiers": [
                                    "virtual",
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "sender"
                                    },
                                    {
                                        "type": "address",
                                        "name": "recipient"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_allowances",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20._msgSender",
                                        "ERC20._transfer",
                                        "ERC20._approve"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "a1be58505e33edaa26e2317912efcb8c"
                            }
                        ],
                        "increaseAllowance": [
                            {
                                "visibility": "public",
                                "content": "function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool){ _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue); return true;}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "addedValue"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_allowances",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20._msgSender",
                                        "ERC20._approve"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "41c6f9520e42473f8820ea34a6b2cc3f"
                            }
                        ],
                        "decreaseAllowance": [
                            {
                                "visibility": "public",
                                "content": "function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool){ uint256 currentAllowance = _allowances[_msgSender()][spender]; require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\"); unchecked{ _approve(_msgSender(), spender, currentAllowance - subtractedValue);} return true;}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "subtractedValue"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_allowances",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20._msgSender",
                                        "ERC20._approve"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "e8d5bfcb3fb69dab788577ff2e0eaa2b"
                            }
                        ],
                        "_transfer": [
                            {
                                "visibility": "internal",
                                "content": "function _transfer( address sender, address recipient, uint256 amount ) internal virtual{ require(sender != address(0), \"ERC20: transfer from the zero address\"); require(recipient != address(0), \"ERC20: transfer to the zero address\"); _beforeTokenTransfer(sender, recipient, amount); uint256 senderBalance = _balances[sender]; require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\"); unchecked{ _balances[sender] = senderBalance - amount;} _balances[recipient] += amount; emit Transfer(sender, recipient, amount); _afterTokenTransfer(sender, recipient, amount);}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "sender"
                                    },
                                    {
                                        "type": "address",
                                        "name": "recipient"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_balances",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_balances",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20.Transfer",
                                        "ERC20._beforeTokenTransfer",
                                        "ERC20._afterTokenTransfer"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "939ec8d97bfc4b0614607639f77ce3b1"
                            }
                        ],
                        "_mint": [
                            {
                                "visibility": "internal",
                                "content": "function _mint(address account, uint256 amount) internal virtual{ require(account != address(0), \"ERC20: mint to the zero address\"); _beforeTokenTransfer(address(0), account, amount); _totalSupply += amount; _balances[account] += amount; emit Transfer(address(0), account, amount); _afterTokenTransfer(address(0), account, amount);}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "account"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_balances",
                                        "",
                                        "ERC20"
                                    ],
                                    [
                                        "_totalSupply",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_balances",
                                        "",
                                        "ERC20"
                                    ],
                                    [
                                        "_totalSupply",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20.Transfer",
                                        "ERC20._beforeTokenTransfer",
                                        "ERC20._afterTokenTransfer"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "f8ca088d30427bbbf6d3c5867cec1edb"
                            }
                        ],
                        "_burn": [
                            {
                                "visibility": "internal",
                                "content": "function _burn(address account, uint256 amount) internal virtual{ require(account != address(0), \"ERC20: burn from the zero address\"); _beforeTokenTransfer(account, address(0), amount); uint256 accountBalance = _balances[account]; require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\"); unchecked{ _balances[account] = accountBalance - amount;} _totalSupply -= amount; emit Transfer(account, address(0), amount); _afterTokenTransfer(account, address(0), amount);}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "account"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_balances",
                                        "",
                                        "ERC20"
                                    ],
                                    [
                                        "_totalSupply",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_balances",
                                        "",
                                        "ERC20"
                                    ],
                                    [
                                        "_totalSupply",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20.Transfer",
                                        "ERC20._beforeTokenTransfer",
                                        "ERC20._afterTokenTransfer"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "b39ff0d6698d0420c0caa224e5a376f6"
                            }
                        ],
                        "_approve": [
                            {
                                "visibility": "internal",
                                "content": "function _approve( address owner, address spender, uint256 amount ) internal virtual{ require(owner != address(0), \"ERC20: approve from the zero address\"); require(spender != address(0), \"ERC20: approve to the zero address\"); _allowances[owner][spender] = amount; emit Approval(owner, spender, amount);}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "owner"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_allowances",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_allowances",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20.Approval"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "07176c0267db1a9417f782e6926589a7"
                            }
                        ],
                        "_beforeTokenTransfer": [
                            {
                                "visibility": "internal",
                                "content": "function _beforeTokenTransfer( address from, address to, uint256 amount ) internal virtual{}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "794bc174086627f549d880e81d707dbf"
                            }
                        ],
                        "_afterTokenTransfer": [
                            {
                                "visibility": "internal",
                                "content": "function _afterTokenTransfer( address from, address to, uint256 amount ) internal virtual{}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "f0092a061adb173adfe7077f2d51530f"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "ERC20._msgSender": "3bc534219d7c704e82b1271e27e1e9f4",
                "ERC20._transfer": "939ec8d97bfc4b0614607639f77ce3b1",
                "ERC20._approve": "07176c0267db1a9417f782e6926589a7",
                "ERC20._afterTokenTransfer": "f0092a061adb173adfe7077f2d51530f",
                "ERC20._beforeTokenTransfer": "794bc174086627f549d880e81d707dbf"
            },
            "md5": "6d1441581a258020c2d6c019077f4bb4"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\@openzeppelin\\contracts\\token\\ERC20\\utils\\SafeERC20.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\@openzeppelin\\contracts\\token\\ERC20\\utils\\SafeERC20.sol",
            "filename": "SafeERC20.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\@openzeppelin\\contracts\\utils\\Address.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "SafeERC20": {
                    "type": {
                        "__CT__": true,
                        "value": 2
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "safeTransfer": [
                            {
                                "visibility": "internal",
                                "content": "function safeTransfer( IERC20 token, address to, uint256 value ) internal{ _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "IERC20",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SafeERC20._callOptionalReturn"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "bbc9884216fd41f84a3992818f5d5fee"
                            }
                        ],
                        "safeTransferFrom": [
                            {
                                "visibility": "internal",
                                "content": "function safeTransferFrom( IERC20 token, address from, address to, uint256 value ) internal{ _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "IERC20",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SafeERC20._callOptionalReturn"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "9eb9618f71dfee4a30771f1023a3d8e5"
                            }
                        ],
                        "safeApprove": [
                            {
                                "visibility": "internal",
                                "content": "function safeApprove( IERC20 token, address spender, uint256 value ) internal{ require( (value == 0) || (token.allowance(address(this), spender) == 0), \"SafeERC20: approve from non-zero to non-zero allowance\" ); _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "IERC20",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SafeERC20._callOptionalReturn",
                                        "IERC20.allowance"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "c2bd582892198b8539dd21a42c270285"
                            }
                        ],
                        "safeIncreaseAllowance": [
                            {
                                "visibility": "internal",
                                "content": "function safeIncreaseAllowance( IERC20 token, address spender, uint256 value ) internal{ uint256 newAllowance = token.allowance(address(this), spender) + value; _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "IERC20",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SafeERC20._callOptionalReturn",
                                        "IERC20.allowance"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "283c693a22bba694a515167c6ad409c7"
                            }
                        ],
                        "safeDecreaseAllowance": [
                            {
                                "visibility": "internal",
                                "content": "function safeDecreaseAllowance( IERC20 token, address spender, uint256 value ) internal{ unchecked{ uint256 oldAllowance = token.allowance(address(this), spender); require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\"); uint256 newAllowance = oldAllowance - value; _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "IERC20",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SafeERC20._callOptionalReturn",
                                        "IERC20.allowance"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "03cdf989058dd62b884101feaff7d1d8"
                            }
                        ],
                        "_callOptionalReturn": [
                            {
                                "visibility": "private",
                                "content": "function _callOptionalReturn(IERC20 token, bytes memory data) private{ bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\"); if (returndata.length > 0){ require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "IERC20",
                                        "name": "token"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "data"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "IERC20.functionCall"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "3255af138c94ef435c7b1a72a5640b11"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "address": "Address"
                    }
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "SafeERC20._callOptionalReturn": "3255af138c94ef435c7b1a72a5640b11",
                "IERC20.allowance": "d7cbdea72a1a98a5910dc39323a9b2cc",
                "IERC20.functionCall": "9bd9227b4301edafa41944a5a4cc096d"
            },
            "md5": "aa09192785b662133d42ea817d467c1d"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Interfaces\\IDiamondCut.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Interfaces\\IDiamondCut.sol",
            "filename": "IDiamondCut.sol",
            "imported_contracts": {},
            "contracts": {
                "IDiamondCut": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "diamondCut": [
                            {
                                "visibility": "external",
                                "content": "function diamondCut( FacetCut[] calldata _diamondCut, address _init, bytes calldata _calldata ) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "FacetCut[] calldata",
                                        "name": "_diamondCut"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_init"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "_calldata"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "036b128456aafbd1f24d1e9da8e589cd"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {
                        "FacetCut": {
                            "content": "FacetCut{ address facetAddress; FacetCutAction action; bytes4[] functionSelectors;}"
                        }
                    },
                    "events": {
                        "DiamondCut": {
                            "event": "DiamondCut",
                            "content": "DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata)"
                        }
                    },
                    "enums": {
                        "FacetCutAction": {
                            "content": "FacetCutAction{ Add, Replace, Remove}"
                        }
                    },
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": [
                        [
                            "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Facets\\DiamondCutFacet.sol",
                            "DiamondCutFacet"
                        ]
                    ]
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "1ea1f4fa9c42f8c005d9504ba36bed4b"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Libraries\\LibDiamond.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Libraries\\LibDiamond.sol",
            "filename": "LibDiamond.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Interfaces\\IDiamondCut.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "IDiamondCut": {
                            "original_name": "IDiamondCut",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                }
            },
            "contracts": {
                "LibDiamond": {
                    "type": {
                        "__CT__": true,
                        "value": 2
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {
                        "DIAMOND_STORAGE_POSITION": {
                            "type": "bytes32",
                            "visibility": "internal",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "keccak256(\"diamond.standard.diamond.storage\")",
                            "content": "bytes32 internal constant DIAMOND_STORAGE_POSITION = keccak256(\"diamond.standard.diamond.storage\");"
                        }
                    },
                    "functions": {
                        "diamondStorage": [
                            {
                                "visibility": "internal",
                                "content": "function diamondStorage() internal pure returns (DiamondStorage storage ds){ bytes32 position = DIAMOND_STORAGE_POSITION; assembly{ ds.slot := position}}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "DiamondStorage storage",
                                        "name": "ds"
                                    }
                                ],
                                "reads": [
                                    [
                                        "DIAMOND_STORAGE_POSITION",
                                        "",
                                        "LibDiamond"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "d6cb93514927312a8c64ce748e21614b"
                            }
                        ],
                        "setContractOwner": [
                            {
                                "visibility": "internal",
                                "content": "function setContractOwner(address _newOwner) internal{ DiamondStorage storage ds = diamondStorage(); address previousOwner = ds.contractOwner; ds.contractOwner = _newOwner; emit OwnershipTransferred(previousOwner, _newOwner);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_newOwner"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LibDiamond.diamondStorage"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "7953a7ecd16d8ae3d75f1103d44413a9"
                            }
                        ],
                        "contractOwner": [
                            {
                                "visibility": "internal",
                                "content": "function contractOwner() internal view returns (address contractOwner_){ contractOwner_ = diamondStorage().contractOwner;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": "contractOwner_"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LibDiamond.diamondStorage"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "cf70862c1c7f4a17336b86c676a7c230"
                            }
                        ],
                        "enforceIsContractOwner": [
                            {
                                "visibility": "internal",
                                "content": "function enforceIsContractOwner() internal view{ require(msg.sender == diamondStorage().contractOwner, \"LibDiamond: Must be contract owner\");}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LibDiamond.diamondStorage"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "0d2df620297acdeacfe8c016df7e31eb"
                            }
                        ],
                        "diamondCut": [
                            {
                                "visibility": "internal",
                                "content": "function diamondCut( IDiamondCut.FacetCut[] memory _diamondCut, address _init, bytes memory _calldata ) internal{ for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++){ IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action; if (action == IDiamondCut.FacetCutAction.Add){ addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);} else if (action == IDiamondCut.FacetCutAction.Replace){ replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);} else if (action == IDiamondCut.FacetCutAction.Remove){ removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);} else{ revert(\"LibDiamondCut: Incorrect FacetCutAction\");}} emit DiamondCut(_diamondCut, _init, _calldata); initializeDiamondCut(_init, _calldata);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "IDiamondCut.FacetCut[] memory",
                                        "name": "_diamondCut"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_init"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "_calldata"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LibDiamond.removeFunctions",
                                        "LibDiamond.addFunctions",
                                        "LibDiamond.initializeDiamondCut",
                                        "LibDiamond.replaceFunctions"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "645c8443cd810dbc152ec4123fa1f070"
                            }
                        ],
                        "addFunctions": [
                            {
                                "visibility": "internal",
                                "content": "function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal{ require(_functionSelectors.length > 0, \"LibDiamondCut: No selectors in facet to cut\"); DiamondStorage storage ds = diamondStorage(); require(_facetAddress != address(0), \"LibDiamondCut: Add facet can't be address(0)\"); uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length); if (selectorPosition == 0){ addFacet(ds, _facetAddress);} for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++){ bytes4 selector = _functionSelectors[selectorIndex]; address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress; require(oldFacetAddress == address(0), \"LibDiamondCut: Can't add function that already exists\"); addFunction(ds, selector, selectorPosition, _facetAddress); selectorPosition++;}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_facetAddress"
                                    },
                                    {
                                        "type": "bytes4[] memory",
                                        "name": "_functionSelectors"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LibDiamond.addFunction",
                                        "LibDiamond.addFacet",
                                        "LibDiamond.diamondStorage"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "660d32d350eb6b17f4a1fda5304472ae"
                            }
                        ],
                        "replaceFunctions": [
                            {
                                "visibility": "internal",
                                "content": "function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal{ require(_functionSelectors.length > 0, \"LibDiamondCut: No selectors in facet to cut\"); DiamondStorage storage ds = diamondStorage(); require(_facetAddress != address(0), \"LibDiamondCut: Add facet can't be address(0)\"); uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length); if (selectorPosition == 0){ addFacet(ds, _facetAddress);} for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++){ bytes4 selector = _functionSelectors[selectorIndex]; address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress; require(oldFacetAddress != _facetAddress, \"LibDiamondCut: Can't replace function with same function \"); removeFunction(ds, oldFacetAddress, selector); addFunction(ds, selector, selectorPosition, _facetAddress); selectorPosition++;}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_facetAddress"
                                    },
                                    {
                                        "type": "bytes4[] memory",
                                        "name": "_functionSelectors"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LibDiamond.removeFunction",
                                        "LibDiamond.addFunction",
                                        "LibDiamond.addFacet",
                                        "LibDiamond.diamondStorage"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "aeea6aab5262fcb87bcdef99689c2be8"
                            }
                        ],
                        "removeFunctions": [
                            {
                                "visibility": "internal",
                                "content": "function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal{ require(_functionSelectors.length > 0, \"LibDiamondCut: No selectors in facet to cut\"); DiamondStorage storage ds = diamondStorage(); require(_facetAddress == address(0), \"LibDiamondCut: Remove facet address must be address(0)\"); for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++){ bytes4 selector = _functionSelectors[selectorIndex]; address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress; removeFunction(ds, oldFacetAddress, selector);}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_facetAddress"
                                    },
                                    {
                                        "type": "bytes4[] memory",
                                        "name": "_functionSelectors"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LibDiamond.removeFunction",
                                        "LibDiamond.diamondStorage"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "24d745017444240c30190d0b474ad71e"
                            }
                        ],
                        "addFacet": [
                            {
                                "visibility": "internal",
                                "content": "function addFacet(DiamondStorage storage ds, address _facetAddress) internal{ enforceHasContractCode(_facetAddress, \"LibDiamondCut: New facet has no code\"); ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length; ds.facetAddresses.push(_facetAddress);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "DiamondStorage storage",
                                        "name": "ds"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_facetAddress"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LibDiamond.enforceHasContractCode"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "881da128242e4d23b50ae6b893fde020"
                            }
                        ],
                        "addFunction": [
                            {
                                "visibility": "internal",
                                "content": "function addFunction( DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress ) internal{ ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition; ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector); ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "DiamondStorage storage",
                                        "name": "ds"
                                    },
                                    {
                                        "type": "bytes4",
                                        "name": "_selector"
                                    },
                                    {
                                        "type": "uint96",
                                        "name": "_selectorPosition"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_facetAddress"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "0158c8938d400b8935701253e75aabd3"
                            }
                        ],
                        "removeFunction": [
                            {
                                "visibility": "internal",
                                "content": "function removeFunction( DiamondStorage storage ds, address _facetAddress, bytes4 _selector ) internal{ require(_facetAddress != address(0), \"LibDiamondCut: Can't remove function that doesn't exist\"); require(_facetAddress != address(this), \"LibDiamondCut: Can't remove immutable function \"); uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition; uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1; if (selectorPosition != lastSelectorPosition){ bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition]; ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector; ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);} ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop(); delete ds.selectorToFacetAndPosition[_selector]; if (lastSelectorPosition == 0){ uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1; uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition; if (facetAddressPosition != lastFacetAddressPosition){ address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition]; ds.facetAddresses[facetAddressPosition] = lastFacetAddress; ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;} ds.facetAddresses.pop(); delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "DiamondStorage storage",
                                        "name": "ds"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_facetAddress"
                                    },
                                    {
                                        "type": "bytes4",
                                        "name": "_selector"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "99ef59c17f26ee41543a3e8c19f244a8"
                            }
                        ],
                        "initializeDiamondCut": [
                            {
                                "visibility": "internal",
                                "content": "function initializeDiamondCut(address _init, bytes memory _calldata) internal{ if (_init == address(0)){ require(_calldata.length == 0, \"LibDiamondCut: _init is address(0) but_calldata is not empty\");} else{ require(_calldata.length > 0, \"LibDiamondCut: _calldata is empty but _init is not address(0)\"); if (_init != address(this)){ enforceHasContractCode(_init, \"LibDiamondCut: _init address has no code\");} (bool success, bytes memory error ) = _init.delegatecall(_calldata); if (!success){ if ( error .length > 0){ revert(string( error ));} else{ revert(\"LibDiamondCut: _init function reverted\");}}}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_init"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "_calldata"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LibDiamond.enforceHasContractCode",
                                        "_init.delegatecall"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "db702e6efad79634e9cc96367b8d3c71"
                            }
                        ],
                        "enforceHasContractCode": [
                            {
                                "visibility": "internal",
                                "content": "function enforceHasContractCode(address _contract, string memory _errorMessage) internal view{ uint256 contractSize; assembly{ contractSize := extcodesize(_contract)} require(contractSize > 0, _errorMessage);}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_contract"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "_errorMessage"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "f0f1bf75c8430451d289e4cc33af706c"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {
                        "FacetAddressAndPosition": {
                            "content": "FacetAddressAndPosition{ address facetAddress; uint96 functionSelectorPosition;}"
                        },
                        "FacetFunctionSelectors": {
                            "content": "FacetFunctionSelectors{ bytes4[] functionSelectors; uint256 facetAddressPosition;}"
                        },
                        "DiamondStorage": {
                            "content": "DiamondStorage{ mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition; mapping(address => FacetFunctionSelectors) facetFunctionSelectors; address[] facetAddresses; mapping(bytes4 => bool) supportedInterfaces; address contractOwner;}"
                        }
                    },
                    "events": {
                        "OwnershipTransferred": {
                            "event": "OwnershipTransferred",
                            "content": "OwnershipTransferred(address indexed previousOwner, address indexed newOwner)"
                        },
                        "DiamondCut": {
                            "event": "DiamondCut",
                            "content": "DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "LibDiamond.diamondStorage": "d6cb93514927312a8c64ce748e21614b",
                "LibDiamond.addFunctions": "660d32d350eb6b17f4a1fda5304472ae",
                "LibDiamond.initializeDiamondCut": "db702e6efad79634e9cc96367b8d3c71",
                "LibDiamond.removeFunctions": "24d745017444240c30190d0b474ad71e",
                "LibDiamond.replaceFunctions": "aeea6aab5262fcb87bcdef99689c2be8",
                "LibDiamond.addFacet": "881da128242e4d23b50ae6b893fde020",
                "LibDiamond.addFunction": "0158c8938d400b8935701253e75aabd3",
                "LibDiamond.removeFunction": "99ef59c17f26ee41543a3e8c19f244a8",
                "LibDiamond.enforceHasContractCode": "f0f1bf75c8430451d289e4cc33af706c"
            },
            "md5": "d2e2aaa11068b54898f0c86f1bed0118"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\LiFiDiamond.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\LiFiDiamond.sol",
            "filename": "LiFiDiamond.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Libraries\\LibDiamond.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "LibDiamond": {
                            "original_name": "LibDiamond",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Interfaces\\IDiamondCut.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "IDiamondCut": {
                            "original_name": "IDiamondCut",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                }
            },
            "contracts": {
                "LiFiDiamond": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (address _contractOwner, address _diamondCutFacet) payable{ LibDiamond.setContractOwner(_contractOwner); IDiamondCut.FacetCut[] memory cut = new IDiamondCut.FacetCut[](1); bytes4[] memory functionSelectors = new bytes4[](1); functionSelectors[0] = IDiamondCut.diamondCut.selector; cut[0] = IDiamondCut.FacetCut({ facetAddress: _diamondCutFacet, action: IDiamondCut.FacetCutAction.Add, functionSelectors: functionSelectors} ); LibDiamond.diamondCut(cut, address(0), \"\");}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_contractOwner"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_diamondCutFacet"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": true,
                                "md5": "9658f291aaae3c08018b8846845fdec9"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "7fd01549dd491ee3112160db03bba559"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Interfaces\\ILiFi.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Interfaces\\ILiFi.sol",
            "filename": "ILiFi.sol",
            "imported_contracts": {},
            "contracts": {
                "ILiFi": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {},
                    "modifiers": {},
                    "structs": {
                        "LiFiData": {
                            "content": "LiFiData{ bytes32 transactionId; string integrator; address referrer; address sendingAssetId; address receivingAssetId; address receiver; uint256 destinationChainId; uint256 amount;}"
                        }
                    },
                    "events": {
                        "LiFiTransferStarted": {
                            "event": "LiFiTransferStarted",
                            "content": "LiFiTransferStarted( bytes32 indexed transactionId, string integrator, address referrer, address sendingAssetId, address receivingAssetId, address receiver, uint256 amount, uint256 destinationChainId, uint256 timestamp )"
                        },
                        "LiFiTransferCompleted": {
                            "event": "LiFiTransferCompleted",
                            "content": "LiFiTransferCompleted( bytes32 indexed transactionId, address receivingAssetId, address receiver, uint256 amount, uint256 timestamp )"
                        },
                        "LiFiTransferConfirmed": {
                            "event": "LiFiTransferConfirmed",
                            "content": "LiFiTransferConfirmed( bytes32 indexed transactionId, string integrator, address referrer, address sendingAssetId, address receivingAssetId, address receiver, uint256 amount, uint256 destinationChainId, uint256 timestamp )"
                        },
                        "LiFiTransferRefunded": {
                            "event": "LiFiTransferRefunded",
                            "content": "LiFiTransferRefunded( bytes32 indexed transactionId, string integrator, address referrer, address sendingAssetId, address receivingAssetId, address receiver, uint256 amount, uint256 destinationChainId, uint256 timestamp )"
                        },
                        "Inited": {
                            "event": "Inited",
                            "content": "Inited(address indexed bridge, uint64 chainId)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": [
                        [
                            "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Facets\\AnyswapFacet.sol",
                            "AnyswapFacet"
                        ],
                        [
                            "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Facets\\BiconomyFacet.sol",
                            "BiconomyFacet"
                        ],
                        [
                            "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Facets\\CBridgeFacet.sol",
                            "CBridgeFacet"
                        ],
                        [
                            "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Facets\\GenericBridgeFacet.sol",
                            "GenericBridgeFacet"
                        ],
                        [
                            "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Facets\\HopFacet.sol",
                            "HopFacet"
                        ],
                        [
                            "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Facets\\NXTPFacet.sol",
                            "NXTPFacet"
                        ],
                        [
                            "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Facets\\WormholeFacet.sol",
                            "WormholeFacet"
                        ]
                    ]
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "868df5bd936d3d68bdb92bcb5dd1fc2f"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Interfaces\\IAnyswapRouter.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Interfaces\\IAnyswapRouter.sol",
            "filename": "IAnyswapRouter.sol",
            "imported_contracts": {},
            "contracts": {
                "IAnyswapRouter": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "anySwapOutUnderlying": [
                            {
                                "visibility": "external",
                                "content": "function anySwapOutUnderlying( address token, address to, uint256 amount, uint256 toChainID ) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "toChainID"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "aa14fcb54ca5f49ead9c1dfb8b67b621"
                            }
                        ],
                        "anySwapOutNative": [
                            {
                                "visibility": "external",
                                "content": "function anySwapOutNative( address token, address to, uint256 toChainID ) external payable;",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "toChainID"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": true,
                                "md5": "2e9529288d1c2a4d72127af0652946a1"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "18bcc07575f53c6990da3121619be65f"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Libraries\\LibAsset.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Libraries\\LibAsset.sol",
            "filename": "LibAsset.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\@openzeppelin\\contracts\\token\\ERC20\\utils\\SafeERC20.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "LibAsset": {
                    "type": {
                        "__CT__": true,
                        "value": 2
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {
                        "MAX_INT": {
                            "type": "uint256",
                            "visibility": "private",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "2**256 - 1",
                            "content": "uint256 private constant MAX_INT = 2**256 - 1;"
                        },
                        "NATIVE_ASSETID": {
                            "type": "address",
                            "visibility": "internal",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "address(0)",
                            "content": "address internal constant NATIVE_ASSETID = address(0);"
                        }
                    },
                    "functions": {
                        "isNativeAsset": [
                            {
                                "visibility": "internal",
                                "content": "function isNativeAsset(address assetId) internal pure returns (bool){ return assetId == NATIVE_ASSETID;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "assetId"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "NATIVE_ASSETID",
                                        "",
                                        "LibAsset"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "90f6c601dde5476497b7b77972e5160e"
                            }
                        ],
                        "getOwnBalance": [
                            {
                                "visibility": "internal",
                                "content": "function getOwnBalance(address assetId) internal view returns (uint256){ return isNativeAsset(assetId) ? address(this).balance : IERC20(assetId).balanceOf(address(this));}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "assetId"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LibAsset.IERC20",
                                        "LibAsset.isNativeAsset"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "1b51ecb2290b6b3db4f241ddbeb65725"
                            }
                        ],
                        "transferNativeAsset": [
                            {
                                "visibility": "internal",
                                "content": "function transferNativeAsset(address payable recipient, uint256 amount) internal{ (bool success, ) = recipient.call{ value: amount} (\"\"); require(success, \"#TNA:028\");}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address payable",
                                        "name": "recipient"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "d68098b322773666aa95ea35d643bebc"
                            }
                        ],
                        "approveERC20": [
                            {
                                "visibility": "internal",
                                "content": "function approveERC20( IERC20 assetId, address spender, uint256 amount ) internal{ if (isNativeAsset(address(assetId))) return; uint256 allowance = assetId.allowance(address(this), spender); if (allowance < amount){ if (allowance > 0) SafeERC20.safeApprove(IERC20(assetId), spender, 0); SafeERC20.safeApprove(IERC20(assetId), spender, MAX_INT);}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "IERC20",
                                        "name": "assetId"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "MAX_INT",
                                        "",
                                        "LibAsset"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LibAsset.IERC20",
                                        "SafeERC20.safeApprove",
                                        "LibAsset.isNativeAsset",
                                        "IERC20.allowance"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "bc6c5c1293c164e7f62051f2ae31dc5d"
                            }
                        ],
                        "transferERC20": [
                            {
                                "visibility": "internal",
                                "content": "function transferERC20( address assetId, address recipient, uint256 amount ) internal{ SafeERC20.safeTransfer(IERC20(assetId), recipient, amount);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "assetId"
                                    },
                                    {
                                        "type": "address",
                                        "name": "recipient"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LibAsset.IERC20",
                                        "SafeERC20.safeTransfer"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "cd897f591e52b89c220237b1cf835d26"
                            }
                        ],
                        "transferFromERC20": [
                            {
                                "visibility": "internal",
                                "content": "function transferFromERC20( address assetId, address from, address to, uint256 amount ) internal{ SafeERC20.safeTransferFrom(IERC20(assetId), from, to, amount);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "assetId"
                                    },
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SafeERC20.safeTransferFrom",
                                        "LibAsset.IERC20"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "08521bb07828529814f66f2201239e41"
                            }
                        ],
                        "increaseERC20Allowance": [
                            {
                                "visibility": "internal",
                                "content": "function increaseERC20Allowance( address assetId, address spender, uint256 amount ) internal{ require(!isNativeAsset(assetId), \"#IA:034\"); SafeERC20.safeIncreaseAllowance(IERC20(assetId), spender, amount);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "assetId"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LibAsset.IERC20",
                                        "LibAsset.isNativeAsset",
                                        "SafeERC20.safeIncreaseAllowance"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "74569c41fdec074aebf103036c6b2c80"
                            }
                        ],
                        "decreaseERC20Allowance": [
                            {
                                "visibility": "internal",
                                "content": "function decreaseERC20Allowance( address assetId, address spender, uint256 amount ) internal{ require(!isNativeAsset(assetId), \"#DA:034\"); SafeERC20.safeDecreaseAllowance(IERC20(assetId), spender, amount);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "assetId"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LibAsset.IERC20",
                                        "LibAsset.isNativeAsset",
                                        "SafeERC20.safeDecreaseAllowance"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "0966027c3e06f94b368569374d8a0c97"
                            }
                        ],
                        "transferAsset": [
                            {
                                "visibility": "internal",
                                "content": "function transferAsset( address assetId, address payable recipient, uint256 amount ) internal{ isNativeAsset(assetId) ? transferNativeAsset(recipient, amount) : transferERC20(assetId, recipient, amount);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "assetId"
                                    },
                                    {
                                        "type": "address payable",
                                        "name": "recipient"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LibAsset.transferERC20",
                                        "LibAsset.isNativeAsset",
                                        "LibAsset.transferNativeAsset"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "23099f43e12b67b01f34f2ffda244552"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "LibAsset.isNativeAsset": "90f6c601dde5476497b7b77972e5160e",
                "SafeERC20.safeApprove": "c2bd582892198b8539dd21a42c270285",
                "IERC20.allowance": "d7cbdea72a1a98a5910dc39323a9b2cc",
                "SafeERC20.safeTransfer": "bbc9884216fd41f84a3992818f5d5fee",
                "SafeERC20.safeTransferFrom": "9eb9618f71dfee4a30771f1023a3d8e5",
                "SafeERC20.safeIncreaseAllowance": "283c693a22bba694a515167c6ad409c7",
                "SafeERC20.safeDecreaseAllowance": "03cdf989058dd62b884101feaff7d1d8",
                "LibAsset.transferNativeAsset": "d68098b322773666aa95ea35d643bebc",
                "LibAsset.transferERC20": "cd897f591e52b89c220237b1cf835d26"
            },
            "md5": "867fbadb91ebe2ca33355f58f64fbcc9"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Libraries\\LibBytes.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Libraries\\LibBytes.sol",
            "filename": "LibBytes.sol",
            "imported_contracts": {},
            "contracts": {
                "LibBytes": {
                    "type": {
                        "__CT__": true,
                        "value": 2
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "concat": [
                            {
                                "visibility": "internal",
                                "content": "function concat(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bytes memory){ bytes memory tempBytes; assembly{ tempBytes := mload(0x40) let length := mload(_preBytes) mstore(tempBytes, length) let mc := add(tempBytes, 0x20) let end := add(mc, length) for{ let cc := add(_preBytes, 0x20)} lt(mc, end){ mc := add(mc, 0x20) cc := add(cc, 0x20)}{ mstore(mc, mload(cc))} length := mload(_postBytes) mstore(tempBytes, add(length, mload(tempBytes))) mc := end end := add(mc, length) for{ let cc := add(_postBytes, 0x20)} lt(mc, end){ mc := add(mc, 0x20) cc := add(cc, 0x20)}{ mstore(mc, mload(cc))} mstore( 0x40, and( add(add(end, iszero(add(length, mload(_preBytes)))), 31), not(31) ) )} return tempBytes;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "_preBytes"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "_postBytes"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "06f05f251a934fbae1fdfb79f07bfd86"
                            }
                        ],
                        "concatStorage": [
                            {
                                "visibility": "internal",
                                "content": "function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal{ assembly{ let fslot := sload(_preBytes.slot) let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2) let mlength := mload(_postBytes) let newlength := add(slength, mlength) switch add(lt(slength, 32), lt(newlength, 32)) case 2{ sstore( _preBytes.slot, add( fslot, add( mul( div( mload(add(_postBytes, 0x20)), exp(0x100, sub(32, mlength)) ), exp(0x100, sub(32, newlength)) ), mul(mlength, 2) ) ) )} case 1{ mstore(0x0, _preBytes.slot) let sc := add(keccak256(0x0, 0x20), div(slength, 32)) sstore(_preBytes.slot, add(mul(newlength, 2), 1)) let submod := sub(32, slength) let mc := add(_postBytes, submod) let end := add(_postBytes, mlength) let mask := sub(exp(0x100, submod), 1) sstore( sc, add( and(fslot, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00), and(mload(mc), mask) ) ) for{ mc := add(mc, 0x20) sc := add(sc, 1)} lt(mc, end){ sc := add(sc, 1) mc := add(mc, 0x20)}{ sstore(sc, mload(mc))} mask := exp(0x100, sub(mc, end)) sstore(sc, mul(div(mload(mc), mask), mask))} default{ mstore(0x0, _preBytes.slot) let sc := add(keccak256(0x0, 0x20), div(slength, 32)) sstore(_preBytes.slot, add(mul(newlength, 2), 1)) let slengthmod := mod(slength, 32) let submod := sub(32, slengthmod) let mc := add(_postBytes, submod) let end := add(_postBytes, mlength) let mask := sub(exp(0x100, submod), 1) sstore(sc, add(sload(sc), and(mload(mc), mask))) for{ sc := add(sc, 1) mc := add(mc, 0x20)} lt(mc, end){ sc := add(sc, 1) mc := add(mc, 0x20)}{ sstore(sc, mload(mc))} mask := exp(0x100, sub(mc, end)) sstore(sc, mul(div(mload(mc), mask), mask))}}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "bytes storage",
                                        "name": "_preBytes"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "_postBytes"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "142e1ba651b78bfb33f0e2148a107af4"
                            }
                        ],
                        "slice": [
                            {
                                "visibility": "internal",
                                "content": "function slice( bytes memory _bytes, uint256 _start, uint256 _length ) internal pure returns (bytes memory){ require(_length + 31 >= _length, \"slice_overflow\"); require(_bytes.length >= _start + _length, \"slice_outOfBounds\"); bytes memory tempBytes; assembly{ switch iszero(_length) case 0{ tempBytes := mload(0x40) let lengthmod := and(_length, 31) let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod))) let end := add(mc, _length) for{ let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)} lt(mc, end){ mc := add(mc, 0x20) cc := add(cc, 0x20)}{ mstore(mc, mload(cc))} mstore(tempBytes, _length) mstore(0x40, and(add(mc, 31), not(31)))} default{ tempBytes := mload(0x40) mstore(tempBytes, 0) mstore(0x40, add(tempBytes, 0x20))}} return tempBytes;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "_bytes"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_start"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_length"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c3b49d0d1a0510c385cda2235a4a85dd"
                            }
                        ],
                        "toAddress": [
                            {
                                "visibility": "internal",
                                "content": "function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address){ require(_bytes.length >= _start + 20, \"toAddress_outOfBounds\"); address tempAddress; assembly{ tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)} return tempAddress;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "_bytes"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_start"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "b10d20518ecb91c82b3bff1d0fd5b822"
                            }
                        ],
                        "toUint8": [
                            {
                                "visibility": "internal",
                                "content": "function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8){ require(_bytes.length >= _start + 1, \"toUint8_outOfBounds\"); uint8 tempUint; assembly{ tempUint := mload(add(add(_bytes, 0x1), _start))} return tempUint;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "_bytes"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_start"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint8",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "46e92a3b7d5102576f0dfc84924a22a8"
                            }
                        ],
                        "toUint16": [
                            {
                                "visibility": "internal",
                                "content": "function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16){ require(_bytes.length >= _start + 2, \"toUint16_outOfBounds\"); uint16 tempUint; assembly{ tempUint := mload(add(add(_bytes, 0x2), _start))} return tempUint;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "_bytes"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_start"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint16",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "6e3daac5e4b7544f522e80792c4dbda4"
                            }
                        ],
                        "toUint32": [
                            {
                                "visibility": "internal",
                                "content": "function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32){ require(_bytes.length >= _start + 4, \"toUint32_outOfBounds\"); uint32 tempUint; assembly{ tempUint := mload(add(add(_bytes, 0x4), _start))} return tempUint;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "_bytes"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_start"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint32",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "e405df91a45252b46d30b0fb144bbb3a"
                            }
                        ],
                        "toUint64": [
                            {
                                "visibility": "internal",
                                "content": "function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64){ require(_bytes.length >= _start + 8, \"toUint64_outOfBounds\"); uint64 tempUint; assembly{ tempUint := mload(add(add(_bytes, 0x8), _start))} return tempUint;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "_bytes"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_start"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint64",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "a795c2692346c94726066d230fa3a07e"
                            }
                        ],
                        "toUint96": [
                            {
                                "visibility": "internal",
                                "content": "function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96){ require(_bytes.length >= _start + 12, \"toUint96_outOfBounds\"); uint96 tempUint; assembly{ tempUint := mload(add(add(_bytes, 0xc), _start))} return tempUint;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "_bytes"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_start"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint96",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "b2edd475c628bddd3c0a92832ef1562d"
                            }
                        ],
                        "toUint128": [
                            {
                                "visibility": "internal",
                                "content": "function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128){ require(_bytes.length >= _start + 16, \"toUint128_outOfBounds\"); uint128 tempUint; assembly{ tempUint := mload(add(add(_bytes, 0x10), _start))} return tempUint;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "_bytes"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_start"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint128",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "7db5fbb57c5bd39a07e105a16455af18"
                            }
                        ],
                        "toUint256": [
                            {
                                "visibility": "internal",
                                "content": "function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256){ require(_bytes.length >= _start + 32, \"toUint256_outOfBounds\"); uint256 tempUint; assembly{ tempUint := mload(add(add(_bytes, 0x20), _start))} return tempUint;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "_bytes"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_start"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "08ae489cbf54ba7fd82645799faabcf7"
                            }
                        ],
                        "toBytes32": [
                            {
                                "visibility": "internal",
                                "content": "function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32){ require(_bytes.length >= _start + 32, \"toBytes32_outOfBounds\"); bytes32 tempBytes32; assembly{ tempBytes32 := mload(add(add(_bytes, 0x20), _start))} return tempBytes32;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "_bytes"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_start"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "31d977a126d7dc6d56f5b14af672d8d1"
                            }
                        ],
                        "equal": [
                            {
                                "visibility": "internal",
                                "content": "function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool){ bool success = true; assembly{ let length := mload(_preBytes) switch eq(length, mload(_postBytes)) case 1{ let cb := 1 let mc := add(_preBytes, 0x20) let end := add(mc, length) for{ let cc := add(_postBytes, 0x20)} eq(add(lt(mc, end), cb), 2){ mc := add(mc, 0x20) cc := add(cc, 0x20)}{ if iszero(eq(mload(mc), mload(cc))){ success := 0 cb := 0}}} default{ success := 0}} return success;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "_preBytes"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "_postBytes"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "f875f8de341bf8c6c943ddaffc818027"
                            }
                        ],
                        "equalStorage": [
                            {
                                "visibility": "internal",
                                "content": "function equalStorage(bytes storage _preBytes, bytes memory _postBytes) internal view returns (bool){ bool success = true; assembly{ let fslot := sload(_preBytes.slot) let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2) let mlength := mload(_postBytes) switch eq(slength, mlength) case 1{ if iszero(iszero(slength)){ switch lt(slength, 32) case 1{ fslot := mul(div(fslot, 0x100), 0x100) if iszero(eq(fslot, mload(add(_postBytes, 0x20)))){ success := 0}} default{ let cb := 1 mstore(0x0, _preBytes.slot) let sc := keccak256(0x0, 0x20) let mc := add(_postBytes, 0x20) let end := add(mc, mlength) for{} eq(add(lt(mc, end), cb), 2){ sc := add(sc, 1) mc := add(mc, 0x20)}{ if iszero(eq(sload(sc), mload(mc))){ success := 0 cb := 0}}}}} default{ success := 0}} return success;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes storage",
                                        "name": "_preBytes"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "_postBytes"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "38873ad8066effd392374202875bfc11"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "053001b1c25227acf772dab1504b362a"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Libraries\\LibUtil.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Libraries\\LibUtil.sol",
            "filename": "LibUtil.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Libraries\\LibBytes.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "LibUtil": {
                    "type": {
                        "__CT__": true,
                        "value": 2
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "getRevertMsg": [
                            {
                                "visibility": "internal",
                                "content": "function getRevertMsg(bytes memory _res) internal pure returns (string memory){ if (_res.length < 68) return \"Transaction reverted silently\"; bytes memory revertData = _res.slice(4, _res.length - 4); return abi.decode(revertData, (string));}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "_res"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "string memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "_res.slice"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "f27160bf9d87a4774184fa440d174670"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "bytes": "LibBytes"
                    }
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "_res.slice": "c3b49d0d1a0510c385cda2235a4a85dd"
            },
            "md5": "9fbf2444d51b1f3f381f2eb7ef0c865a"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Libraries\\LibSwap.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Libraries\\LibSwap.sol",
            "filename": "LibSwap.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Libraries\\LibAsset.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "LibAsset": {
                            "original_name": "LibAsset",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Libraries\\LibUtil.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "LibUtil": {
                            "original_name": "LibUtil",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                }
            },
            "contracts": {
                "LibSwap": {
                    "type": {
                        "__CT__": true,
                        "value": 2
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {
                        "MAX_INT": {
                            "type": "uint256",
                            "visibility": "private",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "2**256 - 1",
                            "content": "uint256 private constant MAX_INT = 2**256 - 1;"
                        }
                    },
                    "functions": {
                        "swap": [
                            {
                                "visibility": "internal",
                                "content": "function swap(bytes32 transactionId, SwapData calldata _swapData) internal{ uint256 fromAmount = _swapData.fromAmount; uint256 toAmount = LibAsset.getOwnBalance(_swapData.receivingAssetId); address fromAssetId = _swapData.sendingAssetId; if (!LibAsset.isNativeAsset(fromAssetId) && LibAsset.getOwnBalance(fromAssetId) < fromAmount){ LibAsset.transferFromERC20(_swapData.sendingAssetId, msg.sender, address(this), fromAmount);} if (!LibAsset.isNativeAsset(fromAssetId)){ LibAsset.approveERC20(IERC20(fromAssetId), _swapData.approveTo, fromAmount);} (bool success, bytes memory res) = _swapData.callTo.call{ value: msg.value} (_swapData.callData); if (!success){ string memory reason = LibUtil.getRevertMsg(res); revert(reason);} toAmount = LibAsset.getOwnBalance(_swapData.receivingAssetId) - toAmount; emit AssetSwapped( transactionId, _swapData.callTo, _swapData.sendingAssetId, _swapData.receivingAssetId, fromAmount, toAmount, block.timestamp );}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "transactionId"
                                    },
                                    {
                                        "type": "SwapData calldata",
                                        "name": "_swapData"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LibAsset.transferFromERC20",
                                        "LibAsset.getOwnBalance",
                                        "LibAsset.approveERC20",
                                        "LibUtil.getRevertMsg",
                                        "LibAsset.isNativeAsset",
                                        "LibSwap.IERC20"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "2c844f003dcb094da775e9a03a5b8cb4"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {
                        "SwapData": {
                            "content": "SwapData{ address callTo; address approveTo; address sendingAssetId; address receivingAssetId; uint256 fromAmount; bytes callData;}"
                        }
                    },
                    "events": {
                        "AssetSwapped": {
                            "event": "AssetSwapped",
                            "content": "AssetSwapped( bytes32 transactionId, address dex, address fromAssetId, address toAssetId, uint256 fromAmount, uint256 toAmount, uint256 timestamp )"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "LibAsset.transferFromERC20": "08521bb07828529814f66f2201239e41",
                "LibUtil.getRevertMsg": "f27160bf9d87a4774184fa440d174670",
                "LibAsset.isNativeAsset": "90f6c601dde5476497b7b77972e5160e",
                "LibAsset.approveERC20": "bc6c5c1293c164e7f62051f2ae31dc5d",
                "LibAsset.getOwnBalance": "1b51ecb2290b6b3db4f241ddbeb65725"
            },
            "md5": "fb7f973e291cd00800e9726fc5abcf7f"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Interfaces\\IAnyswapToken.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Interfaces\\IAnyswapToken.sol",
            "filename": "IAnyswapToken.sol",
            "imported_contracts": {},
            "contracts": {
                "IAnyswapToken": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "underlying": [
                            {
                                "visibility": "external",
                                "content": "function underlying() external returns (address);",
                                "modifiers": [],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c57665661b06610e45f78de634db7902"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "702dcf4b2a5f7cd0b6f565aefefcdb7e"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Facets\\AnyswapFacet.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Facets\\AnyswapFacet.sol",
            "filename": "AnyswapFacet.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Interfaces\\ILiFi.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "ILiFi": {
                            "original_name": "ILiFi",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Interfaces\\IAnyswapRouter.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "IAnyswapRouter": {
                            "original_name": "IAnyswapRouter",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Libraries\\LibDiamond.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "LibDiamond": {
                            "original_name": "LibDiamond",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Libraries\\LibAsset.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "LibAsset": {
                            "original_name": "LibAsset",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Libraries\\LibSwap.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "LibSwap": {
                            "original_name": "LibSwap",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Interfaces\\IAnyswapToken.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "IAnyswapToken": {
                            "original_name": "IAnyswapToken",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                }
            },
            "contracts": {
                "AnyswapFacet": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "ILiFi"
                    ],
                    "state_variables": {},
                    "functions": {
                        "startBridgeTokensViaAnyswap": [
                            {
                                "visibility": "public",
                                "content": "function startBridgeTokensViaAnyswap(LiFiData memory _lifiData, AnyswapData calldata _anyswapData) public payable{ if (_anyswapData.token != address(0)){ address underlyingToken = IAnyswapToken(_anyswapData.token).underlying(); uint256 _fromTokenBalance = LibAsset.getOwnBalance(underlyingToken); LibAsset.transferFromERC20(underlyingToken, msg.sender, address(this), _anyswapData.amount); require( LibAsset.getOwnBalance(underlyingToken) - _fromTokenBalance == _anyswapData.amount, \"ERR_INVALID_AMOUNT\" );} else{ require(msg.value == _anyswapData.amount, \"ERR_INVALID_AMOUNT\");} _startBridge(_anyswapData); emit LiFiTransferStarted( _lifiData.transactionId, _lifiData.integrator, _lifiData.referrer, _lifiData.sendingAssetId, _lifiData.receivingAssetId, _lifiData.receiver, _lifiData.amount, _lifiData.destinationChainId, block.timestamp );}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "LiFiData memory",
                                        "name": "_lifiData"
                                    },
                                    {
                                        "type": "AnyswapData calldata",
                                        "name": "_anyswapData"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LibAsset.transferFromERC20",
                                        "AnyswapFacet.LiFiTransferStarted",
                                        "LibAsset.getOwnBalance",
                                        "AnyswapFacet._startBridge",
                                        "AnyswapFacet.IAnyswapToken"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "98aaadff85d45e2c48cfc64aedbfe871"
                            }
                        ],
                        "swapAndStartBridgeTokensViaAnyswap": [
                            {
                                "visibility": "public",
                                "content": "function swapAndStartBridgeTokensViaAnyswap( LiFiData memory _lifiData, LibSwap.SwapData[] calldata _swapData, AnyswapData memory _anyswapData ) public payable{ if (_anyswapData.token != address(0)){ address underlyingToken = IAnyswapToken(_anyswapData.token).underlying(); uint256 _fromTokenBalance = LibAsset.getOwnBalance(underlyingToken); for (uint8 i; i < _swapData.length; i++){ LibSwap.swap(_lifiData.transactionId, _swapData[i]);} uint256 _postSwapBalance = LibAsset.getOwnBalance(underlyingToken) - _fromTokenBalance; require(_postSwapBalance > 0, \"ERR_INVALID_AMOUNT\"); _anyswapData.amount = _postSwapBalance;} else{ uint256 _fromBalance = address(this).balance; for (uint8 i; i < _swapData.length; i++){ LibSwap.swap(_lifiData.transactionId, _swapData[i]);} require(address(this).balance - _fromBalance >= _anyswapData.amount, \"ERR_INVALID_AMOUNT\"); uint256 _postSwapBalance = address(this).balance - _fromBalance; require(_postSwapBalance > 0, \"ERR_INVALID_AMOUNT\"); _anyswapData.amount = _postSwapBalance;} _startBridge(_anyswapData); emit LiFiTransferStarted( _lifiData.transactionId, _lifiData.integrator, _lifiData.referrer, _lifiData.sendingAssetId, _lifiData.receivingAssetId, _lifiData.receiver, _lifiData.amount, _lifiData.destinationChainId, block.timestamp );}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "LiFiData memory",
                                        "name": "_lifiData"
                                    },
                                    {
                                        "type": "LibSwap.SwapData[] calldata",
                                        "name": "_swapData"
                                    },
                                    {
                                        "type": "AnyswapData memory",
                                        "name": "_anyswapData"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyswapFacet.LiFiTransferStarted",
                                        "LibAsset.getOwnBalance",
                                        "AnyswapFacet._startBridge",
                                        "LibSwap.swap",
                                        "AnyswapFacet.IAnyswapToken"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "1f97f5d115825ed4ef925820683ce944"
                            }
                        ],
                        "_startBridge": [
                            {
                                "visibility": "internal",
                                "content": "function _startBridge(AnyswapData memory _anyswapData) internal{ require(block.chainid != _anyswapData.toChainId, \"Cannot bridge to the same network.\"); if (_anyswapData.token != address(0)){ LibAsset.approveERC20( IERC20(IAnyswapToken(_anyswapData.token).underlying()), _anyswapData.router, _anyswapData.amount ); IAnyswapRouter(_anyswapData.router).anySwapOutUnderlying( _anyswapData.token, _anyswapData.recipient, _anyswapData.amount, _anyswapData.toChainId );} else{ IAnyswapRouter(_anyswapData.router).anySwapOutNative{ value: _anyswapData.amount} ( _anyswapData.token, _anyswapData.recipient, _anyswapData.toChainId );}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "AnyswapData memory",
                                        "name": "_anyswapData"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyswapFacet.IERC20",
                                        "AnyswapFacet.IAnyswapRouter",
                                        "LibAsset.approveERC20",
                                        "AnyswapFacet.IAnyswapToken"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "e7660253261da078557395c4d3024927"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {
                        "AnyswapData": {
                            "content": "AnyswapData{ address token; address router; uint256 amount; address recipient; uint256 toChainId;}"
                        }
                    },
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "LibAsset.transferFromERC20": "08521bb07828529814f66f2201239e41",
                "AnyswapFacet._startBridge": "e7660253261da078557395c4d3024927",
                "LibAsset.getOwnBalance": "1b51ecb2290b6b3db4f241ddbeb65725",
                "LibSwap.swap": "2c844f003dcb094da775e9a03a5b8cb4",
                "LibAsset.approveERC20": "bc6c5c1293c164e7f62051f2ae31dc5d"
            },
            "md5": "a9900848dda01a5f0c53e03148364f33"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Interfaces\\IBiconomyRouter.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Interfaces\\IBiconomyRouter.sol",
            "filename": "IBiconomyRouter.sol",
            "imported_contracts": {},
            "contracts": {
                "IBiconomyRouter": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "depositErc20": [
                            {
                                "visibility": "external",
                                "content": "function depositErc20( address tokenAddress, address receiver, uint256 amount, uint256 toChainId ) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "tokenAddress"
                                    },
                                    {
                                        "type": "address",
                                        "name": "receiver"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "toChainId"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "5e425545fce2226a4913d1d77e4a08ef"
                            }
                        ],
                        "depositNative": [
                            {
                                "visibility": "external",
                                "content": "function depositNative(address receiver, uint256 toChainId) external payable;",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "receiver"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "toChainId"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": true,
                                "md5": "67047d8b6638366fe145e1c29f139bcf"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "482ac458fa33757f5fe41cba0d92e2d5"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Facets\\BiconomyFacet.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Facets\\BiconomyFacet.sol",
            "filename": "BiconomyFacet.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Interfaces\\ILiFi.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "ILiFi": {
                            "original_name": "ILiFi",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Interfaces\\IBiconomyRouter.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "IBiconomyRouter": {
                            "original_name": "IBiconomyRouter",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Libraries\\LibDiamond.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "LibDiamond": {
                            "original_name": "LibDiamond",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Libraries\\LibAsset.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "LibAsset": {
                            "original_name": "LibAsset",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Libraries\\LibSwap.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "LibSwap": {
                            "original_name": "LibSwap",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                }
            },
            "contracts": {
                "BiconomyFacet": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "ILiFi"
                    ],
                    "state_variables": {
                        "NAMESPACE": {
                            "type": "bytes32",
                            "visibility": "internal",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "keccak256(\"com.lifi.facets.biconomy\")",
                            "content": "bytes32 internal constant NAMESPACE = keccak256(\"com.lifi.facets.biconomy\");"
                        }
                    },
                    "functions": {
                        "initBiconomy": [
                            {
                                "visibility": "external",
                                "content": "function initBiconomy(address _biconomyRouter) external{ Storage storage s = getStorage(); LibDiamond.enforceIsContractOwner(); s.biconomyRouter = _biconomyRouter;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_biconomyRouter"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LibDiamond.enforceIsContractOwner",
                                        "BiconomyFacet.getStorage"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "e20b008d86cf987e0ca4a591c9077df2"
                            }
                        ],
                        "startBridgeTokensViaBiconomy": [
                            {
                                "visibility": "public",
                                "content": "function startBridgeTokensViaBiconomy(LiFiData memory _lifiData, BiconomyData calldata _biconomyData) public payable{ if (_biconomyData.token != address(0)){ uint256 _fromTokenBalance = LibAsset.getOwnBalance(_biconomyData.token); LibAsset.transferFromERC20(_biconomyData.token, msg.sender, address(this), _biconomyData.amount); require( LibAsset.getOwnBalance(_biconomyData.token) - _fromTokenBalance == _biconomyData.amount, \"ERR_INVALID_AMOUNT\" );} else{ require(msg.value == _biconomyData.amount, \"ERR_INVALID_AMOUNT\");} _startBridge(_biconomyData); emit LiFiTransferStarted( _lifiData.transactionId, _lifiData.integrator, _lifiData.referrer, _lifiData.sendingAssetId, _lifiData.receivingAssetId, _lifiData.receiver, _lifiData.amount, _lifiData.destinationChainId, block.timestamp );}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "LiFiData memory",
                                        "name": "_lifiData"
                                    },
                                    {
                                        "type": "BiconomyData calldata",
                                        "name": "_biconomyData"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BiconomyFacet._startBridge",
                                        "LibAsset.getOwnBalance",
                                        "BiconomyFacet.LiFiTransferStarted",
                                        "LibAsset.transferFromERC20"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "659cda0d0f83b74f239cb7d5c16e059c"
                            }
                        ],
                        "swapAndStartBridgeTokensViaBiconomy": [
                            {
                                "visibility": "public",
                                "content": "function swapAndStartBridgeTokensViaBiconomy( LiFiData memory _lifiData, LibSwap.SwapData[] calldata _swapData, BiconomyData memory _biconomyData ) public payable{ if (_biconomyData.token != address(0)){ uint256 _fromTokenBalance = LibAsset.getOwnBalance(_biconomyData.token); for (uint8 i; i < _swapData.length; i++){ LibSwap.swap(_lifiData.transactionId, _swapData[i]);} uint256 _postSwapBalance = LibAsset.getOwnBalance(_biconomyData.token) - _fromTokenBalance; require(_postSwapBalance > 0, \"ERR_INVALID_AMOUNT\"); _biconomyData.amount = _postSwapBalance;} else{ uint256 _fromBalance = address(this).balance; for (uint8 i; i < _swapData.length; i++){ LibSwap.swap(_lifiData.transactionId, _swapData[i]);} uint256 _postSwapBalance = address(this).balance - _fromBalance; require(_postSwapBalance > 0, \"ERR_INVALID_AMOUNT\"); _biconomyData.amount = _postSwapBalance;} _startBridge(_biconomyData); emit LiFiTransferStarted( _lifiData.transactionId, _lifiData.integrator, _lifiData.referrer, _lifiData.sendingAssetId, _lifiData.receivingAssetId, _lifiData.receiver, _lifiData.amount, _lifiData.destinationChainId, block.timestamp );}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "LiFiData memory",
                                        "name": "_lifiData"
                                    },
                                    {
                                        "type": "LibSwap.SwapData[] calldata",
                                        "name": "_swapData"
                                    },
                                    {
                                        "type": "BiconomyData memory",
                                        "name": "_biconomyData"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LibSwap.swap",
                                        "LibAsset.getOwnBalance",
                                        "BiconomyFacet._startBridge",
                                        "BiconomyFacet.LiFiTransferStarted"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "3f994b6ca6433c2cf50c7e29c5a260db"
                            }
                        ],
                        "changeBiconomyRouter": [
                            {
                                "visibility": "external",
                                "content": "function changeBiconomyRouter(address _newRouter) external{ Storage storage s = getStorage(); LibDiamond.enforceIsContractOwner(); s.biconomyRouter = _newRouter;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_newRouter"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LibDiamond.enforceIsContractOwner",
                                        "BiconomyFacet.getStorage"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "99663bd37c0abac2cfb7443c40c9a7f8"
                            }
                        ],
                        "_startBridge": [
                            {
                                "visibility": "internal",
                                "content": "function _startBridge(BiconomyData memory _biconomyData) internal{ Storage storage s = getStorage(); require(block.chainid != _biconomyData.toChainId, \"Cannot bridge to the same network.\"); if (_biconomyData.token != address(0)){ LibAsset.approveERC20(IERC20(_biconomyData.token), s.biconomyRouter, _biconomyData.amount); IBiconomyRouter(s.biconomyRouter).depositErc20( _biconomyData.token, _biconomyData.recipient, _biconomyData.amount, _biconomyData.toChainId );} else{ IBiconomyRouter(s.biconomyRouter).depositNative{ value: _biconomyData.amount} ( _biconomyData.recipient, _biconomyData.toChainId );}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "BiconomyData memory",
                                        "name": "_biconomyData"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BiconomyFacet.IERC20",
                                        "LibAsset.approveERC20",
                                        "BiconomyFacet.getStorage",
                                        "BiconomyFacet.IBiconomyRouter"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "107438fcfe5f379804a8e32651a1b6cf"
                            }
                        ],
                        "getStorage": [
                            {
                                "visibility": "internal",
                                "content": "function getStorage() internal pure returns (Storage storage s){ bytes32 namespace = NAMESPACE; assembly{ s.slot := namespace}}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "Storage storage",
                                        "name": "s"
                                    }
                                ],
                                "reads": [
                                    [
                                        "NAMESPACE",
                                        "",
                                        "BiconomyFacet"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c61f9e5858f5e9519a6b8a2a23d918ed"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {
                        "Storage": {
                            "content": "Storage{ address biconomyRouter;}"
                        },
                        "BiconomyData": {
                            "content": "BiconomyData{ address token; uint256 amount; address recipient; uint256 toChainId;}"
                        }
                    },
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "BiconomyFacet.getStorage": "c61f9e5858f5e9519a6b8a2a23d918ed",
                "LibDiamond.enforceIsContractOwner": "0d2df620297acdeacfe8c016df7e31eb",
                "LibAsset.transferFromERC20": "08521bb07828529814f66f2201239e41",
                "LibAsset.getOwnBalance": "1b51ecb2290b6b3db4f241ddbeb65725",
                "BiconomyFacet._startBridge": "107438fcfe5f379804a8e32651a1b6cf",
                "LibSwap.swap": "2c844f003dcb094da775e9a03a5b8cb4",
                "LibAsset.approveERC20": "bc6c5c1293c164e7f62051f2ae31dc5d"
            },
            "md5": "bf57913740ff0225461ffa4de229a189"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Interfaces\\ICBridge.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Interfaces\\ICBridge.sol",
            "filename": "ICBridge.sol",
            "imported_contracts": {},
            "contracts": {
                "ICBridge": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "send": [
                            {
                                "visibility": "external",
                                "content": "function send( address _receiver, address _token, uint256 _amount, uint64 _dstChinId, uint64 _nonce, uint32 _maxSlippage ) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_receiver"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_token"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_amount"
                                    },
                                    {
                                        "type": "uint64",
                                        "name": "_dstChinId"
                                    },
                                    {
                                        "type": "uint64",
                                        "name": "_nonce"
                                    },
                                    {
                                        "type": "uint32",
                                        "name": "_maxSlippage"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "ef4184daf6b77d6f4c27869b2172a81f"
                            }
                        ],
                        "sendNative": [
                            {
                                "visibility": "external",
                                "content": "function sendNative( address _receiver, uint256 _amount, uint64 _dstChinId, uint64 _nonce, uint32 _maxSlippage ) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_receiver"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_amount"
                                    },
                                    {
                                        "type": "uint64",
                                        "name": "_dstChinId"
                                    },
                                    {
                                        "type": "uint64",
                                        "name": "_nonce"
                                    },
                                    {
                                        "type": "uint32",
                                        "name": "_maxSlippage"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "1ae1d3a06da46862aa25d905c99d001e"
                            }
                        ],
                        "relay": [
                            {
                                "visibility": "external",
                                "content": "function relay( bytes calldata _relayRequest, bytes[] calldata _sigs, address[] calldata _signers, uint256[] calldata _powers ) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "bytes calldata",
                                        "name": "_relayRequest"
                                    },
                                    {
                                        "type": "bytes[] calldata",
                                        "name": "_sigs"
                                    },
                                    {
                                        "type": "address[] calldata",
                                        "name": "_signers"
                                    },
                                    {
                                        "type": "uint256[] calldata",
                                        "name": "_powers"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "e00e5688d21a4004273f5b856c5cf239"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "d462a517688eb0458f9aad1f16707280"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Facets\\CBridgeFacet.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Facets\\CBridgeFacet.sol",
            "filename": "CBridgeFacet.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Libraries\\LibAsset.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "LibAsset": {
                            "original_name": "LibAsset",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Interfaces\\ILiFi.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "ILiFi": {
                            "original_name": "ILiFi",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Libraries\\LibSwap.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "LibSwap": {
                            "original_name": "LibSwap",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Interfaces\\ICBridge.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "ICBridge": {
                            "original_name": "ICBridge",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Libraries\\LibDiamond.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "LibDiamond": {
                            "original_name": "LibDiamond",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                }
            },
            "contracts": {
                "CBridgeFacet": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "ILiFi"
                    ],
                    "state_variables": {
                        "NAMESPACE": {
                            "type": "bytes32",
                            "visibility": "internal",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "keccak256(\"com.lifi.facets.cbridge2\")",
                            "content": "bytes32 internal constant NAMESPACE = keccak256(\"com.lifi.facets.cbridge2\");"
                        }
                    },
                    "functions": {
                        "initCbridge": [
                            {
                                "visibility": "external",
                                "content": "function initCbridge(address _cBridge, uint64 _chainId) external{ Storage storage s = getStorage(); LibDiamond.enforceIsContractOwner(); s.cBridge = _cBridge; s.cBridgeChainId = _chainId; emit Inited(s.cBridge, s.cBridgeChainId);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_cBridge"
                                    },
                                    {
                                        "type": "uint64",
                                        "name": "_chainId"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "CBridgeFacet.Inited",
                                        "LibDiamond.enforceIsContractOwner",
                                        "CBridgeFacet.getStorage"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "f9976728ce4af2494d92fa79bd4d4a9c"
                            }
                        ],
                        "startBridgeTokensViaCBridge": [
                            {
                                "visibility": "public",
                                "content": "function startBridgeTokensViaCBridge(LiFiData memory _lifiData, CBridgeData calldata _cBridgeData) public payable{ if (_cBridgeData.token != address(0)){ uint256 _fromTokenBalance = LibAsset.getOwnBalance(_cBridgeData.token); LibAsset.transferFromERC20(_cBridgeData.token, msg.sender, address(this), _cBridgeData.amount); require( LibAsset.getOwnBalance(_cBridgeData.token) - _fromTokenBalance == _cBridgeData.amount, \"ERR_INVALID_AMOUNT\" );} else{ require(msg.value >= _cBridgeData.amount, \"ERR_INVALID_AMOUNT\");} _startBridge(_cBridgeData); emit LiFiTransferStarted( _lifiData.transactionId, _lifiData.integrator, _lifiData.referrer, _lifiData.sendingAssetId, _lifiData.receivingAssetId, _lifiData.receiver, _lifiData.amount, _lifiData.destinationChainId, block.timestamp );}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "LiFiData memory",
                                        "name": "_lifiData"
                                    },
                                    {
                                        "type": "CBridgeData calldata",
                                        "name": "_cBridgeData"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "CBridgeFacet._startBridge",
                                        "LibAsset.getOwnBalance",
                                        "CBridgeFacet.LiFiTransferStarted",
                                        "LibAsset.transferFromERC20"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "eefa7f7b87c238fa1d63546be44a6f2d"
                            }
                        ],
                        "swapAndStartBridgeTokensViaCBridge": [
                            {
                                "visibility": "public",
                                "content": "function swapAndStartBridgeTokensViaCBridge( LiFiData memory _lifiData, LibSwap.SwapData[] calldata _swapData, CBridgeData memory _cBridgeData ) public payable{ if (_cBridgeData.token != address(0)){ uint256 _fromTokenBalance = LibAsset.getOwnBalance(_cBridgeData.token); for (uint8 i; i < _swapData.length; i++){ LibSwap.swap(_lifiData.transactionId, _swapData[i]);} uint256 _postSwapBalance = LibAsset.getOwnBalance(_cBridgeData.token) - _fromTokenBalance; require(_postSwapBalance > 0, \"ERR_INVALID_AMOUNT\"); _cBridgeData.amount = _postSwapBalance;} else{ uint256 _fromBalance = address(this).balance; for (uint8 i; i < _swapData.length; i++){ LibSwap.swap(_lifiData.transactionId, _swapData[i]);} uint256 _postSwapBalance = address(this).balance - _fromBalance; require(_postSwapBalance > 0, \"ERR_INVALID_AMOUNT\"); _cBridgeData.amount = _postSwapBalance;} _startBridge(_cBridgeData); emit LiFiTransferStarted( _lifiData.transactionId, _lifiData.integrator, _lifiData.referrer, _lifiData.sendingAssetId, _lifiData.receivingAssetId, _lifiData.receiver, _lifiData.amount, _lifiData.destinationChainId, block.timestamp );}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "LiFiData memory",
                                        "name": "_lifiData"
                                    },
                                    {
                                        "type": "LibSwap.SwapData[] calldata",
                                        "name": "_swapData"
                                    },
                                    {
                                        "type": "CBridgeData memory",
                                        "name": "_cBridgeData"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LibSwap.swap",
                                        "CBridgeFacet._startBridge",
                                        "LibAsset.getOwnBalance",
                                        "CBridgeFacet.LiFiTransferStarted"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "3b5f7b48fd37f30d92a83327c7ddb845"
                            }
                        ],
                        "_startBridge": [
                            {
                                "visibility": "internal",
                                "content": "function _startBridge(CBridgeData memory _cBridgeData) internal{ Storage storage s = getStorage(); address bridge = _bridge(); require(s.cBridgeChainId != _cBridgeData.dstChainId, \"Cannot bridge to the same network.\"); if (LibAsset.isNativeAsset(_cBridgeData.token)){ ICBridge(bridge).sendNative( _cBridgeData.receiver, _cBridgeData.amount, _cBridgeData.dstChainId, _cBridgeData.nonce, _cBridgeData.maxSlippage );} else{ LibAsset.approveERC20(IERC20(_cBridgeData.token), bridge, _cBridgeData.amount); ICBridge(bridge).send( _cBridgeData.receiver, _cBridgeData.token, _cBridgeData.amount, _cBridgeData.dstChainId, _cBridgeData.nonce, _cBridgeData.maxSlippage );}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "CBridgeData memory",
                                        "name": "_cBridgeData"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "CBridgeFacet._bridge",
                                        "CBridgeFacet.getStorage",
                                        "LibAsset.approveERC20",
                                        "CBridgeFacet.ICBridge",
                                        "CBridgeFacet.IERC20",
                                        "LibAsset.isNativeAsset"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "2d9d793037924adc0c4a99849ab96074"
                            }
                        ],
                        "_bridge": [
                            {
                                "visibility": "internal",
                                "content": "function _bridge() internal view returns (address){ Storage storage s = getStorage(); return s.cBridge;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "CBridgeFacet.getStorage"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "4e2b6a3919221e2548c6fd446af7f84d"
                            }
                        ],
                        "getStorage": [
                            {
                                "visibility": "internal",
                                "content": "function getStorage() internal pure returns (Storage storage s){ bytes32 namespace = NAMESPACE; assembly{ s.slot := namespace}}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "Storage storage",
                                        "name": "s"
                                    }
                                ],
                                "reads": [
                                    [
                                        "NAMESPACE",
                                        "",
                                        "CBridgeFacet"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c61f9e5858f5e9519a6b8a2a23d918ed"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {
                        "Storage": {
                            "content": "Storage{ address cBridge; uint64 cBridgeChainId;}"
                        },
                        "CBridgeData": {
                            "content": "CBridgeData{ address receiver; address token; uint256 amount; uint64 dstChainId; uint64 nonce; uint32 maxSlippage;}"
                        }
                    },
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "CBridgeFacet.getStorage": "c61f9e5858f5e9519a6b8a2a23d918ed",
                "LibDiamond.enforceIsContractOwner": "0d2df620297acdeacfe8c016df7e31eb",
                "LibAsset.transferFromERC20": "08521bb07828529814f66f2201239e41",
                "CBridgeFacet._startBridge": "2d9d793037924adc0c4a99849ab96074",
                "LibAsset.getOwnBalance": "1b51ecb2290b6b3db4f241ddbeb65725",
                "LibSwap.swap": "2c844f003dcb094da775e9a03a5b8cb4",
                "LibAsset.isNativeAsset": "90f6c601dde5476497b7b77972e5160e",
                "LibAsset.approveERC20": "bc6c5c1293c164e7f62051f2ae31dc5d",
                "CBridgeFacet._bridge": "4e2b6a3919221e2548c6fd446af7f84d"
            },
            "md5": "aab41efab6ee9b2360da977f97a0bc58"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Facets\\DiamondCutFacet.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Facets\\DiamondCutFacet.sol",
            "filename": "DiamondCutFacet.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Interfaces\\IDiamondCut.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "IDiamondCut": {
                            "original_name": "IDiamondCut",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Libraries\\LibDiamond.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "LibDiamond": {
                            "original_name": "LibDiamond",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                }
            },
            "contracts": {
                "DiamondCutFacet": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "IDiamondCut"
                    ],
                    "state_variables": {},
                    "functions": {
                        "diamondCut": [
                            {
                                "visibility": "external",
                                "content": "function diamondCut( FacetCut[] calldata _diamondCut, address _init, bytes calldata _calldata ) external override{ LibDiamond.enforceIsContractOwner(); LibDiamond.diamondCut(_diamondCut, _init, _calldata);}",
                                "modifiers": [
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "FacetCut[] calldata",
                                        "name": "_diamondCut"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_init"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "_calldata"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LibDiamond.diamondCut",
                                        "LibDiamond.enforceIsContractOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "1f66e8e372e927616d2ae5055fc75c6d"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "LibDiamond.enforceIsContractOwner": "0d2df620297acdeacfe8c016df7e31eb",
                "LibDiamond.diamondCut": "1f66e8e372e927616d2ae5055fc75c6d"
            },
            "md5": "6308bca41b59adae9503c336506f4ec9"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Interfaces\\IDiamondLoupe.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Interfaces\\IDiamondLoupe.sol",
            "filename": "IDiamondLoupe.sol",
            "imported_contracts": {},
            "contracts": {
                "IDiamondLoupe": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "facets": [
                            {
                                "visibility": "external",
                                "content": "function facets() external view returns (Facet[] memory facets_);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "Facet[] memory",
                                        "name": "facets_"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "14fd0cd704084036eae3a8ebe288e4d6"
                            }
                        ],
                        "facetFunctionSelectors": [
                            {
                                "visibility": "external",
                                "content": "function facetFunctionSelectors(address _facet) external view returns (bytes4[] memory facetFunctionSelectors_);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_facet"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes4[] memory",
                                        "name": "facetFunctionSelectors_"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "eec2d3662fe772bb612e7bdc51d5c0be"
                            }
                        ],
                        "facetAddresses": [
                            {
                                "visibility": "external",
                                "content": "function facetAddresses() external view returns (address[] memory facetAddresses_);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address[] memory",
                                        "name": "facetAddresses_"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "136205a2e525c238220cbc6b8100678f"
                            }
                        ],
                        "facetAddress": [
                            {
                                "visibility": "external",
                                "content": "function facetAddress(bytes4 _functionSelector) external view returns (address facetAddress_);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes4",
                                        "name": "_functionSelector"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": "facetAddress_"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "efdda7f2147409b3a9a413a5aa6f61bc"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {
                        "Facet": {
                            "content": "Facet{ address facetAddress; bytes4[] functionSelectors;}"
                        }
                    },
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": [
                        [
                            "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Facets\\DiamondLoupeFacet.sol",
                            "DiamondLoupeFacet"
                        ]
                    ]
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "d8abe13e2634606036208fbed6a9295b"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Interfaces\\IERC165.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Interfaces\\IERC165.sol",
            "filename": "IERC165.sol",
            "imported_contracts": {},
            "contracts": {
                "IERC165": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "supportsInterface": [
                            {
                                "visibility": "external",
                                "content": "function supportsInterface(bytes4 interfaceId) external view returns (bool);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes4",
                                        "name": "interfaceId"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "2dc76221abdfa883daba4e5034906f8b"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": [
                        [
                            "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Facets\\DiamondLoupeFacet.sol",
                            "DiamondLoupeFacet"
                        ]
                    ]
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "9023e04bf78f6d7c47a87a4e9dc55deb"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Facets\\DiamondLoupeFacet.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Facets\\DiamondLoupeFacet.sol",
            "filename": "DiamondLoupeFacet.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Libraries\\LibDiamond.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "LibDiamond": {
                            "original_name": "LibDiamond",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Interfaces\\IDiamondLoupe.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "IDiamondLoupe": {
                            "original_name": "IDiamondLoupe",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Interfaces\\IERC165.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "IERC165": {
                            "original_name": "IERC165",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                }
            },
            "contracts": {
                "DiamondLoupeFacet": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "IDiamondLoupe",
                        "IERC165"
                    ],
                    "state_variables": {},
                    "functions": {
                        "facets": [
                            {
                                "visibility": "external",
                                "content": "function facets() external view override returns (Facet[] memory facets_){ LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage(); uint256 numFacets = ds.facetAddresses.length; facets_ = new Facet[](numFacets); for (uint256 i; i < numFacets; i++){ address facetAddress_ = ds.facetAddresses[i]; facets_[i].facetAddress = facetAddress_; facets_[i].functionSelectors = ds.facetFunctionSelectors[facetAddress_].functionSelectors;}}",
                                "modifiers": [
                                    "view",
                                    "override"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "Facet[] memory",
                                        "name": "facets_"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LibDiamond.diamondStorage"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "2d564f48c17ba7346cbe5093d1ab4ded"
                            }
                        ],
                        "facetFunctionSelectors": [
                            {
                                "visibility": "external",
                                "content": "function facetFunctionSelectors(address _facet) external view override returns (bytes4[] memory facetFunctionSelectors_){ LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage(); facetFunctionSelectors_ = ds.facetFunctionSelectors[_facet].functionSelectors;}",
                                "modifiers": [
                                    "view",
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_facet"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes4[] memory",
                                        "name": "facetFunctionSelectors_"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LibDiamond.diamondStorage"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "ea5386e371e636099689f8bcd2e3576a"
                            }
                        ],
                        "facetAddresses": [
                            {
                                "visibility": "external",
                                "content": "function facetAddresses() external view override returns (address[] memory facetAddresses_){ LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage(); facetAddresses_ = ds.facetAddresses;}",
                                "modifiers": [
                                    "view",
                                    "override"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address[] memory",
                                        "name": "facetAddresses_"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LibDiamond.diamondStorage"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "a902a812126c0247e715040b07ab8169"
                            }
                        ],
                        "facetAddress": [
                            {
                                "visibility": "external",
                                "content": "function facetAddress(bytes4 _functionSelector) external view override returns (address facetAddress_){ LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage(); facetAddress_ = ds.selectorToFacetAndPosition[_functionSelector].facetAddress;}",
                                "modifiers": [
                                    "view",
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes4",
                                        "name": "_functionSelector"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": "facetAddress_"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LibDiamond.diamondStorage"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "0975d50ab0285091325d5eb8dcbb895c"
                            }
                        ],
                        "supportsInterface": [
                            {
                                "visibility": "external",
                                "content": "function supportsInterface(bytes4 _interfaceId) external view override returns (bool){ LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage(); return ds.supportedInterfaces[_interfaceId];}",
                                "modifiers": [
                                    "view",
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes4",
                                        "name": "_interfaceId"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LibDiamond.diamondStorage"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "2404091c600de5aac6cbf7ba48961691"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "LibDiamond.diamondStorage": "d6cb93514927312a8c64ce748e21614b"
            },
            "md5": "d4274aa69ed78b7738777c39f26016b6"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Facets\\GenericBridgeFacet.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Facets\\GenericBridgeFacet.sol",
            "filename": "GenericBridgeFacet.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Interfaces\\ILiFi.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "ILiFi": {
                            "original_name": "ILiFi",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Libraries\\LibAsset.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "LibAsset": {
                            "original_name": "LibAsset",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Libraries\\LibSwap.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "LibSwap": {
                            "original_name": "LibSwap",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Libraries\\LibUtil.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "LibUtil": {
                            "original_name": "LibUtil",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                }
            },
            "contracts": {
                "GenericBridgeFacet": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "ILiFi"
                    ],
                    "state_variables": {},
                    "functions": {
                        "startBridgeTokensGeneric": [
                            {
                                "visibility": "public",
                                "content": "function startBridgeTokensGeneric(LiFiData memory _lifiData, BridgeData memory _bridgeData) public payable{ LibAsset.transferFromERC20(_bridgeData.assetId, msg.sender, address(this), _bridgeData.amount); _startBridge(_bridgeData); emit LiFiTransferStarted( _lifiData.transactionId, _lifiData.integrator, _lifiData.referrer, _lifiData.sendingAssetId, _lifiData.receivingAssetId, _lifiData.receiver, _lifiData.amount, _lifiData.destinationChainId, block.timestamp );}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "LiFiData memory",
                                        "name": "_lifiData"
                                    },
                                    {
                                        "type": "BridgeData memory",
                                        "name": "_bridgeData"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "GenericBridgeFacet.LiFiTransferStarted",
                                        "GenericBridgeFacet._startBridge",
                                        "LibAsset.transferFromERC20"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "f9a1cb4ecf8e886f87effc1803df244e"
                            }
                        ],
                        "swapAndStartBridgeTokensGeneric": [
                            {
                                "visibility": "public",
                                "content": "function swapAndStartBridgeTokensGeneric( LiFiData memory _lifiData, LibSwap.SwapData[] calldata _swapData, BridgeData memory _bridgeData ) public payable{ uint256 _fromTokenBalance = LibAsset.getOwnBalance(_bridgeData.assetId); for (uint8 i; i < _swapData.length; i++){ LibSwap.swap(_lifiData.transactionId, _swapData[i]);} require( LibAsset.getOwnBalance(_bridgeData.assetId) - _fromTokenBalance >= _bridgeData.amount, \"ERR_INVALID_AMOUNT\" ); _startBridge(_bridgeData); emit LiFiTransferStarted( _lifiData.transactionId, _lifiData.integrator, _lifiData.referrer, _lifiData.sendingAssetId, _lifiData.receivingAssetId, _lifiData.receiver, _lifiData.amount, _lifiData.destinationChainId, block.timestamp );}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "LiFiData memory",
                                        "name": "_lifiData"
                                    },
                                    {
                                        "type": "LibSwap.SwapData[] calldata",
                                        "name": "_swapData"
                                    },
                                    {
                                        "type": "BridgeData memory",
                                        "name": "_bridgeData"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LibSwap.swap",
                                        "GenericBridgeFacet.LiFiTransferStarted",
                                        "LibAsset.getOwnBalance",
                                        "GenericBridgeFacet._startBridge"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "b237334df0900141a41018f55bb1cb64"
                            }
                        ],
                        "_startBridge": [
                            {
                                "visibility": "internal",
                                "content": "function _startBridge(BridgeData memory _bridgeData) internal{ LibAsset.approveERC20(IERC20(_bridgeData.assetId), _bridgeData.callTo, _bridgeData.amount); (bool success, bytes memory res) = _bridgeData.callTo.call{ value: msg.value} (_bridgeData.callData); if (!success){ string memory reason = LibUtil.getRevertMsg(res); revert(reason);}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "BridgeData memory",
                                        "name": "_bridgeData"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "GenericBridgeFacet.IERC20",
                                        "LibAsset.approveERC20",
                                        "LibUtil.getRevertMsg"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "0d674494701120c0d066d43f3b9c3b93"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {
                        "BridgeData": {
                            "content": "BridgeData{ uint256 amount; address assetId; address callTo; bytes callData;}"
                        }
                    },
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "LibAsset.transferFromERC20": "08521bb07828529814f66f2201239e41",
                "GenericBridgeFacet._startBridge": "0d674494701120c0d066d43f3b9c3b93",
                "LibAsset.getOwnBalance": "1b51ecb2290b6b3db4f241ddbeb65725",
                "LibSwap.swap": "2c844f003dcb094da775e9a03a5b8cb4",
                "LibAsset.approveERC20": "bc6c5c1293c164e7f62051f2ae31dc5d",
                "LibUtil.getRevertMsg": "f27160bf9d87a4774184fa440d174670"
            },
            "md5": "7d131eac9f9f3612e3b4991a46a2497f"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Interfaces\\IHopBridge.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Interfaces\\IHopBridge.sol",
            "filename": "IHopBridge.sol",
            "imported_contracts": {},
            "contracts": {
                "IHopBridge": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "sendToL2": [
                            {
                                "visibility": "external",
                                "content": "function sendToL2( uint256 chainId, address recipient, uint256 amount, uint256 amountOutMin, uint256 deadline, address relayer, uint256 relayerFee ) external payable;",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "chainId"
                                    },
                                    {
                                        "type": "address",
                                        "name": "recipient"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amountOutMin"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "deadline"
                                    },
                                    {
                                        "type": "address",
                                        "name": "relayer"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "relayerFee"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": true,
                                "md5": "7a584294e489ad9347e46e7bfcf4fc46"
                            }
                        ],
                        "swapAndSend": [
                            {
                                "visibility": "external",
                                "content": "function swapAndSend( uint256 chainId, address recipient, uint256 amount, uint256 bonderFee, uint256 amountOutMin, uint256 deadline, uint256 destinationAmountOutMin, uint256 destinationDeadline ) external payable;",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "chainId"
                                    },
                                    {
                                        "type": "address",
                                        "name": "recipient"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "bonderFee"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amountOutMin"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "deadline"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "destinationAmountOutMin"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "destinationDeadline"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": true,
                                "md5": "25d6f6b7e7df5922669bf059bac52a21"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {
                        "BridgeConfig": {
                            "content": "BridgeConfig{ address token; address bridge; address ammWrapper;}"
                        }
                    },
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "0cbb2fa36fc36ca7a0f0c2477e9599b6"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Facets\\HopFacet.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Facets\\HopFacet.sol",
            "filename": "HopFacet.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Interfaces\\ILiFi.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "ILiFi": {
                            "original_name": "ILiFi",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Interfaces\\IHopBridge.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "IHopBridge": {
                            "original_name": "IHopBridge",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Libraries\\LibAsset.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "LibAsset": {
                            "original_name": "LibAsset",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Libraries\\LibSwap.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "LibSwap": {
                            "original_name": "LibSwap",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Libraries\\LibDiamond.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "LibDiamond": {
                            "original_name": "LibDiamond",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                }
            },
            "contracts": {
                "HopFacet": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "ILiFi"
                    ],
                    "state_variables": {
                        "NAMESPACE": {
                            "type": "bytes32",
                            "visibility": "internal",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "keccak256(\"com.lifi.facets.hop\")",
                            "content": "bytes32 internal constant NAMESPACE = keccak256(\"com.lifi.facets.hop\");"
                        }
                    },
                    "functions": {
                        "initHop": [
                            {
                                "visibility": "external",
                                "content": "function initHop( string[] memory _tokens, IHopBridge.BridgeConfig[] memory _bridgeConfigs, uint256 _chainId ) external{ Storage storage s = getStorage(); LibDiamond.enforceIsContractOwner(); for (uint8 i; i < _tokens.length; i++){ s.hopBridges[_tokens[i]] = _bridgeConfigs[i];} s.hopChainId = _chainId;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "string[] memory",
                                        "name": "_tokens"
                                    },
                                    {
                                        "type": "IHopBridge.BridgeConfig[] memory",
                                        "name": "_bridgeConfigs"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_chainId"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LibDiamond.enforceIsContractOwner",
                                        "HopFacet.getStorage"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "80d4e392bf1928c03c93846469179d04"
                            }
                        ],
                        "startBridgeTokensViaHop": [
                            {
                                "visibility": "public",
                                "content": "function startBridgeTokensViaHop(LiFiData memory _lifiData, HopData calldata _hopData) public payable{ address sendingAssetId = _bridge(_hopData.asset).token; if (sendingAssetId == address(0)) require(msg.value == _hopData.amount, \"ERR_INVALID_AMOUNT\"); else{ uint256 _sendingAssetIdBalance = LibAsset.getOwnBalance(sendingAssetId); LibAsset.transferFromERC20(sendingAssetId, msg.sender, address(this), _hopData.amount); require( LibAsset.getOwnBalance(sendingAssetId) - _sendingAssetIdBalance == _hopData.amount, \"ERR_INVALID_AMOUNT\" );} _startBridge(_hopData); emit LiFiTransferStarted( _lifiData.transactionId, _lifiData.integrator, _lifiData.referrer, _lifiData.sendingAssetId, _lifiData.receivingAssetId, _lifiData.receiver, _lifiData.amount, _lifiData.destinationChainId, block.timestamp );}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "LiFiData memory",
                                        "name": "_lifiData"
                                    },
                                    {
                                        "type": "HopData calldata",
                                        "name": "_hopData"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LibAsset.transferFromERC20",
                                        "LibAsset.getOwnBalance",
                                        "HopFacet._bridge",
                                        "HopFacet.LiFiTransferStarted",
                                        "HopFacet._startBridge"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "149c83f5e84356b026d3206ef1de7a73"
                            }
                        ],
                        "swapAndStartBridgeTokensViaHop": [
                            {
                                "visibility": "public",
                                "content": "function swapAndStartBridgeTokensViaHop( LiFiData memory _lifiData, LibSwap.SwapData[] calldata _swapData, HopData memory _hopData ) public payable{ address sendingAssetId = _bridge(_hopData.asset).token; uint256 _sendingAssetIdBalance = LibAsset.getOwnBalance(sendingAssetId); for (uint8 i; i < _swapData.length; i++){ LibSwap.swap(_lifiData.transactionId, _swapData[i]);} uint256 _postSwapBalance = LibAsset.getOwnBalance(sendingAssetId) - _sendingAssetIdBalance; require(_postSwapBalance > 0, \"ERR_INVALID_AMOUNT\"); _hopData.amount = _postSwapBalance; _startBridge(_hopData); emit LiFiTransferStarted( _lifiData.transactionId, _lifiData.integrator, _lifiData.referrer, _lifiData.sendingAssetId, _lifiData.receivingAssetId, _lifiData.receiver, _lifiData.amount, _lifiData.destinationChainId, block.timestamp );}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "LiFiData memory",
                                        "name": "_lifiData"
                                    },
                                    {
                                        "type": "LibSwap.SwapData[] calldata",
                                        "name": "_swapData"
                                    },
                                    {
                                        "type": "HopData memory",
                                        "name": "_hopData"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LibAsset.getOwnBalance",
                                        "LibSwap.swap",
                                        "HopFacet._bridge",
                                        "HopFacet.LiFiTransferStarted",
                                        "HopFacet._startBridge"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "dfd61439206259aa66a25434fb392ca7"
                            }
                        ],
                        "_startBridge": [
                            {
                                "visibility": "internal",
                                "content": "function _startBridge(HopData memory _hopData) internal{ Storage storage s = getStorage(); address sendingAssetId = _bridge(_hopData.asset).token; address bridge; if (s.hopChainId == 1){ bridge = _bridge(_hopData.asset).bridge;} else{ bridge = _bridge(_hopData.asset).ammWrapper;} require(s.hopChainId != _hopData.chainId, \"Cannot bridge to the same network.\"); LibAsset.approveERC20(IERC20(sendingAssetId), bridge, _hopData.amount); uint256 value = LibAsset.isNativeAsset(address(sendingAssetId)) ? _hopData.amount : 0; if (s.hopChainId == 1){ IHopBridge(bridge).sendToL2{ value: value} ( _hopData.chainId, _hopData.recipient, _hopData.amount, _hopData.destinationAmountOutMin, _hopData.destinationDeadline, address(0), 0 );} else{ IHopBridge(bridge).swapAndSend{ value: value} ( _hopData.chainId, _hopData.recipient, _hopData.amount, _hopData.bonderFee, _hopData.amountOutMin, _hopData.deadline, _hopData.destinationAmountOutMin, _hopData.destinationDeadline );}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "HopData memory",
                                        "name": "_hopData"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "HopFacet.IHopBridge",
                                        "HopFacet.IERC20",
                                        "LibAsset.approveERC20",
                                        "HopFacet.getStorage",
                                        "HopFacet._bridge",
                                        "LibAsset.isNativeAsset"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "57c51ca24885a67c68acc4802a666908"
                            }
                        ],
                        "_bridge": [
                            {
                                "visibility": "internal",
                                "content": "function _bridge(string memory _asset) internal view returns (IHopBridge.BridgeConfig memory){ Storage storage s = getStorage(); return s.hopBridges[_asset];}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "string memory",
                                        "name": "_asset"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "IHopBridge.BridgeConfig memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "HopFacet.getStorage"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "d5a2cfffb401e5d60a680b5e91d128cd"
                            }
                        ],
                        "getStorage": [
                            {
                                "visibility": "internal",
                                "content": "function getStorage() internal pure returns (Storage storage s){ bytes32 namespace = NAMESPACE; assembly{ s.slot := namespace}}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "Storage storage",
                                        "name": "s"
                                    }
                                ],
                                "reads": [
                                    [
                                        "NAMESPACE",
                                        "",
                                        "HopFacet"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c61f9e5858f5e9519a6b8a2a23d918ed"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {
                        "Storage": {
                            "content": "Storage{ mapping(string => IHopBridge.BridgeConfig) hopBridges; uint256 hopChainId;}"
                        },
                        "HopData": {
                            "content": "HopData{ string asset; address recipient; uint256 chainId; uint256 amount; uint256 bonderFee; uint256 amountOutMin; uint256 deadline; uint256 destinationAmountOutMin; uint256 destinationDeadline;}"
                        }
                    },
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "HopFacet.getStorage": "c61f9e5858f5e9519a6b8a2a23d918ed",
                "LibDiamond.enforceIsContractOwner": "0d2df620297acdeacfe8c016df7e31eb",
                "LibAsset.transferFromERC20": "08521bb07828529814f66f2201239e41",
                "HopFacet._bridge": "d5a2cfffb401e5d60a680b5e91d128cd",
                "HopFacet._startBridge": "57c51ca24885a67c68acc4802a666908",
                "LibAsset.getOwnBalance": "1b51ecb2290b6b3db4f241ddbeb65725",
                "LibSwap.swap": "2c844f003dcb094da775e9a03a5b8cb4",
                "LibAsset.isNativeAsset": "90f6c601dde5476497b7b77972e5160e",
                "LibAsset.approveERC20": "bc6c5c1293c164e7f62051f2ae31dc5d"
            },
            "md5": "523814c241a7e77f3f53857d2e14cc13"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Interfaces\\ITransactionManager.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Interfaces\\ITransactionManager.sol",
            "filename": "ITransactionManager.sol",
            "imported_contracts": {},
            "contracts": {
                "ITransactionManager": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "getChainId": [
                            {
                                "visibility": "external",
                                "content": "function getChainId() external view returns (uint256);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "df4b2018666604de7e377420a4d17c65"
                            }
                        ],
                        "getStoredChainId": [
                            {
                                "visibility": "external",
                                "content": "function getStoredChainId() external view returns (uint256);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "551c9f9a7bbfa6bf80c6fbae63a6afa2"
                            }
                        ],
                        "addRouter": [
                            {
                                "visibility": "external",
                                "content": "function addRouter(address router) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "router"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "e4fb5696e092093ee89eb5e07811f08d"
                            }
                        ],
                        "removeRouter": [
                            {
                                "visibility": "external",
                                "content": "function removeRouter(address router) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "router"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "d84f85688526388ccdb63f783c2498fd"
                            }
                        ],
                        "addAssetId": [
                            {
                                "visibility": "external",
                                "content": "function addAssetId(address assetId) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "assetId"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "fa47a2da96cc54432159f6dc72e2f1a9"
                            }
                        ],
                        "removeAssetId": [
                            {
                                "visibility": "external",
                                "content": "function removeAssetId(address assetId) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "assetId"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "bb4d71b1717412d2745f20f766e70e36"
                            }
                        ],
                        "addLiquidityFor": [
                            {
                                "visibility": "external",
                                "content": "function addLiquidityFor( uint256 amount, address assetId, address router ) external payable;",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "address",
                                        "name": "assetId"
                                    },
                                    {
                                        "type": "address",
                                        "name": "router"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": true,
                                "md5": "d843d33feccb3db0a21b7f94d1155b9b"
                            }
                        ],
                        "addLiquidity": [
                            {
                                "visibility": "external",
                                "content": "function addLiquidity(uint256 amount, address assetId) external payable;",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "address",
                                        "name": "assetId"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": true,
                                "md5": "04d822ecebb746acfe9f036c7c9060bb"
                            }
                        ],
                        "removeLiquidity": [
                            {
                                "visibility": "external",
                                "content": "function removeLiquidity( uint256 amount, address assetId, address payable recipient ) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "address",
                                        "name": "assetId"
                                    },
                                    {
                                        "type": "address payable",
                                        "name": "recipient"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "723966d6cce279d92a7df479cd171a89"
                            }
                        ],
                        "prepare": [
                            {
                                "visibility": "external",
                                "content": "function prepare(PrepareArgs calldata args) external payable returns (TransactionData memory);",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "PrepareArgs calldata",
                                        "name": "args"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "TransactionData memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": true,
                                "md5": "c482faf423daf9ec32bb5843ffb0f471"
                            }
                        ],
                        "fulfill": [
                            {
                                "visibility": "external",
                                "content": "function fulfill(FulfillArgs calldata args) external returns (TransactionData memory);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "FulfillArgs calldata",
                                        "name": "args"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "TransactionData memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "20f4daa71e9a62fdf8248ca8c47d5238"
                            }
                        ],
                        "cancel": [
                            {
                                "visibility": "external",
                                "content": "function cancel(CancelArgs calldata args) external returns (TransactionData memory);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "CancelArgs calldata",
                                        "name": "args"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "TransactionData memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "348200922a2fc6ca5f1a136b24bbfa1e"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {
                        "InvariantTransactionData": {
                            "content": "InvariantTransactionData{ address receivingChainTxManagerAddress; address user; address router; address initiator; address sendingAssetId; address receivingAssetId; address sendingChainFallback; address receivingAddress; address callTo; uint256 sendingChainId; uint256 receivingChainId; bytes32 callDataHash; bytes32 transactionId;}"
                        },
                        "VariantTransactionData": {
                            "content": "VariantTransactionData{ uint256 amount; uint256 expiry; uint256 preparedBlockNumber;}"
                        },
                        "TransactionData": {
                            "content": "TransactionData{ address receivingChainTxManagerAddress; address user; address router; address initiator; address sendingAssetId; address receivingAssetId; address sendingChainFallback; address receivingAddress; address callTo; bytes32 callDataHash; bytes32 transactionId; uint256 sendingChainId; uint256 receivingChainId; uint256 amount; uint256 expiry; uint256 preparedBlockNumber;}"
                        },
                        "SignedFulfillData": {
                            "content": "SignedFulfillData{ bytes32 transactionId; uint256 relayerFee; string functionIdentifier; uint256 receivingChainId; address receivingChainTxManagerAddress;}"
                        },
                        "SignedCancelData": {
                            "content": "SignedCancelData{ bytes32 transactionId; string functionIdentifier; uint256 receivingChainId; address receivingChainTxManagerAddress;}"
                        },
                        "PrepareArgs": {
                            "content": "PrepareArgs{ InvariantTransactionData invariantData; uint256 amount; uint256 expiry; bytes encryptedCallData; bytes encodedBid; bytes bidSignature; bytes encodedMeta;}"
                        },
                        "FulfillArgs": {
                            "content": "FulfillArgs{ TransactionData txData; uint256 relayerFee; bytes signature; bytes callData; bytes encodedMeta;}"
                        },
                        "CancelArgs": {
                            "content": "CancelArgs{ TransactionData txData; bytes signature; bytes encodedMeta;}"
                        }
                    },
                    "events": {
                        "RouterAdded": {
                            "event": "RouterAdded",
                            "content": "RouterAdded(address indexed addedRouter, address indexed caller)"
                        },
                        "RouterRemoved": {
                            "event": "RouterRemoved",
                            "content": "RouterRemoved(address indexed removedRouter, address indexed caller)"
                        },
                        "AssetAdded": {
                            "event": "AssetAdded",
                            "content": "AssetAdded(address indexed addedAssetId, address indexed caller)"
                        },
                        "AssetRemoved": {
                            "event": "AssetRemoved",
                            "content": "AssetRemoved(address indexed removedAssetId, address indexed caller)"
                        },
                        "LiquidityAdded": {
                            "event": "LiquidityAdded",
                            "content": "LiquidityAdded(address indexed router, address indexed assetId, uint256 amount, address caller)"
                        },
                        "LiquidityRemoved": {
                            "event": "LiquidityRemoved",
                            "content": "LiquidityRemoved(address indexed router, address indexed assetId, uint256 amount, address recipient)"
                        },
                        "TransactionPrepared": {
                            "event": "TransactionPrepared",
                            "content": "TransactionPrepared( address indexed user, address indexed router, bytes32 indexed transactionId, TransactionData txData, address caller, PrepareArgs args )"
                        },
                        "TransactionFulfilled": {
                            "event": "TransactionFulfilled",
                            "content": "TransactionFulfilled( address indexed user, address indexed router, bytes32 indexed transactionId, FulfillArgs args, bool success, bool isContract, bytes returnData, address caller )"
                        },
                        "TransactionCancelled": {
                            "event": "TransactionCancelled",
                            "content": "TransactionCancelled( address indexed user, address indexed router, bytes32 indexed transactionId, CancelArgs args, address caller )"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "b533647584a2a22c04a3aaad6b1f1dde"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Facets\\NXTPFacet.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Facets\\NXTPFacet.sol",
            "filename": "NXTPFacet.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Interfaces\\ITransactionManager.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "ITransactionManager": {
                            "original_name": "ITransactionManager",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Interfaces\\ILiFi.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "ILiFi": {
                            "original_name": "ILiFi",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Libraries\\LibAsset.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "LibAsset": {
                            "original_name": "LibAsset",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Libraries\\LibSwap.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "LibSwap": {
                            "original_name": "LibSwap",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Libraries\\LibDiamond.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "LibDiamond": {
                            "original_name": "LibDiamond",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                }
            },
            "contracts": {
                "NXTPFacet": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "ILiFi"
                    ],
                    "state_variables": {
                        "NAMESPACE": {
                            "type": "bytes32",
                            "visibility": "internal",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "keccak256(\"com.lifi.facets.nxtp\")",
                            "content": "bytes32 internal constant NAMESPACE = keccak256(\"com.lifi.facets.nxtp\");"
                        }
                    },
                    "functions": {
                        "initNXTP": [
                            {
                                "visibility": "external",
                                "content": "function initNXTP(ITransactionManager _txMgrAddr) external{ Storage storage s = getStorage(); LibDiamond.enforceIsContractOwner(); s.nxtpTxManager = _txMgrAddr;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "ITransactionManager",
                                        "name": "_txMgrAddr"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LibDiamond.enforceIsContractOwner",
                                        "NXTPFacet.getStorage"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "71b768a71c4851f82b1b758ca1dacfe3"
                            }
                        ],
                        "startBridgeTokensViaNXTP": [
                            {
                                "visibility": "public",
                                "content": "function startBridgeTokensViaNXTP(LiFiData memory _lifiData, ITransactionManager.PrepareArgs memory _nxtpData) public payable{ address sendingAssetId = _nxtpData.invariantData.sendingAssetId; if (sendingAssetId == address(0)) require(msg.value == _nxtpData.amount, \"ERR_INVALID_AMOUNT\"); else{ uint256 _sendingAssetIdBalance = LibAsset.getOwnBalance(sendingAssetId); LibAsset.transferFromERC20(sendingAssetId, msg.sender, address(this), _nxtpData.amount); require( LibAsset.getOwnBalance(sendingAssetId) - _sendingAssetIdBalance == _nxtpData.amount, \"ERR_INVALID_AMOUNT\" );} _startBridge(_lifiData.transactionId, _nxtpData); emit LiFiTransferStarted( _lifiData.transactionId, _lifiData.integrator, _lifiData.referrer, _lifiData.sendingAssetId, _lifiData.receivingAssetId, _lifiData.receiver, _lifiData.amount, _lifiData.destinationChainId, block.timestamp );}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "LiFiData memory",
                                        "name": "_lifiData"
                                    },
                                    {
                                        "type": "ITransactionManager.PrepareArgs memory",
                                        "name": "_nxtpData"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "NXTPFacet._startBridge",
                                        "NXTPFacet.LiFiTransferStarted",
                                        "LibAsset.getOwnBalance",
                                        "LibAsset.transferFromERC20"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "45fe44755eb2bbb97677161eb2605a05"
                            }
                        ],
                        "swapAndStartBridgeTokensViaNXTP": [
                            {
                                "visibility": "public",
                                "content": "function swapAndStartBridgeTokensViaNXTP( LiFiData memory _lifiData, LibSwap.SwapData[] calldata _swapData, ITransactionManager.PrepareArgs memory _nxtpData ) public payable{ address sendingAssetId = _nxtpData.invariantData.sendingAssetId; uint256 _sendingAssetIdBalance = LibAsset.getOwnBalance(sendingAssetId); for (uint8 i; i < _swapData.length; i++){ LibSwap.swap(_lifiData.transactionId, _swapData[i]);} uint256 _postSwapBalance = LibAsset.getOwnBalance(sendingAssetId) - _sendingAssetIdBalance; require(_postSwapBalance > 0, \"ERR_INVALID_AMOUNT\"); _nxtpData.amount = _postSwapBalance; _startBridge(_lifiData.transactionId, _nxtpData); emit LiFiTransferStarted( _lifiData.transactionId, _lifiData.integrator, _lifiData.referrer, _lifiData.sendingAssetId, _lifiData.receivingAssetId, _lifiData.receiver, _lifiData.amount, _lifiData.destinationChainId, block.timestamp );}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "LiFiData memory",
                                        "name": "_lifiData"
                                    },
                                    {
                                        "type": "LibSwap.SwapData[] calldata",
                                        "name": "_swapData"
                                    },
                                    {
                                        "type": "ITransactionManager.PrepareArgs memory",
                                        "name": "_nxtpData"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LibSwap.swap",
                                        "NXTPFacet.LiFiTransferStarted",
                                        "LibAsset.getOwnBalance",
                                        "NXTPFacet._startBridge"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "dca9689f768cea79a60e3c947c8b7fc6"
                            }
                        ],
                        "completeBridgeTokensViaNXTP": [
                            {
                                "visibility": "public",
                                "content": "function completeBridgeTokensViaNXTP( LiFiData memory _lifiData, address assetId, address receiver, uint256 amount ) public payable{ if (LibAsset.isNativeAsset(assetId)){ require(msg.value == amount, \"INVALID_ETH_AMOUNT\");} else{ require(msg.value == 0, \"ETH_WITH_ERC\"); LibAsset.transferFromERC20(assetId, msg.sender, address(this), amount);} LibAsset.transferAsset(assetId, payable(receiver), amount); emit LiFiTransferCompleted(_lifiData.transactionId, assetId, receiver, amount, block.timestamp);}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "LiFiData memory",
                                        "name": "_lifiData"
                                    },
                                    {
                                        "type": "address",
                                        "name": "assetId"
                                    },
                                    {
                                        "type": "address",
                                        "name": "receiver"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "NXTPFacet.LiFiTransferCompleted",
                                        "LibAsset.isNativeAsset",
                                        "LibAsset.transferAsset",
                                        "LibAsset.transferFromERC20"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "f907b1378b0defc4c058762e6202dd8d"
                            }
                        ],
                        "swapAndCompleteBridgeTokensViaNXTP": [
                            {
                                "visibility": "public",
                                "content": "function swapAndCompleteBridgeTokensViaNXTP( LiFiData memory _lifiData, LibSwap.SwapData[] calldata _swapData, address finalAssetId, address receiver ) public payable{ uint256 startingBalance = LibAsset.getOwnBalance(finalAssetId); for (uint8 i; i < _swapData.length; i++){ LibSwap.swap(_lifiData.transactionId, _swapData[i]);} uint256 postSwapBalance = LibAsset.getOwnBalance(finalAssetId); uint256 finalBalance; if (postSwapBalance > startingBalance){ finalBalance = postSwapBalance - startingBalance; LibAsset.transferAsset(finalAssetId, payable(receiver), finalBalance);} emit LiFiTransferCompleted(_lifiData.transactionId, finalAssetId, receiver, finalBalance, block.timestamp);}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "LiFiData memory",
                                        "name": "_lifiData"
                                    },
                                    {
                                        "type": "LibSwap.SwapData[] calldata",
                                        "name": "_swapData"
                                    },
                                    {
                                        "type": "address",
                                        "name": "finalAssetId"
                                    },
                                    {
                                        "type": "address",
                                        "name": "receiver"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LibSwap.swap",
                                        "LibAsset.getOwnBalance",
                                        "LibAsset.transferAsset",
                                        "NXTPFacet.LiFiTransferCompleted"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "fadc6dcd8b856a881ff54bb76d202704"
                            }
                        ],
                        "_startBridge": [
                            {
                                "visibility": "internal",
                                "content": "function _startBridge(bytes32 _transactionId, ITransactionManager.PrepareArgs memory _nxtpData) internal{ Storage storage s = getStorage(); IERC20 sendingAssetId = IERC20(_nxtpData.invariantData.sendingAssetId); LibAsset.approveERC20(IERC20(sendingAssetId), address(s.nxtpTxManager), _nxtpData.amount); uint256 value = LibAsset.isNativeAsset(address(sendingAssetId)) ? _nxtpData.amount : 0; ITransactionManager.TransactionData memory result = s.nxtpTxManager.prepare{ value: value} (_nxtpData); emit NXTPBridgeStarted(_transactionId, result.transactionId, result);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "_transactionId"
                                    },
                                    {
                                        "type": "ITransactionManager.PrepareArgs memory",
                                        "name": "_nxtpData"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "NXTPFacet.IERC20",
                                        "LibAsset.approveERC20",
                                        "LibAsset.isNativeAsset",
                                        "NXTPFacet.getStorage"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "56730a5b09c7cad32f9cdefbbf5c43ce"
                            }
                        ],
                        "getStorage": [
                            {
                                "visibility": "internal",
                                "content": "function getStorage() internal pure returns (Storage storage s){ bytes32 namespace = NAMESPACE; assembly{ s.slot := namespace}}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "Storage storage",
                                        "name": "s"
                                    }
                                ],
                                "reads": [
                                    [
                                        "NAMESPACE",
                                        "",
                                        "NXTPFacet"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c61f9e5858f5e9519a6b8a2a23d918ed"
                            }
                        ],
                        "getNXTPTransactionManager": [
                            {
                                "visibility": "external",
                                "content": "function getNXTPTransactionManager() external view returns (address){ Storage storage s = getStorage(); return address(s.nxtpTxManager);}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "NXTPFacet.getStorage"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "92a83960cb27b2cbfd2bcae3db3de7b9"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {
                        "Storage": {
                            "content": "Storage{ ITransactionManager nxtpTxManager;}"
                        }
                    },
                    "events": {
                        "NXTPBridgeStarted": {
                            "event": "NXTPBridgeStarted",
                            "content": "NXTPBridgeStarted( bytes32 indexed lifiTransactionId, bytes32 nxtpTransactionId, ITransactionManager.TransactionData txData )"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "LibDiamond.enforceIsContractOwner": "0d2df620297acdeacfe8c016df7e31eb",
                "NXTPFacet.getStorage": "c61f9e5858f5e9519a6b8a2a23d918ed",
                "LibAsset.transferFromERC20": "08521bb07828529814f66f2201239e41",
                "NXTPFacet._startBridge": "56730a5b09c7cad32f9cdefbbf5c43ce",
                "LibAsset.getOwnBalance": "1b51ecb2290b6b3db4f241ddbeb65725",
                "LibSwap.swap": "2c844f003dcb094da775e9a03a5b8cb4",
                "LibAsset.transferAsset": "23099f43e12b67b01f34f2ffda244552",
                "LibAsset.isNativeAsset": "90f6c601dde5476497b7b77972e5160e",
                "LibAsset.approveERC20": "bc6c5c1293c164e7f62051f2ae31dc5d"
            },
            "md5": "d8ee7def0199d3b4fccbd91bb99fbfac"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Facets\\OpticsRouterFacet.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Facets\\OpticsRouterFacet.sol",
            "filename": "OpticsRouterFacet.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Libraries\\LibBytes.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Libraries\\LibUtil.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Libraries\\LibDiamond.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "Home": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "dispatch": [
                            {
                                "visibility": "external",
                                "content": "function dispatch( uint32 _destinationDomain, bytes32 _recipientAddress, bytes memory _messageBody ) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint32",
                                        "name": "_destinationDomain"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "_recipientAddress"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "_messageBody"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "35d859e9ab4b99b36d00d1c482ea44f1"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                },
                "OpticsRouterFacet": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {
                        "NAMESPACE": {
                            "type": "bytes32",
                            "visibility": "internal",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "keccak256(\"com.lifi.facets.optics.router\")",
                            "content": "bytes32 internal constant NAMESPACE = keccak256(\"com.lifi.facets.optics.router\");"
                        }
                    },
                    "functions": {
                        "remoteCall": [
                            {
                                "visibility": "external",
                                "content": "function remoteCall( uint32 domain, address callee, bytes calldata callData ) external{ Storage storage s = getStorage(); if (s.routers[domain] == bytes32(0)) revert NoRemoteRouter(); s.routes[domain].dispatch(domain, s.routers[domain], abi.encodePacked(callee, callData)); emit RemoteCall(domain, callee, address(s.routes[domain]));}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint32",
                                        "name": "domain"
                                    },
                                    {
                                        "type": "address",
                                        "name": "callee"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "callData"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "OpticsRouterFacet.getStorage",
                                        "OpticsRouterFacet.NoRemoteRouter"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "cd4635581517719cebcc3632b282c695"
                            }
                        ],
                        "handle": [
                            {
                                "visibility": "public",
                                "content": "function handle( uint32 origin, bytes32 sender, bytes memory message ) public{ Storage storage s = getStorage(); if (s.routers[origin] != sender) revert Unauthorized(); address callee = message.toAddress(0); bytes memory callData = message.slice(20, message.length - 20); if (callee == address(this)) revert Unauthorized(); (bool success, bytes memory res) = callee.call(callData); if (!success){ string memory reason = LibUtil.getRevertMsg(res); revert CallError(reason);} emit LocalCall(origin, callee, address(uint160(uint256(sender))));}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint32",
                                        "name": "origin"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "sender"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "message"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "message.slice",
                                        "OpticsRouterFacet.handle",
                                        "message.toAddress",
                                        "OpticsRouterFacet.getStorage",
                                        "LibUtil.getRevertMsg",
                                        "callee.call",
                                        "OpticsRouterFacet.Unauthorized",
                                        "OpticsRouterFacet.CallError"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "7a32d1177ee8b0d36e23faf5fec73cc4"
                            },
                            {
                                "visibility": "external",
                                "content": "function handle( uint32 origin, uint32, bytes32 sender, bytes memory message ) external{ handle(origin, sender, message);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint32",
                                        "name": "origin"
                                    },
                                    {
                                        "type": "uint32",
                                        "name": null
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "sender"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "message"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "message.slice",
                                        "OpticsRouterFacet.handle",
                                        "message.toAddress",
                                        "OpticsRouterFacet.getStorage",
                                        "LibUtil.getRevertMsg",
                                        "callee.call",
                                        "OpticsRouterFacet.Unauthorized",
                                        "OpticsRouterFacet.CallError"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "fb3db9091459995126832665f9c65cb8"
                            }
                        ],
                        "enrollRemoteRouter": [
                            {
                                "visibility": "external",
                                "content": "function enrollRemoteRouter(uint32 domain, address router) external{ LibDiamond.enforceIsContractOwner(); Storage storage s = getStorage(); s.routers[domain] = bytes32(uint256(uint160(router)));}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint32",
                                        "name": "domain"
                                    },
                                    {
                                        "type": "address",
                                        "name": "router"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LibDiamond.enforceIsContractOwner",
                                        "OpticsRouterFacet.getStorage"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "565ed776fe54ca1bf0d440a24aaa7036"
                            }
                        ],
                        "batchEnrollRemoteRouters": [
                            {
                                "visibility": "external",
                                "content": "function batchEnrollRemoteRouters(uint32[] calldata domains, address[] calldata routers) external{ LibDiamond.enforceIsContractOwner(); Storage storage s = getStorage(); for (uint8 i = 0; i < domains.length; i++){ s.routers[domains[i]] = bytes32(uint256(uint160(routers[i])));}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint32[] calldata",
                                        "name": "domains"
                                    },
                                    {
                                        "type": "address[] calldata",
                                        "name": "routers"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LibDiamond.enforceIsContractOwner",
                                        "OpticsRouterFacet.getStorage"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "3b764eff47b9a58b873accf847c4b15d"
                            }
                        ],
                        "setRoute": [
                            {
                                "visibility": "external",
                                "content": "function setRoute(uint32 domain, Home home) external{ LibDiamond.enforceIsContractOwner(); Storage storage s = getStorage(); s.routes[domain] = home;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint32",
                                        "name": "domain"
                                    },
                                    {
                                        "type": "Home",
                                        "name": "home"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LibDiamond.enforceIsContractOwner",
                                        "OpticsRouterFacet.getStorage"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "e61307fce4a8eba1aa8c4b9f3cea1947"
                            }
                        ],
                        "batchSetRoutes": [
                            {
                                "visibility": "external",
                                "content": "function batchSetRoutes(uint32[] calldata domains, Home[] calldata homes) external{ LibDiamond.enforceIsContractOwner(); Storage storage s = getStorage(); for (uint8 i = 0; i < domains.length; i++){ s.routes[domains[i]] = homes[i];}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint32[] calldata",
                                        "name": "domains"
                                    },
                                    {
                                        "type": "Home[] calldata",
                                        "name": "homes"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LibDiamond.enforceIsContractOwner",
                                        "OpticsRouterFacet.getStorage"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "f92e96bb241871e168ef9c452c5ba39a"
                            }
                        ],
                        "routeByDomain": [
                            {
                                "visibility": "external",
                                "content": "function routeByDomain(uint32 domain) external view returns (address){ return address(getStorage().routes[domain]);}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint32",
                                        "name": "domain"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "OpticsRouterFacet.getStorage"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "91801a53beb1df9b3cdd0b5b2bd140a3"
                            }
                        ],
                        "routerByDomain": [
                            {
                                "visibility": "external",
                                "content": "function routerByDomain(uint32 domain) external view returns (address){ return address(uint160(uint256(getStorage().routers[domain])));}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint32",
                                        "name": "domain"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "OpticsRouterFacet.getStorage"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "7430750e65977f0372aadc2e622e707d"
                            }
                        ],
                        "getStorage": [
                            {
                                "visibility": "internal",
                                "content": "function getStorage() internal pure returns (Storage storage s){ bytes32 namespace = NAMESPACE; assembly{ s.slot := namespace}}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "Storage storage",
                                        "name": "s"
                                    }
                                ],
                                "reads": [
                                    [
                                        "NAMESPACE",
                                        "",
                                        "OpticsRouterFacet"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c61f9e5858f5e9519a6b8a2a23d918ed"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {
                        "Storage": {
                            "content": "Storage{ mapping(uint32 => Home) routes; mapping(uint32 => bytes32) routers;}"
                        }
                    },
                    "events": {
                        "RemoteCall": {
                            "event": "RemoteCall",
                            "content": "RemoteCall(uint32 domain, address indexed callee, address sender)"
                        },
                        "LocalCall": {
                            "event": "LocalCall",
                            "content": "LocalCall(uint32 origin, address indexed callee, address home)"
                        }
                    },
                    "enums": {},
                    "errors": {
                        "Unauthorized": {
                            "content": "Unauthorized()"
                        },
                        "NoRemoteRouter": {
                            "content": "NoRemoteRouter()"
                        },
                        "CallError": {
                            "content": "CallError(string reason)"
                        }
                    },
                    "custom_types": {},
                    "using_directives": {
                        "bytes": "LibBytes"
                    }
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "OpticsRouterFacet.getStorage": "c61f9e5858f5e9519a6b8a2a23d918ed",
                "LibUtil.getRevertMsg": "f27160bf9d87a4774184fa440d174670",
                "message.slice": "c3b49d0d1a0510c385cda2235a4a85dd",
                "OpticsRouterFacet.handle": "7a32d1177ee8b0d36e23faf5fec73cc4",
                "message.toAddress": "b10d20518ecb91c82b3bff1d0fd5b822",
                "LibDiamond.enforceIsContractOwner": "0d2df620297acdeacfe8c016df7e31eb"
            },
            "md5": "3b6f24acabefc14426ea000917edd16c"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Interfaces\\IERC173.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Interfaces\\IERC173.sol",
            "filename": "IERC173.sol",
            "imported_contracts": {},
            "contracts": {
                "IERC173": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "owner": [
                            {
                                "visibility": "external",
                                "content": "function owner() external view returns (address owner_);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": "owner_"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "207ac2bb9805369f5378d06773d1f68d"
                            }
                        ],
                        "transferOwnership": [
                            {
                                "visibility": "external",
                                "content": "function transferOwnership(address _newOwner) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_newOwner"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c0f2202fa43f1eb4f843d784d7d103ed"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {
                        "OwnershipTransferred": {
                            "event": "OwnershipTransferred",
                            "content": "OwnershipTransferred(address indexed previousOwner, address indexed newOwner)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": [
                        [
                            "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Facets\\OwnershipFacet.sol",
                            "OwnershipFacet"
                        ]
                    ]
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "705ccd4722273fc6916dd32a91960089"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Facets\\OwnershipFacet.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Facets\\OwnershipFacet.sol",
            "filename": "OwnershipFacet.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Libraries\\LibDiamond.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "LibDiamond": {
                            "original_name": "LibDiamond",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Interfaces\\IERC173.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "IERC173": {
                            "original_name": "IERC173",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                }
            },
            "contracts": {
                "OwnershipFacet": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "IERC173"
                    ],
                    "state_variables": {},
                    "functions": {
                        "transferOwnership": [
                            {
                                "visibility": "external",
                                "content": "function transferOwnership(address _newOwner) external override{ LibDiamond.enforceIsContractOwner(); LibDiamond.setContractOwner(_newOwner);}",
                                "modifiers": [
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_newOwner"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LibDiamond.enforceIsContractOwner",
                                        "LibDiamond.setContractOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "5f27e6f1a1a075ed3251bb1398cf4fe1"
                            }
                        ],
                        "owner": [
                            {
                                "visibility": "external",
                                "content": "function owner() external view override returns (address owner_){ owner_ = LibDiamond.contractOwner();}",
                                "modifiers": [
                                    "view",
                                    "override"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": "owner_"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LibDiamond.contractOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "019476b67ebed2cd85197191f84a4a81"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "LibDiamond.setContractOwner": "7953a7ecd16d8ae3d75f1103d44413a9",
                "LibDiamond.enforceIsContractOwner": "0d2df620297acdeacfe8c016df7e31eb",
                "LibDiamond.contractOwner": "cf70862c1c7f4a17336b86c676a7c230"
            },
            "md5": "e369864eb138eff0ec74b9e9242160a0"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Facets\\WithdrawFacet.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Facets\\WithdrawFacet.sol",
            "filename": "WithdrawFacet.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "IERC20": {
                            "original_name": "IERC20",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\@openzeppelin\\contracts\\token\\ERC20\\utils\\SafeERC20.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "SafeERC20": {
                            "original_name": "SafeERC20",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Libraries\\LibDiamond.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "LibDiamond": {
                            "original_name": "LibDiamond",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                }
            },
            "contracts": {
                "WithdrawFacet": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {
                        "NATIVE_ASSET": {
                            "type": "address",
                            "visibility": "private",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "address(0)",
                            "content": "address private constant NATIVE_ASSET = address(0);"
                        }
                    },
                    "functions": {
                        "withdraw": [
                            {
                                "visibility": "public",
                                "content": "function withdraw( address _assetAddress, address _to, uint256 _amount ) public{ LibDiamond.enforceIsContractOwner(); address sendTo = (_to == address(0)) ? msg.sender : _to; uint256 assetBalance; if (_assetAddress == NATIVE_ASSET){ address self = address(this); assert(_amount <= self.balance); payable(sendTo).transfer(_amount);} else{ assetBalance = IERC20(_assetAddress).balanceOf(address(this)); assert(_amount <= assetBalance); IERC20(_assetAddress).safeTransfer(sendTo, _amount);} emit LogWithdraw(sendTo, _assetAddress, _amount);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_assetAddress"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "NATIVE_ASSET",
                                        "",
                                        "WithdrawFacet"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LibDiamond.enforceIsContractOwner",
                                        "WithdrawFacet.IERC20"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "e0dd3e747e0bb8fc4a5c74e5d42843db"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {
                        "LogWithdraw": {
                            "event": "LogWithdraw",
                            "content": "LogWithdraw(address indexed _assetAddress, address _from, uint256 amount)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "IERC20": "SafeERC20"
                    }
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "LibDiamond.enforceIsContractOwner": "0d2df620297acdeacfe8c016df7e31eb"
            },
            "md5": "37eba376564f27b2d64d628c5baec945"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Interfaces\\IWormholeRouter.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Interfaces\\IWormholeRouter.sol",
            "filename": "IWormholeRouter.sol",
            "imported_contracts": {},
            "contracts": {
                "IWormholeRouter": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "transferTokens": [
                            {
                                "visibility": "external",
                                "content": "function transferTokens( address token, uint256 amount, uint16 recipientChain, bytes32 recipient, uint256 arbiterFee, uint32 nonce ) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "uint16",
                                        "name": "recipientChain"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "recipient"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "arbiterFee"
                                    },
                                    {
                                        "type": "uint32",
                                        "name": "nonce"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "99c0eb7fadf42daa0b068a5bd5ab2eb4"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "6542ce4712d1842c206988c3a2d996e0"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Facets\\WormholeFacet.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Facets\\WormholeFacet.sol",
            "filename": "WormholeFacet.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Interfaces\\ILiFi.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "ILiFi": {
                            "original_name": "ILiFi",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Interfaces\\IWormholeRouter.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "IWormholeRouter": {
                            "original_name": "IWormholeRouter",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Libraries\\LibDiamond.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "LibDiamond": {
                            "original_name": "LibDiamond",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Libraries\\LibAsset.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "LibAsset": {
                            "original_name": "LibAsset",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Libraries\\LibSwap.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "LibSwap": {
                            "original_name": "LibSwap",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                }
            },
            "contracts": {
                "WormholeFacet": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "ILiFi"
                    ],
                    "state_variables": {
                        "NAMESPACE": {
                            "type": "bytes32",
                            "visibility": "internal",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "keccak256(\"com.lifi.facets.wormhole\")",
                            "content": "bytes32 internal constant NAMESPACE = keccak256(\"com.lifi.facets.wormhole\");"
                        }
                    },
                    "functions": {
                        "initWormhole": [
                            {
                                "visibility": "external",
                                "content": "function initWormhole(address _wormholeRouter) external{ Storage storage s = getStorage(); LibDiamond.enforceIsContractOwner(); s.wormholeRouter = _wormholeRouter;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_wormholeRouter"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LibDiamond.enforceIsContractOwner",
                                        "WormholeFacet.getStorage"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "ff09823f7ed879281f80ba7baa0bd784"
                            }
                        ],
                        "startBridgeTokensViaWormhole": [
                            {
                                "visibility": "public",
                                "content": "function startBridgeTokensViaWormhole(LiFiData memory _lifiData, WormholeData calldata _wormholeData) public payable{ uint256 _fromTokenBalance = LibAsset.getOwnBalance(_wormholeData.token); LibAsset.transferFromERC20(_wormholeData.token, msg.sender, address(this), _wormholeData.amount); require( LibAsset.getOwnBalance(_wormholeData.token) - _fromTokenBalance == _wormholeData.amount, \"ERR_INVALID_AMOUNT\" ); _startBridge(_wormholeData); emit LiFiTransferStarted( _lifiData.transactionId, _lifiData.integrator, _lifiData.referrer, _lifiData.sendingAssetId, _lifiData.receivingAssetId, _lifiData.receiver, _lifiData.amount, _lifiData.destinationChainId, block.timestamp );}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "LiFiData memory",
                                        "name": "_lifiData"
                                    },
                                    {
                                        "type": "WormholeData calldata",
                                        "name": "_wormholeData"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "WormholeFacet.LiFiTransferStarted",
                                        "LibAsset.getOwnBalance",
                                        "WormholeFacet._startBridge",
                                        "LibAsset.transferFromERC20"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "792512046863442536d90bedd6bf6461"
                            }
                        ],
                        "swapAndStartBridgeTokensViaWormhole": [
                            {
                                "visibility": "public",
                                "content": "function swapAndStartBridgeTokensViaWormhole( LiFiData memory _lifiData, LibSwap.SwapData[] calldata _swapData, WormholeData memory _wormholeData ) public payable{ uint256 _fromTokenBalance = LibAsset.getOwnBalance(_wormholeData.token); for (uint8 i; i < _swapData.length; i++){ LibSwap.swap(_lifiData.transactionId, _swapData[i]);} require( LibAsset.getOwnBalance(_wormholeData.token) - _fromTokenBalance >= _wormholeData.amount, \"ERR_INVALID_AMOUNT\" ); uint256 _postSwapBalance = LibAsset.getOwnBalance(_wormholeData.token) - _fromTokenBalance; require(_postSwapBalance > 0, \"ERR_INVALID_AMOUNT\"); _wormholeData.amount = _postSwapBalance; _startBridge(_wormholeData); emit LiFiTransferStarted( _lifiData.transactionId, _lifiData.integrator, _lifiData.referrer, _lifiData.sendingAssetId, _lifiData.receivingAssetId, _lifiData.receiver, _lifiData.amount, _lifiData.destinationChainId, block.timestamp );}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "LiFiData memory",
                                        "name": "_lifiData"
                                    },
                                    {
                                        "type": "LibSwap.SwapData[] calldata",
                                        "name": "_swapData"
                                    },
                                    {
                                        "type": "WormholeData memory",
                                        "name": "_wormholeData"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LibSwap.swap",
                                        "WormholeFacet.LiFiTransferStarted",
                                        "LibAsset.getOwnBalance",
                                        "WormholeFacet._startBridge"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "ad9a9531d52d19f9772c427f0f51d8e4"
                            }
                        ],
                        "changeWormholeRouter": [
                            {
                                "visibility": "external",
                                "content": "function changeWormholeRouter(address _newRouter) external{ Storage storage s = getStorage(); LibDiamond.enforceIsContractOwner(); s.wormholeRouter = _newRouter;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_newRouter"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "LibDiamond.enforceIsContractOwner",
                                        "WormholeFacet.getStorage"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "5981575e0713719b8f3b879ed1151bdd"
                            }
                        ],
                        "_startBridge": [
                            {
                                "visibility": "internal",
                                "content": "function _startBridge(WormholeData memory _wormholeData) internal{ Storage storage s = getStorage(); require(block.chainid != _wormholeData.toChainId, \"Cannot bridge to the same network.\"); LibAsset.approveERC20(IERC20(_wormholeData.token), s.wormholeRouter, _wormholeData.amount); IWormholeRouter(s.wormholeRouter).transferTokens( _wormholeData.token, _wormholeData.amount, _wormholeData.toChainId, bytes32(uint256(uint160(_wormholeData.recipient))), 0, _wormholeData.nonce );}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "WormholeData memory",
                                        "name": "_wormholeData"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "WormholeFacet.getStorage",
                                        "LibAsset.approveERC20",
                                        "WormholeFacet.IWormholeRouter",
                                        "WormholeFacet.IERC20"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "486e2bf5b5b7fd50887424b007d2cde1"
                            }
                        ],
                        "getStorage": [
                            {
                                "visibility": "internal",
                                "content": "function getStorage() internal pure returns (Storage storage s){ bytes32 namespace = NAMESPACE; assembly{ s.slot := namespace}}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "Storage storage",
                                        "name": "s"
                                    }
                                ],
                                "reads": [
                                    [
                                        "NAMESPACE",
                                        "",
                                        "WormholeFacet"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c61f9e5858f5e9519a6b8a2a23d918ed"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {
                        "Storage": {
                            "content": "Storage{ address wormholeRouter;}"
                        },
                        "WormholeData": {
                            "content": "WormholeData{ address token; uint256 amount; address recipient; uint16 toChainId; uint32 nonce;}"
                        }
                    },
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "LibDiamond.enforceIsContractOwner": "0d2df620297acdeacfe8c016df7e31eb",
                "WormholeFacet.getStorage": "c61f9e5858f5e9519a6b8a2a23d918ed",
                "LibAsset.transferFromERC20": "08521bb07828529814f66f2201239e41",
                "WormholeFacet._startBridge": "486e2bf5b5b7fd50887424b007d2cde1",
                "LibAsset.getOwnBalance": "1b51ecb2290b6b3db4f241ddbeb65725",
                "LibSwap.swap": "2c844f003dcb094da775e9a03a5b8cb4",
                "LibAsset.approveERC20": "bc6c5c1293c164e7f62051f2ae31dc5d"
            },
            "md5": "ab06c93371c813283974b72fd4bdd56a"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Test\\USDT.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Test\\USDT.sol",
            "filename": "USDT.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "USDT": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "ERC20"
                    ],
                    "state_variables": {},
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor ( address receiver, string memory name, string memory symbol ) ERC20(name, symbol){ _mint(receiver, 10000 * 10**uint256(6));}",
                                "modifiers": [
                                    "ERC20(name, symbol)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "receiver"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "name"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "symbol"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "d2d73faf59a52143fb9e49fcb9277649"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "cac9bfb9ba9121b2e76d13bcea5d4ec0"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Test\\WormholeRouter.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\src\\Test\\WormholeRouter.sol",
            "filename": "WormholeRouter.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\@openzeppelin\\contracts\\token\\ERC20\\utils\\SafeERC20.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\@openzeppelin\\contracts\\proxy\\ERC1967\\ERC1967Upgrade.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\@openzeppelin\\contracts\\proxy\\beacon\\BeaconProxy.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\@openzeppelin\\contracts\\access\\Ownable.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\LIFI20220320\\CBridgeFacet\\@openzeppelin\\contracts\\utils\\Context.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "Structs": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {},
                    "modifiers": {},
                    "structs": {
                        "Provider": {
                            "content": "Provider{ uint16 chainId; uint16 governanceChainId; bytes32 governanceContract;}"
                        },
                        "GuardianSet": {
                            "content": "GuardianSet{ address[] keys; uint32 expirationTime;}"
                        },
                        "Signature": {
                            "content": "Signature{ bytes32 r; bytes32 s; uint8 v; uint8 guardianIndex;}"
                        },
                        "VM": {
                            "content": "VM{ uint8 version; uint32 timestamp; uint32 nonce; uint16 emitterChainId; bytes32 emitterAddress; uint64 sequence; uint8 consistencyLevel; bytes payload; uint32 guardianSetIndex; Signature[] signatures; bytes32 hash;}"
                        }
                    },
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": [
                        [
                            "",
                            "IWormhole"
                        ]
                    ]
                },
                "IWormhole": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "Structs"
                    ],
                    "state_variables": {},
                    "functions": {
                        "publishMessage": [
                            {
                                "visibility": "external",
                                "content": "function publishMessage( uint32 nonce, bytes memory payload, uint8 consistencyLevel ) external payable returns (uint64 sequence);",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint32",
                                        "name": "nonce"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "payload"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "consistencyLevel"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint64",
                                        "name": "sequence"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": true,
                                "md5": "ec035fd86a96baf506cbe49a71f16d42"
                            }
                        ],
                        "parseAndVerifyVM": [
                            {
                                "visibility": "external",
                                "content": "function parseAndVerifyVM(bytes calldata encodedVM) external view returns ( Structs.VM memory vm, bool valid, string memory reason );",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes calldata",
                                        "name": "encodedVM"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "Structs.VM memory",
                                        "name": "vm"
                                    },
                                    {
                                        "type": "bool",
                                        "name": "valid"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "reason"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "4b3b290723a059ac06d593edf3cb8619"
                            }
                        ],
                        "verifyVM": [
                            {
                                "visibility": "external",
                                "content": "function verifyVM(Structs.VM memory vm) external view returns (bool valid, string memory reason);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "Structs.VM memory",
                                        "name": "vm"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": "valid"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "reason"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "192cdde5541bfbe808a58787d69bd786"
                            }
                        ],
                        "verifySignatures": [
                            {
                                "visibility": "external",
                                "content": "function verifySignatures( bytes32 hash, Structs.Signature[] memory signatures, Structs.GuardianSet memory guardianSet ) external pure returns (bool valid, string memory reason);",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "hash"
                                    },
                                    {
                                        "type": "Structs.Signature[] memory",
                                        "name": "signatures"
                                    },
                                    {
                                        "type": "Structs.GuardianSet memory",
                                        "name": "guardianSet"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": "valid"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "reason"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "5941df5b856991355180c18ded8c2e0f"
                            }
                        ],
                        "parseVM": [
                            {
                                "visibility": "external",
                                "content": "function parseVM(bytes memory encodedVM) external pure returns (Structs.VM memory vm);",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "encodedVM"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "Structs.VM memory",
                                        "name": "vm"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "62ad13e2c7922916baeb607f60b7bf6b"
                            }
                        ],
                        "getGuardianSet": [
                            {
                                "visibility": "external",
                                "content": "function getGuardianSet(uint32 index) external view returns (Structs.GuardianSet memory);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint32",
                                        "name": "index"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "Structs.GuardianSet memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "0d4ae09e7b44d0437a8b159989887e09"
                            }
                        ],
                        "getCurrentGuardianSetIndex": [
                            {
                                "visibility": "external",
                                "content": "function getCurrentGuardianSetIndex() external view returns (uint32);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint32",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "f9856ab731dbe6a1f680161fd333112f"
                            }
                        ],
                        "getGuardianSetExpiry": [
                            {
                                "visibility": "external",
                                "content": "function getGuardianSetExpiry() external view returns (uint32);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint32",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c6ec5515b1bed18396b93bd2a4283d54"
                            }
                        ],
                        "governanceActionIsConsumed": [
                            {
                                "visibility": "external",
                                "content": "function governanceActionIsConsumed(bytes32 hash) external view returns (bool);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "hash"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "7dfe07c727955b6df811ee7aa54b80de"
                            }
                        ],
                        "isInitialized": [
                            {
                                "visibility": "external",
                                "content": "function isInitialized(address impl) external view returns (bool);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "impl"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "831e0dba365ebbaed47bfc7d768fa944"
                            }
                        ],
                        "chainId": [
                            {
                                "visibility": "external",
                                "content": "function chainId() external view returns (uint16);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint16",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "7680264d17c88d9aa49cecd985f37a52"
                            }
                        ],
                        "governanceChainId": [
                            {
                                "visibility": "external",
                                "content": "function governanceChainId() external view returns (uint16);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint16",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "ad793e53799552d5dbde2456911c61af"
                            }
                        ],
                        "governanceContract": [
                            {
                                "visibility": "external",
                                "content": "function governanceContract() external view returns (bytes32);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "9719d2ab83219516a1d7675846097c2b"
                            }
                        ],
                        "messageFee": [
                            {
                                "visibility": "external",
                                "content": "function messageFee() external view returns (uint256);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "f6651ca68ef21a03775aa7c2b78d458e"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {
                        "LogMessagePublished": {
                            "event": "LogMessagePublished",
                            "content": "LogMessagePublished( address indexed sender, uint64 sequence, uint32 nonce, bytes payload, uint8 consistencyLevel )"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                },
                "BridgeStorage": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {},
                    "modifiers": {},
                    "structs": {
                        "Provider": {
                            "content": "Provider{ uint16 chainId; uint16 governanceChainId; bytes32 governanceContract; address WETH;}"
                        },
                        "Asset": {
                            "content": "Asset{ uint16 chainId; bytes32 assetAddress;}"
                        },
                        "State": {
                            "content": "State{ address payable wormhole; address tokenImplementation; Provider provider; mapping(bytes32 => bool) consumedGovernanceActions; mapping(bytes32 => bool) completedTransfers; mapping(address => bool) initializedImplementations; mapping(uint16 => mapping(bytes32 => address)) wrappedAssets; mapping(address => bool) isWrappedAsset; mapping(address => uint256) outstandingBridged; mapping(uint16 => bytes32) bridgeImplementations;}"
                        }
                    },
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "BridgeState": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {},
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "BridgeToken": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "BeaconProxy"
                    ],
                    "state_variables": {},
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (address beacon, bytes memory data) BeaconProxy(beacon, data){}",
                                "modifiers": [
                                    "BeaconProxy(beacon, data)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "beacon"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "data"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "30a337d71e80c855fe05c0f197cef656"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "TokenStorage": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {},
                    "modifiers": {},
                    "structs": {
                        "State": {
                            "content": "State{ string name; string symbol; uint64 metaLastUpdatedSequence; uint256 totalSupply; uint8 decimals; mapping(address => uint256) balances; mapping(address => mapping(address => uint256)) allowances; address owner; bool initialized; uint16 chainId; bytes32 nativeContract;}"
                        }
                    },
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "TokenState": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {},
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "TokenImplementation": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "TokenState",
                        "Context"
                    ],
                    "state_variables": {},
                    "functions": {
                        "initialize": [
                            {
                                "visibility": "public",
                                "content": "function initialize( string memory name_, string memory symbol_, uint8 decimals_, uint64 sequence_, address owner_, uint16 chainId_, bytes32 nativeContract_ ) public initializer{ _state.name = name_; _state.symbol = symbol_; _state.decimals = decimals_; _state.metaLastUpdatedSequence = sequence_; _state.owner = owner_; _state.chainId = chainId_; _state.nativeContract = nativeContract_;}",
                                "modifiers": [
                                    "initializer"
                                ],
                                "parameters": [
                                    {
                                        "type": "string memory",
                                        "name": "name_"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "symbol_"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "decimals_"
                                    },
                                    {
                                        "type": "uint64",
                                        "name": "sequence_"
                                    },
                                    {
                                        "type": "address",
                                        "name": "owner_"
                                    },
                                    {
                                        "type": "uint16",
                                        "name": "chainId_"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "nativeContract_"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "TokenImplementation.initializer"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "b1c091d73edc845bfae16eae5ed716ba"
                            }
                        ],
                        "name": [
                            {
                                "visibility": "public",
                                "content": "function name() public view returns (string memory){ return string(abi.encodePacked(_state.name, \" (Wormhole)\"));}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "string memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "f6ed32782c737a579ee4d631617f660b"
                            }
                        ],
                        "symbol": [
                            {
                                "visibility": "public",
                                "content": "function symbol() public view returns (string memory){ return _state.symbol;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "string memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "fce15aa9345ccb3634041f9ba4e5e5c7"
                            }
                        ],
                        "owner": [
                            {
                                "visibility": "public",
                                "content": "function owner() public view returns (address){ return _state.owner;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c0557eb816028d36e21f4852582e74f3"
                            }
                        ],
                        "decimals": [
                            {
                                "visibility": "public",
                                "content": "function decimals() public view returns (uint8){ return _state.decimals;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint8",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "feeaebf2ac2fb655bdffe8ae79ea6313"
                            }
                        ],
                        "totalSupply": [
                            {
                                "visibility": "public",
                                "content": "function totalSupply() public view returns (uint256){ return _state.totalSupply;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "27a71d51f50f102312c9f22e114ddfaa"
                            }
                        ],
                        "chainId": [
                            {
                                "visibility": "public",
                                "content": "function chainId() public view returns (uint16){ return _state.chainId;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint16",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "e37000eecd4c4780be2a733f1aef3eb8"
                            }
                        ],
                        "nativeContract": [
                            {
                                "visibility": "public",
                                "content": "function nativeContract() public view returns (bytes32){ return _state.nativeContract;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "e3e5d9841d0914c77eab0cc59ed58d25"
                            }
                        ],
                        "balanceOf": [
                            {
                                "visibility": "public",
                                "content": "function balanceOf(address account_) public view returns (uint256){ return _state.balances[account_];}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "account_"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "e5d2535c34986e34f6a91fa021391238"
                            }
                        ],
                        "transfer": [
                            {
                                "visibility": "public",
                                "content": "function transfer(address recipient_, uint256 amount_) public returns (bool){ _transfer(_msgSender(), recipient_, amount_); return true;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "recipient_"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount_"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "TokenImplementation._transfer",
                                        "TokenImplementation._msgSender"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "e10d8d9de77ac0b2fd6d992b04e0d776"
                            }
                        ],
                        "allowance": [
                            {
                                "visibility": "public",
                                "content": "function allowance(address owner_, address spender_) public view returns (uint256){ return _state.allowances[owner_][spender_];}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "owner_"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender_"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "7dba24c29d62f600241d32db3b7beeeb"
                            }
                        ],
                        "approve": [
                            {
                                "visibility": "public",
                                "content": "function approve(address spender_, uint256 amount_) public returns (bool){ _approve(_msgSender(), spender_, amount_); return true;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "spender_"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount_"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "TokenImplementation._approve",
                                        "TokenImplementation._msgSender"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "19d9db33467a0f73a82624362d6ff302"
                            }
                        ],
                        "transferFrom": [
                            {
                                "visibility": "public",
                                "content": "function transferFrom( address sender_, address recipient_, uint256 amount_ ) public returns (bool){ _transfer(sender_, recipient_, amount_); uint256 currentAllowance = _state.allowances[sender_][_msgSender()]; require(currentAllowance >= amount_, \"ERC20: transfer amount exceeds allowance\"); _approve(sender_, _msgSender(), currentAllowance - amount_); return true;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "sender_"
                                    },
                                    {
                                        "type": "address",
                                        "name": "recipient_"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount_"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "TokenImplementation._transfer",
                                        "TokenImplementation._approve",
                                        "TokenImplementation._msgSender"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "b6e4ad4ecc398f6a4fc6882685f6b6b5"
                            }
                        ],
                        "increaseAllowance": [
                            {
                                "visibility": "public",
                                "content": "function increaseAllowance(address spender_, uint256 addedValue_) public returns (bool){ _approve(_msgSender(), spender_, _state.allowances[_msgSender()][spender_] + addedValue_); return true;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "spender_"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "addedValue_"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "TokenImplementation._approve",
                                        "TokenImplementation._msgSender"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "50b4aa92196d7bc5299d851939886f8c"
                            }
                        ],
                        "decreaseAllowance": [
                            {
                                "visibility": "public",
                                "content": "function decreaseAllowance(address spender_, uint256 subtractedValue_) public returns (bool){ uint256 currentAllowance = _state.allowances[_msgSender()][spender_]; require(currentAllowance >= subtractedValue_, \"ERC20: decreased allowance below zero\"); _approve(_msgSender(), spender_, currentAllowance - subtractedValue_); return true;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "spender_"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "subtractedValue_"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "TokenImplementation._approve",
                                        "TokenImplementation._msgSender"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "67a1765de5b0b323bbb20480e0d0704a"
                            }
                        ],
                        "_transfer": [
                            {
                                "visibility": "internal",
                                "content": "function _transfer( address sender_, address recipient_, uint256 amount_ ) internal{ require(sender_ != address(0), \"ERC20: transfer from the zero address\"); require(recipient_ != address(0), \"ERC20: transfer to the zero address\"); uint256 senderBalance = _state.balances[sender_]; require(senderBalance >= amount_, \"ERC20: transfer amount exceeds balance\"); _state.balances[sender_] = senderBalance - amount_; _state.balances[recipient_] += amount_; emit Transfer(sender_, recipient_, amount_);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "sender_"
                                    },
                                    {
                                        "type": "address",
                                        "name": "recipient_"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount_"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "68c6759574e725547bb7449f14770142"
                            }
                        ],
                        "mint": [
                            {
                                "visibility": "public",
                                "content": "function mint(address account_, uint256 amount_) public onlyOwner{ _mint(account_, amount_);}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "account_"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount_"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "TokenImplementation._mint",
                                        "TokenImplementation.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "5ad095c24acbe50f0c6a405035825ed9"
                            }
                        ],
                        "_mint": [
                            {
                                "visibility": "internal",
                                "content": "function _mint(address account_, uint256 amount_) internal{ require(account_ != address(0), \"ERC20: mint to the zero address\"); _state.totalSupply += amount_; _state.balances[account_] += amount_; emit Transfer(address(0), account_, amount_);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "account_"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount_"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "5d956da1ac490233997012dd6d897c2a"
                            }
                        ],
                        "burn": [
                            {
                                "visibility": "public",
                                "content": "function burn(address account_, uint256 amount_) public onlyOwner{ _burn(account_, amount_);}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "account_"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount_"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "TokenImplementation._burn",
                                        "TokenImplementation.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "605430b71a1159d6aca0e6afbf213919"
                            }
                        ],
                        "_burn": [
                            {
                                "visibility": "internal",
                                "content": "function _burn(address account_, uint256 amount_) internal{ require(account_ != address(0), \"ERC20: burn from the zero address\"); uint256 accountBalance = _state.balances[account_]; require(accountBalance >= amount_, \"ERC20: burn amount exceeds balance\"); _state.balances[account_] = accountBalance - amount_; _state.totalSupply -= amount_; emit Transfer(account_, address(0), amount_);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "account_"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount_"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "470110b19c04fa24c849a1d09e1a3bc7"
                            }
                        ],
                        "_approve": [
                            {
                                "visibility": "internal",
                                "content": "function _approve( address owner_, address spender_, uint256 amount_ ) internal virtual{ require(owner_ != address(0), \"ERC20: approve from the zero address\"); require(spender_ != address(0), \"ERC20: approve to the zero address\"); _state.allowances[owner_][spender_] = amount_; emit Approval(owner_, spender_, amount_);}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "owner_"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender_"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount_"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "657eb97eb5ce416506de2ac70dc7647e"
                            }
                        ],
                        "updateDetails": [
                            {
                                "visibility": "public",
                                "content": "function updateDetails( string memory name_, string memory symbol_, uint64 sequence_ ) public onlyOwner{ require(_state.metaLastUpdatedSequence < sequence_, \"current metadata is up to date\"); _state.name = name_; _state.symbol = symbol_; _state.metaLastUpdatedSequence = sequence_;}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "string memory",
                                        "name": "name_"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "symbol_"
                                    },
                                    {
                                        "type": "uint64",
                                        "name": "sequence_"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "TokenImplementation.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "f6a287c2787522176be3e9615f0ae87a"
                            }
                        ]
                    },
                    "modifiers": {
                        "onlyOwner": {
                            "parameters": [],
                            "content": "modifier onlyOwner(){ require(owner() == _msgSender(), \"caller is not the owner\"); _;}",
                            "reads": [],
                            "writes": [],
                            "external_calls": {
                                "__set__": true,
                                "values": [
                                    "TokenImplementation.owner",
                                    "TokenImplementation._msgSender"
                                ]
                            },
                            "md5": "cc023a41eb2c832519ec19a928cef5f3"
                        },
                        "initializer": {
                            "parameters": [],
                            "content": "modifier initializer(){ require(!_state.initialized, \"Already initialized\"); _state.initialized = true; _;}",
                            "reads": [],
                            "writes": [],
                            "external_calls": [],
                            "md5": "9732a8bd449ebab7d8abed129c614c84"
                        }
                    },
                    "structs": {},
                    "events": {
                        "Transfer": {
                            "event": "Transfer",
                            "content": "Transfer(address indexed from, address indexed to, uint256 value)"
                        },
                        "Approval": {
                            "event": "Approval",
                            "content": "Approval(address indexed owner, address indexed spender, uint256 value)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "BytesLib": {
                    "type": {
                        "__CT__": true,
                        "value": 2
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "concat": [
                            {
                                "visibility": "internal",
                                "content": "function concat(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bytes memory){ bytes memory tempBytes; assembly{ tempBytes := mload(0x40) let length := mload(_preBytes) mstore(tempBytes, length) let mc := add(tempBytes, 0x20) let end := add(mc, length) for{ let cc := add(_preBytes, 0x20)} lt(mc, end){ mc := add(mc, 0x20) cc := add(cc, 0x20)}{ mstore(mc, mload(cc))} length := mload(_postBytes) mstore(tempBytes, add(length, mload(tempBytes))) mc := end end := add(mc, length) for{ let cc := add(_postBytes, 0x20)} lt(mc, end){ mc := add(mc, 0x20) cc := add(cc, 0x20)}{ mstore(mc, mload(cc))} mstore( 0x40, and( add(add(end, iszero(add(length, mload(_preBytes)))), 31), not(31) ) )} return tempBytes;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "_preBytes"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "_postBytes"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "06f05f251a934fbae1fdfb79f07bfd86"
                            }
                        ],
                        "concatStorage": [
                            {
                                "visibility": "internal",
                                "content": "function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal{ assembly{ let fslot := sload(_preBytes.slot) let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2) let mlength := mload(_postBytes) let newlength := add(slength, mlength) switch add(lt(slength, 32), lt(newlength, 32)) case 2{ sstore( _preBytes.slot, add( fslot, add( mul( div( mload(add(_postBytes, 0x20)), exp(0x100, sub(32, mlength)) ), exp(0x100, sub(32, newlength)) ), mul(mlength, 2) ) ) )} case 1{ mstore(0x0, _preBytes.slot) let sc := add(keccak256(0x0, 0x20), div(slength, 32)) sstore(_preBytes.slot, add(mul(newlength, 2), 1)) let submod := sub(32, slength) let mc := add(_postBytes, submod) let end := add(_postBytes, mlength) let mask := sub(exp(0x100, submod), 1) sstore( sc, add( and(fslot, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00), and(mload(mc), mask) ) ) for{ mc := add(mc, 0x20) sc := add(sc, 1)} lt(mc, end){ sc := add(sc, 1) mc := add(mc, 0x20)}{ sstore(sc, mload(mc))} mask := exp(0x100, sub(mc, end)) sstore(sc, mul(div(mload(mc), mask), mask))} default{ mstore(0x0, _preBytes.slot) let sc := add(keccak256(0x0, 0x20), div(slength, 32)) sstore(_preBytes.slot, add(mul(newlength, 2), 1)) let slengthmod := mod(slength, 32) let mlengthmod := mod(mlength, 32) let submod := sub(32, slengthmod) let mc := add(_postBytes, submod) let end := add(_postBytes, mlength) let mask := sub(exp(0x100, submod), 1) sstore(sc, add(sload(sc), and(mload(mc), mask))) for{ sc := add(sc, 1) mc := add(mc, 0x20)} lt(mc, end){ sc := add(sc, 1) mc := add(mc, 0x20)}{ sstore(sc, mload(mc))} mask := exp(0x100, sub(mc, end)) sstore(sc, mul(div(mload(mc), mask), mask))}}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "bytes storage",
                                        "name": "_preBytes"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "_postBytes"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "bdeab7c46bad0de8bbd4f7f2ae78be73"
                            }
                        ],
                        "slice": [
                            {
                                "visibility": "internal",
                                "content": "function slice( bytes memory _bytes, uint256 _start, uint256 _length ) internal pure returns (bytes memory){ require(_length + 31 >= _length, \"slice_overflow\"); require(_bytes.length >= _start + _length, \"slice_outOfBounds\"); bytes memory tempBytes; assembly{ switch iszero(_length) case 0{ tempBytes := mload(0x40) let lengthmod := and(_length, 31) let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod))) let end := add(mc, _length) for{ let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)} lt(mc, end){ mc := add(mc, 0x20) cc := add(cc, 0x20)}{ mstore(mc, mload(cc))} mstore(tempBytes, _length) mstore(0x40, and(add(mc, 31), not(31)))} default{ tempBytes := mload(0x40) mstore(tempBytes, 0) mstore(0x40, add(tempBytes, 0x20))}} return tempBytes;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "_bytes"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_start"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_length"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c3b49d0d1a0510c385cda2235a4a85dd"
                            }
                        ],
                        "toAddress": [
                            {
                                "visibility": "internal",
                                "content": "function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address){ require(_bytes.length >= _start + 20, \"toAddress_outOfBounds\"); address tempAddress; assembly{ tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)} return tempAddress;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "_bytes"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_start"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "b10d20518ecb91c82b3bff1d0fd5b822"
                            }
                        ],
                        "toUint8": [
                            {
                                "visibility": "internal",
                                "content": "function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8){ require(_bytes.length >= _start + 1, \"toUint8_outOfBounds\"); uint8 tempUint; assembly{ tempUint := mload(add(add(_bytes, 0x1), _start))} return tempUint;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "_bytes"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_start"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint8",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "46e92a3b7d5102576f0dfc84924a22a8"
                            }
                        ],
                        "toUint16": [
                            {
                                "visibility": "internal",
                                "content": "function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16){ require(_bytes.length >= _start + 2, \"toUint16_outOfBounds\"); uint16 tempUint; assembly{ tempUint := mload(add(add(_bytes, 0x2), _start))} return tempUint;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "_bytes"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_start"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint16",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "6e3daac5e4b7544f522e80792c4dbda4"
                            }
                        ],
                        "toUint32": [
                            {
                                "visibility": "internal",
                                "content": "function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32){ require(_bytes.length >= _start + 4, \"toUint32_outOfBounds\"); uint32 tempUint; assembly{ tempUint := mload(add(add(_bytes, 0x4), _start))} return tempUint;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "_bytes"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_start"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint32",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "e405df91a45252b46d30b0fb144bbb3a"
                            }
                        ],
                        "toUint64": [
                            {
                                "visibility": "internal",
                                "content": "function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64){ require(_bytes.length >= _start + 8, \"toUint64_outOfBounds\"); uint64 tempUint; assembly{ tempUint := mload(add(add(_bytes, 0x8), _start))} return tempUint;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "_bytes"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_start"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint64",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "a795c2692346c94726066d230fa3a07e"
                            }
                        ],
                        "toUint96": [
                            {
                                "visibility": "internal",
                                "content": "function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96){ require(_bytes.length >= _start + 12, \"toUint96_outOfBounds\"); uint96 tempUint; assembly{ tempUint := mload(add(add(_bytes, 0xc), _start))} return tempUint;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "_bytes"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_start"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint96",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "b2edd475c628bddd3c0a92832ef1562d"
                            }
                        ],
                        "toUint128": [
                            {
                                "visibility": "internal",
                                "content": "function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128){ require(_bytes.length >= _start + 16, \"toUint128_outOfBounds\"); uint128 tempUint; assembly{ tempUint := mload(add(add(_bytes, 0x10), _start))} return tempUint;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "_bytes"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_start"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint128",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "7db5fbb57c5bd39a07e105a16455af18"
                            }
                        ],
                        "toUint256": [
                            {
                                "visibility": "internal",
                                "content": "function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256){ require(_bytes.length >= _start + 32, \"toUint256_outOfBounds\"); uint256 tempUint; assembly{ tempUint := mload(add(add(_bytes, 0x20), _start))} return tempUint;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "_bytes"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_start"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "08ae489cbf54ba7fd82645799faabcf7"
                            }
                        ],
                        "toBytes32": [
                            {
                                "visibility": "internal",
                                "content": "function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32){ require(_bytes.length >= _start + 32, \"toBytes32_outOfBounds\"); bytes32 tempBytes32; assembly{ tempBytes32 := mload(add(add(_bytes, 0x20), _start))} return tempBytes32;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "_bytes"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_start"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "31d977a126d7dc6d56f5b14af672d8d1"
                            }
                        ],
                        "equal": [
                            {
                                "visibility": "internal",
                                "content": "function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool){ bool success = true; assembly{ let length := mload(_preBytes) switch eq(length, mload(_postBytes)) case 1{ let cb := 1 let mc := add(_preBytes, 0x20) let end := add(mc, length) for{ let cc := add(_postBytes, 0x20)} eq(add(lt(mc, end), cb), 2){ mc := add(mc, 0x20) cc := add(cc, 0x20)}{ if iszero(eq(mload(mc), mload(cc))){ success := 0 cb := 0}}} default{ success := 0}} return success;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "_preBytes"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "_postBytes"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "f875f8de341bf8c6c943ddaffc818027"
                            }
                        ],
                        "equalStorage": [
                            {
                                "visibility": "internal",
                                "content": "function equalStorage(bytes storage _preBytes, bytes memory _postBytes) internal view returns (bool){ bool success = true; assembly{ let fslot := sload(_preBytes.slot) let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2) let mlength := mload(_postBytes) switch eq(slength, mlength) case 1{ if iszero(iszero(slength)){ switch lt(slength, 32) case 1{ fslot := mul(div(fslot, 0x100), 0x100) if iszero(eq(fslot, mload(add(_postBytes, 0x20)))){ success := 0}} default{ let cb := 1 mstore(0x0, _preBytes.slot) let sc := keccak256(0x0, 0x20) let mc := add(_postBytes, 0x20) let end := add(mc, mlength) for{} eq(add(lt(mc, end), cb), 2){ sc := add(sc, 1) mc := add(mc, 0x20)}{ if iszero(eq(sload(sc), mload(mc))){ success := 0 cb := 0}}}}} default{ success := 0}} return success;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes storage",
                                        "name": "_preBytes"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "_postBytes"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "38873ad8066effd392374202875bfc11"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "BridgeGetters": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "BridgeState"
                    ],
                    "state_variables": {},
                    "functions": {
                        "governanceActionIsConsumed": [
                            {
                                "visibility": "public",
                                "content": "function governanceActionIsConsumed(bytes32 hash) public view returns (bool){ return _state.consumedGovernanceActions[hash];}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "hash"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "e93d25c9943d8b28c91319b55894957a"
                            }
                        ],
                        "isInitialized": [
                            {
                                "visibility": "public",
                                "content": "function isInitialized(address impl) public view returns (bool){ return _state.initializedImplementations[impl];}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "impl"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "5d46b1fe3e3211f98a9848d64bd2f6f0"
                            }
                        ],
                        "isTransferCompleted": [
                            {
                                "visibility": "public",
                                "content": "function isTransferCompleted(bytes32 hash) public view returns (bool){ return _state.completedTransfers[hash];}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "hash"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c44d8e075ad4bdd6709deb93c5f898b5"
                            }
                        ],
                        "wormhole": [
                            {
                                "visibility": "public",
                                "content": "function wormhole() public view returns (IWormhole){ return IWormhole(_state.wormhole);}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "IWormhole",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "b6c2e37f23d89a8451f2462e8e85dd02"
                            }
                        ],
                        "chainId": [
                            {
                                "visibility": "public",
                                "content": "function chainId() public view returns (uint16){ return _state.provider.chainId;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint16",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "defc7445f80f3b56d30237a98574ec5a"
                            }
                        ],
                        "governanceChainId": [
                            {
                                "visibility": "public",
                                "content": "function governanceChainId() public view returns (uint16){ return _state.provider.governanceChainId;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint16",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "8bda332061d3779e6fbd55478255337b"
                            }
                        ],
                        "governanceContract": [
                            {
                                "visibility": "public",
                                "content": "function governanceContract() public view returns (bytes32){ return _state.provider.governanceContract;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "32fccbb7b164b38a1420627e87e64b2c"
                            }
                        ],
                        "wrappedAsset": [
                            {
                                "visibility": "public",
                                "content": "function wrappedAsset(uint16 tokenChainId, bytes32 tokenAddress) public view returns (address){ return _state.wrappedAssets[tokenChainId][tokenAddress];}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint16",
                                        "name": "tokenChainId"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "tokenAddress"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "0a715c02c9983735985804d06bfc4e02"
                            }
                        ],
                        "bridgeContracts": [
                            {
                                "visibility": "public",
                                "content": "function bridgeContracts(uint16 chainId_) public view returns (bytes32){ return _state.bridgeImplementations[chainId_];}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint16",
                                        "name": "chainId_"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "9eff6beb3c0f32e61c5a40d6de98d2c6"
                            }
                        ],
                        "tokenImplementation": [
                            {
                                "visibility": "public",
                                "content": "function tokenImplementation() public view returns (address){ return _state.tokenImplementation;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "07d8e228fb94a08f9cf2c1d613e17421"
                            }
                        ],
                        "WETH": [
                            {
                                "visibility": "public",
                                "content": "function WETH() public view returns (IWETH){ return IWETH(_state.provider.WETH);}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "IWETH",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "0647e02f1b5f0cf42dd0b61352428e1b"
                            }
                        ],
                        "outstandingBridged": [
                            {
                                "visibility": "public",
                                "content": "function outstandingBridged(address token) public view returns (uint256){ return _state.outstandingBridged[token];}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "813b0b99e6b3a508405cb7f51675c988"
                            }
                        ],
                        "isWrappedAsset": [
                            {
                                "visibility": "public",
                                "content": "function isWrappedAsset(address token) public view returns (bool){ return _state.isWrappedAsset[token];}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "25113b84230abb449786a900578adb60"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "IWETH": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "IERC20"
                    ],
                    "state_variables": {},
                    "functions": {
                        "deposit": [
                            {
                                "visibility": "external",
                                "content": "function deposit() external payable;",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": true,
                                "md5": "4f2eec90abd519258d97a4283a54e2f1"
                            }
                        ],
                        "withdraw": [
                            {
                                "visibility": "external",
                                "content": "function withdraw(uint256 amount) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "e9eaa0dbb699e0eaab238dc03d38321d"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                },
                "BridgeSetters": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "BridgeState"
                    ],
                    "state_variables": {},
                    "functions": {
                        "setInitialized": [
                            {
                                "visibility": "internal",
                                "content": "function setInitialized(address implementatiom) internal{ _state.initializedImplementations[implementatiom] = true;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "implementatiom"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "53bb21e3e99dec87c00bc3154cb78cbc"
                            }
                        ],
                        "setGovernanceActionConsumed": [
                            {
                                "visibility": "internal",
                                "content": "function setGovernanceActionConsumed(bytes32 hash) internal{ _state.consumedGovernanceActions[hash] = true;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "hash"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "37a6fb1f20ca467a99bca4e13606d25a"
                            }
                        ],
                        "setTransferCompleted": [
                            {
                                "visibility": "internal",
                                "content": "function setTransferCompleted(bytes32 hash) internal{ _state.completedTransfers[hash] = true;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "hash"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "1065292e15896c3fb4c668730e7b7522"
                            }
                        ],
                        "setChainId": [
                            {
                                "visibility": "internal",
                                "content": "function setChainId(uint16 chainId) internal{ _state.provider.chainId = chainId;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint16",
                                        "name": "chainId"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "9604fd0d6977e1ee8701ce845a0dd72b"
                            }
                        ],
                        "setGovernanceChainId": [
                            {
                                "visibility": "internal",
                                "content": "function setGovernanceChainId(uint16 chainId) internal{ _state.provider.governanceChainId = chainId;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint16",
                                        "name": "chainId"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "399edfbaa346c9db7ee6d60820d89433"
                            }
                        ],
                        "setGovernanceContract": [
                            {
                                "visibility": "internal",
                                "content": "function setGovernanceContract(bytes32 governanceContract) internal{ _state.provider.governanceContract = governanceContract;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "governanceContract"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "d83d8fd6ac76547f5e866f35610fa4ff"
                            }
                        ],
                        "setBridgeImplementation": [
                            {
                                "visibility": "internal",
                                "content": "function setBridgeImplementation(uint16 chainId, bytes32 bridgeContract) internal{ _state.bridgeImplementations[chainId] = bridgeContract;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint16",
                                        "name": "chainId"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "bridgeContract"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c7435ebd2e27f3965518c2b645e415f0"
                            }
                        ],
                        "setTokenImplementation": [
                            {
                                "visibility": "internal",
                                "content": "function setTokenImplementation(address impl) internal{ _state.tokenImplementation = impl;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "impl"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "b3cdcdf4738966646cde18d670b19b5a"
                            }
                        ],
                        "setWETH": [
                            {
                                "visibility": "internal",
                                "content": "function setWETH(address weth) internal{ _state.provider.WETH = weth;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "weth"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "46eefae04e2b7ed6a894773e20701152"
                            }
                        ],
                        "setWormhole": [
                            {
                                "visibility": "internal",
                                "content": "function setWormhole(address wh) internal{ _state.wormhole = payable(wh);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "wh"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "86d6b68ce4402e75a689beccf77f155c"
                            }
                        ],
                        "setWrappedAsset": [
                            {
                                "visibility": "internal",
                                "content": "function setWrappedAsset( uint16 tokenChainId, bytes32 tokenAddress, address wrapper ) internal{ _state.wrappedAssets[tokenChainId][tokenAddress] = wrapper; _state.isWrappedAsset[wrapper] = true;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint16",
                                        "name": "tokenChainId"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "tokenAddress"
                                    },
                                    {
                                        "type": "address",
                                        "name": "wrapper"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "fe5573207642eff3c3443dbf96f87260"
                            }
                        ],
                        "setOutstandingBridged": [
                            {
                                "visibility": "internal",
                                "content": "function setOutstandingBridged(address token, uint256 outstanding) internal{ _state.outstandingBridged[token] = outstanding;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "outstanding"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "001b5fa98bfc3613f3f4594fd00dbde9"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "BridgeStructs": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {},
                    "modifiers": {},
                    "structs": {
                        "Transfer": {
                            "content": "Transfer{ uint8 payloadID; uint256 amount; bytes32 tokenAddress; uint16 tokenChain; bytes32 to; uint16 toChain; uint256 fee;}"
                        },
                        "AssetMeta": {
                            "content": "AssetMeta{ uint8 payloadID; bytes32 tokenAddress; uint16 tokenChain; uint8 decimals; bytes32 symbol; bytes32 name;}"
                        },
                        "RegisterChain": {
                            "content": "RegisterChain{ bytes32 module; uint8 action; uint16 chainId; uint16 emitterChainID; bytes32 emitterAddress;}"
                        },
                        "UpgradeContract": {
                            "content": "UpgradeContract{ bytes32 module; uint8 action; uint16 chainId; bytes32 newContract;}"
                        }
                    },
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "BridgeGovernance": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "BridgeGetters",
                        "BridgeSetters",
                        "ERC1967Upgrade"
                    ],
                    "state_variables": {
                        "module": {
                            "type": "bytes32",
                            "visibility": "internal",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "0x000000000000000000000000000000000000000000546f6b656e427269646765",
                            "content": "bytes32 constant module = 0x000000000000000000000000000000000000000000546f6b656e427269646765;"
                        }
                    },
                    "functions": {
                        "registerChain": [
                            {
                                "visibility": "public",
                                "content": "function registerChain(bytes memory encodedVM) public{ (IWormhole.VM memory vm, bool valid, string memory reason) = verifyGovernanceVM(encodedVM); require(valid, reason); setGovernanceActionConsumed(vm.hash); BridgeStructs.RegisterChain memory chain = parseRegisterChain(vm.payload); require(chain.chainId == chainId() || chain.chainId == 0, \"invalid chain id\"); require(bridgeContracts(chain.emitterChainID) == bytes32(0), \"chain already registered\"); setBridgeImplementation(chain.emitterChainID, chain.emitterAddress);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "encodedVM"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BridgeGovernance.setGovernanceActionConsumed",
                                        "BridgeGovernance.setBridgeImplementation",
                                        "BridgeGovernance.chainId",
                                        "BridgeGovernance.bridgeContracts",
                                        "BridgeGovernance.parseRegisterChain",
                                        "BridgeGovernance.verifyGovernanceVM"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "9dde2a6c5b0e1c2347549e4c3a461988"
                            }
                        ],
                        "upgrade": [
                            {
                                "visibility": "public",
                                "content": "function upgrade(bytes memory encodedVM) public{ (IWormhole.VM memory vm, bool valid, string memory reason) = verifyGovernanceVM(encodedVM); require(valid, reason); setGovernanceActionConsumed(vm.hash); BridgeStructs.UpgradeContract memory implementation = parseUpgrade(vm.payload); require(implementation.chainId == chainId(), \"wrong chain id\"); upgradeImplementation(address(uint160(uint256(implementation.newContract))));}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "encodedVM"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BridgeGovernance.setGovernanceActionConsumed",
                                        "BridgeGovernance.upgradeImplementation",
                                        "BridgeGovernance.chainId",
                                        "BridgeGovernance.verifyGovernanceVM",
                                        "BridgeGovernance.parseUpgrade"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "15eaf629a5c60ba8e7ec3c6019e85322"
                            }
                        ],
                        "verifyGovernanceVM": [
                            {
                                "visibility": "internal",
                                "content": "function verifyGovernanceVM(bytes memory encodedVM) internal view returns ( IWormhole.VM memory parsedVM, bool isValid, string memory invalidReason ){ (IWormhole.VM memory vm, bool valid, string memory reason) = wormhole().parseAndVerifyVM(encodedVM); if (!valid){ return (vm, valid, reason);} if (vm.emitterChainId != governanceChainId()){ return (vm, false, \"wrong governance chain\");} if (vm.emitterAddress != governanceContract()){ return (vm, false, \"wrong governance contract \");} if (governanceActionIsConsumed(vm.hash)){ return (vm, false, \"governance action already consumed\");} return (vm, true, \"\");}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "encodedVM"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "IWormhole.VM memory",
                                        "name": "parsedVM"
                                    },
                                    {
                                        "type": "bool",
                                        "name": "isValid"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "invalidReason"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BridgeGovernance.governanceContract",
                                        "BridgeGovernance.wormhole",
                                        "BridgeGovernance.governanceActionIsConsumed",
                                        "BridgeGovernance.governanceChainId"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "74a8f54af8df522de2ddb38beba34c1a"
                            }
                        ],
                        "upgradeImplementation": [
                            {
                                "visibility": "internal",
                                "content": "function upgradeImplementation(address newImplementation) internal{ address currentImplementation = _getImplementation(); _upgradeTo(newImplementation); (bool success, bytes memory reason) = newImplementation.delegatecall(abi.encodeWithSignature(\"initialize()\")); require(success, string(reason)); emit ContractUpgraded(currentImplementation, newImplementation);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "newImplementation"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BridgeGovernance._getImplementation",
                                        "newImplementation.delegatecall",
                                        "BridgeGovernance._upgradeTo"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "6afc47ca59091365fe5ad558389fa0d5"
                            }
                        ],
                        "parseRegisterChain": [
                            {
                                "visibility": "public",
                                "content": "function parseRegisterChain(bytes memory encoded) public pure returns (BridgeStructs.RegisterChain memory chain){ uint256 index = 0; chain.module = encoded.toBytes32(index); index += 32; require(chain.module == module, \"invalid RegisterChain: wrong module\"); chain.action = encoded.toUint8(index); index += 1; require(chain.action == 1, \"invalid RegisterChain: wrong action\"); chain.chainId = encoded.toUint16(index); index += 2; chain.emitterChainID = encoded.toUint16(index); index += 2; chain.emitterAddress = encoded.toBytes32(index); index += 32; require(encoded.length == index, \"invalid RegisterChain: wrong length\");}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "encoded"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "BridgeStructs.RegisterChain memory",
                                        "name": "chain"
                                    }
                                ],
                                "reads": [
                                    [
                                        "module",
                                        "",
                                        "BridgeGovernance"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "module",
                                        "",
                                        "BridgeGovernance"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "encoded.toBytes32",
                                        "encoded.toUint16",
                                        "encoded.toUint8"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "f594c9491528053a5c293d650ca94299"
                            }
                        ],
                        "parseUpgrade": [
                            {
                                "visibility": "public",
                                "content": "function parseUpgrade(bytes memory encoded) public pure returns (BridgeStructs.UpgradeContract memory chain){ uint256 index = 0; chain.module = encoded.toBytes32(index); index += 32; require(chain.module == module, \"invalid UpgradeContract: wrong module\"); chain.action = encoded.toUint8(index); index += 1; require(chain.action == 2, \"invalid UpgradeContract: wrong action\"); chain.chainId = encoded.toUint16(index); index += 2; chain.newContract = encoded.toBytes32(index); index += 32; require(encoded.length == index, \"invalid UpgradeContract: wrong length\");}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "encoded"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "BridgeStructs.UpgradeContract memory",
                                        "name": "chain"
                                    }
                                ],
                                "reads": [
                                    [
                                        "module",
                                        "",
                                        "BridgeGovernance"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "module",
                                        "",
                                        "BridgeGovernance"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "encoded.toBytes32",
                                        "encoded.toUint16",
                                        "encoded.toUint8"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "688c0bd7dcaaa9033909adfbf6a9c596"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {
                        "ContractUpgraded": {
                            "event": "ContractUpgraded",
                            "content": "ContractUpgraded(address indexed oldContract, address indexed newContract)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "bytes": "BytesLib"
                    }
                },
                "Bridge": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "BridgeGovernance"
                    ],
                    "state_variables": {},
                    "functions": {
                        "attestToken": [
                            {
                                "visibility": "public",
                                "content": "function attestToken(address tokenAddress, uint32 nonce) public payable returns (uint64 sequence){ (, bytes memory queriedDecimals) = tokenAddress.staticcall(abi.encodeWithSignature(\"decimals()\")); (, bytes memory queriedSymbol) = tokenAddress.staticcall(abi.encodeWithSignature(\"symbol()\")); (, bytes memory queriedName) = tokenAddress.staticcall(abi.encodeWithSignature(\"name()\")); uint8 decimals = abi.decode(queriedDecimals, (uint8)); string memory symbolString = abi.decode(queriedSymbol, (string)); string memory nameString = abi.decode(queriedName, (string)); bytes32 symbol; bytes32 name; assembly{ symbol := mload(add(symbolString, 32)) name := mload(add(nameString, 32))} BridgeStructs.AssetMeta memory meta = BridgeStructs.AssetMeta({ payloadID: 2, tokenAddress: bytes32(uint256(uint160(tokenAddress))), tokenChain: chainId(), decimals: decimals, symbol: symbol, name: name} ); bytes memory encoded = encodeAssetMeta(meta); sequence = wormhole().publishMessage{ value: msg.value} (nonce, encoded, 15);}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "tokenAddress"
                                    },
                                    {
                                        "type": "uint32",
                                        "name": "nonce"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint64",
                                        "name": "sequence"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BridgeGovernance.wormhole",
                                        "BridgeGovernance.chainId",
                                        "BridgeStructs.AssetMeta",
                                        "Bridge.encodeAssetMeta",
                                        "tokenAddress.staticcall"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "a3ce2e6e77ffa87b725f136ef34e8d01"
                            }
                        ],
                        "wrapAndTransferETH": [
                            {
                                "visibility": "public",
                                "content": "function wrapAndTransferETH( uint16 recipientChain, bytes32 recipient, uint256 arbiterFee, uint32 nonce ) public payable returns (uint64 sequence){ uint256 wormholeFee = wormhole().messageFee(); require(wormholeFee < msg.value, \"value is smaller than wormhole fee\"); uint256 amount = msg.value - wormholeFee; require(arbiterFee <= amount, \"fee is bigger than amount minus wormhole fee\"); uint256 normalizedAmount = normalizeAmount(amount, 18); uint256 normalizedArbiterFee = normalizeAmount(arbiterFee, 18); uint256 dust = amount - deNormalizeAmount(normalizedAmount, 18); if (dust > 0){ payable(msg.sender).transfer(dust);} WETH().deposit{ value: amount - dust} (); bridgeOut(address(WETH()), normalizedAmount); sequence = logTransfer( chainId(), bytes32(uint256(uint160(address(WETH())))), normalizedAmount, recipientChain, recipient, normalizedArbiterFee, wormholeFee, nonce );}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint16",
                                        "name": "recipientChain"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "recipient"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "arbiterFee"
                                    },
                                    {
                                        "type": "uint32",
                                        "name": "nonce"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint64",
                                        "name": "sequence"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Bridge.WETH",
                                        "Bridge.bridgeOut",
                                        "Bridge.logTransfer",
                                        "BridgeGovernance.wormhole",
                                        "Bridge.deNormalizeAmount",
                                        "BridgeGovernance.chainId",
                                        "Bridge.normalizeAmount"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "91baf83cc6360b06cc057498dd24d3ee"
                            }
                        ],
                        "transferTokens": [
                            {
                                "visibility": "public",
                                "content": "function transferTokens( address token, uint256 amount, uint16 recipientChain, bytes32 recipient, uint256 arbiterFee, uint32 nonce ) public payable returns (uint64 sequence){ uint16 tokenChain; bytes32 tokenAddress; if (isWrappedAsset(token)){ tokenChain = TokenImplementation(token).chainId(); tokenAddress = TokenImplementation(token).nativeContract();} else{ tokenChain = chainId(); tokenAddress = bytes32(uint256(uint160(token)));} (, bytes memory queriedDecimals) = token.staticcall(abi.encodeWithSignature(\"decimals()\")); uint8 decimals = abi.decode(queriedDecimals, (uint8)); amount = deNormalizeAmount(normalizeAmount(amount, decimals), decimals); if (tokenChain == chainId()){ (, bytes memory queriedBalanceBefore) = token.staticcall( abi.encodeWithSelector(IERC20.balanceOf.selector, address(this)) ); uint256 balanceBefore = abi.decode(queriedBalanceBefore, (uint256)); SafeERC20.safeTransferFrom(IERC20(token), msg.sender, address(this), amount); (, bytes memory queriedBalanceAfter) = token.staticcall( abi.encodeWithSelector(IERC20.balanceOf.selector, address(this)) ); uint256 balanceAfter = abi.decode(queriedBalanceAfter, (uint256)); amount = balanceAfter - balanceBefore;} else{ SafeERC20.safeTransferFrom(IERC20(token), msg.sender, address(this), amount); TokenImplementation(token).burn(address(this), amount);} uint256 normalizedAmount = normalizeAmount(amount, decimals); uint256 normalizedArbiterFee = normalizeAmount(arbiterFee, decimals); if (tokenChain == chainId()){ bridgeOut(token, normalizedAmount);} sequence = logTransfer( tokenChain, tokenAddress, normalizedAmount, recipientChain, recipient, normalizedArbiterFee, msg.value, nonce );}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "uint16",
                                        "name": "recipientChain"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "recipient"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "arbiterFee"
                                    },
                                    {
                                        "type": "uint32",
                                        "name": "nonce"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint64",
                                        "name": "sequence"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Bridge.bridgeOut",
                                        "Bridge.logTransfer",
                                        "SafeERC20.safeTransferFrom",
                                        "Bridge.deNormalizeAmount",
                                        "BridgeGovernance.chainId",
                                        "token.staticcall",
                                        "Bridge.normalizeAmount",
                                        "Bridge.IERC20",
                                        "Bridge.isWrappedAsset"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "24d6176fe3928641194e6e2a85737a78"
                            }
                        ],
                        "normalizeAmount": [
                            {
                                "visibility": "internal",
                                "content": "function normalizeAmount(uint256 amount, uint8 decimals) internal pure returns (uint256){ if (decimals > 8){ amount /= 10**(decimals - 8);} return amount;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "decimals"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c3d81e6a5a69fb0c3e004dad1a49ece8"
                            }
                        ],
                        "deNormalizeAmount": [
                            {
                                "visibility": "internal",
                                "content": "function deNormalizeAmount(uint256 amount, uint8 decimals) internal pure returns (uint256){ if (decimals > 8){ amount *= 10**(decimals - 8);} return amount;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "decimals"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c5ee64c1392203fa57722c88e608ea85"
                            }
                        ],
                        "logTransfer": [
                            {
                                "visibility": "internal",
                                "content": "function logTransfer( uint16 tokenChain, bytes32 tokenAddress, uint256 amount, uint16 recipientChain, bytes32 recipient, uint256 fee, uint256 callValue, uint32 nonce ) internal returns (uint64 sequence){ require(fee <= amount, \"fee exceeds amount\"); BridgeStructs.Transfer memory transfer = BridgeStructs.Transfer({ payloadID: 1, amount: amount, tokenAddress: tokenAddress, tokenChain: tokenChain, to: recipient, toChain: recipientChain, fee: fee} ); bytes memory encoded = encodeTransfer(transfer);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint16",
                                        "name": "tokenChain"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "tokenAddress"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "uint16",
                                        "name": "recipientChain"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "recipient"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "fee"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "callValue"
                                    },
                                    {
                                        "type": "uint32",
                                        "name": "nonce"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint64",
                                        "name": "sequence"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BridgeStructs.Transfer",
                                        "Bridge.encodeTransfer"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "cae294097b839efd09564a8957c4e1af"
                            }
                        ],
                        "updateWrapped": [
                            {
                                "visibility": "external",
                                "content": "function updateWrapped(bytes memory encodedVm) external returns (address token){ (IWormhole.VM memory vm, bool valid, string memory reason) = wormhole().parseAndVerifyVM(encodedVm); require(valid, reason); require(verifyBridgeVM(vm), \"invalid emitter\"); BridgeStructs.AssetMeta memory meta = parseAssetMeta(vm.payload); return _updateWrapped(meta, vm.sequence);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "encodedVm"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Bridge.parseAssetMeta",
                                        "BridgeGovernance.wormhole",
                                        "Bridge._updateWrapped",
                                        "Bridge.verifyBridgeVM"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "cac43ea8d2aab23134f2a557d46fadb5"
                            }
                        ],
                        "_updateWrapped": [
                            {
                                "visibility": "internal",
                                "content": "function _updateWrapped(BridgeStructs.AssetMeta memory meta, uint64 sequence) internal returns (address token){ address wrapped = wrappedAsset(meta.tokenChain, meta.tokenAddress); require(wrapped != address(0), \"wrapped asset does not exists\"); TokenImplementation(wrapped).updateDetails(bytes32ToString(meta.name), bytes32ToString(meta.symbol), sequence); return wrapped;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "BridgeStructs.AssetMeta memory",
                                        "name": "meta"
                                    },
                                    {
                                        "type": "uint64",
                                        "name": "sequence"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Bridge.bytes32ToString",
                                        "Bridge.wrappedAsset"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "93f17ba33aa28cfd346ebe0e5f852752"
                            }
                        ],
                        "createWrapped": [
                            {
                                "visibility": "external",
                                "content": "function createWrapped(bytes memory encodedVm) external returns (address token){ (IWormhole.VM memory vm, bool valid, string memory reason) = wormhole().parseAndVerifyVM(encodedVm); require(valid, reason); require(verifyBridgeVM(vm), \"invalid emitter\"); BridgeStructs.AssetMeta memory meta = parseAssetMeta(vm.payload); return _createWrapped(meta, vm.sequence);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "encodedVm"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Bridge.parseAssetMeta",
                                        "Bridge._createWrapped",
                                        "BridgeGovernance.wormhole",
                                        "Bridge.verifyBridgeVM"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "e8b2d4fd71bd958b8baae1d5891ce419"
                            }
                        ],
                        "_createWrapped": [
                            {
                                "visibility": "internal",
                                "content": "function _createWrapped(BridgeStructs.AssetMeta memory meta, uint64 sequence) internal returns (address token){ require(meta.tokenChain != chainId(), \"can only wrap tokens from foreign chains\"); require(wrappedAsset(meta.tokenChain, meta.tokenAddress) == address(0), \"wrapped asset already exists\"); bytes memory initialisationArgs = abi.encodeWithSelector( TokenImplementation.initialize.selector, bytes32ToString(meta.name), bytes32ToString(meta.symbol), meta.decimals, sequence, address(this), meta.tokenChain, meta.tokenAddress ); bytes memory constructorArgs = abi.encode(address(this), initialisationArgs); bytes memory bytecode = abi.encodePacked( type (BridgeToken).creationCode, constructorArgs); bytes32 salt = keccak256(abi.encodePacked(meta.tokenChain, meta.tokenAddress)); assembly{ token := create2(0, add(bytecode, 0x20), mload(bytecode), salt) if iszero(extcodesize(token)){ revert(0, 0)}} setWrappedAsset(meta.tokenChain, meta.tokenAddress, token);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "BridgeStructs.AssetMeta memory",
                                        "name": "meta"
                                    },
                                    {
                                        "type": "uint64",
                                        "name": "sequence"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BridgeGovernance.chainId",
                                        "Bridge.type",
                                        "Bridge.setWrappedAsset",
                                        "Bridge.bytes32ToString",
                                        "Bridge.wrappedAsset"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "6caa64a6c41acae12044bd61c2a54e7a"
                            }
                        ],
                        "completeTransfer": [
                            {
                                "visibility": "public",
                                "content": "function completeTransfer(bytes memory encodedVm) public{ _completeTransfer(encodedVm, false);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "encodedVm"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Bridge._completeTransfer"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "06e3b8ba7ef8cb7e6120015a63190310"
                            }
                        ],
                        "completeTransferAndUnwrapETH": [
                            {
                                "visibility": "public",
                                "content": "function completeTransferAndUnwrapETH(bytes memory encodedVm) public{ _completeTransfer(encodedVm, true);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "encodedVm"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Bridge._completeTransfer"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "b4ae581d6b58c4af9059a87f16a58057"
                            }
                        ],
                        "_completeTransfer": [
                            {
                                "visibility": "internal",
                                "content": "function _completeTransfer(bytes memory encodedVm, bool unwrapWETH) internal{ (IWormhole.VM memory vm, bool valid, string memory reason) = wormhole().parseAndVerifyVM(encodedVm); require(valid, reason); require(verifyBridgeVM(vm), \"invalid emitter\"); BridgeStructs.Transfer memory transfer = parseTransfer(vm.payload); require(!isTransferCompleted(vm.hash), \"transfer already completed\"); setTransferCompleted(vm.hash); require(transfer.toChain == chainId(), \"invalid target chain\"); IERC20 transferToken; if (transfer.tokenChain == chainId()){ transferToken = IERC20(address(uint160(uint256(transfer.tokenAddress)))); bridgedIn(address(transferToken), transfer.amount);} else{ address wrapped = wrappedAsset(transfer.tokenChain, transfer.tokenAddress); require(wrapped != address(0), \"no wrapper for this token created yet\"); transferToken = IERC20(wrapped);} require( unwrapWETH == false || address(transferToken) == address(WETH()), \"invalid token, can only unwrap WETH\" ); (, bytes memory queriedDecimals) = address(transferToken).staticcall(abi.encodeWithSignature(\"decimals()\")); uint8 decimals = abi.decode(queriedDecimals, (uint8)); uint256 nativeAmount = deNormalizeAmount(transfer.amount, decimals); uint256 nativeFee = deNormalizeAmount(transfer.fee, decimals); if (nativeFee > 0){ require(nativeFee <= nativeAmount, \"fee higher than transferred amount\"); if (unwrapWETH){ WETH().withdraw(nativeFee); payable(msg.sender).transfer(nativeFee);} else{ if (transfer.tokenChain != chainId()){ TokenImplementation(address(transferToken)).mint(msg.sender, nativeFee);} else{ SafeERC20.safeTransfer(transferToken, msg.sender, nativeFee);}}} uint256 transferAmount = nativeAmount - nativeFee; address transferRecipient = address(uint160(uint256(transfer.to))); if (unwrapWETH){ WETH().withdraw(transferAmount); payable(transferRecipient).transfer(transferAmount);} else{ if (transfer.tokenChain != chainId()){ TokenImplementation(address(transferToken)).mint(transferRecipient, transferAmount);} else{ SafeERC20.safeTransfer(transferToken, transferRecipient, transferAmount);}}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "encodedVm"
                                    },
                                    {
                                        "type": "bool",
                                        "name": "unwrapWETH"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Bridge.WETH",
                                        "Bridge.parseTransfer",
                                        "BridgeGovernance.wormhole",
                                        "Bridge.isTransferCompleted",
                                        "Bridge.setTransferCompleted",
                                        "Bridge.bridgedIn",
                                        "Bridge.deNormalizeAmount",
                                        "Bridge.verifyBridgeVM",
                                        "BridgeGovernance.chainId",
                                        "SafeERC20.safeTransfer",
                                        "Bridge.IERC20",
                                        "Bridge.wrappedAsset",
                                        "IERC20.staticcall"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "6391a4c932436e699536edb9d720713c"
                            }
                        ],
                        "bridgeOut": [
                            {
                                "visibility": "internal",
                                "content": "function bridgeOut(address token, uint256 normalizedAmount) internal{ uint256 outstanding = outstandingBridged(token); require( outstanding + normalizedAmount <= type (uint64).max, \"transfer exceeds max outstanding bridged token amount\" ); setOutstandingBridged(token, outstanding + normalizedAmount);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "normalizedAmount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Bridge.setOutstandingBridged",
                                        "Bridge.type",
                                        "Bridge.outstandingBridged"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "3d450cbf244a15a93d4de710aeb1371e"
                            }
                        ],
                        "bridgedIn": [
                            {
                                "visibility": "internal",
                                "content": "function bridgedIn(address token, uint256 normalizedAmount) internal{ setOutstandingBridged(token, outstandingBridged(token) - normalizedAmount);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "normalizedAmount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Bridge.setOutstandingBridged",
                                        "Bridge.outstandingBridged"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "0c2527914e62295f7ef7c2e9457299fc"
                            }
                        ],
                        "verifyBridgeVM": [
                            {
                                "visibility": "internal",
                                "content": "function verifyBridgeVM(IWormhole.VM memory vm) internal view returns (bool){ if (bridgeContracts(vm.emitterChainId) == vm.emitterAddress){ return true;} return false;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "IWormhole.VM memory",
                                        "name": "vm"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BridgeGovernance.bridgeContracts"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "1eae6031c719f533b96efb959c75342c"
                            }
                        ],
                        "encodeAssetMeta": [
                            {
                                "visibility": "public",
                                "content": "function encodeAssetMeta(BridgeStructs.AssetMeta memory meta) public pure returns (bytes memory encoded){ encoded = abi.encodePacked( meta.payloadID, meta.tokenAddress, meta.tokenChain, meta.decimals, meta.symbol, meta.name );}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "BridgeStructs.AssetMeta memory",
                                        "name": "meta"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": "encoded"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "0aa1f1f0949d0add00ede4a198510cef"
                            }
                        ],
                        "encodeTransfer": [
                            {
                                "visibility": "public",
                                "content": "function encodeTransfer(BridgeStructs.Transfer memory transfer) public pure returns (bytes memory encoded){ encoded = abi.encodePacked( transfer.payloadID, transfer.amount, transfer.tokenAddress, transfer.tokenChain, transfer.to, transfer.toChain, transfer.fee );}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "BridgeStructs.Transfer memory",
                                        "name": "transfer"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": "encoded"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "4969627226ace1c3cdbb1f2e5f2f3191"
                            }
                        ],
                        "parseAssetMeta": [
                            {
                                "visibility": "public",
                                "content": "function parseAssetMeta(bytes memory encoded) public pure returns (BridgeStructs.AssetMeta memory meta){ uint256 index = 0; meta.payloadID = encoded.toUint8(index); index += 1; require(meta.payloadID == 2, \"invalid AssetMeta\"); meta.tokenAddress = encoded.toBytes32(index); index += 32; meta.tokenChain = encoded.toUint16(index); index += 2; meta.decimals = encoded.toUint8(index); index += 1; meta.symbol = encoded.toBytes32(index); index += 32; meta.name = encoded.toBytes32(index); index += 32; require(encoded.length == index, \"invalid AssetMeta\");}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "encoded"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "BridgeStructs.AssetMeta memory",
                                        "name": "meta"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "encoded.toBytes32",
                                        "encoded.toUint16",
                                        "encoded.toUint8"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "e78fce8d6ee0b6da219cf043706de47e"
                            }
                        ],
                        "parseTransfer": [
                            {
                                "visibility": "public",
                                "content": "function parseTransfer(bytes memory encoded) public pure returns (BridgeStructs.Transfer memory transfer){ uint256 index = 0; transfer.payloadID = encoded.toUint8(index); index += 1; require(transfer.payloadID == 1, \"invalid Transfer\"); transfer.amount = encoded.toUint256(index); index += 32; transfer.tokenAddress = encoded.toBytes32(index); index += 32; transfer.tokenChain = encoded.toUint16(index); index += 2; transfer.to = encoded.toBytes32(index); index += 32; transfer.toChain = encoded.toUint16(index); index += 2; transfer.fee = encoded.toUint256(index); index += 32; require(encoded.length == index, \"invalid Transfer\");}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "encoded"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "BridgeStructs.Transfer memory",
                                        "name": "transfer"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "encoded.toBytes32",
                                        "encoded.toUint16",
                                        "encoded.toUint256",
                                        "encoded.toUint8"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "7f1da19c5d85a3bf263a93a1e9c854df"
                            }
                        ],
                        "bytes32ToString": [
                            {
                                "visibility": "internal",
                                "content": "function bytes32ToString(bytes32 input) internal pure returns (string memory){ uint256 i; while (i < 32 && input[i] != 0){ i++;} bytes memory array = new bytes(i); for (uint256 c = 0; c < i; c++){ array[c] = input[c];} return string(array);}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "input"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "string memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "9c9776318aa283ae5808a0c3a0162864"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "bytes": "BytesLib"
                    }
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "TokenImplementation.initializer": "9732a8bd449ebab7d8abed129c614c84",
                "TokenImplementation._msgSender": "3bc534219d7c704e82b1271e27e1e9f4",
                "TokenImplementation._transfer": "68c6759574e725547bb7449f14770142",
                "TokenImplementation._approve": "657eb97eb5ce416506de2ac70dc7647e",
                "TokenImplementation.onlyOwner": "cc023a41eb2c832519ec19a928cef5f3",
                "TokenImplementation._mint": "5d956da1ac490233997012dd6d897c2a",
                "TokenImplementation._burn": "470110b19c04fa24c849a1d09e1a3bc7",
                "TokenImplementation.owner": "c0557eb816028d36e21f4852582e74f3",
                "BridgeGovernance.verifyGovernanceVM": "74a8f54af8df522de2ddb38beba34c1a",
                "BridgeGovernance.parseRegisterChain": "f594c9491528053a5c293d650ca94299",
                "BridgeGovernance.upgradeImplementation": "6afc47ca59091365fe5ad558389fa0d5",
                "BridgeGovernance.parseUpgrade": "688c0bd7dcaaa9033909adfbf6a9c596",
                "BridgeGovernance._getImplementation": "5a07aad80b3bfa3fa5c0647437bb387d",
                "BridgeGovernance._upgradeTo": "020862c1db68690b6fc90d8d79d6ca80",
                "Bridge.encodeAssetMeta": "0aa1f1f0949d0add00ede4a198510cef",
                "Bridge.logTransfer": "cae294097b839efd09564a8957c4e1af",
                "Bridge.deNormalizeAmount": "c5ee64c1392203fa57722c88e608ea85",
                "Bridge.normalizeAmount": "c3d81e6a5a69fb0c3e004dad1a49ece8",
                "Bridge.bridgeOut": "3d450cbf244a15a93d4de710aeb1371e",
                "SafeERC20.safeTransferFrom": "9eb9618f71dfee4a30771f1023a3d8e5",
                "Bridge.encodeTransfer": "4969627226ace1c3cdbb1f2e5f2f3191",
                "Bridge._updateWrapped": "93f17ba33aa28cfd346ebe0e5f852752",
                "Bridge.parseAssetMeta": "e78fce8d6ee0b6da219cf043706de47e",
                "Bridge.verifyBridgeVM": "1eae6031c719f533b96efb959c75342c",
                "Bridge.bytes32ToString": "9c9776318aa283ae5808a0c3a0162864",
                "Bridge._createWrapped": "6caa64a6c41acae12044bd61c2a54e7a",
                "Bridge._completeTransfer": "6391a4c932436e699536edb9d720713c",
                "Bridge.bridgedIn": "0c2527914e62295f7ef7c2e9457299fc",
                "Bridge.parseTransfer": "7f1da19c5d85a3bf263a93a1e9c854df",
                "SafeERC20.safeTransfer": "bbc9884216fd41f84a3992818f5d5fee"
            },
            "md5": "e7d391a790fc4e0728c366386b4ddf41"
        }
    },
    "handled_md5": {
        "__set__": true,
        "values": [
            "9023e04bf78f6d7c47a87a4e9dc55deb",
            "16ae04c146c58817914ec3fdad46ccb1",
            "6308bca41b59adae9503c336506f4ec9",
            "523814c241a7e77f3f53857d2e14cc13",
            "bf57913740ff0225461ffa4de229a189",
            "6d1441581a258020c2d6c019077f4bb4",
            "958ae7f871089da275cdfacc53f84e6a",
            "d462a517688eb0458f9aad1f16707280",
            "18bcc07575f53c6990da3121619be65f",
            "3c016ef67d678e41e92e54388f21e64a",
            "053001b1c25227acf772dab1504b362a",
            "d4274aa69ed78b7738777c39f26016b6",
            "7fd01549dd491ee3112160db03bba559",
            "d2e2aaa11068b54898f0c86f1bed0118",
            "702dcf4b2a5f7cd0b6f565aefefcdb7e",
            "1ea1f4fa9c42f8c005d9504ba36bed4b",
            "482ac458fa33757f5fe41cba0d92e2d5",
            "868df5bd936d3d68bdb92bcb5dd1fc2f",
            "d9efa643db8e639f6283c6acb7fa71bb",
            "a9900848dda01a5f0c53e03148364f33",
            "58c742381105f07ea7f169249fa29275",
            "9fbf2444d51b1f3f381f2eb7ef0c865a",
            "6542ce4712d1842c206988c3a2d996e0",
            "e7d391a790fc4e0728c366386b4ddf41",
            "d8abe13e2634606036208fbed6a9295b",
            "aab41efab6ee9b2360da977f97a0bc58",
            "867fbadb91ebe2ca33355f58f64fbcc9",
            "b82fcee3b3088b52abf0a8a1e3281c14",
            "37eba376564f27b2d64d628c5baec945",
            "668b790acb130c90bb963f09b36a51dd",
            "e369864eb138eff0ec74b9e9242160a0",
            "0cbb2fa36fc36ca7a0f0c2477e9599b6",
            "7d131eac9f9f3612e3b4991a46a2497f",
            "8f4935b6faf77547842549369f8c265a",
            "ab06c93371c813283974b72fd4bdd56a",
            "b533647584a2a22c04a3aaad6b1f1dde",
            "aa09192785b662133d42ea817d467c1d",
            "3b6f24acabefc14426ea000917edd16c",
            "23053cbeb1897e78cae71ab802a71136",
            "cac9bfb9ba9121b2e76d13bcea5d4ec0",
            "d8ee7def0199d3b4fccbd91bb99fbfac",
            "72aded58df6ff3c9b4069a6296121c47",
            "fb7f973e291cd00800e9726fc5abcf7f",
            "705ccd4722273fc6916dd32a91960089"
        ]
    }
}