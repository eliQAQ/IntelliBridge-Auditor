{
    "solidity_file": {
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\node_modules\\@openzeppelin\\contracts\\utils\\Context.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\node_modules\\@openzeppelin\\contracts\\utils\\Context.sol",
            "filename": "Context.sol",
            "imported_contracts": {},
            "contracts": {
                "Context": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": true,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "_msgSender": [
                            {
                                "visibility": "internal",
                                "content": "function _msgSender() internal view virtual returns (address payable){ return msg.sender;}",
                                "modifiers": [
                                    "view",
                                    "virtual"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address payable",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "00e29fff2bd07c51e23e94ddc6a504c4"
                            }
                        ],
                        "_msgData": [
                            {
                                "visibility": "internal",
                                "content": "function _msgData() internal view virtual returns (bytes memory){ this; return msg.data;}",
                                "modifiers": [
                                    "view",
                                    "virtual"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "85862d5484a7dade4fadbe2620ef8307"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "b9da9b214e5a76ab63f0ebe1b612fd96"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\node_modules\\@openzeppelin\\contracts\\access\\Ownable.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\node_modules\\@openzeppelin\\contracts\\access\\Ownable.sol",
            "filename": "Ownable.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\node_modules\\@openzeppelin\\contracts\\utils\\Context.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "Ownable": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": true,
                    "inherits": [
                        "is",
                        "Context"
                    ],
                    "state_variables": {
                        "_owner": {
                            "type": "address",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address private _owner;"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "internal",
                                "content": "constructor () internal{ address msgSender = _msgSender(); _owner = msgSender; emit OwnershipTransferred(address(0), msgSender);}",
                                "modifiers": [],
                                "parameters": [],
                                "returns": [],
                                "reads": [
                                    [
                                        "_owner",
                                        "",
                                        "Ownable"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_owner",
                                        "",
                                        "Ownable"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "0bccf07d36d4bad76be5c4148e55c230"
                            }
                        ],
                        "owner": [
                            {
                                "visibility": "public",
                                "content": "function owner() public view virtual returns (address){ return _owner;}",
                                "modifiers": [
                                    "view",
                                    "virtual"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_owner",
                                        "",
                                        "Ownable"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c000c329207e63e4293ec575de9eb28a"
                            }
                        ],
                        "renounceOwnership": [
                            {
                                "visibility": "public",
                                "content": "function renounceOwnership() public virtual onlyOwner{ emit OwnershipTransferred(_owner, address(0)); _owner = address(0);}",
                                "modifiers": [
                                    "virtual",
                                    "onlyOwner"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [
                                    [
                                        "_owner",
                                        "",
                                        "Ownable"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_owner",
                                        "",
                                        "Ownable"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Ownable.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "6bc3f7799b940307f12357aad7c15fa2"
                            }
                        ],
                        "transferOwnership": [
                            {
                                "visibility": "public",
                                "content": "function transferOwnership(address newOwner) public virtual onlyOwner{ require(newOwner != address(0), \"Ownable: new owner is the zero address\"); emit OwnershipTransferred(_owner, newOwner); _owner = newOwner;}",
                                "modifiers": [
                                    "virtual",
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "newOwner"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_owner",
                                        "",
                                        "Ownable"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_owner",
                                        "",
                                        "Ownable"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Ownable.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "4f1a2d71c9d0856b2600a43004342a3c"
                            }
                        ]
                    },
                    "modifiers": {
                        "onlyOwner": {
                            "parameters": [],
                            "content": "modifier onlyOwner(){ require(owner() == _msgSender(), \"Ownable: caller is not the owner\"); _;}",
                            "reads": [],
                            "writes": [],
                            "external_calls": {
                                "__set__": true,
                                "values": [
                                    "Ownable._msgSender",
                                    "Ownable.owner"
                                ]
                            },
                            "md5": "b92099c80fb280641bb32ab9f3280aeb"
                        }
                    },
                    "structs": {},
                    "events": {
                        "OwnershipTransferred": {
                            "event": "OwnershipTransferred",
                            "content": "OwnershipTransferred(address indexed previousOwner, address indexed newOwner)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "Ownable._msgSender": "00e29fff2bd07c51e23e94ddc6a504c4",
                "Ownable.owner": "c000c329207e63e4293ec575de9eb28a",
                "Ownable.onlyOwner": "b92099c80fb280641bb32ab9f3280aeb"
            },
            "md5": "7f9796aa35f18d9dece3ae90d308b814"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\node_modules\\@openzeppelin\\contracts\\cryptography\\ECDSA.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\node_modules\\@openzeppelin\\contracts\\cryptography\\ECDSA.sol",
            "filename": "ECDSA.sol",
            "imported_contracts": {},
            "contracts": {
                "ECDSA": {
                    "type": {
                        "__CT__": true,
                        "value": 2
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "recover": [
                            {
                                "visibility": "internal",
                                "content": "function recover(bytes32 hash, bytes memory signature) internal pure returns (address){ if (signature.length != 65){ revert(\"ECDSA: invalid signature length\");} bytes32 r; bytes32 s; uint8 v; assembly{ r := mload(add(signature, 0x20)) s := mload(add(signature, 0x40)) v := byte(0, mload(add(signature, 0x60)))} return recover(hash, v, r, s);}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "hash"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "signature"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ECDSA.recover"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "cb6fb709653b7ee97478f21c99cfb27f"
                            },
                            {
                                "visibility": "internal",
                                "content": "function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address){ require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \"ECDSA: invalid signature 's' value\"); require(v == 27 || v == 28, \"ECDSA: invalid signature 'v' value\"); address signer = ecrecover(hash, v, r, s); require(signer != address(0), \"ECDSA: invalid signature\"); return signer;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "hash"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "v"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "r"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "s"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ECDSA.recover"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "472fe1a258fd28ed435e69e94bd9b0c2"
                            }
                        ],
                        "toEthSignedMessageHash": [
                            {
                                "visibility": "internal",
                                "content": "function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32){ return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "hash"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "a5358195f58ef2ff5336b4eead23f34e"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "ECDSA.recover": "cb6fb709653b7ee97478f21c99cfb27f"
            },
            "md5": "1678d44c0994ae8baa1e8bab7ec20d7a"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\node_modules\\@openzeppelin\\contracts\\math\\SafeMath.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\node_modules\\@openzeppelin\\contracts\\math\\SafeMath.sol",
            "filename": "SafeMath.sol",
            "imported_contracts": {},
            "contracts": {
                "SafeMath": {
                    "type": {
                        "__CT__": true,
                        "value": 2
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "tryAdd": [
                            {
                                "visibility": "internal",
                                "content": "function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256){ uint256 c = a + b; if (c < a) return (false, 0); return (true, c);}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "a"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "b"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    },
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "46ce8334a4ead43a32dce5688a8a5d2b"
                            }
                        ],
                        "trySub": [
                            {
                                "visibility": "internal",
                                "content": "function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256){ if (b > a) return (false, 0); return (true, a - b);}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "a"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "b"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    },
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "1c1a32540e3a100292672418fcab8a72"
                            }
                        ],
                        "tryMul": [
                            {
                                "visibility": "internal",
                                "content": "function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256){ if (a == 0) return (true, 0); uint256 c = a * b; if (c / a != b) return (false, 0); return (true, c);}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "a"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "b"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    },
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "700407387793583c2fe6c35cf9581e84"
                            }
                        ],
                        "tryDiv": [
                            {
                                "visibility": "internal",
                                "content": "function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256){ if (b == 0) return (false, 0); return (true, a / b);}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "a"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "b"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    },
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "ecf8d5d646f961052d8509a2fe1c6222"
                            }
                        ],
                        "tryMod": [
                            {
                                "visibility": "internal",
                                "content": "function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256){ if (b == 0) return (false, 0); return (true, a % b);}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "a"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "b"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    },
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "67320fc63047d6ea1ea2f76cea3d1f40"
                            }
                        ],
                        "add": [
                            {
                                "visibility": "internal",
                                "content": "function add(uint256 a, uint256 b) internal pure returns (uint256){ uint256 c = a + b; require(c >= a, \"SafeMath: addition overflow\"); return c;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "a"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "b"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "b83a169007730f80a7fc79bee8748fff"
                            }
                        ],
                        "sub": [
                            {
                                "visibility": "internal",
                                "content": "function sub(uint256 a, uint256 b) internal pure returns (uint256){ require(b <= a, \"SafeMath: subtraction overflow\"); return a - b;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "a"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "b"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "aa6b5a83ac7caeaf81056eef5389fca5"
                            },
                            {
                                "visibility": "internal",
                                "content": "function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256){ require(b <= a, errorMessage); return a - b;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "a"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "b"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "errorMessage"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "bf37c866b6fedbd1f907bedc1db2ecf4"
                            }
                        ],
                        "mul": [
                            {
                                "visibility": "internal",
                                "content": "function mul(uint256 a, uint256 b) internal pure returns (uint256){ if (a == 0) return 0; uint256 c = a * b; require(c / a == b, \"SafeMath: multiplication overflow\"); return c;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "a"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "b"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "7c28c2dd07441fa54b1d03075792c91b"
                            }
                        ],
                        "div": [
                            {
                                "visibility": "internal",
                                "content": "function div(uint256 a, uint256 b) internal pure returns (uint256){ require(b > 0, \"SafeMath: division by zero\"); return a / b;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "a"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "b"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "412fb6a70380571ecfde09f14e0cc060"
                            },
                            {
                                "visibility": "internal",
                                "content": "function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256){ require(b > 0, errorMessage); return a / b;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "a"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "b"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "errorMessage"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "13421747919eac13f5a8a59c89f33ea9"
                            }
                        ],
                        "mod": [
                            {
                                "visibility": "internal",
                                "content": "function mod(uint256 a, uint256 b) internal pure returns (uint256){ require(b > 0, \"SafeMath: modulo by zero\"); return a % b;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "a"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "b"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "7c96bf46bac68fb10bb28ee253c94302"
                            },
                            {
                                "visibility": "internal",
                                "content": "function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256){ require(b > 0, errorMessage); return a % b;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "a"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "b"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "errorMessage"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "6355d2e145b4213072aa6bcb41536f79"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "640f23155e4d43145a6d34ef9d48af10"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\node_modules\\@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\node_modules\\@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol",
            "filename": "IERC20.sol",
            "imported_contracts": {},
            "contracts": {
                "IERC20": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "totalSupply": [
                            {
                                "visibility": "external",
                                "content": "function totalSupply() external view returns (uint256);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "5e1d12e61f4bf4b37161d9b684742570"
                            }
                        ],
                        "balanceOf": [
                            {
                                "visibility": "external",
                                "content": "function balanceOf(address account) external view returns (uint256);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "account"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "3ac17e7782366957c960d337a4a648cd"
                            }
                        ],
                        "transfer": [
                            {
                                "visibility": "external",
                                "content": "function transfer(address recipient, uint256 amount) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "recipient"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "98b540da9047ee99bce7fadde65d04b7"
                            }
                        ],
                        "allowance": [
                            {
                                "visibility": "external",
                                "content": "function allowance(address owner, address spender) external view returns (uint256);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "owner"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c93791d09d789aed33b9725d482af442"
                            }
                        ],
                        "approve": [
                            {
                                "visibility": "external",
                                "content": "function approve(address spender, uint256 amount) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "7c80d707df648dc123a10c69a1150edc"
                            }
                        ],
                        "transferFrom": [
                            {
                                "visibility": "external",
                                "content": "function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "sender"
                                    },
                                    {
                                        "type": "address",
                                        "name": "recipient"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c134d67e13a988b449de71dd226682ab"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {
                        "Transfer": {
                            "event": "Transfer",
                            "content": "Transfer(address indexed from, address indexed to, uint256 value)"
                        },
                        "Approval": {
                            "event": "Approval",
                            "content": "Approval(address indexed owner, address indexed spender, uint256 value)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": [
                        [
                            "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\packages\\contracts-bridge\\contracts\\vendored\\OZERC20.sol",
                            "ERC20"
                        ]
                    ]
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "6cc78857f9111cfd689a8f2a049d7c7d"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\node_modules\\@openzeppelin\\contracts\\utils\\Address.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\node_modules\\@openzeppelin\\contracts\\utils\\Address.sol",
            "filename": "Address.sol",
            "imported_contracts": {},
            "contracts": {
                "Address": {
                    "type": {
                        "__CT__": true,
                        "value": 2
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "isContract": [
                            {
                                "visibility": "internal",
                                "content": "function isContract(address account) internal view returns (bool){ uint256 size; assembly{ size := extcodesize(account)} return size > 0;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "account"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "b946110d999861cda9a1e7e7629934c3"
                            }
                        ],
                        "sendValue": [
                            {
                                "visibility": "internal",
                                "content": "function sendValue(address payable recipient, uint256 amount) internal{ require(address(this).balance >= amount, \"Address: insufficient balance\"); (bool success, ) = recipient.call{ value: amount} (\"\"); require(success, \"Address: unable to send value, recipient may have reverted\");}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address payable",
                                        "name": "recipient"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "4213f1701c2999f67f11de98a51e01f6"
                            }
                        ],
                        "functionCall": [
                            {
                                "visibility": "internal",
                                "content": "function functionCall(address target, bytes memory data) internal returns (bytes memory){ return functionCall(target, data, \"Address: low-level call failed\");}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "target"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "data"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Address.functionCall",
                                        "Address.functionCallWithValue"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "9bd9227b4301edafa41944a5a4cc096d"
                            },
                            {
                                "visibility": "internal",
                                "content": "function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory){ return functionCallWithValue(target, data, 0, errorMessage);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "target"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "data"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "errorMessage"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Address.functionCall",
                                        "Address.functionCallWithValue"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "735101b0fafaf16211fa1793190b6833"
                            }
                        ],
                        "functionCallWithValue": [
                            {
                                "visibility": "internal",
                                "content": "function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory){ return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "target"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "data"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Address.isContract",
                                        "Address.functionCallWithValue",
                                        "Address._verifyCallResult"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "9587564662cef65eec554844bed6f202"
                            },
                            {
                                "visibility": "internal",
                                "content": "function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory){ require(address(this).balance >= value, \"Address: insufficient balance for call\"); require(isContract(target), \"Address: call to non- contract \"); (bool success, bytes memory returndata) = target.call{ value: value} (data); return _verifyCallResult(success, returndata, errorMessage);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "target"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "data"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "errorMessage"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Address.isContract",
                                        "Address.functionCallWithValue",
                                        "Address._verifyCallResult"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "0756338a698cf2353736421e83671b07"
                            }
                        ],
                        "functionStaticCall": [
                            {
                                "visibility": "internal",
                                "content": "function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory){ return functionStaticCall(target, data, \"Address: low-level static call failed\");}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "target"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "data"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Address.isContract",
                                        "Address.functionStaticCall",
                                        "target.staticcall",
                                        "Address._verifyCallResult"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "994685aae3cda8dbbf0ffec7f803d344"
                            },
                            {
                                "visibility": "internal",
                                "content": "function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory){ require(isContract(target), \"Address: static call to non- contract \"); (bool success, bytes memory returndata) = target.staticcall(data); return _verifyCallResult(success, returndata, errorMessage);}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "target"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "data"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "errorMessage"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Address.isContract",
                                        "Address.functionStaticCall",
                                        "target.staticcall",
                                        "Address._verifyCallResult"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "c48c18ad7c0451e22168da4792c23d4b"
                            }
                        ],
                        "functionDelegateCall": [
                            {
                                "visibility": "internal",
                                "content": "function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory){ return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "target"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "data"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Address.isContract",
                                        "Address.functionDelegateCall",
                                        "target.delegatecall",
                                        "Address._verifyCallResult"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "219660ec0d55ecb352a5cec40b996f90"
                            },
                            {
                                "visibility": "internal",
                                "content": "function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory){ require(isContract(target), \"Address: delegate call to non- contract \"); (bool success, bytes memory returndata) = target.delegatecall(data); return _verifyCallResult(success, returndata, errorMessage);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "target"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "data"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "errorMessage"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Address.isContract",
                                        "Address.functionDelegateCall",
                                        "target.delegatecall",
                                        "Address._verifyCallResult"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "a00c6b7016c29f7cdedc4619490947ed"
                            }
                        ],
                        "_verifyCallResult": [
                            {
                                "visibility": "private",
                                "content": "function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory){ if (success){ return returndata;} else{ if (returndata.length > 0){ assembly{ let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size)}} else{ revert(errorMessage);}}}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bool",
                                        "name": "success"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "returndata"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "errorMessage"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "e6d84fd002b4ef76a1834f09ca48b18b"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "Address.functionCall": "9bd9227b4301edafa41944a5a4cc096d",
                "Address.functionCallWithValue": "9587564662cef65eec554844bed6f202",
                "Address.isContract": "b946110d999861cda9a1e7e7629934c3",
                "Address._verifyCallResult": "e6d84fd002b4ef76a1834f09ca48b18b",
                "Address.functionStaticCall": "994685aae3cda8dbbf0ffec7f803d344",
                "Address.functionDelegateCall": "219660ec0d55ecb352a5cec40b996f90"
            },
            "md5": "ac957078e851e5131319076987ad14e3"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\node_modules\\@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\node_modules\\@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol",
            "filename": "AddressUpgradeable.sol",
            "imported_contracts": {},
            "contracts": {
                "AddressUpgradeable": {
                    "type": {
                        "__CT__": true,
                        "value": 2
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "isContract": [
                            {
                                "visibility": "internal",
                                "content": "function isContract(address account) internal view returns (bool){ uint256 size; assembly{ size := extcodesize(account)} return size > 0;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "account"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "b946110d999861cda9a1e7e7629934c3"
                            }
                        ],
                        "sendValue": [
                            {
                                "visibility": "internal",
                                "content": "function sendValue(address payable recipient, uint256 amount) internal{ require(address(this).balance >= amount, \"Address: insufficient balance\"); (bool success, ) = recipient.call{ value: amount} (\"\"); require(success, \"Address: unable to send value, recipient may have reverted\");}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address payable",
                                        "name": "recipient"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "4213f1701c2999f67f11de98a51e01f6"
                            }
                        ],
                        "functionCall": [
                            {
                                "visibility": "internal",
                                "content": "function functionCall(address target, bytes memory data) internal returns (bytes memory){ return functionCall(target, data, \"Address: low-level call failed\");}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "target"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "data"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AddressUpgradeable.functionCallWithValue",
                                        "AddressUpgradeable.functionCall"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "9bd9227b4301edafa41944a5a4cc096d"
                            },
                            {
                                "visibility": "internal",
                                "content": "function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory){ return functionCallWithValue(target, data, 0, errorMessage);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "target"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "data"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "errorMessage"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AddressUpgradeable.functionCallWithValue",
                                        "AddressUpgradeable.functionCall"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "735101b0fafaf16211fa1793190b6833"
                            }
                        ],
                        "functionCallWithValue": [
                            {
                                "visibility": "internal",
                                "content": "function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory){ return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "target"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "data"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AddressUpgradeable.isContract",
                                        "AddressUpgradeable.functionCallWithValue",
                                        "AddressUpgradeable._verifyCallResult"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "9587564662cef65eec554844bed6f202"
                            },
                            {
                                "visibility": "internal",
                                "content": "function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory){ require(address(this).balance >= value, \"Address: insufficient balance for call\"); require(isContract(target), \"Address: call to non- contract \"); (bool success, bytes memory returndata) = target.call{ value: value} (data); return _verifyCallResult(success, returndata, errorMessage);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "target"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "data"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "errorMessage"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AddressUpgradeable.isContract",
                                        "AddressUpgradeable.functionCallWithValue",
                                        "AddressUpgradeable._verifyCallResult"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "0756338a698cf2353736421e83671b07"
                            }
                        ],
                        "functionStaticCall": [
                            {
                                "visibility": "internal",
                                "content": "function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory){ return functionStaticCall(target, data, \"Address: low-level static call failed\");}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "target"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "data"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AddressUpgradeable.functionStaticCall",
                                        "AddressUpgradeable.isContract",
                                        "AddressUpgradeable._verifyCallResult",
                                        "target.staticcall"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "994685aae3cda8dbbf0ffec7f803d344"
                            },
                            {
                                "visibility": "internal",
                                "content": "function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory){ require(isContract(target), \"Address: static call to non- contract \"); (bool success, bytes memory returndata) = target.staticcall(data); return _verifyCallResult(success, returndata, errorMessage);}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "target"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "data"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "errorMessage"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AddressUpgradeable.functionStaticCall",
                                        "AddressUpgradeable.isContract",
                                        "AddressUpgradeable._verifyCallResult",
                                        "target.staticcall"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "c48c18ad7c0451e22168da4792c23d4b"
                            }
                        ],
                        "_verifyCallResult": [
                            {
                                "visibility": "private",
                                "content": "function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory){ if (success){ return returndata;} else{ if (returndata.length > 0){ assembly{ let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size)}} else{ revert(errorMessage);}}}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bool",
                                        "name": "success"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "returndata"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "errorMessage"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "e6d84fd002b4ef76a1834f09ca48b18b"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "AddressUpgradeable.functionCallWithValue": "9587564662cef65eec554844bed6f202",
                "AddressUpgradeable.functionCall": "9bd9227b4301edafa41944a5a4cc096d",
                "AddressUpgradeable._verifyCallResult": "e6d84fd002b4ef76a1834f09ca48b18b",
                "AddressUpgradeable.isContract": "b946110d999861cda9a1e7e7629934c3",
                "AddressUpgradeable.functionStaticCall": "994685aae3cda8dbbf0ffec7f803d344"
            },
            "md5": "33f7806931940d55f142828d3d6a84ff"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\node_modules\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\node_modules\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol",
            "filename": "Initializable.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\node_modules\\@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "Initializable": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": true,
                    "inherits": [],
                    "state_variables": {
                        "_initialized": {
                            "type": "bool",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "bool private _initialized;"
                        },
                        "_initializing": {
                            "type": "bool",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "bool private _initializing;"
                        }
                    },
                    "functions": {
                        "_isConstructor": [
                            {
                                "visibility": "private",
                                "content": "function _isConstructor() private view returns (bool){ return !AddressUpgradeable.isContract(address(this));}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AddressUpgradeable.isContract"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "2df5a9c4c3f62b7f564f61d0928f903a"
                            }
                        ]
                    },
                    "modifiers": {
                        "initializer": {
                            "parameters": [],
                            "content": "modifier initializer(){ require(_initializing || _isConstructor() || !_initialized, \"Initializable: contract is already initialized\"); bool isTopLevelCall = !_initializing; if (isTopLevelCall){ _initializing = true; _initialized = true;} _; if (isTopLevelCall){ _initializing = false;}}",
                            "reads": [
                                [
                                    "_initialized",
                                    "",
                                    "Initializable"
                                ],
                                [
                                    "_initializing",
                                    "",
                                    "Initializable"
                                ]
                            ],
                            "writes": [
                                [
                                    "_initialized",
                                    "",
                                    "Initializable"
                                ],
                                [
                                    "_initializing",
                                    "",
                                    "Initializable"
                                ]
                            ],
                            "external_calls": {
                                "__set__": true,
                                "values": [
                                    "Initializable._isConstructor"
                                ]
                            },
                            "md5": "9a3941efe0712b157053363b75d3f33f"
                        }
                    },
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "Initializable._isConstructor": "2df5a9c4c3f62b7f564f61d0928f903a",
                "AddressUpgradeable.isContract": "b946110d999861cda9a1e7e7629934c3"
            },
            "md5": "2eea29ed865f9c035f7ea85ca0fc70b4"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\node_modules\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\node_modules\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol",
            "filename": "ContextUpgradeable.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\node_modules\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "ContextUpgradeable": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": true,
                    "inherits": [
                        "is",
                        "Initializable"
                    ],
                    "state_variables": {
                        "__gap": {
                            "type": "uint256[50]",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256[50] private __gap;"
                        }
                    },
                    "functions": {
                        "__Context_init": [
                            {
                                "visibility": "internal",
                                "content": "function __Context_init() internal initializer{ __Context_init_unchained();}",
                                "modifiers": [
                                    "initializer"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ContextUpgradeable.__Context_init_unchained",
                                        "ContextUpgradeable.initializer"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "ac041e388216097d4a3bd5bb532a04c2"
                            }
                        ],
                        "__Context_init_unchained": [
                            {
                                "visibility": "internal",
                                "content": "function __Context_init_unchained() internal initializer{}",
                                "modifiers": [
                                    "initializer"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ContextUpgradeable.initializer"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "ff90e0cbb896d9c015a83bf8000be465"
                            }
                        ],
                        "_msgSender": [
                            {
                                "visibility": "internal",
                                "content": "function _msgSender() internal view virtual returns (address payable){ return msg.sender;}",
                                "modifiers": [
                                    "view",
                                    "virtual"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address payable",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "00e29fff2bd07c51e23e94ddc6a504c4"
                            }
                        ],
                        "_msgData": [
                            {
                                "visibility": "internal",
                                "content": "function _msgData() internal view virtual returns (bytes memory){ this; return msg.data;}",
                                "modifiers": [
                                    "view",
                                    "virtual"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "85862d5484a7dade4fadbe2620ef8307"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "ContextUpgradeable.initializer": "9a3941efe0712b157053363b75d3f33f",
                "ContextUpgradeable.__Context_init_unchained": "ff90e0cbb896d9c015a83bf8000be465"
            },
            "md5": "9341e1e348d904fb33969859ac53db59"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\node_modules\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\node_modules\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol",
            "filename": "OwnableUpgradeable.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\node_modules\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\node_modules\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "OwnableUpgradeable": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": true,
                    "inherits": [
                        "is",
                        "Initializable",
                        "ContextUpgradeable"
                    ],
                    "state_variables": {
                        "_owner": {
                            "type": "address",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address private _owner;"
                        },
                        "__gap": {
                            "type": "uint256[49]",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256[49] private __gap;"
                        }
                    },
                    "functions": {
                        "__Ownable_init": [
                            {
                                "visibility": "internal",
                                "content": "function __Ownable_init() internal initializer{ __Context_init_unchained(); __Ownable_init_unchained();}",
                                "modifiers": [
                                    "initializer"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "OwnableUpgradeable.initializer",
                                        "OwnableUpgradeable.__Ownable_init_unchained",
                                        "OwnableUpgradeable.__Context_init_unchained"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "f7820e4676d5bcf96dd81f938b91f4f1"
                            }
                        ],
                        "__Ownable_init_unchained": [
                            {
                                "visibility": "internal",
                                "content": "function __Ownable_init_unchained() internal initializer{ address msgSender = _msgSender(); _owner = msgSender; emit OwnershipTransferred(address(0), msgSender);}",
                                "modifiers": [
                                    "initializer"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [
                                    [
                                        "_owner",
                                        "",
                                        "OwnableUpgradeable"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_owner",
                                        "",
                                        "OwnableUpgradeable"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "OwnableUpgradeable.initializer",
                                        "OwnableUpgradeable._msgSender"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "f3e7ad499953e1b52c55f3c5bb3e4ddb"
                            }
                        ],
                        "owner": [
                            {
                                "visibility": "public",
                                "content": "function owner() public view virtual returns (address){ return _owner;}",
                                "modifiers": [
                                    "view",
                                    "virtual"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_owner",
                                        "",
                                        "OwnableUpgradeable"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c000c329207e63e4293ec575de9eb28a"
                            }
                        ],
                        "renounceOwnership": [
                            {
                                "visibility": "public",
                                "content": "function renounceOwnership() public virtual onlyOwner{ emit OwnershipTransferred(_owner, address(0)); _owner = address(0);}",
                                "modifiers": [
                                    "virtual",
                                    "onlyOwner"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [
                                    [
                                        "_owner",
                                        "",
                                        "OwnableUpgradeable"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_owner",
                                        "",
                                        "OwnableUpgradeable"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "OwnableUpgradeable.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "6bc3f7799b940307f12357aad7c15fa2"
                            }
                        ],
                        "transferOwnership": [
                            {
                                "visibility": "public",
                                "content": "function transferOwnership(address newOwner) public virtual onlyOwner{ require(newOwner != address(0), \"Ownable: new owner is the zero address\"); emit OwnershipTransferred(_owner, newOwner); _owner = newOwner;}",
                                "modifiers": [
                                    "virtual",
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "newOwner"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_owner",
                                        "",
                                        "OwnableUpgradeable"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_owner",
                                        "",
                                        "OwnableUpgradeable"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "OwnableUpgradeable.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "4f1a2d71c9d0856b2600a43004342a3c"
                            }
                        ]
                    },
                    "modifiers": {
                        "onlyOwner": {
                            "parameters": [],
                            "content": "modifier onlyOwner(){ require(owner() == _msgSender(), \"Ownable: caller is not the owner\"); _;}",
                            "reads": [],
                            "writes": [],
                            "external_calls": {
                                "__set__": true,
                                "values": [
                                    "OwnableUpgradeable.owner",
                                    "OwnableUpgradeable._msgSender"
                                ]
                            },
                            "md5": "b92099c80fb280641bb32ab9f3280aeb"
                        }
                    },
                    "structs": {},
                    "events": {
                        "OwnershipTransferred": {
                            "event": "OwnershipTransferred",
                            "content": "OwnershipTransferred(address indexed previousOwner, address indexed newOwner)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "OwnableUpgradeable.__Ownable_init_unchained": "f3e7ad499953e1b52c55f3c5bb3e4ddb",
                "OwnableUpgradeable.initializer": "9a3941efe0712b157053363b75d3f33f",
                "OwnableUpgradeable.__Context_init_unchained": "ff90e0cbb896d9c015a83bf8000be465",
                "OwnableUpgradeable._msgSender": "00e29fff2bd07c51e23e94ddc6a504c4",
                "OwnableUpgradeable.owner": "c000c329207e63e4293ec575de9eb28a",
                "OwnableUpgradeable.onlyOwner": "b92099c80fb280641bb32ab9f3280aeb"
            },
            "md5": "090bb4a7c40899581e4087c0b8bd48c1"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\node_modules\\@summa-tx\\memview-sol\\contracts\\SafeMath.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\node_modules\\@summa-tx\\memview-sol\\contracts\\SafeMath.sol",
            "filename": "SafeMath.sol",
            "imported_contracts": {},
            "contracts": {
                "SafeMath": {
                    "type": {
                        "__CT__": true,
                        "value": 2
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "mul": [
                            {
                                "visibility": "internal",
                                "content": "function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c){ if (_a == 0){ return 0;} c = _a * _b; require(c / _a == _b, \"Overflow during multiplication.\"); return c;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "_a"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_b"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": "c"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "6aec8f1cbadaea5b2f1cfccfe6e89bd9"
                            }
                        ],
                        "div": [
                            {
                                "visibility": "internal",
                                "content": "function div(uint256 _a, uint256 _b) internal pure returns (uint256){ return _a / _b;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "_a"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_b"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "8001329ae324970dadaa2c83d5c3337f"
                            }
                        ],
                        "sub": [
                            {
                                "visibility": "internal",
                                "content": "function sub(uint256 _a, uint256 _b) internal pure returns (uint256){ require(_b <= _a, \"Underflow during subtraction.\"); return _a - _b;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "_a"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_b"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "1f8882d81597f7114cbc9b8154b46a61"
                            }
                        ],
                        "add": [
                            {
                                "visibility": "internal",
                                "content": "function add(uint256 _a, uint256 _b) internal pure returns (uint256 c){ c = _a + _b; require(c >= _a, \"Overflow during addition.\"); return c;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "_a"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_b"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": "c"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c72e7e17d470a7660f1090b66fbc39a8"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "a5f368e8b9c406afc8046c0592986ddb"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\node_modules\\@summa-tx\\memview-sol\\contracts\\TypedMemView.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\node_modules\\@summa-tx\\memview-sol\\contracts\\TypedMemView.sol",
            "filename": "TypedMemView.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\node_modules\\@openzeppelin\\contracts\\math\\SafeMath.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "SafeMath": {
                            "original_name": "SafeMath",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                }
            },
            "contracts": {
                "TypedMemView": {
                    "type": {
                        "__CT__": true,
                        "value": 2
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {
                        "NULL": {
                            "type": "bytes29",
                            "visibility": "public",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "hex\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"",
                            "content": "bytes29 public constant NULL = hex\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\";"
                        },
                        "LOW_12_MASK": {
                            "type": "uint256",
                            "visibility": "internal",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "0xffffffffffffffffffffffff",
                            "content": "uint256 constant LOW_12_MASK = 0xffffffffffffffffffffffff;"
                        },
                        "TWELVE_BYTES": {
                            "type": "uint8",
                            "visibility": "internal",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "96",
                            "content": "uint8 constant TWELVE_BYTES = 96;"
                        }
                    },
                    "functions": {
                        "nibbleHex": [
                            {
                                "visibility": "internal",
                                "content": "function nibbleHex(uint8 _b) internal pure returns (uint8 char){ uint8 _nibble = _b | 0xf0; if (_nibble == 0xf0){ return 0x30;} if (_nibble == 0xf1){ return 0x31;} if (_nibble == 0xf2){ return 0x32;} if (_nibble == 0xf3){ return 0x33;} if (_nibble == 0xf4){ return 0x34;} if (_nibble == 0xf5){ return 0x35;} if (_nibble == 0xf6){ return 0x36;} if (_nibble == 0xf7){ return 0x37;} if (_nibble == 0xf8){ return 0x38;} if (_nibble == 0xf9){ return 0x39;} if (_nibble == 0xfa){ return 0x61;} if (_nibble == 0xfb){ return 0x62;} if (_nibble == 0xfc){ return 0x63;} if (_nibble == 0xfd){ return 0x64;} if (_nibble == 0xfe){ return 0x65;} if (_nibble == 0xff){ return 0x66;}}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint8",
                                        "name": "_b"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint8",
                                        "name": "char"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "98d9644302e90f316037b641366e430f"
                            }
                        ],
                        "byteHex": [
                            {
                                "visibility": "internal",
                                "content": "function byteHex(uint8 _b) internal pure returns (uint16 encoded){ encoded |= nibbleHex(_b >> 4); encoded <<= 8; encoded |= nibbleHex(_b);}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint8",
                                        "name": "_b"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint16",
                                        "name": "encoded"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "TypedMemView.nibbleHex"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "59306c9f2f186fa10c82784e05604783"
                            }
                        ],
                        "encodeHex": [
                            {
                                "visibility": "internal",
                                "content": "function encodeHex(uint256 _b) internal pure returns (uint256 first, uint256 second){ for (uint8 i = 31; i > 15; i -= 1){ uint8 _byte = uint8(_b >> (i * 8)); first |= byteHex(_byte); if (i != 16){ first <<= 16;}} for (uint8 i = 15; i < 255; i -= 1){ uint8 _byte = uint8(_b >> (i * 8)); second |= byteHex(_byte); if (i != 0){ second <<= 16;}}}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "_b"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": "first"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "second"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "TypedMemView.byteHex"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "465ebc714263ab8f518e4e0afa7b5a2a"
                            }
                        ],
                        "reverseUint256": [
                            {
                                "visibility": "internal",
                                "content": "function reverseUint256(uint256 _b) internal pure returns (uint256 v){ v = _b; v = ((v >> 8) & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) | ((v & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) << 8); v = ((v >> 16) & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) | ((v & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) << 16); v = ((v >> 32) & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) | ((v & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) << 32); v = ((v >> 64) & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) | ((v & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) << 64); v = (v >> 128) | (v << 128);}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "_b"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": "v"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "b9cad1f21512418158ff263a57b654b0"
                            }
                        ],
                        "leftMask": [
                            {
                                "visibility": "private",
                                "content": "function leftMask(uint8 _len) private pure returns (uint256 mask){ assembly{ mask := sar( sub(_len, 1), 0x8000000000000000000000000000000000000000000000000000000000000000 )}}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint8",
                                        "name": "_len"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": "mask"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "79764db6a18c7d87226adfe11b1b149d"
                            }
                        ],
                        "nullView": [
                            {
                                "visibility": "internal",
                                "content": "function nullView() internal pure returns (bytes29){ return NULL;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "bytes29",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "NULL",
                                        "",
                                        "TypedMemView"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "d93a4661b703d460ae50e8eb251d218d"
                            }
                        ],
                        "isNull": [
                            {
                                "visibility": "internal",
                                "content": "function isNull(bytes29 memView) internal pure returns (bool){ return memView == NULL;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes29",
                                        "name": "memView"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "NULL",
                                        "",
                                        "TypedMemView"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "89357b764c60f8f556d9c6176e116652"
                            }
                        ],
                        "notNull": [
                            {
                                "visibility": "internal",
                                "content": "function notNull(bytes29 memView) internal pure returns (bool){ return !isNull(memView);}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes29",
                                        "name": "memView"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "TypedMemView.isNull"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "aeb564988f05d8c511bf64c42afed0c1"
                            }
                        ],
                        "isValid": [
                            {
                                "visibility": "internal",
                                "content": "function isValid(bytes29 memView) internal pure returns (bool ret){ if (typeOf(memView) == 0xffffffffff){ return false;} uint256 _end = end(memView); assembly{ ret := not(gt(_end, mload(0x40)))}}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes29",
                                        "name": "memView"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": "ret"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "TypedMemView.end",
                                        "TypedMemView.typeOf"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "31bad4c05de9584064a892c5dfa1a641"
                            }
                        ],
                        "assertValid": [
                            {
                                "visibility": "internal",
                                "content": "function assertValid(bytes29 memView) internal pure returns (bytes29){ require(isValid(memView), \"Validity assertion failed\"); return memView;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes29",
                                        "name": "memView"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes29",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "TypedMemView.isValid"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "9f99c57408f30c58b02b614ab9c64324"
                            }
                        ],
                        "isType": [
                            {
                                "visibility": "internal",
                                "content": "function isType(bytes29 memView, uint40 _expected) internal pure returns (bool){ return typeOf(memView) == _expected;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes29",
                                        "name": "memView"
                                    },
                                    {
                                        "type": "uint40",
                                        "name": "_expected"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "TypedMemView.typeOf"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "9f93711874e13cff5ed001ca1a021291"
                            }
                        ],
                        "assertType": [
                            {
                                "visibility": "internal",
                                "content": "function assertType(bytes29 memView, uint40 _expected) internal pure returns (bytes29){ if (!isType(memView, _expected)){ (, uint256 g) = encodeHex(uint256(typeOf(memView))); (, uint256 e) = encodeHex(uint256(_expected)); string memory err = string( abi.encodePacked( \"Type assertion failed. Got 0x\", uint80(g), \". Expected 0x\", uint80(e) ) ); revert(err);} return memView;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes29",
                                        "name": "memView"
                                    },
                                    {
                                        "type": "uint40",
                                        "name": "_expected"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes29",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "TypedMemView.encodeHex",
                                        "TypedMemView.isType",
                                        "TypedMemView.typeOf"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "888130918f9aa60e3f66f27a4b79efcf"
                            }
                        ],
                        "castTo": [
                            {
                                "visibility": "internal",
                                "content": "function castTo(bytes29 memView, uint40 _newType) internal pure returns (bytes29 newView){ assembly{ newView := or(newView, shr(40, shl(40, memView))) newView := or(newView, shl(216, _newType))}}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes29",
                                        "name": "memView"
                                    },
                                    {
                                        "type": "uint40",
                                        "name": "_newType"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes29",
                                        "name": "newView"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "54c8864a1195a6b6f17335b5bd30c42f"
                            }
                        ],
                        "unsafeBuildUnchecked": [
                            {
                                "visibility": "private",
                                "content": "function unsafeBuildUnchecked(uint256 _type, uint256 _loc, uint256 _len) private pure returns (bytes29 newView){ assembly{ newView := shl(96, or(newView, _type)) newView := shl(96, or(newView, _loc)) newView := shl(24, or(newView, _len))}}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "_type"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_loc"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_len"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes29",
                                        "name": "newView"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "7580ae44a99b5bb605d624e9c592bb14"
                            }
                        ],
                        "build": [
                            {
                                "visibility": "internal",
                                "content": "function build(uint256 _type, uint256 _loc, uint256 _len) internal pure returns (bytes29 newView){ uint256 _end = _loc.add(_len); assembly{ if gt(_end, mload(0x40)){ _end := 0}} if (_end == 0){ return NULL;} newView = unsafeBuildUnchecked(_type, _loc, _len);}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "_type"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_loc"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_len"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes29",
                                        "name": "newView"
                                    }
                                ],
                                "reads": [
                                    [
                                        "NULL",
                                        "",
                                        "TypedMemView"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "_loc.add",
                                        "TypedMemView.unsafeBuildUnchecked"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "e1ac7cf11f5a7a41478ed2dd10569396"
                            }
                        ],
                        "ref": [
                            {
                                "visibility": "internal",
                                "content": "function ref(bytes memory arr, uint40 newType) internal pure returns (bytes29){ uint256 _len = arr.length; uint256 _loc; assembly{ _loc := add(arr, 0x20)} return build(newType, _loc, _len);}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "arr"
                                    },
                                    {
                                        "type": "uint40",
                                        "name": "newType"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes29",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "TypedMemView.build"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "c7a57b580e04f57a10b3ed0353e6509f"
                            }
                        ],
                        "typeOf": [
                            {
                                "visibility": "internal",
                                "content": "function typeOf(bytes29 memView) internal pure returns (uint40 _type){ assembly{ _type := shr(216, memView)}}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes29",
                                        "name": "memView"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint40",
                                        "name": "_type"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "cba85008062db02e4df67f49002c23e8"
                            }
                        ],
                        "sameType": [
                            {
                                "visibility": "internal",
                                "content": "function sameType(bytes29 left, bytes29 right) internal pure returns (bool){ return (left ^ right) >> (2 * TWELVE_BYTES) == 0;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes29",
                                        "name": "left"
                                    },
                                    {
                                        "type": "bytes29",
                                        "name": "right"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "TWELVE_BYTES",
                                        "",
                                        "TypedMemView"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "2914752345f39de372da79e237ff011e"
                            }
                        ],
                        "loc": [
                            {
                                "visibility": "internal",
                                "content": "function loc(bytes29 memView) internal pure returns (uint96 _loc){ uint256 _mask = LOW_12_MASK; assembly{ _loc := and(shr(120, memView), _mask)}}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes29",
                                        "name": "memView"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint96",
                                        "name": "_loc"
                                    }
                                ],
                                "reads": [
                                    [
                                        "LOW_12_MASK",
                                        "",
                                        "TypedMemView"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "f679e0b01d8f463e83602dd9d4608e0c"
                            }
                        ],
                        "words": [
                            {
                                "visibility": "internal",
                                "content": "function words(bytes29 memView) internal pure returns (uint256){ return uint256(len(memView)).add(32) / 32;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes29",
                                        "name": "memView"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "TypedMemView.len"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "9b7ff7a7387b7febc372731c308de64a"
                            }
                        ],
                        "footprint": [
                            {
                                "visibility": "internal",
                                "content": "function footprint(bytes29 memView) internal pure returns (uint256){ return words(memView) * 32;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes29",
                                        "name": "memView"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "TypedMemView.words"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "b9bd4cebf71d16077e86fe578c37ea9d"
                            }
                        ],
                        "len": [
                            {
                                "visibility": "internal",
                                "content": "function len(bytes29 memView) internal pure returns (uint96 _len){ uint256 _mask = LOW_12_MASK; assembly{ _len := and(shr(24, memView), _mask)}}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes29",
                                        "name": "memView"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint96",
                                        "name": "_len"
                                    }
                                ],
                                "reads": [
                                    [
                                        "LOW_12_MASK",
                                        "",
                                        "TypedMemView"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "196ea94b0e45cc6b21da50b1986f5599"
                            }
                        ],
                        "end": [
                            {
                                "visibility": "internal",
                                "content": "function end(bytes29 memView) internal pure returns (uint256){ return loc(memView) + len(memView);}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes29",
                                        "name": "memView"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "TypedMemView.len",
                                        "TypedMemView.loc"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "850de023093564f6fed93aa0944eb98f"
                            }
                        ],
                        "slice": [
                            {
                                "visibility": "internal",
                                "content": "function slice(bytes29 memView, uint256 _index, uint256 _len, uint40 newType) internal pure returns (bytes29){ uint256 _loc = loc(memView); if (_loc.add(_index).add(_len) > end(memView)){ return NULL;} _loc = _loc.add(_index); return build(newType, _loc, _len);}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes29",
                                        "name": "memView"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_index"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_len"
                                    },
                                    {
                                        "type": "uint40",
                                        "name": "newType"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes29",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "NULL",
                                        "",
                                        "TypedMemView"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "_loc.add",
                                        "TypedMemView.end",
                                        "TypedMemView.build",
                                        "TypedMemView.loc"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "ba2c99c85d30596749d00c760233d4cf"
                            }
                        ],
                        "prefix": [
                            {
                                "visibility": "internal",
                                "content": "function prefix(bytes29 memView, uint256 _len, uint40 newType) internal pure returns (bytes29){ return slice(memView, 0, _len, newType);}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes29",
                                        "name": "memView"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_len"
                                    },
                                    {
                                        "type": "uint40",
                                        "name": "newType"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes29",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "TypedMemView.slice"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "4246920aaf9a9b5a888b2c1ef4879253"
                            }
                        ],
                        "postfix": [
                            {
                                "visibility": "internal",
                                "content": "function postfix(bytes29 memView, uint256 _len, uint40 newType) internal pure returns (bytes29){ return slice(memView, uint256(len(memView)).sub(_len), _len, newType);}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes29",
                                        "name": "memView"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_len"
                                    },
                                    {
                                        "type": "uint40",
                                        "name": "newType"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes29",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "TypedMemView.len",
                                        "TypedMemView.slice"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "f931c33d9592252d8a855de5f6dae595"
                            }
                        ],
                        "indexErrOverrun": [
                            {
                                "visibility": "internal",
                                "content": "function indexErrOverrun( uint256 _loc, uint256 _len, uint256 _index, uint256 _slice ) internal pure returns (string memory err){ (, uint256 a) = encodeHex(_loc); (, uint256 b) = encodeHex(_len); (, uint256 c) = encodeHex(_index); (, uint256 d) = encodeHex(_slice); err = string( abi.encodePacked( \"TypedMemView/index - Overran the view. Slice is at 0x\", uint48(a), \" with length 0x\", uint48(b), \". Attempted to index at offset 0x\", uint48(c), \" with length 0x\", uint48(d), \".\" ) );}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "_loc"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_len"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_index"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_slice"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "string memory",
                                        "name": "err"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "TypedMemView.encodeHex"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "2aa0f3495c17aebd715c26a4dc11526a"
                            }
                        ],
                        "index": [
                            {
                                "visibility": "internal",
                                "content": "function index(bytes29 memView, uint256 _index, uint8 _bytes) internal pure returns (bytes32 result){ if (_bytes == 0){ return bytes32(0);} if (_index.add(_bytes) > len(memView)){ revert(indexErrOverrun(loc(memView), len(memView), _index, uint256(_bytes)));} require(_bytes <= 32, \"TypedMemView/index - Attempted to index more than 32 bytes\"); uint8 bitLength = _bytes * 8; uint256 _loc = loc(memView); uint256 _mask = leftMask(bitLength); assembly{ result := and(mload(add(_loc, _index)), _mask)}}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes29",
                                        "name": "memView"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_index"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "_bytes"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": "result"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "TypedMemView.len",
                                        "TypedMemView.loc",
                                        "TypedMemView.indexErrOverrun",
                                        "TypedMemView.leftMask",
                                        "_index.add"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "e2fb805085975fa98541e91f629e4058"
                            }
                        ],
                        "indexUint": [
                            {
                                "visibility": "internal",
                                "content": "function indexUint(bytes29 memView, uint256 _index, uint8 _bytes) internal pure returns (uint256 result){ return uint256(index(memView, _index, _bytes)) >> ((32 - _bytes) * 8);}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes29",
                                        "name": "memView"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_index"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "_bytes"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": "result"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "TypedMemView.index"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "f5af7baee6bc8451ab77c0e49f9686cb"
                            }
                        ],
                        "indexLEUint": [
                            {
                                "visibility": "internal",
                                "content": "function indexLEUint(bytes29 memView, uint256 _index, uint8 _bytes) internal pure returns (uint256 result){ return reverseUint256(uint256(index(memView, _index, _bytes)));}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes29",
                                        "name": "memView"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_index"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "_bytes"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": "result"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "TypedMemView.index",
                                        "TypedMemView.reverseUint256"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "87a17ed5704635995d2ca5e843aa6bdd"
                            }
                        ],
                        "indexAddress": [
                            {
                                "visibility": "internal",
                                "content": "function indexAddress(bytes29 memView, uint256 _index) internal pure returns (address){ return address(uint160(indexUint(memView, _index, 20)));}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes29",
                                        "name": "memView"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_index"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "TypedMemView.indexUint"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "8f0c72ac6619a39edb44b0b8af597baa"
                            }
                        ],
                        "keccak": [
                            {
                                "visibility": "internal",
                                "content": "function keccak(bytes29 memView) internal pure returns (bytes32 digest){ uint256 _loc = loc(memView); uint256 _len = len(memView); assembly{ digest := keccak256(_loc, _len)}}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes29",
                                        "name": "memView"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": "digest"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "TypedMemView.len",
                                        "TypedMemView.loc"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "3d8664256774c511bdc5f2af4e715115"
                            }
                        ],
                        "sha2": [
                            {
                                "visibility": "internal",
                                "content": "function sha2(bytes29 memView) internal view returns (bytes32 digest){ uint256 _loc = loc(memView); uint256 _len = len(memView); assembly{ let ptr := mload(0x40) pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) digest := mload(ptr)}}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes29",
                                        "name": "memView"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": "digest"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "TypedMemView.len",
                                        "TypedMemView.loc"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "d0b35eb1874b075a8ec430875f0204d1"
                            }
                        ],
                        "hash160": [
                            {
                                "visibility": "internal",
                                "content": "function hash160(bytes29 memView) internal view returns (bytes20 digest){ uint256 _loc = loc(memView); uint256 _len = len(memView); assembly{ let ptr := mload(0x40) pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) pop(staticcall(gas(), 3, ptr, 0x20, ptr, 0x20)) digest := mload(add(ptr, 0xc))}}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes29",
                                        "name": "memView"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes20",
                                        "name": "digest"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "TypedMemView.len",
                                        "TypedMemView.loc"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "ebb0a7e7d47989b00b18d09c277547e8"
                            }
                        ],
                        "hash256": [
                            {
                                "visibility": "internal",
                                "content": "function hash256(bytes29 memView) internal view returns (bytes32 digest){ uint256 _loc = loc(memView); uint256 _len = len(memView); assembly{ let ptr := mload(0x40) pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) pop(staticcall(gas(), 2, ptr, 0x20, ptr, 0x20)) digest := mload(ptr)}}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes29",
                                        "name": "memView"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": "digest"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "TypedMemView.len",
                                        "TypedMemView.loc"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "95deeda78cd0474ca178c64b6343b487"
                            }
                        ],
                        "untypedEqual": [
                            {
                                "visibility": "internal",
                                "content": "function untypedEqual(bytes29 left, bytes29 right) internal pure returns (bool){ return (loc(left) == loc(right) && len(left) == len(right)) || keccak(left) == keccak(right);}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes29",
                                        "name": "left"
                                    },
                                    {
                                        "type": "bytes29",
                                        "name": "right"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "TypedMemView.len",
                                        "TypedMemView.loc",
                                        "TypedMemView.keccak"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "00518f0fceb7df43753780599b9465e2"
                            }
                        ],
                        "untypedNotEqual": [
                            {
                                "visibility": "internal",
                                "content": "function untypedNotEqual(bytes29 left, bytes29 right) internal pure returns (bool){ return !untypedEqual(left, right);}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes29",
                                        "name": "left"
                                    },
                                    {
                                        "type": "bytes29",
                                        "name": "right"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "TypedMemView.untypedEqual"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "2bb69d031a6da27eda911cc3a693f0bd"
                            }
                        ],
                        "equal": [
                            {
                                "visibility": "internal",
                                "content": "function equal(bytes29 left, bytes29 right) internal pure returns (bool){ return left == right || (typeOf(left) == typeOf(right) && keccak(left) == keccak(right));}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes29",
                                        "name": "left"
                                    },
                                    {
                                        "type": "bytes29",
                                        "name": "right"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "TypedMemView.typeOf",
                                        "TypedMemView.keccak"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "8ed2d74775f487f9e04279d0f633a53f"
                            }
                        ],
                        "notEqual": [
                            {
                                "visibility": "internal",
                                "content": "function notEqual(bytes29 left, bytes29 right) internal pure returns (bool){ return !equal(left, right);}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes29",
                                        "name": "left"
                                    },
                                    {
                                        "type": "bytes29",
                                        "name": "right"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "TypedMemView.equal"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "33673651703482bfa7bb21d438a3bd4e"
                            }
                        ],
                        "unsafeCopyTo": [
                            {
                                "visibility": "private",
                                "content": "function unsafeCopyTo(bytes29 memView, uint256 _newLoc) private view returns (bytes29 written){ require(notNull(memView), \"TypedMemView/copyTo - Null pointer deref\"); require(isValid(memView), \"TypedMemView/copyTo - Invalid pointer deref\"); uint256 _len = len(memView); uint256 _oldLoc = loc(memView); uint256 ptr; assembly{ ptr := mload(0x40) if gt(ptr, _newLoc){ revert(0x60, 0x20)} pop(staticcall(gas(), 4, _oldLoc, _len, _newLoc, _len))} written = unsafeBuildUnchecked(typeOf(memView), _newLoc, _len);}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes29",
                                        "name": "memView"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_newLoc"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes29",
                                        "name": "written"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "TypedMemView.len",
                                        "TypedMemView.loc",
                                        "TypedMemView.unsafeBuildUnchecked",
                                        "TypedMemView.isValid",
                                        "TypedMemView.notNull",
                                        "TypedMemView.typeOf"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "9155bbd4b81fb4e60e573b42cce731c0"
                            }
                        ],
                        "clone": [
                            {
                                "visibility": "internal",
                                "content": "function clone(bytes29 memView) internal view returns (bytes memory ret){ uint256 ptr; uint256 _len = len(memView); assembly{ ptr := mload(0x40) ret := ptr} unsafeCopyTo(memView, ptr + 0x20); assembly{ mstore(0x40, add(add(ptr, _len), 0x20)) mstore(ptr, _len)}}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes29",
                                        "name": "memView"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": "ret"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "TypedMemView.unsafeCopyTo",
                                        "TypedMemView.len"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "f6a872ae6fed030f6a30c6da8b7bb616"
                            }
                        ],
                        "unsafeJoin": [
                            {
                                "visibility": "private",
                                "content": "function unsafeJoin(bytes29[] memory memViews, uint256 _location) private view returns (bytes29 unsafeView){ assembly{ let ptr := mload(0x40) if gt(ptr, _location){ revert(0x60, 0x20)}} uint256 _offset = 0; for (uint256 i = 0; i < memViews.length; i ++){ bytes29 memView = memViews[i]; unsafeCopyTo(memView, _location + _offset); _offset += len(memView);} unsafeView = unsafeBuildUnchecked(0, _location, _offset);}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes29[] memory",
                                        "name": "memViews"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_location"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes29",
                                        "name": "unsafeView"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "TypedMemView.unsafeCopyTo",
                                        "TypedMemView.unsafeBuildUnchecked",
                                        "TypedMemView.len"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "eac9634dafa9446785f3417e89707584"
                            }
                        ],
                        "joinKeccak": [
                            {
                                "visibility": "internal",
                                "content": "function joinKeccak(bytes29[] memory memViews) internal view returns (bytes32){ uint256 ptr; assembly{ ptr := mload(0x40)} return keccak(unsafeJoin(memViews, ptr));}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes29[] memory",
                                        "name": "memViews"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "TypedMemView.unsafeJoin",
                                        "TypedMemView.keccak"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "1af0916f6b03e2def5650489d5d929d3"
                            }
                        ],
                        "joinSha2": [
                            {
                                "visibility": "internal",
                                "content": "function joinSha2(bytes29[] memory memViews) internal view returns (bytes32){ uint256 ptr; assembly{ ptr := mload(0x40)} return sha2(unsafeJoin(memViews, ptr));}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes29[] memory",
                                        "name": "memViews"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "TypedMemView.sha2",
                                        "TypedMemView.unsafeJoin"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "feea696e961568fa3f559b269a693e74"
                            }
                        ],
                        "join": [
                            {
                                "visibility": "internal",
                                "content": "function join(bytes29[] memory memViews) internal view returns (bytes memory ret){ uint256 ptr; assembly{ ptr := mload(0x40)} bytes29 _newView = unsafeJoin(memViews, ptr + 0x20); uint256 _written = len(_newView); uint256 _footprint = footprint(_newView); assembly{ mstore(ptr, _written) mstore(0x40, add(add(ptr, _footprint), 0x20)) ret := ptr}}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes29[] memory",
                                        "name": "memViews"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": "ret"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "TypedMemView.len",
                                        "TypedMemView.footprint",
                                        "TypedMemView.unsafeJoin"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "9e941f046289360ddb7037dc397969b5"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "uint256": "SafeMath"
                    }
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "TypedMemView.nibbleHex": "98d9644302e90f316037b641366e430f",
                "TypedMemView.byteHex": "59306c9f2f186fa10c82784e05604783",
                "TypedMemView.isNull": "89357b764c60f8f556d9c6176e116652",
                "TypedMemView.end": "850de023093564f6fed93aa0944eb98f",
                "TypedMemView.typeOf": "cba85008062db02e4df67f49002c23e8",
                "TypedMemView.isValid": "31bad4c05de9584064a892c5dfa1a641",
                "TypedMemView.isType": "9f93711874e13cff5ed001ca1a021291",
                "TypedMemView.encodeHex": "465ebc714263ab8f518e4e0afa7b5a2a",
                "TypedMemView.unsafeBuildUnchecked": "7580ae44a99b5bb605d624e9c592bb14",
                "_loc.add": "b83a169007730f80a7fc79bee8748fff",
                "TypedMemView.build": "e1ac7cf11f5a7a41478ed2dd10569396",
                "TypedMemView.len": "196ea94b0e45cc6b21da50b1986f5599",
                "TypedMemView.words": "9b7ff7a7387b7febc372731c308de64a",
                "TypedMemView.loc": "f679e0b01d8f463e83602dd9d4608e0c",
                "TypedMemView.slice": "ba2c99c85d30596749d00c760233d4cf",
                "TypedMemView.indexErrOverrun": "2aa0f3495c17aebd715c26a4dc11526a",
                "TypedMemView.leftMask": "79764db6a18c7d87226adfe11b1b149d",
                "_index.add": "b83a169007730f80a7fc79bee8748fff",
                "TypedMemView.index": "e2fb805085975fa98541e91f629e4058",
                "TypedMemView.reverseUint256": "b9cad1f21512418158ff263a57b654b0",
                "TypedMemView.indexUint": "f5af7baee6bc8451ab77c0e49f9686cb",
                "TypedMemView.keccak": "3d8664256774c511bdc5f2af4e715115",
                "TypedMemView.untypedEqual": "00518f0fceb7df43753780599b9465e2",
                "TypedMemView.equal": "8ed2d74775f487f9e04279d0f633a53f",
                "TypedMemView.notNull": "aeb564988f05d8c511bf64c42afed0c1",
                "TypedMemView.unsafeCopyTo": "9155bbd4b81fb4e60e573b42cce731c0",
                "TypedMemView.unsafeJoin": "eac9634dafa9446785f3417e89707584",
                "TypedMemView.sha2": "d0b35eb1874b075a8ec430875f0204d1",
                "TypedMemView.footprint": "b9bd4cebf71d16077e86fe578c37ea9d"
            },
            "md5": "9be1810f6fee43d710ad52e06a9e5acc"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\packages\\contracts-bridge\\contracts\\BridgeMessage.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\packages\\contracts-bridge\\contracts\\BridgeMessage.sol",
            "filename": "BridgeMessage.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\node_modules\\@summa-tx\\memview-sol\\contracts\\TypedMemView.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "TypedMemView": {
                            "original_name": "TypedMemView",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                }
            },
            "contracts": {
                "BridgeMessage": {
                    "type": {
                        "__CT__": true,
                        "value": 2
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {
                        "TOKEN_ID_LEN": {
                            "type": "uint256",
                            "visibility": "private",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "36",
                            "content": "uint256 private constant TOKEN_ID_LEN = 36;"
                        },
                        "IDENTIFIER_LEN": {
                            "type": "uint256",
                            "visibility": "private",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "1",
                            "content": "uint256 private constant IDENTIFIER_LEN = 1;"
                        },
                        "TRANSFER_LEN": {
                            "type": "uint256",
                            "visibility": "private",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "97",
                            "content": "uint256 private constant TRANSFER_LEN = 97;"
                        },
                        "MIN_TRANSFER_HOOK_LEN": {
                            "type": "uint256",
                            "visibility": "private",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "129",
                            "content": "uint256 private constant MIN_TRANSFER_HOOK_LEN = 129;"
                        }
                    },
                    "functions": {
                        "isValidAction": [
                            {
                                "visibility": "internal",
                                "content": "function isValidAction(bytes29 _action) internal pure returns (bool){ return isTransfer(_action) || isTransferToHook(_action);}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes29",
                                        "name": "_action"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BridgeMessage.isTransferToHook",
                                        "BridgeMessage.isTransfer"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "5c7d8188070eaeb2ddbc347187d83a0b"
                            }
                        ],
                        "isValidMessageLength": [
                            {
                                "visibility": "internal",
                                "content": "function isValidMessageLength(bytes29 _view) internal pure returns (bool){ uint256 _len = _view.len(); return _len == TOKEN_ID_LEN + TRANSFER_LEN || _len >= TOKEN_ID_LEN + MIN_TRANSFER_HOOK_LEN;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes29",
                                        "name": "_view"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "TOKEN_ID_LEN",
                                        "",
                                        "BridgeMessage"
                                    ],
                                    [
                                        "TRANSFER_LEN",
                                        "",
                                        "BridgeMessage"
                                    ],
                                    [
                                        "MIN_TRANSFER_HOOK_LEN",
                                        "",
                                        "BridgeMessage"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "_view.len"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "e959786da823fb61f816e26c6901e9c7"
                            }
                        ],
                        "formatMessage": [
                            {
                                "visibility": "internal",
                                "content": "function formatMessage(bytes29 _tokenId, bytes29 _action) internal view typeAssert(_tokenId, Types.TokenId) returns (bytes memory){ require(isValidAction(_action), \"!action\"); bytes29[] memory _views = new bytes29[](2); _views[0] = _tokenId; _views[1] = _action; return TypedMemView.join(_views);}",
                                "modifiers": [
                                    "view",
                                    "typeAssert(_tokenId, Types.TokenId)"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes29",
                                        "name": "_tokenId"
                                    },
                                    {
                                        "type": "bytes29",
                                        "name": "_action"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BridgeMessage.isValidAction",
                                        "BridgeMessage.typeAssert",
                                        "TypedMemView.join"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "5108d5137bdb8c262957408429a2589e"
                            }
                        ],
                        "messageType": [
                            {
                                "visibility": "internal",
                                "content": "function messageType(bytes29 _view) internal pure returns (Types){ return Types(uint8(_view.typeOf()));}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes29",
                                        "name": "_view"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "Types",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "_view.typeOf",
                                        "BridgeMessage.Types"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "70165bf32fadf6f47cf5efa5bb5c24fb"
                            }
                        ],
                        "isType": [
                            {
                                "visibility": "internal",
                                "content": "function isType(bytes29 _action, Types _type) internal pure returns (bool){ return actionType(_action) == uint8(_type) && messageType(_action) == _type;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes29",
                                        "name": "_action"
                                    },
                                    {
                                        "type": "Types",
                                        "name": "_type"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BridgeMessage.actionType",
                                        "BridgeMessage.messageType"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "d2dfeaabe226c0ec5eac98f48be8f85a"
                            }
                        ],
                        "isTransfer": [
                            {
                                "visibility": "internal",
                                "content": "function isTransfer(bytes29 _action) internal pure returns (bool){ return isType(_action, Types.Transfer);}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes29",
                                        "name": "_action"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BridgeMessage.isType"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "c2ba60679f354b2c2a126493354f9f2d"
                            }
                        ],
                        "isTransferToHook": [
                            {
                                "visibility": "internal",
                                "content": "function isTransferToHook(bytes29 _action) internal pure returns (bool){ return isType(_action, Types.TransferToHook);}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes29",
                                        "name": "_action"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BridgeMessage.isType"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "3bc048e152c710aee00f964a075201d0"
                            }
                        ],
                        "formatTransfer": [
                            {
                                "visibility": "internal",
                                "content": "function formatTransfer( bytes32 _to, uint256 _amnt, bytes32 _detailsHash ) internal pure returns (bytes29){ return abi.encodePacked(Types.Transfer, _to, _amnt, _detailsHash).ref( uint40(Types.Transfer) );}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "_to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_amnt"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "_detailsHash"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes29",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "ce0e95b87dd250dd4fe41a828d22d7e2"
                            }
                        ],
                        "formatTransferToHook": [
                            {
                                "visibility": "internal",
                                "content": "function formatTransferToHook( bytes32 _hook, uint256 _amnt, bytes32 _detailsHash, bytes32 _sender, bytes memory _extraData ) internal pure returns (bytes29){ return abi .encodePacked( Types.TransferToHook, _hook, _amnt, _detailsHash, _sender, _extraData ) .ref(uint40(Types.TransferToHook));}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "_hook"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_amnt"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "_detailsHash"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "_sender"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "_extraData"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes29",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "205ca67b35f2948dc0beaf0ba1c70eae"
                            }
                        ],
                        "formatTokenId": [
                            {
                                "visibility": "internal",
                                "content": "function formatTokenId(TokenId memory _tokenId) internal pure returns (bytes29){ return formatTokenId(_tokenId.domain, _tokenId.id);}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "TokenId memory",
                                        "name": "_tokenId"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes29",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BridgeMessage.formatTokenId"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "4d0ea67ccb6c72c855275e76edacef7b"
                            },
                            {
                                "visibility": "internal",
                                "content": "function formatTokenId(uint32 _domain, bytes32 _id) internal pure returns (bytes29){ return abi.encodePacked(_domain, _id).ref(uint40(Types.TokenId));}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint32",
                                        "name": "_domain"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "_id"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes29",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BridgeMessage.formatTokenId"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "a1a92bc61799a5176efaf6614507d5f4"
                            }
                        ],
                        "getDetailsHash": [
                            {
                                "visibility": "internal",
                                "content": "function getDetailsHash( string memory _name, string memory _symbol, uint8 _decimals ) internal pure returns (bytes32){ return keccak256( abi.encodePacked( bytes(_name).length, _name, bytes(_symbol).length, _symbol, _decimals ) );}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "string memory",
                                        "name": "_name"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "_symbol"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "_decimals"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "abb0821f998132bdc45012fa470ede94"
                            }
                        ],
                        "domain": [
                            {
                                "visibility": "internal",
                                "content": "function domain(bytes29 _tokenId) internal pure typeAssert(_tokenId, Types.TokenId) returns (uint32){ return uint32(_tokenId.indexUint(0, 4));}",
                                "modifiers": [
                                    "pure",
                                    "typeAssert(_tokenId, Types.TokenId)"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes29",
                                        "name": "_tokenId"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint32",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "_tokenId.indexUint",
                                        "BridgeMessage.typeAssert"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "6fb616fbfc33b08f19f3f28d6928884e"
                            }
                        ],
                        "id": [
                            {
                                "visibility": "internal",
                                "content": "function id(bytes29 _tokenId) internal pure typeAssert(_tokenId, Types.TokenId) returns (bytes32){ return _tokenId.index(4, 32);}",
                                "modifiers": [
                                    "pure",
                                    "typeAssert(_tokenId, Types.TokenId)"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes29",
                                        "name": "_tokenId"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "_tokenId.index",
                                        "BridgeMessage.typeAssert"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "e90bc49f04b1f41746ab93c9227e72bb"
                            }
                        ],
                        "evmId": [
                            {
                                "visibility": "internal",
                                "content": "function evmId(bytes29 _tokenId) internal pure typeAssert(_tokenId, Types.TokenId) returns (address){ return _tokenId.indexAddress(16);}",
                                "modifiers": [
                                    "pure",
                                    "typeAssert(_tokenId, Types.TokenId)"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes29",
                                        "name": "_tokenId"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "_tokenId.indexAddress",
                                        "BridgeMessage.typeAssert"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "3673c4bf35af31360f9512c196ae0db5"
                            }
                        ],
                        "msgType": [
                            {
                                "visibility": "internal",
                                "content": "function msgType(bytes29 _message) internal pure returns (uint8){ return uint8(_message.indexUint(TOKEN_ID_LEN, 1));}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes29",
                                        "name": "_message"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint8",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "TOKEN_ID_LEN",
                                        "",
                                        "BridgeMessage"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "_message.indexUint"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "2c779652364abe048c92f4b738ba3b06"
                            }
                        ],
                        "actionType": [
                            {
                                "visibility": "internal",
                                "content": "function actionType(bytes29 _action) internal pure returns (uint8){ return uint8(_action.indexUint(0, 1));}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes29",
                                        "name": "_action"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint8",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "_action.indexUint"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "8187a73c3888fe689ed02faba25f05b6"
                            }
                        ],
                        "recipient": [
                            {
                                "visibility": "internal",
                                "content": "function recipient(bytes29 _transferAction) internal pure typeAssert(_transferAction, Types.Transfer) returns (bytes32){ return _transferAction.index(1, 32);}",
                                "modifiers": [
                                    "pure",
                                    "typeAssert(_transferAction, Types.Transfer)"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes29",
                                        "name": "_transferAction"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "_transferAction.index",
                                        "BridgeMessage.typeAssert"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "3169bab5cbd04c155e5fe35e6bbfd9f3"
                            }
                        ],
                        "evmRecipient": [
                            {
                                "visibility": "internal",
                                "content": "function evmRecipient(bytes29 _transferAction) internal pure typeAssert(_transferAction, Types.Transfer) returns (address){ return _transferAction.indexAddress(13);}",
                                "modifiers": [
                                    "pure",
                                    "typeAssert(_transferAction, Types.Transfer)"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes29",
                                        "name": "_transferAction"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BridgeMessage.typeAssert",
                                        "_transferAction.indexAddress"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "c41375989af5543eebb85c21717923b9"
                            }
                        ],
                        "amnt": [
                            {
                                "visibility": "internal",
                                "content": "function amnt(bytes29 _transferAction) internal pure returns (uint256){ return _transferAction.indexUint(33, 32);}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes29",
                                        "name": "_transferAction"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "_transferAction.indexUint"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "e0e98e05aea954668ddbfab14c62d1e9"
                            }
                        ],
                        "detailsHash": [
                            {
                                "visibility": "internal",
                                "content": "function detailsHash(bytes29 _transferAction) internal pure returns (bytes32){ return _transferAction.index(65, 32);}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes29",
                                        "name": "_transferAction"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "_transferAction.index"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "a9a8db7c48f950745d571d895aa5efc7"
                            }
                        ],
                        "tokenId": [
                            {
                                "visibility": "internal",
                                "content": "function tokenId(bytes29 _message) internal pure typeAssert(_message, Types.Message) returns (bytes29){ return _message.slice(0, TOKEN_ID_LEN, uint40(Types.TokenId));}",
                                "modifiers": [
                                    "pure",
                                    "typeAssert(_message, Types.Message)"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes29",
                                        "name": "_message"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes29",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "TOKEN_ID_LEN",
                                        "",
                                        "BridgeMessage"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BridgeMessage.typeAssert",
                                        "_message.slice"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "e4ed3d666a90b2b3448efb4ad7226fe0"
                            }
                        ],
                        "evmHook": [
                            {
                                "visibility": "internal",
                                "content": "function evmHook(bytes29 _transferAction) internal pure typeAssert(_transferAction, Types.TransferToHook) returns (address){ return _transferAction.indexAddress(13);}",
                                "modifiers": [
                                    "pure",
                                    "typeAssert(_transferAction, Types.TransferToHook)"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes29",
                                        "name": "_transferAction"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BridgeMessage.typeAssert",
                                        "_transferAction.indexAddress"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "d995249c84a396ce7b0c9991c642d4a9"
                            }
                        ],
                        "sender": [
                            {
                                "visibility": "internal",
                                "content": "function sender(bytes29 _transferAction) internal pure typeAssert(_transferAction, Types.TransferToHook) returns (bytes32){ return _transferAction.index(97, 32);}",
                                "modifiers": [
                                    "pure",
                                    "typeAssert(_transferAction, Types.TransferToHook)"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes29",
                                        "name": "_transferAction"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "_transferAction.index",
                                        "BridgeMessage.typeAssert"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "24e9d138d1d045e88d3d5911a0447040"
                            }
                        ],
                        "extraData": [
                            {
                                "visibility": "internal",
                                "content": "function extraData(bytes29 _transferAction) internal pure typeAssert(_transferAction, Types.TransferToHook) returns (bytes29){ return _transferAction.slice( MIN_TRANSFER_HOOK_LEN, _transferAction.len() - MIN_TRANSFER_HOOK_LEN, uint40(Types.ExtraData) );}",
                                "modifiers": [
                                    "pure",
                                    "typeAssert(_transferAction, Types.TransferToHook)"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes29",
                                        "name": "_transferAction"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes29",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "MIN_TRANSFER_HOOK_LEN",
                                        "",
                                        "BridgeMessage"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "_transferAction.len",
                                        "BridgeMessage.typeAssert",
                                        "_transferAction.slice"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "c43796ddedb2b36cb56333b95e7e59b4"
                            }
                        ],
                        "action": [
                            {
                                "visibility": "internal",
                                "content": "function action(bytes29 _message) internal pure typeAssert(_message, Types.Message) returns (bytes29){ uint256 _actionLen = _message.len() - TOKEN_ID_LEN; uint40 _type = uint40(msgType(_message)); return _message.slice(TOKEN_ID_LEN, _actionLen, _type);}",
                                "modifiers": [
                                    "pure",
                                    "typeAssert(_message, Types.Message)"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes29",
                                        "name": "_message"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes29",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "TOKEN_ID_LEN",
                                        "",
                                        "BridgeMessage"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BridgeMessage.msgType",
                                        "_message.len",
                                        "BridgeMessage.typeAssert",
                                        "_message.slice"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "f580cee5264cf4ccfa24bcc10a19e2fd"
                            }
                        ],
                        "tryAsMessage": [
                            {
                                "visibility": "internal",
                                "content": "function tryAsMessage(bytes29 _message) internal pure returns (bytes29){ if (isValidMessageLength(_message)){ return _message.castTo(uint40(Types.Message));} return TypedMemView.nullView();}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes29",
                                        "name": "_message"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes29",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BridgeMessage.isValidMessageLength",
                                        "_message.castTo",
                                        "TypedMemView.nullView"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "bf3b2a2c7e917da2f73c5e3d1ca611a3"
                            }
                        ],
                        "mustBeMessage": [
                            {
                                "visibility": "internal",
                                "content": "function mustBeMessage(bytes29 _view) internal pure returns (bytes29){ return tryAsMessage(_view).assertValid();}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes29",
                                        "name": "_view"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes29",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BridgeMessage.tryAsMessage"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "e93444fd29896fc70b696506ef73d115"
                            }
                        ]
                    },
                    "modifiers": {
                        "typeAssert": {
                            "parameters": [
                                {
                                    "type": "bytes29",
                                    "name": "_view"
                                },
                                {
                                    "type": "Types",
                                    "name": "_t"
                                }
                            ],
                            "content": "modifier typeAssert(bytes29 _view, Types _t){ _view.assertType(uint40(_t)); _;}",
                            "reads": [],
                            "writes": [],
                            "external_calls": {
                                "__set__": true,
                                "values": [
                                    "_view.assertType"
                                ]
                            },
                            "md5": "26e96f27f34887b75dfb544d02de222d"
                        }
                    },
                    "structs": {
                        "TokenId": {
                            "content": "TokenId{ uint32 domain; bytes32 id;}"
                        }
                    },
                    "events": {},
                    "enums": {
                        "Types": {
                            "content": "Types{ Invalid, TokenId, Message, Transfer, DeprecatedFastTransfer, TransferToHook, ExtraData}"
                        }
                    },
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "bytes": "TypedMemView",
                        "bytes29": "TypedMemView"
                    }
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "_view.assertType": "888130918f9aa60e3f66f27a4b79efcf",
                "BridgeMessage.isTransferToHook": "3bc048e152c710aee00f964a075201d0",
                "BridgeMessage.isTransfer": "c2ba60679f354b2c2a126493354f9f2d",
                "_view.len": "196ea94b0e45cc6b21da50b1986f5599",
                "TypedMemView.join": "9e941f046289360ddb7037dc397969b5",
                "BridgeMessage.isValidAction": "5c7d8188070eaeb2ddbc347187d83a0b",
                "BridgeMessage.typeAssert": "26e96f27f34887b75dfb544d02de222d",
                "_view.typeOf": "cba85008062db02e4df67f49002c23e8",
                "BridgeMessage.messageType": "70165bf32fadf6f47cf5efa5bb5c24fb",
                "BridgeMessage.actionType": "8187a73c3888fe689ed02faba25f05b6",
                "BridgeMessage.isType": "d2dfeaabe226c0ec5eac98f48be8f85a",
                "BridgeMessage.formatTokenId": "4d0ea67ccb6c72c855275e76edacef7b",
                "_tokenId.indexUint": "f5af7baee6bc8451ab77c0e49f9686cb",
                "_tokenId.index": "e2fb805085975fa98541e91f629e4058",
                "_tokenId.indexAddress": "8f0c72ac6619a39edb44b0b8af597baa",
                "_message.indexUint": "f5af7baee6bc8451ab77c0e49f9686cb",
                "_action.indexUint": "f5af7baee6bc8451ab77c0e49f9686cb",
                "_transferAction.index": "e2fb805085975fa98541e91f629e4058",
                "_transferAction.indexAddress": "8f0c72ac6619a39edb44b0b8af597baa",
                "_transferAction.indexUint": "f5af7baee6bc8451ab77c0e49f9686cb",
                "_message.slice": "ba2c99c85d30596749d00c760233d4cf",
                "_transferAction.slice": "ba2c99c85d30596749d00c760233d4cf",
                "_transferAction.len": "196ea94b0e45cc6b21da50b1986f5599",
                "_message.len": "196ea94b0e45cc6b21da50b1986f5599",
                "BridgeMessage.msgType": "2c779652364abe048c92f4b738ba3b06",
                "TypedMemView.nullView": "d93a4661b703d460ae50e8eb251d218d",
                "BridgeMessage.isValidMessageLength": "e959786da823fb61f816e26c6901e9c7",
                "_message.castTo": "54c8864a1195a6b6f17335b5bd30c42f",
                "BridgeMessage.tryAsMessage": "bf3b2a2c7e917da2f73c5e3d1ca611a3"
            },
            "md5": "144a1e01629a325c7241e5b23e14edd4"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\packages\\contracts-bridge\\contracts\\interfaces\\IBridgeToken.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\packages\\contracts-bridge\\contracts\\interfaces\\IBridgeToken.sol",
            "filename": "IBridgeToken.sol",
            "imported_contracts": {},
            "contracts": {
                "IBridgeToken": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "initialize": [
                            {
                                "visibility": "external",
                                "content": "function initialize() external;",
                                "modifiers": [],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "ba5b93b5ddccf44cf78f3f471d3fc174"
                            }
                        ],
                        "name": [
                            {
                                "visibility": "external",
                                "content": "function name() external returns (string memory);",
                                "modifiers": [],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "string memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "4d42d726caef2db5185f363455201044"
                            }
                        ],
                        "balanceOf": [
                            {
                                "visibility": "external",
                                "content": "function balanceOf(address _account) external view returns (uint256);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_account"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "d132de2b50feba36d5e679a4d9fb9d87"
                            }
                        ],
                        "symbol": [
                            {
                                "visibility": "external",
                                "content": "function symbol() external view returns (string memory);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "string memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "290eeefbf46324b8fc0db56342aa8b5c"
                            }
                        ],
                        "decimals": [
                            {
                                "visibility": "external",
                                "content": "function decimals() external view returns (uint8);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint8",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "af3fd982db2d33756fe4782a6d55350a"
                            }
                        ],
                        "detailsHash": [
                            {
                                "visibility": "external",
                                "content": "function detailsHash() external view returns (bytes32);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c15e72a2ea60e8347812ec93dc20044e"
                            }
                        ],
                        "burn": [
                            {
                                "visibility": "external",
                                "content": "function burn(address _from, uint256 _amnt) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_from"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_amnt"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "d8b1d749a755d427cd485f1de7217afd"
                            }
                        ],
                        "mint": [
                            {
                                "visibility": "external",
                                "content": "function mint(address _to, uint256 _amnt) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_amnt"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "be1657df95c91212ce71c5642ffbf6b5"
                            }
                        ],
                        "setDetailsHash": [
                            {
                                "visibility": "external",
                                "content": "function setDetailsHash(bytes32 _detailsHash) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "_detailsHash"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "8635af4b0a0e7bae866a3ed104f3e51f"
                            }
                        ],
                        "setDetails": [
                            {
                                "visibility": "external",
                                "content": "function setDetails( string calldata _name, string calldata _symbol, uint8 _decimals ) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "string calldata",
                                        "name": "_name"
                                    },
                                    {
                                        "type": "string calldata",
                                        "name": "_symbol"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "_decimals"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "5666162f132815f3b3eb576841885dee"
                            }
                        ],
                        "transferOwnership": [
                            {
                                "visibility": "external",
                                "content": "function transferOwnership(address _newOwner) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_newOwner"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c0f2202fa43f1eb4f843d784d7d103ed"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": [
                        [
                            "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\packages\\contracts-bridge\\contracts\\BridgeToken.sol",
                            "BridgeToken"
                        ]
                    ]
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "05869df54a8c1fe166d2672ff2caa7f8"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\packages\\contracts-bridge\\contracts\\vendored\\OZERC20.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\packages\\contracts-bridge\\contracts\\vendored\\OZERC20.sol",
            "filename": "OZERC20.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\node_modules\\@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\node_modules\\@openzeppelin\\contracts\\math\\SafeMath.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "ERC20": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": true,
                    "inherits": [
                        "is",
                        "IERC20"
                    ],
                    "state_variables": {
                        "balances": {
                            "type": "mapping(address => uint256)",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(address => uint256) private balances;"
                        },
                        "allowances": {
                            "type": "mapping(address => mapping(address => uint256))",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(address => mapping(address => uint256)) private allowances;"
                        },
                        "supply": {
                            "type": "uint256",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256 private supply;"
                        },
                        "token": {
                            "type": "Token",
                            "visibility": "internal",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "Token internal token;"
                        }
                    },
                    "functions": {
                        "transfer": [
                            {
                                "visibility": "public",
                                "content": "function transfer(address _recipient, uint256 _amount) public virtual override returns (bool){ _transfer(msg.sender, _recipient, _amount); return true;}",
                                "modifiers": [
                                    "virtual",
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_recipient"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20._transfer"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "86997954de31b1bf86043dff10e45513"
                            }
                        ],
                        "approve": [
                            {
                                "visibility": "public",
                                "content": "function approve(address _spender, uint256 _amount) public virtual override returns (bool){ _approve(msg.sender, _spender, _amount); return true;}",
                                "modifiers": [
                                    "virtual",
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20._approve"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "75fb82567811f31bf4014edba3a5c87b"
                            }
                        ],
                        "transferFrom": [
                            {
                                "visibility": "public",
                                "content": "function transferFrom( address _sender, address _recipient, uint256 _amount ) public virtual override returns (bool){ _transfer(_sender, _recipient, _amount); _approve( _sender, msg.sender, allowances[_sender][msg.sender].sub( _amount, \"ERC20: transfer amount exceeds allowance\" ) ); return true;}",
                                "modifiers": [
                                    "virtual",
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_sender"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_recipient"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "allowances",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20._transfer",
                                        "ERC20._approve"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "1a7872f97e7986883f435a0ff9dbcd77"
                            }
                        ],
                        "increaseAllowance": [
                            {
                                "visibility": "public",
                                "content": "function increaseAllowance(address _spender, uint256 _addedValue) public virtual returns (bool){ _approve( msg.sender, _spender, allowances[msg.sender][_spender].add(_addedValue) ); return true;}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_addedValue"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "allowances",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20._approve"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "5e8a3ef66a9252075831e7b9ab167995"
                            }
                        ],
                        "decreaseAllowance": [
                            {
                                "visibility": "public",
                                "content": "function decreaseAllowance(address _spender, uint256 _subtractedValue) public virtual returns (bool){ _approve( msg.sender, _spender, allowances[msg.sender][_spender].sub( _subtractedValue, \"ERC20: decreased allowance below zero\" ) ); return true;}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_subtractedValue"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "allowances",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20._approve"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "183def60b27ed8551f6f8a8b758d7709"
                            }
                        ],
                        "totalSupply": [
                            {
                                "visibility": "public",
                                "content": "function totalSupply() public view override returns (uint256){ return supply;}",
                                "modifiers": [
                                    "view",
                                    "override"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "supply",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "96711206ae6a5da457f00cbd11bf512e"
                            }
                        ],
                        "balanceOf": [
                            {
                                "visibility": "public",
                                "content": "function balanceOf(address _account) public view virtual override returns (uint256){ return balances[_account];}",
                                "modifiers": [
                                    "view",
                                    "virtual",
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_account"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "balances",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "1a26b550557597522bd61c47aed97bf7"
                            }
                        ],
                        "allowance": [
                            {
                                "visibility": "public",
                                "content": "function allowance(address _owner, address _spender) public view virtual override returns (uint256){ return allowances[_owner][_spender];}",
                                "modifiers": [
                                    "view",
                                    "virtual",
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_owner"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_spender"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "allowances",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "2a0620cabd3a273f11e592accfc82398"
                            }
                        ],
                        "_transfer": [
                            {
                                "visibility": "internal",
                                "content": "function _transfer( address _sender, address _recipient, uint256 amount ) internal virtual{ require(_sender != address(0), \"ERC20: transfer from the zero address\"); require( _recipient != address(0), \"ERC20: transfer to the zero address\" ); _beforeTokenTransfer(_sender, _recipient, amount); balances[_sender] = balances[_sender].sub( amount, \"ERC20: transfer amount exceeds balance\" ); balances[_recipient] = balances[_recipient].add(amount); emit Transfer(_sender, _recipient, amount);}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_sender"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_recipient"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "balances",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "balances",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20.Transfer",
                                        "ERC20._beforeTokenTransfer"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "a28a491cf40133f2c26f0f53fe6862a6"
                            }
                        ],
                        "_mint": [
                            {
                                "visibility": "internal",
                                "content": "function _mint(address _account, uint256 _amount) internal virtual{ require(_account != address(0), \"ERC20: mint to the zero address\"); _beforeTokenTransfer(address(0), _account, _amount); supply = supply.add(_amount); balances[_account] = balances[_account].add(_amount); emit Transfer(address(0), _account, _amount);}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_account"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "balances",
                                        "",
                                        "ERC20"
                                    ],
                                    [
                                        "supply",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "balances",
                                        "",
                                        "ERC20"
                                    ],
                                    [
                                        "supply",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20.Transfer",
                                        "supply.add",
                                        "ERC20._beforeTokenTransfer"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "d5279bfbbf8cd215443368694472cd85"
                            }
                        ],
                        "_burn": [
                            {
                                "visibility": "internal",
                                "content": "function _burn(address _account, uint256 _amount) internal virtual{ require(_account != address(0), \"ERC20: burn from the zero address\"); _beforeTokenTransfer(_account, address(0), _amount); balances[_account] = balances[_account].sub( _amount, \"ERC20: burn amount exceeds balance\" ); supply = supply.sub(_amount); emit Transfer(_account, address(0), _amount);}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_account"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "balances",
                                        "",
                                        "ERC20"
                                    ],
                                    [
                                        "supply",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "balances",
                                        "",
                                        "ERC20"
                                    ],
                                    [
                                        "supply",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "supply.sub",
                                        "ERC20.Transfer",
                                        "ERC20._beforeTokenTransfer"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "ce07b8c77077638c031abcb12f70ff7f"
                            }
                        ],
                        "_approve": [
                            {
                                "visibility": "internal",
                                "content": "function _approve( address _owner, address _spender, uint256 _amount ) internal virtual{ require(_owner != address(0), \"ERC20: approve from the zero address\"); require(_spender != address(0), \"ERC20: approve to the zero address\"); allowances[_owner][_spender] = _amount; emit Approval(_owner, _spender, _amount);}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_owner"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "allowances",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "allowances",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20.Approval"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "b173c311c1c8ec08b7ba9f49f98dc698"
                            }
                        ],
                        "_setupDecimals": [
                            {
                                "visibility": "internal",
                                "content": "function _setupDecimals(uint8 decimals_) internal{ token.decimals = decimals_;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint8",
                                        "name": "decimals_"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "token",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "token",
                                        "",
                                        "ERC20"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "68397800586a93f284b772299a6d91b0"
                            }
                        ],
                        "_beforeTokenTransfer": [
                            {
                                "visibility": "internal",
                                "content": "function _beforeTokenTransfer( address _from, address _to, uint256 _amount ) internal virtual{}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "33612aa91c371f6871b0b91398049af3"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {
                        "Token": {
                            "content": "Token{ string name; string symbol; uint8 decimals;}"
                        }
                    },
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "uint256": "SafeMath"
                    }
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "ERC20._transfer": "a28a491cf40133f2c26f0f53fe6862a6",
                "ERC20._approve": "b173c311c1c8ec08b7ba9f49f98dc698",
                "ERC20._beforeTokenTransfer": "33612aa91c371f6871b0b91398049af3",
                "supply.add": "b83a169007730f80a7fc79bee8748fff",
                "supply.sub": "aa6b5a83ac7caeaf81056eef5389fca5"
            },
            "md5": "fe6e5268996e1fd9382bcb17a068d6af"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\packages\\contracts-core\\contracts\\Version0.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\packages\\contracts-core\\contracts\\Version0.sol",
            "filename": "Version0.sol",
            "imported_contracts": {},
            "contracts": {
                "Version0": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": true,
                    "inherits": [],
                    "state_variables": {
                        "VERSION": {
                            "type": "uint8",
                            "visibility": "public",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "0",
                            "content": "uint8 public constant VERSION = 0;"
                        }
                    },
                    "functions": {},
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "6596c8aff9b874eb745d4223e246d3d3"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\packages\\contracts-core\\contracts\\libs\\TypeCasts.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\packages\\contracts-core\\contracts\\libs\\TypeCasts.sol",
            "filename": "TypeCasts.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\node_modules\\@summa-tx\\memview-sol\\contracts\\TypedMemView.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "TypeCasts": {
                    "type": {
                        "__CT__": true,
                        "value": 2
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "coerceBytes32": [
                            {
                                "visibility": "internal",
                                "content": "function coerceBytes32(string memory _s) internal pure returns (bytes32 _b){ _b = bytes(_s).ref(0).index(0, uint8(bytes(_s).length));}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "string memory",
                                        "name": "_s"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": "_b"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "18678f9687f43e9975bb617857b89c48"
                            }
                        ],
                        "coerceString": [
                            {
                                "visibility": "internal",
                                "content": "function coerceString(bytes32 _buf) internal pure returns (string memory _newStr){ uint8 _slen = 0; while (_slen < 32 && _buf[_slen] != 0){ _slen++;} assembly{ _newStr := mload(0x40) mstore(0x40, add(_newStr, 0x40)) mstore(_newStr, _slen) mstore(add(_newStr, 0x20), _buf)}}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "_buf"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "string memory",
                                        "name": "_newStr"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "4c6a15ca339276dcba36ee85378e2957"
                            }
                        ],
                        "addressToBytes32": [
                            {
                                "visibility": "internal",
                                "content": "function addressToBytes32(address _addr) internal pure returns (bytes32){ return bytes32(uint256(uint160(_addr)));}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_addr"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "bee9a0c62b2bc2e60a6caa0c60eb7ec6"
                            }
                        ],
                        "bytes32ToAddress": [
                            {
                                "visibility": "internal",
                                "content": "function bytes32ToAddress(bytes32 _buf) internal pure returns (address){ return address(uint160(uint256(_buf)));}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "_buf"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "1b63d7d389c9524fc335c8a15db1ed73"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "bytes": "TypedMemView",
                        "bytes29": "TypedMemView"
                    }
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "1bdd9f2ee43b50f3fadc50f77336cdbb"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\packages\\contracts-core\\contracts\\libs\\Message.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\packages\\contracts-core\\contracts\\libs\\Message.sol",
            "filename": "Message.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\node_modules\\@summa-tx\\memview-sol\\contracts\\TypedMemView.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\packages\\contracts-core\\contracts\\libs\\TypeCasts.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "TypeCasts": {
                            "original_name": "TypeCasts",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                }
            },
            "contracts": {
                "Message": {
                    "type": {
                        "__CT__": true,
                        "value": 2
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {
                        "PREFIX_LENGTH": {
                            "type": "uint256",
                            "visibility": "internal",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "76",
                            "content": "uint256 internal constant PREFIX_LENGTH = 76;"
                        }
                    },
                    "functions": {
                        "formatMessage": [
                            {
                                "visibility": "internal",
                                "content": "function formatMessage( uint32 _originDomain, bytes32 _sender, uint32 _nonce, uint32 _destinationDomain, bytes32 _recipient, bytes memory _messageBody ) internal pure returns (bytes memory){ return abi.encodePacked( _originDomain, _sender, _nonce, _destinationDomain, _recipient, _messageBody );}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint32",
                                        "name": "_originDomain"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "_sender"
                                    },
                                    {
                                        "type": "uint32",
                                        "name": "_nonce"
                                    },
                                    {
                                        "type": "uint32",
                                        "name": "_destinationDomain"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "_recipient"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "_messageBody"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "727f2dca5c5a05f3a4a339b6d9e7c1bd"
                            }
                        ],
                        "messageHash": [
                            {
                                "visibility": "internal",
                                "content": "function messageHash( uint32 _origin, bytes32 _sender, uint32 _nonce, uint32 _destination, bytes32 _recipient, bytes memory _body ) internal pure returns (bytes32){ return keccak256( formatMessage( _origin, _sender, _nonce, _destination, _recipient, _body ) );}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint32",
                                        "name": "_origin"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "_sender"
                                    },
                                    {
                                        "type": "uint32",
                                        "name": "_nonce"
                                    },
                                    {
                                        "type": "uint32",
                                        "name": "_destination"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "_recipient"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "_body"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Message.formatMessage"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "7b6d86432e2d5cb08eff1e79cd4fe6cd"
                            }
                        ],
                        "origin": [
                            {
                                "visibility": "internal",
                                "content": "function origin(bytes29 _message) internal pure returns (uint32){ return uint32(_message.indexUint(0, 4));}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes29",
                                        "name": "_message"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint32",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "_message.indexUint"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "ff53e4a6d4b1f122f84e097eb3b4c29c"
                            }
                        ],
                        "sender": [
                            {
                                "visibility": "internal",
                                "content": "function sender(bytes29 _message) internal pure returns (bytes32){ return _message.index(4, 32);}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes29",
                                        "name": "_message"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "_message.index"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "0b6cc37cf612711034e03659aa7fa0a0"
                            }
                        ],
                        "nonce": [
                            {
                                "visibility": "internal",
                                "content": "function nonce(bytes29 _message) internal pure returns (uint32){ return uint32(_message.indexUint(36, 4));}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes29",
                                        "name": "_message"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint32",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "_message.indexUint"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "b56612f1442832e9b93ef3d351f83983"
                            }
                        ],
                        "destination": [
                            {
                                "visibility": "internal",
                                "content": "function destination(bytes29 _message) internal pure returns (uint32){ return uint32(_message.indexUint(40, 4));}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes29",
                                        "name": "_message"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint32",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "_message.indexUint"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "48ee746e66cd74d88c7b933a510a1d4f"
                            }
                        ],
                        "recipient": [
                            {
                                "visibility": "internal",
                                "content": "function recipient(bytes29 _message) internal pure returns (bytes32){ return _message.index(44, 32);}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes29",
                                        "name": "_message"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "_message.index"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "44611fd8b058314d1053d59757c4d6b5"
                            }
                        ],
                        "recipientAddress": [
                            {
                                "visibility": "internal",
                                "content": "function recipientAddress(bytes29 _message) internal pure returns (address){ return TypeCasts.bytes32ToAddress(recipient(_message));}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes29",
                                        "name": "_message"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "TypeCasts.bytes32ToAddress",
                                        "Message.recipient"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "d3e184320970bba374186713f0c4ee65"
                            }
                        ],
                        "body": [
                            {
                                "visibility": "internal",
                                "content": "function body(bytes29 _message) internal pure returns (bytes29){ return _message.slice(PREFIX_LENGTH, _message.len() - PREFIX_LENGTH, 0);}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes29",
                                        "name": "_message"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes29",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "PREFIX_LENGTH",
                                        "",
                                        "Message"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "_message.len",
                                        "_message.slice"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "8c61a499784d7ea9b19b40d2139e79f2"
                            }
                        ],
                        "leaf": [
                            {
                                "visibility": "internal",
                                "content": "function leaf(bytes29 _message) internal view returns (bytes32){ return messageHash( origin(_message), sender(_message), nonce(_message), destination(_message), recipient(_message), TypedMemView.clone(body(_message)) );}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes29",
                                        "name": "_message"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Message.origin",
                                        "Message.destination",
                                        "TypedMemView.clone",
                                        "Message.sender",
                                        "Message.body",
                                        "Message.messageHash",
                                        "Message.nonce",
                                        "Message.recipient"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "24e888b9580075dec0b252bd94a4280d"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "bytes": "TypedMemView",
                        "bytes29": "TypedMemView"
                    }
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "Message.formatMessage": "727f2dca5c5a05f3a4a339b6d9e7c1bd",
                "_message.indexUint": "f5af7baee6bc8451ab77c0e49f9686cb",
                "_message.index": "e2fb805085975fa98541e91f629e4058",
                "TypeCasts.bytes32ToAddress": "1b63d7d389c9524fc335c8a15db1ed73",
                "Message.recipient": "44611fd8b058314d1053d59757c4d6b5",
                "_message.len": "196ea94b0e45cc6b21da50b1986f5599",
                "_message.slice": "ba2c99c85d30596749d00c760233d4cf",
                "Message.sender": "0b6cc37cf612711034e03659aa7fa0a0",
                "TypedMemView.clone": "f6a872ae6fed030f6a30c6da8b7bb616",
                "Message.body": "8c61a499784d7ea9b19b40d2139e79f2",
                "Message.nonce": "b56612f1442832e9b93ef3d351f83983",
                "Message.destination": "48ee746e66cd74d88c7b933a510a1d4f",
                "Message.messageHash": "7b6d86432e2d5cb08eff1e79cd4fe6cd",
                "Message.origin": "ff53e4a6d4b1f122f84e097eb3b4c29c"
            },
            "md5": "7aa5e0483497a042fc5bcbcf466cb617"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\packages\\contracts-core\\contracts\\NomadBase.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\packages\\contracts-core\\contracts\\NomadBase.sol",
            "filename": "NomadBase.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\packages\\contracts-core\\contracts\\libs\\Message.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "Message": {
                            "original_name": "Message",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\node_modules\\@openzeppelin\\contracts\\cryptography\\ECDSA.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "ECDSA": {
                            "original_name": "ECDSA",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\node_modules\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "Initializable": {
                            "original_name": "Initializable",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\node_modules\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "OwnableUpgradeable": {
                            "original_name": "OwnableUpgradeable",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                }
            },
            "contracts": {
                "NomadBase": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": true,
                    "inherits": [
                        "is",
                        "Initializable",
                        "OwnableUpgradeable"
                    ],
                    "state_variables": {
                        "localDomain": {
                            "type": "uint32",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint32 public immutable localDomain;"
                        },
                        "updater": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public updater;"
                        },
                        "state": {
                            "type": "States",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "States public state;"
                        },
                        "committedRoot": {
                            "type": "bytes32",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "bytes32 public committedRoot;"
                        },
                        "__GAP": {
                            "type": "uint256[47]",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256[47] private __GAP;"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (uint32 _localDomain){ localDomain = _localDomain;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint32",
                                        "name": "_localDomain"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "localDomain",
                                        "",
                                        "NomadBase"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "localDomain",
                                        "",
                                        "NomadBase"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "7e3000d971e48d1129d165c282a505db"
                            }
                        ],
                        "__NomadBase_initialize": [
                            {
                                "visibility": "internal",
                                "content": "function __NomadBase_initialize(address _updater) internal initializer{ __Ownable_init(); _setUpdater(_updater); state = States.Active;}",
                                "modifiers": [
                                    "initializer"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_updater"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "state",
                                        "",
                                        "NomadBase"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "state",
                                        "",
                                        "NomadBase"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "NomadBase._setUpdater",
                                        "NomadBase.initializer",
                                        "NomadBase.__Ownable_init"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "5cd273d0fa82bede1859d8c4d67697fc"
                            }
                        ],
                        "homeDomainHash": [
                            {
                                "visibility": "public",
                                "content": "function homeDomainHash() public view virtual returns (bytes32);",
                                "modifiers": [
                                    "view",
                                    "virtual"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "7002faea667f25af5644d99d1b296b1d"
                            }
                        ],
                        "_homeDomainHash": [
                            {
                                "visibility": "internal",
                                "content": "function _homeDomainHash(uint32 _homeDomain) internal pure returns (bytes32){ return keccak256(abi.encodePacked(_homeDomain, \"NOMAD\"));}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint32",
                                        "name": "_homeDomain"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "71fbf050dd298da02788840bc01733c4"
                            }
                        ],
                        "_setUpdater": [
                            {
                                "visibility": "internal",
                                "content": "function _setUpdater(address _newUpdater) internal{ address _oldUpdater = updater; updater = _newUpdater; emit NewUpdater(_oldUpdater, _newUpdater);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_newUpdater"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "updater",
                                        "",
                                        "NomadBase"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "updater",
                                        "",
                                        "NomadBase"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "9623dcfa5e1e10e77f82bcc76477ac17"
                            }
                        ],
                        "_isUpdaterSignature": [
                            {
                                "visibility": "internal",
                                "content": "function _isUpdaterSignature( bytes32 _oldRoot, bytes32 _newRoot, bytes memory _signature ) internal view returns (bool){ bytes32 _digest = keccak256( abi.encodePacked(homeDomainHash(), _oldRoot, _newRoot) ); _digest = ECDSA.toEthSignedMessageHash(_digest); return (ECDSA.recover(_digest, _signature) == updater);}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "_oldRoot"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "_newRoot"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "_signature"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "updater",
                                        "",
                                        "NomadBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "NomadBase.homeDomainHash",
                                        "ECDSA.toEthSignedMessageHash",
                                        "ECDSA.recover"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "3db2de79261143251f0b355775a0a841"
                            }
                        ],
                        "renounceOwnership": [
                            {
                                "visibility": "public",
                                "content": "function renounceOwnership() public override onlyOwner{}",
                                "modifiers": [
                                    "override",
                                    "onlyOwner"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "NomadBase.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "2869d8470aaa9761e143a8af442387c0"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {
                        "Update": {
                            "event": "Update",
                            "content": "Update( uint32 indexed homeDomain, bytes32 indexed oldRoot, bytes32 indexed newRoot, bytes signature )"
                        },
                        "NewUpdater": {
                            "event": "NewUpdater",
                            "content": "NewUpdater(address oldUpdater, address newUpdater)"
                        }
                    },
                    "enums": {
                        "States": {
                            "content": "States{ UnInitialized, Active, Failed}"
                        }
                    },
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "NomadBase.initializer": "9a3941efe0712b157053363b75d3f33f",
                "NomadBase.__Ownable_init": "f7820e4676d5bcf96dd81f938b91f4f1",
                "NomadBase._setUpdater": "9623dcfa5e1e10e77f82bcc76477ac17",
                "ECDSA.recover": "cb6fb709653b7ee97478f21c99cfb27f",
                "ECDSA.toEthSignedMessageHash": "a5358195f58ef2ff5336b4eead23f34e",
                "NomadBase.homeDomainHash": "7002faea667f25af5644d99d1b296b1d",
                "NomadBase.onlyOwner": "b92099c80fb280641bb32ab9f3280aeb"
            },
            "md5": "a59ea185730ea73bde8ac653ec0e1f47"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\packages\\contracts-core\\contracts\\Queue.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\packages\\contracts-core\\contracts\\Queue.sol",
            "filename": "Queue.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\packages\\contracts-core\\contracts\\Queue.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "QueueLib": {
                            "original_name": "QueueLib",
                            "type": {
                                "__CT__": true,
                                "value": 0
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\node_modules\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "Initializable": {
                            "original_name": "Initializable",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                }
            },
            "contracts": {
                "QueueManager": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "Initializable"
                    ],
                    "state_variables": {
                        "__GAP": {
                            "type": "uint256[49]",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256[49] private __GAP;"
                        }
                    },
                    "functions": {
                        "__QueueManager_initialize": [
                            {
                                "visibility": "internal",
                                "content": "function __QueueManager_initialize() internal initializer{ queue.initialize();}",
                                "modifiers": [
                                    "initializer"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "QueueLib.Queue.initialize",
                                        "QueueManager.initializer"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "3998a8cd898095b0a34085b5ed244722"
                            }
                        ],
                        "queueLength": [
                            {
                                "visibility": "external",
                                "content": "function queueLength() external view returns (uint256){ return queue.length();}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "QueueLib.Queue.length"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "b75476576aa3b768818f71792f6bd4a7"
                            }
                        ],
                        "queueContains": [
                            {
                                "visibility": "external",
                                "content": "function queueContains(bytes32 _item) external view returns (bool){ return queue.contains(_item);}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "_item"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "QueueLib.Queue.contains"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "a286c36d7075d24ffb4be9eab5f8daa4"
                            }
                        ],
                        "queueEnd": [
                            {
                                "visibility": "external",
                                "content": "function queueEnd() external view returns (bytes32){ return queue.lastItem();}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "QueueLib.Queue.lastItem"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "d2aa6111399d3b5059a30962d1ccad3b"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "QueueManager.initializer": "9a3941efe0712b157053363b75d3f33f"
            },
            "md5": "20463d0d313e60638b11ca745a0db99f"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\packages\\contracts-core\\contracts\\Merkle.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\packages\\contracts-core\\contracts\\Merkle.sol",
            "filename": "Merkle.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\packages\\contracts-core\\contracts\\Merkle.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "MerkleLib": {
                            "original_name": "MerkleLib",
                            "type": {
                                "__CT__": true,
                                "value": 0
                            }
                        }
                    }
                }
            },
            "contracts": {
                "MerkleTreeManager": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {
                        "__GAP": {
                            "type": "uint256[49]",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256[49] private __GAP;"
                        }
                    },
                    "functions": {
                        "root": [
                            {
                                "visibility": "public",
                                "content": "function root() public view returns (bytes32){ return tree.root();}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "MerkleLib.Tree.root"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "05160a3d9c679ee4e603941575d6128e"
                            }
                        ],
                        "count": [
                            {
                                "visibility": "public",
                                "content": "function count() public view returns (uint256){ return tree.count;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "8590b4d40dd23ba6437757860527a776"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "9b122d68d897186f03d43a9fb9ae574f"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\packages\\contracts-core\\contracts\\interfaces\\IUpdaterManager.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\packages\\contracts-core\\contracts\\interfaces\\IUpdaterManager.sol",
            "filename": "IUpdaterManager.sol",
            "imported_contracts": {},
            "contracts": {
                "IUpdaterManager": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "slashUpdater": [
                            {
                                "visibility": "external",
                                "content": "function slashUpdater(address payable _reporter) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address payable",
                                        "name": "_reporter"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "29def1b0d8adc06831ad8907c54f4675"
                            }
                        ],
                        "updater": [
                            {
                                "visibility": "external",
                                "content": "function updater() external view returns (address);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "9abf613549c1e4a8b9530f1437602d16"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "10914f045ad40bd1f26f615aa812de70"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\packages\\contracts-core\\contracts\\Home.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\packages\\contracts-core\\contracts\\Home.sol",
            "filename": "Home.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\packages\\contracts-core\\contracts\\Version0.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "Version0": {
                            "original_name": "Version0",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\packages\\contracts-core\\contracts\\NomadBase.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "NomadBase": {
                            "original_name": "NomadBase",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\packages\\contracts-core\\contracts\\Queue.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "QueueManager": {
                            "original_name": "QueueManager",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\packages\\contracts-core\\contracts\\Merkle.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "MerkleTreeManager": {
                            "original_name": "MerkleTreeManager",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\packages\\contracts-core\\contracts\\libs\\Message.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "Message": {
                            "original_name": "Message",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\packages\\contracts-core\\contracts\\interfaces\\IUpdaterManager.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "IUpdaterManager": {
                            "original_name": "IUpdaterManager",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\node_modules\\@openzeppelin\\contracts\\utils\\Address.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "Address": {
                            "original_name": "Address",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                }
            },
            "contracts": {
                "Home": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "Version0",
                        "QueueManager",
                        "MerkleTreeManager",
                        "NomadBase"
                    ],
                    "state_variables": {
                        "MAX_MESSAGE_BODY_BYTES": {
                            "type": "uint256",
                            "visibility": "public",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "2 * 2**10",
                            "content": "uint256 public constant MAX_MESSAGE_BODY_BYTES = 2 * 2**10;"
                        },
                        "nonces": {
                            "type": "mapping(uint32 => uint32)",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(uint32 => uint32) public nonces;"
                        },
                        "updaterManager": {
                            "type": "IUpdaterManager",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "IUpdaterManager public updaterManager;"
                        },
                        "__GAP": {
                            "type": "uint256[48]",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256[48] private __GAP;"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (uint32 _localDomain) NomadBase(_localDomain){}",
                                "modifiers": [
                                    "NomadBase(_localDomain)"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint32",
                                        "name": "_localDomain"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "cc5a63f9c0a89fc93d8f137f55e91aa7"
                            }
                        ],
                        "initialize": [
                            {
                                "visibility": "public",
                                "content": "function initialize(IUpdaterManager _updaterManager) public initializer{ __QueueManager_initialize(); _setUpdaterManager(_updaterManager); __NomadBase_initialize(updaterManager.updater());}",
                                "modifiers": [
                                    "initializer"
                                ],
                                "parameters": [
                                    {
                                        "type": "IUpdaterManager",
                                        "name": "_updaterManager"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "updaterManager",
                                        "",
                                        "Home"
                                    ],
                                    [
                                        "updater",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\packages\\contracts-core\\contracts\\NomadBase.sol",
                                        "NomadBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "IUpdaterManager.updater",
                                        "Home.__NomadBase_initialize",
                                        "Home.__QueueManager_initialize",
                                        "Home._setUpdaterManager",
                                        "Home.initializer"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "ff63de0f03f932fa7086a0529bd60301"
                            }
                        ],
                        "setUpdater": [
                            {
                                "visibility": "external",
                                "content": "function setUpdater(address _updater) external onlyUpdaterManager{ _setUpdater(_updater); state = States.Active;}",
                                "modifiers": [
                                    "onlyUpdaterManager"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_updater"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "state",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\packages\\contracts-core\\contracts\\NomadBase.sol",
                                        "NomadBase"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "state",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\packages\\contracts-core\\contracts\\NomadBase.sol",
                                        "NomadBase"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Home._setUpdater",
                                        "Home.onlyUpdaterManager"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "1ea8c935f8dfe4090fe0e2d9b435a368"
                            }
                        ],
                        "setUpdaterManager": [
                            {
                                "visibility": "external",
                                "content": "function setUpdaterManager(address _updaterManager) external onlyOwner{ _setUpdaterManager(IUpdaterManager(_updaterManager)); _setUpdater(IUpdaterManager(_updaterManager).updater());}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_updaterManager"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "updater",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\packages\\contracts-core\\contracts\\NomadBase.sol",
                                        "NomadBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Home.IUpdaterManager",
                                        "Home._setUpdater",
                                        "Home.onlyOwner",
                                        "Home._setUpdaterManager"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "1b18de339acd545bc2def042e781209f"
                            }
                        ],
                        "dispatch": [
                            {
                                "visibility": "external",
                                "content": "function dispatch( uint32 _destinationDomain, bytes32 _recipientAddress, bytes memory _messageBody ) external notFailed{ require(_messageBody.length <= MAX_MESSAGE_BODY_BYTES, \"msg too long\"); uint32 _nonce = nonces[_destinationDomain]; nonces[_destinationDomain] = _nonce + 1; bytes memory _message = Message.formatMessage( localDomain, bytes32(uint256(uint160(msg.sender))), _nonce, _destinationDomain, _recipientAddress, _messageBody ); bytes32 _messageHash = keccak256(_message); tree.insert(_messageHash); queue.enqueue(root()); emit Dispatch( _messageHash, count() - 1, _destinationAndNonce(_destinationDomain, _nonce), committedRoot, _message );}",
                                "modifiers": [
                                    "notFailed"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint32",
                                        "name": "_destinationDomain"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "_recipientAddress"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "_messageBody"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "MAX_MESSAGE_BODY_BYTES",
                                        "",
                                        "Home"
                                    ],
                                    [
                                        "nonces",
                                        "",
                                        "Home"
                                    ],
                                    [
                                        "localDomain",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\packages\\contracts-core\\contracts\\NomadBase.sol",
                                        "NomadBase"
                                    ],
                                    [
                                        "committedRoot",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\packages\\contracts-core\\contracts\\NomadBase.sol",
                                        "NomadBase"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "nonces",
                                        "",
                                        "Home"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "queue.enqueue",
                                        "Home.count",
                                        "tree.insert",
                                        "Home._destinationAndNonce",
                                        "Home.root",
                                        "Message.formatMessage",
                                        "Home.notFailed"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "6316a042a00432c701e38df1f61dd95c"
                            }
                        ],
                        "update": [
                            {
                                "visibility": "external",
                                "content": "function update( bytes32 _committedRoot, bytes32 _newRoot, bytes memory _signature ) external notFailed{ if (improperUpdate(_committedRoot, _newRoot, _signature)) return; while (true){ bytes32 _next = queue.dequeue(); if (_next == _newRoot) break;} committedRoot = _newRoot; emit Update(localDomain, _committedRoot, _newRoot, _signature);}",
                                "modifiers": [
                                    "notFailed"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "_committedRoot"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "_newRoot"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "_signature"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "localDomain",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\packages\\contracts-core\\contracts\\NomadBase.sol",
                                        "NomadBase"
                                    ],
                                    [
                                        "committedRoot",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\packages\\contracts-core\\contracts\\NomadBase.sol",
                                        "NomadBase"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "committedRoot",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\packages\\contracts-core\\contracts\\NomadBase.sol",
                                        "NomadBase"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "queue.dequeue",
                                        "Home.improperUpdate",
                                        "Home.Update",
                                        "Home.notFailed"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "e745edd844645cde0e4f202a2f404a66"
                            }
                        ],
                        "suggestUpdate": [
                            {
                                "visibility": "external",
                                "content": "function suggestUpdate() external view returns (bytes32 _committedRoot, bytes32 _new){ if (queue.length() != 0){ _committedRoot = committedRoot; _new = queue.lastItem();}}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": "_committedRoot"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "_new"
                                    }
                                ],
                                "reads": [
                                    [
                                        "committedRoot",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\packages\\contracts-core\\contracts\\NomadBase.sol",
                                        "NomadBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "queue.lastItem",
                                        "queue.length"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "4d3ce865107855eeedf9e0658b31cb59"
                            }
                        ],
                        "doubleUpdate": [
                            {
                                "visibility": "external",
                                "content": "function doubleUpdate( bytes32 _oldRoot, bytes32[2] calldata _newRoot, bytes calldata _signature, bytes calldata _signature2 ) external notFailed{ if ( NomadBase._isUpdaterSignature(_oldRoot, _newRoot[0], _signature) && NomadBase._isUpdaterSignature(_oldRoot, _newRoot[1], _signature2) && _newRoot[0] != _newRoot[1] ){ _fail(); emit DoubleUpdate(_oldRoot, _newRoot, _signature, _signature2);}}",
                                "modifiers": [
                                    "notFailed"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "_oldRoot"
                                    },
                                    {
                                        "type": "bytes32[2] calldata",
                                        "name": "_newRoot"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "_signature"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "_signature2"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Home._fail",
                                        "NomadBase._isUpdaterSignature",
                                        "Home.notFailed"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "35bb49d7f3cdf7a7092676cfc3c898c6"
                            }
                        ],
                        "homeDomainHash": [
                            {
                                "visibility": "public",
                                "content": "function homeDomainHash() public view override returns (bytes32){ return _homeDomainHash(localDomain);}",
                                "modifiers": [
                                    "view",
                                    "override"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "localDomain",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\packages\\contracts-core\\contracts\\NomadBase.sol",
                                        "NomadBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Home._homeDomainHash"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "385e7b82b3dbfd5d4a4cb39e2235a6f8"
                            }
                        ],
                        "improperUpdate": [
                            {
                                "visibility": "public",
                                "content": "function improperUpdate( bytes32 _oldRoot, bytes32 _newRoot, bytes memory _signature ) public notFailed returns (bool){ require( _isUpdaterSignature(_oldRoot, _newRoot, _signature), \"!updater sig\" ); require(_oldRoot == committedRoot, \"not a current update\"); if (!queue.contains(_newRoot)){ _fail(); emit ImproperUpdate(_oldRoot, _newRoot, _signature); return true;} return false;}",
                                "modifiers": [
                                    "notFailed"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "_oldRoot"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "_newRoot"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "_signature"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "updater",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\packages\\contracts-core\\contracts\\NomadBase.sol",
                                        "NomadBase"
                                    ],
                                    [
                                        "committedRoot",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\packages\\contracts-core\\contracts\\NomadBase.sol",
                                        "NomadBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Home._fail",
                                        "queue.contains",
                                        "NomadBase._isUpdaterSignature",
                                        "Home.notFailed"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "3a4c93d5a1c229b402b97c9f9addfa15"
                            }
                        ],
                        "_setUpdaterManager": [
                            {
                                "visibility": "internal",
                                "content": "function _setUpdaterManager(IUpdaterManager _updaterManager) internal{ require( Address.isContract(address(_updaterManager)), \"! contract updaterManager\" ); updaterManager = IUpdaterManager(_updaterManager); emit NewUpdaterManager(address(_updaterManager));}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "IUpdaterManager",
                                        "name": "_updaterManager"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "updaterManager",
                                        "",
                                        "Home"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "updaterManager",
                                        "",
                                        "Home"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Address.isContract",
                                        "Home.IUpdaterManager"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "52f36a7c1cbc0433f1472706375ea288"
                            }
                        ],
                        "_fail": [
                            {
                                "visibility": "internal",
                                "content": "function _fail() internal{ state = States.Failed; updaterManager.slashUpdater(msg.sender); emit UpdaterSlashed(updater, msg.sender);}",
                                "modifiers": [],
                                "parameters": [],
                                "returns": [],
                                "reads": [
                                    [
                                        "updaterManager",
                                        "",
                                        "Home"
                                    ],
                                    [
                                        "updater",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\packages\\contracts-core\\contracts\\NomadBase.sol",
                                        "NomadBase"
                                    ],
                                    [
                                        "state",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\packages\\contracts-core\\contracts\\NomadBase.sol",
                                        "NomadBase"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "state",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\packages\\contracts-core\\contracts\\NomadBase.sol",
                                        "NomadBase"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "IUpdaterManager.slashUpdater"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "5b6a177ca0fae33c7906dfb80083c2b7"
                            }
                        ],
                        "_destinationAndNonce": [
                            {
                                "visibility": "internal",
                                "content": "function _destinationAndNonce(uint32 _destination, uint32 _nonce) internal pure returns (uint64){ return (uint64(_destination) << 32) | _nonce;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint32",
                                        "name": "_destination"
                                    },
                                    {
                                        "type": "uint32",
                                        "name": "_nonce"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint64",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "e72847fef1e876ae91626eab708a44fe"
                            }
                        ]
                    },
                    "modifiers": {
                        "onlyUpdaterManager": {
                            "parameters": [],
                            "content": "modifier onlyUpdaterManager(){ require(msg.sender == address(updaterManager), \"!updaterManager\"); _;}",
                            "reads": [
                                [
                                    "updaterManager",
                                    "",
                                    "Home"
                                ]
                            ],
                            "writes": [],
                            "external_calls": [],
                            "md5": "969db736274e92f3359d032965f3ff20"
                        },
                        "notFailed": {
                            "parameters": [],
                            "content": "modifier notFailed(){ require(state != States.Failed, \"failed state\"); _;}",
                            "reads": [
                                [
                                    "state",
                                    "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\packages\\contracts-core\\contracts\\NomadBase.sol",
                                    "NomadBase"
                                ]
                            ],
                            "writes": [],
                            "external_calls": [],
                            "md5": "9db0614c83f62e4c695ce7d5dbdb1d37"
                        }
                    },
                    "structs": {},
                    "events": {
                        "Dispatch": {
                            "event": "Dispatch",
                            "content": "Dispatch( bytes32 indexed messageHash, uint256 indexed leafIndex, uint64 indexed destinationAndNonce, bytes32 committedRoot, bytes message )"
                        },
                        "ImproperUpdate": {
                            "event": "ImproperUpdate",
                            "content": "ImproperUpdate(bytes32 oldRoot, bytes32 newRoot, bytes signature)"
                        },
                        "DoubleUpdate": {
                            "event": "DoubleUpdate",
                            "content": "DoubleUpdate( bytes32 oldRoot, bytes32[2] newRoot, bytes signature, bytes signature2 )"
                        },
                        "UpdaterSlashed": {
                            "event": "UpdaterSlashed",
                            "content": "UpdaterSlashed(address indexed updater, address indexed reporter)"
                        },
                        "NewUpdaterManager": {
                            "event": "NewUpdaterManager",
                            "content": "NewUpdaterManager(address updaterManager)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "Home._setUpdaterManager": "52f36a7c1cbc0433f1472706375ea288",
                "Home.__QueueManager_initialize": "3998a8cd898095b0a34085b5ed244722",
                "Home.__NomadBase_initialize": "5cd273d0fa82bede1859d8c4d67697fc",
                "IUpdaterManager.updater": "9abf613549c1e4a8b9530f1437602d16",
                "Home._setUpdater": "9623dcfa5e1e10e77f82bcc76477ac17",
                "Home.onlyUpdaterManager": "969db736274e92f3359d032965f3ff20",
                "Message.formatMessage": "727f2dca5c5a05f3a4a339b6d9e7c1bd",
                "Home.root": "05160a3d9c679ee4e603941575d6128e",
                "Home.count": "8590b4d40dd23ba6437757860527a776",
                "Home.notFailed": "9db0614c83f62e4c695ce7d5dbdb1d37",
                "Home._destinationAndNonce": "e72847fef1e876ae91626eab708a44fe",
                "Home.improperUpdate": "3a4c93d5a1c229b402b97c9f9addfa15",
                "NomadBase._isUpdaterSignature": "3db2de79261143251f0b355775a0a841",
                "Home._fail": "5b6a177ca0fae33c7906dfb80083c2b7",
                "Home._homeDomainHash": "71fbf050dd298da02788840bc01733c4",
                "Address.isContract": "b946110d999861cda9a1e7e7629934c3",
                "IUpdaterManager.slashUpdater": "29def1b0d8adc06831ad8907c54f4675"
            },
            "md5": "c4e602fcdb0d68a1dda501386fb37147"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\packages\\contracts-core\\contracts\\interfaces\\IMessageRecipient.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\packages\\contracts-core\\contracts\\interfaces\\IMessageRecipient.sol",
            "filename": "IMessageRecipient.sol",
            "imported_contracts": {},
            "contracts": {
                "IMessageRecipient": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "handle": [
                            {
                                "visibility": "external",
                                "content": "function handle( uint32 _origin, uint32 _nonce, bytes32 _sender, bytes memory _message ) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint32",
                                        "name": "_origin"
                                    },
                                    {
                                        "type": "uint32",
                                        "name": "_nonce"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "_sender"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "_message"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "5c9a68b5770f9171acd9ee34820872e7"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "2117ddb2e6649945c942cf2b2780ee65"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\packages\\contracts-core\\contracts\\Replica.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\packages\\contracts-core\\contracts\\Replica.sol",
            "filename": "Replica.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\packages\\contracts-core\\contracts\\Version0.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "Version0": {
                            "original_name": "Version0",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\packages\\contracts-core\\contracts\\NomadBase.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "NomadBase": {
                            "original_name": "NomadBase",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\packages\\contracts-core\\contracts\\Merkle.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "MerkleLib": {
                            "original_name": "MerkleLib",
                            "type": {
                                "__CT__": true,
                                "value": 0
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\packages\\contracts-core\\contracts\\libs\\Message.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "Message": {
                            "original_name": "Message",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\packages\\contracts-core\\contracts\\interfaces\\IMessageRecipient.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "IMessageRecipient": {
                            "original_name": "IMessageRecipient",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\node_modules\\@summa-tx\\memview-sol\\contracts\\TypedMemView.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "TypedMemView": {
                            "original_name": "TypedMemView",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                }
            },
            "contracts": {
                "Replica": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "Version0",
                        "NomadBase"
                    ],
                    "state_variables": {
                        "LEGACY_STATUS_NONE": {
                            "type": "bytes32",
                            "visibility": "public",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "bytes32(0)",
                            "content": "bytes32 public constant LEGACY_STATUS_NONE = bytes32(0);"
                        },
                        "LEGACY_STATUS_PROVEN": {
                            "type": "bytes32",
                            "visibility": "public",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "bytes32(uint256(1))",
                            "content": "bytes32 public constant LEGACY_STATUS_PROVEN = bytes32(uint256(1));"
                        },
                        "LEGACY_STATUS_PROCESSED": {
                            "type": "bytes32",
                            "visibility": "public",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "bytes32(uint256(2))",
                            "content": "bytes32 public constant LEGACY_STATUS_PROCESSED = bytes32(uint256(2));"
                        },
                        "remoteDomain": {
                            "type": "uint32",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint32 public remoteDomain;"
                        },
                        "optimisticSeconds": {
                            "type": "uint256",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256 public optimisticSeconds;"
                        },
                        "entered": {
                            "type": "uint8",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint8 private entered;"
                        },
                        "confirmAt": {
                            "type": "mapping(bytes32 => uint256)",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(bytes32 => uint256) public confirmAt;"
                        },
                        "messages": {
                            "type": "mapping(bytes32 => bytes32)",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(bytes32 => bytes32) public messages;"
                        },
                        "__GAP": {
                            "type": "uint256[45]",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256[45] private __GAP;"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (uint32 _localDomain) NomadBase(_localDomain){}",
                                "modifiers": [
                                    "NomadBase(_localDomain)"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint32",
                                        "name": "_localDomain"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "cc5a63f9c0a89fc93d8f137f55e91aa7"
                            }
                        ],
                        "initialize": [
                            {
                                "visibility": "public",
                                "content": "function initialize( uint32 _remoteDomain, address _updater, bytes32 _committedRoot, uint256 _optimisticSeconds ) public initializer{ __NomadBase_initialize(_updater); entered = 1; remoteDomain = _remoteDomain; committedRoot = _committedRoot; confirmAt[_committedRoot] = 1; _setOptimisticTimeout(_optimisticSeconds);}",
                                "modifiers": [
                                    "initializer"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint32",
                                        "name": "_remoteDomain"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_updater"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "_committedRoot"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_optimisticSeconds"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "remoteDomain",
                                        "",
                                        "Replica"
                                    ],
                                    [
                                        "entered",
                                        "",
                                        "Replica"
                                    ],
                                    [
                                        "confirmAt",
                                        "",
                                        "Replica"
                                    ],
                                    [
                                        "committedRoot",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\packages\\contracts-core\\contracts\\NomadBase.sol",
                                        "NomadBase"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "remoteDomain",
                                        "",
                                        "Replica"
                                    ],
                                    [
                                        "entered",
                                        "",
                                        "Replica"
                                    ],
                                    [
                                        "confirmAt",
                                        "",
                                        "Replica"
                                    ],
                                    [
                                        "committedRoot",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\packages\\contracts-core\\contracts\\NomadBase.sol",
                                        "NomadBase"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Replica._setOptimisticTimeout",
                                        "Replica.__NomadBase_initialize",
                                        "Replica.initializer"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "8080513574997481095d557a42ad0aac"
                            }
                        ],
                        "update": [
                            {
                                "visibility": "external",
                                "content": "function update( bytes32 _oldRoot, bytes32 _newRoot, bytes memory _signature ) external{ require(_oldRoot == committedRoot, \"not current update\"); require( _isUpdaterSignature(_oldRoot, _newRoot, _signature), \"!updater sig\" ); _beforeUpdate(); confirmAt[_newRoot] = block.timestamp + optimisticSeconds; committedRoot = _newRoot; emit Update(remoteDomain, _oldRoot, _newRoot, _signature);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "_oldRoot"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "_newRoot"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "_signature"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "remoteDomain",
                                        "",
                                        "Replica"
                                    ],
                                    [
                                        "optimisticSeconds",
                                        "",
                                        "Replica"
                                    ],
                                    [
                                        "confirmAt",
                                        "",
                                        "Replica"
                                    ],
                                    [
                                        "updater",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\packages\\contracts-core\\contracts\\NomadBase.sol",
                                        "NomadBase"
                                    ],
                                    [
                                        "committedRoot",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\packages\\contracts-core\\contracts\\NomadBase.sol",
                                        "NomadBase"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "confirmAt",
                                        "",
                                        "Replica"
                                    ],
                                    [
                                        "committedRoot",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\packages\\contracts-core\\contracts\\NomadBase.sol",
                                        "NomadBase"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Replica.Update",
                                        "Replica._beforeUpdate",
                                        "Replica._isUpdaterSignature"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "f5cb429675c8ce996914d7bb386c59a8"
                            }
                        ],
                        "proveAndProcess": [
                            {
                                "visibility": "external",
                                "content": "function proveAndProcess( bytes memory _message, bytes32[32] calldata _proof, uint256 _index ) external{ require(prove(keccak256(_message), _proof, _index), \"!prove\"); process(_message);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "_message"
                                    },
                                    {
                                        "type": "bytes32[32] calldata",
                                        "name": "_proof"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_index"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Replica.process",
                                        "Replica.prove"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "101ba253d1640b697918268ff479d2f0"
                            }
                        ],
                        "process": [
                            {
                                "visibility": "public",
                                "content": "function process(bytes memory _message) public returns (bool _success){ bytes29 _m = _message.ref(0); require(_m.destination() == localDomain, \"!destination\"); bytes32 _messageHash = _m.keccak(); require(acceptableRoot(messages[_messageHash]), \"!proven\"); require(entered == 1, \"!reentrant\"); entered = 0; messages[_messageHash] = LEGACY_STATUS_PROCESSED; IMessageRecipient(_m.recipientAddress()).handle( _m.origin(), _m.nonce(), _m.sender(), _m.body().clone() ); emit Process(_messageHash, true, \"\"); entered = 1; return true;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "_message"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": "_success"
                                    }
                                ],
                                "reads": [
                                    [
                                        "LEGACY_STATUS_PROCESSED",
                                        "",
                                        "Replica"
                                    ],
                                    [
                                        "entered",
                                        "",
                                        "Replica"
                                    ],
                                    [
                                        "messages",
                                        "",
                                        "Replica"
                                    ],
                                    [
                                        "localDomain",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\packages\\contracts-core\\contracts\\NomadBase.sol",
                                        "NomadBase"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "entered",
                                        "",
                                        "Replica"
                                    ],
                                    [
                                        "messages",
                                        "",
                                        "Replica"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "_m.recipientAddress",
                                        "_m.sender",
                                        "_m.origin",
                                        "_m.body",
                                        "Replica.acceptableRoot",
                                        "_message.ref",
                                        "_m.keccak",
                                        "_m.destination",
                                        "_m.nonce",
                                        "Replica.IMessageRecipient"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "023fc76e442dec5f498eb6400a407e4a"
                            }
                        ],
                        "setOptimisticTimeout": [
                            {
                                "visibility": "external",
                                "content": "function setOptimisticTimeout(uint256 _optimisticSeconds) external onlyOwner{ _setOptimisticTimeout(_optimisticSeconds);}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "_optimisticSeconds"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Replica.onlyOwner",
                                        "Replica._setOptimisticTimeout"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "713befd591065efac6d1b205b26100c6"
                            }
                        ],
                        "setUpdater": [
                            {
                                "visibility": "external",
                                "content": "function setUpdater(address _updater) external onlyOwner{ _setUpdater(_updater);}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_updater"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Replica.onlyOwner",
                                        "Replica._setUpdater"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "7f0d286f50ed41188d1a81f24dff0c50"
                            }
                        ],
                        "setConfirmation": [
                            {
                                "visibility": "external",
                                "content": "function setConfirmation(bytes32 _root, uint256 _confirmAt) external onlyOwner{ uint256 _previousConfirmAt = confirmAt[_root]; confirmAt[_root] = _confirmAt; emit SetConfirmation(_root, _previousConfirmAt, _confirmAt);}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "_root"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_confirmAt"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "confirmAt",
                                        "",
                                        "Replica"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "confirmAt",
                                        "",
                                        "Replica"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Replica.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "7cc363a43de8ba1a3710938d8286c3a5"
                            }
                        ],
                        "acceptableRoot": [
                            {
                                "visibility": "public",
                                "content": "function acceptableRoot(bytes32 _root) public view returns (bool){ if (_root == LEGACY_STATUS_PROVEN) return true; if (_root == LEGACY_STATUS_PROCESSED) return false; uint256 _time = confirmAt[_root]; if (_time == 0){ return false;} return block.timestamp >= _time;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "_root"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "LEGACY_STATUS_PROVEN",
                                        "",
                                        "Replica"
                                    ],
                                    [
                                        "LEGACY_STATUS_PROCESSED",
                                        "",
                                        "Replica"
                                    ],
                                    [
                                        "confirmAt",
                                        "",
                                        "Replica"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "2055c83c632dd59ad609ffb4023e7f9a"
                            }
                        ],
                        "prove": [
                            {
                                "visibility": "public",
                                "content": "function prove( bytes32 _leaf, bytes32[32] calldata _proof, uint256 _index ) public returns (bool){ require( messages[_leaf] != LEGACY_STATUS_PROCESSED, \"already processed\" ); bytes32 _calculatedRoot = MerkleLib.branchRoot(_leaf, _proof, _index); if (acceptableRoot(_calculatedRoot)){ messages[_leaf] = _calculatedRoot; return true;} return false;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "_leaf"
                                    },
                                    {
                                        "type": "bytes32[32] calldata",
                                        "name": "_proof"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_index"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "LEGACY_STATUS_PROCESSED",
                                        "",
                                        "Replica"
                                    ],
                                    [
                                        "messages",
                                        "",
                                        "Replica"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "messages",
                                        "",
                                        "Replica"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Replica.acceptableRoot",
                                        "MerkleLib.branchRoot"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "2b4fe2796ac96b8cd1413723b631ec40"
                            }
                        ],
                        "homeDomainHash": [
                            {
                                "visibility": "public",
                                "content": "function homeDomainHash() public view override returns (bytes32){ return _homeDomainHash(remoteDomain);}",
                                "modifiers": [
                                    "view",
                                    "override"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "remoteDomain",
                                        "",
                                        "Replica"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Replica._homeDomainHash"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "6a025e5773dd7b9936d2d0ceca334e7f"
                            }
                        ],
                        "_setOptimisticTimeout": [
                            {
                                "visibility": "internal",
                                "content": "function _setOptimisticTimeout(uint256 _optimisticSeconds) internal{ uint256 _current = optimisticSeconds; if (_current != 0 && _current > 1500) require(_optimisticSeconds >= 1500, \"optimistic timeout too low\"); require(_optimisticSeconds < 31536000, \"optimistic timeout too high\"); optimisticSeconds = _optimisticSeconds; emit SetOptimisticTimeout(_optimisticSeconds);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "_optimisticSeconds"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "optimisticSeconds",
                                        "",
                                        "Replica"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "optimisticSeconds",
                                        "",
                                        "Replica"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "d72f7ee696a062f5ab0a493a325c455c"
                            }
                        ],
                        "_beforeUpdate": [
                            {
                                "visibility": "internal",
                                "content": "function _beforeUpdate() internal{}",
                                "modifiers": [],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "56f2f0d91b5afe805ddbcb354f95ce31"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {
                        "Process": {
                            "event": "Process",
                            "content": "Process( bytes32 indexed messageHash, bool indexed success, bytes indexed returnData )"
                        },
                        "SetOptimisticTimeout": {
                            "event": "SetOptimisticTimeout",
                            "content": "SetOptimisticTimeout(uint256 timeout)"
                        },
                        "SetConfirmation": {
                            "event": "SetConfirmation",
                            "content": "SetConfirmation( bytes32 indexed root, uint256 previousConfirmAt, uint256 newConfirmAt )"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "bytes": "TypedMemView",
                        "bytes29": "Message"
                    }
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "Replica._setOptimisticTimeout": "d72f7ee696a062f5ab0a493a325c455c",
                "Replica.__NomadBase_initialize": "5cd273d0fa82bede1859d8c4d67697fc",
                "Replica._isUpdaterSignature": "3db2de79261143251f0b355775a0a841",
                "Replica._beforeUpdate": "56f2f0d91b5afe805ddbcb354f95ce31",
                "Replica.process": "023fc76e442dec5f498eb6400a407e4a",
                "Replica.prove": "2b4fe2796ac96b8cd1413723b631ec40",
                "Replica.acceptableRoot": "2055c83c632dd59ad609ffb4023e7f9a",
                "_m.destination": "48ee746e66cd74d88c7b933a510a1d4f",
                "_m.body": "8c61a499784d7ea9b19b40d2139e79f2",
                "_m.origin": "ff53e4a6d4b1f122f84e097eb3b4c29c",
                "_m.nonce": "b56612f1442832e9b93ef3d351f83983",
                "_message.ref": "c7a57b580e04f57a10b3ed0353e6509f",
                "_m.recipientAddress": "d3e184320970bba374186713f0c4ee65",
                "_m.sender": "0b6cc37cf612711034e03659aa7fa0a0",
                "_m.keccak": "3d8664256774c511bdc5f2af4e715115",
                "Replica._setUpdater": "9623dcfa5e1e10e77f82bcc76477ac17",
                "Replica._homeDomainHash": "71fbf050dd298da02788840bc01733c4"
            },
            "md5": "4e9540210f9807f77129c8ddf45ca752"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\packages\\contracts-core\\contracts\\XAppConnectionManager.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\packages\\contracts-core\\contracts\\XAppConnectionManager.sol",
            "filename": "XAppConnectionManager.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\packages\\contracts-core\\contracts\\Home.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "Home": {
                            "original_name": "Home",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\packages\\contracts-core\\contracts\\Replica.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "Replica": {
                            "original_name": "Replica",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\packages\\contracts-core\\contracts\\libs\\TypeCasts.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "TypeCasts": {
                            "original_name": "TypeCasts",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\node_modules\\@openzeppelin\\contracts\\cryptography\\ECDSA.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "ECDSA": {
                            "original_name": "ECDSA",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\node_modules\\@openzeppelin\\contracts\\access\\Ownable.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "Ownable": {
                            "original_name": "Ownable",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                }
            },
            "contracts": {
                "XAppConnectionManager": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "Ownable"
                    ],
                    "state_variables": {
                        "home": {
                            "type": "Home",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "Home public home;"
                        },
                        "replicaToDomain": {
                            "type": "mapping(address => uint32)",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(address => uint32) public replicaToDomain;"
                        },
                        "domainToReplica": {
                            "type": "mapping(uint32 => address)",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(uint32 => address) public domainToReplica;"
                        },
                        "watcherPermissions": {
                            "type": "mapping(address => mapping(uint32 => bool))",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(address => mapping(uint32 => bool)) private watcherPermissions;"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor () Ownable(){}",
                                "modifiers": [
                                    "Ownable()"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "a370f173ef05467438b2c23c20da9ecb"
                            }
                        ],
                        "unenrollReplica": [
                            {
                                "visibility": "external",
                                "content": "function unenrollReplica( uint32 _domain, bytes32 _updater, bytes memory _signature ) external{ address _replica = domainToReplica[_domain]; require(_replica != address(0), \"!replica exists\"); require( Replica(_replica).updater() == TypeCasts.bytes32ToAddress(_updater), \"!current updater\" ); address _watcher = _recoverWatcherFromSig( _domain, TypeCasts.addressToBytes32(_replica), _updater, _signature ); require(watcherPermissions[_watcher][_domain], \"!valid watcher\"); _clearReplica(_replica);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint32",
                                        "name": "_domain"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "_updater"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "_signature"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "domainToReplica",
                                        "",
                                        "XAppConnectionManager"
                                    ],
                                    [
                                        "watcherPermissions",
                                        "",
                                        "XAppConnectionManager"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "XAppConnectionManager._clearReplica",
                                        "XAppConnectionManager._recoverWatcherFromSig",
                                        "XAppConnectionManager.Replica",
                                        "TypeCasts.addressToBytes32",
                                        "TypeCasts.bytes32ToAddress"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "8d7d80c9b10624d4055ccc01a783bc38"
                            }
                        ],
                        "setHome": [
                            {
                                "visibility": "external",
                                "content": "function setHome(address _home) external onlyOwner{ home = Home(_home);}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_home"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "home",
                                        "",
                                        "XAppConnectionManager"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "home",
                                        "",
                                        "XAppConnectionManager"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "XAppConnectionManager.Home",
                                        "XAppConnectionManager.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "56df325a37cb8e7458e19671c34fdad1"
                            }
                        ],
                        "ownerEnrollReplica": [
                            {
                                "visibility": "external",
                                "content": "function ownerEnrollReplica(address _replica, uint32 _domain) external onlyOwner{ _clearReplica(_replica); _clearDomain(_domain); replicaToDomain[_replica] = _domain; domainToReplica[_domain] = _replica; emit ReplicaEnrolled(_domain, _replica);}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_replica"
                                    },
                                    {
                                        "type": "uint32",
                                        "name": "_domain"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "replicaToDomain",
                                        "",
                                        "XAppConnectionManager"
                                    ],
                                    [
                                        "domainToReplica",
                                        "",
                                        "XAppConnectionManager"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "replicaToDomain",
                                        "",
                                        "XAppConnectionManager"
                                    ],
                                    [
                                        "domainToReplica",
                                        "",
                                        "XAppConnectionManager"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "XAppConnectionManager._clearDomain",
                                        "XAppConnectionManager._clearReplica",
                                        "XAppConnectionManager.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "8f1da0ca592582d10d2d8c20530c9b21"
                            }
                        ],
                        "ownerUnenrollReplica": [
                            {
                                "visibility": "external",
                                "content": "function ownerUnenrollReplica(address _replica) external onlyOwner{ _clearReplica(_replica);}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_replica"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "XAppConnectionManager._clearReplica",
                                        "XAppConnectionManager.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "f5a1b205034e9fa3b57a600a24986077"
                            }
                        ],
                        "setWatcherPermission": [
                            {
                                "visibility": "external",
                                "content": "function setWatcherPermission( address _watcher, uint32 _domain, bool _access ) external onlyOwner{ watcherPermissions[_watcher][_domain] = _access; emit WatcherPermissionSet(_domain, _watcher, _access);}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_watcher"
                                    },
                                    {
                                        "type": "uint32",
                                        "name": "_domain"
                                    },
                                    {
                                        "type": "bool",
                                        "name": "_access"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "watcherPermissions",
                                        "",
                                        "XAppConnectionManager"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "watcherPermissions",
                                        "",
                                        "XAppConnectionManager"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "XAppConnectionManager.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "2bb311a4ac1d6cbb490a81466be41cd5"
                            }
                        ],
                        "localDomain": [
                            {
                                "visibility": "external",
                                "content": "function localDomain() external view returns (uint32){ return home.localDomain();}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint32",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "home",
                                        "",
                                        "XAppConnectionManager"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Home.localDomain"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "c843d20119f7f3c15e6b3dbd268615ff"
                            }
                        ],
                        "watcherPermission": [
                            {
                                "visibility": "external",
                                "content": "function watcherPermission(address _watcher, uint32 _domain) external view returns (bool){ return watcherPermissions[_watcher][_domain];}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_watcher"
                                    },
                                    {
                                        "type": "uint32",
                                        "name": "_domain"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "watcherPermissions",
                                        "",
                                        "XAppConnectionManager"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "54fede8ca705848191335a03520f116b"
                            }
                        ],
                        "isReplica": [
                            {
                                "visibility": "public",
                                "content": "function isReplica(address _replica) public view returns (bool){ return replicaToDomain[_replica] != 0;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_replica"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "replicaToDomain",
                                        "",
                                        "XAppConnectionManager"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "721a13bafd092f5ceb19a4105c8a018e"
                            }
                        ],
                        "_clearReplica": [
                            {
                                "visibility": "internal",
                                "content": "function _clearReplica(address _replica) internal{ uint32 _currentDomain = replicaToDomain[_replica]; if (_currentDomain != 0){ domainToReplica[_currentDomain] = address(0); replicaToDomain[_replica] = 0; emit ReplicaUnenrolled(_currentDomain, _replica);}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_replica"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "replicaToDomain",
                                        "",
                                        "XAppConnectionManager"
                                    ],
                                    [
                                        "domainToReplica",
                                        "",
                                        "XAppConnectionManager"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "replicaToDomain",
                                        "",
                                        "XAppConnectionManager"
                                    ],
                                    [
                                        "domainToReplica",
                                        "",
                                        "XAppConnectionManager"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "fb27c4d1d25d76ff7f6da915af2c02c0"
                            }
                        ],
                        "_clearDomain": [
                            {
                                "visibility": "internal",
                                "content": "function _clearDomain(uint32 _domain) internal{ address _currentReplica = domainToReplica[_domain]; if (_currentReplica != address(0)){ domainToReplica[_domain] = address(0); replicaToDomain[_currentReplica] = 0; emit ReplicaUnenrolled(_domain, _currentReplica);}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint32",
                                        "name": "_domain"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "replicaToDomain",
                                        "",
                                        "XAppConnectionManager"
                                    ],
                                    [
                                        "domainToReplica",
                                        "",
                                        "XAppConnectionManager"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "replicaToDomain",
                                        "",
                                        "XAppConnectionManager"
                                    ],
                                    [
                                        "domainToReplica",
                                        "",
                                        "XAppConnectionManager"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "dd717133ab9de3d40eab90d5f5f77b77"
                            }
                        ],
                        "_recoverWatcherFromSig": [
                            {
                                "visibility": "internal",
                                "content": "function _recoverWatcherFromSig( uint32 _domain, bytes32 _replica, bytes32 _updater, bytes memory _signature ) internal view returns (address){ bytes32 _homeDomainHash = Replica(TypeCasts.bytes32ToAddress(_replica)) .homeDomainHash(); bytes32 _digest = keccak256( abi.encodePacked(_homeDomainHash, _domain, _updater) ); _digest = ECDSA.toEthSignedMessageHash(_digest); return ECDSA.recover(_digest, _signature);}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint32",
                                        "name": "_domain"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "_replica"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "_updater"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "_signature"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "XAppConnectionManager.Replica",
                                        "ECDSA.toEthSignedMessageHash",
                                        "TypeCasts.bytes32ToAddress",
                                        "ECDSA.recover"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "a62deeacf36e412f7fd3a5f055e1a917"
                            }
                        ],
                        "renounceOwnership": [
                            {
                                "visibility": "public",
                                "content": "function renounceOwnership() public override onlyOwner{}",
                                "modifiers": [
                                    "override",
                                    "onlyOwner"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "XAppConnectionManager.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "2869d8470aaa9761e143a8af442387c0"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {
                        "ReplicaEnrolled": {
                            "event": "ReplicaEnrolled",
                            "content": "ReplicaEnrolled(uint32 indexed domain, address replica)"
                        },
                        "ReplicaUnenrolled": {
                            "event": "ReplicaUnenrolled",
                            "content": "ReplicaUnenrolled(uint32 indexed domain, address replica)"
                        },
                        "WatcherPermissionSet": {
                            "event": "WatcherPermissionSet",
                            "content": "WatcherPermissionSet( uint32 indexed domain, address watcher, bool access )"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "TypeCasts.addressToBytes32": "bee9a0c62b2bc2e60a6caa0c60eb7ec6",
                "XAppConnectionManager._recoverWatcherFromSig": "a62deeacf36e412f7fd3a5f055e1a917",
                "TypeCasts.bytes32ToAddress": "1b63d7d389c9524fc335c8a15db1ed73",
                "XAppConnectionManager._clearReplica": "fb27c4d1d25d76ff7f6da915af2c02c0",
                "XAppConnectionManager.onlyOwner": "b92099c80fb280641bb32ab9f3280aeb",
                "XAppConnectionManager._clearDomain": "dd717133ab9de3d40eab90d5f5f77b77",
                "ECDSA.recover": "cb6fb709653b7ee97478f21c99cfb27f",
                "ECDSA.toEthSignedMessageHash": "a5358195f58ef2ff5336b4eead23f34e"
            },
            "md5": "531b45bd94bfed627d275e41ca804d7b"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\packages\\contracts-bridge\\contracts\\BridgeToken.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\packages\\contracts-bridge\\contracts\\BridgeToken.sol",
            "filename": "BridgeToken.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\packages\\contracts-bridge\\contracts\\BridgeMessage.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "BridgeMessage": {
                            "original_name": "BridgeMessage",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\packages\\contracts-bridge\\contracts\\interfaces\\IBridgeToken.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "IBridgeToken": {
                            "original_name": "IBridgeToken",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\packages\\contracts-bridge\\contracts\\vendored\\OZERC20.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "ERC20": {
                            "original_name": "ERC20",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\packages\\contracts-core\\contracts\\Version0.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "Version0": {
                            "original_name": "Version0",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\packages\\contracts-core\\contracts\\XAppConnectionManager.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "TypeCasts": {
                            "original_name": "TypeCasts",
                            "type": {
                                "__CT__": true,
                                "value": 0
                            }
                        }
                    }
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\node_modules\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol": {
                    "in_database": true,
                    "import_all": false,
                    "all_alias": null,
                    "imported": {
                        "OwnableUpgradeable": {
                            "original_name": "OwnableUpgradeable",
                            "type": {
                                "__CT__": true,
                                "value": 1
                            }
                        }
                    }
                }
            },
            "contracts": {
                "BridgeToken": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "Version0",
                        "IBridgeToken",
                        "OwnableUpgradeable",
                        "ERC20"
                    ],
                    "state_variables": {
                        "_PERMIT_TYPEHASH": {
                            "type": "bytes32",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "keccak256( \"Permit(address owner, address spender, uint256 value, uint256 nonce, uint256 deadline)\" )",
                            "content": "bytes32 public immutable _PERMIT_TYPEHASH = keccak256( \"Permit(address owner, address spender, uint256 value, uint256 nonce, uint256 deadline)\" );"
                        },
                        "_EIP712_STRUCTURED_DATA_VERSION": {
                            "type": "bytes32",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "keccak256(bytes(\"1\"))",
                            "content": "bytes32 private immutable _EIP712_STRUCTURED_DATA_VERSION = keccak256(bytes(\"1\"));"
                        },
                        "_EIP712_PREFIX_AND_VERSION": {
                            "type": "uint16",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": "uint16(0x1901)",
                            "content": "uint16 private immutable _EIP712_PREFIX_AND_VERSION = uint16(0x1901);"
                        },
                        "nonces": {
                            "type": "mapping(address => uint256)",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(address => uint256) public nonces;"
                        },
                        "detailsHash": {
                            "type": "bytes32",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": true,
                            "initial_value": null,
                            "content": "bytes32 public override detailsHash;"
                        },
                        "__GAP": {
                            "type": "uint256[48]",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256[48] private __GAP;"
                        }
                    },
                    "functions": {
                        "initialize": [
                            {
                                "visibility": "public",
                                "content": "function initialize() public override initializer{ __Ownable_init();}",
                                "modifiers": [
                                    "override",
                                    "initializer"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BridgeToken.__Ownable_init",
                                        "BridgeToken.initializer"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "b0c6f68ef78df53620704b7129a0668d"
                            }
                        ],
                        "burn": [
                            {
                                "visibility": "external",
                                "content": "function burn(address _from, uint256 _amnt) external override onlyOwner{ _burn(_from, _amnt);}",
                                "modifiers": [
                                    "override",
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_from"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_amnt"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BridgeToken._burn",
                                        "BridgeToken.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "55e34eb6fcb22be1d13f7719377a2b27"
                            }
                        ],
                        "mint": [
                            {
                                "visibility": "external",
                                "content": "function mint(address _to, uint256 _amnt) external override onlyOwner{ _mint(_to, _amnt);}",
                                "modifiers": [
                                    "override",
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_amnt"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BridgeToken._mint",
                                        "BridgeToken.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "2d60abd4d5bf332ba20a225da77b66b0"
                            }
                        ],
                        "setDetailsHash": [
                            {
                                "visibility": "external",
                                "content": "function setDetailsHash(bytes32 _detailsHash) external override onlyOwner{ if (detailsHash != _detailsHash){ detailsHash = _detailsHash;}}",
                                "modifiers": [
                                    "override",
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "_detailsHash"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "detailsHash",
                                        "",
                                        "BridgeToken"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "detailsHash",
                                        "",
                                        "BridgeToken"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BridgeToken.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "4aeaa7d79119d91a402d44184e5ff738"
                            }
                        ],
                        "setDetails": [
                            {
                                "visibility": "external",
                                "content": "function setDetails( string calldata _newName, string calldata _newSymbol, uint8 _newDecimals ) external override{ bool _isFirstDetails = bytes(token.name).length == 0 && bytes(token.symbol).length == 0 && token.decimals == 0; require( _isFirstDetails || BridgeMessage.getDetailsHash( _newName, _newSymbol, _newDecimals ) == detailsHash, \"!committed details\" ); token.name = _newName; token.symbol = _newSymbol; token.decimals = _newDecimals; if (!_isFirstDetails){ emit UpdateDetails(_newName, _newSymbol, _newDecimals);}}",
                                "modifiers": [
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "string calldata",
                                        "name": "_newName"
                                    },
                                    {
                                        "type": "string calldata",
                                        "name": "_newSymbol"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "_newDecimals"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "detailsHash",
                                        "",
                                        "BridgeToken"
                                    ],
                                    [
                                        "token",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\packages\\contracts-bridge\\contracts\\vendored\\OZERC20.sol",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "token",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\packages\\contracts-bridge\\contracts\\vendored\\OZERC20.sol",
                                        "ERC20"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BridgeMessage.getDetailsHash"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "4a7b70a4515007e2bf7f8b77abf17311"
                            }
                        ],
                        "permit": [
                            {
                                "visibility": "external",
                                "content": "function permit( address _owner, address _spender, uint256 _value, uint256 _deadline, uint8 _v, bytes32 _r, bytes32 _s ) external{ require(block.timestamp <= _deadline, \"ERC20Permit: expired deadline\"); require(_owner != address(0), \"ERC20Permit: owner zero address\"); uint256 _nonce = nonces[_owner]; bytes32 _hashStruct = keccak256( abi.encode( _PERMIT_TYPEHASH, _owner, _spender, _value, _nonce, _deadline ) ); bytes32 _digest = keccak256( abi.encodePacked( _EIP712_PREFIX_AND_VERSION, domainSeparator(), _hashStruct ) ); address _signer = ecrecover(_digest, _v, _r, _s); require(_signer == _owner, \"ERC20Permit: invalid signature\"); nonces[_owner] = _nonce + 1; _approve(_owner, _spender, _value);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_owner"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_value"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_deadline"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "_v"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "_r"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "_s"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_PERMIT_TYPEHASH",
                                        "",
                                        "BridgeToken"
                                    ],
                                    [
                                        "_EIP712_PREFIX_AND_VERSION",
                                        "",
                                        "BridgeToken"
                                    ],
                                    [
                                        "nonces",
                                        "",
                                        "BridgeToken"
                                    ],
                                    [
                                        "_owner",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\node_modules\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol",
                                        "OwnableUpgradeable"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "nonces",
                                        "",
                                        "BridgeToken"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BridgeToken.domainSeparator",
                                        "BridgeToken._approve"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "a6f7e9c1d666751adaaa5ccf0a50f7bc"
                            }
                        ],
                        "balanceOf": [
                            {
                                "visibility": "public",
                                "content": "function balanceOf(address _account) public view override(IBridgeToken, ERC20) returns (uint256){ return ERC20.balanceOf(_account);}",
                                "modifiers": [
                                    "view",
                                    "override(IBridgeToken, ERC20)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_account"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20.balanceOf"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "f10a5d6ac3dc3e96523d5482beb3ff70"
                            }
                        ],
                        "name": [
                            {
                                "visibility": "public",
                                "content": "function name() public view override returns (string memory){ return token.name;}",
                                "modifiers": [
                                    "view",
                                    "override"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "string memory",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "token",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\packages\\contracts-bridge\\contracts\\vendored\\OZERC20.sol",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "37739e9775b376ebff5d8fee7aa61f11"
                            }
                        ],
                        "symbol": [
                            {
                                "visibility": "public",
                                "content": "function symbol() public view override returns (string memory){ return token.symbol;}",
                                "modifiers": [
                                    "view",
                                    "override"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "string memory",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "token",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\packages\\contracts-bridge\\contracts\\vendored\\OZERC20.sol",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "5b746b9d7e2bbad402c6d30ac901f46b"
                            }
                        ],
                        "decimals": [
                            {
                                "visibility": "public",
                                "content": "function decimals() public view override returns (uint8){ return token.decimals;}",
                                "modifiers": [
                                    "view",
                                    "override"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint8",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "token",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\packages\\contracts-bridge\\contracts\\vendored\\OZERC20.sol",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "14c4de2ba424af1abdc7dfabc9debd25"
                            }
                        ],
                        "domainSeparator": [
                            {
                                "visibility": "public",
                                "content": "function domainSeparator() public view returns (bytes32){ uint256 _chainId; assembly{ _chainId := chainid()} return keccak256( abi.encode( keccak256( \"EIP712Domain(string name, string version, uint256 chainId, address verifyingContract)\" ), keccak256(bytes(token.name)), _EIP712_STRUCTURED_DATA_VERSION, _chainId, address(this) ) );}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_EIP712_STRUCTURED_DATA_VERSION",
                                        "",
                                        "BridgeToken"
                                    ],
                                    [
                                        "token",
                                        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\packages\\contracts-bridge\\contracts\\vendored\\OZERC20.sol",
                                        "ERC20"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "7d8d537e65f1b89c7cafa6802e583ce6"
                            }
                        ],
                        "transferOwnership": [
                            {
                                "visibility": "public",
                                "content": "function transferOwnership(address _newOwner) public override(IBridgeToken, OwnableUpgradeable) onlyOwner{ OwnableUpgradeable.transferOwnership(_newOwner);}",
                                "modifiers": [
                                    "override(IBridgeToken, OwnableUpgradeable)",
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_newOwner"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "OwnableUpgradeable.transferOwnership",
                                        "BridgeToken.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "fbdeed8a2bbd4d066054cef9cb7a5adf"
                            }
                        ],
                        "renounceOwnership": [
                            {
                                "visibility": "public",
                                "content": "function renounceOwnership() public override onlyOwner{}",
                                "modifiers": [
                                    "override",
                                    "onlyOwner"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BridgeToken.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "2869d8470aaa9761e143a8af442387c0"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {
                        "UpdateDetails": {
                            "event": "UpdateDetails",
                            "content": "UpdateDetails( string indexed name, string indexed symbol, uint8 indexed decimals )"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "BridgeToken.__Ownable_init": "f7820e4676d5bcf96dd81f938b91f4f1",
                "BridgeToken.onlyOwner": "b92099c80fb280641bb32ab9f3280aeb",
                "BridgeToken._burn": "ce07b8c77077638c031abcb12f70ff7f",
                "BridgeToken._mint": "d5279bfbbf8cd215443368694472cd85",
                "BridgeMessage.getDetailsHash": "abb0821f998132bdc45012fa470ede94",
                "BridgeToken._approve": "b173c311c1c8ec08b7ba9f49f98dc698",
                "BridgeToken.domainSeparator": "7d8d537e65f1b89c7cafa6802e583ce6",
                "ERC20.balanceOf": "f10a5d6ac3dc3e96523d5482beb3ff70",
                "OwnableUpgradeable.transferOwnership": "fbdeed8a2bbd4d066054cef9cb7a5adf"
            },
            "md5": "7ac073c9f194f2ad4d93f9254d163686"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\packages\\contracts-core\\contracts\\libs\\Merkle.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\packages\\contracts-core\\contracts\\libs\\Merkle.sol",
            "filename": "Merkle.sol",
            "imported_contracts": {},
            "contracts": {
                "MerkleLib": {
                    "type": {
                        "__CT__": true,
                        "value": 2
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {
                        "TREE_DEPTH": {
                            "type": "uint256",
                            "visibility": "internal",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "32",
                            "content": "uint256 internal constant TREE_DEPTH = 32;"
                        },
                        "MAX_LEAVES": {
                            "type": "uint256",
                            "visibility": "internal",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "2**TREE_DEPTH - 1",
                            "content": "uint256 internal constant MAX_LEAVES = 2**TREE_DEPTH - 1;"
                        },
                        "Z_0": {
                            "type": "bytes32",
                            "visibility": "internal",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "hex\"0000000000000000000000000000000000000000000000000000000000000000\"",
                            "content": "bytes32 internal constant Z_0 = hex\"0000000000000000000000000000000000000000000000000000000000000000\";"
                        },
                        "Z_1": {
                            "type": "bytes32",
                            "visibility": "internal",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "hex\"ad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5\"",
                            "content": "bytes32 internal constant Z_1 = hex\"ad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5\";"
                        },
                        "Z_2": {
                            "type": "bytes32",
                            "visibility": "internal",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "hex\"b4c11951957c6f8f642c4af61cd6b24640fec6dc7fc607ee8206a99e92410d30\"",
                            "content": "bytes32 internal constant Z_2 = hex\"b4c11951957c6f8f642c4af61cd6b24640fec6dc7fc607ee8206a99e92410d30\";"
                        },
                        "Z_3": {
                            "type": "bytes32",
                            "visibility": "internal",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "hex\"21ddb9a356815c3fac1026b6dec5df3124afbadb485c9ba5a3e3398a04b7ba85\"",
                            "content": "bytes32 internal constant Z_3 = hex\"21ddb9a356815c3fac1026b6dec5df3124afbadb485c9ba5a3e3398a04b7ba85\";"
                        },
                        "Z_4": {
                            "type": "bytes32",
                            "visibility": "internal",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "hex\"e58769b32a1beaf1ea27375a44095a0d1fb664ce2dd358e7fcbfb78c26a19344\"",
                            "content": "bytes32 internal constant Z_4 = hex\"e58769b32a1beaf1ea27375a44095a0d1fb664ce2dd358e7fcbfb78c26a19344\";"
                        },
                        "Z_5": {
                            "type": "bytes32",
                            "visibility": "internal",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "hex\"0eb01ebfc9ed27500cd4dfc979272d1f0913cc9f66540d7e8005811109e1cf2d\"",
                            "content": "bytes32 internal constant Z_5 = hex\"0eb01ebfc9ed27500cd4dfc979272d1f0913cc9f66540d7e8005811109e1cf2d\";"
                        },
                        "Z_6": {
                            "type": "bytes32",
                            "visibility": "internal",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "hex\"887c22bd8750d34016ac3c66b5ff102dacdd73f6b014e710b51e8022af9a1968\"",
                            "content": "bytes32 internal constant Z_6 = hex\"887c22bd8750d34016ac3c66b5ff102dacdd73f6b014e710b51e8022af9a1968\";"
                        },
                        "Z_7": {
                            "type": "bytes32",
                            "visibility": "internal",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "hex\"ffd70157e48063fc33c97a050f7f640233bf646cc98d9524c6b92bcf3ab56f83\"",
                            "content": "bytes32 internal constant Z_7 = hex\"ffd70157e48063fc33c97a050f7f640233bf646cc98d9524c6b92bcf3ab56f83\";"
                        },
                        "Z_8": {
                            "type": "bytes32",
                            "visibility": "internal",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "hex\"9867cc5f7f196b93bae1e27e6320742445d290f2263827498b54fec539f756af\"",
                            "content": "bytes32 internal constant Z_8 = hex\"9867cc5f7f196b93bae1e27e6320742445d290f2263827498b54fec539f756af\";"
                        },
                        "Z_9": {
                            "type": "bytes32",
                            "visibility": "internal",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "hex\"cefad4e508c098b9a7e1d8feb19955fb02ba9675585078710969d3440f5054e0\"",
                            "content": "bytes32 internal constant Z_9 = hex\"cefad4e508c098b9a7e1d8feb19955fb02ba9675585078710969d3440f5054e0\";"
                        },
                        "Z_10": {
                            "type": "bytes32",
                            "visibility": "internal",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "hex\"f9dc3e7fe016e050eff260334f18a5d4fe391d82092319f5964f2e2eb7c1c3a5\"",
                            "content": "bytes32 internal constant Z_10 = hex\"f9dc3e7fe016e050eff260334f18a5d4fe391d82092319f5964f2e2eb7c1c3a5\";"
                        },
                        "Z_11": {
                            "type": "bytes32",
                            "visibility": "internal",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "hex\"f8b13a49e282f609c317a833fb8d976d11517c571d1221a265d25af778ecf892\"",
                            "content": "bytes32 internal constant Z_11 = hex\"f8b13a49e282f609c317a833fb8d976d11517c571d1221a265d25af778ecf892\";"
                        },
                        "Z_12": {
                            "type": "bytes32",
                            "visibility": "internal",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "hex\"3490c6ceeb450aecdc82e28293031d10c7d73bf85e57bf041a97360aa2c5d99c\"",
                            "content": "bytes32 internal constant Z_12 = hex\"3490c6ceeb450aecdc82e28293031d10c7d73bf85e57bf041a97360aa2c5d99c\";"
                        },
                        "Z_13": {
                            "type": "bytes32",
                            "visibility": "internal",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "hex\"c1df82d9c4b87413eae2ef048f94b4d3554cea73d92b0f7af96e0271c691e2bb\"",
                            "content": "bytes32 internal constant Z_13 = hex\"c1df82d9c4b87413eae2ef048f94b4d3554cea73d92b0f7af96e0271c691e2bb\";"
                        },
                        "Z_14": {
                            "type": "bytes32",
                            "visibility": "internal",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "hex\"5c67add7c6caf302256adedf7ab114da0acfe870d449a3a489f781d659e8becc\"",
                            "content": "bytes32 internal constant Z_14 = hex\"5c67add7c6caf302256adedf7ab114da0acfe870d449a3a489f781d659e8becc\";"
                        },
                        "Z_15": {
                            "type": "bytes32",
                            "visibility": "internal",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "hex\"da7bce9f4e8618b6bd2f4132ce798cdc7a60e7e1460a7299e3c6342a579626d2\"",
                            "content": "bytes32 internal constant Z_15 = hex\"da7bce9f4e8618b6bd2f4132ce798cdc7a60e7e1460a7299e3c6342a579626d2\";"
                        },
                        "Z_16": {
                            "type": "bytes32",
                            "visibility": "internal",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "hex\"2733e50f526ec2fa19a22b31e8ed50f23cd1fdf94c9154ed3a7609a2f1ff981f\"",
                            "content": "bytes32 internal constant Z_16 = hex\"2733e50f526ec2fa19a22b31e8ed50f23cd1fdf94c9154ed3a7609a2f1ff981f\";"
                        },
                        "Z_17": {
                            "type": "bytes32",
                            "visibility": "internal",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "hex\"e1d3b5c807b281e4683cc6d6315cf95b9ade8641defcb32372f1c126e398ef7a\"",
                            "content": "bytes32 internal constant Z_17 = hex\"e1d3b5c807b281e4683cc6d6315cf95b9ade8641defcb32372f1c126e398ef7a\";"
                        },
                        "Z_18": {
                            "type": "bytes32",
                            "visibility": "internal",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "hex\"5a2dce0a8a7f68bb74560f8f71837c2c2ebbcbf7fffb42ae1896f13f7c7479a0\"",
                            "content": "bytes32 internal constant Z_18 = hex\"5a2dce0a8a7f68bb74560f8f71837c2c2ebbcbf7fffb42ae1896f13f7c7479a0\";"
                        },
                        "Z_19": {
                            "type": "bytes32",
                            "visibility": "internal",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "hex\"b46a28b6f55540f89444f63de0378e3d121be09e06cc9ded1c20e65876d36aa0\"",
                            "content": "bytes32 internal constant Z_19 = hex\"b46a28b6f55540f89444f63de0378e3d121be09e06cc9ded1c20e65876d36aa0\";"
                        },
                        "Z_20": {
                            "type": "bytes32",
                            "visibility": "internal",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "hex\"c65e9645644786b620e2dd2ad648ddfcbf4a7e5b1a3a4ecfe7f64667a3f0b7e2\"",
                            "content": "bytes32 internal constant Z_20 = hex\"c65e9645644786b620e2dd2ad648ddfcbf4a7e5b1a3a4ecfe7f64667a3f0b7e2\";"
                        },
                        "Z_21": {
                            "type": "bytes32",
                            "visibility": "internal",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "hex\"f4418588ed35a2458cffeb39b93d26f18d2ab13bdce6aee58e7b99359ec2dfd9\"",
                            "content": "bytes32 internal constant Z_21 = hex\"f4418588ed35a2458cffeb39b93d26f18d2ab13bdce6aee58e7b99359ec2dfd9\";"
                        },
                        "Z_22": {
                            "type": "bytes32",
                            "visibility": "internal",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "hex\"5a9c16dc00d6ef18b7933a6f8dc65ccb55667138776f7dea101070dc8796e377\"",
                            "content": "bytes32 internal constant Z_22 = hex\"5a9c16dc00d6ef18b7933a6f8dc65ccb55667138776f7dea101070dc8796e377\";"
                        },
                        "Z_23": {
                            "type": "bytes32",
                            "visibility": "internal",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "hex\"4df84f40ae0c8229d0d6069e5c8f39a7c299677a09d367fc7b05e3bc380ee652\"",
                            "content": "bytes32 internal constant Z_23 = hex\"4df84f40ae0c8229d0d6069e5c8f39a7c299677a09d367fc7b05e3bc380ee652\";"
                        },
                        "Z_24": {
                            "type": "bytes32",
                            "visibility": "internal",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "hex\"cdc72595f74c7b1043d0e1ffbab734648c838dfb0527d971b602bc216c9619ef\"",
                            "content": "bytes32 internal constant Z_24 = hex\"cdc72595f74c7b1043d0e1ffbab734648c838dfb0527d971b602bc216c9619ef\";"
                        },
                        "Z_25": {
                            "type": "bytes32",
                            "visibility": "internal",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "hex\"0abf5ac974a1ed57f4050aa510dd9c74f508277b39d7973bb2dfccc5eeb0618d\"",
                            "content": "bytes32 internal constant Z_25 = hex\"0abf5ac974a1ed57f4050aa510dd9c74f508277b39d7973bb2dfccc5eeb0618d\";"
                        },
                        "Z_26": {
                            "type": "bytes32",
                            "visibility": "internal",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "hex\"b8cd74046ff337f0a7bf2c8e03e10f642c1886798d71806ab1e888d9e5ee87d0\"",
                            "content": "bytes32 internal constant Z_26 = hex\"b8cd74046ff337f0a7bf2c8e03e10f642c1886798d71806ab1e888d9e5ee87d0\";"
                        },
                        "Z_27": {
                            "type": "bytes32",
                            "visibility": "internal",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "hex\"838c5655cb21c6cb83313b5a631175dff4963772cce9108188b34ac87c81c41e\"",
                            "content": "bytes32 internal constant Z_27 = hex\"838c5655cb21c6cb83313b5a631175dff4963772cce9108188b34ac87c81c41e\";"
                        },
                        "Z_28": {
                            "type": "bytes32",
                            "visibility": "internal",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "hex\"662ee4dd2dd7b2bc707961b1e646c4047669dcb6584f0d8d770daf5d7e7deb2e\"",
                            "content": "bytes32 internal constant Z_28 = hex\"662ee4dd2dd7b2bc707961b1e646c4047669dcb6584f0d8d770daf5d7e7deb2e\";"
                        },
                        "Z_29": {
                            "type": "bytes32",
                            "visibility": "internal",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "hex\"388ab20e2573d171a88108e79d820e98f26c0b84aa8b2f4aa4968dbb818ea322\"",
                            "content": "bytes32 internal constant Z_29 = hex\"388ab20e2573d171a88108e79d820e98f26c0b84aa8b2f4aa4968dbb818ea322\";"
                        },
                        "Z_30": {
                            "type": "bytes32",
                            "visibility": "internal",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "hex\"93237c50ba75ee485f4c22adf2f741400bdf8d6a9cc7df7ecae576221665d735\"",
                            "content": "bytes32 internal constant Z_30 = hex\"93237c50ba75ee485f4c22adf2f741400bdf8d6a9cc7df7ecae576221665d735\";"
                        },
                        "Z_31": {
                            "type": "bytes32",
                            "visibility": "internal",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "hex\"8448818bb4ae4562849e949e17ac16e0be16688e156b5cf15e098c627c0056a9\"",
                            "content": "bytes32 internal constant Z_31 = hex\"8448818bb4ae4562849e949e17ac16e0be16688e156b5cf15e098c627c0056a9\";"
                        }
                    },
                    "functions": {
                        "insert": [
                            {
                                "visibility": "internal",
                                "content": "function insert(Tree storage _tree, bytes32 _node) internal{ require(_tree.count < MAX_LEAVES, \"merkle tree full\"); _tree.count += 1; uint256 size = _tree.count; for (uint256 i = 0; i < TREE_DEPTH; i++){ if ((size & 1) == 1){ _tree.branch[i] = _node; return;} _node = keccak256(abi.encodePacked(_tree.branch[i], _node)); size /= 2;} assert(false);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "Tree storage",
                                        "name": "_tree"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "_node"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "TREE_DEPTH",
                                        "",
                                        "MerkleLib"
                                    ],
                                    [
                                        "MAX_LEAVES",
                                        "",
                                        "MerkleLib"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "aeb1e942dc405cf29d04fc78b18eba2a"
                            }
                        ],
                        "rootWithCtx": [
                            {
                                "visibility": "internal",
                                "content": "function rootWithCtx(Tree storage _tree, bytes32[TREE_DEPTH] memory _zeroes) internal view returns (bytes32 _current){ uint256 _index = _tree.count; for (uint256 i = 0; i < TREE_DEPTH; i++){ uint256 _ithBit = (_index >> i) & 0x01; bytes32 _next = _tree.branch[i]; if (_ithBit == 1){ _current = keccak256(abi.encodePacked(_next, _current));} else{ _current = keccak256(abi.encodePacked(_current, _zeroes[i]));}}}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "Tree storage",
                                        "name": "_tree"
                                    },
                                    {
                                        "type": "bytes32[TREE_DEPTH] memory",
                                        "name": "_zeroes"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": "_current"
                                    }
                                ],
                                "reads": [
                                    [
                                        "TREE_DEPTH",
                                        "",
                                        "MerkleLib"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "6b21a94ff4d907f30f0f892b4ac9ab9f"
                            }
                        ],
                        "root": [
                            {
                                "visibility": "internal",
                                "content": "function root(Tree storage _tree) internal view returns (bytes32){ return rootWithCtx(_tree, zeroHashes());}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "Tree storage",
                                        "name": "_tree"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "MerkleLib.zeroHashes",
                                        "MerkleLib.rootWithCtx"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "a8b88c2ac03a34bd20bbbb525bd6c224"
                            }
                        ],
                        "zeroHashes": [
                            {
                                "visibility": "internal",
                                "content": "function zeroHashes() internal pure returns (bytes32[TREE_DEPTH] memory _zeroes){ _zeroes[0] = Z_0; _zeroes[1] = Z_1; _zeroes[2] = Z_2; _zeroes[3] = Z_3; _zeroes[4] = Z_4; _zeroes[5] = Z_5; _zeroes[6] = Z_6; _zeroes[7] = Z_7; _zeroes[8] = Z_8; _zeroes[9] = Z_9; _zeroes[10] = Z_10; _zeroes[11] = Z_11; _zeroes[12] = Z_12; _zeroes[13] = Z_13; _zeroes[14] = Z_14; _zeroes[15] = Z_15; _zeroes[16] = Z_16; _zeroes[17] = Z_17; _zeroes[18] = Z_18; _zeroes[19] = Z_19; _zeroes[20] = Z_20; _zeroes[21] = Z_21; _zeroes[22] = Z_22; _zeroes[23] = Z_23; _zeroes[24] = Z_24; _zeroes[25] = Z_25; _zeroes[26] = Z_26; _zeroes[27] = Z_27; _zeroes[28] = Z_28; _zeroes[29] = Z_29; _zeroes[30] = Z_30; _zeroes[31] = Z_31;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "bytes32[TREE_DEPTH] memory",
                                        "name": "_zeroes"
                                    }
                                ],
                                "reads": [
                                    [
                                        "TREE_DEPTH",
                                        "",
                                        "MerkleLib"
                                    ],
                                    [
                                        "Z_0",
                                        "",
                                        "MerkleLib"
                                    ],
                                    [
                                        "Z_1",
                                        "",
                                        "MerkleLib"
                                    ],
                                    [
                                        "Z_2",
                                        "",
                                        "MerkleLib"
                                    ],
                                    [
                                        "Z_3",
                                        "",
                                        "MerkleLib"
                                    ],
                                    [
                                        "Z_4",
                                        "",
                                        "MerkleLib"
                                    ],
                                    [
                                        "Z_5",
                                        "",
                                        "MerkleLib"
                                    ],
                                    [
                                        "Z_6",
                                        "",
                                        "MerkleLib"
                                    ],
                                    [
                                        "Z_7",
                                        "",
                                        "MerkleLib"
                                    ],
                                    [
                                        "Z_8",
                                        "",
                                        "MerkleLib"
                                    ],
                                    [
                                        "Z_9",
                                        "",
                                        "MerkleLib"
                                    ],
                                    [
                                        "Z_10",
                                        "",
                                        "MerkleLib"
                                    ],
                                    [
                                        "Z_11",
                                        "",
                                        "MerkleLib"
                                    ],
                                    [
                                        "Z_12",
                                        "",
                                        "MerkleLib"
                                    ],
                                    [
                                        "Z_13",
                                        "",
                                        "MerkleLib"
                                    ],
                                    [
                                        "Z_14",
                                        "",
                                        "MerkleLib"
                                    ],
                                    [
                                        "Z_15",
                                        "",
                                        "MerkleLib"
                                    ],
                                    [
                                        "Z_16",
                                        "",
                                        "MerkleLib"
                                    ],
                                    [
                                        "Z_17",
                                        "",
                                        "MerkleLib"
                                    ],
                                    [
                                        "Z_18",
                                        "",
                                        "MerkleLib"
                                    ],
                                    [
                                        "Z_19",
                                        "",
                                        "MerkleLib"
                                    ],
                                    [
                                        "Z_20",
                                        "",
                                        "MerkleLib"
                                    ],
                                    [
                                        "Z_21",
                                        "",
                                        "MerkleLib"
                                    ],
                                    [
                                        "Z_22",
                                        "",
                                        "MerkleLib"
                                    ],
                                    [
                                        "Z_23",
                                        "",
                                        "MerkleLib"
                                    ],
                                    [
                                        "Z_24",
                                        "",
                                        "MerkleLib"
                                    ],
                                    [
                                        "Z_25",
                                        "",
                                        "MerkleLib"
                                    ],
                                    [
                                        "Z_26",
                                        "",
                                        "MerkleLib"
                                    ],
                                    [
                                        "Z_27",
                                        "",
                                        "MerkleLib"
                                    ],
                                    [
                                        "Z_28",
                                        "",
                                        "MerkleLib"
                                    ],
                                    [
                                        "Z_29",
                                        "",
                                        "MerkleLib"
                                    ],
                                    [
                                        "Z_30",
                                        "",
                                        "MerkleLib"
                                    ],
                                    [
                                        "Z_31",
                                        "",
                                        "MerkleLib"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "01a047f92f708f269273892ca8d67721"
                            }
                        ],
                        "branchRoot": [
                            {
                                "visibility": "internal",
                                "content": "function branchRoot( bytes32 _item, bytes32[TREE_DEPTH] memory _branch, uint256 _index ) internal pure returns (bytes32 _current){ _current = _item; for (uint256 i = 0; i < TREE_DEPTH; i++){ uint256 _ithBit = (_index >> i) & 0x01; bytes32 _next = _branch[i]; if (_ithBit == 1){ _current = keccak256(abi.encodePacked(_next, _current));} else{ _current = keccak256(abi.encodePacked(_current, _next));}}}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "_item"
                                    },
                                    {
                                        "type": "bytes32[TREE_DEPTH] memory",
                                        "name": "_branch"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_index"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": "_current"
                                    }
                                ],
                                "reads": [
                                    [
                                        "TREE_DEPTH",
                                        "",
                                        "MerkleLib"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "980648c41f86ced9954dad22e28ee932"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {
                        "Tree": {
                            "content": "Tree{ bytes32[TREE_DEPTH] branch; uint256 count;}"
                        }
                    },
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "MerkleLib.zeroHashes": "01a047f92f708f269273892ca8d67721",
                "MerkleLib.rootWithCtx": "6b21a94ff4d907f30f0f892b4ac9ab9f"
            },
            "md5": "d6c483c62d4479315fd705f4895de507"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\packages\\contracts-core\\contracts\\libs\\Queue.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\Nomad20220801\\packages\\contracts-core\\contracts\\libs\\Queue.sol",
            "filename": "Queue.sol",
            "imported_contracts": {},
            "contracts": {
                "QueueLib": {
                    "type": {
                        "__CT__": true,
                        "value": 2
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "initialize": [
                            {
                                "visibility": "internal",
                                "content": "function initialize(Queue storage _q) internal{ if (_q.first == 0){ _q.first = 1;}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "Queue storage",
                                        "name": "_q"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "facd974685a4df1a59868ce3a4f57789"
                            }
                        ],
                        "enqueue": [
                            {
                                "visibility": "internal",
                                "content": "function enqueue(Queue storage _q, bytes32 _item) internal returns (uint128 _last){ _last = _q.last + 1; _q.last = _last; if (_item != bytes32(0)){ _q.queue[_last] = _item;}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "Queue storage",
                                        "name": "_q"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "_item"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint128",
                                        "name": "_last"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "63997233fd546f9724b8a0d66c684aeb"
                            },
                            {
                                "visibility": "internal",
                                "content": "function enqueue(Queue storage _q, bytes32[] memory _items) internal returns (uint128 _last){ _last = _q.last; for (uint256 i = 0; i < _items.length; i += 1){ _last += 1; bytes32 _item = _items[i]; if (_item != bytes32(0)){ _q.queue[_last] = _item;}} _q.last = _last;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "Queue storage",
                                        "name": "_q"
                                    },
                                    {
                                        "type": "bytes32[] memory",
                                        "name": "_items"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint128",
                                        "name": "_last"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "a1de2952c345c6c8be9a68c12b6e8b4e"
                            }
                        ],
                        "dequeue": [
                            {
                                "visibility": "internal",
                                "content": "function dequeue(Queue storage _q) internal returns (bytes32 _item){ uint128 _last = _q.last; uint128 _first = _q.first; require(_length(_last, _first) != 0, \"Empty\"); _item = _q.queue[_first]; if (_item != bytes32(0)){ delete _q.queue[_first];} _q.first = _first + 1;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "Queue storage",
                                        "name": "_q"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": "_item"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "QueueLib._length"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "4359012877e38572095a747ad7e49ee5"
                            },
                            {
                                "visibility": "internal",
                                "content": "function dequeue(Queue storage _q, uint256 _number) internal returns (bytes32[] memory){ uint128 _last = _q.last; uint128 _first = _q.first; require(_length(_last, _first) >= _number, \"Insufficient\"); bytes32[] memory _items = new bytes32[](_number); for (uint256 i = 0; i < _number; i++){ _items[i] = _q.queue[_first]; delete _q.queue[_first]; _first++;} _q.first = _first; return _items;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "Queue storage",
                                        "name": "_q"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_number"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes32[] memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "QueueLib._length"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "846349a2c81f5a0c82b76f9b8825ebdb"
                            }
                        ],
                        "contains": [
                            {
                                "visibility": "internal",
                                "content": "function contains(Queue storage _q, bytes32 _item) internal view returns (bool){ for (uint256 i = _q.first; i <= _q.last; i++){ if (_q.queue[i] == _item){ return true;}} return false;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "Queue storage",
                                        "name": "_q"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "_item"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "1cfd157738e521a0b5de30b5fa1b527f"
                            }
                        ],
                        "lastItem": [
                            {
                                "visibility": "internal",
                                "content": "function lastItem(Queue storage _q) internal view returns (bytes32){ return _q.queue[_q.last];}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "Queue storage",
                                        "name": "_q"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "01ded037c707af4d403ca81bb46866a1"
                            }
                        ],
                        "peek": [
                            {
                                "visibility": "internal",
                                "content": "function peek(Queue storage _q) internal view returns (bytes32 _item){ require(!isEmpty(_q), \"Empty\"); _item = _q.queue[_q.first];}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "Queue storage",
                                        "name": "_q"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": "_item"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "QueueLib.isEmpty"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "d819c4d67a5a6ed784215319e9957e19"
                            }
                        ],
                        "isEmpty": [
                            {
                                "visibility": "internal",
                                "content": "function isEmpty(Queue storage _q) internal view returns (bool){ return _q.last < _q.first;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "Queue storage",
                                        "name": "_q"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "80477432168eb36761274dc5a81c91d6"
                            }
                        ],
                        "length": [
                            {
                                "visibility": "internal",
                                "content": "function length(Queue storage _q) internal view returns (uint256){ uint128 _last = _q.last; uint128 _first = _q.first; return _length(_last, _first);}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "Queue storage",
                                        "name": "_q"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "QueueLib._length"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "95ee751e6cfc85adf6b87f003e3ee215"
                            }
                        ],
                        "_length": [
                            {
                                "visibility": "internal",
                                "content": "function _length(uint128 _last, uint128 _first) internal pure returns (uint256){ return uint256(_last + 1 - _first);}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint128",
                                        "name": "_last"
                                    },
                                    {
                                        "type": "uint128",
                                        "name": "_first"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "389a9cd0daa2f13edd1149f7257cec18"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {
                        "Queue": {
                            "content": "Queue{ uint128 first; uint128 last; mapping(uint256 => bytes32) queue;}"
                        }
                    },
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "QueueLib._length": "389a9cd0daa2f13edd1149f7257cec18",
                "QueueLib.isEmpty": "80477432168eb36761274dc5a81c91d6"
            },
            "md5": "c0e0f869b073e2001f6449eb2a35340e"
        }
    },
    "handled_md5": {
        "__set__": true,
        "values": [
            "7ac073c9f194f2ad4d93f9254d163686",
            "531b45bd94bfed627d275e41ca804d7b",
            "10914f045ad40bd1f26f615aa812de70",
            "d6c483c62d4479315fd705f4895de507",
            "9be1810f6fee43d710ad52e06a9e5acc",
            "7f9796aa35f18d9dece3ae90d308b814",
            "20463d0d313e60638b11ca745a0db99f",
            "2eea29ed865f9c035f7ea85ca0fc70b4",
            "2117ddb2e6649945c942cf2b2780ee65",
            "640f23155e4d43145a6d34ef9d48af10",
            "fe6e5268996e1fd9382bcb17a068d6af",
            "4e9540210f9807f77129c8ddf45ca752",
            "ac957078e851e5131319076987ad14e3",
            "33f7806931940d55f142828d3d6a84ff",
            "9b122d68d897186f03d43a9fb9ae574f",
            "a59ea185730ea73bde8ac653ec0e1f47",
            "7aa5e0483497a042fc5bcbcf466cb617",
            "c0e0f869b073e2001f6449eb2a35340e",
            "1678d44c0994ae8baa1e8bab7ec20d7a",
            "05869df54a8c1fe166d2672ff2caa7f8",
            "6cc78857f9111cfd689a8f2a049d7c7d",
            "b9da9b214e5a76ab63f0ebe1b612fd96",
            "1bdd9f2ee43b50f3fadc50f77336cdbb",
            "9341e1e348d904fb33969859ac53db59",
            "090bb4a7c40899581e4087c0b8bd48c1",
            "a5f368e8b9c406afc8046c0592986ddb",
            "6596c8aff9b874eb745d4223e246d3d3",
            "c4e602fcdb0d68a1dda501386fb37147",
            "144a1e01629a325c7241e5b23e14edd4"
        ]
    }
}