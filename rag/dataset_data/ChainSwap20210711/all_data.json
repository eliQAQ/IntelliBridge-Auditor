{
    "solidity_file": {
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\ChainSwap20210711\\AnyswapV4Router.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\ChainSwap20210711\\AnyswapV4Router.sol",
            "filename": "AnyswapV4Router.sol",
            "imported_contracts": {},
            "contracts": {
                "ISushiswapV2Pair": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "factory": [
                            {
                                "visibility": "external",
                                "content": "function factory() external view returns (address);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "eae461b6d0ef6d1c8bb92d34e74a880d"
                            }
                        ],
                        "token0": [
                            {
                                "visibility": "external",
                                "content": "function token0() external view returns (address);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "6dbeae51296a5fa298e59b6ce26a07ef"
                            }
                        ],
                        "token1": [
                            {
                                "visibility": "external",
                                "content": "function token1() external view returns (address);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "19164606c7e09dcc0de5c859221b6cf5"
                            }
                        ],
                        "getReserves": [
                            {
                                "visibility": "external",
                                "content": "function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint112",
                                        "name": "reserve0"
                                    },
                                    {
                                        "type": "uint112",
                                        "name": "reserve1"
                                    },
                                    {
                                        "type": "uint32",
                                        "name": "blockTimestampLast"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "a8ad5739cac88103083915986561f88c"
                            }
                        ],
                        "swap": [
                            {
                                "visibility": "external",
                                "content": "function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "amount0Out"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amount1Out"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "data"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "2a7b7c36bbb6565de0e79bffef9b920f"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                },
                "SafeMathSushiswap": {
                    "type": {
                        "__CT__": true,
                        "value": 2
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "add": [
                            {
                                "visibility": "internal",
                                "content": "function add(uint x, uint y) internal pure returns (uint z){ require((z = x + y) >= x, 'ds-math-add-overflow');}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "x"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "y"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "z"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "e076653475ff64c2999d30ec870291e4"
                            }
                        ],
                        "sub": [
                            {
                                "visibility": "internal",
                                "content": "function sub(uint x, uint y) internal pure returns (uint z){ require((z = x - y) <= x, 'ds-math-sub-underflow');}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "x"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "y"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "z"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "50fc788cc62b3aabc5d934ec2ad1c67f"
                            }
                        ],
                        "mul": [
                            {
                                "visibility": "internal",
                                "content": "function mul(uint x, uint y) internal pure returns (uint z){ require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "x"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "y"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "z"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "17723186ccd020779d6c078c1da61e4b"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "SushiswapV2Library": {
                    "type": {
                        "__CT__": true,
                        "value": 2
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "sortTokens": [
                            {
                                "visibility": "internal",
                                "content": "function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1){ require(tokenA != tokenB, 'SushiswapV2Library: IDENTICAL_ADDRESSES'); (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA); require(token0 != address(0), 'SushiswapV2Library: ZERO_ADDRESS');}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "tokenA"
                                    },
                                    {
                                        "type": "address",
                                        "name": "tokenB"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": "token0"
                                    },
                                    {
                                        "type": "address",
                                        "name": "token1"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "53553004d7c40a8043fec91809e5eb82"
                            }
                        ],
                        "pairFor": [
                            {
                                "visibility": "internal",
                                "content": "function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair){ (address token0, address token1) = sortTokens(tokenA, tokenB); pair = address(uint160(uint256(keccak256(abi.encodePacked( hex'ff', factory, keccak256(abi.encodePacked(token0, token1)), hex'e18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303' )))));}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "factory"
                                    },
                                    {
                                        "type": "address",
                                        "name": "tokenA"
                                    },
                                    {
                                        "type": "address",
                                        "name": "tokenB"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": "pair"
                                    }
                                ],
                                "reads": [
                                    [
                                        "factory",
                                        "",
                                        "AnyswapV4Router"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "factory",
                                        "",
                                        "AnyswapV4Router"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SushiswapV2Library.sortTokens"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "0966039bc6d80270f06e5d9760ee5973"
                            }
                        ],
                        "getReserves": [
                            {
                                "visibility": "internal",
                                "content": "function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB){ (address token0, ) = sortTokens(tokenA, tokenB); (uint reserve0, uint reserve1, ) = ISushiswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves(); (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "factory"
                                    },
                                    {
                                        "type": "address",
                                        "name": "tokenA"
                                    },
                                    {
                                        "type": "address",
                                        "name": "tokenB"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "reserveA"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "reserveB"
                                    }
                                ],
                                "reads": [
                                    [
                                        "factory",
                                        "",
                                        "AnyswapV4Router"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "factory",
                                        "",
                                        "AnyswapV4Router"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SushiswapV2Library.sortTokens",
                                        "SushiswapV2Library.pairFor"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "e12c8e854eb992f08c30e88b3e078522"
                            }
                        ],
                        "quote": [
                            {
                                "visibility": "internal",
                                "content": "function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB){ require(amountA > 0, 'SushiswapV2Library: INSUFFICIENT_AMOUNT'); require(reserveA > 0 && reserveB > 0, 'SushiswapV2Library: INSUFFICIENT_LIQUIDITY'); amountB = amountA.mul(reserveB) / reserveA;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "amountA"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "reserveA"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "reserveB"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "amountB"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "amountA.mul"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "814d0103910bb8adeb7a6e1b665e2d9a"
                            }
                        ],
                        "getAmountOut": [
                            {
                                "visibility": "internal",
                                "content": "function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut){ require(amountIn > 0, 'SushiswapV2Library: INSUFFICIENT_INPUT_AMOUNT'); require(reserveIn > 0 && reserveOut > 0, 'SushiswapV2Library: INSUFFICIENT_LIQUIDITY'); uint amountInWithFee = amountIn.mul(997); uint numerator = amountInWithFee.mul(reserveOut); uint denominator = reserveIn.mul(1000).add(amountInWithFee); amountOut = numerator / denominator;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "amountIn"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "reserveIn"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "reserveOut"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "amountOut"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "reserveIn.mul",
                                        "amountInWithFee.mul",
                                        "amountIn.mul"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "de9a0b4fe347557aa85f1beddb841fcb"
                            }
                        ],
                        "getAmountIn": [
                            {
                                "visibility": "internal",
                                "content": "function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn){ require(amountOut > 0, 'SushiswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT'); require(reserveIn > 0 && reserveOut > 0, 'SushiswapV2Library: INSUFFICIENT_LIQUIDITY'); uint numerator = reserveIn.mul(amountOut).mul(1000); uint denominator = reserveOut.sub(amountOut).mul(997); amountIn = (numerator / denominator).add(1);}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "amountOut"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "reserveIn"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "reserveOut"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "amountIn"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "reserveIn.mul",
                                        "reserveOut.sub"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "719310c4a8954494b502bb60f325d986"
                            }
                        ],
                        "getAmountsOut": [
                            {
                                "visibility": "internal",
                                "content": "function getAmountsOut(address factory, uint amountIn, address[] memory path) internal view returns (uint[] memory amounts){ require(path.length >= 2, 'SushiswapV2Library: INVALID_PATH'); amounts = new uint[](path.length); amounts[0] = amountIn; for (uint i; i < path.length - 1; i++){ (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]); amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);}}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "factory"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountIn"
                                    },
                                    {
                                        "type": "address[] memory",
                                        "name": "path"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint[] memory",
                                        "name": "amounts"
                                    }
                                ],
                                "reads": [
                                    [
                                        "factory",
                                        "",
                                        "AnyswapV4Router"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SushiswapV2Library.getReserves",
                                        "SushiswapV2Library.getAmountOut"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "fd145cd614d3cfb20b6182a54e4853a0"
                            }
                        ],
                        "getAmountsIn": [
                            {
                                "visibility": "internal",
                                "content": "function getAmountsIn(address factory, uint amountOut, address[] memory path) internal view returns (uint[] memory amounts){ require(path.length >= 2, 'SushiswapV2Library: INVALID_PATH'); amounts = new uint[](path.length); amounts[amounts.length - 1] = amountOut; for (uint i = path.length - 1; i > 0; i--){ (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]); amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);}}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "factory"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountOut"
                                    },
                                    {
                                        "type": "address[] memory",
                                        "name": "path"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint[] memory",
                                        "name": "amounts"
                                    }
                                ],
                                "reads": [
                                    [
                                        "factory",
                                        "",
                                        "AnyswapV4Router"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SushiswapV2Library.getReserves",
                                        "SushiswapV2Library.getAmountIn"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "6409030ef935ed2148ebd6f3a0220b44"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "uint": "SafeMathSushiswap"
                    }
                },
                "TransferHelper": {
                    "type": {
                        "__CT__": true,
                        "value": 2
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "safeApprove": [
                            {
                                "visibility": "internal",
                                "content": "function safeApprove(address token, address to, uint value) internal{ (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value)); require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "value"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "token.call"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "d9c6640cfca902b76e445a1510fab047"
                            }
                        ],
                        "safeTransfer": [
                            {
                                "visibility": "internal",
                                "content": "function safeTransfer(address token, address to, uint value) internal{ (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value)); require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "value"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "token.call"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "3f5488f5b132ce36f3d9090a02d85295"
                            }
                        ],
                        "safeTransferFrom": [
                            {
                                "visibility": "internal",
                                "content": "function safeTransferFrom(address token, address from, address to, uint value) internal{ (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value)); require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "value"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "token.call"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "cb78f5eeced7c4ba60c419cbe210487c"
                            }
                        ],
                        "safeTransferNative": [
                            {
                                "visibility": "internal",
                                "content": "function safeTransferNative(address to, uint value) internal{ (bool success, ) = to.call{ value:value} (new bytes(0)); require(success, 'TransferHelper: NATIVE_TRANSFER_FAILED');}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "value"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "a335433fd57a5f0afeeef0aefa9cdf29"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "IwNATIVE": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "deposit": [
                            {
                                "visibility": "external",
                                "content": "function deposit() external payable;",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": true,
                                "md5": "4f2eec90abd519258d97a4283a54e2f1"
                            }
                        ],
                        "transfer": [
                            {
                                "visibility": "external",
                                "content": "function transfer(address to, uint value) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "value"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "0587b6354cf0d3773c8593eb4103d819"
                            }
                        ],
                        "withdraw": [
                            {
                                "visibility": "external",
                                "content": "function withdraw(uint) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": null
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "b3e698980247640e9fe99c060e4921fc"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                },
                "AnyswapV1ERC20": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "mint": [
                            {
                                "visibility": "external",
                                "content": "function mint(address to, uint256 amount) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "54fcc18fc5af6f55053554dd926d02c5"
                            }
                        ],
                        "burn": [
                            {
                                "visibility": "external",
                                "content": "function burn(address from, uint256 amount) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "3b8d1a75aa40d4fec00a0d273d36f6da"
                            }
                        ],
                        "changeVault": [
                            {
                                "visibility": "external",
                                "content": "function changeVault(address newVault) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "newVault"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "6bc2dba1a1fe83dd749a9b3e6aefb013"
                            }
                        ],
                        "depositVault": [
                            {
                                "visibility": "external",
                                "content": "function depositVault(uint amount, address to) external returns (uint);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c36ee7b9d27c9a670490ec8a73ff7fc6"
                            }
                        ],
                        "withdrawVault": [
                            {
                                "visibility": "external",
                                "content": "function withdrawVault(address from, uint amount, address to) external returns (uint);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "d7e3a13249332b58de63af9851184b51"
                            }
                        ],
                        "underlying": [
                            {
                                "visibility": "external",
                                "content": "function underlying() external view returns (address);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "79a36cf7455e5210675c01a0880c01eb"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                },
                "IERC20": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "totalSupply": [
                            {
                                "visibility": "external",
                                "content": "function totalSupply() external view returns (uint256);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "5e1d12e61f4bf4b37161d9b684742570"
                            }
                        ],
                        "balanceOf": [
                            {
                                "visibility": "external",
                                "content": "function balanceOf(address account) external view returns (uint256);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "account"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "3ac17e7782366957c960d337a4a648cd"
                            }
                        ],
                        "transfer": [
                            {
                                "visibility": "external",
                                "content": "function transfer(address recipient, uint256 amount) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "recipient"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "98b540da9047ee99bce7fadde65d04b7"
                            }
                        ],
                        "allowance": [
                            {
                                "visibility": "external",
                                "content": "function allowance(address owner, address spender) external view returns (uint256);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "owner"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c93791d09d789aed33b9725d482af442"
                            }
                        ],
                        "approve": [
                            {
                                "visibility": "external",
                                "content": "function approve(address spender, uint256 amount) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "7c80d707df648dc123a10c69a1150edc"
                            }
                        ],
                        "permit": [
                            {
                                "visibility": "external",
                                "content": "function permit(address target, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "target"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "deadline"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "v"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "r"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "s"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "865781e39f9ebb7f41df993418bdaa02"
                            }
                        ],
                        "transferFrom": [
                            {
                                "visibility": "external",
                                "content": "function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "sender"
                                    },
                                    {
                                        "type": "address",
                                        "name": "recipient"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c134d67e13a988b449de71dd226682ab"
                            }
                        ],
                        "transferWithPermit": [
                            {
                                "visibility": "external",
                                "content": "function transferWithPermit(address target, address to, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "target"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "deadline"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "v"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "r"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "s"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "936174799796d3ebd0f9d8d968cbd4d0"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {
                        "Transfer": {
                            "event": "Transfer",
                            "content": "Transfer(address indexed from, address indexed to, uint256 value)"
                        },
                        "Approval": {
                            "event": "Approval",
                            "content": "Approval(address indexed owner, address indexed spender, uint256 value)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                },
                "AnyswapV4Router": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {
                        "factory": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public immutable factory;"
                        },
                        "wNATIVE": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": true,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public immutable wNATIVE;"
                        },
                        "_oldMPC": {
                            "type": "address",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address private _oldMPC;"
                        },
                        "_newMPC": {
                            "type": "address",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address private _newMPC;"
                        },
                        "_newMPCEffectiveTime": {
                            "type": "uint256",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256 private _newMPCEffectiveTime;"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (address _factory, address _wNATIVE, address _mpc){ _newMPC = _mpc; _newMPCEffectiveTime = block.timestamp; factory = _factory; wNATIVE = _wNATIVE;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_factory"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_wNATIVE"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_mpc"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "factory",
                                        "",
                                        "AnyswapV4Router"
                                    ],
                                    [
                                        "wNATIVE",
                                        "",
                                        "AnyswapV4Router"
                                    ],
                                    [
                                        "_newMPC",
                                        "",
                                        "AnyswapV4Router"
                                    ],
                                    [
                                        "_newMPCEffectiveTime",
                                        "",
                                        "AnyswapV4Router"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "factory",
                                        "",
                                        "AnyswapV4Router"
                                    ],
                                    [
                                        "wNATIVE",
                                        "",
                                        "AnyswapV4Router"
                                    ],
                                    [
                                        "_newMPC",
                                        "",
                                        "AnyswapV4Router"
                                    ],
                                    [
                                        "_newMPCEffectiveTime",
                                        "",
                                        "AnyswapV4Router"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "50810f50f1d3cb83b51dd3d92b0428cd"
                            }
                        ],
                        "mpc": [
                            {
                                "visibility": "public",
                                "content": "function mpc() public view returns (address){ if (block.timestamp >= _newMPCEffectiveTime){ return _newMPC;} return _oldMPC;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_oldMPC",
                                        "",
                                        "AnyswapV4Router"
                                    ],
                                    [
                                        "_newMPC",
                                        "",
                                        "AnyswapV4Router"
                                    ],
                                    [
                                        "_newMPCEffectiveTime",
                                        "",
                                        "AnyswapV4Router"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "cdfc83ed07486e348642e29a0b3c6348"
                            }
                        ],
                        "cID": [
                            {
                                "visibility": "public",
                                "content": "function cID() public view returns (uint id){ assembly{ id := chainid()}}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "id"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "3b476bdf3c0c6f59c7a2679df1573c5e"
                            }
                        ],
                        "changeMPC": [
                            {
                                "visibility": "public",
                                "content": "function changeMPC(address newMPC) public onlyMPC returns (bool){ require(newMPC != address(0), \"AnyswapV3Router: address(0x0)\"); _oldMPC = mpc(); _newMPC = newMPC; _newMPCEffectiveTime = block.timestamp + 2*24*3600; emit LogChangeMPC(_oldMPC, _newMPC, _newMPCEffectiveTime, cID()); return true;}",
                                "modifiers": [
                                    "onlyMPC"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "newMPC"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_oldMPC",
                                        "",
                                        "AnyswapV4Router"
                                    ],
                                    [
                                        "_newMPC",
                                        "",
                                        "AnyswapV4Router"
                                    ],
                                    [
                                        "_newMPCEffectiveTime",
                                        "",
                                        "AnyswapV4Router"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_oldMPC",
                                        "",
                                        "AnyswapV4Router"
                                    ],
                                    [
                                        "_newMPC",
                                        "",
                                        "AnyswapV4Router"
                                    ],
                                    [
                                        "_newMPCEffectiveTime",
                                        "",
                                        "AnyswapV4Router"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyswapV4Router.mpc",
                                        "AnyswapV4Router.cID",
                                        "AnyswapV4Router.onlyMPC"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "d51677553259dd3a2561dc5c5d57f506"
                            }
                        ],
                        "changeVault": [
                            {
                                "visibility": "public",
                                "content": "function changeVault(address token, address newVault) public onlyMPC returns (bool){ require(newVault != address(0), \"AnyswapV3Router: address(0x0)\"); return AnyswapV1ERC20(token).changeVault(newVault);}",
                                "modifiers": [
                                    "onlyMPC"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "newVault"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyswapV4Router.onlyMPC"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "356a220d78d853c93d9bc1ec5c4f108a"
                            }
                        ],
                        "_anySwapOut": [
                            {
                                "visibility": "internal",
                                "content": "function _anySwapOut(address from, address token, address to, uint amount, uint toChainID) internal{ AnyswapV1ERC20(token).burn(from, amount); emit LogAnySwapOut(token, from, to, amount, cID(), toChainID);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "toChainID"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyswapV4Router.cID"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "e4e8e12324334ff907b0cb998e752f67"
                            }
                        ],
                        "anySwapOut": [
                            {
                                "visibility": "external",
                                "content": "function anySwapOut(address token, address to, uint amount, uint toChainID) external{ _anySwapOut(msg.sender, token, to, amount, toChainID);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "toChainID"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyswapV4Router._anySwapOut"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "1c1f7304aae24ab7052fcf4a7a3dee45"
                            },
                            {
                                "visibility": "external",
                                "content": "function anySwapOut(address[] calldata tokens, address[] calldata to, uint[] calldata amounts, uint[] calldata toChainIDs) external{ for (uint i = 0; i < tokens.length; i++){ _anySwapOut(msg.sender, tokens[i], to[i], amounts[i], toChainIDs[i]);}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address[] calldata",
                                        "name": "tokens"
                                    },
                                    {
                                        "type": "address[] calldata",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint[] calldata",
                                        "name": "amounts"
                                    },
                                    {
                                        "type": "uint[] calldata",
                                        "name": "toChainIDs"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyswapV4Router._anySwapOut"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "b94570b7ffc9f68a1ca18d6beb98e8dd"
                            }
                        ],
                        "anySwapOutUnderlying": [
                            {
                                "visibility": "external",
                                "content": "function anySwapOutUnderlying(address token, address to, uint amount, uint toChainID) external{ TransferHelper.safeTransferFrom(AnyswapV1ERC20(token).underlying(), msg.sender, token, amount); AnyswapV1ERC20(token).depositVault(amount, msg.sender); _anySwapOut(msg.sender, token, to, amount, toChainID);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "toChainID"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyswapV4Router._anySwapOut",
                                        "TransferHelper.safeTransferFrom"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "09724419b7849f1ff0347ad0f6f2b3c4"
                            }
                        ],
                        "anySwapOutUnderlyingWithPermit": [
                            {
                                "visibility": "external",
                                "content": "function anySwapOutUnderlyingWithPermit( address from, address token, address to, uint amount, uint deadline, uint8 v, bytes32 r, bytes32 s, uint toChainID ) external{ address _underlying = AnyswapV1ERC20(token).underlying(); IERC20(_underlying).permit(from, address(this), amount, deadline, v, r, s); TransferHelper.safeTransferFrom(_underlying, from, token, amount); AnyswapV1ERC20(token).depositVault(amount, from); _anySwapOut(from, token, to, amount, toChainID);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "deadline"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "v"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "r"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "s"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "toChainID"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyswapV4Router._anySwapOut",
                                        "TransferHelper.safeTransferFrom"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "4331909528b573d1475d67d7e21cfe8b"
                            }
                        ],
                        "anySwapOutUnderlyingWithTransferPermit": [
                            {
                                "visibility": "external",
                                "content": "function anySwapOutUnderlyingWithTransferPermit( address from, address token, address to, uint amount, uint deadline, uint8 v, bytes32 r, bytes32 s, uint toChainID ) external{ IERC20(AnyswapV1ERC20(token).underlying()).transferWithPermit(from, token, amount, deadline, v, r, s); AnyswapV1ERC20(token).depositVault(amount, from); _anySwapOut(from, token, to, amount, toChainID);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "deadline"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "v"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "r"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "s"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "toChainID"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyswapV4Router._anySwapOut"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "e56da9218dd31aa549ffe99616e51080"
                            }
                        ],
                        "_anySwapIn": [
                            {
                                "visibility": "internal",
                                "content": "function _anySwapIn(bytes32 txs, address token, address to, uint amount, uint fromChainID) internal{ AnyswapV1ERC20(token).mint(to, amount); emit LogAnySwapIn(txs, token, to, amount, fromChainID, cID());}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "txs"
                                    },
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "fromChainID"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyswapV4Router.cID"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "4bbfd89bd4ff065fd57f8ec4b230f2ab"
                            }
                        ],
                        "anySwapIn": [
                            {
                                "visibility": "external",
                                "content": "function anySwapIn(bytes32 txs, address token, address to, uint amount, uint fromChainID) external onlyMPC{ _anySwapIn(txs, token, to, amount, fromChainID);}",
                                "modifiers": [
                                    "onlyMPC"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "txs"
                                    },
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "fromChainID"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyswapV4Router._anySwapIn",
                                        "AnyswapV4Router.onlyMPC"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "1cc907ea76af4a1e9ea921a12c0096b8"
                            },
                            {
                                "visibility": "external",
                                "content": "function anySwapIn(bytes32[] calldata txs, address[] calldata tokens, address[] calldata to, uint256[] calldata amounts, uint[] calldata fromChainIDs) external onlyMPC{ for (uint i = 0; i < tokens.length; i++){ _anySwapIn(txs[i], tokens[i], to[i], amounts[i], fromChainIDs[i]);}}",
                                "modifiers": [
                                    "onlyMPC"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32[] calldata",
                                        "name": "txs"
                                    },
                                    {
                                        "type": "address[] calldata",
                                        "name": "tokens"
                                    },
                                    {
                                        "type": "address[] calldata",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256[] calldata",
                                        "name": "amounts"
                                    },
                                    {
                                        "type": "uint[] calldata",
                                        "name": "fromChainIDs"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyswapV4Router._anySwapIn",
                                        "AnyswapV4Router.onlyMPC"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "97daf37082120bc93fcc46ceddfed7ef"
                            }
                        ],
                        "anySwapInUnderlying": [
                            {
                                "visibility": "external",
                                "content": "function anySwapInUnderlying(bytes32 txs, address token, address to, uint amount, uint fromChainID) external onlyMPC{ _anySwapIn(txs, token, to, amount, fromChainID); AnyswapV1ERC20(token).withdrawVault(to, amount, to);}",
                                "modifiers": [
                                    "onlyMPC"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "txs"
                                    },
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "fromChainID"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyswapV4Router._anySwapIn",
                                        "AnyswapV4Router.onlyMPC"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "358fc23ced8480bb80ca2f8cdf8209a5"
                            }
                        ],
                        "anySwapInAuto": [
                            {
                                "visibility": "external",
                                "content": "function anySwapInAuto(bytes32 txs, address token, address to, uint amount, uint fromChainID) external onlyMPC{ _anySwapIn(txs, token, to, amount, fromChainID); AnyswapV1ERC20 _anyToken = AnyswapV1ERC20(token); address _underlying = _anyToken.underlying(); if (_underlying != address(0) && IERC20(_underlying).balanceOf(token) >= amount){ _anyToken.withdrawVault(to, amount, to);}}",
                                "modifiers": [
                                    "onlyMPC"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "txs"
                                    },
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "fromChainID"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyswapV1ERC20.underlying",
                                        "AnyswapV4Router._anySwapIn",
                                        "AnyswapV4Router.onlyMPC",
                                        "AnyswapV1ERC20.withdrawVault"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "7e80a081d66b6b44fb0a19c21ee49d8d"
                            }
                        ],
                        "anySwapFeeTo": [
                            {
                                "visibility": "external",
                                "content": "function anySwapFeeTo(address token, uint amount) external onlyMPC{ address _mpc = mpc(); AnyswapV1ERC20(token).mint(_mpc, amount); AnyswapV1ERC20(token).withdrawVault(_mpc, amount, _mpc);}",
                                "modifiers": [
                                    "onlyMPC"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyswapV4Router.mpc",
                                        "AnyswapV4Router.onlyMPC"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "65827b8e3e4d02e36245848cdf9830a8"
                            }
                        ],
                        "_swap": [
                            {
                                "visibility": "internal",
                                "content": "function _swap(uint[] memory amounts, address[] memory path, address _to) internal virtual{ for (uint i; i < path.length - 1; i++){ (address input, address output) = (path[i], path[i + 1]); (address token0, ) = SushiswapV2Library.sortTokens(input, output); uint amountOut = amounts[i + 1]; (uint amount0Out, uint amount1Out) = input == token0 ? (uint(0), amountOut) : (amountOut, uint(0)); address to = i < path.length - 2 ? SushiswapV2Library.pairFor(factory, output, path[i + 2]) : _to; ISushiswapV2Pair(SushiswapV2Library.pairFor(factory, input, output)).swap( amount0Out, amount1Out, to, new bytes(0) );}}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint[] memory",
                                        "name": "amounts"
                                    },
                                    {
                                        "type": "address[] memory",
                                        "name": "path"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_to"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "factory",
                                        "",
                                        "AnyswapV4Router"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SushiswapV2Library.sortTokens",
                                        "SushiswapV2Library.pairFor"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "e52d6f74aab575776fd40f2a8fec3ab3"
                            }
                        ],
                        "anySwapOutExactTokensForTokens": [
                            {
                                "visibility": "external",
                                "content": "function anySwapOutExactTokensForTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline, uint toChainID ) external virtual ensure(deadline){ AnyswapV1ERC20(path[0]).burn(msg.sender, amountIn); emit LogAnySwapTradeTokensForTokens(path, msg.sender, to, amountIn, amountOutMin, cID(), toChainID);}",
                                "modifiers": [
                                    "virtual",
                                    "ensure(deadline)"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "amountIn"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountOutMin"
                                    },
                                    {
                                        "type": "address[] calldata",
                                        "name": "path"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "deadline"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "toChainID"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyswapV4Router.cID",
                                        "AnyswapV4Router.ensure"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "0c6a5c06fb574ae7d2cebfc6380d53e3"
                            }
                        ],
                        "anySwapOutExactTokensForTokensUnderlying": [
                            {
                                "visibility": "external",
                                "content": "function anySwapOutExactTokensForTokensUnderlying( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline, uint toChainID ) external virtual ensure(deadline){ TransferHelper.safeTransferFrom(AnyswapV1ERC20(path[0]).underlying(), msg.sender, path[0], amountIn); AnyswapV1ERC20(path[0]).depositVault(amountIn, msg.sender); AnyswapV1ERC20(path[0]).burn(msg.sender, amountIn); emit LogAnySwapTradeTokensForTokens(path, msg.sender, to, amountIn, amountOutMin, cID(), toChainID);}",
                                "modifiers": [
                                    "virtual",
                                    "ensure(deadline)"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "amountIn"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountOutMin"
                                    },
                                    {
                                        "type": "address[] calldata",
                                        "name": "path"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "deadline"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "toChainID"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyswapV4Router.cID",
                                        "TransferHelper.safeTransferFrom",
                                        "AnyswapV4Router.ensure"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "239acd3dca7d4675a518132b1f27a9ce"
                            }
                        ],
                        "anySwapOutExactTokensForTokensUnderlyingWithPermit": [
                            {
                                "visibility": "external",
                                "content": "function anySwapOutExactTokensForTokensUnderlyingWithPermit( address from, uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline, uint8 v, bytes32 r, bytes32 s, uint toChainID ) external virtual ensure(deadline){ address _underlying = AnyswapV1ERC20(path[0]).underlying(); IERC20(_underlying).permit(from, address(this), amountIn, deadline, v, r, s); TransferHelper.safeTransferFrom(_underlying, from, path[0], amountIn); AnyswapV1ERC20(path[0]).depositVault(amountIn, from); AnyswapV1ERC20(path[0]).burn(from, amountIn);{ address[] memory _path = path; address _from = from; address _to = to; uint _amountIn = amountIn; uint _amountOutMin = amountOutMin; uint _cID = cID(); uint _toChainID = toChainID; emit LogAnySwapTradeTokensForTokens(_path, _from, _to, _amountIn, _amountOutMin, _cID, _toChainID);}}",
                                "modifiers": [
                                    "virtual",
                                    "ensure(deadline)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountIn"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountOutMin"
                                    },
                                    {
                                        "type": "address[] calldata",
                                        "name": "path"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "deadline"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "v"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "r"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "s"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "toChainID"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyswapV4Router.cID",
                                        "TransferHelper.safeTransferFrom",
                                        "AnyswapV4Router.ensure"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "2143b6387f72af4b4ef0b88533eff01b"
                            }
                        ],
                        "anySwapOutExactTokensForTokensUnderlyingWithTransferPermit": [
                            {
                                "visibility": "external",
                                "content": "function anySwapOutExactTokensForTokensUnderlyingWithTransferPermit( address from, uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline, uint8 v, bytes32 r, bytes32 s, uint toChainID ) external virtual ensure(deadline){ IERC20(AnyswapV1ERC20(path[0]).underlying()).transferWithPermit(from, path[0], amountIn, deadline, v, r, s); AnyswapV1ERC20(path[0]).depositVault(amountIn, from); AnyswapV1ERC20(path[0]).burn(from, amountIn); emit LogAnySwapTradeTokensForTokens(path, from, to, amountIn, amountOutMin, cID(), toChainID);}",
                                "modifiers": [
                                    "virtual",
                                    "ensure(deadline)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountIn"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountOutMin"
                                    },
                                    {
                                        "type": "address[] calldata",
                                        "name": "path"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "deadline"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "v"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "r"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "s"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "toChainID"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyswapV4Router.cID",
                                        "AnyswapV4Router.ensure"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "1f6f063b82dddd8f853f73ba33e4c08f"
                            }
                        ],
                        "anySwapInExactTokensForTokens": [
                            {
                                "visibility": "external",
                                "content": "function anySwapInExactTokensForTokens( bytes32 txs, uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline, uint fromChainID ) external onlyMPC virtual ensure(deadline) returns (uint[] memory amounts){ amounts = SushiswapV2Library.getAmountsOut(factory, amountIn, path); require(amounts[amounts.length - 1] >= amountOutMin, 'SushiswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT'); _anySwapIn(txs, path[0], SushiswapV2Library.pairFor(factory, path[0], path[1]), amounts[0], fromChainID); _swap(amounts, path, to);}",
                                "modifiers": [
                                    "onlyMPC",
                                    "virtual",
                                    "ensure(deadline)"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "txs"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountIn"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountOutMin"
                                    },
                                    {
                                        "type": "address[] calldata",
                                        "name": "path"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "deadline"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "fromChainID"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint[] memory",
                                        "name": "amounts"
                                    }
                                ],
                                "reads": [
                                    [
                                        "factory",
                                        "",
                                        "AnyswapV4Router"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyswapV4Router.onlyMPC",
                                        "AnyswapV4Router.ensure",
                                        "SushiswapV2Library.pairFor",
                                        "AnyswapV4Router._swap",
                                        "AnyswapV4Router._anySwapIn",
                                        "SushiswapV2Library.getAmountsOut"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "6afac8a8f520c5a56949a003c089b542"
                            }
                        ],
                        "anySwapOutExactTokensForNative": [
                            {
                                "visibility": "external",
                                "content": "function anySwapOutExactTokensForNative( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline, uint toChainID ) external virtual ensure(deadline){ AnyswapV1ERC20(path[0]).burn(msg.sender, amountIn); emit LogAnySwapTradeTokensForNative(path, msg.sender, to, amountIn, amountOutMin, cID(), toChainID);}",
                                "modifiers": [
                                    "virtual",
                                    "ensure(deadline)"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "amountIn"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountOutMin"
                                    },
                                    {
                                        "type": "address[] calldata",
                                        "name": "path"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "deadline"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "toChainID"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyswapV4Router.cID",
                                        "AnyswapV4Router.ensure"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "8b2fac81138ef1fdd5628a6ff4b99cde"
                            }
                        ],
                        "anySwapOutExactTokensForNativeUnderlying": [
                            {
                                "visibility": "external",
                                "content": "function anySwapOutExactTokensForNativeUnderlying( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline, uint toChainID ) external virtual ensure(deadline){ TransferHelper.safeTransferFrom(AnyswapV1ERC20(path[0]).underlying(), msg.sender, path[0], amountIn); AnyswapV1ERC20(path[0]).depositVault(amountIn, msg.sender); AnyswapV1ERC20(path[0]).burn(msg.sender, amountIn); emit LogAnySwapTradeTokensForNative(path, msg.sender, to, amountIn, amountOutMin, cID(), toChainID);}",
                                "modifiers": [
                                    "virtual",
                                    "ensure(deadline)"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "amountIn"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountOutMin"
                                    },
                                    {
                                        "type": "address[] calldata",
                                        "name": "path"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "deadline"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "toChainID"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyswapV4Router.cID",
                                        "TransferHelper.safeTransferFrom",
                                        "AnyswapV4Router.ensure"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "ffe85e61d04944b785bea5476e7c8c5a"
                            }
                        ],
                        "anySwapOutExactTokensForNativeUnderlyingWithPermit": [
                            {
                                "visibility": "external",
                                "content": "function anySwapOutExactTokensForNativeUnderlyingWithPermit( address from, uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline, uint8 v, bytes32 r, bytes32 s, uint toChainID ) external virtual ensure(deadline){ address _underlying = AnyswapV1ERC20(path[0]).underlying(); IERC20(_underlying).permit(from, address(this), amountIn, deadline, v, r, s); TransferHelper.safeTransferFrom(_underlying, from, path[0], amountIn); AnyswapV1ERC20(path[0]).depositVault(amountIn, from); AnyswapV1ERC20(path[0]).burn(from, amountIn);{ address[] memory _path = path; address _from = from; address _to = to; uint _amountIn = amountIn; uint _amountOutMin = amountOutMin; uint _cID = cID(); uint _toChainID = toChainID; emit LogAnySwapTradeTokensForNative(_path, _from, _to, _amountIn, _amountOutMin, _cID, _toChainID);}}",
                                "modifiers": [
                                    "virtual",
                                    "ensure(deadline)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountIn"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountOutMin"
                                    },
                                    {
                                        "type": "address[] calldata",
                                        "name": "path"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "deadline"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "v"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "r"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "s"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "toChainID"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyswapV4Router.cID",
                                        "TransferHelper.safeTransferFrom",
                                        "AnyswapV4Router.ensure"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "47d04f6c1c7681c44c388551996c8638"
                            }
                        ],
                        "anySwapOutExactTokensForNativeUnderlyingWithTransferPermit": [
                            {
                                "visibility": "external",
                                "content": "function anySwapOutExactTokensForNativeUnderlyingWithTransferPermit( address from, uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline, uint8 v, bytes32 r, bytes32 s, uint toChainID ) external virtual ensure(deadline){ IERC20(AnyswapV1ERC20(path[0]).underlying()).transferWithPermit(from, path[0], amountIn, deadline, v, r, s); AnyswapV1ERC20(path[0]).depositVault(amountIn, from); AnyswapV1ERC20(path[0]).burn(from, amountIn); emit LogAnySwapTradeTokensForNative(path, from, to, amountIn, amountOutMin, cID(), toChainID);}",
                                "modifiers": [
                                    "virtual",
                                    "ensure(deadline)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountIn"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountOutMin"
                                    },
                                    {
                                        "type": "address[] calldata",
                                        "name": "path"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "deadline"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "v"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "r"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "s"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "toChainID"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyswapV4Router.cID",
                                        "AnyswapV4Router.ensure"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "56b87d801027f384e07699b5e2e055e0"
                            }
                        ],
                        "anySwapInExactTokensForNative": [
                            {
                                "visibility": "external",
                                "content": "function anySwapInExactTokensForNative( bytes32 txs, uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline, uint fromChainID ) external onlyMPC virtual ensure(deadline) returns (uint[] memory amounts){ require(path[path.length - 1] == wNATIVE, 'AnyswapV3Router: INVALID_PATH'); amounts = SushiswapV2Library.getAmountsOut(factory, amountIn, path); require(amounts[amounts.length - 1] >= amountOutMin, 'AnyswapV3Router: INSUFFICIENT_OUTPUT_AMOUNT'); _anySwapIn(txs, path[0], SushiswapV2Library.pairFor(factory, path[0], path[1]), amounts[0], fromChainID); _swap(amounts, path, address(this)); IwNATIVE(wNATIVE).withdraw(amounts[amounts.length - 1]); TransferHelper.safeTransferNative(to, amounts[amounts.length - 1]);}",
                                "modifiers": [
                                    "onlyMPC",
                                    "virtual",
                                    "ensure(deadline)"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "txs"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountIn"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountOutMin"
                                    },
                                    {
                                        "type": "address[] calldata",
                                        "name": "path"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "deadline"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "fromChainID"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint[] memory",
                                        "name": "amounts"
                                    }
                                ],
                                "reads": [
                                    [
                                        "factory",
                                        "",
                                        "AnyswapV4Router"
                                    ],
                                    [
                                        "wNATIVE",
                                        "",
                                        "AnyswapV4Router"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AnyswapV4Router.onlyMPC",
                                        "AnyswapV4Router.ensure",
                                        "SushiswapV2Library.pairFor",
                                        "TransferHelper.safeTransferNative",
                                        "AnyswapV4Router._swap",
                                        "AnyswapV4Router._anySwapIn",
                                        "SushiswapV2Library.getAmountsOut"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "c6c66a39f8c7bac5734b719b3461127c"
                            }
                        ],
                        "quote": [
                            {
                                "visibility": "public",
                                "content": "function quote(uint amountA, uint reserveA, uint reserveB) public pure virtual returns (uint amountB){ return SushiswapV2Library.quote(amountA, reserveA, reserveB);}",
                                "modifiers": [
                                    "pure",
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "amountA"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "reserveA"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "reserveB"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "amountB"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SushiswapV2Library.quote"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "f5c694a9d663caca8bb3243f52b730fb"
                            }
                        ],
                        "getAmountOut": [
                            {
                                "visibility": "public",
                                "content": "function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) public pure virtual returns (uint amountOut){ return SushiswapV2Library.getAmountOut(amountIn, reserveIn, reserveOut);}",
                                "modifiers": [
                                    "pure",
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "amountIn"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "reserveIn"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "reserveOut"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "amountOut"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SushiswapV2Library.getAmountOut"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "95db587290ccd5acf1faaed7e76ae45a"
                            }
                        ],
                        "getAmountIn": [
                            {
                                "visibility": "public",
                                "content": "function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) public pure virtual returns (uint amountIn){ return SushiswapV2Library.getAmountIn(amountOut, reserveIn, reserveOut);}",
                                "modifiers": [
                                    "pure",
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "amountOut"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "reserveIn"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "reserveOut"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "amountIn"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SushiswapV2Library.getAmountIn"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "c1822bcc0b1d1c63b5b30e19b7d3df6a"
                            }
                        ],
                        "getAmountsOut": [
                            {
                                "visibility": "public",
                                "content": "function getAmountsOut(uint amountIn, address[] memory path) public view virtual returns (uint[] memory amounts){ return SushiswapV2Library.getAmountsOut(factory, amountIn, path);}",
                                "modifiers": [
                                    "view",
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "amountIn"
                                    },
                                    {
                                        "type": "address[] memory",
                                        "name": "path"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint[] memory",
                                        "name": "amounts"
                                    }
                                ],
                                "reads": [
                                    [
                                        "factory",
                                        "",
                                        "AnyswapV4Router"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SushiswapV2Library.getAmountsOut"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "63a1ef2cc53b6abf15a234b4d326849f"
                            }
                        ],
                        "getAmountsIn": [
                            {
                                "visibility": "public",
                                "content": "function getAmountsIn(uint amountOut, address[] memory path) public view virtual returns (uint[] memory amounts){ return SushiswapV2Library.getAmountsIn(factory, amountOut, path);}",
                                "modifiers": [
                                    "view",
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "amountOut"
                                    },
                                    {
                                        "type": "address[] memory",
                                        "name": "path"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint[] memory",
                                        "name": "amounts"
                                    }
                                ],
                                "reads": [
                                    [
                                        "factory",
                                        "",
                                        "AnyswapV4Router"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SushiswapV2Library.getAmountsIn"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "8ec022812beaa2bed86c98abceaa515f"
                            }
                        ]
                    },
                    "modifiers": {
                        "ensure": {
                            "parameters": [
                                {
                                    "type": "uint",
                                    "name": "deadline"
                                }
                            ],
                            "content": "modifier ensure(uint deadline){ require(deadline >= block.timestamp, 'AnyswapV3Router: EXPIRED'); _;}",
                            "reads": [],
                            "writes": [],
                            "external_calls": [],
                            "md5": "c90cb781f5a6e1f1d99699b253c3fca0"
                        },
                        "onlyMPC": {
                            "parameters": [],
                            "content": "modifier onlyMPC(){ require(msg.sender == mpc(), \"AnyswapV3Router: FORBIDDEN\"); _;}",
                            "reads": [],
                            "writes": [],
                            "external_calls": {
                                "__set__": true,
                                "values": [
                                    "AnyswapV4Router.mpc"
                                ]
                            },
                            "md5": "a75c2415279a7702a610088c11b61697"
                        }
                    },
                    "structs": {},
                    "events": {
                        "LogChangeMPC": {
                            "event": "LogChangeMPC",
                            "content": "LogChangeMPC(address indexed oldMPC, address indexed newMPC, uint indexed effectiveTime, uint chainID)"
                        },
                        "LogChangeRouter": {
                            "event": "LogChangeRouter",
                            "content": "LogChangeRouter(address indexed oldRouter, address indexed newRouter, uint chainID)"
                        },
                        "LogAnySwapIn": {
                            "event": "LogAnySwapIn",
                            "content": "LogAnySwapIn(bytes32 indexed txhash, address indexed token, address indexed to, uint amount, uint fromChainID, uint toChainID)"
                        },
                        "LogAnySwapOut": {
                            "event": "LogAnySwapOut",
                            "content": "LogAnySwapOut(address indexed token, address indexed from, address indexed to, uint amount, uint fromChainID, uint toChainID)"
                        },
                        "LogAnySwapTradeTokensForTokens": {
                            "event": "LogAnySwapTradeTokensForTokens",
                            "content": "LogAnySwapTradeTokensForTokens(address[] path, address indexed from, address indexed to, uint amountIn, uint amountOutMin, uint fromChainID, uint toChainID)"
                        },
                        "LogAnySwapTradeTokensForNative": {
                            "event": "LogAnySwapTradeTokensForNative",
                            "content": "LogAnySwapTradeTokensForNative(address[] path, address indexed from, address indexed to, uint amountIn, uint amountOutMin, uint fromChainID, uint toChainID)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "uint": "SafeMathSushiswap"
                    }
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "SushiswapV2Library.sortTokens": "53553004d7c40a8043fec91809e5eb82",
                "SushiswapV2Library.pairFor": "0966039bc6d80270f06e5d9760ee5973",
                "SushiswapV2Library.getReserves": "e12c8e854eb992f08c30e88b3e078522",
                "SushiswapV2Library.getAmountOut": "de9a0b4fe347557aa85f1beddb841fcb",
                "SushiswapV2Library.getAmountIn": "719310c4a8954494b502bb60f325d986",
                "AnyswapV4Router.mpc": "cdfc83ed07486e348642e29a0b3c6348",
                "AnyswapV4Router.cID": "3b476bdf3c0c6f59c7a2679df1573c5e",
                "AnyswapV4Router.onlyMPC": "a75c2415279a7702a610088c11b61697",
                "AnyswapV4Router._anySwapOut": "e4e8e12324334ff907b0cb998e752f67",
                "TransferHelper.safeTransferFrom": "cb78f5eeced7c4ba60c419cbe210487c",
                "AnyswapV4Router._anySwapIn": "4bbfd89bd4ff065fd57f8ec4b230f2ab",
                "AnyswapV1ERC20.withdrawVault": "d7e3a13249332b58de63af9851184b51",
                "AnyswapV1ERC20.underlying": "79a36cf7455e5210675c01a0880c01eb",
                "AnyswapV4Router.ensure": "c90cb781f5a6e1f1d99699b253c3fca0",
                "AnyswapV4Router._swap": "e52d6f74aab575776fd40f2a8fec3ab3",
                "SushiswapV2Library.getAmountsOut": "fd145cd614d3cfb20b6182a54e4853a0",
                "TransferHelper.safeTransferNative": "a335433fd57a5f0afeeef0aefa9cdf29",
                "SushiswapV2Library.quote": "814d0103910bb8adeb7a6e1b665e2d9a",
                "SushiswapV2Library.getAmountsIn": "6409030ef935ed2148ebd6f3a0220b44"
            },
            "md5": "9558e6b539134e509321c14ac02913b8"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\ChainSwap20210711\\InitializableProductProxy.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\ChainSwap20210711\\InitializableProductProxy.sol",
            "filename": "InitializableProductProxy.sol",
            "imported_contracts": {},
            "contracts": {
                "Proxy": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": true,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "_implementation": [
                            {
                                "visibility": "internal",
                                "content": "function _implementation() virtual internal view returns (address);",
                                "modifiers": [
                                    "virtual",
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "f7d38ff9dad447b230596b4a7c78398e"
                            }
                        ],
                        "_delegate": [
                            {
                                "visibility": "internal",
                                "content": "function _delegate(address implementation) internal{ assembly{ calldatacopy(0, 0, calldatasize()) let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0) returndatacopy(0, 0, returndatasize()) switch result case 0{ revert(0, returndatasize())} default{ return(0, returndatasize())}}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "implementation"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "4f00cc7001758c49683101c33594a955"
                            }
                        ],
                        "_willFallback": [
                            {
                                "visibility": "internal",
                                "content": "function _willFallback() virtual internal{}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Proxy._willFallback",
                                        "BaseAdminUpgradeabilityProxy._admin"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "0b37c62659e04339b90f1648b110f56f"
                            }
                        ],
                        "_fallback": [
                            {
                                "visibility": "internal",
                                "content": "function _fallback() internal{ if(OpenZeppelinUpgradesAddress.isContract(msg.sender) && msg.data.length == 0 && gasleft() <= 2300) return; _willFallback(); _delegate(_implementation());}",
                                "modifiers": [],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "OpenZeppelinUpgradesAddress.isContract",
                                        "Proxy._willFallback",
                                        "Proxy._implementation",
                                        "Proxy._delegate"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "db5aa6efeb9afe8b9bb2504b3b017b39"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "BaseUpgradeabilityProxy": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": true,
                    "inherits": [
                        "is",
                        "Proxy"
                    ],
                    "state_variables": {
                        "IMPLEMENTATION_SLOT": {
                            "type": "bytes32",
                            "visibility": "internal",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc",
                            "content": "bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;"
                        }
                    },
                    "functions": {
                        "_implementation": [
                            {
                                "visibility": "internal",
                                "content": "function _implementation() override internal view returns (address impl){ bytes32 slot = IMPLEMENTATION_SLOT; assembly{ impl := sload(slot)}}",
                                "modifiers": [
                                    "override",
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": "impl"
                                    }
                                ],
                                "reads": [
                                    [
                                        "IMPLEMENTATION_SLOT",
                                        "",
                                        "BaseUpgradeabilityProxy"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "27e7f0e1443598d9e2ba9b36c230b5bf"
                            }
                        ],
                        "_upgradeTo": [
                            {
                                "visibility": "internal",
                                "content": "function _upgradeTo(address newImplementation) internal{ _setImplementation(newImplementation); emit Upgraded(newImplementation);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "newImplementation"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BaseUpgradeabilityProxy._setImplementation"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "020862c1db68690b6fc90d8d79d6ca80"
                            }
                        ],
                        "_setImplementation": [
                            {
                                "visibility": "internal",
                                "content": "function _setImplementation(address newImplementation) internal{ require(OpenZeppelinUpgradesAddress.isContract(newImplementation), \"Cannot set a proxy implementation to a non- contract address\"); bytes32 slot = IMPLEMENTATION_SLOT; assembly{ sstore(slot, newImplementation)}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "newImplementation"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "IMPLEMENTATION_SLOT",
                                        "",
                                        "BaseUpgradeabilityProxy"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "OpenZeppelinUpgradesAddress.isContract"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "66d788827a154d30ec1cba061e5570c1"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {
                        "Upgraded": {
                            "event": "Upgraded",
                            "content": "Upgraded(address indexed implementation)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "BaseAdminUpgradeabilityProxy": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "BaseUpgradeabilityProxy"
                    ],
                    "state_variables": {
                        "ADMIN_SLOT": {
                            "type": "bytes32",
                            "visibility": "internal",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103",
                            "content": "bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;"
                        }
                    },
                    "functions": {
                        "admin": [
                            {
                                "visibility": "external",
                                "content": "function admin() external ifAdmin returns (address){ return _admin();}",
                                "modifiers": [
                                    "ifAdmin"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BaseAdminUpgradeabilityProxy.ifAdmin",
                                        "BaseAdminUpgradeabilityProxy._admin"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "cdc14cca6446dbb9cc647e143856164b"
                            }
                        ],
                        "implementation": [
                            {
                                "visibility": "external",
                                "content": "function implementation() external ifAdmin returns (address){ return _implementation();}",
                                "modifiers": [
                                    "ifAdmin"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BaseAdminUpgradeabilityProxy.ifAdmin",
                                        "Proxy._implementation"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "a6f40d09c7371e6b0896c07377eb85b4"
                            }
                        ],
                        "changeAdmin": [
                            {
                                "visibility": "external",
                                "content": "function changeAdmin(address newAdmin) external ifAdmin{ require(newAdmin != address(0), \"Cannot change the admin of a proxy to the zero address\"); emit AdminChanged(_admin(), newAdmin); _setAdmin(newAdmin);}",
                                "modifiers": [
                                    "ifAdmin"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "newAdmin"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BaseAdminUpgradeabilityProxy.ifAdmin",
                                        "BaseAdminUpgradeabilityProxy._admin",
                                        "BaseAdminUpgradeabilityProxy._setAdmin"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "b4040c59ba3d8354007961691262cf5c"
                            }
                        ],
                        "upgradeTo": [
                            {
                                "visibility": "external",
                                "content": "function upgradeTo(address newImplementation) external ifAdmin{ _upgradeTo(newImplementation);}",
                                "modifiers": [
                                    "ifAdmin"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "newImplementation"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BaseAdminUpgradeabilityProxy.ifAdmin",
                                        "BaseUpgradeabilityProxy._upgradeTo"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "47918e9a3247983179f2b3b934ba09f0"
                            }
                        ],
                        "upgradeToAndCall": [
                            {
                                "visibility": "external",
                                "content": "function upgradeToAndCall(address newImplementation, bytes calldata data) payable external ifAdmin{ _upgradeTo(newImplementation); (bool success, ) = newImplementation.delegatecall(data); require(success);}",
                                "modifiers": [
                                    "payable",
                                    "ifAdmin"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "newImplementation"
                                    },
                                    {
                                        "type": "bytes calldata",
                                        "name": "data"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BaseAdminUpgradeabilityProxy.ifAdmin",
                                        "newImplementation.delegatecall",
                                        "BaseUpgradeabilityProxy._upgradeTo"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "0e77ced44741fee3d45dc85840cc9854"
                            }
                        ],
                        "_admin": [
                            {
                                "visibility": "internal",
                                "content": "function _admin() internal view returns (address adm){ bytes32 slot = ADMIN_SLOT; assembly{ adm := sload(slot)}}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": "adm"
                                    }
                                ],
                                "reads": [
                                    [
                                        "ADMIN_SLOT",
                                        "",
                                        "BaseAdminUpgradeabilityProxy"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "17e46214f004668ef94fe9a71e3bb84b"
                            }
                        ],
                        "_setAdmin": [
                            {
                                "visibility": "internal",
                                "content": "function _setAdmin(address newAdmin) internal{ bytes32 slot = ADMIN_SLOT; assembly{ sstore(slot, newAdmin)}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "newAdmin"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "ADMIN_SLOT",
                                        "",
                                        "BaseAdminUpgradeabilityProxy"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "d378f93e9cbc24d40089de88de2c89ab"
                            }
                        ],
                        "_willFallback": [
                            {
                                "visibility": "internal",
                                "content": "function _willFallback() virtual override internal{ require(msg.sender != _admin(), \"Cannot call fallback function from the proxy admin\");}",
                                "modifiers": [
                                    "virtual",
                                    "override"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "04921f4c8334fc5ec441dd6d56a5ad5e"
                            }
                        ]
                    },
                    "modifiers": {
                        "ifAdmin": {
                            "parameters": [],
                            "content": "modifier ifAdmin(){ if (msg.sender == _admin()){ _;} else{ _fallback();}}",
                            "reads": [],
                            "writes": [],
                            "external_calls": {
                                "__set__": true,
                                "values": [
                                    "Proxy._fallback",
                                    "BaseAdminUpgradeabilityProxy._admin"
                                ]
                            },
                            "md5": "675de24a29fdb1f5fa1e718dd12beb3d"
                        }
                    },
                    "structs": {},
                    "events": {
                        "AdminChanged": {
                            "event": "AdminChanged",
                            "content": "AdminChanged(address previousAdmin, address newAdmin)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "IAdminUpgradeabilityProxyView": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "admin": [
                            {
                                "visibility": "external",
                                "content": "function admin() external view returns (address);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "6f7a48a275de56b77ab6a3da2cd62fa2"
                            }
                        ],
                        "implementation": [
                            {
                                "visibility": "external",
                                "content": "function implementation() external view returns (address);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "52664394d4458bcb36eed8fcd1391db7"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                },
                "UpgradeabilityProxy": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": true,
                    "inherits": [
                        "is",
                        "BaseUpgradeabilityProxy"
                    ],
                    "state_variables": {},
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (address _logic, bytes memory _data) public payable{ assert(IMPLEMENTATION_SLOT == bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1)); _setImplementation(_logic); if(_data.length > 0){ (bool success, ) = _logic.delegatecall(_data); require(success);}}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_logic"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "_data"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "IMPLEMENTATION_SLOT",
                                        "",
                                        "BaseUpgradeabilityProxy"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": true,
                                "md5": "665d0556394d96121afe241c0dde1353"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "AdminUpgradeabilityProxy": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "BaseAdminUpgradeabilityProxy",
                        "UpgradeabilityProxy"
                    ],
                    "state_variables": {},
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (address _admin, address _logic, bytes memory _data) UpgradeabilityProxy(_logic, _data) public payable{ assert(ADMIN_SLOT == bytes32(uint256(keccak256('eip1967.proxy.admin')) - 1)); _setAdmin(_admin);}",
                                "modifiers": [
                                    "UpgradeabilityProxy(_logic, _data)",
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_admin"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_logic"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "_data"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "ADMIN_SLOT",
                                        "",
                                        "BaseAdminUpgradeabilityProxy"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": true,
                                "md5": "59707d0e59b3c592a3cfa277681f855e"
                            }
                        ],
                        "_willFallback": [
                            {
                                "visibility": "internal",
                                "content": "function _willFallback() override(Proxy, BaseAdminUpgradeabilityProxy) internal{ super._willFallback();}",
                                "modifiers": [
                                    "override(Proxy, BaseAdminUpgradeabilityProxy)"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "d4e2305d69d155d325353d2af5f08aa6"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "InitializableUpgradeabilityProxy": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": true,
                    "inherits": [
                        "is",
                        "BaseUpgradeabilityProxy"
                    ],
                    "state_variables": {},
                    "functions": {
                        "initialize": [
                            {
                                "visibility": "public",
                                "content": "function initialize(address _logic, bytes memory _data) public payable{ require(_implementation() == address(0)); assert(IMPLEMENTATION_SLOT == bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1)); _setImplementation(_logic); if(_data.length > 0){ (bool success, ) = _logic.delegatecall(_data); require(success);}}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_logic"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "_data"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "IMPLEMENTATION_SLOT",
                                        "",
                                        "BaseUpgradeabilityProxy"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "BaseUpgradeabilityProxy._setImplementation",
                                        "InitializableUpgradeabilityProxy.initialize",
                                        "Proxy._implementation",
                                        "_logic.delegatecall",
                                        "BaseAdminUpgradeabilityProxy._setAdmin"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "8dba270c57b64a077cb92cf964a18ab6"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "InitializableAdminUpgradeabilityProxy": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "BaseAdminUpgradeabilityProxy",
                        "InitializableUpgradeabilityProxy"
                    ],
                    "state_variables": {},
                    "functions": {
                        "initialize": [
                            {
                                "visibility": "public",
                                "content": "function initialize(address _admin, address _logic, bytes memory _data) public payable{ require(_implementation() == address(0)); InitializableUpgradeabilityProxy.initialize(_logic, _data); assert(ADMIN_SLOT == bytes32(uint256(keccak256('eip1967.proxy.admin')) - 1)); _setAdmin(_admin);}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_admin"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_logic"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "_data"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "ADMIN_SLOT",
                                        "",
                                        "BaseAdminUpgradeabilityProxy"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": true,
                                "md5": "d8a8286e37fb2949714df210c60a345e"
                            }
                        ],
                        "_willFallback": [
                            {
                                "visibility": "internal",
                                "content": "function _willFallback() override(Proxy, BaseAdminUpgradeabilityProxy) internal{ super._willFallback();}",
                                "modifiers": [
                                    "override(Proxy, BaseAdminUpgradeabilityProxy)"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "d4e2305d69d155d325353d2af5f08aa6"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "IProxyFactory": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "productImplementation": [
                            {
                                "visibility": "external",
                                "content": "function productImplementation() external view returns (address);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "14c37193c5188251536d403bf053fbd3"
                            }
                        ],
                        "productImplementations": [
                            {
                                "visibility": "external",
                                "content": "function productImplementations(bytes32 name) external view returns (address);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "name"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "12e3aad9b315ac7f6cd8f77c1cf5b77b"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                },
                "ProductProxy": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "Proxy"
                    ],
                    "state_variables": {
                        "FACTORY_SLOT": {
                            "type": "bytes32",
                            "visibility": "internal",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "0x7a45a402e4cb6e08ebc196f20f66d5d30e67285a2a8aa80503fa409e727a4af1",
                            "content": "bytes32 internal constant FACTORY_SLOT = 0x7a45a402e4cb6e08ebc196f20f66d5d30e67285a2a8aa80503fa409e727a4af1;"
                        },
                        "NAME_SLOT": {
                            "type": "bytes32",
                            "visibility": "internal",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "0x4cd9b827ca535ceb0880425d70eff88561ecdf04dc32fcf7ff3b15c587f8a870",
                            "content": "bytes32 internal constant NAME_SLOT = 0x4cd9b827ca535ceb0880425d70eff88561ecdf04dc32fcf7ff3b15c587f8a870;"
                        }
                    },
                    "functions": {
                        "_name": [
                            {
                                "visibility": "internal",
                                "content": "function _name() virtual internal view returns (bytes32 name_){ bytes32 slot = NAME_SLOT; assembly{ name_ := sload(slot)}}",
                                "modifiers": [
                                    "virtual",
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": "name_"
                                    }
                                ],
                                "reads": [
                                    [
                                        "NAME_SLOT",
                                        "",
                                        "ProductProxy"
                                    ],
                                    [
                                        "_name",
                                        "",
                                        "ERC20UpgradeSafe"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "6c574140b5764bd09d3e060ee34818a5"
                            }
                        ],
                        "_setName": [
                            {
                                "visibility": "internal",
                                "content": "function _setName(bytes32 name_) internal{ bytes32 slot = NAME_SLOT; assembly{ sstore(slot, name_)}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "name_"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "NAME_SLOT",
                                        "",
                                        "ProductProxy"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "46067bbc65ad5d5938375eb7162698bd"
                            }
                        ],
                        "_setFactory": [
                            {
                                "visibility": "internal",
                                "content": "function _setFactory(address newFactory) internal{ require(OpenZeppelinUpgradesAddress.isContract(newFactory), \"Cannot set a factory to a non- contract address\"); bytes32 slot = FACTORY_SLOT; assembly{ sstore(slot, newFactory)}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "newFactory"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "FACTORY_SLOT",
                                        "",
                                        "ProductProxy"
                                    ],
                                    [
                                        "factory",
                                        "",
                                        "MappingBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "OpenZeppelinUpgradesAddress.isContract"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "ae1fc6ea2e422ce638be61b36214dfff"
                            }
                        ],
                        "_factory": [
                            {
                                "visibility": "internal",
                                "content": "function _factory() internal view returns (address factory_){ bytes32 slot = FACTORY_SLOT; assembly{ factory_ := sload(slot)}}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": "factory_"
                                    }
                                ],
                                "reads": [
                                    [
                                        "FACTORY_SLOT",
                                        "",
                                        "ProductProxy"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "1042a80fca8e6a4788c06b0ef65c3d83"
                            }
                        ],
                        "_implementation": [
                            {
                                "visibility": "internal",
                                "content": "function _implementation() virtual override internal view returns (address){ address factory_ = _factory(); if(OpenZeppelinUpgradesAddress.isContract(factory_)) return IProxyFactory(factory_).productImplementations(_name()); else return address(0);}",
                                "modifiers": [
                                    "virtual",
                                    "override",
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_name",
                                        "",
                                        "ERC20UpgradeSafe"
                                    ],
                                    [
                                        "productImplementations",
                                        "",
                                        "Factory"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "8467fa706ee94e13246b8d1d31340514"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "InitializableProductProxy": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "ProductProxy"
                    ],
                    "state_variables": {},
                    "functions": {
                        "__InitializableProductProxy_init": [
                            {
                                "visibility": "public",
                                "content": "function __InitializableProductProxy_init(address factory_, bytes32 name_, bytes memory data_) public payable{ require(_factory() == address(0)); assert(FACTORY_SLOT == bytes32(uint256(keccak256('eip1967.proxy.factory')) - 1)); assert(NAME_SLOT == bytes32(uint256(keccak256('eip1967.proxy.name')) - 1)); _setFactory(factory_); _setName(name_); if(data_.length > 0){ (bool success, ) = _implementation().delegatecall(data_); require(success);}}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "factory_"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "name_"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "data_"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "FACTORY_SLOT",
                                        "",
                                        "ProductProxy"
                                    ],
                                    [
                                        "NAME_SLOT",
                                        "",
                                        "ProductProxy"
                                    ],
                                    [
                                        "factory",
                                        "",
                                        "MappingBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "InitializableProductProxy._setName",
                                        "ProductProxy._setFactory",
                                        "Proxy._implementation",
                                        "ProductProxy._factory"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "498736a6f9917bebbd748907c1b98066"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "Initializable": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {
                        "initialized": {
                            "type": "bool",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "bool private initialized;"
                        },
                        "initializing": {
                            "type": "bool",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "bool private initializing;"
                        },
                        "______gap": {
                            "type": "uint256[50]",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256[50] private ______gap;"
                        }
                    },
                    "functions": {
                        "isConstructor": [
                            {
                                "visibility": "private",
                                "content": "function isConstructor() private view returns (bool){ address self = address(this); uint256 cs; assembly{ cs := extcodesize(self)} return cs == 0;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "e986e1314e3f92c6e8231c87020f5190"
                            }
                        ]
                    },
                    "modifiers": {
                        "initializer": {
                            "parameters": [],
                            "content": "modifier initializer(){ require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\"); bool isTopLevelCall = !initializing; if (isTopLevelCall){ initializing = true; initialized = true;} _; if (isTopLevelCall){ initializing = false;}}",
                            "reads": [
                                [
                                    "initialized",
                                    "",
                                    "Initializable"
                                ],
                                [
                                    "initializing",
                                    "",
                                    "Initializable"
                                ]
                            ],
                            "writes": [
                                [
                                    "initialized",
                                    "",
                                    "Initializable"
                                ],
                                [
                                    "initializing",
                                    "",
                                    "Initializable"
                                ]
                            ],
                            "external_calls": {
                                "__set__": true,
                                "values": [
                                    "Initializable.isConstructor"
                                ]
                            },
                            "md5": "7f75415da7e980a2aa80eef6534a10e9"
                        }
                    },
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "ContextUpgradeSafe": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "Initializable"
                    ],
                    "state_variables": {
                        "__gap": {
                            "type": "uint256[50]",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256[50] private __gap;"
                        }
                    },
                    "functions": {
                        "__Context_init": [
                            {
                                "visibility": "internal",
                                "content": "function __Context_init() internal initializer{ __Context_init_unchained();}",
                                "modifiers": [
                                    "initializer"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Initializable.initializer",
                                        "ContextUpgradeSafe.__Context_init_unchained"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "ac041e388216097d4a3bd5bb532a04c2"
                            }
                        ],
                        "__Context_init_unchained": [
                            {
                                "visibility": "internal",
                                "content": "function __Context_init_unchained() internal initializer{}",
                                "modifiers": [
                                    "initializer"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Initializable.initializer"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "ff90e0cbb896d9c015a83bf8000be465"
                            }
                        ],
                        "_msgSender": [
                            {
                                "visibility": "internal",
                                "content": "function _msgSender() internal view virtual returns (address payable){ return msg.sender;}",
                                "modifiers": [
                                    "view",
                                    "virtual"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address payable",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "00e29fff2bd07c51e23e94ddc6a504c4"
                            }
                        ],
                        "_msgData": [
                            {
                                "visibility": "internal",
                                "content": "function _msgData() internal view virtual returns (bytes memory){ this; return msg.data;}",
                                "modifiers": [
                                    "view",
                                    "virtual"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "85862d5484a7dade4fadbe2620ef8307"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "ReentrancyGuardUpgradeSafe": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "Initializable"
                    ],
                    "state_variables": {
                        "_notEntered": {
                            "type": "bool",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "bool private _notEntered;"
                        },
                        "__gap": {
                            "type": "uint256[49]",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256[49] private __gap;"
                        }
                    },
                    "functions": {
                        "__ReentrancyGuard_init": [
                            {
                                "visibility": "internal",
                                "content": "function __ReentrancyGuard_init() internal initializer{ __ReentrancyGuard_init_unchained();}",
                                "modifiers": [
                                    "initializer"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ReentrancyGuardUpgradeSafe.__ReentrancyGuard_init_unchained",
                                        "Initializable.initializer"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "34e915771b02ecc04f1b85ddf681a95a"
                            }
                        ],
                        "__ReentrancyGuard_init_unchained": [
                            {
                                "visibility": "internal",
                                "content": "function __ReentrancyGuard_init_unchained() internal initializer{ _notEntered = true;}",
                                "modifiers": [
                                    "initializer"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [
                                    [
                                        "_notEntered",
                                        "",
                                        "ReentrancyGuardUpgradeSafe"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_notEntered",
                                        "",
                                        "ReentrancyGuardUpgradeSafe"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Initializable.initializer"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "8637bad20979541eac50c401114bee2d"
                            }
                        ]
                    },
                    "modifiers": {
                        "nonReentrant": {
                            "parameters": [],
                            "content": "modifier nonReentrant(){ require(_notEntered, \"ReentrancyGuard: reentrant call\"); _notEntered = false; _; _notEntered = true;}",
                            "reads": [
                                [
                                    "_notEntered",
                                    "",
                                    "ReentrancyGuardUpgradeSafe"
                                ]
                            ],
                            "writes": [
                                [
                                    "_notEntered",
                                    "",
                                    "ReentrancyGuardUpgradeSafe"
                                ]
                            ],
                            "external_calls": [],
                            "md5": "cc2bc7a15485c438a15c09f84d12d03d"
                        }
                    },
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "Math": {
                    "type": {
                        "__CT__": true,
                        "value": 2
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "max": [
                            {
                                "visibility": "internal",
                                "content": "function max(uint256 a, uint256 b) internal pure returns (uint256){ return a >= b ? a : b;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "a"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "b"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "b584abd0b7f50934d10d32072fbe1a94"
                            }
                        ],
                        "min": [
                            {
                                "visibility": "internal",
                                "content": "function min(uint256 a, uint256 b) internal pure returns (uint256){ return a < b ? a : b;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "a"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "b"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "97ac6427d500c267e7e4b602d5f627f9"
                            }
                        ],
                        "average": [
                            {
                                "visibility": "internal",
                                "content": "function average(uint256 a, uint256 b) internal pure returns (uint256){ return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "a"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "b"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "8321921b9cc42a318ef30b31ce528b02"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "SafeMath": {
                    "type": {
                        "__CT__": true,
                        "value": 2
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "add": [
                            {
                                "visibility": "internal",
                                "content": "function add(uint256 a, uint256 b) internal pure returns (uint256){ uint256 c = a + b; require(c >= a, \"SafeMath: addition overflow\"); return c;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "a"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "b"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "b83a169007730f80a7fc79bee8748fff"
                            }
                        ],
                        "sub": [
                            {
                                "visibility": "internal",
                                "content": "function sub(uint256 a, uint256 b) internal pure returns (uint256){ return sub(a, b, \"SafeMath: subtraction overflow\");}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "a"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "b"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SafeMath.sub"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "972c2868144778b0617e55a6f97163a0"
                            },
                            {
                                "visibility": "internal",
                                "content": "function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256){ require(b <= a, errorMessage); uint256 c = a - b; return c;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "a"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "b"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "errorMessage"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SafeMath.sub"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "5005b7d925d95cb4c4c0f092235e9f5d"
                            }
                        ],
                        "sub0": [
                            {
                                "visibility": "internal",
                                "content": "function sub0(uint256 a, uint256 b) internal pure returns (uint256){ return a > b ? a - b : 0;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "a"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "b"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "be75c80bd9faa3a5143bdadcf9c00a6e"
                            }
                        ],
                        "mul": [
                            {
                                "visibility": "internal",
                                "content": "function mul(uint256 a, uint256 b) internal pure returns (uint256){ if (a == 0){ return 0;} uint256 c = a * b; require(c / a == b, \"SafeMath: multiplication overflow\"); return c;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "a"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "b"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "5622448ca508810ce734d0cb10517566"
                            }
                        ],
                        "div": [
                            {
                                "visibility": "internal",
                                "content": "function div(uint256 a, uint256 b) internal pure returns (uint256){ return div(a, b, \"SafeMath: division by zero\");}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "a"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "b"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SafeMath.div"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "371f945bc2211ac7c63e7277fb7222a7"
                            },
                            {
                                "visibility": "internal",
                                "content": "function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256){ require(b > 0, errorMessage); uint256 c = a / b; return c;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "a"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "b"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "errorMessage"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SafeMath.div"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "bff731811ec791ca1a5d6bc88d8d75a5"
                            }
                        ],
                        "mod": [
                            {
                                "visibility": "internal",
                                "content": "function mod(uint256 a, uint256 b) internal pure returns (uint256){ return mod(a, b, \"SafeMath: modulo by zero\");}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "a"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "b"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SafeMath.mod"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "50a3733021c21a71491ee85ffb90a2a4"
                            },
                            {
                                "visibility": "internal",
                                "content": "function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256){ require(b != 0, errorMessage); return a % b;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "a"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "b"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "errorMessage"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SafeMath.mod"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "8ec02abe488c084092f946ae1c4a8ccd"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "OpenZeppelinUpgradesAddress": {
                    "type": {
                        "__CT__": true,
                        "value": 2
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "isContract": [
                            {
                                "visibility": "internal",
                                "content": "function isContract(address account) internal view returns (bool){ uint256 size; assembly{ size := extcodesize(account)} return size > 0;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "account"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "b946110d999861cda9a1e7e7629934c3"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "Address": {
                    "type": {
                        "__CT__": true,
                        "value": 2
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "isContract": [
                            {
                                "visibility": "internal",
                                "content": "function isContract(address account) internal view returns (bool){ bytes32 codehash; bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470; assembly{ codehash := extcodehash(account)} return (codehash != accountHash && codehash != 0x0);}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "account"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "0bfe93cb7ea36f0ded62a360862b840e"
                            }
                        ],
                        "sendValue": [
                            {
                                "visibility": "internal",
                                "content": "function sendValue(address payable recipient, uint256 amount) internal{ require(address(this).balance >= amount, \"Address: insufficient balance\"); (bool success, ) = recipient.call{ value: amount} (\"\"); require(success, \"Address: unable to send value, recipient may have reverted\");}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address payable",
                                        "name": "recipient"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "4213f1701c2999f67f11de98a51e01f6"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "IERC20": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "totalSupply": [
                            {
                                "visibility": "external",
                                "content": "function totalSupply() external view returns (uint256);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "5e1d12e61f4bf4b37161d9b684742570"
                            }
                        ],
                        "balanceOf": [
                            {
                                "visibility": "external",
                                "content": "function balanceOf(address account) external view returns (uint256);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "account"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "3ac17e7782366957c960d337a4a648cd"
                            }
                        ],
                        "transfer": [
                            {
                                "visibility": "external",
                                "content": "function transfer(address recipient, uint256 amount) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "recipient"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "98b540da9047ee99bce7fadde65d04b7"
                            }
                        ],
                        "allowance": [
                            {
                                "visibility": "external",
                                "content": "function allowance(address owner, address spender) external view returns (uint256);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "owner"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c93791d09d789aed33b9725d482af442"
                            }
                        ],
                        "approve": [
                            {
                                "visibility": "external",
                                "content": "function approve(address spender, uint256 amount) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "7c80d707df648dc123a10c69a1150edc"
                            }
                        ],
                        "transferFrom": [
                            {
                                "visibility": "external",
                                "content": "function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "sender"
                                    },
                                    {
                                        "type": "address",
                                        "name": "recipient"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c134d67e13a988b449de71dd226682ab"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {
                        "Transfer": {
                            "event": "Transfer",
                            "content": "Transfer(address indexed from, address indexed to, uint256 value)"
                        },
                        "Approval": {
                            "event": "Approval",
                            "content": "Approval(address indexed owner, address indexed spender, uint256 value)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": [
                        [
                            "",
                            "ERC20UpgradeSafe"
                        ]
                    ]
                },
                "ERC20UpgradeSafe": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "Initializable",
                        "ContextUpgradeSafe",
                        "IERC20"
                    ],
                    "state_variables": {
                        "_balances": {
                            "type": "mapping (address => uint256)",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping (address => uint256) private _balances;"
                        },
                        "_allowances": {
                            "type": "mapping (address => mapping (address => uint256))",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping (address => mapping (address => uint256)) private _allowances;"
                        },
                        "_totalSupply": {
                            "type": "uint256",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256 private _totalSupply;"
                        },
                        "_name": {
                            "type": "string",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "string private _name;"
                        },
                        "_symbol": {
                            "type": "string",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "string private _symbol;"
                        },
                        "_decimals": {
                            "type": "uint8",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint8 private _decimals;"
                        },
                        "__gap": {
                            "type": "uint256[44]",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256[44] private __gap;"
                        }
                    },
                    "functions": {
                        "__ERC20_init": [
                            {
                                "visibility": "internal",
                                "content": "function __ERC20_init(string memory name, string memory symbol) internal initializer{ __Context_init_unchained(); __ERC20_init_unchained(name, symbol);}",
                                "modifiers": [
                                    "initializer"
                                ],
                                "parameters": [
                                    {
                                        "type": "string memory",
                                        "name": "name"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "symbol"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20UpgradeSafe.__ERC20_init_unchained",
                                        "Initializable.initializer",
                                        "ContextUpgradeSafe.__Context_init_unchained"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "c985715ed47563562f96eb11a2b37b23"
                            }
                        ],
                        "__ERC20_init_unchained": [
                            {
                                "visibility": "internal",
                                "content": "function __ERC20_init_unchained(string memory name, string memory symbol) internal initializer{ _name = name; _symbol = symbol; _decimals = 18;}",
                                "modifiers": [
                                    "initializer"
                                ],
                                "parameters": [
                                    {
                                        "type": "string memory",
                                        "name": "name"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "symbol"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_name",
                                        "",
                                        "ERC20UpgradeSafe"
                                    ],
                                    [
                                        "_symbol",
                                        "",
                                        "ERC20UpgradeSafe"
                                    ],
                                    [
                                        "_decimals",
                                        "",
                                        "ERC20UpgradeSafe"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_name",
                                        "",
                                        "ERC20UpgradeSafe"
                                    ],
                                    [
                                        "_symbol",
                                        "",
                                        "ERC20UpgradeSafe"
                                    ],
                                    [
                                        "_decimals",
                                        "",
                                        "ERC20UpgradeSafe"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Initializable.initializer"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "4c386946c4a912edf1422ab9ac62bfe5"
                            }
                        ],
                        "name": [
                            {
                                "visibility": "public",
                                "content": "function name() public view returns (string memory){ return _name;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "string memory",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_name",
                                        "",
                                        "ERC20UpgradeSafe"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "8572f20ecd43eb9f02a2efc81fdc4578"
                            }
                        ],
                        "symbol": [
                            {
                                "visibility": "public",
                                "content": "function symbol() public view returns (string memory){ return _symbol;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "string memory",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_symbol",
                                        "",
                                        "ERC20UpgradeSafe"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "b002d129ce65d0f4df01da6ede3b5e4d"
                            }
                        ],
                        "decimals": [
                            {
                                "visibility": "public",
                                "content": "function decimals() public view returns (uint8){ return _decimals;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint8",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_decimals",
                                        "",
                                        "ERC20UpgradeSafe"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c396c5ca1d21fa7e84c10681e8d59b07"
                            }
                        ],
                        "totalSupply": [
                            {
                                "visibility": "public",
                                "content": "function totalSupply() public view override returns (uint256){ return _totalSupply;}",
                                "modifiers": [
                                    "view",
                                    "override"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_totalSupply",
                                        "",
                                        "ERC20UpgradeSafe"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "bb4ad2b782229755936696d1b68b36a4"
                            }
                        ],
                        "balanceOf": [
                            {
                                "visibility": "public",
                                "content": "function balanceOf(address account) public view override returns (uint256){ return _balances[account];}",
                                "modifiers": [
                                    "view",
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "account"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_balances",
                                        "",
                                        "ERC20UpgradeSafe"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c3e34cfaf7176fb234da98e9806cd30c"
                            }
                        ],
                        "transfer": [
                            {
                                "visibility": "public",
                                "content": "function transfer(address recipient, uint256 amount) public virtual override returns (bool){ _transfer(_msgSender(), recipient, amount); return true;}",
                                "modifiers": [
                                    "virtual",
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "recipient"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20UpgradeSafe._msgSender",
                                        "ERC20UpgradeSafe._transfer"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "3ee0674f770c2fd01c8fe1a77d179a27"
                            }
                        ],
                        "allowance": [
                            {
                                "visibility": "public",
                                "content": "function allowance(address owner, address spender) public view virtual override returns (uint256){ return _allowances[owner][spender];}",
                                "modifiers": [
                                    "view",
                                    "virtual",
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "owner"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_allowances",
                                        "",
                                        "ERC20UpgradeSafe"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "d7cbdea72a1a98a5910dc39323a9b2cc"
                            }
                        ],
                        "approve": [
                            {
                                "visibility": "public",
                                "content": "function approve(address spender, uint256 amount) public virtual override returns (bool){ _approve(_msgSender(), spender, amount); return true;}",
                                "modifiers": [
                                    "virtual",
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20UpgradeSafe._msgSender",
                                        "ERC20UpgradeSafe._approve"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "6a2b69527387a6c654cc23d45f984ac2"
                            }
                        ],
                        "transferFrom": [
                            {
                                "visibility": "public",
                                "content": "function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool){ _transfer(sender, recipient, amount); if(sender != _msgSender() && _allowances[sender][_msgSender()] != uint(-1)) _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\")); return true;}",
                                "modifiers": [
                                    "virtual",
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "sender"
                                    },
                                    {
                                        "type": "address",
                                        "name": "recipient"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_allowances",
                                        "",
                                        "ERC20UpgradeSafe"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20UpgradeSafe._msgSender",
                                        "ERC20UpgradeSafe._approve",
                                        "ERC20UpgradeSafe._transfer"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "5f7816850ef65d6d4f3d364dd10f5b85"
                            }
                        ],
                        "increaseAllowance": [
                            {
                                "visibility": "public",
                                "content": "function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool){ _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue)); return true;}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "addedValue"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_allowances",
                                        "",
                                        "ERC20UpgradeSafe"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20UpgradeSafe._msgSender",
                                        "ERC20UpgradeSafe._approve"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "e2420d124f948c49ec7763d058d15157"
                            }
                        ],
                        "decreaseAllowance": [
                            {
                                "visibility": "public",
                                "content": "function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool){ _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\")); return true;}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "subtractedValue"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_allowances",
                                        "",
                                        "ERC20UpgradeSafe"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20UpgradeSafe._msgSender",
                                        "ERC20UpgradeSafe._approve"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "c9787278fddc63fad59c0d8d8adbcafe"
                            }
                        ],
                        "_transfer": [
                            {
                                "visibility": "internal",
                                "content": "function _transfer(address sender, address recipient, uint256 amount) internal virtual{ require(sender != address(0), \"ERC20: transfer from the zero address\"); require(recipient != address(0), \"ERC20: transfer to the zero address\"); _beforeTokenTransfer(sender, recipient, amount); _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\"); _balances[recipient] = _balances[recipient].add(amount); emit Transfer(sender, recipient, amount);}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "sender"
                                    },
                                    {
                                        "type": "address",
                                        "name": "recipient"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_balances",
                                        "",
                                        "ERC20UpgradeSafe"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_balances",
                                        "",
                                        "ERC20UpgradeSafe"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20UpgradeSafe._beforeTokenTransfer"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "fb62c220e2276721ee024f6b82f94489"
                            }
                        ],
                        "_mint": [
                            {
                                "visibility": "internal",
                                "content": "function _mint(address account, uint256 amount) internal virtual{ require(account != address(0), \"ERC20: mint to the zero address\"); _beforeTokenTransfer(address(0), account, amount); _totalSupply = _totalSupply.add(amount); _balances[account] = _balances[account].add(amount); emit Transfer(address(0), account, amount);}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "account"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_balances",
                                        "",
                                        "ERC20UpgradeSafe"
                                    ],
                                    [
                                        "_totalSupply",
                                        "",
                                        "ERC20UpgradeSafe"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_balances",
                                        "",
                                        "ERC20UpgradeSafe"
                                    ],
                                    [
                                        "_totalSupply",
                                        "",
                                        "ERC20UpgradeSafe"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "_totalSupply.add",
                                        "ERC20UpgradeSafe._beforeTokenTransfer"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "096242128c682603db1a0b0d903136f5"
                            }
                        ],
                        "_burn": [
                            {
                                "visibility": "internal",
                                "content": "function _burn(address account, uint256 amount) internal virtual{ require(account != address(0), \"ERC20: burn from the zero address\"); _beforeTokenTransfer(account, address(0), amount); _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\"); _totalSupply = _totalSupply.sub(amount); emit Transfer(account, address(0), amount);}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "account"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_balances",
                                        "",
                                        "ERC20UpgradeSafe"
                                    ],
                                    [
                                        "_totalSupply",
                                        "",
                                        "ERC20UpgradeSafe"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_balances",
                                        "",
                                        "ERC20UpgradeSafe"
                                    ],
                                    [
                                        "_totalSupply",
                                        "",
                                        "ERC20UpgradeSafe"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20UpgradeSafe._beforeTokenTransfer",
                                        "_totalSupply.sub"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "5a2372c1fd2a727cf0935156c997d1f5"
                            }
                        ],
                        "_approve": [
                            {
                                "visibility": "internal",
                                "content": "function _approve(address owner, address spender, uint256 amount) internal virtual{ require(owner != address(0), \"ERC20: approve from the zero address\"); require(spender != address(0), \"ERC20: approve to the zero address\"); _allowances[owner][spender] = amount; emit Approval(owner, spender, amount);}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "owner"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_allowances",
                                        "",
                                        "ERC20UpgradeSafe"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_allowances",
                                        "",
                                        "ERC20UpgradeSafe"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20UpgradeSafe._approve"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "39fc3d2c59f8296512abc90ea29b08bf"
                            }
                        ],
                        "_setupDecimals": [
                            {
                                "visibility": "internal",
                                "content": "function _setupDecimals(uint8 decimals_) internal{ _decimals = decimals_;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint8",
                                        "name": "decimals_"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_decimals",
                                        "",
                                        "ERC20UpgradeSafe"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_decimals",
                                        "",
                                        "ERC20UpgradeSafe"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "f7745f15903633a0ae970d1ffac10a13"
                            }
                        ],
                        "_beforeTokenTransfer": [
                            {
                                "visibility": "internal",
                                "content": "function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual{}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20CappedUpgradeSafe.totalSupply",
                                        "ERC20UpgradeSafe._beforeTokenTransfer"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "ba41c5ef0cd7854682c8a8381eef9051"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "uint256": "SafeMath",
                        "address": "Address"
                    }
                },
                "ERC20CappedUpgradeSafe": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": true,
                    "inherits": [
                        "is",
                        "Initializable",
                        "ERC20UpgradeSafe"
                    ],
                    "state_variables": {
                        "_cap": {
                            "type": "uint256",
                            "visibility": "internal",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256 internal _cap;"
                        },
                        "__gap": {
                            "type": "uint256[49]",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256[49] private __gap;"
                        }
                    },
                    "functions": {
                        "__ERC20Capped_init": [
                            {
                                "visibility": "internal",
                                "content": "function __ERC20Capped_init(uint256 cap) internal initializer{ __Context_init_unchained(); __ERC20Capped_init_unchained(cap);}",
                                "modifiers": [
                                    "initializer"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "cap"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ContextUpgradeSafe.__Context_init_unchained",
                                        "Initializable.initializer",
                                        "ERC20CappedUpgradeSafe.__ERC20Capped_init_unchained"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "c5c104b6c9b2bed323041e0e6a46c9ff"
                            }
                        ],
                        "__ERC20Capped_init_unchained": [
                            {
                                "visibility": "internal",
                                "content": "function __ERC20Capped_init_unchained(uint256 cap) internal initializer{ require(cap > 0, \"ERC20Capped: cap is 0\"); _cap = cap;}",
                                "modifiers": [
                                    "initializer"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "cap"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_cap",
                                        "",
                                        "ERC20CappedUpgradeSafe"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_cap",
                                        "",
                                        "ERC20CappedUpgradeSafe"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Initializable.initializer"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "f007047ea0c607931a54933ec74ed8df"
                            }
                        ],
                        "cap": [
                            {
                                "visibility": "public",
                                "content": "function cap() virtual public view returns (uint256){ return _cap;}",
                                "modifiers": [
                                    "virtual",
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_cap",
                                        "",
                                        "ERC20CappedUpgradeSafe"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "e1f94bf4c7a12221e3c4286a5a734e0c"
                            }
                        ],
                        "_beforeTokenTransfer": [
                            {
                                "visibility": "internal",
                                "content": "function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override{ super._beforeTokenTransfer(from, to, amount); if (from == address(0)){ require(totalSupply().add(amount) <= _cap, \"ERC20Capped: cap exceeded\");}}",
                                "modifiers": [
                                    "virtual",
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_cap",
                                        "",
                                        "ERC20CappedUpgradeSafe"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "d2b90cd730eff07c85c6009cc5dfafb0"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "SafeERC20": {
                    "type": {
                        "__CT__": true,
                        "value": 2
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "safeTransfer": [
                            {
                                "visibility": "internal",
                                "content": "function safeTransfer(IERC20 token, address to, uint256 value) internal{ _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "IERC20",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "token",
                                        "",
                                        "MappingBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SafeERC20._callOptionalReturn"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "eea4fa7146b01518dc938446227eee77"
                            }
                        ],
                        "safeTransferFrom": [
                            {
                                "visibility": "internal",
                                "content": "function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal{ _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "IERC20",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "token",
                                        "",
                                        "MappingBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SafeERC20._callOptionalReturn"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "6d0886ab47ccffec354b109fb2e8de81"
                            }
                        ],
                        "safeApprove": [
                            {
                                "visibility": "internal",
                                "content": "function safeApprove(IERC20 token, address spender, uint256 value) internal{ require((value == 0) || (token.allowance(address(this), spender) == 0), \"SafeERC20: approve from non-zero to non-zero allowance\" ); _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "IERC20",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "token",
                                        "",
                                        "MappingBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SafeERC20._callOptionalReturn",
                                        "IERC20.allowance"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "185df0fcc33639b458206937b625daee"
                            }
                        ],
                        "safeIncreaseAllowance": [
                            {
                                "visibility": "internal",
                                "content": "function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal{ uint256 newAllowance = token.allowance(address(this), spender).add(value); _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "IERC20",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "token",
                                        "",
                                        "MappingBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SafeERC20._callOptionalReturn",
                                        "IERC20.allowance"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "7ec9c2fa883a691f577ada41e861f1dd"
                            }
                        ],
                        "safeDecreaseAllowance": [
                            {
                                "visibility": "internal",
                                "content": "function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal{ uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\"); _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "IERC20",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "token",
                                        "",
                                        "MappingBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "SafeERC20._callOptionalReturn",
                                        "IERC20.allowance"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "046342634ee770bd5ae8a38f96edb56e"
                            }
                        ],
                        "_callOptionalReturn": [
                            {
                                "visibility": "private",
                                "content": "function _callOptionalReturn(IERC20 token, bytes memory data) private{ require(address(token).isContract(), \"SafeERC20: call to non- contract \"); (bool success, bytes memory returndata) = address(token).call(data); require(success, \"SafeERC20: low-level call failed\"); if (returndata.length > 0){ require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "IERC20",
                                        "name": "token"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "data"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "token",
                                        "",
                                        "MappingBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "IERC20.data",
                                        "IERC20.isContract"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "e930f8d48927a8c8eb5f50424b168514"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "uint256": "SafeMath",
                        "address": "Address"
                    }
                },
                "RLPReader": {
                    "type": {
                        "__CT__": true,
                        "value": 2
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {
                        "STRING_SHORT_START": {
                            "type": "uint8",
                            "visibility": "internal",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "0x80",
                            "content": "uint8 constant STRING_SHORT_START = 0x80;"
                        },
                        "STRING_LONG_START": {
                            "type": "uint8",
                            "visibility": "internal",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "0xb8",
                            "content": "uint8 constant STRING_LONG_START = 0xb8;"
                        },
                        "LIST_SHORT_START": {
                            "type": "uint8",
                            "visibility": "internal",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "0xc0",
                            "content": "uint8 constant LIST_SHORT_START = 0xc0;"
                        },
                        "LIST_LONG_START": {
                            "type": "uint8",
                            "visibility": "internal",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "0xf8",
                            "content": "uint8 constant LIST_LONG_START = 0xf8;"
                        },
                        "WORD_SIZE": {
                            "type": "uint8",
                            "visibility": "internal",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "32",
                            "content": "uint8 constant WORD_SIZE = 32;"
                        }
                    },
                    "functions": {
                        "next": [
                            {
                                "visibility": "internal",
                                "content": "function next(Iterator memory self) internal pure returns (RLPItem memory){ require(hasNext(self)); uint ptr = self.nextPtr; uint itemLength = _itemLength(ptr); self.nextPtr = ptr + itemLength; return RLPItem(itemLength, ptr);}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "Iterator memory",
                                        "name": "self"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "RLPItem memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "RLPReader._itemLength",
                                        "RLPReader.hasNext"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "0cd2ccf709d3e5b6966311eb28a70fe1"
                            }
                        ],
                        "hasNext": [
                            {
                                "visibility": "internal",
                                "content": "function hasNext(Iterator memory self) internal pure returns (bool){ RLPItem memory item = self.item; return self.nextPtr < item.memPtr + item.len;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "Iterator memory",
                                        "name": "self"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "05bb0d8cabbae2c6a52a2c16ee5f4899"
                            }
                        ],
                        "toRlpItem": [
                            {
                                "visibility": "internal",
                                "content": "function toRlpItem(bytes memory item) internal pure returns (RLPItem memory){ uint memPtr; assembly{ memPtr := add(item, 0x20)} return RLPItem(item.length, memPtr);}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "item"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "RLPItem memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "17f28a428ca899679f8b6cc87963d554"
                            }
                        ],
                        "iterator": [
                            {
                                "visibility": "internal",
                                "content": "function iterator(RLPItem memory self) internal pure returns (Iterator memory){ require(isList(self)); uint ptr = self.memPtr + _payloadOffset(self.memPtr); return Iterator(self, ptr);}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "RLPItem memory",
                                        "name": "self"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "Iterator memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "RLPReader.isList",
                                        "RLPReader._payloadOffset"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "9b67b1f81a735023dbc9c029df861741"
                            }
                        ],
                        "rlpLen": [
                            {
                                "visibility": "internal",
                                "content": "function rlpLen(RLPItem memory item) internal pure returns (uint){ return item.len;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "RLPItem memory",
                                        "name": "item"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "b17d35244884742e20e3d0541c8675bb"
                            }
                        ],
                        "payloadLocation": [
                            {
                                "visibility": "internal",
                                "content": "function payloadLocation(RLPItem memory item) internal pure returns (uint, uint){ uint offset = _payloadOffset(item.memPtr); uint memPtr = item.memPtr + offset; uint len = item.len - offset; return (memPtr, len);}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "RLPItem memory",
                                        "name": "item"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": null
                                    },
                                    {
                                        "type": "uint",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "RLPReader._payloadOffset"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "d639de7573161b3c3574cc3445512e55"
                            }
                        ],
                        "payloadLen": [
                            {
                                "visibility": "internal",
                                "content": "function payloadLen(RLPItem memory item) internal pure returns (uint){ (, uint len) = payloadLocation(item); return len;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "RLPItem memory",
                                        "name": "item"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "RLPReader.payloadLocation"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "fde7cb04579b5f53f083342b91214b5a"
                            }
                        ],
                        "toList": [
                            {
                                "visibility": "internal",
                                "content": "function toList(RLPItem memory item) internal pure returns (RLPItem[] memory){ require(isList(item)); uint items = numItems(item); RLPItem[] memory result = new RLPItem[](items); uint memPtr = item.memPtr + _payloadOffset(item.memPtr); uint dataLen; for (uint i = 0; i < items; i++){ dataLen = _itemLength(memPtr); result[i] = RLPItem(dataLen, memPtr); memPtr = memPtr + dataLen;} return result;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "RLPItem memory",
                                        "name": "item"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "RLPItem[] memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "RLPReader.isList",
                                        "RLPReader.numItems",
                                        "RLPReader._itemLength",
                                        "RLPReader._payloadOffset"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "8a188b3867c04f23d4c9b8112bf8c03b"
                            }
                        ],
                        "isList": [
                            {
                                "visibility": "internal",
                                "content": "function isList(RLPItem memory item) internal pure returns (bool){ if (item.len == 0) return false; uint8 byte0; uint memPtr = item.memPtr; assembly{ byte0 := byte(0, mload(memPtr))} if (byte0 < LIST_SHORT_START) return false; return true;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "RLPItem memory",
                                        "name": "item"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "LIST_SHORT_START",
                                        "",
                                        "RLPReader"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "35e529f08dc67aabd1a1ec497eb85a80"
                            }
                        ],
                        "rlpBytesKeccak256": [
                            {
                                "visibility": "internal",
                                "content": "function rlpBytesKeccak256(RLPItem memory item) internal pure returns (bytes32){ uint256 ptr = item.memPtr; uint256 len = item.len; bytes32 result; assembly{ result := keccak256(ptr, len)} return result;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "RLPItem memory",
                                        "name": "item"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "dd14effb92d13bc360fb2cf561f17ced"
                            }
                        ],
                        "payloadKeccak256": [
                            {
                                "visibility": "internal",
                                "content": "function payloadKeccak256(RLPItem memory item) internal pure returns (bytes32){ (uint memPtr, uint len) = payloadLocation(item); bytes32 result; assembly{ result := keccak256(memPtr, len)} return result;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "RLPItem memory",
                                        "name": "item"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "RLPReader.payloadLocation"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "7c77fc8d9b879c182e9650afe8fa97de"
                            }
                        ],
                        "toRlpBytes": [
                            {
                                "visibility": "internal",
                                "content": "function toRlpBytes(RLPItem memory item) internal pure returns (bytes memory){ bytes memory result = new bytes(item.len); if (result.length == 0) return result; uint ptr; assembly{ ptr := add(0x20, result)} copy(item.memPtr, ptr, item.len); return result;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "RLPItem memory",
                                        "name": "item"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "RLPReader.copy"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "1ddc9f63ccd515b3217cc5b42e5496ce"
                            }
                        ],
                        "toBoolean": [
                            {
                                "visibility": "internal",
                                "content": "function toBoolean(RLPItem memory item) internal pure returns (bool){ require(item.len == 1); uint result; uint memPtr = item.memPtr; assembly{ result := byte(0, mload(memPtr))} if (result == 0 || result == STRING_SHORT_START){ return false;} else{ return true;}}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "RLPItem memory",
                                        "name": "item"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "STRING_SHORT_START",
                                        "",
                                        "RLPReader"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "6740fcfa59485c7be737510c171f29f7"
                            }
                        ],
                        "toAddress": [
                            {
                                "visibility": "internal",
                                "content": "function toAddress(RLPItem memory item) internal pure returns (address){ require(item.len == 21); return address(toUint(item));}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "RLPItem memory",
                                        "name": "item"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "RLPReader.toUint"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "6e63d8038e225008c3cc709e15a660d9"
                            }
                        ],
                        "toUint": [
                            {
                                "visibility": "internal",
                                "content": "function toUint(RLPItem memory item) internal pure returns (uint){ require(item.len > 0 && item.len <= 33); (uint memPtr, uint len) = payloadLocation(item); uint result; assembly{ result := mload(memPtr) if lt(len, 32){ result := div(result, exp(256, sub(32, len)))}} return result;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "RLPItem memory",
                                        "name": "item"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "RLPReader.payloadLocation"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "b3f1b7f6f3856d252499589e3e4b55df"
                            }
                        ],
                        "toUintStrict": [
                            {
                                "visibility": "internal",
                                "content": "function toUintStrict(RLPItem memory item) internal pure returns (uint){ require(item.len == 33); uint result; uint memPtr = item.memPtr + 1; assembly{ result := mload(memPtr)} return result;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "RLPItem memory",
                                        "name": "item"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "3dbe3c85759ec3bd3a43e3ba1467e858"
                            }
                        ],
                        "toBytes": [
                            {
                                "visibility": "internal",
                                "content": "function toBytes(RLPItem memory item) internal pure returns (bytes memory){ require(item.len > 0); (uint memPtr, uint len) = payloadLocation(item); bytes memory result = new bytes(len); uint destPtr; assembly{ destPtr := add(0x20, result)} copy(memPtr, destPtr, len); return result;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "RLPItem memory",
                                        "name": "item"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "RLPReader.copy",
                                        "RLPReader.payloadLocation"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "767f1e9fa633d5eb06f318b667b5bddb"
                            }
                        ],
                        "numItems": [
                            {
                                "visibility": "private",
                                "content": "function numItems(RLPItem memory item) private pure returns (uint){ if (item.len == 0) return 0; uint count = 0; uint currPtr = item.memPtr + _payloadOffset(item.memPtr); uint endPtr = item.memPtr + item.len; while (currPtr < endPtr){ currPtr = currPtr + _itemLength(currPtr); count++;} return count;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "RLPItem memory",
                                        "name": "item"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "RLPReader._itemLength",
                                        "RLPReader._payloadOffset"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "ed7189b1ba2ee973c12c92eba833eee3"
                            }
                        ],
                        "_itemLength": [
                            {
                                "visibility": "private",
                                "content": "function _itemLength(uint memPtr) private pure returns (uint){ uint itemLen; uint byte0; assembly{ byte0 := byte(0, mload(memPtr))} if (byte0 < STRING_SHORT_START) itemLen = 1; else if (byte0 < STRING_LONG_START) itemLen = byte0 - STRING_SHORT_START + 1; else if (byte0 < LIST_SHORT_START){ assembly{ let byteLen := sub(byte0, 0xb7) memPtr := add(memPtr, 1) let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) itemLen := add(dataLen, add(byteLen, 1))}} else if (byte0 < LIST_LONG_START){ itemLen = byte0 - LIST_SHORT_START + 1;} else{ assembly{ let byteLen := sub(byte0, 0xf7) memPtr := add(memPtr, 1) let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) itemLen := add(dataLen, add(byteLen, 1))}} return itemLen;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "memPtr"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "STRING_SHORT_START",
                                        "",
                                        "RLPReader"
                                    ],
                                    [
                                        "STRING_LONG_START",
                                        "",
                                        "RLPReader"
                                    ],
                                    [
                                        "LIST_SHORT_START",
                                        "",
                                        "RLPReader"
                                    ],
                                    [
                                        "LIST_LONG_START",
                                        "",
                                        "RLPReader"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "a9f35bd77083134c0ce9b0ad6f759227"
                            }
                        ],
                        "_payloadOffset": [
                            {
                                "visibility": "private",
                                "content": "function _payloadOffset(uint memPtr) private pure returns (uint){ uint byte0; assembly{ byte0 := byte(0, mload(memPtr))} if (byte0 < STRING_SHORT_START) return 0; else if (byte0 < STRING_LONG_START || (byte0 >= LIST_SHORT_START && byte0 < LIST_LONG_START)) return 1; else if (byte0 < LIST_SHORT_START) return byte0 - (STRING_LONG_START - 1) + 1; else return byte0 - (LIST_LONG_START - 1) + 1;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "memPtr"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "STRING_SHORT_START",
                                        "",
                                        "RLPReader"
                                    ],
                                    [
                                        "STRING_LONG_START",
                                        "",
                                        "RLPReader"
                                    ],
                                    [
                                        "LIST_SHORT_START",
                                        "",
                                        "RLPReader"
                                    ],
                                    [
                                        "LIST_LONG_START",
                                        "",
                                        "RLPReader"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "84b3a85ebde6f91e8282f9061a2e4f91"
                            }
                        ],
                        "copy": [
                            {
                                "visibility": "private",
                                "content": "function copy(uint src, uint dest, uint len) private pure{ if (len == 0) return; for (; len >= WORD_SIZE; len -= WORD_SIZE){ assembly{ mstore(dest, mload(src))} src += WORD_SIZE; dest += WORD_SIZE;} uint mask = 256 ** (WORD_SIZE - len) - 1; assembly{ let srcpart := and(mload(src), not(mask)) let destpart := and(mload(dest), mask) mstore(dest, or(destpart, srcpart))}}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "src"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "dest"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "len"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "WORD_SIZE",
                                        "",
                                        "RLPReader"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "a28ddae60877b8f1c962f0ca2ecc0f88"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {
                        "RLPItem": {
                            "content": "RLPItem{ uint len; uint memPtr;}"
                        },
                        "Iterator": {
                            "content": "Iterator{ RLPItem item; uint nextPtr;}"
                        }
                    },
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "RLPEncode": {
                    "type": {
                        "__CT__": true,
                        "value": 2
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "encodeBytes": [
                            {
                                "visibility": "internal",
                                "content": "function encodeBytes(bytes memory self) internal pure returns (bytes memory){ bytes memory encoded; if (self.length == 1 && uint8(self[0]) <= 128){ encoded = self;} else{ encoded = concat(encodeLength(self.length, 128), self);} return encoded;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "self"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "RLPEncode.concat",
                                        "RLPEncode.encodeLength"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "3f74892f609a8ec67c2e27260b621f1c"
                            }
                        ],
                        "encodeList": [
                            {
                                "visibility": "internal",
                                "content": "function encodeList(bytes[] memory self) internal pure returns (bytes memory){ bytes memory list = flatten(self); return concat(encodeLength(list.length, 192), list);}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes[] memory",
                                        "name": "self"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "RLPEncode.concat",
                                        "RLPEncode.flatten",
                                        "RLPEncode.encodeLength"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "8604051ae427fa331e1df4f77a2d3640"
                            }
                        ],
                        "encodeString": [
                            {
                                "visibility": "internal",
                                "content": "function encodeString(string memory self) internal pure returns (bytes memory){ return encodeBytes(bytes(self));}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "string memory",
                                        "name": "self"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "RLPEncode.encodeBytes"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "a8b509d82d445621c950fb3fc94549fb"
                            }
                        ],
                        "encodeAddress": [
                            {
                                "visibility": "internal",
                                "content": "function encodeAddress(address self) internal pure returns (bytes memory){ bytes memory inputBytes; assembly{ let m := mload(0x40) mstore(add(m, 20), xor(0x140000000000000000000000000000000000000000, self)) mstore(0x40, add(m, 52)) inputBytes := m} return encodeBytes(inputBytes);}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "self"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "RLPEncode.encodeBytes"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "c78d23cf3ed4ca27a94c55c1470e2657"
                            }
                        ],
                        "encodeUint": [
                            {
                                "visibility": "internal",
                                "content": "function encodeUint(uint self) internal pure returns (bytes memory){ return encodeBytes(toBinary(self));}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "self"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "RLPEncode.encodeBytes",
                                        "RLPEncode.toBinary"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "d5d7174cd65d33f039b3b5b5185edacf"
                            }
                        ],
                        "encodeInt": [
                            {
                                "visibility": "internal",
                                "content": "function encodeInt(int self) internal pure returns (bytes memory){ return encodeUint(uint(self));}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "int",
                                        "name": "self"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "RLPEncode.encodeUint"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "e903dbcc7d3a9b7e7cd581f6d20abfe0"
                            }
                        ],
                        "encodeBool": [
                            {
                                "visibility": "internal",
                                "content": "function encodeBool(bool self) internal pure returns (bytes memory){ bytes memory encoded = new bytes(1); encoded[0] = (self ? bytes1(0x01) : bytes1(0x80)); return encoded;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bool",
                                        "name": "self"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "6acbba4803164d13aa8caddfd1a4843b"
                            }
                        ],
                        "encodeLength": [
                            {
                                "visibility": "private",
                                "content": "function encodeLength(uint len, uint offset) private pure returns (bytes memory){ bytes memory encoded; if (len < 56){ encoded = new bytes(1); encoded[0] = bytes32(len + offset)[31];} else{ uint lenLen; uint i = 1; while (len / i != 0){ lenLen++; i *= 256;} encoded = new bytes(lenLen + 1); encoded[0] = bytes32(lenLen + offset + 55)[31]; for(i = 1; i <= lenLen; i++){ encoded[i] = bytes32((len / (256**(lenLen-i))) % 256)[31];}} return encoded;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "len"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "offset"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "ae112f709d4d6c2aacbc3a2e45951461"
                            }
                        ],
                        "toBinary": [
                            {
                                "visibility": "private",
                                "content": "function toBinary(uint _x) private pure returns (bytes memory){ bytes memory b = new bytes(32); assembly{ mstore(add(b, 32), _x)} uint i; for (i = 0; i < 32; i++){ if (b[i] != 0){ break;}} bytes memory res = new bytes(32 - i); for (uint j = 0; j < res.length; j++){ res[j] = b[i++];} return res;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "_x"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "8c255e74fbba360c6313266cadabb377"
                            }
                        ],
                        "memcpy": [
                            {
                                "visibility": "private",
                                "content": "function memcpy(uint _dest, uint _src, uint _len) private pure{ uint dest = _dest; uint src = _src; uint len = _len; for(; len >= 32; len -= 32){ assembly{ mstore(dest, mload(src))} dest += 32; src += 32;} uint mask = 256 ** (32 - len) - 1; assembly{ let srcpart := and(mload(src), not(mask)) let destpart := and(mload(dest), mask) mstore(dest, or(destpart, srcpart))}}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "_dest"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "_src"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "_len"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "58e71428e550677ad57964a9e15f8227"
                            }
                        ],
                        "flatten": [
                            {
                                "visibility": "private",
                                "content": "function flatten(bytes[] memory _list) private pure returns (bytes memory){ if (_list.length == 0){ return new bytes(0);} uint len; uint i; for (i = 0; i < _list.length; i++){ len += _list[i].length;} bytes memory flattened = new bytes(len); uint flattenedPtr; assembly{ flattenedPtr := add(flattened, 0x20)} for(i = 0; i < _list.length; i++){ bytes memory item = _list[i]; uint listPtr; assembly{ listPtr := add(item, 0x20)} memcpy(flattenedPtr, listPtr, item.length); flattenedPtr += _list[i].length;} return flattened;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes[] memory",
                                        "name": "_list"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "RLPEncode.memcpy"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "cc5ca5191fdedcf583a600fa6d5adbce"
                            }
                        ],
                        "concat": [
                            {
                                "visibility": "private",
                                "content": "function concat(bytes memory _preBytes, bytes memory _postBytes) private pure returns (bytes memory){ bytes memory tempBytes; assembly{ tempBytes := mload(0x40) let length := mload(_preBytes) mstore(tempBytes, length) let mc := add(tempBytes, 0x20) let end := add(mc, length) for{ let cc := add(_preBytes, 0x20)} lt(mc, end){ mc := add(mc, 0x20) cc := add(cc, 0x20)}{ mstore(mc, mload(cc))} length := mload(_postBytes) mstore(tempBytes, add(length, mload(tempBytes))) mc := end end := add(mc, length) for{ let cc := add(_postBytes, 0x20)} lt(mc, end){ mc := add(mc, 0x20) cc := add(cc, 0x20)}{ mstore(mc, mload(cc))} mstore(0x40, and( add(add(end, iszero(add(length, mload(_preBytes)))), 31), not(31) ))} return tempBytes;}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "_preBytes"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "_postBytes"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "16c1baa24d9acf34dcdb3aa620084cb3"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "Governable": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "Initializable"
                    ],
                    "state_variables": {
                        "governor": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public governor;"
                        }
                    },
                    "functions": {
                        "__Governable_init_unchained": [
                            {
                                "visibility": "public",
                                "content": "function __Governable_init_unchained(address governor_) virtual public initializer{ governor = governor_; emit GovernorshipTransferred(address(0), governor);}",
                                "modifiers": [
                                    "virtual",
                                    "initializer"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "governor_"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "governor",
                                        "",
                                        "Governable"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "governor",
                                        "",
                                        "Governable"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Initializable.initializer"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "879e78bb24227dfc5946689574a8695d"
                            }
                        ],
                        "renounceGovernorship": [
                            {
                                "visibility": "public",
                                "content": "function renounceGovernorship() public governance{ emit GovernorshipTransferred(governor, address(0)); governor = address(0);}",
                                "modifiers": [
                                    "governance"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [
                                    [
                                        "governor",
                                        "",
                                        "Governable"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "governor",
                                        "",
                                        "Governable"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Governable.governance"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "85995a4f6e671f962964ce56c0e4f39d"
                            }
                        ],
                        "transferGovernorship": [
                            {
                                "visibility": "public",
                                "content": "function transferGovernorship(address newGovernor) public governance{ _transferGovernorship(newGovernor);}",
                                "modifiers": [
                                    "governance"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "newGovernor"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Governable._transferGovernorship",
                                        "Governable.governance"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "f35de59609cbb43697a4e6ea559553ed"
                            }
                        ],
                        "_transferGovernorship": [
                            {
                                "visibility": "internal",
                                "content": "function _transferGovernorship(address newGovernor) internal{ require(newGovernor != address(0)); emit GovernorshipTransferred(governor, newGovernor); governor = newGovernor;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "newGovernor"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "governor",
                                        "",
                                        "Governable"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "governor",
                                        "",
                                        "Governable"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "5f2f869aa0fe9b3b1ab23dca54c99e1a"
                            }
                        ]
                    },
                    "modifiers": {
                        "governance": {
                            "parameters": [],
                            "content": "modifier governance(){ require(msg.sender == governor); _;}",
                            "reads": [
                                [
                                    "governor",
                                    "",
                                    "Governable"
                                ]
                            ],
                            "writes": [],
                            "external_calls": [],
                            "md5": "466feca3fa64bec1953ca5acea66852b"
                        }
                    },
                    "structs": {},
                    "events": {
                        "GovernorshipTransferred": {
                            "event": "GovernorshipTransferred",
                            "content": "GovernorshipTransferred(address indexed previousGovernor, address indexed newGovernor)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "ConfigurableBase": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {
                        "config": {
                            "type": "mapping (bytes32 => uint)",
                            "visibility": "internal",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping (bytes32 => uint) internal config;"
                        }
                    },
                    "functions": {
                        "getConfig": [
                            {
                                "visibility": "public",
                                "content": "function getConfig(bytes32 key) public view returns (uint){ return config[key];}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "key"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "config",
                                        "",
                                        "ConfigurableBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "40f88d5700cf179f4872aa3d2301d263"
                            }
                        ],
                        "getConfigI": [
                            {
                                "visibility": "public",
                                "content": "function getConfigI(bytes32 key, uint index) public view returns (uint){ return config[bytes32(uint(key) ^ index)];}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "key"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "index"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "config",
                                        "",
                                        "ConfigurableBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "e063cd4a8e1681363946663dc7172e78"
                            }
                        ],
                        "getConfigA": [
                            {
                                "visibility": "public",
                                "content": "function getConfigA(bytes32 key, address addr) public view returns (uint){ return config[bytes32(uint(key) ^ uint(addr))];}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "key"
                                    },
                                    {
                                        "type": "address",
                                        "name": "addr"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "config",
                                        "",
                                        "ConfigurableBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "809324351135af8af5948dc3228256ed"
                            }
                        ],
                        "_setConfig": [
                            {
                                "visibility": "internal",
                                "content": "function _setConfig(bytes32 key, uint value) internal{ if(config[key] != value) config[key] = value;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "key"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "value"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "config",
                                        "",
                                        "ConfigurableBase"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "config",
                                        "",
                                        "ConfigurableBase"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ConfigurableBase._setConfig"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "e510d365c28cd5c45c8698c4a8da66fa"
                            },
                            {
                                "visibility": "internal",
                                "content": "function _setConfig(bytes32 key, uint index, uint value) internal{ _setConfig(bytes32(uint(key) ^ index), value);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "key"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "index"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "value"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ConfigurableBase._setConfig"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "6810b47bb8b9bdf484824c10ace6c87f"
                            },
                            {
                                "visibility": "internal",
                                "content": "function _setConfig(bytes32 key, address addr, uint value) internal{ _setConfig(bytes32(uint(key) ^ uint(addr)), value);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "key"
                                    },
                                    {
                                        "type": "address",
                                        "name": "addr"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "value"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ConfigurableBase._setConfig"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "d98c2c5fa5fdcf03cfaca62076e32368"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "Configurable": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "Governable",
                        "ConfigurableBase"
                    ],
                    "state_variables": {},
                    "functions": {
                        "setConfig": [
                            {
                                "visibility": "external",
                                "content": "function setConfig(bytes32 key, uint value) external governance{ _setConfig(key, value);}",
                                "modifiers": [
                                    "governance"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "key"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "value"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ConfigurableBase._setConfig",
                                        "Governable.governance"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "cc5d3b27153d0d72e7f3a2e16067a3a6"
                            }
                        ],
                        "setConfigI": [
                            {
                                "visibility": "external",
                                "content": "function setConfigI(bytes32 key, uint index, uint value) external governance{ _setConfig(bytes32(uint(key) ^ index), value);}",
                                "modifiers": [
                                    "governance"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "key"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "index"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "value"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ConfigurableBase._setConfig",
                                        "Governable.governance"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "33aa67f9b2a49a4f0a03c03216e769e2"
                            }
                        ],
                        "setConfigA": [
                            {
                                "visibility": "public",
                                "content": "function setConfigA(bytes32 key, address addr, uint value) public governance{ _setConfig(bytes32(uint(key) ^ uint(addr)), value);}",
                                "modifiers": [
                                    "governance"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "key"
                                    },
                                    {
                                        "type": "address",
                                        "name": "addr"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "value"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ConfigurableBase._setConfig",
                                        "Governable.governance"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "f1230849b5677ee398a77ab0a48c1dc3"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "IStakingRewards": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "lastTimeRewardApplicable": [
                            {
                                "visibility": "external",
                                "content": "function lastTimeRewardApplicable() external view returns (uint256);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "4a13ec0cb3ad1dc7fd0c1e7b4b6f5bea"
                            }
                        ],
                        "rewardPerToken": [
                            {
                                "visibility": "external",
                                "content": "function rewardPerToken() external view returns (uint256);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "ccac81abe8a4cf4b9b9ff72330b606e9"
                            }
                        ],
                        "rewards": [
                            {
                                "visibility": "external",
                                "content": "function rewards(address account) external view returns (uint256);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "account"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "a3b57afb1690ec14b79ecf5653646715"
                            }
                        ],
                        "earned": [
                            {
                                "visibility": "external",
                                "content": "function earned(address account) external view returns (uint256);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "account"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c7e69e2286badc01bcf7ee324fe57986"
                            }
                        ],
                        "getRewardForDuration": [
                            {
                                "visibility": "external",
                                "content": "function getRewardForDuration() external view returns (uint256);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "ce5073ae61fb42cfa6a06d60ebacd643"
                            }
                        ],
                        "totalSupply": [
                            {
                                "visibility": "external",
                                "content": "function totalSupply() external view returns (uint256);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "5e1d12e61f4bf4b37161d9b684742570"
                            }
                        ],
                        "balanceOf": [
                            {
                                "visibility": "external",
                                "content": "function balanceOf(address account) external view returns (uint256);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "account"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "3ac17e7782366957c960d337a4a648cd"
                            }
                        ],
                        "stake": [
                            {
                                "visibility": "external",
                                "content": "function stake(uint256 amount) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "552bfebb807bae557094fd257d5c6bb1"
                            }
                        ],
                        "withdraw": [
                            {
                                "visibility": "external",
                                "content": "function withdraw(uint256 amount) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "e9eaa0dbb699e0eaab238dc03d38321d"
                            }
                        ],
                        "getReward": [
                            {
                                "visibility": "external",
                                "content": "function getReward() external;",
                                "modifiers": [],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c0a81b800afdec75e93adf269b2c84e2"
                            }
                        ],
                        "exit": [
                            {
                                "visibility": "external",
                                "content": "function exit() external;",
                                "modifiers": [],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "ac8cfbcd0e0a0212d24e3b4086ea23b0"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": [
                        [
                            "",
                            "StakingRewards"
                        ]
                    ]
                },
                "RewardsDistributionRecipient": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": true,
                    "inherits": [],
                    "state_variables": {
                        "rewardsDistribution": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public rewardsDistribution;"
                        }
                    },
                    "functions": {
                        "notifyRewardAmount": [
                            {
                                "visibility": "external",
                                "content": "function notifyRewardAmount(uint256 reward) virtual external;",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "reward"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "272c9155fea21cd829658deb9498b8eb"
                            }
                        ]
                    },
                    "modifiers": {
                        "onlyRewardsDistribution": {
                            "parameters": [],
                            "content": "modifier onlyRewardsDistribution(){ require(msg.sender == rewardsDistribution, \"Caller is not RewardsDistribution contract \"); _;}",
                            "reads": [
                                [
                                    "rewardsDistribution",
                                    "",
                                    "RewardsDistributionRecipient"
                                ]
                            ],
                            "writes": [],
                            "external_calls": [],
                            "md5": "5d46d3f1a339e73c31ebec70f7b19c1e"
                        }
                    },
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "StakingRewards": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "IStakingRewards",
                        "RewardsDistributionRecipient",
                        "ReentrancyGuardUpgradeSafe"
                    ],
                    "state_variables": {
                        "rewardsToken": {
                            "type": "IERC20",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "IERC20 public rewardsToken;"
                        },
                        "stakingToken": {
                            "type": "IERC20",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "IERC20 public stakingToken;"
                        },
                        "periodFinish": {
                            "type": "uint256",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "0",
                            "content": "uint256 public periodFinish = 0;"
                        },
                        "rewardRate": {
                            "type": "uint256",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "0",
                            "content": "uint256 public rewardRate = 0;"
                        },
                        "rewardsDuration": {
                            "type": "uint256",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "60 days",
                            "content": "uint256 public rewardsDuration = 60 days;"
                        },
                        "lastUpdateTime": {
                            "type": "uint256",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256 public lastUpdateTime;"
                        },
                        "rewardPerTokenStored": {
                            "type": "uint256",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256 public rewardPerTokenStored;"
                        },
                        "userRewardPerTokenPaid": {
                            "type": "mapping(address => uint256)",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(address => uint256) public userRewardPerTokenPaid;"
                        },
                        "_totalSupply": {
                            "type": "uint256",
                            "visibility": "internal",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256 internal _totalSupply;"
                        },
                        "_balances": {
                            "type": "mapping(address => uint256)",
                            "visibility": "internal",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(address => uint256) internal _balances;"
                        }
                    },
                    "functions": {
                        "__StakingRewards_init": [
                            {
                                "visibility": "public",
                                "content": "function __StakingRewards_init( address _rewardsDistribution, address _rewardsToken, address _stakingToken ) public initializer{ __ReentrancyGuard_init_unchained(); __StakingRewards_init_unchained(_rewardsDistribution, _rewardsToken, _stakingToken);}",
                                "modifiers": [
                                    "initializer"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_rewardsDistribution"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_rewardsToken"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_stakingToken"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "StakingRewards.__StakingRewards_init_unchained",
                                        "ReentrancyGuardUpgradeSafe.__ReentrancyGuard_init_unchained",
                                        "Initializable.initializer"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "599c21a8a6fba694102ec58729c67517"
                            }
                        ],
                        "__StakingRewards_init_unchained": [
                            {
                                "visibility": "public",
                                "content": "function __StakingRewards_init_unchained(address _rewardsDistribution, address _rewardsToken, address _stakingToken) public initializer{ rewardsToken = IERC20(_rewardsToken); stakingToken = IERC20(_stakingToken); rewardsDistribution = _rewardsDistribution;}",
                                "modifiers": [
                                    "initializer"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_rewardsDistribution"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_rewardsToken"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_stakingToken"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "rewardsDistribution",
                                        "",
                                        "RewardsDistributionRecipient"
                                    ],
                                    [
                                        "rewardsToken",
                                        "",
                                        "StakingRewards"
                                    ],
                                    [
                                        "stakingToken",
                                        "",
                                        "StakingRewards"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "rewardsDistribution",
                                        "",
                                        "RewardsDistributionRecipient"
                                    ],
                                    [
                                        "rewardsToken",
                                        "",
                                        "StakingRewards"
                                    ],
                                    [
                                        "stakingToken",
                                        "",
                                        "StakingRewards"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Initializable.initializer"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "8c886bbd27a590a6c61619160bd12d7e"
                            }
                        ],
                        "totalSupply": [
                            {
                                "visibility": "public",
                                "content": "function totalSupply() virtual override public view returns (uint256){ return _totalSupply;}",
                                "modifiers": [
                                    "virtual",
                                    "override",
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_totalSupply",
                                        "",
                                        "ERC20UpgradeSafe"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "9998ce51b4e1b9129e57ce503161957a"
                            }
                        ],
                        "balanceOf": [
                            {
                                "visibility": "public",
                                "content": "function balanceOf(address account) virtual override public view returns (uint256){ return _balances[account];}",
                                "modifiers": [
                                    "virtual",
                                    "override",
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "account"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_balances",
                                        "",
                                        "ERC20UpgradeSafe"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "15de4dec80e87e8f8a6e349c1791713e"
                            }
                        ],
                        "lastTimeRewardApplicable": [
                            {
                                "visibility": "public",
                                "content": "function lastTimeRewardApplicable() override public view returns (uint256){ return Math.min(block.timestamp, periodFinish);}",
                                "modifiers": [
                                    "override",
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "periodFinish",
                                        "",
                                        "StakingRewards"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Math.min"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "c8082bd0a9b6ee9a0b3e4ac25deb3be8"
                            }
                        ],
                        "rewardPerToken": [
                            {
                                "visibility": "public",
                                "content": "function rewardPerToken() virtual override public view returns (uint256){ if (_totalSupply == 0){ return rewardPerTokenStored;} return rewardPerTokenStored.add( lastTimeRewardApplicable().sub(lastUpdateTime).mul(rewardRate).mul(1e18).div(_totalSupply) );}",
                                "modifiers": [
                                    "virtual",
                                    "override",
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_totalSupply",
                                        "",
                                        "ERC20UpgradeSafe"
                                    ],
                                    [
                                        "rewardRate",
                                        "",
                                        "StakingRewards"
                                    ],
                                    [
                                        "lastUpdateTime",
                                        "",
                                        "StakingRewards"
                                    ],
                                    [
                                        "rewardPerTokenStored",
                                        "",
                                        "StakingRewards"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "rewardPerTokenStored.add",
                                        "StakingRewards.lastTimeRewardApplicable"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "1c60dc1d798e1fc7b3ed49e66e3a0037"
                            }
                        ],
                        "earned": [
                            {
                                "visibility": "public",
                                "content": "function earned(address account) virtual override public view returns (uint256){ return _balances[account].mul(rewardPerToken().sub(userRewardPerTokenPaid[account])).div(1e18).add(rewards[account]);}",
                                "modifiers": [
                                    "virtual",
                                    "override",
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "account"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_balances",
                                        "",
                                        "ERC20UpgradeSafe"
                                    ],
                                    [
                                        "userRewardPerTokenPaid",
                                        "",
                                        "StakingRewards"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "StakingRewards.rewardPerToken"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "e1151f785bfaca18e89000d1040ed9fc"
                            }
                        ],
                        "getRewardForDuration": [
                            {
                                "visibility": "external",
                                "content": "function getRewardForDuration() virtual override external view returns (uint256){ return rewardRate.mul(rewardsDuration);}",
                                "modifiers": [
                                    "virtual",
                                    "override",
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "rewardRate",
                                        "",
                                        "StakingRewards"
                                    ],
                                    [
                                        "rewardsDuration",
                                        "",
                                        "StakingRewards"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "rewardRate.mul"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "3d9d757690a11d371292fae3b7076a6a"
                            }
                        ],
                        "stakeWithPermit": [
                            {
                                "visibility": "public",
                                "content": "function stakeWithPermit(uint256 amount, uint deadline, uint8 v, bytes32 r, bytes32 s) virtual public nonReentrant updateReward(msg.sender){ require(amount > 0, \"Cannot stake 0\"); _totalSupply = _totalSupply.add(amount); _balances[msg.sender] = _balances[msg.sender].add(amount); IPermit(address(stakingToken)).permit(msg.sender, address(this), amount, deadline, v, r, s); stakingToken.safeTransferFrom(msg.sender, address(this), amount); emit Staked(msg.sender, amount);}",
                                "modifiers": [
                                    "virtual",
                                    "nonReentrant",
                                    "updateReward(msg.sender)"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "deadline"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "v"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "r"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "s"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_balances",
                                        "",
                                        "ERC20UpgradeSafe"
                                    ],
                                    [
                                        "_totalSupply",
                                        "",
                                        "ERC20UpgradeSafe"
                                    ],
                                    [
                                        "stakingToken",
                                        "",
                                        "StakingRewards"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_balances",
                                        "",
                                        "ERC20UpgradeSafe"
                                    ],
                                    [
                                        "_totalSupply",
                                        "",
                                        "ERC20UpgradeSafe"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "IERC20.safeTransferFrom",
                                        "_totalSupply.add",
                                        "StakingRewards.updateReward",
                                        "StakingRewards.nonReentrant"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "97b18396e7d124ee1f3046b66fa2446c"
                            }
                        ],
                        "stake": [
                            {
                                "visibility": "public",
                                "content": "function stake(uint256 amount) virtual override public nonReentrant updateReward(msg.sender){ require(amount > 0, \"Cannot stake 0\"); _totalSupply = _totalSupply.add(amount); _balances[msg.sender] = _balances[msg.sender].add(amount); stakingToken.safeTransferFrom(msg.sender, address(this), amount); emit Staked(msg.sender, amount);}",
                                "modifiers": [
                                    "virtual",
                                    "override",
                                    "nonReentrant",
                                    "updateReward(msg.sender)"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_balances",
                                        "",
                                        "ERC20UpgradeSafe"
                                    ],
                                    [
                                        "_totalSupply",
                                        "",
                                        "ERC20UpgradeSafe"
                                    ],
                                    [
                                        "stakingToken",
                                        "",
                                        "StakingRewards"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_balances",
                                        "",
                                        "ERC20UpgradeSafe"
                                    ],
                                    [
                                        "_totalSupply",
                                        "",
                                        "ERC20UpgradeSafe"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "IERC20.safeTransferFrom",
                                        "_totalSupply.add",
                                        "StakingRewards.updateReward",
                                        "StakingRewards.nonReentrant"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "2b4d1b3c4a668e83a1472e43c667cc62"
                            }
                        ],
                        "withdraw": [
                            {
                                "visibility": "public",
                                "content": "function withdraw(uint256 amount) virtual override public nonReentrant updateReward(msg.sender){ require(amount > 0, \"Cannot withdraw 0\"); _totalSupply = _totalSupply.sub(amount); _balances[msg.sender] = _balances[msg.sender].sub(amount); stakingToken.safeTransfer(msg.sender, amount); emit Withdrawn(msg.sender, amount);}",
                                "modifiers": [
                                    "virtual",
                                    "override",
                                    "nonReentrant",
                                    "updateReward(msg.sender)"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_balances",
                                        "",
                                        "ERC20UpgradeSafe"
                                    ],
                                    [
                                        "_totalSupply",
                                        "",
                                        "ERC20UpgradeSafe"
                                    ],
                                    [
                                        "stakingToken",
                                        "",
                                        "StakingRewards"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_balances",
                                        "",
                                        "ERC20UpgradeSafe"
                                    ],
                                    [
                                        "_totalSupply",
                                        "",
                                        "ERC20UpgradeSafe"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "IERC20.safeTransfer",
                                        "StakingRewards.updateReward",
                                        "_totalSupply.sub",
                                        "StakingRewards.nonReentrant"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "10e3bd65e5bcc385c5bea945bf6f7495"
                            }
                        ],
                        "getReward": [
                            {
                                "visibility": "public",
                                "content": "function getReward() virtual override public nonReentrant updateReward(msg.sender){ uint256 reward = rewards[msg.sender]; if (reward > 0){ rewards[msg.sender] = 0; rewardsToken.safeTransfer(msg.sender, reward); emit RewardPaid(msg.sender, reward);}}",
                                "modifiers": [
                                    "virtual",
                                    "override",
                                    "nonReentrant",
                                    "updateReward(msg.sender)"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [
                                    [
                                        "rewardsToken",
                                        "",
                                        "StakingRewards"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "IERC20.safeTransfer",
                                        "StakingRewards.updateReward",
                                        "StakingRewards.nonReentrant"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "cf0c60a6ceac6e707b93737837cfee47"
                            }
                        ],
                        "exit": [
                            {
                                "visibility": "public",
                                "content": "function exit() virtual override public{ withdraw(_balances[msg.sender]); getReward();}",
                                "modifiers": [
                                    "virtual",
                                    "override"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [
                                    [
                                        "_balances",
                                        "",
                                        "ERC20UpgradeSafe"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "StakingRewards.withdraw",
                                        "StakingRewards.getReward"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "4cea3f93e03fafd625d5ee2af4cd92f7"
                            }
                        ],
                        "notifyRewardAmount": [
                            {
                                "visibility": "external",
                                "content": "function notifyRewardAmount(uint256 reward) override external onlyRewardsDistribution updateReward(address(0)){ if (block.timestamp >= periodFinish){ rewardRate = reward.div(rewardsDuration);} else{ uint256 remaining = periodFinish.sub(block.timestamp); uint256 leftover = remaining.mul(rewardRate); rewardRate = reward.add(leftover).div(rewardsDuration);} uint balance = rewardsToken.balanceOf(address(this)); require(rewardRate <= balance.div(rewardsDuration), \"Provided reward too high\"); lastUpdateTime = block.timestamp; periodFinish = block.timestamp.add(rewardsDuration); emit RewardAdded(reward);}",
                                "modifiers": [
                                    "override",
                                    "onlyRewardsDistribution",
                                    "updateReward(address(0))"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "reward"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "rewardsToken",
                                        "",
                                        "StakingRewards"
                                    ],
                                    [
                                        "periodFinish",
                                        "",
                                        "StakingRewards"
                                    ],
                                    [
                                        "rewardRate",
                                        "",
                                        "StakingRewards"
                                    ],
                                    [
                                        "rewardsDuration",
                                        "",
                                        "StakingRewards"
                                    ],
                                    [
                                        "lastUpdateTime",
                                        "",
                                        "StakingRewards"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "periodFinish",
                                        "",
                                        "StakingRewards"
                                    ],
                                    [
                                        "rewardRate",
                                        "",
                                        "StakingRewards"
                                    ],
                                    [
                                        "lastUpdateTime",
                                        "",
                                        "StakingRewards"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "balance.div",
                                        "StakingRewards.updateReward",
                                        "reward.div",
                                        "reward.add",
                                        "periodFinish.sub",
                                        "remaining.mul",
                                        "StakingRewards.onlyRewardsDistribution",
                                        "IERC20.balanceOf"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "bb763114652f7d5c52a26069f435d450"
                            }
                        ]
                    },
                    "modifiers": {
                        "updateReward": {
                            "parameters": [
                                {
                                    "type": "address",
                                    "name": "account"
                                }
                            ],
                            "content": "modifier updateReward(address account) virtual{ rewardPerTokenStored = rewardPerToken(); lastUpdateTime = lastTimeRewardApplicable(); if (account != address(0)){ rewards[account] = earned(account); userRewardPerTokenPaid[account] = rewardPerTokenStored;} _;}",
                            "reads": [
                                [
                                    "lastUpdateTime",
                                    "",
                                    "StakingRewards"
                                ],
                                [
                                    "rewardPerTokenStored",
                                    "",
                                    "StakingRewards"
                                ],
                                [
                                    "userRewardPerTokenPaid",
                                    "",
                                    "StakingRewards"
                                ]
                            ],
                            "writes": [
                                [
                                    "lastUpdateTime",
                                    "",
                                    "StakingRewards"
                                ],
                                [
                                    "rewardPerTokenStored",
                                    "",
                                    "StakingRewards"
                                ],
                                [
                                    "userRewardPerTokenPaid",
                                    "",
                                    "StakingRewards"
                                ]
                            ],
                            "external_calls": {
                                "__set__": true,
                                "values": [
                                    "StakingRewards.lastTimeRewardApplicable",
                                    "StakingRewards.earned",
                                    "StakingRewards.rewardPerToken"
                                ]
                            },
                            "md5": "7ede2a94200b87247125ca42cb6f4ee5"
                        }
                    },
                    "structs": {},
                    "events": {
                        "RewardAdded": {
                            "event": "RewardAdded",
                            "content": "RewardAdded(uint256 reward)"
                        },
                        "Staked": {
                            "event": "Staked",
                            "content": "Staked(address indexed user, uint256 amount)"
                        },
                        "Withdrawn": {
                            "event": "Withdrawn",
                            "content": "Withdrawn(address indexed user, uint256 amount)"
                        },
                        "RewardPaid": {
                            "event": "RewardPaid",
                            "content": "RewardPaid(address indexed user, uint256 reward)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "uint256": "SafeMath",
                        "IERC20": "SafeERC20"
                    }
                },
                "IPermit": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "permit": [
                            {
                                "visibility": "external",
                                "content": "function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "owner"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "value"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "deadline"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "v"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "r"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "s"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "7164681d17fe17aed21b5519967b69f8"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                },
                "Constants": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {
                        "_TokenMapped_": {
                            "type": "bytes32",
                            "visibility": "internal",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "'TokenMapped'",
                            "content": "bytes32 internal constant _TokenMapped_ = 'TokenMapped';"
                        },
                        "_MappableToken_": {
                            "type": "bytes32",
                            "visibility": "internal",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "'MappableToken'",
                            "content": "bytes32 internal constant _MappableToken_ = 'MappableToken';"
                        },
                        "_MappingToken_": {
                            "type": "bytes32",
                            "visibility": "internal",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "'MappingToken'",
                            "content": "bytes32 internal constant _MappingToken_ = 'MappingToken';"
                        },
                        "_fee_": {
                            "type": "bytes32",
                            "visibility": "internal",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "'fee'",
                            "content": "bytes32 internal constant _fee_ = 'fee';"
                        },
                        "_feeCreate_": {
                            "type": "bytes32",
                            "visibility": "internal",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "'feeCreate'",
                            "content": "bytes32 internal constant _feeCreate_ = 'feeCreate';"
                        },
                        "_feeRegister_": {
                            "type": "bytes32",
                            "visibility": "internal",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "'feeRegister'",
                            "content": "bytes32 internal constant _feeRegister_ = 'feeRegister';"
                        },
                        "_feeTo_": {
                            "type": "bytes32",
                            "visibility": "internal",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "'feeTo'",
                            "content": "bytes32 internal constant _feeTo_ = 'feeTo';"
                        },
                        "_onlyDeployer_": {
                            "type": "bytes32",
                            "visibility": "internal",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "'onlyDeployer'",
                            "content": "bytes32 internal constant _onlyDeployer_ = 'onlyDeployer';"
                        },
                        "_minSignatures_": {
                            "type": "bytes32",
                            "visibility": "internal",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "'minSignatures'",
                            "content": "bytes32 internal constant _minSignatures_ = 'minSignatures';"
                        },
                        "_initQuotaRatio_": {
                            "type": "bytes32",
                            "visibility": "internal",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "'initQuotaRatio'",
                            "content": "bytes32 internal constant _initQuotaRatio_ = 'initQuotaRatio';"
                        },
                        "_autoQuotaRatio_": {
                            "type": "bytes32",
                            "visibility": "internal",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "'autoQuotaRatio'",
                            "content": "bytes32 internal constant _autoQuotaRatio_ = 'autoQuotaRatio';"
                        },
                        "_autoQuotaPeriod_": {
                            "type": "bytes32",
                            "visibility": "internal",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "'autoQuotaPeriod'",
                            "content": "bytes32 internal constant _autoQuotaPeriod_ = 'autoQuotaPeriod';"
                        }
                    },
                    "functions": {
                        "_chainId": [
                            {
                                "visibility": "internal",
                                "content": "function _chainId() internal pure returns (uint id){ assembly{ id := chainid()}}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "id"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "6825c4086b2f9aed3889e1daa87eae69"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "MappingBase": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": true,
                    "inherits": [
                        "is",
                        "ContextUpgradeSafe",
                        "Constants"
                    ],
                    "state_variables": {
                        "RECEIVE_TYPEHASH": {
                            "type": "bytes32",
                            "visibility": "public",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "keccak256(\"Receive(uint256 fromChainId, address to, uint256 nonce, uint256 volume, address signatory)\")",
                            "content": "bytes32 public constant RECEIVE_TYPEHASH = keccak256(\"Receive(uint256 fromChainId, address to, uint256 nonce, uint256 volume, address signatory)\");"
                        },
                        "DOMAIN_TYPEHASH": {
                            "type": "bytes32",
                            "visibility": "public",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "keccak256(\"EIP712Domain(string name, uint256 chainId, address verifyingContract)\")",
                            "content": "bytes32 public constant DOMAIN_TYPEHASH = keccak256(\"EIP712Domain(string name, uint256 chainId, address verifyingContract)\");"
                        },
                        "_DOMAIN_SEPARATOR": {
                            "type": "bytes32",
                            "visibility": "internal",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "bytes32 internal _DOMAIN_SEPARATOR;"
                        },
                        "factory": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public factory;"
                        },
                        "mainChainId": {
                            "type": "uint256",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256 public mainChainId;"
                        },
                        "token": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public token;"
                        },
                        "deployer": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public deployer;"
                        },
                        "_authQuotas": {
                            "type": "mapping (address => uint)",
                            "visibility": "internal",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping (address => uint) internal _authQuotas;"
                        },
                        "sentCount": {
                            "type": "mapping (uint => mapping (address => uint))",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping (uint => mapping (address => uint)) public sentCount;"
                        },
                        "sent": {
                            "type": "mapping (uint => mapping (address => mapping (uint => uint)))",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping (uint => mapping (address => mapping (uint => uint))) public sent;"
                        },
                        "received": {
                            "type": "mapping (uint => mapping (address => mapping (uint => uint)))",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping (uint => mapping (address => mapping (uint => uint))) public received;"
                        },
                        "lasttimeUpdateQuotaOf": {
                            "type": "mapping (address => uint)",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping (address => uint) public lasttimeUpdateQuotaOf;"
                        },
                        "autoQuotaRatio": {
                            "type": "uint",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint public autoQuotaRatio;"
                        },
                        "autoQuotaPeriod": {
                            "type": "uint",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint public autoQuotaPeriod;"
                        },
                        "__gap": {
                            "type": "uint256[47]",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256[47] private __gap;"
                        }
                    },
                    "functions": {
                        "DOMAIN_SEPARATOR": [
                            {
                                "visibility": "public",
                                "content": "function DOMAIN_SEPARATOR() virtual public view returns (bytes32){ return _DOMAIN_SEPARATOR;}",
                                "modifiers": [
                                    "virtual",
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_DOMAIN_SEPARATOR",
                                        "",
                                        "MappingBase"
                                    ],
                                    [
                                        "DOMAIN_SEPARATOR",
                                        "",
                                        "Factory"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "MappingBase.DOMAIN_SEPARATOR"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "05815736d7928b6d89b76ea3ab39c703"
                            }
                        ],
                        "setAutoQuota": [
                            {
                                "visibility": "external",
                                "content": "function setAutoQuota(uint ratio, uint period) virtual external onlyFactory{ autoQuotaRatio = ratio; autoQuotaPeriod = period;}",
                                "modifiers": [
                                    "virtual",
                                    "onlyFactory"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "ratio"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "period"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "autoQuotaRatio",
                                        "",
                                        "MappingBase"
                                    ],
                                    [
                                        "autoQuotaPeriod",
                                        "",
                                        "MappingBase"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "autoQuotaRatio",
                                        "",
                                        "MappingBase"
                                    ],
                                    [
                                        "autoQuotaPeriod",
                                        "",
                                        "MappingBase"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "MappingBase.onlyFactory"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "79673d591562825640f4121189d81b02"
                            }
                        ],
                        "authQuotaOf": [
                            {
                                "visibility": "public",
                                "content": "function authQuotaOf(address signatory) virtual public view returns (uint quota){ quota = _authQuotas[signatory]; uint ratio = autoQuotaRatio != 0 ? autoQuotaRatio : Factory(factory).getConfig(_autoQuotaRatio_); uint period = autoQuotaPeriod != 0 ? autoQuotaPeriod : Factory(factory).getConfig(_autoQuotaPeriod_); if(ratio == 0 || period == 0 || period == uint(-1)) return quota; uint quotaCap = cap().mul(ratio).div(1e18); uint delta = quotaCap.mul(now.sub(lasttimeUpdateQuotaOf[signatory])).div(period); return Math.max(quota, Math.min(quotaCap, quota.add(delta)));}",
                                "modifiers": [
                                    "virtual",
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "signatory"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "quota"
                                    }
                                ],
                                "reads": [
                                    [
                                        "_autoQuotaRatio_",
                                        "",
                                        "Constants"
                                    ],
                                    [
                                        "_autoQuotaPeriod_",
                                        "",
                                        "Constants"
                                    ],
                                    [
                                        "factory",
                                        "",
                                        "MappingBase"
                                    ],
                                    [
                                        "_authQuotas",
                                        "",
                                        "MappingBase"
                                    ],
                                    [
                                        "lasttimeUpdateQuotaOf",
                                        "",
                                        "MappingBase"
                                    ],
                                    [
                                        "autoQuotaRatio",
                                        "",
                                        "MappingBase"
                                    ],
                                    [
                                        "autoQuotaPeriod",
                                        "",
                                        "MappingBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "MappingBase.cap",
                                        "Math.max",
                                        "quota.add",
                                        "Math.min",
                                        "quotaCap.mul",
                                        "now.sub"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "ff516623fa8a60f4100693310b4ba61b"
                            }
                        ],
                        "cap": [
                            {
                                "visibility": "public",
                                "content": "function cap() public view virtual returns (uint);",
                                "modifiers": [
                                    "view",
                                    "virtual"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "34ec82a51c1dce9927f99000e6589126"
                            }
                        ],
                        "increaseAuthQuotas": [
                            {
                                "visibility": "external",
                                "content": "function increaseAuthQuotas(address[] memory signatories, uint[] memory increments) virtual external returns (uint[] memory quotas){ require(signatories.length == increments.length, 'two array lenth not equal'); quotas = new uint[](signatories.length); for(uint i=0; i<signatories.length; i++) quotas[i] = increaseAuthQuota(signatories[i], increments[i]);}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "address[] memory",
                                        "name": "signatories"
                                    },
                                    {
                                        "type": "uint[] memory",
                                        "name": "increments"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint[] memory",
                                        "name": "quotas"
                                    }
                                ],
                                "reads": [
                                    [
                                        "signatories",
                                        "",
                                        "Factory"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "MappingBase.increaseAuthQuota"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "144ffdd11711d68e13a7ca12508f247e"
                            }
                        ],
                        "increaseAuthQuota": [
                            {
                                "visibility": "public",
                                "content": "function increaseAuthQuota(address signatory, uint increment) virtual public updateAutoQuota(signatory) onlyFactory returns (uint quota){ quota = _authQuotas[signatory].add(increment); _authQuotas[signatory] = quota; emit IncreaseAuthQuota(signatory, increment, quota);}",
                                "modifiers": [
                                    "virtual",
                                    "updateAutoQuota(signatory)",
                                    "onlyFactory"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "signatory"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "increment"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "quota"
                                    }
                                ],
                                "reads": [
                                    [
                                        "_authQuotas",
                                        "",
                                        "MappingBase"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_authQuotas",
                                        "",
                                        "MappingBase"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "MappingBase.onlyFactory",
                                        "MappingBase.updateAutoQuota"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "ac113e3b7fe95605d0b40d39e0608f2f"
                            }
                        ],
                        "decreaseAuthQuotas": [
                            {
                                "visibility": "external",
                                "content": "function decreaseAuthQuotas(address[] memory signatories, uint[] memory decrements) virtual external returns (uint[] memory quotas){ require(signatories.length == decrements.length, 'two array lenth not equal'); quotas = new uint[](signatories.length); for(uint i=0; i<signatories.length; i++) quotas[i] = decreaseAuthQuota(signatories[i], decrements[i]);}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "address[] memory",
                                        "name": "signatories"
                                    },
                                    {
                                        "type": "uint[] memory",
                                        "name": "decrements"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint[] memory",
                                        "name": "quotas"
                                    }
                                ],
                                "reads": [
                                    [
                                        "signatories",
                                        "",
                                        "Factory"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "MappingBase.decreaseAuthQuota"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "49e4fd89b6b25f48efe82d67eb7087d0"
                            }
                        ],
                        "decreaseAuthQuota": [
                            {
                                "visibility": "public",
                                "content": "function decreaseAuthQuota(address signatory, uint decrement) virtual public onlyFactory returns (uint quota){ quota = authQuotaOf(signatory); if(quota < decrement) decrement = quota; return _decreaseAuthQuota(signatory, decrement);}",
                                "modifiers": [
                                    "virtual",
                                    "onlyFactory"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "signatory"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "decrement"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "quota"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "MappingBase.onlyFactory",
                                        "MappingBase.authQuotaOf",
                                        "MappingBase._decreaseAuthQuota"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "561882f05046839a56634741c5309b0f"
                            }
                        ],
                        "_decreaseAuthQuota": [
                            {
                                "visibility": "internal",
                                "content": "function _decreaseAuthQuota(address signatory, uint decrement) virtual internal updateAutoQuota(signatory) returns (uint quota){ quota = _authQuotas[signatory].sub(decrement); _authQuotas[signatory] = quota; emit DecreaseAuthQuota(signatory, decrement, quota);}",
                                "modifiers": [
                                    "virtual",
                                    "updateAutoQuota(signatory)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "signatory"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "decrement"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "quota"
                                    }
                                ],
                                "reads": [
                                    [
                                        "_authQuotas",
                                        "",
                                        "MappingBase"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_authQuotas",
                                        "",
                                        "MappingBase"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "MappingBase.updateAutoQuota"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "6136c98cbcc71ad0992a735c3c40b88f"
                            }
                        ],
                        "needApprove": [
                            {
                                "visibility": "public",
                                "content": "function needApprove() virtual public pure returns (bool);",
                                "modifiers": [
                                    "virtual",
                                    "pure"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "86922428d8452388913efe588a4b8ce2"
                            }
                        ],
                        "send": [
                            {
                                "visibility": "external",
                                "content": "function send(uint toChainId, address to, uint volume) virtual external payable returns (uint nonce){ return sendFrom(_msgSender(), toChainId, to, volume);}",
                                "modifiers": [
                                    "virtual",
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "toChainId"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "volume"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "nonce"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "MappingBase.sendFrom",
                                        "MappingBase._msgSender"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "d61d5ce36aab8ff7dad1bd609b17ac72"
                            }
                        ],
                        "sendFrom": [
                            {
                                "visibility": "public",
                                "content": "function sendFrom(address from, uint toChainId, address to, uint volume) virtual public payable returns (uint nonce){ _chargeFee(); _sendFrom(from, volume); nonce = sentCount[toChainId][to]++; sent[toChainId][to][nonce] = volume; emit Send(from, toChainId, to, nonce, volume);}",
                                "modifiers": [
                                    "virtual",
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "toChainId"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "volume"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "nonce"
                                    }
                                ],
                                "reads": [
                                    [
                                        "sentCount",
                                        "",
                                        "MappingBase"
                                    ],
                                    [
                                        "sent",
                                        "",
                                        "MappingBase"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "sent",
                                        "",
                                        "MappingBase"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "MappingBase._chargeFee",
                                        "MappingBase._sendFrom"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "e63f12fbc98db3cf71a25552c9a39c4d"
                            }
                        ],
                        "_sendFrom": [
                            {
                                "visibility": "internal",
                                "content": "function _sendFrom(address from, uint volume) virtual internal;",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "volume"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "6c24ca907828d42b3310a141e8c7f849"
                            }
                        ],
                        "receive": [
                            {
                                "visibility": "external",
                                "content": "function receive(uint256 fromChainId, address to, uint256 nonce, uint256 volume, Signature[] memory signatures) virtual external payable{ _chargeFee(); require(received[fromChainId][to][nonce] == 0, 'withdrawn already'); uint N = signatures.length; require(N >= Factory(factory).getConfig(_minSignatures_), 'too few signatures'); for(uint i=0; i<N; i++){ for(uint j=0; j<i; j++) require(signatures[i].signatory != signatures[j].signatory, 'repetitive signatory'); bytes32 structHash = keccak256(abi.encode(RECEIVE_TYPEHASH, fromChainId, to, nonce, volume, signatures[i].signatory)); bytes32 digest = keccak256(abi.encodePacked(\"\\x19\\x01\", _DOMAIN_SEPARATOR, structHash)); address signatory = ecrecover(digest, signatures[i].v, signatures[i].r, signatures[i].s); require(signatory != address(0), \"invalid signature\"); require(signatory == signatures[i].signatory, \"unauthorized\"); _decreaseAuthQuota(signatures[i].signatory, volume); emit Authorize(fromChainId, to, nonce, volume, signatory);} received[fromChainId][to][nonce] = volume; _receive(to, volume); emit Receive(fromChainId, to, nonce, volume);}",
                                "modifiers": [
                                    "virtual",
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "fromChainId"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "nonce"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "volume"
                                    },
                                    {
                                        "type": "Signature[] memory",
                                        "name": "signatures"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_minSignatures_",
                                        "",
                                        "Constants"
                                    ],
                                    [
                                        "RECEIVE_TYPEHASH",
                                        "",
                                        "MappingBase"
                                    ],
                                    [
                                        "_DOMAIN_SEPARATOR",
                                        "",
                                        "MappingBase"
                                    ],
                                    [
                                        "factory",
                                        "",
                                        "MappingBase"
                                    ],
                                    [
                                        "received",
                                        "",
                                        "MappingBase"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "received",
                                        "",
                                        "MappingBase"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "MappingBase._chargeFee",
                                        "MappingBase._receive",
                                        "MappingBase._decreaseAuthQuota"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "216ea009622fb7039aaedaf6f177ac20"
                            }
                        ],
                        "_receive": [
                            {
                                "visibility": "internal",
                                "content": "function _receive(address to, uint256 volume) virtual internal;",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "volume"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "8e41fe4e1716a1f2300afb8990bd3424"
                            }
                        ],
                        "_chargeFee": [
                            {
                                "visibility": "internal",
                                "content": "function _chargeFee() virtual internal{ require(msg.value >= Math.min(Factory(factory).getConfig(_fee_), 0.1 ether), 'fee is too low'); address payable feeTo = address(Factory(factory).getConfig(_feeTo_)); if(feeTo == address(0)) feeTo = address(uint160(factory)); feeTo.transfer(msg.value); emit ChargeFee(_msgSender(), feeTo, msg.value);}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [
                                    [
                                        "_fee_",
                                        "",
                                        "Constants"
                                    ],
                                    [
                                        "_feeTo_",
                                        "",
                                        "Constants"
                                    ],
                                    [
                                        "factory",
                                        "",
                                        "MappingBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Math.min",
                                        "MappingBase._msgSender",
                                        "feeTo.transfer"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "32c18416db20b37b649c2d92110fddec"
                            }
                        ]
                    },
                    "modifiers": {
                        "updateAutoQuota": {
                            "parameters": [
                                {
                                    "type": "address",
                                    "name": "signatory"
                                }
                            ],
                            "content": "modifier updateAutoQuota(address signatory) virtual{ uint quota = authQuotaOf(signatory); if(_authQuotas[signatory] != quota){ _authQuotas[signatory] = quota; lasttimeUpdateQuotaOf[signatory] = now;} _;}",
                            "reads": [
                                [
                                    "_authQuotas",
                                    "",
                                    "MappingBase"
                                ],
                                [
                                    "lasttimeUpdateQuotaOf",
                                    "",
                                    "MappingBase"
                                ]
                            ],
                            "writes": [
                                [
                                    "_authQuotas",
                                    "",
                                    "MappingBase"
                                ],
                                [
                                    "lasttimeUpdateQuotaOf",
                                    "",
                                    "MappingBase"
                                ]
                            ],
                            "external_calls": {
                                "__set__": true,
                                "values": [
                                    "MappingBase.authQuotaOf"
                                ]
                            },
                            "md5": "28323e3f6201dca2a4f63ab5c97a37e3"
                        }
                    },
                    "structs": {},
                    "events": {
                        "IncreaseAuthQuota": {
                            "event": "IncreaseAuthQuota",
                            "content": "IncreaseAuthQuota(address indexed signatory, uint increment, uint quota)"
                        },
                        "DecreaseAuthQuota": {
                            "event": "DecreaseAuthQuota",
                            "content": "DecreaseAuthQuota(address indexed signatory, uint decrement, uint quota)"
                        },
                        "Send": {
                            "event": "Send",
                            "content": "Send(address indexed from, uint indexed toChainId, address indexed to, uint nonce, uint volume)"
                        },
                        "Receive": {
                            "event": "Receive",
                            "content": "Receive(uint256 indexed fromChainId, address indexed to, uint256 indexed nonce, uint256 volume)"
                        },
                        "Authorize": {
                            "event": "Authorize",
                            "content": "Authorize(uint256 fromChainId, address indexed to, uint256 indexed nonce, uint256 volume, address indexed signatory)"
                        },
                        "ChargeFee": {
                            "event": "ChargeFee",
                            "content": "ChargeFee(address indexed from, address indexed to, uint value)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "uint": "SafeMath"
                    }
                },
                "TokenMapped": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "MappingBase"
                    ],
                    "state_variables": {
                        "__gap": {
                            "type": "uint256[50]",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256[50] private __gap;"
                        }
                    },
                    "functions": {
                        "__TokenMapped_init": [
                            {
                                "visibility": "external",
                                "content": "function __TokenMapped_init(address factory_, address token_) external initializer{ __Context_init_unchained(); __TokenMapped_init_unchained(factory_, token_);}",
                                "modifiers": [
                                    "initializer"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "factory_"
                                    },
                                    {
                                        "type": "address",
                                        "name": "token_"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ContextUpgradeSafe.__Context_init_unchained",
                                        "Initializable.initializer",
                                        "TokenMapped.__TokenMapped_init_unchained"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "5fb87c3de2be864fd9c3931e1d82a33d"
                            }
                        ],
                        "__TokenMapped_init_unchained": [
                            {
                                "visibility": "public",
                                "content": "function __TokenMapped_init_unchained(address factory_, address token_) public initializer{ factory = factory_; mainChainId = _chainId(); token = token_; deployer = address(0); _DOMAIN_SEPARATOR = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(ERC20UpgradeSafe(token).name())), _chainId(), address(this)));}",
                                "modifiers": [
                                    "initializer"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "factory_"
                                    },
                                    {
                                        "type": "address",
                                        "name": "token_"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "DOMAIN_TYPEHASH",
                                        "",
                                        "MappingBase"
                                    ],
                                    [
                                        "_DOMAIN_SEPARATOR",
                                        "",
                                        "MappingBase"
                                    ],
                                    [
                                        "factory",
                                        "",
                                        "MappingBase"
                                    ],
                                    [
                                        "mainChainId",
                                        "",
                                        "MappingBase"
                                    ],
                                    [
                                        "token",
                                        "",
                                        "MappingBase"
                                    ],
                                    [
                                        "deployer",
                                        "",
                                        "MappingBase"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_DOMAIN_SEPARATOR",
                                        "",
                                        "MappingBase"
                                    ],
                                    [
                                        "factory",
                                        "",
                                        "MappingBase"
                                    ],
                                    [
                                        "mainChainId",
                                        "",
                                        "MappingBase"
                                    ],
                                    [
                                        "token",
                                        "",
                                        "MappingBase"
                                    ],
                                    [
                                        "deployer",
                                        "",
                                        "MappingBase"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Initializable.initializer",
                                        "TokenMapped._chainId"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "8c2bce4c179598901337a222feb5b31d"
                            }
                        ],
                        "cap": [
                            {
                                "visibility": "public",
                                "content": "function cap() virtual override public view returns (uint){ return IERC20(token).totalSupply();}",
                                "modifiers": [
                                    "virtual",
                                    "override",
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "token",
                                        "",
                                        "MappingBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "45564361f73a1fffe1f8362ee20b0c87"
                            }
                        ],
                        "totalMapped": [
                            {
                                "visibility": "public",
                                "content": "function totalMapped() virtual public view returns (uint){ return IERC20(token).balanceOf(address(this));}",
                                "modifiers": [
                                    "virtual",
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "token",
                                        "",
                                        "MappingBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "2c95c2632569b241a81417c214ad2624"
                            }
                        ],
                        "needApprove": [
                            {
                                "visibility": "public",
                                "content": "function needApprove() virtual override public pure returns (bool){ return true;}",
                                "modifiers": [
                                    "virtual",
                                    "override",
                                    "pure"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "0be4ebdd58ca66c94625f5ab7b4b9cdc"
                            }
                        ],
                        "_sendFrom": [
                            {
                                "visibility": "internal",
                                "content": "function _sendFrom(address from, uint volume) virtual override internal{ IERC20(token).safeTransferFrom(from, address(this), volume);}",
                                "modifiers": [
                                    "virtual",
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "volume"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "token",
                                        "",
                                        "MappingBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "bf15ef5e8cd5a8fed62fd91684daada9"
                            }
                        ],
                        "_receive": [
                            {
                                "visibility": "internal",
                                "content": "function _receive(address to, uint256 volume) virtual override internal{ IERC20(token).safeTransfer(to, volume);}",
                                "modifiers": [
                                    "virtual",
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "volume"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "token",
                                        "",
                                        "MappingBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "465375fba32b24d2f5a6f4aaf4cdd644"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "IERC20": "SafeERC20"
                    }
                },
                "Permit": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": true,
                    "inherits": [],
                    "state_variables": {
                        "PERMIT_TYPEHASH": {
                            "type": "bytes32",
                            "visibility": "public",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9",
                            "content": "bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;"
                        },
                        "nonces": {
                            "type": "mapping (address => uint)",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping (address => uint) public nonces;"
                        },
                        "__gap": {
                            "type": "uint256[50]",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256[50] private __gap;"
                        }
                    },
                    "functions": {
                        "DOMAIN_SEPARATOR": [
                            {
                                "visibility": "public",
                                "content": "function DOMAIN_SEPARATOR() virtual public view returns (bytes32);",
                                "modifiers": [
                                    "virtual",
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "2ad13f2c1ff06f2215a947a59288ab55"
                            }
                        ],
                        "permit": [
                            {
                                "visibility": "external",
                                "content": "function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external{ require(deadline >= block.timestamp, 'permit EXPIRED'); bytes32 digest = keccak256( abi.encodePacked( '\\x19\\x01', DOMAIN_SEPARATOR(), keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline)) ) ); address recoveredAddress = ecrecover(digest, v, r, s); require(recoveredAddress != address(0) && recoveredAddress == owner, 'permit INVALID_SIGNATURE'); _approve(owner, spender, value);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "owner"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "value"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "deadline"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "v"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "r"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "s"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "PERMIT_TYPEHASH",
                                        "",
                                        "Permit"
                                    ],
                                    [
                                        "nonces",
                                        "",
                                        "Permit"
                                    ],
                                    [
                                        "DOMAIN_SEPARATOR",
                                        "",
                                        "Factory"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Permit._approve",
                                        "Permit.DOMAIN_SEPARATOR"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "83eb448c410a04a26542faebce5d9451"
                            }
                        ],
                        "_approve": [
                            {
                                "visibility": "internal",
                                "content": "function _approve(address owner, address spender, uint256 amount) internal virtual;",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "owner"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "1fe0143db486b52d2b460a438477c91f"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "MappableToken": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "Permit",
                        "ERC20UpgradeSafe",
                        "MappingBase"
                    ],
                    "state_variables": {
                        "__gap": {
                            "type": "uint256[50]",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256[50] private __gap;"
                        }
                    },
                    "functions": {
                        "__MappableToken_init": [
                            {
                                "visibility": "external",
                                "content": "function __MappableToken_init(address factory_, address deployer_, string memory name_, string memory symbol_, uint8 decimals_, uint256 totalSupply_) external initializer{ __Context_init_unchained(); __ERC20_init_unchained(name_, symbol_); _setupDecimals(decimals_); _mint(deployer_, totalSupply_); __MappableToken_init_unchained(factory_, deployer_);}",
                                "modifiers": [
                                    "initializer"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "factory_"
                                    },
                                    {
                                        "type": "address",
                                        "name": "deployer_"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "name_"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "symbol_"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "decimals_"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "totalSupply_"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ERC20UpgradeSafe._mint",
                                        "ContextUpgradeSafe.__Context_init_unchained",
                                        "MappableToken.__MappableToken_init_unchained",
                                        "ERC20UpgradeSafe.__ERC20_init_unchained",
                                        "Initializable.initializer",
                                        "MappableToken._setupDecimals"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "ba860f4e076e19159a0332a151115787"
                            }
                        ],
                        "__MappableToken_init_unchained": [
                            {
                                "visibility": "public",
                                "content": "function __MappableToken_init_unchained(address factory_, address deployer_) public initializer{ factory = factory_; mainChainId = _chainId(); token = address(0); deployer = deployer_; _DOMAIN_SEPARATOR = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name())), _chainId(), address(this)));}",
                                "modifiers": [
                                    "initializer"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "factory_"
                                    },
                                    {
                                        "type": "address",
                                        "name": "deployer_"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "DOMAIN_TYPEHASH",
                                        "",
                                        "MappingBase"
                                    ],
                                    [
                                        "_DOMAIN_SEPARATOR",
                                        "",
                                        "MappingBase"
                                    ],
                                    [
                                        "factory",
                                        "",
                                        "MappingBase"
                                    ],
                                    [
                                        "mainChainId",
                                        "",
                                        "MappingBase"
                                    ],
                                    [
                                        "token",
                                        "",
                                        "MappingBase"
                                    ],
                                    [
                                        "deployer",
                                        "",
                                        "MappingBase"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_DOMAIN_SEPARATOR",
                                        "",
                                        "MappingBase"
                                    ],
                                    [
                                        "factory",
                                        "",
                                        "MappingBase"
                                    ],
                                    [
                                        "mainChainId",
                                        "",
                                        "MappingBase"
                                    ],
                                    [
                                        "token",
                                        "",
                                        "MappingBase"
                                    ],
                                    [
                                        "deployer",
                                        "",
                                        "MappingBase"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Initializable.initializer",
                                        "MappableToken._chainId",
                                        "MappableToken.name"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "a5dd0f66bd60bf7d1284b201f972829a"
                            }
                        ],
                        "DOMAIN_SEPARATOR": [
                            {
                                "visibility": "public",
                                "content": "function DOMAIN_SEPARATOR() virtual override(Permit, MappingBase) public view returns (bytes32){ return MappingBase.DOMAIN_SEPARATOR();}",
                                "modifiers": [
                                    "virtual",
                                    "override(Permit, MappingBase)",
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "DOMAIN_SEPARATOR",
                                        "",
                                        "Factory"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "02d43c192507532d93faa5c5e17ad699"
                            }
                        ],
                        "cap": [
                            {
                                "visibility": "public",
                                "content": "function cap() virtual override public view returns (uint){ return totalSupply();}",
                                "modifiers": [
                                    "virtual",
                                    "override",
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "0bd9801781b87b79768a71c5928e345d"
                            }
                        ],
                        "totalMapped": [
                            {
                                "visibility": "public",
                                "content": "function totalMapped() virtual public view returns (uint){ return balanceOf(address(this));}",
                                "modifiers": [
                                    "virtual",
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "IERC20.balanceOf"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "ed34d5293f99543d4785937f7543a409"
                            }
                        ],
                        "needApprove": [
                            {
                                "visibility": "public",
                                "content": "function needApprove() virtual override public pure returns (bool){ return false;}",
                                "modifiers": [
                                    "virtual",
                                    "override",
                                    "pure"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "2f1bd32cae6680c5d92cf2a50f19d914"
                            }
                        ],
                        "_approve": [
                            {
                                "visibility": "internal",
                                "content": "function _approve(address owner, address spender, uint256 amount) virtual override(Permit, ERC20UpgradeSafe) internal{ return ERC20UpgradeSafe._approve(owner, spender, amount);}",
                                "modifiers": [
                                    "virtual",
                                    "override(Permit, ERC20UpgradeSafe)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "owner"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "14277201f359d85a373f42198d3d66da"
                            }
                        ],
                        "_sendFrom": [
                            {
                                "visibility": "internal",
                                "content": "function _sendFrom(address from, uint volume) virtual override internal{ transferFrom(from, address(this), volume);}",
                                "modifiers": [
                                    "virtual",
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "volume"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "2a71f1565478a06a6636ec300118e99d"
                            }
                        ],
                        "_receive": [
                            {
                                "visibility": "internal",
                                "content": "function _receive(address to, uint256 volume) virtual override internal{ _transfer(address(this), to, volume);}",
                                "modifiers": [
                                    "virtual",
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "volume"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "dafb64a463d4e480cceb073318f43e84"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "MappingToken": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "Permit",
                        "ERC20CappedUpgradeSafe",
                        "MappingBase"
                    ],
                    "state_variables": {
                        "__gap": {
                            "type": "uint256[50]",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256[50] private __gap;"
                        }
                    },
                    "functions": {
                        "__MappingToken_init": [
                            {
                                "visibility": "external",
                                "content": "function __MappingToken_init(address factory_, uint mainChainId_, address token_, address deployer_, string memory name_, string memory symbol_, uint8 decimals_, uint cap_) external initializer{ __Context_init_unchained(); __ERC20_init_unchained(name_, symbol_); _setupDecimals(decimals_); __ERC20Capped_init_unchained(cap_); __MappingToken_init_unchained(factory_, mainChainId_, token_, deployer_);}",
                                "modifiers": [
                                    "initializer"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "factory_"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "mainChainId_"
                                    },
                                    {
                                        "type": "address",
                                        "name": "token_"
                                    },
                                    {
                                        "type": "address",
                                        "name": "deployer_"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "name_"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "symbol_"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "decimals_"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "cap_"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "MappingToken._setupDecimals",
                                        "MappingToken.__MappingToken_init_unchained",
                                        "ContextUpgradeSafe.__Context_init_unchained",
                                        "ERC20UpgradeSafe.__ERC20_init_unchained",
                                        "Initializable.initializer",
                                        "ERC20CappedUpgradeSafe.__ERC20Capped_init_unchained"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "db857a6cf2e05adbd3d68b5e38d6f303"
                            }
                        ],
                        "__MappingToken_init_unchained": [
                            {
                                "visibility": "public",
                                "content": "function __MappingToken_init_unchained(address factory_, uint mainChainId_, address token_, address deployer_) public initializer{ factory = factory_; mainChainId = mainChainId_; token = token_; deployer = (token_ == address(0)) ? deployer_ : address(0); _DOMAIN_SEPARATOR = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name())), _chainId(), address(this)));}",
                                "modifiers": [
                                    "initializer"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "factory_"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "mainChainId_"
                                    },
                                    {
                                        "type": "address",
                                        "name": "token_"
                                    },
                                    {
                                        "type": "address",
                                        "name": "deployer_"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "DOMAIN_TYPEHASH",
                                        "",
                                        "MappingBase"
                                    ],
                                    [
                                        "_DOMAIN_SEPARATOR",
                                        "",
                                        "MappingBase"
                                    ],
                                    [
                                        "factory",
                                        "",
                                        "MappingBase"
                                    ],
                                    [
                                        "mainChainId",
                                        "",
                                        "MappingBase"
                                    ],
                                    [
                                        "token",
                                        "",
                                        "MappingBase"
                                    ],
                                    [
                                        "deployer",
                                        "",
                                        "MappingBase"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_DOMAIN_SEPARATOR",
                                        "",
                                        "MappingBase"
                                    ],
                                    [
                                        "factory",
                                        "",
                                        "MappingBase"
                                    ],
                                    [
                                        "mainChainId",
                                        "",
                                        "MappingBase"
                                    ],
                                    [
                                        "token",
                                        "",
                                        "MappingBase"
                                    ],
                                    [
                                        "deployer",
                                        "",
                                        "MappingBase"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "MappingToken.name",
                                        "Initializable.initializer",
                                        "MappingToken._chainId"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "80fb68a7c6cb54839aa2fc9134b8620d"
                            }
                        ],
                        "DOMAIN_SEPARATOR": [
                            {
                                "visibility": "public",
                                "content": "function DOMAIN_SEPARATOR() virtual override(Permit, MappingBase) public view returns (bytes32){ return MappingBase.DOMAIN_SEPARATOR();}",
                                "modifiers": [
                                    "virtual",
                                    "override(Permit, MappingBase)",
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "DOMAIN_SEPARATOR",
                                        "",
                                        "Factory"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "02d43c192507532d93faa5c5e17ad699"
                            }
                        ],
                        "cap": [
                            {
                                "visibility": "public",
                                "content": "function cap() virtual override(ERC20CappedUpgradeSafe, MappingBase) public view returns (uint){ return ERC20CappedUpgradeSafe.cap();}",
                                "modifiers": [
                                    "virtual",
                                    "override(ERC20CappedUpgradeSafe, MappingBase)",
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "42bec4f17d5c412e25f980721d013ab9"
                            }
                        ],
                        "needApprove": [
                            {
                                "visibility": "public",
                                "content": "function needApprove() virtual override public pure returns (bool){ return false;}",
                                "modifiers": [
                                    "virtual",
                                    "override",
                                    "pure"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "2f1bd32cae6680c5d92cf2a50f19d914"
                            }
                        ],
                        "_approve": [
                            {
                                "visibility": "internal",
                                "content": "function _approve(address owner, address spender, uint256 amount) virtual override(Permit, ERC20UpgradeSafe) internal{ return ERC20UpgradeSafe._approve(owner, spender, amount);}",
                                "modifiers": [
                                    "virtual",
                                    "override(Permit, ERC20UpgradeSafe)"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "owner"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "14277201f359d85a373f42198d3d66da"
                            }
                        ],
                        "_sendFrom": [
                            {
                                "visibility": "internal",
                                "content": "function _sendFrom(address from, uint volume) virtual override internal{ _burn(from, volume); if(from != _msgSender() && allowance(from, _msgSender()) != uint(-1)) _approve(from, _msgSender(), allowance(from, _msgSender()).sub(volume, \"ERC20: transfer volume exceeds allowance\"));}",
                                "modifiers": [
                                    "virtual",
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "volume"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "672db7875d20c75ed9aeb84a1c9e0f38"
                            }
                        ],
                        "_receive": [
                            {
                                "visibility": "internal",
                                "content": "function _receive(address to, uint256 volume) virtual override internal{ _mint(to, volume);}",
                                "modifiers": [
                                    "virtual",
                                    "override"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "volume"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "de12a753e820af72755a75e812cc8172"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "MappingTokenProxy": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "ProductProxy",
                        "Constants"
                    ],
                    "state_variables": {},
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (address factory_, uint mainChainId_, address token_, address deployer_, string memory name_, string memory symbol_, uint8 decimals_, uint cap_) public{ assert(FACTORY_SLOT == bytes32(uint256(keccak256('eip1967.proxy.factory')) - 1)); assert(NAME_SLOT == bytes32(uint256(keccak256('eip1967.proxy.name')) - 1)); _setFactory(factory_); _setName(_MappingToken_); (bool success, ) = _implementation().delegatecall(abi.encodeWithSignature('__MappingToken_init(address, uint256, address, address, string, string, uint8, uint256)', factory_, mainChainId_, token_, deployer_, name_, symbol_, decimals_, cap_)); require(success);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "factory_"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "mainChainId_"
                                    },
                                    {
                                        "type": "address",
                                        "name": "token_"
                                    },
                                    {
                                        "type": "address",
                                        "name": "deployer_"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "name_"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "symbol_"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "decimals_"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "cap_"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "FACTORY_SLOT",
                                        "",
                                        "ProductProxy"
                                    ],
                                    [
                                        "NAME_SLOT",
                                        "",
                                        "ProductProxy"
                                    ],
                                    [
                                        "_MappingToken_",
                                        "",
                                        "Constants"
                                    ],
                                    [
                                        "factory",
                                        "",
                                        "MappingBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "6e1574fc066f159bafc294a9754c3ed8"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                },
                "Factory": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "ContextUpgradeSafe",
                        "Configurable",
                        "Constants"
                    ],
                    "state_variables": {
                        "REGISTER_TYPEHASH": {
                            "type": "bytes32",
                            "visibility": "public",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "keccak256(\"RegisterMapping(uint mainChainId, address token, uint[] chainIds, address[] mappingTokenMappeds, address signatory)\")",
                            "content": "bytes32 public constant REGISTER_TYPEHASH = keccak256(\"RegisterMapping(uint mainChainId, address token, uint[] chainIds, address[] mappingTokenMappeds, address signatory)\");"
                        },
                        "CREATE_TYPEHASH": {
                            "type": "bytes32",
                            "visibility": "public",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "keccak256(\"CreateMappingToken(address deployer, uint mainChainId, address token, string name, string symbol, uint8 decimals, uint cap, address signatory)\")",
                            "content": "bytes32 public constant CREATE_TYPEHASH = keccak256(\"CreateMappingToken(address deployer, uint mainChainId, address token, string name, string symbol, uint8 decimals, uint cap, address signatory)\");"
                        },
                        "DOMAIN_TYPEHASH": {
                            "type": "bytes32",
                            "visibility": "public",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "keccak256(\"EIP712Domain(string name, uint256 chainId, address verifyingContract)\")",
                            "content": "bytes32 public constant DOMAIN_TYPEHASH = keccak256(\"EIP712Domain(string name, uint256 chainId, address verifyingContract)\");"
                        },
                        "DOMAIN_SEPARATOR": {
                            "type": "bytes32",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "bytes32 public DOMAIN_SEPARATOR;"
                        },
                        "productImplementations": {
                            "type": "mapping (bytes32 => address)",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping (bytes32 => address) public productImplementations;"
                        },
                        "tokenMappeds": {
                            "type": "mapping (address => address)",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping (address => address) public tokenMappeds;"
                        },
                        "mappableTokens": {
                            "type": "mapping (address => address)",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping (address => address) public mappableTokens;"
                        },
                        "mappingTokens": {
                            "type": "mapping (uint256 => mapping (address => address))",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping (uint256 => mapping (address => address)) public mappingTokens;"
                        },
                        "authorties": {
                            "type": "mapping (address => bool)",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping (address => bool) public authorties;"
                        },
                        "authCountOf": {
                            "type": "mapping (address => uint)",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping (address => uint) public authCountOf;"
                        },
                        "_mainChainIdTokens": {
                            "type": "mapping (address => uint256)",
                            "visibility": "internal",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping (address => uint256) internal _mainChainIdTokens;"
                        },
                        "mappingTokenMappeds": {
                            "type": "mapping (address => mapping (uint => address))",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping (address => mapping (uint => address)) public mappingTokenMappeds;"
                        },
                        "supportChainIds": {
                            "type": "uint[]",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint[] public supportChainIds;"
                        },
                        "_certifiedTokens": {
                            "type": "mapping (string => uint256)",
                            "visibility": "internal",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping (string => uint256) internal _certifiedTokens;"
                        },
                        "certifiedSymbols": {
                            "type": "string[]",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "string[] public certifiedSymbols;"
                        },
                        "signatories": {
                            "type": "address[]",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address[] public signatories;"
                        },
                        "__gap": {
                            "type": "uint256[49]",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256[49] private __gap;"
                        }
                    },
                    "functions": {
                        "__MappingTokenFactory_init": [
                            {
                                "visibility": "external",
                                "content": "function __MappingTokenFactory_init(address _governor, address _implTokenMapped, address _implMappableToken, address _implMappingToken, address _feeTo) external initializer{ __Governable_init_unchained(_governor); __MappingTokenFactory_init_unchained(_implTokenMapped, _implMappableToken, _implMappingToken, _feeTo);}",
                                "modifiers": [
                                    "initializer"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_governor"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_implTokenMapped"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_implMappableToken"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_implMappingToken"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_feeTo"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Governable.__Governable_init_unchained",
                                        "Factory.__MappingTokenFactory_init_unchained",
                                        "Initializable.initializer"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "34a06579c1a518bc1adbecc49c4a22d2"
                            }
                        ],
                        "__MappingTokenFactory_init_unchained": [
                            {
                                "visibility": "public",
                                "content": "function __MappingTokenFactory_init_unchained(address _implTokenMapped, address _implMappableToken, address _implMappingToken, address _feeTo) public governance{ config[_fee_] = 0.005 ether; config[_feeCreate_] = 0.100 ether; config[_feeRegister_] = 0.200 ether; config[_feeTo_] = uint(_feeTo); config[_onlyDeployer_] = 1; config[_minSignatures_] = 3; config[_initQuotaRatio_] = 0.100 ether; config[_autoQuotaRatio_] = 0.010 ether; config[_autoQuotaPeriod_] = 1 days; DOMAIN_SEPARATOR = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes('MappingTokenFactory')), _chainId(), address(this))); upgradeProductImplementationsTo_(_implTokenMapped, _implMappableToken, _implMappingToken); emit ProductProxyCodeHash(keccak256( type (InitializableProductProxy).creationCode));}",
                                "modifiers": [
                                    "governance"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_implTokenMapped"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_implMappableToken"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_implMappingToken"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_feeTo"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "config",
                                        "",
                                        "ConfigurableBase"
                                    ],
                                    [
                                        "_fee_",
                                        "",
                                        "Constants"
                                    ],
                                    [
                                        "_feeCreate_",
                                        "",
                                        "Constants"
                                    ],
                                    [
                                        "_feeRegister_",
                                        "",
                                        "Constants"
                                    ],
                                    [
                                        "_feeTo_",
                                        "",
                                        "Constants"
                                    ],
                                    [
                                        "_onlyDeployer_",
                                        "",
                                        "Constants"
                                    ],
                                    [
                                        "_minSignatures_",
                                        "",
                                        "Constants"
                                    ],
                                    [
                                        "_initQuotaRatio_",
                                        "",
                                        "Constants"
                                    ],
                                    [
                                        "_autoQuotaRatio_",
                                        "",
                                        "Constants"
                                    ],
                                    [
                                        "_autoQuotaPeriod_",
                                        "",
                                        "Constants"
                                    ],
                                    [
                                        "DOMAIN_TYPEHASH",
                                        "",
                                        "MappingBase"
                                    ],
                                    [
                                        "DOMAIN_SEPARATOR",
                                        "",
                                        "Factory"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "config",
                                        "",
                                        "ConfigurableBase"
                                    ],
                                    [
                                        "DOMAIN_SEPARATOR",
                                        "",
                                        "Factory"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Factory.type",
                                        "Factory.upgradeProductImplementationsTo_",
                                        "Governable.governance",
                                        "Factory._chainId"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "9146e6431ded603e0cfdc645febbd8af"
                            }
                        ],
                        "upgradeProductImplementationsTo_": [
                            {
                                "visibility": "public",
                                "content": "function upgradeProductImplementationsTo_(address _implTokenMapped, address _implMappableToken, address _implMappingToken) public governance{ productImplementations[_TokenMapped_] = _implTokenMapped; productImplementations[_MappableToken_] = _implMappableToken; productImplementations[_MappingToken_] = _implMappingToken;}",
                                "modifiers": [
                                    "governance"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_implTokenMapped"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_implMappableToken"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_implMappingToken"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_TokenMapped_",
                                        "",
                                        "Constants"
                                    ],
                                    [
                                        "_MappableToken_",
                                        "",
                                        "Constants"
                                    ],
                                    [
                                        "_MappingToken_",
                                        "",
                                        "Constants"
                                    ],
                                    [
                                        "productImplementations",
                                        "",
                                        "Factory"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "productImplementations",
                                        "",
                                        "Factory"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Governable.governance"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "9f9979de012e5bc2fbe9b35aa7dc071b"
                            }
                        ],
                        "setSignatories": [
                            {
                                "visibility": "external",
                                "content": "function setSignatories(address[] calldata signatories_) virtual external governance{ signatories = signatories_; emit SetSignatories(signatories_);}",
                                "modifiers": [
                                    "virtual",
                                    "governance"
                                ],
                                "parameters": [
                                    {
                                        "type": "address[] calldata",
                                        "name": "signatories_"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "signatories",
                                        "",
                                        "Factory"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "signatories",
                                        "",
                                        "Factory"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Governable.governance"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "8fabd3868f8765847194be654bcde354"
                            }
                        ],
                        "setAuthorty_": [
                            {
                                "visibility": "external",
                                "content": "function setAuthorty_(address authorty, bool enable) virtual external governance{ authorties[authorty] = enable; emit SetAuthorty(authorty, enable);}",
                                "modifiers": [
                                    "virtual",
                                    "governance"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "authorty"
                                    },
                                    {
                                        "type": "bool",
                                        "name": "enable"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "authorties",
                                        "",
                                        "Factory"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "authorties",
                                        "",
                                        "Factory"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Governable.governance"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "cafe54e13f9bcc022209d2eb0f2c814c"
                            }
                        ],
                        "setAutoQuota": [
                            {
                                "visibility": "external",
                                "content": "function setAutoQuota(address mappingTokenMapped, uint ratio, uint period) virtual external governance{ if(mappingTokenMapped == address(0)){ config[_autoQuotaRatio_] = ratio; config[_autoQuotaPeriod_] = period;} else MappingBase(mappingTokenMapped).setAutoQuota(ratio, period);}",
                                "modifiers": [
                                    "virtual",
                                    "governance"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "mappingTokenMapped"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "ratio"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "period"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "config",
                                        "",
                                        "ConfigurableBase"
                                    ],
                                    [
                                        "_autoQuotaRatio_",
                                        "",
                                        "Constants"
                                    ],
                                    [
                                        "_autoQuotaPeriod_",
                                        "",
                                        "Constants"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "config",
                                        "",
                                        "ConfigurableBase"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Governable.governance"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "daefd1ea4a70745cb38ea06a5dcdfc05"
                            }
                        ],
                        "_initAuthQuotas": [
                            {
                                "visibility": "internal",
                                "content": "function _initAuthQuotas(address mappingTokenMapped, uint cap) internal{ uint quota = cap.mul(config[_initQuotaRatio_]).div(1e18); uint[] memory quotas = new uint[](signatories.length); for(uint i=0; i<quotas.length; i++) quotas[i] = quota; _increaseAuthQuotas(mappingTokenMapped, signatories, quotas);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "mappingTokenMapped"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "cap"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "config",
                                        "",
                                        "ConfigurableBase"
                                    ],
                                    [
                                        "_initQuotaRatio_",
                                        "",
                                        "Constants"
                                    ],
                                    [
                                        "signatories",
                                        "",
                                        "Factory"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "cap.mul",
                                        "Factory._increaseAuthQuotas"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "d82795965168b5c3e635f7bab9e58e78"
                            }
                        ],
                        "_increaseAuthQuotas": [
                            {
                                "visibility": "internal",
                                "content": "function _increaseAuthQuotas(address mappingTokenMapped, address[] memory signatories_, uint[] memory increments) virtual internal returns (uint[] memory quotas){ quotas = MappingBase(mappingTokenMapped).increaseAuthQuotas(signatories_, increments); for(uint i=0; i<signatories_.length; i++) emit IncreaseAuthQuota(_msgSender(), mappingTokenMapped, signatories_[i], increments[i], quotas[i]);}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "mappingTokenMapped"
                                    },
                                    {
                                        "type": "address[] memory",
                                        "name": "signatories_"
                                    },
                                    {
                                        "type": "uint[] memory",
                                        "name": "increments"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint[] memory",
                                        "name": "quotas"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Factory._msgSender"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "a12da5294bdc24f1810427fc18023481"
                            }
                        ],
                        "increaseAuthQuotas_": [
                            {
                                "visibility": "external",
                                "content": "function increaseAuthQuotas_(address mappingTokenMapped, uint[] memory increments) virtual external onlyAuthorty returns (uint[] memory quotas){ return _increaseAuthQuotas(mappingTokenMapped, signatories, increments);}",
                                "modifiers": [
                                    "virtual",
                                    "onlyAuthorty"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "mappingTokenMapped"
                                    },
                                    {
                                        "type": "uint[] memory",
                                        "name": "increments"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint[] memory",
                                        "name": "quotas"
                                    }
                                ],
                                "reads": [
                                    [
                                        "signatories",
                                        "",
                                        "Factory"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Factory._increaseAuthQuotas",
                                        "Factory.onlyAuthorty"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "315a30d60a72509c0376e97427018a01"
                            }
                        ],
                        "increaseAuthQuotas": [
                            {
                                "visibility": "external",
                                "content": "function increaseAuthQuotas(address mappingTokenMapped, address[] memory signatories_, uint[] memory increments) virtual external onlyAuthorty returns (uint[] memory quotas){ return _increaseAuthQuotas(mappingTokenMapped, signatories_, increments);}",
                                "modifiers": [
                                    "virtual",
                                    "onlyAuthorty"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "mappingTokenMapped"
                                    },
                                    {
                                        "type": "address[] memory",
                                        "name": "signatories_"
                                    },
                                    {
                                        "type": "uint[] memory",
                                        "name": "increments"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint[] memory",
                                        "name": "quotas"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Factory._increaseAuthQuotas",
                                        "Factory.onlyAuthorty"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "9d7e0c2f5056e085a75937ad1ce66f63"
                            }
                        ],
                        "increaseAuthQuota": [
                            {
                                "visibility": "external",
                                "content": "function increaseAuthQuota(address mappingTokenMapped, address signatory, uint increment) virtual external onlyAuthorty returns (uint quota){ quota = MappingBase(mappingTokenMapped).increaseAuthQuota(signatory, increment); emit IncreaseAuthQuota(_msgSender(), mappingTokenMapped, signatory, increment, quota);}",
                                "modifiers": [
                                    "virtual",
                                    "onlyAuthorty"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "mappingTokenMapped"
                                    },
                                    {
                                        "type": "address",
                                        "name": "signatory"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "increment"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "quota"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Factory._msgSender",
                                        "Factory.onlyAuthorty"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "f9730ad716dc75111c05e0b4e0291501"
                            }
                        ],
                        "decreaseAuthQuotas_": [
                            {
                                "visibility": "external",
                                "content": "function decreaseAuthQuotas_(address mappingTokenMapped, uint[] memory decrements) virtual external returns (uint[] memory quotas){ return decreaseAuthQuotas(mappingTokenMapped, signatories, decrements);}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "mappingTokenMapped"
                                    },
                                    {
                                        "type": "uint[] memory",
                                        "name": "decrements"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint[] memory",
                                        "name": "quotas"
                                    }
                                ],
                                "reads": [
                                    [
                                        "signatories",
                                        "",
                                        "Factory"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Factory.decreaseAuthQuotas"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "f71f58882a95a8d3add42fa5badcc3fa"
                            }
                        ],
                        "decreaseAuthQuotas": [
                            {
                                "visibility": "public",
                                "content": "function decreaseAuthQuotas(address mappingTokenMapped, address[] memory signatories_, uint[] memory decrements) virtual public onlyAuthorty returns (uint[] memory quotas){ quotas = MappingBase(mappingTokenMapped).decreaseAuthQuotas(signatories_, decrements); for(uint i=0; i<signatories_.length; i++) emit DecreaseAuthQuota(_msgSender(), mappingTokenMapped, signatories_[i], decrements[i], quotas[i]);}",
                                "modifiers": [
                                    "virtual",
                                    "onlyAuthorty"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "mappingTokenMapped"
                                    },
                                    {
                                        "type": "address[] memory",
                                        "name": "signatories_"
                                    },
                                    {
                                        "type": "uint[] memory",
                                        "name": "decrements"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint[] memory",
                                        "name": "quotas"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Factory._msgSender",
                                        "Factory.onlyAuthorty"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "d28c0b9784ea939e38fd5b2b99ea6c64"
                            }
                        ],
                        "decreaseAuthQuota": [
                            {
                                "visibility": "external",
                                "content": "function decreaseAuthQuota(address mappingTokenMapped, address signatory, uint decrement) virtual external onlyAuthorty returns (uint quota){ quota = MappingBase(mappingTokenMapped).decreaseAuthQuota(signatory, decrement); emit DecreaseAuthQuota(_msgSender(), mappingTokenMapped, signatory, decrement, quota);}",
                                "modifiers": [
                                    "virtual",
                                    "onlyAuthorty"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "mappingTokenMapped"
                                    },
                                    {
                                        "type": "address",
                                        "name": "signatory"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "decrement"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "quota"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Factory._msgSender",
                                        "Factory.onlyAuthorty"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "90e764dab316e90112523146d366a682"
                            }
                        ],
                        "increaseAuthCounts_": [
                            {
                                "visibility": "external",
                                "content": "function increaseAuthCounts_(uint[] memory increments) virtual external returns (uint[] memory counts){ return increaseAuthCounts(signatories, increments);}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint[] memory",
                                        "name": "increments"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint[] memory",
                                        "name": "counts"
                                    }
                                ],
                                "reads": [
                                    [
                                        "signatories",
                                        "",
                                        "Factory"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Factory.increaseAuthCounts"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "4c84e7d2ead6cad5cfb1ce2a63254932"
                            }
                        ],
                        "increaseAuthCounts": [
                            {
                                "visibility": "public",
                                "content": "function increaseAuthCounts(address[] memory signatories_, uint[] memory increments) virtual public returns (uint[] memory counts){ require(signatories_.length == increments.length, 'two array lenth not equal'); counts = new uint[](signatories_.length); for(uint i=0; i<signatories_.length; i++) counts[i] = increaseAuthCount(signatories_[i], increments[i]);}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "address[] memory",
                                        "name": "signatories_"
                                    },
                                    {
                                        "type": "uint[] memory",
                                        "name": "increments"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint[] memory",
                                        "name": "counts"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Factory.increaseAuthCount"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "56f3c2f9628dc92897fef99af379d4a8"
                            }
                        ],
                        "increaseAuthCount": [
                            {
                                "visibility": "public",
                                "content": "function increaseAuthCount(address signatory, uint increment) virtual public onlyAuthorty returns (uint count){ count = authCountOf[signatory].add(increment); authCountOf[signatory] = count; emit IncreaseAuthQuota(_msgSender(), signatory, increment, count);}",
                                "modifiers": [
                                    "virtual",
                                    "onlyAuthorty"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "signatory"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "increment"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "count"
                                    }
                                ],
                                "reads": [
                                    [
                                        "authCountOf",
                                        "",
                                        "Factory"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "authCountOf",
                                        "",
                                        "Factory"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Factory._msgSender",
                                        "Factory.onlyAuthorty"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "ccdcfbfff15b280819f6ddd956c6f6a1"
                            }
                        ],
                        "decreaseAuthCounts_": [
                            {
                                "visibility": "external",
                                "content": "function decreaseAuthCounts_(uint[] memory decrements) virtual external returns (uint[] memory counts){ return decreaseAuthCounts(signatories, decrements);}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint[] memory",
                                        "name": "decrements"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint[] memory",
                                        "name": "counts"
                                    }
                                ],
                                "reads": [
                                    [
                                        "signatories",
                                        "",
                                        "Factory"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Factory.decreaseAuthCounts"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "675f19b1ed1ac6fb8aa932cb150b66fa"
                            }
                        ],
                        "decreaseAuthCounts": [
                            {
                                "visibility": "public",
                                "content": "function decreaseAuthCounts(address[] memory signatories_, uint[] memory decrements) virtual public returns (uint[] memory counts){ require(signatories_.length == decrements.length, 'two array lenth not equal'); counts = new uint[](signatories_.length); for(uint i=0; i<signatories_.length; i++) counts[i] = decreaseAuthCount(signatories_[i], decrements[i]);}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "address[] memory",
                                        "name": "signatories_"
                                    },
                                    {
                                        "type": "uint[] memory",
                                        "name": "decrements"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint[] memory",
                                        "name": "counts"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Factory.decreaseAuthCount"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "81237327833ec3fafceefb06d46be031"
                            }
                        ],
                        "decreaseAuthCount": [
                            {
                                "visibility": "public",
                                "content": "function decreaseAuthCount(address signatory, uint decrement) virtual public onlyAuthorty returns (uint count){ count = authCountOf[signatory]; if(count < decrement) decrement = count; return _decreaseAuthCount(signatory, decrement);}",
                                "modifiers": [
                                    "virtual",
                                    "onlyAuthorty"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "signatory"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "decrement"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "count"
                                    }
                                ],
                                "reads": [
                                    [
                                        "authCountOf",
                                        "",
                                        "Factory"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Factory._decreaseAuthCount",
                                        "Factory.onlyAuthorty"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "94959713ac981c62fb3e74fc61b462d7"
                            }
                        ],
                        "_decreaseAuthCount": [
                            {
                                "visibility": "internal",
                                "content": "function _decreaseAuthCount(address signatory, uint decrement) virtual internal returns (uint count){ count = authCountOf[signatory].sub(decrement); authCountOf[signatory] = count; emit DecreaseAuthCount(_msgSender(), signatory, decrement, count);}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "signatory"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "decrement"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "count"
                                    }
                                ],
                                "reads": [
                                    [
                                        "authCountOf",
                                        "",
                                        "Factory"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "authCountOf",
                                        "",
                                        "Factory"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Factory._msgSender"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "4748e1fbb8c8d892694d247da8de27c3"
                            }
                        ],
                        "supportChainCount": [
                            {
                                "visibility": "public",
                                "content": "function supportChainCount() public view returns (uint){ return supportChainIds.length;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "supportChainIds",
                                        "",
                                        "Factory"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "613a93c0f39f8c4d6d1000fb9e99cbb9"
                            }
                        ],
                        "mainChainIdTokens": [
                            {
                                "visibility": "public",
                                "content": "function mainChainIdTokens(address mappingToken) virtual public view returns(uint mainChainId, address token){ uint256 chainIdToken = _mainChainIdTokens[mappingToken]; mainChainId = chainIdToken >> 160; token = address(chainIdToken);}",
                                "modifiers": [
                                    "virtual",
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "mappingToken"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "mainChainId"
                                    },
                                    {
                                        "type": "address",
                                        "name": "token"
                                    }
                                ],
                                "reads": [
                                    [
                                        "mainChainId",
                                        "",
                                        "MappingBase"
                                    ],
                                    [
                                        "token",
                                        "",
                                        "MappingBase"
                                    ],
                                    [
                                        "_mainChainIdTokens",
                                        "",
                                        "Factory"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "mainChainId",
                                        "",
                                        "MappingBase"
                                    ],
                                    [
                                        "token",
                                        "",
                                        "MappingBase"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "37ce87bf0975b25e0b22f4663f8f32cd"
                            }
                        ],
                        "chainIdMappingTokenMappeds": [
                            {
                                "visibility": "external",
                                "content": "function chainIdMappingTokenMappeds(address tokenOrMappingToken) virtual external view returns (uint[] memory chainIds, address[] memory mappingTokenMappeds_){ (, address token) = mainChainIdTokens(tokenOrMappingToken); if(token == address(0)) token = tokenOrMappingToken; uint N = 0; for(uint i=0; i<supportChainCount(); i++) if(mappingTokenMappeds[token][supportChainIds[i]] != address(0)) N++; chainIds = new uint[](N); mappingTokenMappeds_ = new address[](N); uint j = 0; for(uint i=0; i<supportChainCount(); i++){ uint chainId = supportChainIds[i]; address mappingTokenMapped = mappingTokenMappeds[token][chainId]; if(mappingTokenMapped != address(0)){ chainIds[j] = chainId; mappingTokenMappeds_[j] = mappingTokenMapped; j++;}}}",
                                "modifiers": [
                                    "virtual",
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "tokenOrMappingToken"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint[] memory",
                                        "name": "chainIds"
                                    },
                                    {
                                        "type": "address[] memory",
                                        "name": "mappingTokenMappeds_"
                                    }
                                ],
                                "reads": [
                                    [
                                        "token",
                                        "",
                                        "MappingBase"
                                    ],
                                    [
                                        "mappingTokenMappeds",
                                        "",
                                        "Factory"
                                    ],
                                    [
                                        "supportChainIds",
                                        "",
                                        "Factory"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "token",
                                        "",
                                        "MappingBase"
                                    ],
                                    [
                                        "mappingTokenMappeds",
                                        "",
                                        "Factory"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Factory.mainChainIdTokens",
                                        "Factory.supportChainCount"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "753850fbd63b510dd17f499b7e05df4f"
                            }
                        ],
                        "isSupportChainId": [
                            {
                                "visibility": "public",
                                "content": "function isSupportChainId(uint chainId) virtual public view returns (bool){ for(uint i=0; i<supportChainCount(); i++) if(supportChainIds[i] == chainId) return true; return false;}",
                                "modifiers": [
                                    "virtual",
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "chainId"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "supportChainIds",
                                        "",
                                        "Factory"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Factory.supportChainCount"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "6424da85b167141a86db3a23452eadda"
                            }
                        ],
                        "registerSupportChainId_": [
                            {
                                "visibility": "external",
                                "content": "function registerSupportChainId_(uint chainId_) virtual external governance{ require(_chainId() == 1 || _chainId() == 3, 'called only on ethereum mainnet'); require(!isSupportChainId(chainId_), 'support chainId already'); supportChainIds.push(chainId_);}",
                                "modifiers": [
                                    "virtual",
                                    "governance"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "chainId_"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "supportChainIds",
                                        "",
                                        "Factory"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Factory._chainId",
                                        "Governable.governance",
                                        "Factory.isSupportChainId"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "033b05ffe0c43ee91111e85aa5a2580e"
                            }
                        ],
                        "_registerMapping": [
                            {
                                "visibility": "internal",
                                "content": "function _registerMapping(uint mainChainId, address token, uint[] memory chainIds, address[] memory mappingTokenMappeds_) virtual internal{ require(_chainId() == 1 || _chainId() == 3, 'called only on ethereum mainnet'); require(chainIds.length == mappingTokenMappeds_.length, 'two array lenth not equal'); require(isSupportChainId(mainChainId), 'Not support mainChainId'); for(uint i=0; i<chainIds.length; i++){ require(isSupportChainId(chainIds[i]), 'Not support chainId'); require(token == mappingTokenMappeds_[i] || mappingTokenMappeds_[i] == calcMapping(mainChainId, token) || _msgSender() == governor, 'invalid mappingTokenMapped address'); _mainChainIdTokens[mappingTokenMappeds_[i]] = (mainChainId << 160) | uint(token); mappingTokenMappeds[token][chainIds[i]] = mappingTokenMappeds_[i]; emit RegisterMapping(mainChainId, token, chainIds[i], mappingTokenMappeds_[i]);}}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "mainChainId"
                                    },
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "uint[] memory",
                                        "name": "chainIds"
                                    },
                                    {
                                        "type": "address[] memory",
                                        "name": "mappingTokenMappeds_"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "governor",
                                        "",
                                        "Governable"
                                    ],
                                    [
                                        "mainChainId",
                                        "",
                                        "MappingBase"
                                    ],
                                    [
                                        "token",
                                        "",
                                        "MappingBase"
                                    ],
                                    [
                                        "_mainChainIdTokens",
                                        "",
                                        "Factory"
                                    ],
                                    [
                                        "mappingTokenMappeds",
                                        "",
                                        "Factory"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_mainChainIdTokens",
                                        "",
                                        "Factory"
                                    ],
                                    [
                                        "mappingTokenMappeds",
                                        "",
                                        "Factory"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Factory._chainId",
                                        "Factory.calcMapping",
                                        "Factory._msgSender",
                                        "Factory.isSupportChainId"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "1eeb30d7dcd99cc68202aa9bd6c63ccb"
                            }
                        ],
                        "registerMapping_": [
                            {
                                "visibility": "external",
                                "content": "function registerMapping_(uint mainChainId, address token, uint[] memory chainIds, address[] memory mappingTokenMappeds_) virtual external governance{ _registerMapping(mainChainId, token, chainIds, mappingTokenMappeds_);}",
                                "modifiers": [
                                    "virtual",
                                    "governance"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "mainChainId"
                                    },
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "uint[] memory",
                                        "name": "chainIds"
                                    },
                                    {
                                        "type": "address[] memory",
                                        "name": "mappingTokenMappeds_"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "mainChainId",
                                        "",
                                        "MappingBase"
                                    ],
                                    [
                                        "token",
                                        "",
                                        "MappingBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Factory._registerMapping",
                                        "Governable.governance"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "04f8b3b84cae6c452c3e9aa4d0d23400"
                            }
                        ],
                        "registerMapping": [
                            {
                                "visibility": "external",
                                "content": "function registerMapping(uint mainChainId, address token, uint nonce, uint[] memory chainIds, address[] memory mappingTokenMappeds_, Signature[] memory signatures) virtual external payable{ _chargeFee(config[_feeRegister_]); require(config[_onlyDeployer_] == 0 || token == calcContract(_msgSender(), nonce), 'only deployer'); uint N = signatures.length; require(N >= getConfig(_minSignatures_), 'too few signatures'); for(uint i=0; i<N; i++){ for(uint j=0; j<i; j++) require(signatures[i].signatory != signatures[j].signatory, 'repetitive signatory'); bytes32 structHash = keccak256(abi.encode(REGISTER_TYPEHASH, mainChainId, token, keccak256(abi.encodePacked(chainIds)), keccak256(abi.encodePacked(mappingTokenMappeds_)), signatures[i].signatory)); bytes32 digest = keccak256(abi.encodePacked(\"\\x19\\x01\", DOMAIN_SEPARATOR, structHash)); address signatory = ecrecover(digest, signatures[i].v, signatures[i].r, signatures[i].s); require(signatory != address(0), \"invalid signature\"); require(signatory == signatures[i].signatory, \"unauthorized\"); _decreaseAuthCount(signatures[i].signatory, 1); emit AuthorizeRegister(mainChainId, token, signatory);} _registerMapping(mainChainId, token, chainIds, mappingTokenMappeds_);}",
                                "modifiers": [
                                    "virtual",
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "mainChainId"
                                    },
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "nonce"
                                    },
                                    {
                                        "type": "uint[] memory",
                                        "name": "chainIds"
                                    },
                                    {
                                        "type": "address[] memory",
                                        "name": "mappingTokenMappeds_"
                                    },
                                    {
                                        "type": "Signature[] memory",
                                        "name": "signatures"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "config",
                                        "",
                                        "ConfigurableBase"
                                    ],
                                    [
                                        "_feeRegister_",
                                        "",
                                        "Constants"
                                    ],
                                    [
                                        "_onlyDeployer_",
                                        "",
                                        "Constants"
                                    ],
                                    [
                                        "_minSignatures_",
                                        "",
                                        "Constants"
                                    ],
                                    [
                                        "mainChainId",
                                        "",
                                        "MappingBase"
                                    ],
                                    [
                                        "token",
                                        "",
                                        "MappingBase"
                                    ],
                                    [
                                        "deployer",
                                        "",
                                        "MappingBase"
                                    ],
                                    [
                                        "REGISTER_TYPEHASH",
                                        "",
                                        "Factory"
                                    ],
                                    [
                                        "DOMAIN_SEPARATOR",
                                        "",
                                        "Factory"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Factory.getConfig",
                                        "Factory._msgSender",
                                        "Factory._decreaseAuthCount",
                                        "Factory._chargeFee",
                                        "Factory._registerMapping",
                                        "Factory.calcContract"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "df95a3b890ac4fd21f2207b65aadc901"
                            }
                        ],
                        "certifiedCount": [
                            {
                                "visibility": "external",
                                "content": "function certifiedCount() external view returns (uint){ return certifiedSymbols.length;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "certifiedSymbols",
                                        "",
                                        "Factory"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "79aa471e9571edf96ea564c3ae90e5ca"
                            }
                        ],
                        "certifiedTokens": [
                            {
                                "visibility": "public",
                                "content": "function certifiedTokens(string memory symbol) public view returns (uint mainChainId, address token){ uint256 chainIdToken = _certifiedTokens[symbol]; mainChainId = chainIdToken >> 160; token = address(chainIdToken);}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "string memory",
                                        "name": "symbol"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "mainChainId"
                                    },
                                    {
                                        "type": "address",
                                        "name": "token"
                                    }
                                ],
                                "reads": [
                                    [
                                        "mainChainId",
                                        "",
                                        "MappingBase"
                                    ],
                                    [
                                        "token",
                                        "",
                                        "MappingBase"
                                    ],
                                    [
                                        "_certifiedTokens",
                                        "",
                                        "Factory"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "mainChainId",
                                        "",
                                        "MappingBase"
                                    ],
                                    [
                                        "token",
                                        "",
                                        "MappingBase"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "b5bd6f1730e7bda104e28bf71b4bcb7c"
                            }
                        ],
                        "allCertifiedTokens": [
                            {
                                "visibility": "external",
                                "content": "function allCertifiedTokens() external view returns (string[] memory symbols, uint[] memory chainIds, address[] memory tokens){ symbols = certifiedSymbols; uint N = certifiedSymbols.length; chainIds = new uint[](N); tokens = new address[](N); for(uint i=0; i<N; i++) (chainIds[i], tokens[i]) = certifiedTokens(certifiedSymbols[i]);}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "string[] memory",
                                        "name": "symbols"
                                    },
                                    {
                                        "type": "uint[] memory",
                                        "name": "chainIds"
                                    },
                                    {
                                        "type": "address[] memory",
                                        "name": "tokens"
                                    }
                                ],
                                "reads": [
                                    [
                                        "certifiedSymbols",
                                        "",
                                        "Factory"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "token",
                                        "",
                                        "MappingBase"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Factory.certifiedTokens"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "f7bad47ce14de8656f1ab001aae0980a"
                            }
                        ],
                        "registerCertified_": [
                            {
                                "visibility": "external",
                                "content": "function registerCertified_(string memory symbol, uint mainChainId, address token) external governance{ require(_chainId() == 1 || _chainId() == 3, 'called only on ethereum mainnet'); require(isSupportChainId(mainChainId), 'Not support mainChainId'); require(_certifiedTokens[symbol] == 0, 'Certified added already'); if(mainChainId == _chainId()) require(keccak256(bytes(symbol)) == keccak256(bytes(ERC20UpgradeSafe(token).symbol())), 'symbol different'); _certifiedTokens[symbol] = (mainChainId << 160) | uint(token); certifiedSymbols.push(symbol); emit RegisterCertified(symbol, mainChainId, token);}",
                                "modifiers": [
                                    "governance"
                                ],
                                "parameters": [
                                    {
                                        "type": "string memory",
                                        "name": "symbol"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "mainChainId"
                                    },
                                    {
                                        "type": "address",
                                        "name": "token"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "mainChainId",
                                        "",
                                        "MappingBase"
                                    ],
                                    [
                                        "token",
                                        "",
                                        "MappingBase"
                                    ],
                                    [
                                        "_certifiedTokens",
                                        "",
                                        "Factory"
                                    ],
                                    [
                                        "certifiedSymbols",
                                        "",
                                        "Factory"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_certifiedTokens",
                                        "",
                                        "Factory"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Factory._chainId",
                                        "Governable.governance",
                                        "Factory.isSupportChainId"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "f00ef9337c15026aba19b6cc4896e877"
                            }
                        ],
                        "calcContract": [
                            {
                                "visibility": "public",
                                "content": "function calcContract(address deployer, uint nonce) public pure returns (address){ bytes[] memory list = new bytes[](2); list[0] = RLPEncode.encodeAddress(deployer); list[1] = RLPEncode.encodeUint(nonce); return address(uint(keccak256(RLPEncode.encodeList(list))));}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "deployer"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "nonce"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "deployer",
                                        "",
                                        "MappingBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "RLPEncode.encodeUint",
                                        "RLPEncode.encodeList",
                                        "RLPEncode.encodeAddress"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "10e37a74085e6f1f988ae252ef75ef38"
                            }
                        ],
                        "calcMapping": [
                            {
                                "visibility": "public",
                                "content": "function calcMapping(uint mainChainId, address tokenOrdeployer) public view returns (address){ return address(uint(keccak256(abi.encodePacked( hex'ff', address(this), keccak256(abi.encodePacked(mainChainId, tokenOrdeployer)), keccak256( type (InitializableProductProxy).creationCode) ))));}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "mainChainId"
                                    },
                                    {
                                        "type": "address",
                                        "name": "tokenOrdeployer"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "mainChainId",
                                        "",
                                        "MappingBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Factory.type"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "da414b99b3f74843b05ff95595bf5daf"
                            }
                        ],
                        "createTokenMapped": [
                            {
                                "visibility": "external",
                                "content": "function createTokenMapped(address token, uint nonce) external payable returns (address tokenMapped){ if(_msgSender() != governor){ _chargeFee(config[_feeCreate_]); require(config[_onlyDeployer_] == 0 || token == calcContract(_msgSender(), nonce), 'only deployer');} require(tokenMappeds[token] == address(0), 'TokenMapped created already'); bytes32 salt = keccak256(abi.encodePacked(_chainId(), token)); bytes memory bytecode = type (InitializableProductProxy).creationCode; assembly{ tokenMapped := create2(0, add(bytecode, 32), mload(bytecode), salt)} InitializableProductProxy(payable(tokenMapped)).__InitializableProductProxy_init(address(this), _TokenMapped_, abi.encodeWithSignature('__TokenMapped_init(address, address)', address(this), token)); tokenMappeds[token] = tokenMapped; _initAuthQuotas(tokenMapped, IERC20(token).totalSupply()); emit CreateTokenMapped(_msgSender(), token, tokenMapped);}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "nonce"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": "tokenMapped"
                                    }
                                ],
                                "reads": [
                                    [
                                        "governor",
                                        "",
                                        "Governable"
                                    ],
                                    [
                                        "config",
                                        "",
                                        "ConfigurableBase"
                                    ],
                                    [
                                        "_TokenMapped_",
                                        "",
                                        "Constants"
                                    ],
                                    [
                                        "_feeCreate_",
                                        "",
                                        "Constants"
                                    ],
                                    [
                                        "_onlyDeployer_",
                                        "",
                                        "Constants"
                                    ],
                                    [
                                        "token",
                                        "",
                                        "MappingBase"
                                    ],
                                    [
                                        "deployer",
                                        "",
                                        "MappingBase"
                                    ],
                                    [
                                        "tokenMappeds",
                                        "",
                                        "Factory"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "tokenMappeds",
                                        "",
                                        "Factory"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Factory._initAuthQuotas",
                                        "Factory._msgSender",
                                        "Factory._chargeFee",
                                        "Factory._chainId",
                                        "Factory.type",
                                        "Factory.calcContract"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "786b6ee26f30f4fc45bfe1b7650b55fe"
                            }
                        ],
                        "createMappableToken": [
                            {
                                "visibility": "external",
                                "content": "function createMappableToken(string memory name, string memory symbol, uint8 decimals, uint totalSupply) external payable returns (address mappableToken){ if(_msgSender() != governor) _chargeFee(config[_feeCreate_]); require(mappableTokens[_msgSender()] == address(0), 'MappableToken created already'); bytes32 salt = keccak256(abi.encodePacked(_chainId(), _msgSender())); bytes memory bytecode = type (InitializableProductProxy).creationCode; assembly{ mappableToken := create2(0, add(bytecode, 32), mload(bytecode), salt)} InitializableProductProxy(payable(mappableToken)).__InitializableProductProxy_init(address(this), _MappableToken_, abi.encodeWithSignature('__MappableToken_init(address, address, string, string, uint8, uint256)', address(this), _msgSender(), name, symbol, decimals, totalSupply)); mappableTokens[_msgSender()] = mappableToken; _initAuthQuotas(mappableToken, totalSupply); emit CreateMappableToken(_msgSender(), name, symbol, decimals, totalSupply, mappableToken);}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "string memory",
                                        "name": "name"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "symbol"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "decimals"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "totalSupply"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": "mappableToken"
                                    }
                                ],
                                "reads": [
                                    [
                                        "governor",
                                        "",
                                        "Governable"
                                    ],
                                    [
                                        "config",
                                        "",
                                        "ConfigurableBase"
                                    ],
                                    [
                                        "_MappableToken_",
                                        "",
                                        "Constants"
                                    ],
                                    [
                                        "_feeCreate_",
                                        "",
                                        "Constants"
                                    ],
                                    [
                                        "mappableTokens",
                                        "",
                                        "Factory"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "mappableTokens",
                                        "",
                                        "Factory"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Factory._initAuthQuotas",
                                        "Factory._msgSender",
                                        "Factory._chargeFee",
                                        "Factory._chainId",
                                        "Factory.type"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "8fcec7f013a33e4c49cbca75d9e2f899"
                            }
                        ],
                        "_createMappingToken": [
                            {
                                "visibility": "internal",
                                "content": "function _createMappingToken(uint mainChainId, address token, address deployer, string memory name, string memory symbol, uint8 decimals, uint cap) internal returns (address mappingToken){ address tokenOrdeployer = (token == address(0)) ? deployer : token; require(mappingTokens[mainChainId][tokenOrdeployer] == address(0), 'MappingToken created already'); bytes32 salt = keccak256(abi.encodePacked(mainChainId, tokenOrdeployer)); bytes memory bytecode = type (InitializableProductProxy).creationCode; assembly{ mappingToken := create2(0, add(bytecode, 32), mload(bytecode), salt)} InitializableProductProxy(payable(mappingToken)).__InitializableProductProxy_init(address(this), _MappingToken_, abi.encodeWithSignature('__MappingToken_init(address, uint256, address, address, string, string, uint8, uint256)', address(this), mainChainId, token, deployer, name, symbol, decimals, cap)); mappingTokens[mainChainId][tokenOrdeployer] = mappingToken; _initAuthQuotas(mappingToken, cap); emit CreateMappingToken(mainChainId, token, deployer, name, symbol, decimals, cap, mappingToken);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "mainChainId"
                                    },
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "deployer"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "name"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "symbol"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "decimals"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "cap"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": "mappingToken"
                                    }
                                ],
                                "reads": [
                                    [
                                        "_MappingToken_",
                                        "",
                                        "Constants"
                                    ],
                                    [
                                        "mainChainId",
                                        "",
                                        "MappingBase"
                                    ],
                                    [
                                        "token",
                                        "",
                                        "MappingBase"
                                    ],
                                    [
                                        "deployer",
                                        "",
                                        "MappingBase"
                                    ],
                                    [
                                        "mappingTokens",
                                        "",
                                        "Factory"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "mappingTokens",
                                        "",
                                        "Factory"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Factory._initAuthQuotas",
                                        "Factory.type"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "d00b334bc40cdc167c3ca368bd8805f3"
                            }
                        ],
                        "createMappingToken_": [
                            {
                                "visibility": "public",
                                "content": "function createMappingToken_(uint mainChainId, address token, address deployer, string memory name, string memory symbol, uint8 decimals, uint cap) public payable governance returns (address mappingToken){ return _createMappingToken(mainChainId, token, deployer, name, symbol, decimals, cap);}",
                                "modifiers": [
                                    "payable",
                                    "governance"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "mainChainId"
                                    },
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "deployer"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "name"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "symbol"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "decimals"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "cap"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": "mappingToken"
                                    }
                                ],
                                "reads": [
                                    [
                                        "mainChainId",
                                        "",
                                        "MappingBase"
                                    ],
                                    [
                                        "token",
                                        "",
                                        "MappingBase"
                                    ],
                                    [
                                        "deployer",
                                        "",
                                        "MappingBase"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Governable.governance",
                                        "Factory._createMappingToken"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "f35a79fede15fd7a22a13e66fcf4aabe"
                            }
                        ],
                        "createMappingToken": [
                            {
                                "visibility": "public",
                                "content": "function createMappingToken(uint mainChainId, address token, uint nonce, string memory name, string memory symbol, uint8 decimals, uint cap, Signature[] memory signatures) public payable returns (address mappingToken){ _chargeFee(config[_feeCreate_]); require(token == address(0) || config[_onlyDeployer_] == 0 || token == calcContract(_msgSender(), nonce), 'only deployer'); require(signatures.length >= config[_minSignatures_], 'too few signatures'); for(uint i=0; i<signatures.length; i++){ for(uint j=0; j<i; j++) require(signatures[i].signatory != signatures[j].signatory, 'repetitive signatory'); bytes32 hash = keccak256(abi.encode(CREATE_TYPEHASH, _msgSender(), mainChainId, token, keccak256(bytes(name)), keccak256(bytes(symbol)), decimals, cap, signatures[i].signatory)); hash = keccak256(abi.encodePacked(\"\\x19\\x01\", DOMAIN_SEPARATOR, hash)); address signatory = ecrecover(hash, signatures[i].v, signatures[i].r, signatures[i].s); require(signatory != address(0), \"invalid signature\"); require(signatory == signatures[i].signatory, \"unauthorized\"); _decreaseAuthCount(signatures[i].signatory, 1); emit AuthorizeCreate(mainChainId, token, _msgSender(), name, symbol, decimals, cap, signatory);} return _createMappingToken(mainChainId, token, _msgSender(), name, symbol, decimals, cap);}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "mainChainId"
                                    },
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "nonce"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "name"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "symbol"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "decimals"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "cap"
                                    },
                                    {
                                        "type": "Signature[] memory",
                                        "name": "signatures"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": "mappingToken"
                                    }
                                ],
                                "reads": [
                                    [
                                        "config",
                                        "",
                                        "ConfigurableBase"
                                    ],
                                    [
                                        "_feeCreate_",
                                        "",
                                        "Constants"
                                    ],
                                    [
                                        "_onlyDeployer_",
                                        "",
                                        "Constants"
                                    ],
                                    [
                                        "_minSignatures_",
                                        "",
                                        "Constants"
                                    ],
                                    [
                                        "mainChainId",
                                        "",
                                        "MappingBase"
                                    ],
                                    [
                                        "token",
                                        "",
                                        "MappingBase"
                                    ],
                                    [
                                        "deployer",
                                        "",
                                        "MappingBase"
                                    ],
                                    [
                                        "CREATE_TYPEHASH",
                                        "",
                                        "Factory"
                                    ],
                                    [
                                        "DOMAIN_SEPARATOR",
                                        "",
                                        "Factory"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Factory._msgSender",
                                        "Factory._decreaseAuthCount",
                                        "Factory._chargeFee",
                                        "Factory.calcContract",
                                        "Factory._createMappingToken"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "1723d591c0c1ba7d6f14365e35981848"
                            }
                        ],
                        "_chargeFee": [
                            {
                                "visibility": "internal",
                                "content": "function _chargeFee(uint fee) virtual internal{ require(msg.value >= Math.min(fee, 1 ether), 'fee is too low'); address payable feeTo = address(config[_feeTo_]); if(feeTo == address(0)) feeTo = address(uint160(address(this))); feeTo.transfer(msg.value); emit ChargeFee(_msgSender(), feeTo, msg.value);}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "fee"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "config",
                                        "",
                                        "ConfigurableBase"
                                    ],
                                    [
                                        "_feeTo_",
                                        "",
                                        "Constants"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Math.min",
                                        "feeTo.transfer",
                                        "Factory._msgSender"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "2acb0983ea6d76d9633fc8c9874d85ad"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {
                        "ProductProxyCodeHash": {
                            "event": "ProductProxyCodeHash",
                            "content": "ProductProxyCodeHash(bytes32 codeHash)"
                        },
                        "SetSignatories": {
                            "event": "SetSignatories",
                            "content": "SetSignatories(address[] signatories_)"
                        },
                        "SetAuthorty": {
                            "event": "SetAuthorty",
                            "content": "SetAuthorty(address indexed authorty, bool indexed enable)"
                        },
                        "IncreaseAuthQuota": {
                            "event": "IncreaseAuthQuota",
                            "content": "IncreaseAuthQuota(address indexed authorty, address indexed signatory, uint increment, uint quota)"
                        },
                        "DecreaseAuthQuota": {
                            "event": "DecreaseAuthQuota",
                            "content": "DecreaseAuthQuota(address indexed authorty, address indexed mappingTokenMapped, address indexed signatory, uint decrement, uint quota)"
                        },
                        "DecreaseAuthCount": {
                            "event": "DecreaseAuthCount",
                            "content": "DecreaseAuthCount(address indexed authorty, address indexed signatory, uint decrement, uint count)"
                        },
                        "RegisterMapping": {
                            "event": "RegisterMapping",
                            "content": "RegisterMapping(uint mainChainId, address token, uint chainId, address mappingTokenMapped)"
                        },
                        "AuthorizeRegister": {
                            "event": "AuthorizeRegister",
                            "content": "AuthorizeRegister(uint indexed mainChainId, address indexed token, address indexed signatory)"
                        },
                        "RegisterCertified": {
                            "event": "RegisterCertified",
                            "content": "RegisterCertified(string indexed symbol, uint indexed mainChainId, address indexed token)"
                        },
                        "CreateTokenMapped": {
                            "event": "CreateTokenMapped",
                            "content": "CreateTokenMapped(address indexed deployer, address indexed token, address indexed tokenMapped)"
                        },
                        "CreateMappableToken": {
                            "event": "CreateMappableToken",
                            "content": "CreateMappableToken(address indexed deployer, string name, string symbol, uint8 decimals, uint totalSupply, address indexed mappableToken)"
                        },
                        "CreateMappingToken": {
                            "event": "CreateMappingToken",
                            "content": "CreateMappingToken(uint mainChainId, address indexed token, address indexed deployer, string name, string symbol, uint8 decimals, uint cap, address indexed mappingToken)"
                        },
                        "AuthorizeCreate": {
                            "event": "AuthorizeCreate",
                            "content": "AuthorizeCreate(uint mainChainId, address indexed token, address indexed deployer, string name, string symbol, uint8 decimals, uint cap, address indexed signatory)"
                        },
                        "ChargeFee": {
                            "event": "ChargeFee",
                            "content": "ChargeFee(address indexed from, address indexed to, uint value)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {
                        "IERC20": "SafeERC20",
                        "uint": "SafeMath"
                    }
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "Proxy._implementation": "f7d38ff9dad447b230596b4a7c78398e",
                "Proxy._willFallback": "0b37c62659e04339b90f1648b110f56f",
                "OpenZeppelinUpgradesAddress.isContract": "b946110d999861cda9a1e7e7629934c3",
                "Proxy._delegate": "4f00cc7001758c49683101c33594a955",
                "BaseUpgradeabilityProxy._setImplementation": "66d788827a154d30ec1cba061e5570c1",
                "BaseAdminUpgradeabilityProxy._admin": "17e46214f004668ef94fe9a71e3bb84b",
                "Proxy._fallback": "db5aa6efeb9afe8b9bb2504b3b017b39",
                "BaseAdminUpgradeabilityProxy.ifAdmin": "675de24a29fdb1f5fa1e718dd12beb3d",
                "BaseAdminUpgradeabilityProxy._setAdmin": "d378f93e9cbc24d40089de88de2c89ab",
                "BaseUpgradeabilityProxy._upgradeTo": "020862c1db68690b6fc90d8d79d6ca80",
                "InitializableUpgradeabilityProxy.initialize": "8dba270c57b64a077cb92cf964a18ab6",
                "ProductProxy._factory": "1042a80fca8e6a4788c06b0ef65c3d83",
                "ProductProxy._name": "6c574140b5764bd09d3e060ee34818a5",
                "ProductProxy._setFactory": "ae1fc6ea2e422ce638be61b36214dfff",
                "Initializable.isConstructor": "e986e1314e3f92c6e8231c87020f5190",
                "ContextUpgradeSafe.__Context_init_unchained": "ff90e0cbb896d9c015a83bf8000be465",
                "Initializable.initializer": "7f75415da7e980a2aa80eef6534a10e9",
                "ReentrancyGuardUpgradeSafe.__ReentrancyGuard_init_unchained": "8637bad20979541eac50c401114bee2d",
                "SafeMath.sub": "972c2868144778b0617e55a6f97163a0",
                "SafeMath.div": "371f945bc2211ac7c63e7277fb7222a7",
                "SafeMath.mod": "50a3733021c21a71491ee85ffb90a2a4",
                "ERC20UpgradeSafe.__ERC20_init_unchained": "4c386946c4a912edf1422ab9ac62bfe5",
                "ERC20UpgradeSafe._transfer": "fb62c220e2276721ee024f6b82f94489",
                "ERC20UpgradeSafe._approve": "39fc3d2c59f8296512abc90ea29b08bf",
                "ERC20UpgradeSafe._beforeTokenTransfer": "ba41c5ef0cd7854682c8a8381eef9051",
                "ERC20CappedUpgradeSafe.__ERC20Capped_init_unchained": "f007047ea0c607931a54933ec74ed8df",
                "SafeERC20._callOptionalReturn": "e930f8d48927a8c8eb5f50424b168514",
                "IERC20.allowance": "d7cbdea72a1a98a5910dc39323a9b2cc",
                "RLPReader.hasNext": "05bb0d8cabbae2c6a52a2c16ee5f4899",
                "RLPReader._itemLength": "a9f35bd77083134c0ce9b0ad6f759227",
                "RLPReader.isList": "35e529f08dc67aabd1a1ec497eb85a80",
                "RLPReader._payloadOffset": "84b3a85ebde6f91e8282f9061a2e4f91",
                "RLPReader.payloadLocation": "d639de7573161b3c3574cc3445512e55",
                "RLPReader.numItems": "ed7189b1ba2ee973c12c92eba833eee3",
                "RLPReader.copy": "a28ddae60877b8f1c962f0ca2ecc0f88",
                "RLPReader.toUint": "b3f1b7f6f3856d252499589e3e4b55df",
                "RLPEncode.encodeLength": "ae112f709d4d6c2aacbc3a2e45951461",
                "RLPEncode.concat": "16c1baa24d9acf34dcdb3aa620084cb3",
                "RLPEncode.flatten": "cc5ca5191fdedcf583a600fa6d5adbce",
                "RLPEncode.encodeBytes": "3f74892f609a8ec67c2e27260b621f1c",
                "RLPEncode.toBinary": "8c255e74fbba360c6313266cadabb377",
                "RLPEncode.encodeUint": "d5d7174cd65d33f039b3b5b5185edacf",
                "RLPEncode.memcpy": "58e71428e550677ad57964a9e15f8227",
                "Governable.governance": "466feca3fa64bec1953ca5acea66852b",
                "Governable._transferGovernorship": "5f2f869aa0fe9b3b1ab23dca54c99e1a",
                "ConfigurableBase._setConfig": "e510d365c28cd5c45c8698c4a8da66fa",
                "StakingRewards.__StakingRewards_init_unchained": "8c886bbd27a590a6c61619160bd12d7e",
                "Math.min": "97ac6427d500c267e7e4b602d5f627f9",
                "StakingRewards.lastTimeRewardApplicable": "c8082bd0a9b6ee9a0b3e4ac25deb3be8",
                "StakingRewards.rewardPerToken": "1c60dc1d798e1fc7b3ed49e66e3a0037",
                "StakingRewards.updateReward": "7ede2a94200b87247125ca42cb6f4ee5",
                "StakingRewards.getReward": "cf0c60a6ceac6e707b93737837cfee47",
                "StakingRewards.withdraw": "10e3bd65e5bcc385c5bea945bf6f7495",
                "IERC20.balanceOf": "c3e34cfaf7176fb234da98e9806cd30c",
                "StakingRewards.earned": "e1151f785bfaca18e89000d1040ed9fc",
                "MappingBase.authQuotaOf": "ff516623fa8a60f4100693310b4ba61b",
                "Math.max": "b584abd0b7f50934d10d32072fbe1a94",
                "MappingBase.cap": "34ec82a51c1dce9927f99000e6589126",
                "MappingBase.increaseAuthQuota": "ac113e3b7fe95605d0b40d39e0608f2f",
                "MappingBase.updateAutoQuota": "28323e3f6201dca2a4f63ab5c97a37e3",
                "MappingBase.decreaseAuthQuota": "561882f05046839a56634741c5309b0f",
                "MappingBase._decreaseAuthQuota": "6136c98cbcc71ad0992a735c3c40b88f",
                "MappingBase.sendFrom": "e63f12fbc98db3cf71a25552c9a39c4d",
                "MappingBase._chargeFee": "32c18416db20b37b649c2d92110fddec",
                "MappingBase._sendFrom": "6c24ca907828d42b3310a141e8c7f849",
                "MappingBase._receive": "8e41fe4e1716a1f2300afb8990bd3424",
                "TokenMapped.__TokenMapped_init_unchained": "8c2bce4c179598901337a222feb5b31d",
                "Permit._approve": "1fe0143db486b52d2b460a438477c91f",
                "Permit.DOMAIN_SEPARATOR": "2ad13f2c1ff06f2215a947a59288ab55",
                "MappableToken.__MappableToken_init_unchained": "a5dd0f66bd60bf7d1284b201f972829a",
                "ERC20UpgradeSafe._mint": "096242128c682603db1a0b0d903136f5",
                "MappingBase.DOMAIN_SEPARATOR": "05815736d7928b6d89b76ea3ab39c703",
                "ERC20CappedUpgradeSafe.cap": "e1f94bf4c7a12221e3c4286a5a734e0c",
                "ERC20UpgradeSafe._burn": "5a2372c1fd2a727cf0935156c997d1f5",
                "ERC20UpgradeSafe.transferFrom": "5f7816850ef65d6d4f3d364dd10f5b85",
                "MappingToken.__MappingToken_init_unchained": "80fb68a7c6cb54839aa2fc9134b8620d",
                "Governable.__Governable_init_unchained": "879e78bb24227dfc5946689574a8695d",
                "Factory.__MappingTokenFactory_init_unchained": "9146e6431ded603e0cfdc645febbd8af",
                "Factory.upgradeProductImplementationsTo_": "9f9979de012e5bc2fbe9b35aa7dc071b",
                "Factory._increaseAuthQuotas": "a12da5294bdc24f1810427fc18023481",
                "Factory.decreaseAuthQuotas": "d28c0b9784ea939e38fd5b2b99ea6c64",
                "Factory.increaseAuthCounts": "56f3c2f9628dc92897fef99af379d4a8",
                "Factory.increaseAuthCount": "ccdcfbfff15b280819f6ddd956c6f6a1",
                "Factory.decreaseAuthCounts": "81237327833ec3fafceefb06d46be031",
                "Factory.decreaseAuthCount": "94959713ac981c62fb3e74fc61b462d7",
                "Factory._decreaseAuthCount": "4748e1fbb8c8d892694d247da8de27c3",
                "Factory.supportChainCount": "613a93c0f39f8c4d6d1000fb9e99cbb9",
                "Factory.mainChainIdTokens": "37ce87bf0975b25e0b22f4663f8f32cd",
                "Factory.isSupportChainId": "6424da85b167141a86db3a23452eadda",
                "Factory.calcMapping": "da414b99b3f74843b05ff95595bf5daf",
                "Factory._registerMapping": "1eeb30d7dcd99cc68202aa9bd6c63ccb",
                "Factory.calcContract": "10e37a74085e6f1f988ae252ef75ef38",
                "Factory._chargeFee": "2acb0983ea6d76d9633fc8c9874d85ad",
                "Factory.certifiedTokens": "b5bd6f1730e7bda104e28bf71b4bcb7c",
                "RLPEncode.encodeAddress": "c78d23cf3ed4ca27a94c55c1470e2657",
                "RLPEncode.encodeList": "8604051ae427fa331e1df4f77a2d3640",
                "Factory._initAuthQuotas": "d82795965168b5c3e635f7bab9e58e78",
                "Factory._createMappingToken": "d00b334bc40cdc167c3ca368bd8805f3"
            },
            "md5": "dfff7177a8b69d35301d6ff014acd145"
        }
    },
    "handled_md5": {
        "__set__": true,
        "values": [
            "9558e6b539134e509321c14ac02913b8",
            "dfff7177a8b69d35301d6ff014acd145"
        ]
    }
}