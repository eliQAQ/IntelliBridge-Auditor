{
    "solidity_file": {
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\XBridge20240424\\@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\XBridge20240424\\@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol",
            "filename": "AddressUpgradeable.sol",
            "imported_contracts": {},
            "contracts": {
                "AddressUpgradeable": {
                    "type": {
                        "__CT__": true,
                        "value": 2
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "isContract": [
                            {
                                "visibility": "internal",
                                "content": "function isContract(address account) internal view returns (bool){ return account.code.length > 0;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "account"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "d5972f1432570efe297b754cd2693d6f"
                            }
                        ],
                        "sendValue": [
                            {
                                "visibility": "internal",
                                "content": "function sendValue(address payable recipient, uint256 amount) internal{ require(address(this).balance >= amount, \"Address: insufficient balance\"); (bool success, ) = recipient.call{ value: amount} (\"\"); require(success, \"Address: unable to send value, recipient may have reverted\");}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address payable",
                                        "name": "recipient"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "4213f1701c2999f67f11de98a51e01f6"
                            }
                        ],
                        "functionCall": [
                            {
                                "visibility": "internal",
                                "content": "function functionCall(address target, bytes memory data) internal returns (bytes memory){ return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "target"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "data"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AddressUpgradeable.functionCallWithValue"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "270e14dfa6c4d340344714fd6a36fd00"
                            },
                            {
                                "visibility": "internal",
                                "content": "function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory){ return functionCallWithValue(target, data, 0, errorMessage);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "target"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "data"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "errorMessage"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AddressUpgradeable.functionCallWithValue"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "3deb235bd39105633ff4aa02a367005e"
                            }
                        ],
                        "functionCallWithValue": [
                            {
                                "visibility": "internal",
                                "content": "function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory){ return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "target"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "data"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AddressUpgradeable.verifyCallResultFromTarget",
                                        "AddressUpgradeable.functionCallWithValue"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "9587564662cef65eec554844bed6f202"
                            },
                            {
                                "visibility": "internal",
                                "content": "function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory){ require(address(this).balance >= value, \"Address: insufficient balance for call\"); (bool success, bytes memory returndata) = target.call{ value: value} (data); return verifyCallResultFromTarget(target, success, returndata, errorMessage);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "target"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "data"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "value"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "errorMessage"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AddressUpgradeable.verifyCallResultFromTarget",
                                        "AddressUpgradeable.functionCallWithValue"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "415fb10c2d7ae7d060a260635249aa7d"
                            }
                        ],
                        "functionStaticCall": [
                            {
                                "visibility": "internal",
                                "content": "function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory){ return functionStaticCall(target, data, \"Address: low-level static call failed\");}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "target"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "data"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AddressUpgradeable.verifyCallResultFromTarget",
                                        "target.staticcall",
                                        "AddressUpgradeable.functionStaticCall"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "994685aae3cda8dbbf0ffec7f803d344"
                            },
                            {
                                "visibility": "internal",
                                "content": "function functionStaticCall( address target, bytes memory data, string memory errorMessage ) internal view returns (bytes memory){ (bool success, bytes memory returndata) = target.staticcall(data); return verifyCallResultFromTarget(target, success, returndata, errorMessage);}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "target"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "data"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "errorMessage"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AddressUpgradeable.verifyCallResultFromTarget",
                                        "target.staticcall",
                                        "AddressUpgradeable.functionStaticCall"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "bf41c57fa7b52bd9c9ca315357eacff8"
                            }
                        ],
                        "functionDelegateCall": [
                            {
                                "visibility": "internal",
                                "content": "function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory){ return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "target"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "data"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AddressUpgradeable.verifyCallResultFromTarget",
                                        "AddressUpgradeable.functionDelegateCall",
                                        "target.delegatecall"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "219660ec0d55ecb352a5cec40b996f90"
                            },
                            {
                                "visibility": "internal",
                                "content": "function functionDelegateCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory){ (bool success, bytes memory returndata) = target.delegatecall(data); return verifyCallResultFromTarget(target, success, returndata, errorMessage);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "target"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "data"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "errorMessage"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AddressUpgradeable.verifyCallResultFromTarget",
                                        "AddressUpgradeable.functionDelegateCall",
                                        "target.delegatecall"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "701d9cff42a9c0251737fde00a72ac47"
                            }
                        ],
                        "verifyCallResultFromTarget": [
                            {
                                "visibility": "internal",
                                "content": "function verifyCallResultFromTarget( address target, bool success, bytes memory returndata, string memory errorMessage ) internal view returns (bytes memory){ if (success){ if (returndata.length == 0){ require(isContract(target), \"Address: call to non- contract \");} return returndata;} else{ _revert(returndata, errorMessage);}}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "target"
                                    },
                                    {
                                        "type": "bool",
                                        "name": "success"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "returndata"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "errorMessage"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AddressUpgradeable._revert",
                                        "AddressUpgradeable.isContract"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "970cb86012633b951e216a6e31e36148"
                            }
                        ],
                        "verifyCallResult": [
                            {
                                "visibility": "internal",
                                "content": "function verifyCallResult( bool success, bytes memory returndata, string memory errorMessage ) internal pure returns (bytes memory){ if (success){ return returndata;} else{ _revert(returndata, errorMessage);}}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bool",
                                        "name": "success"
                                    },
                                    {
                                        "type": "bytes memory",
                                        "name": "returndata"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "errorMessage"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "AddressUpgradeable._revert"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "daaf718a17d848032c9640555f62540a"
                            }
                        ],
                        "_revert": [
                            {
                                "visibility": "private",
                                "content": "function _revert(bytes memory returndata, string memory errorMessage) private pure{ if (returndata.length > 0){ assembly{ let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size)}} else{ revert(errorMessage);}}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "returndata"
                                    },
                                    {
                                        "type": "string memory",
                                        "name": "errorMessage"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "8bb1093039f962e441f6f911e07a815f"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "AddressUpgradeable.functionCallWithValue": "9587564662cef65eec554844bed6f202",
                "AddressUpgradeable.verifyCallResultFromTarget": "970cb86012633b951e216a6e31e36148",
                "AddressUpgradeable.functionStaticCall": "994685aae3cda8dbbf0ffec7f803d344",
                "AddressUpgradeable.functionDelegateCall": "219660ec0d55ecb352a5cec40b996f90",
                "AddressUpgradeable.isContract": "d5972f1432570efe297b754cd2693d6f",
                "AddressUpgradeable._revert": "8bb1093039f962e441f6f911e07a815f"
            },
            "md5": "ea26a984553f85e131a6ac4ea11c2ea7"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\XBridge20240424\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\XBridge20240424\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol",
            "filename": "Initializable.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\XBridge20240424\\@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "Initializable": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": true,
                    "inherits": [],
                    "state_variables": {
                        "_initialized": {
                            "type": "uint8",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint8 private _initialized;"
                        },
                        "_initializing": {
                            "type": "bool",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "bool private _initializing;"
                        }
                    },
                    "functions": {
                        "_disableInitializers": [
                            {
                                "visibility": "internal",
                                "content": "function _disableInitializers() internal virtual{ require(!_initializing, \"Initializable: contract is initializing\"); if (_initialized != type (uint8).max){ _initialized = type (uint8).max; emit Initialized( type (uint8).max);}}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [
                                    [
                                        "_initialized",
                                        "",
                                        "Initializable"
                                    ],
                                    [
                                        "_initializing",
                                        "",
                                        "Initializable"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_initialized",
                                        "",
                                        "Initializable"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "Initializable.type"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "e93da15c2984cd69b8afe0c4d207be03"
                            }
                        ],
                        "_getInitializedVersion": [
                            {
                                "visibility": "internal",
                                "content": "function _getInitializedVersion() internal view returns (uint8){ return _initialized;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint8",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_initialized",
                                        "",
                                        "Initializable"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "1a6252080d84aef759ba74b9428fe9e9"
                            }
                        ],
                        "_isInitializing": [
                            {
                                "visibility": "internal",
                                "content": "function _isInitializing() internal view returns (bool){ return _initializing;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_initializing",
                                        "",
                                        "Initializable"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "23aa96204ffc2db51ee93543ead72d21"
                            }
                        ]
                    },
                    "modifiers": {
                        "initializer": {
                            "parameters": [],
                            "content": "modifier initializer(){ bool isTopLevelCall = !_initializing; require( (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1), \"Initializable: contract is already initialized\" ); _initialized = 1; if (isTopLevelCall){ _initializing = true;} _; if (isTopLevelCall){ _initializing = false; emit Initialized(1);}}",
                            "reads": [
                                [
                                    "_initialized",
                                    "",
                                    "Initializable"
                                ],
                                [
                                    "_initializing",
                                    "",
                                    "Initializable"
                                ]
                            ],
                            "writes": [
                                [
                                    "_initialized",
                                    "",
                                    "Initializable"
                                ],
                                [
                                    "_initializing",
                                    "",
                                    "Initializable"
                                ]
                            ],
                            "external_calls": {
                                "__set__": true,
                                "values": [
                                    "AddressUpgradeable.isContract"
                                ]
                            },
                            "md5": "319a89ab9d2834e2aa4d9f74c10ee085"
                        },
                        "reinitializer": {
                            "parameters": [
                                {
                                    "type": "uint8",
                                    "name": "version"
                                }
                            ],
                            "content": "modifier reinitializer(uint8 version){ require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\"); _initialized = version; _initializing = true; _; _initializing = false; emit Initialized(version);}",
                            "reads": [
                                [
                                    "_initialized",
                                    "",
                                    "Initializable"
                                ],
                                [
                                    "_initializing",
                                    "",
                                    "Initializable"
                                ]
                            ],
                            "writes": [
                                [
                                    "_initialized",
                                    "",
                                    "Initializable"
                                ],
                                [
                                    "_initializing",
                                    "",
                                    "Initializable"
                                ]
                            ],
                            "external_calls": [],
                            "md5": "cc253d6e6a28a0a885ffc20460167c1a"
                        },
                        "onlyInitializing": {
                            "parameters": [],
                            "content": "modifier onlyInitializing(){ require(_initializing, \"Initializable: contract is not initializing\"); _;}",
                            "reads": [
                                [
                                    "_initializing",
                                    "",
                                    "Initializable"
                                ]
                            ],
                            "writes": [],
                            "external_calls": [],
                            "md5": "9aa43424d4ca4ac38d1414b683de0171"
                        }
                    },
                    "structs": {},
                    "events": {
                        "Initialized": {
                            "event": "Initialized",
                            "content": "Initialized(uint8 version)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "AddressUpgradeable.isContract": "d5972f1432570efe297b754cd2693d6f"
            },
            "md5": "532cab5e8687e776179d995eaf9148eb"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\XBridge20240424\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\XBridge20240424\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol",
            "filename": "ContextUpgradeable.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\XBridge20240424\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "ContextUpgradeable": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": true,
                    "inherits": [
                        "is",
                        "Initializable"
                    ],
                    "state_variables": {
                        "__gap": {
                            "type": "uint256[50]",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256[50] private __gap;"
                        }
                    },
                    "functions": {
                        "__Context_init": [
                            {
                                "visibility": "internal",
                                "content": "function __Context_init() internal onlyInitializing{}",
                                "modifiers": [
                                    "onlyInitializing"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ContextUpgradeable.onlyInitializing"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "51711f974026a47cf07ddd644d9d6314"
                            }
                        ],
                        "__Context_init_unchained": [
                            {
                                "visibility": "internal",
                                "content": "function __Context_init_unchained() internal onlyInitializing{}",
                                "modifiers": [
                                    "onlyInitializing"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ContextUpgradeable.onlyInitializing"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "b455fef82ed6bfd2959d8c51c633ee72"
                            }
                        ],
                        "_msgSender": [
                            {
                                "visibility": "internal",
                                "content": "function _msgSender() internal view virtual returns (address){ return msg.sender;}",
                                "modifiers": [
                                    "view",
                                    "virtual"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "3bc534219d7c704e82b1271e27e1e9f4"
                            }
                        ],
                        "_msgData": [
                            {
                                "visibility": "internal",
                                "content": "function _msgData() internal view virtual returns (bytes calldata){ return msg.data;}",
                                "modifiers": [
                                    "view",
                                    "virtual"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "bytes calldata",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c1cd6682c49c03f9b0f4ec879236408a"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "ContextUpgradeable.onlyInitializing": "9aa43424d4ca4ac38d1414b683de0171"
            },
            "md5": "452ef8f7c8f054d74ce50bc9aff41aae"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\XBridge20240424\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\XBridge20240424\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol",
            "filename": "OwnableUpgradeable.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\XBridge20240424\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\XBridge20240424\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "OwnableUpgradeable": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": true,
                    "inherits": [
                        "is",
                        "Initializable",
                        "ContextUpgradeable"
                    ],
                    "state_variables": {
                        "_owner": {
                            "type": "address",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address private _owner;"
                        },
                        "__gap": {
                            "type": "uint256[49]",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256[49] private __gap;"
                        }
                    },
                    "functions": {
                        "__Ownable_init": [
                            {
                                "visibility": "internal",
                                "content": "function __Ownable_init() internal onlyInitializing{ __Ownable_init_unchained();}",
                                "modifiers": [
                                    "onlyInitializing"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "OwnableUpgradeable.onlyInitializing",
                                        "OwnableUpgradeable.__Ownable_init_unchained"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "44fcf94abcb0d2c66ce3e37a497edc8f"
                            }
                        ],
                        "__Ownable_init_unchained": [
                            {
                                "visibility": "internal",
                                "content": "function __Ownable_init_unchained() internal onlyInitializing{ _transferOwnership(_msgSender());}",
                                "modifiers": [
                                    "onlyInitializing"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "OwnableUpgradeable.onlyInitializing",
                                        "OwnableUpgradeable._transferOwnership",
                                        "OwnableUpgradeable._msgSender"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "3b504a3884e033490deaf74fead3a48e"
                            }
                        ],
                        "owner": [
                            {
                                "visibility": "public",
                                "content": "function owner() public view virtual returns (address){ return _owner;}",
                                "modifiers": [
                                    "view",
                                    "virtual"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_owner",
                                        "",
                                        "OwnableUpgradeable"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c000c329207e63e4293ec575de9eb28a"
                            }
                        ],
                        "_checkOwner": [
                            {
                                "visibility": "internal",
                                "content": "function _checkOwner() internal view virtual{ require(owner() == _msgSender(), \"Ownable: caller is not the owner\");}",
                                "modifiers": [
                                    "view",
                                    "virtual"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "OwnableUpgradeable.owner",
                                        "OwnableUpgradeable._msgSender"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "e5e005d7adac2d25dba9788a40cee105"
                            }
                        ],
                        "renounceOwnership": [
                            {
                                "visibility": "public",
                                "content": "function renounceOwnership() public virtual onlyOwner{ _transferOwnership(address(0));}",
                                "modifiers": [
                                    "virtual",
                                    "onlyOwner"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "OwnableUpgradeable._transferOwnership",
                                        "OwnableUpgradeable.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "8681199fd134b528e368ae053a4153df"
                            }
                        ],
                        "transferOwnership": [
                            {
                                "visibility": "public",
                                "content": "function transferOwnership(address newOwner) public virtual onlyOwner{ require(newOwner != address(0), \"Ownable: new owner is the zero address\"); _transferOwnership(newOwner);}",
                                "modifiers": [
                                    "virtual",
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "newOwner"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "OwnableUpgradeable._transferOwnership",
                                        "OwnableUpgradeable.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "03e524f71217fb5b3a29866055e9c31d"
                            }
                        ],
                        "_transferOwnership": [
                            {
                                "visibility": "internal",
                                "content": "function _transferOwnership(address newOwner) internal virtual{ address oldOwner = _owner; _owner = newOwner; emit OwnershipTransferred(oldOwner, newOwner);}",
                                "modifiers": [
                                    "virtual"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "newOwner"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_owner",
                                        "",
                                        "OwnableUpgradeable"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_owner",
                                        "",
                                        "OwnableUpgradeable"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "a02e4901485cd8c78e4e4b73a0aa53b5"
                            }
                        ]
                    },
                    "modifiers": {
                        "onlyOwner": {
                            "parameters": [],
                            "content": "modifier onlyOwner(){ _checkOwner(); _;}",
                            "reads": [],
                            "writes": [],
                            "external_calls": {
                                "__set__": true,
                                "values": [
                                    "OwnableUpgradeable._checkOwner"
                                ]
                            },
                            "md5": "c5a518feff109806e8b681a11a2ae056"
                        }
                    },
                    "structs": {},
                    "events": {
                        "OwnershipTransferred": {
                            "event": "OwnershipTransferred",
                            "content": "OwnershipTransferred(address indexed previousOwner, address indexed newOwner)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "OwnableUpgradeable.onlyInitializing": "9aa43424d4ca4ac38d1414b683de0171",
                "OwnableUpgradeable.__Ownable_init_unchained": "3b504a3884e033490deaf74fead3a48e",
                "OwnableUpgradeable._transferOwnership": "a02e4901485cd8c78e4e4b73a0aa53b5",
                "OwnableUpgradeable._msgSender": "3bc534219d7c704e82b1271e27e1e9f4",
                "OwnableUpgradeable._checkOwner": "e5e005d7adac2d25dba9788a40cee105",
                "OwnableUpgradeable.owner": "c000c329207e63e4293ec575de9eb28a",
                "OwnableUpgradeable.onlyOwner": "c5a518feff109806e8b681a11a2ae056"
            },
            "md5": "8025370a999d53af6cda46119c767909"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\XBridge20240424\\@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\XBridge20240424\\@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol",
            "filename": "ReentrancyGuardUpgradeable.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\XBridge20240424\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "ReentrancyGuardUpgradeable": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": true,
                    "inherits": [
                        "is",
                        "Initializable"
                    ],
                    "state_variables": {
                        "_NOT_ENTERED": {
                            "type": "uint256",
                            "visibility": "private",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "1",
                            "content": "uint256 private constant _NOT_ENTERED = 1;"
                        },
                        "_ENTERED": {
                            "type": "uint256",
                            "visibility": "private",
                            "is_constant": true,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": "2",
                            "content": "uint256 private constant _ENTERED = 2;"
                        },
                        "_status": {
                            "type": "uint256",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256 private _status;"
                        },
                        "__gap": {
                            "type": "uint256[49]",
                            "visibility": "private",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256[49] private __gap;"
                        }
                    },
                    "functions": {
                        "__ReentrancyGuard_init": [
                            {
                                "visibility": "internal",
                                "content": "function __ReentrancyGuard_init() internal onlyInitializing{ __ReentrancyGuard_init_unchained();}",
                                "modifiers": [
                                    "onlyInitializing"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ReentrancyGuardUpgradeable.__ReentrancyGuard_init_unchained",
                                        "ReentrancyGuardUpgradeable.onlyInitializing"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "fdb427b7985133c60b2358311b26f832"
                            }
                        ],
                        "__ReentrancyGuard_init_unchained": [
                            {
                                "visibility": "internal",
                                "content": "function __ReentrancyGuard_init_unchained() internal onlyInitializing{ _status = _NOT_ENTERED;}",
                                "modifiers": [
                                    "onlyInitializing"
                                ],
                                "parameters": [],
                                "returns": [],
                                "reads": [
                                    [
                                        "_NOT_ENTERED",
                                        "",
                                        "ReentrancyGuardUpgradeable"
                                    ],
                                    [
                                        "_status",
                                        "",
                                        "ReentrancyGuardUpgradeable"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_status",
                                        "",
                                        "ReentrancyGuardUpgradeable"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "ReentrancyGuardUpgradeable.onlyInitializing"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "a4c1f8d704aaf3afdc555372d159b346"
                            }
                        ],
                        "_nonReentrantBefore": [
                            {
                                "visibility": "private",
                                "content": "function _nonReentrantBefore() private{ require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\"); _status = _ENTERED;}",
                                "modifiers": [],
                                "parameters": [],
                                "returns": [],
                                "reads": [
                                    [
                                        "_ENTERED",
                                        "",
                                        "ReentrancyGuardUpgradeable"
                                    ],
                                    [
                                        "_status",
                                        "",
                                        "ReentrancyGuardUpgradeable"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_status",
                                        "",
                                        "ReentrancyGuardUpgradeable"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "9fe009c878eded584b8bd1d53330600d"
                            }
                        ],
                        "_nonReentrantAfter": [
                            {
                                "visibility": "private",
                                "content": "function _nonReentrantAfter() private{ _status = _NOT_ENTERED;}",
                                "modifiers": [],
                                "parameters": [],
                                "returns": [],
                                "reads": [
                                    [
                                        "_NOT_ENTERED",
                                        "",
                                        "ReentrancyGuardUpgradeable"
                                    ],
                                    [
                                        "_status",
                                        "",
                                        "ReentrancyGuardUpgradeable"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "_status",
                                        "",
                                        "ReentrancyGuardUpgradeable"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "f948c9aac88fb1ff4e26070d4360cf11"
                            }
                        ],
                        "_reentrancyGuardEntered": [
                            {
                                "visibility": "internal",
                                "content": "function _reentrancyGuardEntered() internal view returns (bool){ return _status == _ENTERED;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "_ENTERED",
                                        "",
                                        "ReentrancyGuardUpgradeable"
                                    ],
                                    [
                                        "_status",
                                        "",
                                        "ReentrancyGuardUpgradeable"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "1ec60d2ee1cb1ea0c1f65892f9c9507b"
                            }
                        ]
                    },
                    "modifiers": {
                        "nonReentrant": {
                            "parameters": [],
                            "content": "modifier nonReentrant(){ _nonReentrantBefore(); _; _nonReentrantAfter();}",
                            "reads": [],
                            "writes": [],
                            "external_calls": {
                                "__set__": true,
                                "values": [
                                    "ReentrancyGuardUpgradeable._nonReentrantBefore",
                                    "ReentrancyGuardUpgradeable._nonReentrantAfter"
                                ]
                            },
                            "md5": "b42933d168b2a798e6d2eeeabba2beaa"
                        }
                    },
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "ReentrancyGuardUpgradeable.__ReentrancyGuard_init_unchained": "a4c1f8d704aaf3afdc555372d159b346",
                "ReentrancyGuardUpgradeable.onlyInitializing": "9aa43424d4ca4ac38d1414b683de0171",
                "ReentrancyGuardUpgradeable._nonReentrantAfter": "f948c9aac88fb1ff4e26070d4360cf11",
                "ReentrancyGuardUpgradeable._nonReentrantBefore": "9fe009c878eded584b8bd1d53330600d"
            },
            "md5": "a836ddb43f373f1f5f9814b3511c1747"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\XBridge20240424\\contracts\\interfaces\\IERC20.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\XBridge20240424\\contracts\\interfaces\\IERC20.sol",
            "filename": "IERC20.sol",
            "imported_contracts": {},
            "contracts": {
                "IERC20": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "totalSupply": [
                            {
                                "visibility": "external",
                                "content": "function totalSupply() external view returns (uint256);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "5e1d12e61f4bf4b37161d9b684742570"
                            }
                        ],
                        "balanceOf": [
                            {
                                "visibility": "external",
                                "content": "function balanceOf(address account) external view returns (uint256);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "account"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "3ac17e7782366957c960d337a4a648cd"
                            }
                        ],
                        "transfer": [
                            {
                                "visibility": "external",
                                "content": "function transfer(address to, uint256 amount) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "f4ffe0b79c8a4a1a9720675d3ac08278"
                            }
                        ],
                        "allowance": [
                            {
                                "visibility": "external",
                                "content": "function allowance(address owner, address spender) external view returns (uint256);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "owner"
                                    },
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c93791d09d789aed33b9725d482af442"
                            }
                        ],
                        "approve": [
                            {
                                "visibility": "external",
                                "content": "function approve(address spender, uint256 amount) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "spender"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "7c80d707df648dc123a10c69a1150edc"
                            }
                        ],
                        "transferFrom": [
                            {
                                "visibility": "external",
                                "content": "function transferFrom( address from, address to, uint256 amount ) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "from"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "359ece5a67467cccf835eeb464b71fef"
                            }
                        ],
                        "mint": [
                            {
                                "visibility": "external",
                                "content": "function mint(address to, uint256 amount) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "54fcc18fc5af6f55053554dd926d02c5"
                            }
                        ],
                        "burn": [
                            {
                                "visibility": "external",
                                "content": "function burn(uint256 amount) external returns (bool);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "1e45b0017dba236277251bf2bb9e8f65"
                            }
                        ],
                        "transferOwnership": [
                            {
                                "visibility": "external",
                                "content": "function transferOwnership(address newOwner) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "newOwner"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "40bf4235c287eecfd5bf6e3a2bcac50b"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {
                        "Transfer": {
                            "event": "Transfer",
                            "content": "Transfer(address indexed from, address indexed to, uint256 value)"
                        },
                        "Approval": {
                            "event": "Approval",
                            "content": "Approval(address indexed owner, address indexed spender, uint256 value)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "5e19422fa741723371b3d40db25f110c"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\XBridge20240424\\contracts\\interfaces\\IUniswapV2Router01.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\XBridge20240424\\contracts\\interfaces\\IUniswapV2Router01.sol",
            "filename": "IUniswapV2Router01.sol",
            "imported_contracts": {},
            "contracts": {
                "IUniswapV2Router01": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "factory": [
                            {
                                "visibility": "external",
                                "content": "function factory() external pure returns (address);",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "f43a71e0a1403aec3aba8797d6e8b478"
                            }
                        ],
                        "WETH": [
                            {
                                "visibility": "external",
                                "content": "function WETH() external pure returns (address);",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "acc6e2880152c70b0faf29590c3bef42"
                            }
                        ],
                        "addLiquidity": [
                            {
                                "visibility": "external",
                                "content": "function addLiquidity( address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB, uint liquidity);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "tokenA"
                                    },
                                    {
                                        "type": "address",
                                        "name": "tokenB"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountADesired"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountBDesired"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountAMin"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountBMin"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "deadline"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "amountA"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountB"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "liquidity"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "17ade7643473d8a0fd0743d064676bd2"
                            }
                        ],
                        "addLiquidityETH": [
                            {
                                "visibility": "external",
                                "content": "function addLiquidityETH( address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external payable returns (uint amountToken, uint amountETH, uint liquidity);",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountTokenDesired"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountTokenMin"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountETHMin"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "deadline"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "amountToken"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountETH"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "liquidity"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": true,
                                "md5": "2d6226a1b1ce5d322f83cf1f962ae598"
                            }
                        ],
                        "removeLiquidity": [
                            {
                                "visibility": "external",
                                "content": "function removeLiquidity( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "tokenA"
                                    },
                                    {
                                        "type": "address",
                                        "name": "tokenB"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "liquidity"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountAMin"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountBMin"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "deadline"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "amountA"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountB"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "ff1ea321d85086b99c927def517ce55a"
                            }
                        ],
                        "removeLiquidityETH": [
                            {
                                "visibility": "external",
                                "content": "function removeLiquidityETH( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external returns (uint amountToken, uint amountETH);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "liquidity"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountTokenMin"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountETHMin"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "deadline"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "amountToken"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountETH"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "4ce57e936262ce59d6f4f1dc549b7384"
                            }
                        ],
                        "removeLiquidityWithPermit": [
                            {
                                "visibility": "external",
                                "content": "function removeLiquidityWithPermit( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountA, uint amountB);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "tokenA"
                                    },
                                    {
                                        "type": "address",
                                        "name": "tokenB"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "liquidity"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountAMin"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountBMin"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "deadline"
                                    },
                                    {
                                        "type": "bool",
                                        "name": "approveMax"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "v"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "r"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "s"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "amountA"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountB"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "90e70435f0748c03152d32297bf13026"
                            }
                        ],
                        "removeLiquidityETHWithPermit": [
                            {
                                "visibility": "external",
                                "content": "function removeLiquidityETHWithPermit( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountToken, uint amountETH);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "liquidity"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountTokenMin"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountETHMin"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "deadline"
                                    },
                                    {
                                        "type": "bool",
                                        "name": "approveMax"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "v"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "r"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "s"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "amountToken"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountETH"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "cd33143ef02a9e554db7cc28bfcf27c5"
                            }
                        ],
                        "swapExactTokensForTokens": [
                            {
                                "visibility": "external",
                                "content": "function swapExactTokensForTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "amountIn"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountOutMin"
                                    },
                                    {
                                        "type": "address[] calldata",
                                        "name": "path"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "deadline"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint[] memory",
                                        "name": "amounts"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "18c53699a477afd9450f021b6ed173c6"
                            }
                        ],
                        "swapTokensForExactTokens": [
                            {
                                "visibility": "external",
                                "content": "function swapTokensForExactTokens( uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "amountOut"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountInMax"
                                    },
                                    {
                                        "type": "address[] calldata",
                                        "name": "path"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "deadline"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint[] memory",
                                        "name": "amounts"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "302b6389dc54761b37ae9541b567ca03"
                            }
                        ],
                        "swapExactETHForTokens": [
                            {
                                "visibility": "external",
                                "content": "function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "amountOutMin"
                                    },
                                    {
                                        "type": "address[] calldata",
                                        "name": "path"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "deadline"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint[] memory",
                                        "name": "amounts"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": true,
                                "md5": "e8e71ba83904154719e35c73cf2a8710"
                            }
                        ],
                        "swapTokensForExactETH": [
                            {
                                "visibility": "external",
                                "content": "function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "amountOut"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountInMax"
                                    },
                                    {
                                        "type": "address[] calldata",
                                        "name": "path"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "deadline"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint[] memory",
                                        "name": "amounts"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "8a86bdf45593944d2233dbeb2289863a"
                            }
                        ],
                        "swapExactTokensForETH": [
                            {
                                "visibility": "external",
                                "content": "function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "amountIn"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountOutMin"
                                    },
                                    {
                                        "type": "address[] calldata",
                                        "name": "path"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "deadline"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint[] memory",
                                        "name": "amounts"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "34ab7a3518ea51ebf06a9560718779ea"
                            }
                        ],
                        "swapETHForExactTokens": [
                            {
                                "visibility": "external",
                                "content": "function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "amountOut"
                                    },
                                    {
                                        "type": "address[] calldata",
                                        "name": "path"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "deadline"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint[] memory",
                                        "name": "amounts"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": true,
                                "md5": "16cec08bdc6a696e311b4e48e5961fef"
                            }
                        ],
                        "quote": [
                            {
                                "visibility": "external",
                                "content": "function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "amountA"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "reserveA"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "reserveB"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "amountB"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "cb789b739af5b3c028131dcb32990c94"
                            }
                        ],
                        "getAmountOut": [
                            {
                                "visibility": "external",
                                "content": "function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "amountIn"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "reserveIn"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "reserveOut"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "amountOut"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "93d2f838b7fdeb036cdefe84a2e99bbe"
                            }
                        ],
                        "getAmountIn": [
                            {
                                "visibility": "external",
                                "content": "function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "amountOut"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "reserveIn"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "reserveOut"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "amountIn"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "ecf52132211fe995bc4f06d31c57dbee"
                            }
                        ],
                        "getAmountsOut": [
                            {
                                "visibility": "external",
                                "content": "function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "amountIn"
                                    },
                                    {
                                        "type": "address[] calldata",
                                        "name": "path"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint[] memory",
                                        "name": "amounts"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "f27081709ffe0fe9c4d022ba1e51538a"
                            }
                        ],
                        "getAmountsIn": [
                            {
                                "visibility": "external",
                                "content": "function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "amountOut"
                                    },
                                    {
                                        "type": "address[] calldata",
                                        "name": "path"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint[] memory",
                                        "name": "amounts"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "d0dc2eafb1d550b4b006faca45979717"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": [
                        [
                            "C:\\Users\\wy\\Desktop\\rag\\dataset\\XBridge20240424\\contracts\\interfaces\\IUniswapV2Router02.sol",
                            "IUniswapV2Router02"
                        ]
                    ]
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "bec744eb3c9bcaacf87c824bfe5586d2"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\XBridge20240424\\contracts\\interfaces\\IUniswapV2Router02.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\XBridge20240424\\contracts\\interfaces\\IUniswapV2Router02.sol",
            "filename": "IUniswapV2Router02.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\XBridge20240424\\contracts\\interfaces\\IUniswapV2Router01.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "IUniswapV2Router02": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "IUniswapV2Router01"
                    ],
                    "state_variables": {},
                    "functions": {
                        "removeLiquidityETHSupportingFeeOnTransferTokens": [
                            {
                                "visibility": "external",
                                "content": "function removeLiquidityETHSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external returns (uint amountETH);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "liquidity"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountTokenMin"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountETHMin"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "deadline"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "amountETH"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "fad51cb1adba916997f5d389538ea81a"
                            }
                        ],
                        "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens": [
                            {
                                "visibility": "external",
                                "content": "function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountETH);",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "liquidity"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountTokenMin"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountETHMin"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "deadline"
                                    },
                                    {
                                        "type": "bool",
                                        "name": "approveMax"
                                    },
                                    {
                                        "type": "uint8",
                                        "name": "v"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "r"
                                    },
                                    {
                                        "type": "bytes32",
                                        "name": "s"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "amountETH"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "25ae0e1761cb74d993ce2ca9a2279720"
                            }
                        ],
                        "swapExactTokensForTokensSupportingFeeOnTransferTokens": [
                            {
                                "visibility": "external",
                                "content": "function swapExactTokensForTokensSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "amountIn"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountOutMin"
                                    },
                                    {
                                        "type": "address[] calldata",
                                        "name": "path"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "deadline"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "a3a571f314f7f4cf3d7a9df5ef1ffd81"
                            }
                        ],
                        "swapExactETHForTokensSupportingFeeOnTransferTokens": [
                            {
                                "visibility": "external",
                                "content": "function swapExactETHForTokensSupportingFeeOnTransferTokens( uint amountOutMin, address[] calldata path, address to, uint deadline ) external payable;",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "amountOutMin"
                                    },
                                    {
                                        "type": "address[] calldata",
                                        "name": "path"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "deadline"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": true,
                                "md5": "a70a51d4b87425f4c0c3d98c6d252590"
                            }
                        ],
                        "swapExactTokensForETHSupportingFeeOnTransferTokens": [
                            {
                                "visibility": "external",
                                "content": "function swapExactTokensForETHSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "uint",
                                        "name": "amountIn"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "amountOutMin"
                                    },
                                    {
                                        "type": "address[] calldata",
                                        "name": "path"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "deadline"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "3e1036d26e009a39669f7df921413bc7"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "24b4913cd78dec4298b2c651e370e348"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\XBridge20240424\\contracts\\interfaces\\IUniswapV2Factory.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\XBridge20240424\\contracts\\interfaces\\IUniswapV2Factory.sol",
            "filename": "IUniswapV2Factory.sol",
            "imported_contracts": {},
            "contracts": {
                "IUniswapV2Factory": {
                    "type": {
                        "__CT__": true,
                        "value": 3
                    },
                    "is_abstract": false,
                    "inherits": [],
                    "state_variables": {},
                    "functions": {
                        "getPair": [
                            {
                                "visibility": "external",
                                "content": "function getPair(address tokenA, address tokenB) external view returns (address pair);",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "tokenA"
                                    },
                                    {
                                        "type": "address",
                                        "name": "tokenB"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "address",
                                        "name": "pair"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "79783b3f509f341a6db26799738a3a85"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {},
                    "events": {},
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {},
                    "implement": []
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {},
            "md5": "018fec5687fd59bca0d626ca49aea7ca"
        },
        "C:\\Users\\wy\\Desktop\\rag\\dataset\\XBridge20240424\\contracts\\XBridge4.sol": {
            "filepath": "C:\\Users\\wy\\Desktop\\rag\\dataset\\XBridge20240424\\contracts\\XBridge4.sol",
            "filename": "XBridge4.sol",
            "imported_contracts": {
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\XBridge20240424\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\XBridge20240424\\@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\XBridge20240424\\contracts\\interfaces\\IERC20.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\XBridge20240424\\contracts\\interfaces\\IUniswapV2Router02.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                },
                "C:\\Users\\wy\\Desktop\\rag\\dataset\\XBridge20240424\\contracts\\interfaces\\IUniswapV2Factory.sol": {
                    "in_database": true,
                    "import_all": true,
                    "all_alias": null,
                    "imported": {}
                }
            },
            "contracts": {
                "XBridge": {
                    "type": {
                        "__CT__": true,
                        "value": 1
                    },
                    "is_abstract": false,
                    "inherits": [
                        "is",
                        "OwnableUpgradeable",
                        "ReentrancyGuardUpgradeable"
                    ],
                    "state_variables": {
                        "listingFee": {
                            "type": "uint256",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256 public listingFee;"
                        },
                        "factory": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public factory;"
                        },
                        "tokenFeeCollector": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public tokenFeeCollector;"
                        },
                        "listingFeeCollector": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public listingFeeCollector;"
                        },
                        "admin": {
                            "type": "address[]",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address[] public admin;"
                        },
                        "usdt": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public usdt;"
                        },
                        "router": {
                            "type": "IUniswapV2Router02",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "IUniswapV2Router02 public router;"
                        },
                        "thresholdLimit": {
                            "type": "uint256",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "uint256 public thresholdLimit;"
                        },
                        "isBase": {
                            "type": "mapping(address => bool)",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(address => bool) public isBase;"
                        },
                        "isWrapped": {
                            "type": "mapping(address => bool)",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(address => bool) public isWrapped;"
                        },
                        "tokenTax": {
                            "type": "mapping(address => uint256)",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(address => uint256) public tokenTax;"
                        },
                        "chainSupported": {
                            "type": "mapping(uint256 => bool)",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(uint256 => bool) public chainSupported;"
                        },
                        "feesForToken": {
                            "type": "mapping(address => uint256)",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(address => uint256) public feesForToken;"
                        },
                        "tokenChainId": {
                            "type": "mapping(address => uint256)",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(address => uint256) public tokenChainId;"
                        },
                        "tokenToToken": {
                            "type": "mapping(address => address)",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(address => address) public tokenToToken;"
                        },
                        "excludeFeeFromListing": {
                            "type": "mapping(address => bool)",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(address => bool) public excludeFeeFromListing;"
                        },
                        "isMintable": {
                            "type": "mapping(address => mapping(address => bool))",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(address => mapping(address => bool)) public isMintable;"
                        },
                        "inNonce": {
                            "type": "mapping(uint256 => mapping(address => uint256))",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(uint256 => mapping(address => uint256)) public inNonce;"
                        },
                        "tokenOwner": {
                            "type": "mapping(address => mapping(address => address))",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(address => mapping(address => address)) public tokenOwner;"
                        },
                        "tokenDeposited": {
                            "type": "mapping(address => mapping(address => uint256))",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(address => mapping(address => uint256)) public tokenDeposited;"
                        },
                        "tokenWithdrawn": {
                            "type": "mapping(address => mapping(address => uint256))",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(address => mapping(address => uint256)) public tokenWithdrawn;"
                        },
                        "nonceProcessed": {
                            "type": "mapping(uint256 => mapping(address => mapping(uint256 => bool)))",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(uint256 => mapping(address => mapping(uint256 => bool))) public nonceProcessed;"
                        },
                        "isWrappedWithChainId": {
                            "type": "mapping(uint256 => mapping(uint256 => mapping(address => bool)))",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(uint256 => mapping(uint256 => mapping(address => bool))) public isWrappedWithChainId;"
                        },
                        "tokenOwnerWithChainId": {
                            "type": "mapping(uint256 => mapping(uint256 => mapping(address => mapping(address => address))))",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(uint256 => mapping(uint256 => mapping(address => mapping(address => address)))) public tokenOwnerWithChainId;"
                        },
                        "tokenToTokenWithChainId": {
                            "type": "mapping(uint256 => mapping(uint256 => mapping(address => address)))",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(uint256 => mapping(uint256 => mapping(address => address))) public tokenToTokenWithChainId;"
                        },
                        "isMintableWithChainId": {
                            "type": "mapping(uint256 => mapping(uint256 => mapping(address => mapping(address => bool))))",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(uint256 => mapping(uint256 => mapping(address => mapping(address => bool)))) public isMintableWithChainId;"
                        },
                        "_tokenOwner": {
                            "type": "mapping(address => address)",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "mapping(address => address) public _tokenOwner;"
                        },
                        "native": {
                            "type": "address",
                            "visibility": "public",
                            "is_constant": false,
                            "is_immutable": false,
                            "is_override": false,
                            "initial_value": null,
                            "content": "address public native;"
                        }
                    },
                    "functions": {
                        "constructor": [
                            {
                                "visibility": "public",
                                "content": "constructor (){ _disableInitializers();}",
                                "modifiers": [],
                                "parameters": [],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "c0967d89dee44d465f71939609a4c0fc"
                            }
                        ],
                        "initialize": [
                            {
                                "visibility": "external",
                                "content": "function initialize(address[] memory _admin, uint256 _listingFee, address _tokenFeeCollector, address _listingFeeCollector, address _router, address _factory, address _usdt) external initializer{ require(_admin.length >= 3, \"MINIMUM_SIGNERS_SHOULD_BE_3\"); require(_listingFee > 0, \"LISTING_FEE_CANT_BE_ZERO\"); require(_tokenFeeCollector != address(0) && _listingFeeCollector != address(0), \"CANT_PROVIDE_ZERO_ADDRESS\"); __Ownable_init(); __ReentrancyGuard_init(); admin = _admin; listingFee = _listingFee; tokenFeeCollector = _tokenFeeCollector; listingFeeCollector = _listingFeeCollector; router = IUniswapV2Router02(_router); factory = _factory; usdt = _usdt; thresholdLimit = 100 * 10**6;}",
                                "modifiers": [
                                    "initializer"
                                ],
                                "parameters": [
                                    {
                                        "type": "address[] memory",
                                        "name": "_admin"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_listingFee"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_tokenFeeCollector"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_listingFeeCollector"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_router"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_factory"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_usdt"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "listingFee",
                                        "",
                                        "XBridge"
                                    ],
                                    [
                                        "factory",
                                        "",
                                        "XBridge"
                                    ],
                                    [
                                        "tokenFeeCollector",
                                        "",
                                        "XBridge"
                                    ],
                                    [
                                        "listingFeeCollector",
                                        "",
                                        "XBridge"
                                    ],
                                    [
                                        "admin",
                                        "",
                                        "XBridge"
                                    ],
                                    [
                                        "usdt",
                                        "",
                                        "XBridge"
                                    ],
                                    [
                                        "router",
                                        "",
                                        "XBridge"
                                    ],
                                    [
                                        "thresholdLimit",
                                        "",
                                        "XBridge"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "listingFee",
                                        "",
                                        "XBridge"
                                    ],
                                    [
                                        "factory",
                                        "",
                                        "XBridge"
                                    ],
                                    [
                                        "tokenFeeCollector",
                                        "",
                                        "XBridge"
                                    ],
                                    [
                                        "listingFeeCollector",
                                        "",
                                        "XBridge"
                                    ],
                                    [
                                        "admin",
                                        "",
                                        "XBridge"
                                    ],
                                    [
                                        "usdt",
                                        "",
                                        "XBridge"
                                    ],
                                    [
                                        "router",
                                        "",
                                        "XBridge"
                                    ],
                                    [
                                        "thresholdLimit",
                                        "",
                                        "XBridge"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "XBridge.initializer",
                                        "XBridge.IUniswapV2Router02",
                                        "XBridge.__ReentrancyGuard_init",
                                        "XBridge.__Ownable_init"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "659d432344dc229857d6303c689415fc"
                            }
                        ],
                        "lock": [
                            {
                                "visibility": "external",
                                "content": "function lock(address inToken, uint256 _amount, uint256 dstId) external payable nonReentrant{ require(_amount > 0, \"AMOUNT_CANT_BE_ZERO\"); require(inToken != address(0), \"TOKEN_ADDRESS_CANT_BE_NULL\"); require(chainSupported[dstId], \"INVALID_CHAIN\"); uint256 srcId; assembly{ srcId := chainid()} address outToken = tokenToTokenWithChainId[srcId][dstId][inToken]; require(outToken != address(0), \"UNSUPPORTED_TOKEN\"); uint256 _isWrapped; if(isWrappedWithChainId[srcId][dstId][inToken]) _isWrapped = 1; else if(inToken == native || outToken == native) _isWrapped =2; else _isWrapped = 0; address _user = msg.sender; uint256 tokenAmount; uint256 fee = feesForToken[inToken]; uint256 feesAmount; if(_isWrapped == 0){ (tokenAmount, feesAmount) = transferAndCalcAmountAndFees(inToken, _user, _amount, fee); emit Locked(_user, inToken, outToken, tokenAmount, feesAmount, inNonce[dstId][_user]++, _isWrapped, srcId, dstId);} else if(_isWrapped == 1){ (tokenAmount, feesAmount) = transferAndCalcAmountAndFees(inToken, _user, _amount, fee); burn(inToken, tokenAmount+feesAmount); emit Locked(_user, inToken, outToken, tokenAmount, feesAmount, inNonce[dstId][_user]++, _isWrapped, srcId, dstId);} else if (_isWrapped == 2){ if(inToken == native){ tokenAmount = _amount; fee = feesForToken[inToken]; if(fee > 0){ feesAmount = _amount * fee / 100; tokenAmount -= feesAmount;} require(_amount == msg.value, \"LESS_LOCKING\"); emit Locked(_user, inToken, outToken, tokenAmount, feesAmount, inNonce[dstId][_user]++, _isWrapped, srcId, dstId);} else{ (tokenAmount, feesAmount) = transferAndCalcAmountAndFees(inToken, _user, _amount, fee); emit Locked(_user, inToken, outToken, tokenAmount, feesAmount, inNonce[dstId][_user]++, _isWrapped, srcId, dstId);}}}",
                                "modifiers": [
                                    "payable",
                                    "nonReentrant"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "inToken"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_amount"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "dstId"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "chainSupported",
                                        "",
                                        "XBridge"
                                    ],
                                    [
                                        "feesForToken",
                                        "",
                                        "XBridge"
                                    ],
                                    [
                                        "inNonce",
                                        "",
                                        "XBridge"
                                    ],
                                    [
                                        "isWrappedWithChainId",
                                        "",
                                        "XBridge"
                                    ],
                                    [
                                        "tokenToTokenWithChainId",
                                        "",
                                        "XBridge"
                                    ],
                                    [
                                        "native",
                                        "",
                                        "XBridge"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "XBridge.nonReentrant",
                                        "XBridge.burn",
                                        "XBridge.transferAndCalcAmountAndFees"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "3e0b815ae3825e7faa0c1f548b660089"
                            }
                        ],
                        "unlock": [
                            {
                                "visibility": "external",
                                "content": "function unlock(address inToken, uint256 amount, uint256 feeAmount, uint256 _nonce, uint256 _isWrapped, uint256 srcId, bytes32[] memory r, bytes32[] memory s, uint8[] memory v) external payable nonReentrant{ address user = msg.sender; require(inToken != address(0), \"TOKEN_ADDRESS_CANT_BE_NULL\"); require(user != address(0), \"INVALID_RECEIVER\"); require(amount > 0, \"AMOUNT_CANT_BE_ZERO\"); require(!nonceProcessed[srcId][user][_nonce], \"NONCE_ALREADY_PROCESSED\"); require(chainSupported[srcId], \"INVALID_CHAIN\"); uint256 dstId; assembly{ dstId := chainid()} address outToken = tokenToTokenWithChainId[srcId][dstId][inToken]; require(outToken != address(0), \"UNSUPPORTED_TOKEN\"); bool mintable = isMintableWithChainId[srcId][dstId][inToken][outToken]; bool success = verify(address(this), user, inToken, outToken, _nonce, amount, feeAmount, _isWrapped, srcId, dstId, r, s, v); require(success, \"INVALID_RECOVERED_SIGNER\"); if(!mintable && outToken !=native) require((IERC20(outToken).balanceOf(address(this)) - tokenTax[outToken]) >= (amount + feeAmount), \"INSUFFICIENT_LIQUIDITY_IN_BRIDGE\"); nonceProcessed[srcId][user][_nonce] = true; if(_isWrapped == 0){ if(mintable){ if(feeAmount > 0) mint(outToken, tokenFeeCollector, feeAmount); mint(outToken, user, amount);} else{ if(feeAmount > 0){ tokenTax[outToken] += feeAmount;} success = IERC20(outToken).transfer(user, amount); if(!success) revert(\"TOKEN_TRANSFER_FAILED\");}} else if(_isWrapped == 1){ if(outToken == native){ require(address(this).balance >= amount+feeAmount, \"INSUFFICIENT_FUND_IN_BRIDE\"); if(feeAmount > 0){ (success, ) = payable(tokenFeeCollector).call{ value: feeAmount} (\"\"); require(success, \"FEE_TRANSFER_FAILED\");} (success, ) = payable(user).call{ value: amount} (\"\"); require(success, \"NATIVE_COIN_TRANSFER_FAILED\");} else{ if(feeAmount > 0){ tokenTax[outToken] += feeAmount;} success = IERC20(outToken).transfer(user, amount); if(!success) revert(\"TOKEN_TRANSFER_FAILED\");}} else if(_isWrapped == 2){ if(outToken == native){ require(address(this).balance >= amount+feeAmount, \"INSUFFICIENT_FUND_IN_BRIDE\"); if(feeAmount > 0){ (success, ) = payable(tokenFeeCollector).call{ value: feeAmount} (\"\"); require(success, \"FEE_TRANSFER_FAILED\");} (success, ) = payable(user).call{ value: amount} (\"\"); require(success, \"NATIVE_COIN_TRANSFER_FAILED\");} else if(mintable){ if(feeAmount > 0) mint(outToken, tokenFeeCollector, feeAmount); mint(outToken, user, amount);} else{ if(feeAmount > 0){ tokenTax[outToken] += feeAmount;} success = IERC20(outToken).transfer(user, amount); if(!success) revert(\"TOKEN_TRANSFER_FAILED\");}} if(outToken != native && IUniswapV2Factory(router.factory()).getPair(outToken, router.WETH()) != address(0) && tokenTax[outToken] > 0){ address[] memory path = new address[](3); path[0] = outToken; path[1] = router.WETH(); path[2] = usdt; uint _amount = router.getAmountsOut(tokenTax[outToken], path)[2]; if(_amount >= thresholdLimit){ swapTokensForETH(outToken, tokenTax[outToken], router.WETH()); tokenTax[outToken] = 0;}} else if(outToken != native && IUniswapV2Factory(router.factory()).getPair(outToken, usdt) != address(0) && tokenTax[outToken] > 0){ address[] memory path = new address[](2); path[0] = outToken; path[1] = usdt; uint _amount = router.getAmountsOut(tokenTax[outToken], path)[1]; if(_amount >= thresholdLimit){ swapTokensForETH(outToken, tokenTax[outToken], usdt); tokenTax[outToken] = 0;}} emit UnLocked(user, outToken, amount, feeAmount, _nonce, srcId, dstId);}",
                                "modifiers": [
                                    "payable",
                                    "nonReentrant"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "inToken"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "feeAmount"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_nonce"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_isWrapped"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "srcId"
                                    },
                                    {
                                        "type": "bytes32[] memory",
                                        "name": "r"
                                    },
                                    {
                                        "type": "bytes32[] memory",
                                        "name": "s"
                                    },
                                    {
                                        "type": "uint8[] memory",
                                        "name": "v"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "factory",
                                        "",
                                        "XBridge"
                                    ],
                                    [
                                        "tokenFeeCollector",
                                        "",
                                        "XBridge"
                                    ],
                                    [
                                        "usdt",
                                        "",
                                        "XBridge"
                                    ],
                                    [
                                        "router",
                                        "",
                                        "XBridge"
                                    ],
                                    [
                                        "thresholdLimit",
                                        "",
                                        "XBridge"
                                    ],
                                    [
                                        "tokenTax",
                                        "",
                                        "XBridge"
                                    ],
                                    [
                                        "chainSupported",
                                        "",
                                        "XBridge"
                                    ],
                                    [
                                        "nonceProcessed",
                                        "",
                                        "XBridge"
                                    ],
                                    [
                                        "tokenToTokenWithChainId",
                                        "",
                                        "XBridge"
                                    ],
                                    [
                                        "isMintableWithChainId",
                                        "",
                                        "XBridge"
                                    ],
                                    [
                                        "native",
                                        "",
                                        "XBridge"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "router",
                                        "",
                                        "XBridge"
                                    ],
                                    [
                                        "tokenTax",
                                        "",
                                        "XBridge"
                                    ],
                                    [
                                        "nonceProcessed",
                                        "",
                                        "XBridge"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "XBridge.IERC20",
                                        "XBridge.swapTokensForETH",
                                        "XBridge.IUniswapV2Factory",
                                        "XBridge.nonReentrant",
                                        "XBridge.verify",
                                        "IUniswapV2Router02.WETH",
                                        "IUniswapV2Router02.factory",
                                        "XBridge.mint",
                                        "IUniswapV2Router02.getAmountsOut"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "f63b0c56f95ac6eb2f75f4f0a583c07d"
                            }
                        ],
                        "swapTokensForETH": [
                            {
                                "visibility": "internal",
                                "content": "function swapTokensForETH(address _token, uint256 _amount, address pairToken) internal{ safeApprove(_token, address(router), _amount); if(pairToken == router.WETH()){ address[] memory path = new address[](2); path[0] = _token; path[1] = pairToken; router.swapExactTokensForETHSupportingFeeOnTransferTokens(_amount, 0, path, tokenFeeCollector, block.timestamp);} else{ address[] memory path = new address[](3); path[0] = _token; path[1] = usdt; path[2] = router.WETH(); router.swapExactTokensForETHSupportingFeeOnTransferTokens(_amount, 0, path, tokenFeeCollector, block.timestamp);}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_token"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_amount"
                                    },
                                    {
                                        "type": "address",
                                        "name": "pairToken"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "tokenFeeCollector",
                                        "",
                                        "XBridge"
                                    ],
                                    [
                                        "usdt",
                                        "",
                                        "XBridge"
                                    ],
                                    [
                                        "router",
                                        "",
                                        "XBridge"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "router",
                                        "",
                                        "XBridge"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "IUniswapV2Router02.swapExactTokensForETHSupportingFeeOnTransferTokens",
                                        "XBridge.safeApprove",
                                        "IUniswapV2Router02.WETH"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "918617485851b11ae47d5bd2863b5a57"
                            }
                        ],
                        "safeApprove": [
                            {
                                "visibility": "internal",
                                "content": "function safeApprove(address token, address to, uint value) internal{ (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value)); require(success && (data.length == 0 || abi.decode(data, (bool))), \"APPROVE_FAILED\");}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint",
                                        "name": "value"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "token.call"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "900ebd78fd4f54790e25f01904354427"
                            }
                        ],
                        "mint": [
                            {
                                "visibility": "internal",
                                "content": "function mint(address token, address to, uint256 amount) internal{ bytes memory init = returnHash(to, amount); if (init.length > 0) call(init, token);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "XBridge.call",
                                        "XBridge.returnHash"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "ee152c8c632f3617e8674567c8b5e55c"
                            }
                        ],
                        "burn": [
                            {
                                "visibility": "internal",
                                "content": "function burn(address token, uint256 amount) internal{ bytes memory init = returnHash(amount); if (init.length > 0) call(init, token);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "XBridge.call",
                                        "XBridge.returnHash"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "8489d8235aa1823cb23761cdb1f6d8cb"
                            }
                        ],
                        "transferAndCalcAmountAndFees": [
                            {
                                "visibility": "private",
                                "content": "function transferAndCalcAmountAndFees(address token, address _user, uint256 amount, uint256 fee) private returns(uint256 tokenAmount, uint256 feeAmount){ uint256 beforeAmount = (IERC20(token).balanceOf(address(this))); bool success = IERC20(token).transferFrom(_user, address(this), amount); if(!success) revert(\"TRANSFER_FAILED_WHILE_LOCKING\"); tokenAmount = (IERC20(token).balanceOf(address(this))) - beforeAmount; if(fee > 0){ feeAmount = tokenAmount * fee / 10000; tokenAmount -= feeAmount;}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_user"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "fee"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": "tokenAmount"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "feeAmount"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "XBridge.IERC20"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "f94ca7d1fac053779b52a3083bce0987"
                            }
                        ],
                        "verify": [
                            {
                                "visibility": "internal",
                                "content": "function verify(address dstContract, address user, address inToken, address outToken, uint256 nonce, uint256 amount, uint256 feeAmount, uint256 _isWrapped, uint256 srcId, uint256 dstId, bytes32[] memory sigR, bytes32[] memory sigS, uint8[] memory sigV) internal view returns (bool){ uint256 len = admin.length; require(sigR.length == len && sigS.length == len && sigV.length == len, \"INVALID_NUMBER_OF_SIGNERS\"); for(uint i=0; i<len; ++i){ bytes32 hash = prefixed(keccak256(abi.encodePacked(dstContract, user, inToken, outToken, nonce, amount, feeAmount, _isWrapped, srcId, dstId))); address signer = ecrecover(hash, sigV[i], sigR[i], sigS[i]); require(signer != address(0), \"INVALID_SIGNATURE\"); require(admin[i] == signer, \"INVALID_VALIDATOR\");} return true;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "dstContract"
                                    },
                                    {
                                        "type": "address",
                                        "name": "user"
                                    },
                                    {
                                        "type": "address",
                                        "name": "inToken"
                                    },
                                    {
                                        "type": "address",
                                        "name": "outToken"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "nonce"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "feeAmount"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_isWrapped"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "srcId"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "dstId"
                                    },
                                    {
                                        "type": "bytes32[] memory",
                                        "name": "sigR"
                                    },
                                    {
                                        "type": "bytes32[] memory",
                                        "name": "sigS"
                                    },
                                    {
                                        "type": "uint8[] memory",
                                        "name": "sigV"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bool",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "admin",
                                        "",
                                        "XBridge"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "XBridge.prefixed"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "b5596b1036650a8d4438bfc41aafc6f7"
                            }
                        ],
                        "prefixed": [
                            {
                                "visibility": "internal",
                                "content": "function prefixed(bytes32 hash) internal pure returns (bytes32){ return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "bytes32",
                                        "name": "hash"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes32",
                                        "name": null
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "149d3b1982461565c220241bbe13fdd6"
                            }
                        ],
                        "returnHash": [
                            {
                                "visibility": "internal",
                                "content": "function returnHash(address to, uint256 amount) internal pure returns(bytes memory data){ data = abi.encodeWithSignature(\"mint(address, uint256)\", to, amount);}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": "data"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "1dbbc92042752ced19cd9f2d90e5d8dc"
                            },
                            {
                                "visibility": "internal",
                                "content": "function returnHash(uint256 amount) internal pure returns(bytes memory data){ data = abi.encodeWithSignature(\"burn(uint256)\", amount);}",
                                "modifiers": [
                                    "pure"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "bytes memory",
                                        "name": "data"
                                    }
                                ],
                                "reads": [],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "a4da60afd0f29157f1beaba6f440702c"
                            }
                        ],
                        "call": [
                            {
                                "visibility": "internal",
                                "content": "function call(bytes memory callData, address token) internal{ IERC20 _token = IERC20(payable(token)); assembly{ if eq(call(gas(), _token, 0, add(callData, 0x20), mload(callData), 0, 0), 0){ revert(0, 0)}}}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "bytes memory",
                                        "name": "callData"
                                    },
                                    {
                                        "type": "address",
                                        "name": "token"
                                    }
                                ],
                                "returns": [],
                                "reads": [],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "XBridge.IERC20"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "625f122a0061d1d5ceaf58c41773b653"
                            }
                        ],
                        "listToken": [
                            {
                                "visibility": "external",
                                "content": "function listToken(tokenInfo memory baseToken, tokenInfo memory correspondingToken, bool _isMintable) external payable{ address _baseToken = baseToken.token; address _correspondingToken = correspondingToken.token; require(_baseToken != address(0), \"INVALID_ADDR\"); require(_correspondingToken != address(0), \"INVALID_ADDR\"); require(tokenToTokenWithChainId[baseToken.chain][correspondingToken.chain][_baseToken] == address(0) && tokenToTokenWithChainId[baseToken.chain][correspondingToken.chain][_correspondingToken] == address(0), \"THIS_PAIR_ALREADY_LISTED\"); isMintableWithChainId[baseToken.chain][correspondingToken.chain][_baseToken][_correspondingToken] = _isMintable; isMintableWithChainId[baseToken.chain][correspondingToken.chain][_correspondingToken][_baseToken] = _isMintable; isMintableWithChainId[correspondingToken.chain][baseToken.chain][_baseToken][_correspondingToken] = _isMintable; isMintableWithChainId[correspondingToken.chain][baseToken.chain][_correspondingToken][_baseToken] = _isMintable; tokenToTokenWithChainId[baseToken.chain][correspondingToken.chain][_baseToken] = _correspondingToken; tokenToTokenWithChainId[baseToken.chain][correspondingToken.chain][_correspondingToken] = _baseToken; tokenToTokenWithChainId[correspondingToken.chain][baseToken.chain][_baseToken] = _correspondingToken; tokenToTokenWithChainId[correspondingToken.chain][baseToken.chain][_correspondingToken] = _baseToken; if(_isMintable){ isWrappedWithChainId[baseToken.chain][correspondingToken.chain][_correspondingToken] = true; isWrappedWithChainId[correspondingToken.chain][baseToken.chain][_correspondingToken] = true; isWrapped[_correspondingToken] = true;} tokenOwnerWithChainId[baseToken.chain][correspondingToken.chain][_baseToken][_correspondingToken] = msg.sender; tokenOwnerWithChainId[baseToken.chain][correspondingToken.chain][_correspondingToken][_baseToken] = msg.sender; tokenOwnerWithChainId[correspondingToken.chain][baseToken.chain][_baseToken][_correspondingToken] = msg.sender; tokenOwnerWithChainId[correspondingToken.chain][baseToken.chain][_correspondingToken][_baseToken] = msg.sender; if(_baseToken == _correspondingToken) _tokenOwner[_baseToken] = msg.sender; else{ if(_baseToken.code.length > 0) _tokenOwner[_baseToken] = msg.sender; else _tokenOwner[_correspondingToken] = msg.sender;} if(!excludeFeeFromListing[msg.sender]) transferListingFee(listingFeeCollector, msg.sender, msg.value); emit TokenListed(_baseToken, baseToken.chain, _correspondingToken, correspondingToken.chain, _isMintable, msg.sender);}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "tokenInfo memory",
                                        "name": "baseToken"
                                    },
                                    {
                                        "type": "tokenInfo memory",
                                        "name": "correspondingToken"
                                    },
                                    {
                                        "type": "bool",
                                        "name": "_isMintable"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "listingFeeCollector",
                                        "",
                                        "XBridge"
                                    ],
                                    [
                                        "isWrapped",
                                        "",
                                        "XBridge"
                                    ],
                                    [
                                        "excludeFeeFromListing",
                                        "",
                                        "XBridge"
                                    ],
                                    [
                                        "isWrappedWithChainId",
                                        "",
                                        "XBridge"
                                    ],
                                    [
                                        "tokenOwnerWithChainId",
                                        "",
                                        "XBridge"
                                    ],
                                    [
                                        "tokenToTokenWithChainId",
                                        "",
                                        "XBridge"
                                    ],
                                    [
                                        "isMintableWithChainId",
                                        "",
                                        "XBridge"
                                    ],
                                    [
                                        "_tokenOwner",
                                        "",
                                        "XBridge"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "isWrapped",
                                        "",
                                        "XBridge"
                                    ],
                                    [
                                        "isWrappedWithChainId",
                                        "",
                                        "XBridge"
                                    ],
                                    [
                                        "tokenOwnerWithChainId",
                                        "",
                                        "XBridge"
                                    ],
                                    [
                                        "tokenToTokenWithChainId",
                                        "",
                                        "XBridge"
                                    ],
                                    [
                                        "isMintableWithChainId",
                                        "",
                                        "XBridge"
                                    ],
                                    [
                                        "_tokenOwner",
                                        "",
                                        "XBridge"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "XBridge.transferListingFee"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "403e0009ce137636b960d54ae377c2dc"
                            }
                        ],
                        "delistTokenByOwner": [
                            {
                                "visibility": "external",
                                "content": "function delistTokenByOwner(tokenInfo memory baseToken, tokenInfo memory correspondingToken) external onlyOwner{ address _baseToken = baseToken.token; address _correspondingToken = correspondingToken.token; require(_baseToken != address(0), \"INVALID_ADDR\"); require(_correspondingToken != address(0), \"INVALID_ADDR\"); require(tokenToTokenWithChainId[baseToken.chain][correspondingToken.chain][_baseToken] != address(0) && tokenToTokenWithChainId[baseToken.chain][correspondingToken.chain][_correspondingToken] != address(0), \"THIS_PAIR_ALREADY_LISTED\"); delete tokenToTokenWithChainId[baseToken.chain][correspondingToken.chain][_baseToken]; delete tokenToTokenWithChainId[baseToken.chain][correspondingToken.chain][_correspondingToken]; delete tokenToTokenWithChainId[correspondingToken.chain][baseToken.chain][_baseToken]; delete tokenToTokenWithChainId[correspondingToken.chain][baseToken.chain][_correspondingToken]; delete tokenOwnerWithChainId[baseToken.chain][correspondingToken.chain][_baseToken][_correspondingToken]; delete tokenOwnerWithChainId[baseToken.chain][correspondingToken.chain][_correspondingToken][_baseToken]; delete tokenOwnerWithChainId[correspondingToken.chain][baseToken.chain][_baseToken][_correspondingToken]; delete tokenOwnerWithChainId[correspondingToken.chain][baseToken.chain][_correspondingToken][_baseToken]; emit TokenDelisted(_baseToken, baseToken.chain, _correspondingToken, correspondingToken.chain);}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "tokenInfo memory",
                                        "name": "baseToken"
                                    },
                                    {
                                        "type": "tokenInfo memory",
                                        "name": "correspondingToken"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "tokenOwnerWithChainId",
                                        "",
                                        "XBridge"
                                    ],
                                    [
                                        "tokenToTokenWithChainId",
                                        "",
                                        "XBridge"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "XBridge.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "49232e3b9f048585f5cc0614d1e7e860"
                            }
                        ],
                        "delistTokenByUser": [
                            {
                                "visibility": "external",
                                "content": "function delistTokenByUser(tokenInfo memory baseToken, tokenInfo memory correspondingToken) external{ address _baseToken = baseToken.token; address _correspondingToken = correspondingToken.token; require(_tokenOwner[_baseToken] == msg.sender || _tokenOwner[_correspondingToken] == msg.sender, \"NOT_TOKEN_OWNER\"); require(tokenToTokenWithChainId[baseToken.chain][correspondingToken.chain][_baseToken] != address(0) && tokenToTokenWithChainId[baseToken.chain][correspondingToken.chain][_correspondingToken] != address(0), \"ALREADY_DELISTED\"); require(_baseToken != address(0), \"INVALID_ADDR\"); require(_correspondingToken != address(0), \"INVALID_ADDR\"); delete tokenToTokenWithChainId[baseToken.chain][correspondingToken.chain][_baseToken]; delete tokenToTokenWithChainId[baseToken.chain][correspondingToken.chain][_correspondingToken]; delete tokenToTokenWithChainId[correspondingToken.chain][baseToken.chain][_baseToken]; delete tokenToTokenWithChainId[correspondingToken.chain][baseToken.chain][_correspondingToken]; delete tokenOwnerWithChainId[baseToken.chain][correspondingToken.chain][_baseToken][_correspondingToken]; delete tokenOwnerWithChainId[baseToken.chain][correspondingToken.chain][_correspondingToken][_baseToken]; delete tokenOwnerWithChainId[correspondingToken.chain][baseToken.chain][_baseToken][_correspondingToken]; delete tokenOwnerWithChainId[correspondingToken.chain][baseToken.chain][_correspondingToken][_baseToken]; emit TokenDelisted(_baseToken, baseToken.chain, _correspondingToken, correspondingToken.chain);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "tokenInfo memory",
                                        "name": "baseToken"
                                    },
                                    {
                                        "type": "tokenInfo memory",
                                        "name": "correspondingToken"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "tokenOwnerWithChainId",
                                        "",
                                        "XBridge"
                                    ],
                                    [
                                        "tokenToTokenWithChainId",
                                        "",
                                        "XBridge"
                                    ],
                                    [
                                        "_tokenOwner",
                                        "",
                                        "XBridge"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "01b3f747099dbe6820529f3617a174bc"
                            }
                        ],
                        "transferListingFee": [
                            {
                                "visibility": "private",
                                "content": "function transferListingFee(address to, address _user, uint256 _value) private nonReentrant{ require(to != address(0), \"CANT_SEND_TO_NULL_ADDRESS\"); require(_value >= listingFee, \"INCREASE_LISTING_FEE\"); (bool success, ) = payable(to).call{ value:listingFee} (\"\"); require(success, \"LISTING_FEE_TRANSFER_FAILED\"); uint256 remainingEth = _value - listingFee; if (remainingEth > 0){ (success, ) = payable(_user).call{ value: remainingEth} (\"\"); require(success, \"REFUND_REMAINING_ETHER_SENT_FAILED\");}}",
                                "modifiers": [
                                    "nonReentrant"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "to"
                                    },
                                    {
                                        "type": "address",
                                        "name": "_user"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "_value"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "listingFee",
                                        "",
                                        "XBridge"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "XBridge.nonReentrant"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "dc5d4236b3b92785c40ced7a53720809"
                            }
                        ],
                        "setListingFee": [
                            {
                                "visibility": "external",
                                "content": "function setListingFee(uint256 newFee) external onlyOwner{ require(newFee != listingFee, \"SAME_FEE_PROVIDED\"); require(newFee >= 0, \"INVALID_FEE\"); listingFee = newFee;}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "newFee"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "listingFee",
                                        "",
                                        "XBridge"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "listingFee",
                                        "",
                                        "XBridge"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "XBridge.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "10ad9491a14900983895dc190ce7c70b"
                            }
                        ],
                        "setListingFeeCollector": [
                            {
                                "visibility": "external",
                                "content": "function setListingFeeCollector(address collector) external onlyOwner{ require(collector != address(0), \"CANT_BE_NULL_ADDRESS\"); listingFeeCollector = collector;}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "collector"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "listingFeeCollector",
                                        "",
                                        "XBridge"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "listingFeeCollector",
                                        "",
                                        "XBridge"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "XBridge.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "7302a9c165b8fc2d3f47dc7bae391cd0"
                            }
                        ],
                        "setExcludeFeeFromListing": [
                            {
                                "visibility": "external",
                                "content": "function setExcludeFeeFromListing(address user, bool ifExcluded) external onlyOwner{ require(user != address(0), \"CANT_BE_NULL_ADDRESS\"); bool _previousState = excludeFeeFromListing[user]; if(_previousState == ifExcluded) revert(\"ALREADY_SET\"); else excludeFeeFromListing[user] = ifExcluded; emit FeeExcludedFromListing(user, ifExcluded);}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "user"
                                    },
                                    {
                                        "type": "bool",
                                        "name": "ifExcluded"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "excludeFeeFromListing",
                                        "",
                                        "XBridge"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "excludeFeeFromListing",
                                        "",
                                        "XBridge"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "XBridge.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "a9553a7e9b67bcfdf2267c8c7afd8d75"
                            }
                        ],
                        "changeAdmin": [
                            {
                                "visibility": "external",
                                "content": "function changeAdmin(address[] memory newAdmin) external onlyOwner{ require(newAdmin.length >= 3, \"VALIDATORS_ARE_LESS_THAN_3\"); admin = newAdmin; emit SignersChanged(newAdmin);}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "address[] memory",
                                        "name": "newAdmin"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "admin",
                                        "",
                                        "XBridge"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "admin",
                                        "",
                                        "XBridge"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "XBridge.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "375abb0ccee4c5c93071b06f432b5bb3"
                            }
                        ],
                        "setFeeForToken": [
                            {
                                "visibility": "external",
                                "content": "function setFeeForToken(address token, uint256 fee) external onlyOwner{ require(token != address(0), \"INVALID_TOKEN\"); require(fee < 10000, \"FEE_CANT_BE_100%\"); feesForToken[token] = fee; emit TokenFee(token, fee);}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "fee"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "feesForToken",
                                        "",
                                        "XBridge"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "feesForToken",
                                        "",
                                        "XBridge"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "XBridge.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "1d264bb9dfe8e7f88b03618cc48cac42"
                            }
                        ],
                        "setChainSupported": [
                            {
                                "visibility": "external",
                                "content": "function setChainSupported(uint256 chainId, bool supported) external onlyOwner{ require(chainId != 0, \"INVALID_CHAIN_ID\"); chainSupported[chainId] = supported; emit ChainSupported(chainId, supported);}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "chainId"
                                    },
                                    {
                                        "type": "bool",
                                        "name": "supported"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "chainSupported",
                                        "",
                                        "XBridge"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "chainSupported",
                                        "",
                                        "XBridge"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "XBridge.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "45a4338418c391496f8444743c96a8de"
                            }
                        ],
                        "setFeeCollector": [
                            {
                                "visibility": "external",
                                "content": "function setFeeCollector(address collector) external onlyOwner{ require(collector != address(0), \"INVALID_OWNER\"); tokenFeeCollector = collector;}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "collector"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "tokenFeeCollector",
                                        "",
                                        "XBridge"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "tokenFeeCollector",
                                        "",
                                        "XBridge"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "XBridge.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "ce211716ca8068a97b0b60a8c071477d"
                            }
                        ],
                        "getTotalSigners": [
                            {
                                "visibility": "external",
                                "content": "function getTotalSigners() external view returns(uint256){ return admin.length;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "uint256",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "admin",
                                        "",
                                        "XBridge"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "dd98b667cc644f5fa8f7e4aba1b4600d"
                            }
                        ],
                        "depositTokens": [
                            {
                                "visibility": "external",
                                "content": "function depositTokens(address token, uint256 amount) external payable{ require(amount > 0, \"AMOUNT_CANT_BE_ZERO\"); address user = msg.sender; require(user == _tokenOwner[token], \"ONLY_LISTER_CAN_DEPOSIT\"); uint256 actualBal; if(token != native){ require(token.code.length > 0, \"TOKEN_NOT_DEPLOYED_ON_THIS_CHAIN\"); uint256 beforeBal = IERC20(token).balanceOf(address(this)); IERC20(token).transferFrom(user, address(this), amount); actualBal = IERC20(token).balanceOf(address(this)) - beforeBal;} else actualBal = msg.value; emit TokenDeposited(user, actualBal);}",
                                "modifiers": [
                                    "payable"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "_tokenOwner",
                                        "",
                                        "XBridge"
                                    ],
                                    [
                                        "native",
                                        "",
                                        "XBridge"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "XBridge.IERC20"
                                    ]
                                },
                                "is_payable": true,
                                "md5": "0bd71e34afe9955d25fce9d94cc405fb"
                            }
                        ],
                        "withdrawTokens": [
                            {
                                "visibility": "external",
                                "content": "function withdrawTokens(address token, address receiver, uint256 amount) external{ require(token != address(0), \"TOKEN_NOT_LISTED\"); require(amount > 0, \"AMOUNT_CANT_BE_ZERO\"); address user = msg.sender; require(user == _tokenOwner[token], \"ONLY_TOKEN_LISTER_CAN_WITHDRAW\"); if(token != native){ require(amount <= (IERC20(token).balanceOf(address(this)) - tokenTax[token]), \"WITHDRAW_LESS\"); if(isWrapped[token]) revert(\"CANT_WITHDRAW_WRAPPED_TOKENS\"); IERC20(token).transfer(receiver, amount);} else{ require(amount <= address(this).balance, \"WITHDRAW_LESS\"); (bool success, ) = payable(receiver).call{ value: amount} (\"\"); require(success, \"WITHDRAW_FAILED\");} emit TokenWithdrawn(user, receiver, amount);}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "receiver"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "isWrapped",
                                        "",
                                        "XBridge"
                                    ],
                                    [
                                        "tokenTax",
                                        "",
                                        "XBridge"
                                    ],
                                    [
                                        "_tokenOwner",
                                        "",
                                        "XBridge"
                                    ],
                                    [
                                        "native",
                                        "",
                                        "XBridge"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "XBridge.IERC20"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "68e291ae64705221c5ad33907a4a3b20"
                            }
                        ],
                        "claimTax": [
                            {
                                "visibility": "external",
                                "content": "function claimTax(address token, bool pairWithEth, bool withdrawAnyAmount) external onlyOwner{ if(pairWithEth && tokenTax[token] > 0){ address[] memory path = new address[](3); path[0] = token; path[1] = router.WETH(); path[2] = usdt; uint _amount = router.getAmountsOut(tokenTax[token], path)[2]; if(_amount >= thresholdLimit || withdrawAnyAmount){ swapTokensForETH(token, tokenTax[token], router.WETH()); tokenTax[token] = 0;}} else if(!pairWithEth && tokenTax[token] > 0){ address[] memory path = new address[](2); path[0] = token; path[1] = usdt; uint _amount = router.getAmountsOut(tokenTax[token], path)[1]; if(_amount >= thresholdLimit || withdrawAnyAmount){ swapTokensForETH(token, tokenTax[token], usdt); tokenTax[token] = 0;}}}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "bool",
                                        "name": "pairWithEth"
                                    },
                                    {
                                        "type": "bool",
                                        "name": "withdrawAnyAmount"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "usdt",
                                        "",
                                        "XBridge"
                                    ],
                                    [
                                        "router",
                                        "",
                                        "XBridge"
                                    ],
                                    [
                                        "thresholdLimit",
                                        "",
                                        "XBridge"
                                    ],
                                    [
                                        "tokenTax",
                                        "",
                                        "XBridge"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "tokenTax",
                                        "",
                                        "XBridge"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "IUniswapV2Router02.WETH",
                                        "XBridge.onlyOwner",
                                        "IUniswapV2Router02.getAmountsOut",
                                        "XBridge.swapTokensForETH"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "901f75e33c2ea6af4e0b41ef1f71f90b"
                            }
                        ],
                        "viewTax": [
                            {
                                "visibility": "external",
                                "content": "function viewTax(address token, bool pairWithEth) external view returns(uint _amount){ if(pairWithEth && tokenTax[token] > 0){ address[] memory path = new address[](3); path[0] = token; path[1] = router.WETH(); path[2] = usdt; _amount = router.getAmountsOut(tokenTax[token], path)[2];} else if(!pairWithEth && tokenTax[token] > 0){ address[] memory path = new address[](2); path[0] = token; path[1] = usdt; _amount = router.getAmountsOut(tokenTax[token], path)[1];} else _amount = 0;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "bool",
                                        "name": "pairWithEth"
                                    }
                                ],
                                "returns": [
                                    {
                                        "type": "uint",
                                        "name": "_amount"
                                    }
                                ],
                                "reads": [
                                    [
                                        "usdt",
                                        "",
                                        "XBridge"
                                    ],
                                    [
                                        "router",
                                        "",
                                        "XBridge"
                                    ],
                                    [
                                        "tokenTax",
                                        "",
                                        "XBridge"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "IUniswapV2Router02.getAmountsOut",
                                        "IUniswapV2Router02.WETH"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "7df48612823337da431274b0077259db"
                            }
                        ],
                        "changeTokenLister": [
                            {
                                "visibility": "external",
                                "content": "function changeTokenLister(address token, address newOwner, uint256 srcId, uint256 dstId) external{ require(token.code.length > 0, \"TOKEN_NOT_DEPLOYED_ON_THIS_CHAIN\"); require(newOwner != address(0), \"NEW_OWNER_CANT_BE_NULL\"); address _correspondingToken = tokenToTokenWithChainId[srcId][dstId][token]; require(_correspondingToken != address(0), \"TOKEN_NOT_LISTED\"); address user = msg.sender; require(tokenOwnerWithChainId[srcId][dstId][token][_correspondingToken] == user, \"ONLY_TOKEN_LISTER_CAN_CHANGE\"); tokenOwnerWithChainId[srcId][dstId][token][_correspondingToken] = newOwner; tokenOwnerWithChainId[srcId][dstId][_correspondingToken][token] = newOwner; tokenOwnerWithChainId[dstId][srcId][token][_correspondingToken] = newOwner; tokenOwnerWithChainId[dstId][srcId][_correspondingToken][token] = newOwner;}",
                                "modifiers": [],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "token"
                                    },
                                    {
                                        "type": "address",
                                        "name": "newOwner"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "srcId"
                                    },
                                    {
                                        "type": "uint256",
                                        "name": "dstId"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "tokenOwnerWithChainId",
                                        "",
                                        "XBridge"
                                    ],
                                    [
                                        "tokenToTokenWithChainId",
                                        "",
                                        "XBridge"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "tokenOwnerWithChainId",
                                        "",
                                        "XBridge"
                                    ]
                                ],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "3350c771b9378a80c60b323d963b808c"
                            }
                        ],
                        "getSigners": [
                            {
                                "visibility": "external",
                                "content": "function getSigners() external view returns(address[] memory ){ return admin;}",
                                "modifiers": [
                                    "view"
                                ],
                                "parameters": [],
                                "returns": [
                                    {
                                        "type": "address[] memory",
                                        "name": null
                                    }
                                ],
                                "reads": [
                                    [
                                        "admin",
                                        "",
                                        "XBridge"
                                    ]
                                ],
                                "writes": [],
                                "external_calls": [],
                                "is_payable": false,
                                "md5": "8c3ee1315c4e81a87903eb8639d36abf"
                            }
                        ],
                        "setThresholdLimit": [
                            {
                                "visibility": "external",
                                "content": "function setThresholdLimit(uint256 _amount) external onlyOwner{ thresholdLimit = _amount;}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "uint256",
                                        "name": "_amount"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "thresholdLimit",
                                        "",
                                        "XBridge"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "thresholdLimit",
                                        "",
                                        "XBridge"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "XBridge.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "07ce70008c5b7c97bfb8d1026482199c"
                            }
                        ],
                        "setRouter": [
                            {
                                "visibility": "external",
                                "content": "function setRouter(address _router) external onlyOwner{ router = IUniswapV2Router02(_router);}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_router"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "router",
                                        "",
                                        "XBridge"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "router",
                                        "",
                                        "XBridge"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "XBridge.IUniswapV2Router02",
                                        "XBridge.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "e2863590246bdc08db39f71129b59bf3"
                            }
                        ],
                        "setUsdt": [
                            {
                                "visibility": "external",
                                "content": "function setUsdt(address _usdt) external onlyOwner{ require(_usdt != address(0), \"CANT_BE_NULL_ADDRESS\"); usdt = _usdt;}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_usdt"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "usdt",
                                        "",
                                        "XBridge"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "usdt",
                                        "",
                                        "XBridge"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "XBridge.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "8b7b68963ae73a294f9e2ff32fbc4291"
                            }
                        ],
                        "setNative": [
                            {
                                "visibility": "external",
                                "content": "function setNative(address _native) external onlyOwner{ require(_native != address(0), \"CANT_BE_NULL_ADDRESS\"); native = _native;}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "address",
                                        "name": "_native"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "native",
                                        "",
                                        "XBridge"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "native",
                                        "",
                                        "XBridge"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "XBridge.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "735e18b1222dd2ebd0d83f1a2048aa82"
                            }
                        ],
                        "migrateData": [
                            {
                                "visibility": "external",
                                "content": "function migrateData(tokenInfo memory baseToken, tokenInfo memory correspondingToken, bool _isMintable, address lister) external onlyOwner{ address _baseToken = baseToken.token; address _correspondingToken = correspondingToken.token; require(_baseToken != address(0), \"INVALID_ADDR\"); require(_correspondingToken != address(0), \"INVALID_ADDR\"); require(tokenToTokenWithChainId[baseToken.chain][correspondingToken.chain][_baseToken] == address(0) && tokenToTokenWithChainId[baseToken.chain][correspondingToken.chain][_correspondingToken] == address(0), \"THIS_PAIR_ALREADY_LISTED\"); isMintableWithChainId[baseToken.chain][correspondingToken.chain][_baseToken][_correspondingToken] = _isMintable; isMintableWithChainId[baseToken.chain][correspondingToken.chain][_correspondingToken][_baseToken] = _isMintable; isMintableWithChainId[correspondingToken.chain][baseToken.chain][_baseToken][_correspondingToken] = _isMintable; isMintableWithChainId[correspondingToken.chain][baseToken.chain][_correspondingToken][_baseToken] = _isMintable; tokenToTokenWithChainId[baseToken.chain][correspondingToken.chain][_baseToken] = _correspondingToken; tokenToTokenWithChainId[baseToken.chain][correspondingToken.chain][_correspondingToken] = _baseToken; tokenToTokenWithChainId[correspondingToken.chain][baseToken.chain][_baseToken] = _correspondingToken; tokenToTokenWithChainId[correspondingToken.chain][baseToken.chain][_correspondingToken] = _baseToken; if(_isMintable){ isWrappedWithChainId[baseToken.chain][correspondingToken.chain][_correspondingToken] = true; isWrappedWithChainId[correspondingToken.chain][baseToken.chain][_correspondingToken] = true; isWrapped[_correspondingToken] = true;} tokenOwnerWithChainId[baseToken.chain][correspondingToken.chain][_baseToken][_correspondingToken] = lister; tokenOwnerWithChainId[baseToken.chain][correspondingToken.chain][_correspondingToken][_baseToken] = lister; tokenOwnerWithChainId[correspondingToken.chain][baseToken.chain][_baseToken][_correspondingToken] = lister; tokenOwnerWithChainId[correspondingToken.chain][baseToken.chain][_correspondingToken][_baseToken] = lister; if(_baseToken == _correspondingToken) _tokenOwner[_baseToken] = lister; else{ if(_baseToken.code.length > 0) _tokenOwner[_baseToken] = lister; else _tokenOwner[_correspondingToken] = lister;}}",
                                "modifiers": [
                                    "onlyOwner"
                                ],
                                "parameters": [
                                    {
                                        "type": "tokenInfo memory",
                                        "name": "baseToken"
                                    },
                                    {
                                        "type": "tokenInfo memory",
                                        "name": "correspondingToken"
                                    },
                                    {
                                        "type": "bool",
                                        "name": "_isMintable"
                                    },
                                    {
                                        "type": "address",
                                        "name": "lister"
                                    }
                                ],
                                "returns": [],
                                "reads": [
                                    [
                                        "isWrapped",
                                        "",
                                        "XBridge"
                                    ],
                                    [
                                        "isWrappedWithChainId",
                                        "",
                                        "XBridge"
                                    ],
                                    [
                                        "tokenOwnerWithChainId",
                                        "",
                                        "XBridge"
                                    ],
                                    [
                                        "tokenToTokenWithChainId",
                                        "",
                                        "XBridge"
                                    ],
                                    [
                                        "isMintableWithChainId",
                                        "",
                                        "XBridge"
                                    ],
                                    [
                                        "_tokenOwner",
                                        "",
                                        "XBridge"
                                    ]
                                ],
                                "writes": [
                                    [
                                        "isWrapped",
                                        "",
                                        "XBridge"
                                    ],
                                    [
                                        "isWrappedWithChainId",
                                        "",
                                        "XBridge"
                                    ],
                                    [
                                        "tokenOwnerWithChainId",
                                        "",
                                        "XBridge"
                                    ],
                                    [
                                        "tokenToTokenWithChainId",
                                        "",
                                        "XBridge"
                                    ],
                                    [
                                        "isMintableWithChainId",
                                        "",
                                        "XBridge"
                                    ],
                                    [
                                        "_tokenOwner",
                                        "",
                                        "XBridge"
                                    ]
                                ],
                                "external_calls": {
                                    "__set__": true,
                                    "values": [
                                        "XBridge.onlyOwner"
                                    ]
                                },
                                "is_payable": false,
                                "md5": "ba4a513f6e6b6870fb06a1d328eae473"
                            }
                        ]
                    },
                    "modifiers": {},
                    "structs": {
                        "tokenInfo": {
                            "content": "tokenInfo{ address token; uint256 chain;}"
                        }
                    },
                    "events": {
                        "Locked": {
                            "event": "Locked",
                            "content": "Locked(address indexed user, address indexed inToken, address indexed outToken, uint256 amount, uint256 feeAmount, uint256 _nonce, uint256 isWrapped, uint256 srcId, uint256 dstId)"
                        },
                        "UnLocked": {
                            "event": "UnLocked",
                            "content": "UnLocked(address indexed user, address indexed outToken, uint256 amount, uint256 feeAmount, uint256 _nonce, uint256 srcId, uint256 dstId)"
                        },
                        "TokenListed": {
                            "event": "TokenListed",
                            "content": "TokenListed(address indexed baseToken, uint256 baseTokenChain, address indexed correspondingToken, uint256 correspondingTokenChain, bool isMintable, address indexed user)"
                        },
                        "TokenDelisted": {
                            "event": "TokenDelisted",
                            "content": "TokenDelisted(address indexed baseToken, uint256 baseTokenChain, address indexed correspondingToken, uint256 correspondingTokenChain)"
                        },
                        "TokenDeposited": {
                            "event": "TokenDeposited",
                            "content": "TokenDeposited(address indexed user, uint256 amount)"
                        },
                        "TokenWithdrawn": {
                            "event": "TokenWithdrawn",
                            "content": "TokenWithdrawn(address indexed user, address indexed receiver, uint256 amount)"
                        },
                        "SignersChanged": {
                            "event": "SignersChanged",
                            "content": "SignersChanged(address[] indexed newSigners)"
                        },
                        "ChainSupported": {
                            "event": "ChainSupported",
                            "content": "ChainSupported(uint256 _chain, bool _supported)"
                        },
                        "FeeExcludedFromListing": {
                            "event": "FeeExcludedFromListing",
                            "content": "FeeExcludedFromListing(address indexed user, bool ifExcluded)"
                        },
                        "TokenFee": {
                            "event": "TokenFee",
                            "content": "TokenFee(address indexed _token, uint256 _fee)"
                        }
                    },
                    "enums": {},
                    "errors": {},
                    "custom_types": {},
                    "using_directives": {}
                }
            },
            "state_variables": {},
            "functions": {},
            "modifiers": {},
            "structs": {},
            "events": {},
            "enums": {},
            "errors": {},
            "custom_types": {},
            "using_directives": {},
            "external_functions": {
                "XBridge.__Ownable_init": "44fcf94abcb0d2c66ce3e37a497edc8f",
                "XBridge.__ReentrancyGuard_init": "fdb427b7985133c60b2358311b26f832",
                "XBridge.transferAndCalcAmountAndFees": "f94ca7d1fac053779b52a3083bce0987",
                "XBridge.nonReentrant": "b42933d168b2a798e6d2eeeabba2beaa",
                "XBridge.burn": "8489d8235aa1823cb23761cdb1f6d8cb",
                "XBridge.mint": "ee152c8c632f3617e8674567c8b5e55c",
                "XBridge.verify": "b5596b1036650a8d4438bfc41aafc6f7",
                "XBridge.swapTokensForETH": "918617485851b11ae47d5bd2863b5a57",
                "XBridge.safeApprove": "900ebd78fd4f54790e25f01904354427",
                "IUniswapV2Router02.swapExactTokensForETHSupportingFeeOnTransferTokens": "3e1036d26e009a39669f7df921413bc7",
                "XBridge.call": "625f122a0061d1d5ceaf58c41773b653",
                "XBridge.returnHash": "1dbbc92042752ced19cd9f2d90e5d8dc",
                "XBridge.prefixed": "149d3b1982461565c220241bbe13fdd6",
                "XBridge.transferListingFee": "dc5d4236b3b92785c40ced7a53720809",
                "XBridge.onlyOwner": "c5a518feff109806e8b681a11a2ae056"
            },
            "md5": "bd2b47099640d6340e3246fda6cb71db"
        }
    },
    "handled_md5": {
        "__set__": true,
        "values": [
            "bd2b47099640d6340e3246fda6cb71db",
            "018fec5687fd59bca0d626ca49aea7ca",
            "5e19422fa741723371b3d40db25f110c",
            "ea26a984553f85e131a6ac4ea11c2ea7",
            "24b4913cd78dec4298b2c651e370e348",
            "452ef8f7c8f054d74ce50bc9aff41aae",
            "8025370a999d53af6cda46119c767909",
            "a836ddb43f373f1f5f9814b3511c1747",
            "bec744eb3c9bcaacf87c824bfe5586d2",
            "532cab5e8687e776179d995eaf9148eb"
        ]
    }
}