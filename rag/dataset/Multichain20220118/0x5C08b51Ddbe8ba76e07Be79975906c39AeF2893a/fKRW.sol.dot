digraph G {
  graph [ ratio = "auto", page = "100", compound =true ];
subgraph "clusterIERC20" {
  graph [ label = "IERC20  (iface)", color = "lightgray", style = "filled", bgcolor = "lightgray" ];
  "IERC20.totalSupply" [ label = "totalSupply", color = "blue" ];
  "IERC20.balanceOf" [ label = "balanceOf", color = "blue" ];
  "IERC20.transfer" [ label = "transfer", color = "blue" ];
  "IERC20.allowance" [ label = "allowance" ];
  "IERC20.approve" [ label = "approve", color = "blue" ];
  "IERC20.transferFrom" [ label = "transferFrom", color = "blue" ];
  "IERC20.isContract" [ label = "isContract" ];
  "IERC20.data" [ label = "data" ];
}

subgraph "clusterIERC2612" {
  graph [ label = "IERC2612  (iface)", color = "lightgray", style = "filled", bgcolor = "lightgray" ];
  "IERC2612.permit" [ label = "permit", color = "blue" ];
  "IERC2612.nonces" [ label = "nonces", color = "blue" ];
}

subgraph "clusterIWERC10" {
  graph [ label = "IWERC10  (iface)", color = "lightgray", style = "filled", bgcolor = "lightgray" ];
  "IWERC10.approveAndCall" [ label = "approveAndCall", color = "blue" ];
  "IWERC10.transferAndCall" [ label = "transferAndCall", color = "blue" ];
}

subgraph "clusterITransferReceiver" {
  graph [ label = "ITransferReceiver  (iface)", color = "lightgray", style = "filled", bgcolor = "lightgray" ];
  "ITransferReceiver.onTokenTransfer" [ label = "onTokenTransfer", color = "blue" ];
}

subgraph "clusterIApprovalReceiver" {
  graph [ label = "IApprovalReceiver  (iface)", color = "lightgray", style = "filled", bgcolor = "lightgray" ];
  "IApprovalReceiver.onTokenApproval" [ label = "onTokenApproval", color = "blue" ];
}

subgraph "clusterAddress" {
  graph [ label = "Address  (lib)", color = "lightgray", style = "filled", bgcolor = "lightgray" ];
  "Address.isContract" [ label = "isContract", color = "white" ];
}

subgraph "clusterSafeERC20" {
  graph [ label = "SafeERC20  (lib)", color = "lightgray", style = "filled", bgcolor = "lightgray" ];
  "SafeERC20.safeTransfer" [ label = "safeTransfer", color = "white" ];
  "SafeERC20.safeTransferFrom" [ label = "safeTransferFrom", color = "white" ];
  "SafeERC20.safeApprove" [ label = "safeApprove", color = "white" ];
  "SafeERC20.callOptionalReturn" [ label = "callOptionalReturn" ];
  "SafeERC20.address" [ label = "address" ];
}

subgraph "clusterfKRW" {
  graph [ label = "fKRW", color = "lightgray", style = "filled", bgcolor = "lightgray" ];
  "fKRW.onlyOwner" [ label = "onlyOwner", color = "yellow" ];
  "fKRW.owner" [ label = "owner" ];
  "fKRW.changeDCRMOwner" [ label = "changeDCRMOwner", color = "green" ];
  "fKRW.Swapin" [ label = "Swapin", color = "green" ];
  "fKRW.Swapout" [ label = "Swapout", color = "green" ];
  "fKRW.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "fKRW.totalSupply" [ label = "totalSupply", color = "blue" ];
  "fKRW._mint" [ label = "_mint" ];
  "fKRW._burn" [ label = "_burn" ];
  "fKRW.approve" [ label = "approve", color = "blue" ];
  "fKRW.approveAndCall" [ label = "approveAndCall", color = "blue" ];
  "fKRW.permit" [ label = "permit", color = "blue" ];
  "fKRW.transferWithPermit" [ label = "transferWithPermit", color = "blue" ];
  "fKRW.verifyEIP712" [ label = "verifyEIP712" ];
  "fKRW.verifyPersonalSign" [ label = "verifyPersonalSign" ];
  "fKRW.prefixed" [ label = "prefixed" ];
  "fKRW.transfer" [ label = "transfer", color = "blue" ];
  "fKRW.transferFrom" [ label = "transferFrom", color = "blue" ];
  "fKRW.transferAndCall" [ label = "transferAndCall", color = "blue" ];
  "fKRW.address" [ label = "address" ];
  "fKRW.type" [ label = "type" ];
}

  "SafeERC20.safeTransfer";
  "SafeERC20.callOptionalReturn";
  "SafeERC20.safeTransferFrom";
  "SafeERC20.safeApprove";
  "IERC20.allowance";
  "SafeERC20.address";
  "IERC20.isContract";
  "IERC20.data";
  "fKRW.onlyOwner";
  "fKRW.owner";
  "fKRW.changeDCRMOwner";
  "fKRW.address";
  "fKRW.Swapin";
  "fKRW._mint";
  "fKRW.Swapout";
  "fKRW._burn";
  "fKRW.<Constructor>";
  "fKRW.permit";
  "fKRW.verifyEIP712";
  "fKRW.verifyPersonalSign";
  "fKRW.transferWithPermit";
  "fKRW.prefixed";
  "fKRW.transfer";
  "fKRW.transferFrom";
  "fKRW.type";
  "fKRW.transferAndCall";
  "SafeERC20.safeTransfer" -> "SafeERC20.callOptionalReturn" [ color = "green" ];
  "SafeERC20.safeTransferFrom" -> "SafeERC20.callOptionalReturn" [ color = "green" ];
  "SafeERC20.safeApprove" -> "IERC20.allowance" [ color = "orange" ];
  "SafeERC20.safeApprove" -> "SafeERC20.address" [ color = "green" ];
  "SafeERC20.safeApprove" -> "SafeERC20.callOptionalReturn" [ color = "green" ];
  "SafeERC20.callOptionalReturn" -> "IERC20.isContract" [ color = "orange" ];
  "SafeERC20.callOptionalReturn" -> "SafeERC20.address" [ color = "green" ];
  "SafeERC20.callOptionalReturn" -> "IERC20.data" [ color = "orange" ];
  "SafeERC20.callOptionalReturn" -> "SafeERC20.address" [ color = "green" ];
  "fKRW.onlyOwner" -> "fKRW.owner" [ color = "green" ];
  "fKRW.changeDCRMOwner" -> "fKRW.address" [ color = "green" ];
  "fKRW.changeDCRMOwner" -> "fKRW.owner" [ color = "green" ];
  "fKRW.Swapin" -> "fKRW._mint" [ color = "green" ];
  "fKRW.Swapout" -> "fKRW.address" [ color = "green" ];
  "fKRW.Swapout" -> "fKRW._burn" [ color = "green" ];
  "fKRW.<Constructor>" -> "fKRW.address" [ color = "green" ];
  "fKRW._mint" -> "fKRW.address" [ color = "green" ];
  "fKRW._mint" -> "fKRW.address" [ color = "green" ];
  "fKRW._burn" -> "fKRW.address" [ color = "green" ];
  "fKRW._burn" -> "fKRW.address" [ color = "green" ];
  "fKRW.permit" -> "fKRW.verifyEIP712" [ color = "green" ];
  "fKRW.permit" -> "fKRW.verifyPersonalSign" [ color = "green" ];
  "fKRW.transferWithPermit" -> "fKRW.verifyEIP712" [ color = "green" ];
  "fKRW.transferWithPermit" -> "fKRW.verifyPersonalSign" [ color = "green" ];
  "fKRW.transferWithPermit" -> "fKRW.address" [ color = "green" ];
  "fKRW.transferWithPermit" -> "fKRW.address" [ color = "green" ];
  "fKRW.verifyEIP712" -> "fKRW.address" [ color = "green" ];
  "fKRW.verifyPersonalSign" -> "fKRW.prefixed" [ color = "green" ];
  "fKRW.verifyPersonalSign" -> "fKRW.address" [ color = "green" ];
  "fKRW.transfer" -> "fKRW.address" [ color = "green" ];
  "fKRW.transfer" -> "fKRW.address" [ color = "green" ];
  "fKRW.transferFrom" -> "fKRW.address" [ color = "green" ];
  "fKRW.transferFrom" -> "fKRW.address" [ color = "green" ];
  "fKRW.transferFrom" -> "fKRW.type" [ color = "green" ];
  "fKRW.transferAndCall" -> "fKRW.address" [ color = "green" ];
  "fKRW.transferAndCall" -> "fKRW.address" [ color = "green" ];


rankdir=LR
node [shape=plaintext]
subgraph cluster_01 { 
label = "Legend";
key [label=<<table border="0" cellpadding="2" cellspacing="0" cellborder="0">
  <tr><td align="right" port="i1">Internal Call</td></tr>
  <tr><td align="right" port="i2">External Call</td></tr>
  <tr><td align="right" port="i2">Custom Error Call</td></tr>
  <tr><td align="right" port="i3">Defined Contract</td></tr>
  <tr><td align="right" port="i4">Undefined Contract</td></tr>
  </table>>]
key2 [label=<<table border="0" cellpadding="2" cellspacing="0" cellborder="0">
  <tr><td port="i1">&nbsp;&nbsp;&nbsp;</td></tr>
  <tr><td port="i2">&nbsp;&nbsp;&nbsp;</td></tr>
  <tr><td port="i3" bgcolor="lightgray">&nbsp;&nbsp;&nbsp;</td></tr>
  <tr><td port="i4">
    <table border="1" cellborder="0" cellspacing="0" cellpadding="7" color="lightgray">
      <tr>
       <td></td>
      </tr>
     </table>
  </td></tr>
  </table>>]
key:i1:e -> key2:i1:w [color="green"]
key:i2:e -> key2:i2:w [color="orange"]
key:i2:e -> key2:i2:w [color="red"]
}
}

