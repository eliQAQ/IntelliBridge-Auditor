digraph G {
  graph [ ratio = "auto", page = "100", compound =true ];
subgraph "clusterSwapperV2" {
  graph [ label = "SwapperV2", color = "lightgray", style = "filled", bgcolor = "lightgray" ];
  "SwapperV2.noLeftovers" [ label = "noLeftovers", color = "yellow" ];
  "SwapperV2.noLeftoversReserve" [ label = "noLeftoversReserve", color = "yellow" ];
  "SwapperV2.refundExcessNative" [ label = "refundExcessNative", color = "yellow" ];
  "SwapperV2._depositAndSwap" [ label = "_depositAndSwap", color = "white" ];
  "SwapperV2._executeSwaps" [ label = "_executeSwaps" ];
  "SwapperV2._fetchBalances" [ label = "_fetchBalances" ];
  "SwapperV2.address" [ label = "address" ];
  "SwapperV2.NoSwapDataProvided" [ label = "NoSwapDataProvided" ];
  "SwapperV2.CumulativeSlippageTooHigh" [ label = "CumulativeSlippageTooHigh" ];
  "SwapperV2.ContractCallNotAllowed" [ label = "ContractCallNotAllowed" ];
}

subgraph "clusterLibAsset" {
  graph [ label = "LibAsset", color = "lightgray" ];
  "LibAsset.getOwnBalance" [ label = "getOwnBalance" ];
  "LibAsset.transferAsset" [ label = "transferAsset" ];
  "LibAsset.isNativeAsset" [ label = "isNativeAsset" ];
  "LibAsset.depositAssets" [ label = "depositAssets" ];
}

subgraph "clusterLibAllowList" {
  graph [ label = "LibAllowList", color = "lightgray" ];
  "LibAllowList.contractIsAllowed" [ label = "contractIsAllowed" ];
  "LibAllowList.selectorIsAllowed" [ label = "selectorIsAllowed" ];
}

subgraph "clusterLibSwap" {
  graph [ label = "LibSwap", color = "lightgray" ];
  "LibSwap.swap" [ label = "swap" ];
}

  "SwapperV2.noLeftovers";
  "LibAsset.getOwnBalance";
  "LibAsset.transferAsset";
  "SwapperV2.noLeftoversReserve";
  "LibAsset.isNativeAsset";
  "SwapperV2.refundExcessNative";
  "SwapperV2.address";
  "SwapperV2._depositAndSwap";
  "SwapperV2.NoSwapDataProvided";
  "SwapperV2._fetchBalances";
  "LibAsset.depositAssets";
  "SwapperV2._executeSwaps";
  "SwapperV2.CumulativeSlippageTooHigh";
  "LibAllowList.contractIsAllowed";
  "LibAllowList.selectorIsAllowed";
  "SwapperV2.ContractCallNotAllowed";
  "LibSwap.swap";
  "SwapperV2.noLeftovers" -> "LibAsset.getOwnBalance" [ color = "orange" ];
  "SwapperV2.noLeftovers" -> "LibAsset.transferAsset" [ color = "orange" ];
  "SwapperV2.noLeftoversReserve" -> "LibAsset.getOwnBalance" [ color = "orange" ];
  "SwapperV2.noLeftoversReserve" -> "LibAsset.isNativeAsset" [ color = "orange" ];
  "SwapperV2.noLeftoversReserve" -> "LibAsset.transferAsset" [ color = "orange" ];
  "SwapperV2.refundExcessNative" -> "SwapperV2.address" [ color = "green" ];
  "SwapperV2.refundExcessNative" -> "SwapperV2.address" [ color = "green" ];
  "SwapperV2.refundExcessNative" -> "LibAsset.transferAsset" [ color = "orange" ];
  "SwapperV2._depositAndSwap" -> "SwapperV2.NoSwapDataProvided" [ color = "green" ];
  "SwapperV2._depositAndSwap" -> "LibAsset.getOwnBalance" [ color = "orange" ];
  "SwapperV2._depositAndSwap" -> "LibAsset.isNativeAsset" [ color = "orange" ];
  "SwapperV2._depositAndSwap" -> "SwapperV2._fetchBalances" [ color = "green" ];
  "SwapperV2._depositAndSwap" -> "LibAsset.depositAssets" [ color = "orange" ];
  "SwapperV2._depositAndSwap" -> "SwapperV2._executeSwaps" [ color = "green" ];
  "SwapperV2._depositAndSwap" -> "LibAsset.getOwnBalance" [ color = "orange" ];
  "SwapperV2._depositAndSwap" -> "SwapperV2.CumulativeSlippageTooHigh" [ color = "green" ];
  "SwapperV2._depositAndSwap" -> "SwapperV2.NoSwapDataProvided" [ color = "green" ];
  "SwapperV2._depositAndSwap" -> "LibAsset.getOwnBalance" [ color = "orange" ];
  "SwapperV2._depositAndSwap" -> "LibAsset.isNativeAsset" [ color = "orange" ];
  "SwapperV2._depositAndSwap" -> "SwapperV2._fetchBalances" [ color = "green" ];
  "SwapperV2._depositAndSwap" -> "LibAsset.depositAssets" [ color = "orange" ];
  "SwapperV2._depositAndSwap" -> "SwapperV2._executeSwaps" [ color = "green" ];
  "SwapperV2._depositAndSwap" -> "LibAsset.getOwnBalance" [ color = "orange" ];
  "SwapperV2._depositAndSwap" -> "LibAsset.isNativeAsset" [ color = "orange" ];
  "SwapperV2._depositAndSwap" -> "SwapperV2.CumulativeSlippageTooHigh" [ color = "green" ];
  "SwapperV2._executeSwaps" -> "LibAsset.isNativeAsset" [ color = "orange" ];
  "SwapperV2._executeSwaps" -> "LibAllowList.contractIsAllowed" [ color = "orange" ];
  "SwapperV2._executeSwaps" -> "LibAllowList.contractIsAllowed" [ color = "orange" ];
  "SwapperV2._executeSwaps" -> "LibAllowList.selectorIsAllowed" [ color = "orange" ];
  "SwapperV2._executeSwaps" -> "SwapperV2.ContractCallNotAllowed" [ color = "green" ];
  "SwapperV2._executeSwaps" -> "LibSwap.swap" [ color = "orange" ];
  "SwapperV2._executeSwaps" -> "LibAsset.isNativeAsset" [ color = "orange" ];
  "SwapperV2._executeSwaps" -> "LibAllowList.contractIsAllowed" [ color = "orange" ];
  "SwapperV2._executeSwaps" -> "LibAllowList.contractIsAllowed" [ color = "orange" ];
  "SwapperV2._executeSwaps" -> "LibAllowList.selectorIsAllowed" [ color = "orange" ];
  "SwapperV2._executeSwaps" -> "SwapperV2.ContractCallNotAllowed" [ color = "green" ];
  "SwapperV2._executeSwaps" -> "LibSwap.swap" [ color = "orange" ];
  "SwapperV2._fetchBalances" -> "LibAsset.getOwnBalance" [ color = "orange" ];
  "SwapperV2._fetchBalances" -> "LibAsset.isNativeAsset" [ color = "orange" ];


rankdir=LR
node [shape=plaintext]
subgraph cluster_01 { 
label = "Legend";
key [label=<<table border="0" cellpadding="2" cellspacing="0" cellborder="0">
  <tr><td align="right" port="i1">Internal Call</td></tr>
  <tr><td align="right" port="i2">External Call</td></tr>
  <tr><td align="right" port="i2">Custom Error Call</td></tr>
  <tr><td align="right" port="i3">Defined Contract</td></tr>
  <tr><td align="right" port="i4">Undefined Contract</td></tr>
  </table>>]
key2 [label=<<table border="0" cellpadding="2" cellspacing="0" cellborder="0">
  <tr><td port="i1">&nbsp;&nbsp;&nbsp;</td></tr>
  <tr><td port="i2">&nbsp;&nbsp;&nbsp;</td></tr>
  <tr><td port="i3" bgcolor="lightgray">&nbsp;&nbsp;&nbsp;</td></tr>
  <tr><td port="i4">
    <table border="1" cellborder="0" cellspacing="0" cellpadding="7" color="lightgray">
      <tr>
       <td></td>
      </tr>
     </table>
  </td></tr>
  </table>>]
key:i1:e -> key2:i1:w [color="green"]
key:i2:e -> key2:i2:w [color="orange"]
key:i2:e -> key2:i2:w [color="red"]
}
}

