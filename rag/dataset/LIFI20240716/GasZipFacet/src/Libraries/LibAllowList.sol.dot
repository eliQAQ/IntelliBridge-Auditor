digraph G {
  graph [ ratio = "auto", page = "100", compound =true ];
subgraph "clusterLibAllowList" {
  graph [ label = "LibAllowList  (lib)", color = "lightgray", style = "filled", bgcolor = "lightgray" ];
  "LibAllowList.addAllowedContract" [ label = "addAllowedContract", color = "white" ];
  "LibAllowList.contractIsAllowed" [ label = "contractIsAllowed", color = "white" ];
  "LibAllowList.removeAllowedContract" [ label = "removeAllowedContract", color = "white" ];
  "LibAllowList.getAllowedContracts" [ label = "getAllowedContracts", color = "white" ];
  "LibAllowList.addAllowedSelector" [ label = "addAllowedSelector", color = "white" ];
  "LibAllowList.removeAllowedSelector" [ label = "removeAllowedSelector", color = "white" ];
  "LibAllowList.selectorIsAllowed" [ label = "selectorIsAllowed", color = "white" ];
  "LibAllowList._getStorage" [ label = "_getStorage" ];
  "LibAllowList._checkAddress" [ label = "_checkAddress" ];
  "LibAllowList.address" [ label = "address" ];
  "LibAllowList.InvalidContract" [ label = "InvalidContract" ];
}

  "LibAllowList.addAllowedContract";
  "LibAllowList._checkAddress";
  "LibAllowList._getStorage";
  "LibAllowList.contractIsAllowed";
  "LibAllowList.removeAllowedContract";
  "LibAllowList.getAllowedContracts";
  "LibAllowList.addAllowedSelector";
  "LibAllowList.removeAllowedSelector";
  "LibAllowList.selectorIsAllowed";
  "LibAllowList.address";
  "LibAllowList.InvalidContract";
  "LibAllowList.addAllowedContract" -> "LibAllowList._checkAddress" [ color = "green" ];
  "LibAllowList.addAllowedContract" -> "LibAllowList._getStorage" [ color = "green" ];
  "LibAllowList.contractIsAllowed" -> "LibAllowList._getStorage" [ color = "green" ];
  "LibAllowList.removeAllowedContract" -> "LibAllowList._getStorage" [ color = "green" ];
  "LibAllowList.getAllowedContracts" -> "LibAllowList._getStorage" [ color = "green" ];
  "LibAllowList.addAllowedSelector" -> "LibAllowList._getStorage" [ color = "green" ];
  "LibAllowList.removeAllowedSelector" -> "LibAllowList._getStorage" [ color = "green" ];
  "LibAllowList.selectorIsAllowed" -> "LibAllowList._getStorage" [ color = "green" ];
  "LibAllowList._checkAddress" -> "LibAllowList.address" [ color = "green" ];
  "LibAllowList._checkAddress" -> "LibAllowList.InvalidContract" [ color = "green" ];
  "LibAllowList._checkAddress" -> "LibAllowList.InvalidContract" [ color = "green" ];


rankdir=LR
node [shape=plaintext]
subgraph cluster_01 { 
label = "Legend";
key [label=<<table border="0" cellpadding="2" cellspacing="0" cellborder="0">
  <tr><td align="right" port="i1">Internal Call</td></tr>
  <tr><td align="right" port="i2">External Call</td></tr>
  <tr><td align="right" port="i2">Custom Error Call</td></tr>
  <tr><td align="right" port="i3">Defined Contract</td></tr>
  <tr><td align="right" port="i4">Undefined Contract</td></tr>
  </table>>]
key2 [label=<<table border="0" cellpadding="2" cellspacing="0" cellborder="0">
  <tr><td port="i1">&nbsp;&nbsp;&nbsp;</td></tr>
  <tr><td port="i2">&nbsp;&nbsp;&nbsp;</td></tr>
  <tr><td port="i3" bgcolor="lightgray">&nbsp;&nbsp;&nbsp;</td></tr>
  <tr><td port="i4">
    <table border="1" cellborder="0" cellspacing="0" cellpadding="7" color="lightgray">
      <tr>
       <td></td>
      </tr>
     </table>
  </td></tr>
  </table>>]
key:i1:e -> key2:i1:w [color="green"]
key:i2:e -> key2:i2:w [color="orange"]
key:i2:e -> key2:i2:w [color="red"]
}
}

