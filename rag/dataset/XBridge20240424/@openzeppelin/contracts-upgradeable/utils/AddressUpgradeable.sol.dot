digraph G {
  graph [ ratio = "auto", page = "100", compound =true ];
subgraph "clusterAddressUpgradeable" {
  graph [ label = "AddressUpgradeable  (lib)", color = "lightgray", style = "filled", bgcolor = "lightgray" ];
  "AddressUpgradeable.isContract" [ label = "isContract" ];
  "AddressUpgradeable.sendValue" [ label = "sendValue", color = "white" ];
  "AddressUpgradeable.functionCall" [ label = "functionCall", color = "white" ];
  "AddressUpgradeable.functionCallWithValue" [ label = "functionCallWithValue" ];
  "AddressUpgradeable.functionStaticCall" [ label = "functionStaticCall" ];
  "AddressUpgradeable.functionDelegateCall" [ label = "functionDelegateCall" ];
  "AddressUpgradeable.verifyCallResultFromTarget" [ label = "verifyCallResultFromTarget" ];
  "AddressUpgradeable.verifyCallResult" [ label = "verifyCallResult", color = "white" ];
  "AddressUpgradeable._revert" [ label = "_revert" ];
  "AddressUpgradeable.address" [ label = "address" ];
}

subgraph "clustertarget" {
  graph [ label = "target", color = "lightgray" ];
  "target.staticcall" [ label = "staticcall" ];
  "target.delegatecall" [ label = "delegatecall" ];
}

  "AddressUpgradeable.sendValue";
  "AddressUpgradeable.address";
  "AddressUpgradeable.functionCall";
  "AddressUpgradeable.functionCallWithValue";
  "AddressUpgradeable.verifyCallResultFromTarget";
  "AddressUpgradeable.functionStaticCall";
  "target.staticcall";
  "AddressUpgradeable.functionDelegateCall";
  "target.delegatecall";
  "AddressUpgradeable.isContract";
  "AddressUpgradeable._revert";
  "AddressUpgradeable.verifyCallResult";
  "AddressUpgradeable.sendValue" -> "AddressUpgradeable.address" [ color = "green" ];
  "AddressUpgradeable.functionCall" -> "AddressUpgradeable.functionCallWithValue" [ color = "green" ];
  "AddressUpgradeable.functionCall" -> "AddressUpgradeable.functionCallWithValue" [ color = "green" ];
  "AddressUpgradeable.functionCallWithValue" -> "AddressUpgradeable.functionCallWithValue" [ color = "green" ];
  "AddressUpgradeable.functionCallWithValue" -> "AddressUpgradeable.address" [ color = "green" ];
  "AddressUpgradeable.functionCallWithValue" -> "AddressUpgradeable.verifyCallResultFromTarget" [ color = "green" ];
  "AddressUpgradeable.functionStaticCall" -> "AddressUpgradeable.functionStaticCall" [ color = "green" ];
  "AddressUpgradeable.functionStaticCall" -> "target.staticcall" [ color = "orange" ];
  "AddressUpgradeable.functionStaticCall" -> "AddressUpgradeable.verifyCallResultFromTarget" [ color = "green" ];
  "AddressUpgradeable.functionDelegateCall" -> "AddressUpgradeable.functionDelegateCall" [ color = "green" ];
  "AddressUpgradeable.functionDelegateCall" -> "target.delegatecall" [ color = "orange" ];
  "AddressUpgradeable.functionDelegateCall" -> "AddressUpgradeable.verifyCallResultFromTarget" [ color = "green" ];
  "AddressUpgradeable.verifyCallResultFromTarget" -> "AddressUpgradeable.isContract" [ color = "green" ];
  "AddressUpgradeable.verifyCallResultFromTarget" -> "AddressUpgradeable._revert" [ color = "green" ];
  "AddressUpgradeable.verifyCallResult" -> "AddressUpgradeable._revert" [ color = "green" ];


rankdir=LR
node [shape=plaintext]
subgraph cluster_01 { 
label = "Legend";
key [label=<<table border="0" cellpadding="2" cellspacing="0" cellborder="0">
  <tr><td align="right" port="i1">Internal Call</td></tr>
  <tr><td align="right" port="i2">External Call</td></tr>
  <tr><td align="right" port="i2">Custom Error Call</td></tr>
  <tr><td align="right" port="i3">Defined Contract</td></tr>
  <tr><td align="right" port="i4">Undefined Contract</td></tr>
  </table>>]
key2 [label=<<table border="0" cellpadding="2" cellspacing="0" cellborder="0">
  <tr><td port="i1">&nbsp;&nbsp;&nbsp;</td></tr>
  <tr><td port="i2">&nbsp;&nbsp;&nbsp;</td></tr>
  <tr><td port="i3" bgcolor="lightgray">&nbsp;&nbsp;&nbsp;</td></tr>
  <tr><td port="i4">
    <table border="1" cellborder="0" cellspacing="0" cellpadding="7" color="lightgray">
      <tr>
       <td></td>
      </tr>
     </table>
  </td></tr>
  </table>>]
key:i1:e -> key2:i1:w [color="green"]
key:i2:e -> key2:i2:w [color="orange"]
key:i2:e -> key2:i2:w [color="red"]
}
}

