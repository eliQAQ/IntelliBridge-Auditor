digraph G {
  graph [ ratio = "auto", page = "100", compound =true ];
subgraph "clusterTypedMemView" {
  graph [ label = "TypedMemView  (lib)", color = "lightgray", style = "filled", bgcolor = "lightgray" ];
  "TypedMemView.nibbleHex" [ label = "nibbleHex" ];
  "TypedMemView.byteHex" [ label = "byteHex", color = "white" ];
  "TypedMemView.encodeHex" [ label = "encodeHex", color = "white" ];
  "TypedMemView.reverseUint256" [ label = "reverseUint256" ];
  "TypedMemView.leftMask" [ label = "leftMask" ];
  "TypedMemView.nullView" [ label = "nullView", color = "white" ];
  "TypedMemView.isNull" [ label = "isNull" ];
  "TypedMemView.notNull" [ label = "notNull", color = "white" ];
  "TypedMemView.isValid" [ label = "isValid", color = "white" ];
  "TypedMemView.assertValid" [ label = "assertValid", color = "white" ];
  "TypedMemView.isType" [ label = "isType", color = "white" ];
  "TypedMemView.assertType" [ label = "assertType", color = "white" ];
  "TypedMemView.castTo" [ label = "castTo", color = "white" ];
  "TypedMemView.unsafeBuildUnchecked" [ label = "unsafeBuildUnchecked" ];
  "TypedMemView.build" [ label = "build", color = "white" ];
  "TypedMemView.ref" [ label = "ref", color = "white" ];
  "TypedMemView.typeOf" [ label = "typeOf" ];
  "TypedMemView.sameType" [ label = "sameType", color = "white" ];
  "TypedMemView.loc" [ label = "loc" ];
  "TypedMemView.words" [ label = "words", color = "white" ];
  "TypedMemView.footprint" [ label = "footprint", color = "white" ];
  "TypedMemView.len" [ label = "len" ];
  "TypedMemView.end" [ label = "end" ];
  "TypedMemView.slice" [ label = "slice", color = "white" ];
  "TypedMemView.prefix" [ label = "prefix", color = "white" ];
  "TypedMemView.postfix" [ label = "postfix", color = "white" ];
  "TypedMemView.indexErrOverrun" [ label = "indexErrOverrun", color = "white" ];
  "TypedMemView.index" [ label = "index", color = "white" ];
  "TypedMemView.indexUint" [ label = "indexUint", color = "white" ];
  "TypedMemView.indexLEUint" [ label = "indexLEUint", color = "white" ];
  "TypedMemView.indexAddress" [ label = "indexAddress", color = "white" ];
  "TypedMemView.keccak" [ label = "keccak", color = "white" ];
  "TypedMemView.sha2" [ label = "sha2", color = "white" ];
  "TypedMemView.hash160" [ label = "hash160", color = "white" ];
  "TypedMemView.hash256" [ label = "hash256", color = "white" ];
  "TypedMemView.untypedEqual" [ label = "untypedEqual", color = "white" ];
  "TypedMemView.untypedNotEqual" [ label = "untypedNotEqual", color = "white" ];
  "TypedMemView.equal" [ label = "equal", color = "white" ];
  "TypedMemView.notEqual" [ label = "notEqual", color = "white" ];
  "TypedMemView.unsafeCopyTo" [ label = "unsafeCopyTo", color = "red" ];
  "TypedMemView.clone" [ label = "clone", color = "white" ];
  "TypedMemView.unsafeJoin" [ label = "unsafeJoin", color = "red" ];
  "TypedMemView.joinKeccak" [ label = "joinKeccak", color = "white" ];
  "TypedMemView.joinSha2" [ label = "joinSha2", color = "white" ];
  "TypedMemView.join" [ label = "join", color = "white" ];
  "TypedMemView.address" [ label = "address" ];
}

subgraph "cluster_loc" {
  graph [ label = "_loc", color = "lightgray" ];
  "_loc.add" [ label = "add" ];
}

subgraph "cluster_index" {
  graph [ label = "_index", color = "lightgray" ];
  "_index.add" [ label = "add" ];
}

  "TypedMemView.byteHex";
  "TypedMemView.nibbleHex";
  "TypedMemView.encodeHex";
  "TypedMemView.notNull";
  "TypedMemView.isNull";
  "TypedMemView.isValid";
  "TypedMemView.typeOf";
  "TypedMemView.end";
  "TypedMemView.assertValid";
  "TypedMemView.isType";
  "TypedMemView.assertType";
  "TypedMemView.build";
  "_loc.add";
  "TypedMemView.unsafeBuildUnchecked";
  "TypedMemView.ref";
  "TypedMemView.words";
  "TypedMemView.len";
  "TypedMemView.footprint";
  "TypedMemView.loc";
  "TypedMemView.slice";
  "TypedMemView.prefix";
  "TypedMemView.postfix";
  "TypedMemView.indexErrOverrun";
  "TypedMemView.index";
  "_index.add";
  "TypedMemView.leftMask";
  "TypedMemView.indexUint";
  "TypedMemView.indexLEUint";
  "TypedMemView.reverseUint256";
  "TypedMemView.indexAddress";
  "TypedMemView.address";
  "TypedMemView.keccak";
  "TypedMemView.sha2";
  "TypedMemView.hash160";
  "TypedMemView.hash256";
  "TypedMemView.untypedEqual";
  "TypedMemView.untypedNotEqual";
  "TypedMemView.equal";
  "TypedMemView.notEqual";
  "TypedMemView.unsafeCopyTo";
  "TypedMemView.clone";
  "TypedMemView.unsafeJoin";
  "TypedMemView.joinKeccak";
  "TypedMemView.joinSha2";
  "TypedMemView.join";
  "TypedMemView.byteHex" -> "TypedMemView.nibbleHex" [ color = "green" ];
  "TypedMemView.byteHex" -> "TypedMemView.nibbleHex" [ color = "green" ];
  "TypedMemView.encodeHex" -> "TypedMemView.byteHex" [ color = "green" ];
  "TypedMemView.encodeHex" -> "TypedMemView.byteHex" [ color = "green" ];
  "TypedMemView.notNull" -> "TypedMemView.isNull" [ color = "green" ];
  "TypedMemView.isValid" -> "TypedMemView.typeOf" [ color = "green" ];
  "TypedMemView.isValid" -> "TypedMemView.end" [ color = "green" ];
  "TypedMemView.assertValid" -> "TypedMemView.isValid" [ color = "green" ];
  "TypedMemView.isType" -> "TypedMemView.typeOf" [ color = "green" ];
  "TypedMemView.assertType" -> "TypedMemView.isType" [ color = "green" ];
  "TypedMemView.assertType" -> "TypedMemView.encodeHex" [ color = "green" ];
  "TypedMemView.assertType" -> "TypedMemView.typeOf" [ color = "green" ];
  "TypedMemView.assertType" -> "TypedMemView.encodeHex" [ color = "green" ];
  "TypedMemView.build" -> "_loc.add" [ color = "orange" ];
  "TypedMemView.build" -> "TypedMemView.unsafeBuildUnchecked" [ color = "green" ];
  "TypedMemView.ref" -> "TypedMemView.build" [ color = "green" ];
  "TypedMemView.words" -> "TypedMemView.len" [ color = "green" ];
  "TypedMemView.footprint" -> "TypedMemView.words" [ color = "green" ];
  "TypedMemView.end" -> "TypedMemView.loc" [ color = "green" ];
  "TypedMemView.end" -> "TypedMemView.len" [ color = "green" ];
  "TypedMemView.slice" -> "TypedMemView.loc" [ color = "green" ];
  "TypedMemView.slice" -> "_loc.add" [ color = "orange" ];
  "TypedMemView.slice" -> "TypedMemView.end" [ color = "green" ];
  "TypedMemView.slice" -> "_loc.add" [ color = "orange" ];
  "TypedMemView.slice" -> "TypedMemView.build" [ color = "green" ];
  "TypedMemView.prefix" -> "TypedMemView.slice" [ color = "green" ];
  "TypedMemView.postfix" -> "TypedMemView.slice" [ color = "green" ];
  "TypedMemView.postfix" -> "TypedMemView.len" [ color = "green" ];
  "TypedMemView.indexErrOverrun" -> "TypedMemView.encodeHex" [ color = "green" ];
  "TypedMemView.indexErrOverrun" -> "TypedMemView.encodeHex" [ color = "green" ];
  "TypedMemView.indexErrOverrun" -> "TypedMemView.encodeHex" [ color = "green" ];
  "TypedMemView.indexErrOverrun" -> "TypedMemView.encodeHex" [ color = "green" ];
  "TypedMemView.index" -> "_index.add" [ color = "orange" ];
  "TypedMemView.index" -> "TypedMemView.len" [ color = "green" ];
  "TypedMemView.index" -> "TypedMemView.indexErrOverrun" [ color = "green" ];
  "TypedMemView.index" -> "TypedMemView.loc" [ color = "green" ];
  "TypedMemView.index" -> "TypedMemView.len" [ color = "green" ];
  "TypedMemView.index" -> "TypedMemView.loc" [ color = "green" ];
  "TypedMemView.index" -> "TypedMemView.leftMask" [ color = "green" ];
  "TypedMemView.indexUint" -> "TypedMemView.index" [ color = "green" ];
  "TypedMemView.indexLEUint" -> "TypedMemView.reverseUint256" [ color = "green" ];
  "TypedMemView.indexLEUint" -> "TypedMemView.index" [ color = "green" ];
  "TypedMemView.indexAddress" -> "TypedMemView.address" [ color = "green" ];
  "TypedMemView.indexAddress" -> "TypedMemView.indexUint" [ color = "green" ];
  "TypedMemView.keccak" -> "TypedMemView.loc" [ color = "green" ];
  "TypedMemView.keccak" -> "TypedMemView.len" [ color = "green" ];
  "TypedMemView.sha2" -> "TypedMemView.loc" [ color = "green" ];
  "TypedMemView.sha2" -> "TypedMemView.len" [ color = "green" ];
  "TypedMemView.hash160" -> "TypedMemView.loc" [ color = "green" ];
  "TypedMemView.hash160" -> "TypedMemView.len" [ color = "green" ];
  "TypedMemView.hash256" -> "TypedMemView.loc" [ color = "green" ];
  "TypedMemView.hash256" -> "TypedMemView.len" [ color = "green" ];
  "TypedMemView.untypedEqual" -> "TypedMemView.loc" [ color = "green" ];
  "TypedMemView.untypedEqual" -> "TypedMemView.loc" [ color = "green" ];
  "TypedMemView.untypedEqual" -> "TypedMemView.len" [ color = "green" ];
  "TypedMemView.untypedEqual" -> "TypedMemView.len" [ color = "green" ];
  "TypedMemView.untypedEqual" -> "TypedMemView.keccak" [ color = "green" ];
  "TypedMemView.untypedEqual" -> "TypedMemView.keccak" [ color = "green" ];
  "TypedMemView.untypedNotEqual" -> "TypedMemView.untypedEqual" [ color = "green" ];
  "TypedMemView.equal" -> "TypedMemView.typeOf" [ color = "green" ];
  "TypedMemView.equal" -> "TypedMemView.typeOf" [ color = "green" ];
  "TypedMemView.equal" -> "TypedMemView.keccak" [ color = "green" ];
  "TypedMemView.equal" -> "TypedMemView.keccak" [ color = "green" ];
  "TypedMemView.notEqual" -> "TypedMemView.equal" [ color = "green" ];
  "TypedMemView.unsafeCopyTo" -> "TypedMemView.notNull" [ color = "green" ];
  "TypedMemView.unsafeCopyTo" -> "TypedMemView.isValid" [ color = "green" ];
  "TypedMemView.unsafeCopyTo" -> "TypedMemView.len" [ color = "green" ];
  "TypedMemView.unsafeCopyTo" -> "TypedMemView.loc" [ color = "green" ];
  "TypedMemView.unsafeCopyTo" -> "TypedMemView.unsafeBuildUnchecked" [ color = "green" ];
  "TypedMemView.unsafeCopyTo" -> "TypedMemView.typeOf" [ color = "green" ];
  "TypedMemView.clone" -> "TypedMemView.len" [ color = "green" ];
  "TypedMemView.clone" -> "TypedMemView.unsafeCopyTo" [ color = "green" ];
  "TypedMemView.unsafeJoin" -> "TypedMemView.unsafeCopyTo" [ color = "green" ];
  "TypedMemView.unsafeJoin" -> "TypedMemView.len" [ color = "green" ];
  "TypedMemView.unsafeJoin" -> "TypedMemView.unsafeBuildUnchecked" [ color = "green" ];
  "TypedMemView.joinKeccak" -> "TypedMemView.keccak" [ color = "green" ];
  "TypedMemView.joinKeccak" -> "TypedMemView.unsafeJoin" [ color = "green" ];
  "TypedMemView.joinSha2" -> "TypedMemView.sha2" [ color = "green" ];
  "TypedMemView.joinSha2" -> "TypedMemView.unsafeJoin" [ color = "green" ];
  "TypedMemView.join" -> "TypedMemView.unsafeJoin" [ color = "green" ];
  "TypedMemView.join" -> "TypedMemView.len" [ color = "green" ];
  "TypedMemView.join" -> "TypedMemView.footprint" [ color = "green" ];


rankdir=LR
node [shape=plaintext]
subgraph cluster_01 { 
label = "Legend";
key [label=<<table border="0" cellpadding="2" cellspacing="0" cellborder="0">
  <tr><td align="right" port="i1">Internal Call</td></tr>
  <tr><td align="right" port="i2">External Call</td></tr>
  <tr><td align="right" port="i2">Custom Error Call</td></tr>
  <tr><td align="right" port="i3">Defined Contract</td></tr>
  <tr><td align="right" port="i4">Undefined Contract</td></tr>
  </table>>]
key2 [label=<<table border="0" cellpadding="2" cellspacing="0" cellborder="0">
  <tr><td port="i1">&nbsp;&nbsp;&nbsp;</td></tr>
  <tr><td port="i2">&nbsp;&nbsp;&nbsp;</td></tr>
  <tr><td port="i3" bgcolor="lightgray">&nbsp;&nbsp;&nbsp;</td></tr>
  <tr><td port="i4">
    <table border="1" cellborder="0" cellspacing="0" cellpadding="7" color="lightgray">
      <tr>
       <td></td>
      </tr>
     </table>
  </td></tr>
  </table>>]
key:i1:e -> key2:i1:w [color="green"]
key:i2:e -> key2:i2:w [color="orange"]
key:i2:e -> key2:i2:w [color="red"]
}
}

