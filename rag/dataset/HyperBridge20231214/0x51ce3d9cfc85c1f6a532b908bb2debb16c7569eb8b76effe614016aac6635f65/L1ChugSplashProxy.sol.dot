digraph G {
  graph [ ratio = "auto", page = "100", compound =true ];
subgraph "clusterIL1ChugSplashDeployer" {
  graph [ label = "IL1ChugSplashDeployer  (iface)", color = "lightgray", style = "filled", bgcolor = "lightgray" ];
  "IL1ChugSplashDeployer.isUpgrading" [ label = "isUpgrading", color = "blue" ];
}

subgraph "clusterL1ChugSplashProxy" {
  graph [ label = "L1ChugSplashProxy", color = "lightgray", style = "filled", bgcolor = "lightgray" ];
  "L1ChugSplashProxy.onlyWhenNotPaused" [ label = "onlyWhenNotPaused", color = "yellow" ];
  "L1ChugSplashProxy.proxyCallIfNotOwner" [ label = "proxyCallIfNotOwner", color = "yellow" ];
  "L1ChugSplashProxy.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "L1ChugSplashProxy.<Receive Ether>" [ label = "<Receive Ether>", color = "blue" ];
  "L1ChugSplashProxy.<Fallback>" [ label = "<Fallback>", color = "blue" ];
  "L1ChugSplashProxy.setCode" [ label = "setCode", color = "blue" ];
  "L1ChugSplashProxy.setStorage" [ label = "setStorage", color = "blue" ];
  "L1ChugSplashProxy.setOwner" [ label = "setOwner", color = "blue" ];
  "L1ChugSplashProxy.getOwner" [ label = "getOwner", color = "blue" ];
  "L1ChugSplashProxy.getImplementation" [ label = "getImplementation", color = "blue" ];
  "L1ChugSplashProxy._setImplementation" [ label = "_setImplementation" ];
  "L1ChugSplashProxy._setOwner" [ label = "_setOwner" ];
  "L1ChugSplashProxy._doProxyCall" [ label = "_doProxyCall" ];
  "L1ChugSplashProxy._getImplementation" [ label = "_getImplementation" ];
  "L1ChugSplashProxy._getOwner" [ label = "_getOwner" ];
  "L1ChugSplashProxy._getAccountCodeHash" [ label = "_getAccountCodeHash" ];
  "L1ChugSplashProxy.address" [ label = "address" ];
}

subgraph "clusterowner" {
  graph [ label = "owner", color = "lightgray" ];
  "owner.staticcall" [ label = "staticcall" ];
}

  "L1ChugSplashProxy.onlyWhenNotPaused";
  "L1ChugSplashProxy._getOwner";
  "owner.staticcall";
  "L1ChugSplashProxy.proxyCallIfNotOwner";
  "L1ChugSplashProxy.address";
  "L1ChugSplashProxy._doProxyCall";
  "L1ChugSplashProxy.<Constructor>";
  "L1ChugSplashProxy._setOwner";
  "L1ChugSplashProxy.<Receive Ether>";
  "L1ChugSplashProxy.<Fallback>";
  "L1ChugSplashProxy.setCode";
  "L1ChugSplashProxy._getImplementation";
  "L1ChugSplashProxy._getAccountCodeHash";
  "L1ChugSplashProxy._setImplementation";
  "L1ChugSplashProxy.setOwner";
  "L1ChugSplashProxy.getOwner";
  "L1ChugSplashProxy.getImplementation";
  "L1ChugSplashProxy.onlyWhenNotPaused" -> "L1ChugSplashProxy._getOwner" [ color = "green" ];
  "L1ChugSplashProxy.onlyWhenNotPaused" -> "owner.staticcall" [ color = "orange" ];
  "L1ChugSplashProxy.proxyCallIfNotOwner" -> "L1ChugSplashProxy._getOwner" [ color = "green" ];
  "L1ChugSplashProxy.proxyCallIfNotOwner" -> "L1ChugSplashProxy.address" [ color = "green" ];
  "L1ChugSplashProxy.proxyCallIfNotOwner" -> "L1ChugSplashProxy._doProxyCall" [ color = "green" ];
  "L1ChugSplashProxy.<Constructor>" -> "L1ChugSplashProxy._setOwner" [ color = "green" ];
  "L1ChugSplashProxy.<Receive Ether>" -> "L1ChugSplashProxy._doProxyCall" [ color = "green" ];
  "L1ChugSplashProxy.<Fallback>" -> "L1ChugSplashProxy._doProxyCall" [ color = "green" ];
  "L1ChugSplashProxy.setCode" -> "L1ChugSplashProxy._getImplementation" [ color = "green" ];
  "L1ChugSplashProxy.setCode" -> "L1ChugSplashProxy._getAccountCodeHash" [ color = "green" ];
  "L1ChugSplashProxy.setCode" -> "L1ChugSplashProxy._getAccountCodeHash" [ color = "green" ];
  "L1ChugSplashProxy.setCode" -> "L1ChugSplashProxy._setImplementation" [ color = "green" ];
  "L1ChugSplashProxy.setOwner" -> "L1ChugSplashProxy._setOwner" [ color = "green" ];
  "L1ChugSplashProxy.getOwner" -> "L1ChugSplashProxy._getOwner" [ color = "green" ];
  "L1ChugSplashProxy.getImplementation" -> "L1ChugSplashProxy._getImplementation" [ color = "green" ];
  "L1ChugSplashProxy._doProxyCall" -> "L1ChugSplashProxy._getImplementation" [ color = "green" ];
  "L1ChugSplashProxy._doProxyCall" -> "L1ChugSplashProxy.address" [ color = "green" ];


rankdir=LR
node [shape=plaintext]
subgraph cluster_01 { 
label = "Legend";
key [label=<<table border="0" cellpadding="2" cellspacing="0" cellborder="0">
  <tr><td align="right" port="i1">Internal Call</td></tr>
  <tr><td align="right" port="i2">External Call</td></tr>
  <tr><td align="right" port="i2">Custom Error Call</td></tr>
  <tr><td align="right" port="i3">Defined Contract</td></tr>
  <tr><td align="right" port="i4">Undefined Contract</td></tr>
  </table>>]
key2 [label=<<table border="0" cellpadding="2" cellspacing="0" cellborder="0">
  <tr><td port="i1">&nbsp;&nbsp;&nbsp;</td></tr>
  <tr><td port="i2">&nbsp;&nbsp;&nbsp;</td></tr>
  <tr><td port="i3" bgcolor="lightgray">&nbsp;&nbsp;&nbsp;</td></tr>
  <tr><td port="i4">
    <table border="1" cellborder="0" cellspacing="0" cellpadding="7" color="lightgray">
      <tr>
       <td></td>
      </tr>
     </table>
  </td></tr>
  </table>>]
key:i1:e -> key2:i1:w [color="green"]
key:i2:e -> key2:i2:w [color="orange"]
key:i2:e -> key2:i2:w [color="red"]
}
}

