strict digraph {
rankdir="LR"
node [shape=box]
subgraph cluster_375_SafeERC20 {
label = "SafeERC20"
"375_safeIncreaseAllowance" [label="safeIncreaseAllowance"]
"375_safePermit" [label="safePermit"]
"375_forceApprove" [label="forceApprove"]
"375__callOptionalReturnBool" [label="_callOptionalReturnBool"]
"375_safeApprove" [label="safeApprove"]
"375_safeDecreaseAllowance" [label="safeDecreaseAllowance"]
"375__callOptionalReturn" [label="_callOptionalReturn"]
"375_safeTransferFrom" [label="safeTransferFrom"]
"375_safeTransfer" [label="safeTransfer"]
"375_forceApprove" -> "375__callOptionalReturn"
"375_safeApprove" -> "375__callOptionalReturn"
"375_forceApprove" -> "375__callOptionalReturnBool"
"375_safeIncreaseAllowance" -> "375__callOptionalReturn"
"375_safeTransferFrom" -> "375__callOptionalReturn"
"375_safeDecreaseAllowance" -> "375__callOptionalReturn"
"375_safeTransfer" -> "375__callOptionalReturn"
}subgraph cluster_solidity {
label = "[Solidity]"
"require(bool,string)" 
"abi.encodeWithSelector()" 
"abi.decode()" 
"375_safeIncreaseAllowance" -> "abi.encodeWithSelector()"
"375_safeTransferFrom" -> "abi.encodeWithSelector()"
"375_safePermit" -> "require(bool,string)"
"375_safeApprove" -> "abi.encodeWithSelector()"
"375_safeApprove" -> "require(bool,string)"
"375__callOptionalReturn" -> "abi.decode()"
"375_safeDecreaseAllowance" -> "abi.encodeWithSelector()"
"375__callOptionalReturnBool" -> "abi.decode()"
"375_safeTransfer" -> "abi.encodeWithSelector()"
"375_safeDecreaseAllowance" -> "require(bool,string)"
"375__callOptionalReturn" -> "require(bool,string)"
"375_forceApprove" -> "abi.encodeWithSelector()"
}
}