digraph G {
  graph [ ratio = "auto", page = "100", compound =true ];
subgraph "clusterIGasZip" {
  graph [ label = "IGasZip  (iface)", color = "lightgray", style = "filled", bgcolor = "lightgray" ];
  "IGasZip.deposit" [ label = "deposit", color = "blue" ];
}

subgraph "clusterGasZipFacet" {
  graph [ label = "GasZipFacet", color = "lightgray", style = "filled", bgcolor = "lightgray" ];
  "GasZipFacet.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "GasZipFacet.startBridgeTokensViaGasZip" [ label = "startBridgeTokensViaGasZip", color = "blue" ];
  "GasZipFacet.swapAndStartBridgeTokensViaGasZip" [ label = "swapAndStartBridgeTokensViaGasZip", color = "blue" ];
  "GasZipFacet.depositToGasZipERC20" [ label = "depositToGasZipERC20", color = "green" ];
  "GasZipFacet.depositToGasZipNative" [ label = "depositToGasZipNative" ];
  "GasZipFacet.InvalidCallData" [ label = "InvalidCallData" ];
  "GasZipFacet.LiFiTransferStarted" [ label = "LiFiTransferStarted" ];
  "GasZipFacet.payable" [ label = "payable" ];
  "GasZipFacet._depositAndSwap" [ label = "_depositAndSwap" ];
  "GasZipFacet.address" [ label = "address" ];
}

subgraph "clusterLibAsset" {
  graph [ label = "LibAsset", color = "lightgray" ];
  "LibAsset.isNativeAsset" [ label = "isNativeAsset" ];
}

subgraph "clusterLibSwap" {
  graph [ label = "LibSwap", color = "lightgray" ];
  "LibSwap.swap" [ label = "swap" ];
}

  "GasZipFacet.startBridgeTokensViaGasZip";
  "LibAsset.isNativeAsset";
  "GasZipFacet.InvalidCallData";
  "GasZipFacet.depositToGasZipNative";
  "GasZipFacet.LiFiTransferStarted";
  "GasZipFacet.payable";
  "GasZipFacet.swapAndStartBridgeTokensViaGasZip";
  "GasZipFacet._depositAndSwap";
  "GasZipFacet.depositToGasZipERC20";
  "GasZipFacet.address";
  "LibSwap.swap";
  "GasZipFacet.startBridgeTokensViaGasZip" -> "LibAsset.isNativeAsset" [ color = "orange" ];
  "GasZipFacet.startBridgeTokensViaGasZip" -> "GasZipFacet.InvalidCallData" [ color = "green" ];
  "GasZipFacet.startBridgeTokensViaGasZip" -> "GasZipFacet.depositToGasZipNative" [ color = "green" ];
  "GasZipFacet.startBridgeTokensViaGasZip" -> "GasZipFacet.LiFiTransferStarted" [ color = "green" ];
  "GasZipFacet.startBridgeTokensViaGasZip" -> "GasZipFacet.payable" [ color = "green" ];
  "GasZipFacet.swapAndStartBridgeTokensViaGasZip" -> "LibAsset.isNativeAsset" [ color = "orange" ];
  "GasZipFacet.swapAndStartBridgeTokensViaGasZip" -> "GasZipFacet.InvalidCallData" [ color = "green" ];
  "GasZipFacet.swapAndStartBridgeTokensViaGasZip" -> "GasZipFacet._depositAndSwap" [ color = "green" ];
  "GasZipFacet.swapAndStartBridgeTokensViaGasZip" -> "GasZipFacet.payable" [ color = "green" ];
  "GasZipFacet.swapAndStartBridgeTokensViaGasZip" -> "GasZipFacet.depositToGasZipNative" [ color = "green" ];
  "GasZipFacet.swapAndStartBridgeTokensViaGasZip" -> "GasZipFacet.LiFiTransferStarted" [ color = "green" ];
  "GasZipFacet.swapAndStartBridgeTokensViaGasZip" -> "GasZipFacet.payable" [ color = "green" ];
  "GasZipFacet.depositToGasZipERC20" -> "GasZipFacet.address" [ color = "green" ];
  "GasZipFacet.depositToGasZipERC20" -> "LibSwap.swap" [ color = "orange" ];
  "GasZipFacet.depositToGasZipERC20" -> "GasZipFacet.address" [ color = "green" ];


rankdir=LR
node [shape=plaintext]
subgraph cluster_01 { 
label = "Legend";
key [label=<<table border="0" cellpadding="2" cellspacing="0" cellborder="0">
  <tr><td align="right" port="i1">Internal Call</td></tr>
  <tr><td align="right" port="i2">External Call</td></tr>
  <tr><td align="right" port="i2">Custom Error Call</td></tr>
  <tr><td align="right" port="i3">Defined Contract</td></tr>
  <tr><td align="right" port="i4">Undefined Contract</td></tr>
  </table>>]
key2 [label=<<table border="0" cellpadding="2" cellspacing="0" cellborder="0">
  <tr><td port="i1">&nbsp;&nbsp;&nbsp;</td></tr>
  <tr><td port="i2">&nbsp;&nbsp;&nbsp;</td></tr>
  <tr><td port="i3" bgcolor="lightgray">&nbsp;&nbsp;&nbsp;</td></tr>
  <tr><td port="i4">
    <table border="1" cellborder="0" cellspacing="0" cellpadding="7" color="lightgray">
      <tr>
       <td></td>
      </tr>
     </table>
  </td></tr>
  </table>>]
key:i1:e -> key2:i1:w [color="green"]
key:i2:e -> key2:i2:w [color="orange"]
key:i2:e -> key2:i2:w [color="red"]
}
}

