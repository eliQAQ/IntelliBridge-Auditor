digraph G {
  graph [ ratio = "auto", page = "100", compound =true ];
subgraph "clusterERC20Interface" {
  graph [ label = "ERC20Interface  (iface)", color = "lightgray", style = "filled", bgcolor = "lightgray" ];
  "ERC20Interface.transfer" [ label = "transfer" ];
  "ERC20Interface.transferFrom" [ label = "transferFrom" ];
  "ERC20Interface.balanceOf" [ label = "balanceOf" ];
}

subgraph "clusterLockProxyPip1" {
  graph [ label = "LockProxyPip1", color = "lightgray", style = "filled", bgcolor = "lightgray" ];
  "LockProxyPip1.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "LockProxyPip1.onlyManagerContract" [ label = "onlyManagerContract", color = "yellow" ];
  "LockProxyPip1.delegateAsset" [ label = "delegateAsset", color = "green" ];
  "LockProxyPip1.registerAsset" [ label = "registerAsset", color = "green" ];
  "LockProxyPip1.lock" [ label = "lock", color = "green" ];
  "LockProxyPip1.unlock" [ label = "unlock", color = "green" ];
  "LockProxyPip1._balanceFor" [ label = "_balanceFor" ];
  "LockProxyPip1._getEccm" [ label = "_getEccm" ];
  "LockProxyPip1._getRegistryKey" [ label = "_getRegistryKey" ];
  "LockProxyPip1._transferToContract" [ label = "_transferToContract" ];
  "LockProxyPip1._transferFromContract" [ label = "_transferFromContract" ];
  "LockProxyPip1._transferERC20ToContract" [ label = "_transferERC20ToContract" ];
  "LockProxyPip1._transferERC20FromContract" [ label = "_transferERC20FromContract" ];
  "LockProxyPip1._serializeTxArgs" [ label = "_serializeTxArgs" ];
  "LockProxyPip1._serializeRegisterAssetTxArgs" [ label = "_serializeRegisterAssetTxArgs" ];
  "LockProxyPip1._deserializeRegisterAssetTxArgs" [ label = "_deserializeRegisterAssetTxArgs" ];
  "LockProxyPip1._deserializeTxArgs" [ label = "_deserializeTxArgs" ];
  "LockProxyPip1.IEthCrossChainManagerProxy" [ label = "IEthCrossChainManagerProxy" ];
  "LockProxyPip1._msgSender" [ label = "_msgSender" ];
  "LockProxyPip1.address" [ label = "address" ];
  "LockProxyPip1.IEthCrossChainManager" [ label = "IEthCrossChainManager" ];
}

subgraph "clusterIEthCrossChainManagerProxy" {
  graph [ label = "IEthCrossChainManagerProxy", color = "lightgray" ];
  "IEthCrossChainManagerProxy.getEthCrossChainManager" [ label = "getEthCrossChainManager" ];
}

subgraph "clusterUtils" {
  graph [ label = "Utils", color = "lightgray" ];
  "Utils.addressToBytes" [ label = "addressToBytes" ];
  "Utils.bytesToAddress" [ label = "bytesToAddress" ];
}

subgraph "clusterIEthCrossChainManager" {
  graph [ label = "IEthCrossChainManager", color = "lightgray" ];
  "IEthCrossChainManager.crossChain" [ label = "crossChain" ];
}

subgraph "clusteramount" {
  graph [ label = "amount", color = "lightgray" ];
  "amount.sub" [ label = "sub" ];
}

subgraph "clusteruint160(toAddress)" {
  graph [ label = "uint160(toAddress)", color = "lightgray" ];
  "uint160(toAddress).transfer" [ label = "transfer" ];
}

subgraph "clusterZeroCopySink" {
  graph [ label = "ZeroCopySink", color = "lightgray" ];
  "ZeroCopySink.WriteVarBytes" [ label = "WriteVarBytes" ];
  "ZeroCopySink.WriteUint255" [ label = "WriteUint255" ];
}

subgraph "clusterZeroCopySource" {
  graph [ label = "ZeroCopySource", color = "lightgray" ];
  "ZeroCopySource.NextVarBytes" [ label = "NextVarBytes" ];
  "ZeroCopySource.NextUint255" [ label = "NextUint255" ];
}

  "LockProxyPip1.onlyManagerContract";
  "LockProxyPip1.IEthCrossChainManagerProxy";
  "LockProxyPip1._msgSender";
  "IEthCrossChainManagerProxy.getEthCrossChainManager";
  "LockProxyPip1.delegateAsset";
  "LockProxyPip1._getRegistryKey";
  "LockProxyPip1._balanceFor";
  "Utils.addressToBytes";
  "LockProxyPip1._serializeRegisterAssetTxArgs";
  "LockProxyPip1._getEccm";
  "IEthCrossChainManager.crossChain";
  "LockProxyPip1.registerAsset";
  "LockProxyPip1._deserializeRegisterAssetTxArgs";
  "Utils.bytesToAddress";
  "LockProxyPip1.lock";
  "LockProxyPip1._transferToContract";
  "amount.sub";
  "LockProxyPip1._transferFromContract";
  "LockProxyPip1._serializeTxArgs";
  "LockProxyPip1.unlock";
  "LockProxyPip1._deserializeTxArgs";
  "LockProxyPip1.address";
  "ERC20Interface.balanceOf";
  "LockProxyPip1.IEthCrossChainManager";
  "LockProxyPip1._transferERC20ToContract";
  "uint160(toAddress).transfer";
  "LockProxyPip1._transferERC20FromContract";
  "ERC20Interface.transferFrom";
  "ERC20Interface.transfer";
  "ZeroCopySink.WriteVarBytes";
  "ZeroCopySink.WriteUint255";
  "ZeroCopySource.NextVarBytes";
  "ZeroCopySource.NextUint255";
  "LockProxyPip1.onlyManagerContract" -> "LockProxyPip1.IEthCrossChainManagerProxy" [ color = "green" ];
  "LockProxyPip1.onlyManagerContract" -> "LockProxyPip1._msgSender" [ color = "green" ];
  "LockProxyPip1.onlyManagerContract" -> "IEthCrossChainManagerProxy.getEthCrossChainManager" [ color = "orange" ];
  "LockProxyPip1.delegateAsset" -> "LockProxyPip1._msgSender" [ color = "green" ];
  "LockProxyPip1.delegateAsset" -> "LockProxyPip1._getRegistryKey" [ color = "green" ];
  "LockProxyPip1.delegateAsset" -> "LockProxyPip1._balanceFor" [ color = "green" ];
  "LockProxyPip1.delegateAsset" -> "Utils.addressToBytes" [ color = "orange" ];
  "LockProxyPip1.delegateAsset" -> "LockProxyPip1._serializeRegisterAssetTxArgs" [ color = "green" ];
  "LockProxyPip1.delegateAsset" -> "LockProxyPip1._getEccm" [ color = "green" ];
  "LockProxyPip1.delegateAsset" -> "IEthCrossChainManager.crossChain" [ color = "orange" ];
  "LockProxyPip1.registerAsset" -> "LockProxyPip1._deserializeRegisterAssetTxArgs" [ color = "green" ];
  "LockProxyPip1.registerAsset" -> "LockProxyPip1._getRegistryKey" [ color = "green" ];
  "LockProxyPip1.registerAsset" -> "Utils.bytesToAddress" [ color = "orange" ];
  "LockProxyPip1.lock" -> "LockProxyPip1._transferToContract" [ color = "green" ];
  "LockProxyPip1.lock" -> "LockProxyPip1._getRegistryKey" [ color = "green" ];
  "LockProxyPip1.lock" -> "Utils.addressToBytes" [ color = "orange" ];
  "LockProxyPip1.lock" -> "amount.sub" [ color = "orange" ];
  "LockProxyPip1.lock" -> "LockProxyPip1._transferFromContract" [ color = "green" ];
  "LockProxyPip1.lock" -> "Utils.bytesToAddress" [ color = "orange" ];
  "LockProxyPip1.lock" -> "LockProxyPip1._serializeTxArgs" [ color = "green" ];
  "LockProxyPip1.lock" -> "LockProxyPip1._getEccm" [ color = "green" ];
  "LockProxyPip1.lock" -> "IEthCrossChainManager.crossChain" [ color = "orange" ];
  "LockProxyPip1.lock" -> "LockProxyPip1._msgSender" [ color = "green" ];
  "LockProxyPip1.unlock" -> "LockProxyPip1._deserializeTxArgs" [ color = "green" ];
  "LockProxyPip1.unlock" -> "Utils.bytesToAddress" [ color = "orange" ];
  "LockProxyPip1.unlock" -> "Utils.bytesToAddress" [ color = "orange" ];
  "LockProxyPip1.unlock" -> "LockProxyPip1._getRegistryKey" [ color = "green" ];
  "LockProxyPip1.unlock" -> "Utils.bytesToAddress" [ color = "orange" ];
  "LockProxyPip1.unlock" -> "LockProxyPip1._transferFromContract" [ color = "green" ];
  "LockProxyPip1.unlock" -> "LockProxyPip1._transferFromContract" [ color = "green" ];
  "LockProxyPip1._balanceFor" -> "LockProxyPip1.address" [ color = "green" ];
  "LockProxyPip1._balanceFor" -> "LockProxyPip1.address" [ color = "green" ];
  "LockProxyPip1._balanceFor" -> "ERC20Interface.balanceOf" [ color = "orange" ];
  "LockProxyPip1._balanceFor" -> "LockProxyPip1.address" [ color = "green" ];
  "LockProxyPip1._getEccm" -> "LockProxyPip1.IEthCrossChainManagerProxy" [ color = "green" ];
  "LockProxyPip1._getEccm" -> "IEthCrossChainManagerProxy.getEthCrossChainManager" [ color = "orange" ];
  "LockProxyPip1._getEccm" -> "LockProxyPip1.IEthCrossChainManager" [ color = "green" ];
  "LockProxyPip1._transferToContract" -> "LockProxyPip1.address" [ color = "green" ];
  "LockProxyPip1._transferToContract" -> "LockProxyPip1._transferERC20ToContract" [ color = "green" ];
  "LockProxyPip1._transferToContract" -> "LockProxyPip1._msgSender" [ color = "green" ];
  "LockProxyPip1._transferToContract" -> "LockProxyPip1.address" [ color = "green" ];
  "LockProxyPip1._transferFromContract" -> "LockProxyPip1.address" [ color = "green" ];
  "LockProxyPip1._transferFromContract" -> "uint160(toAddress).transfer" [ color = "orange" ];
  "LockProxyPip1._transferFromContract" -> "LockProxyPip1.address" [ color = "green" ];
  "LockProxyPip1._transferFromContract" -> "LockProxyPip1._transferERC20FromContract" [ color = "green" ];
  "LockProxyPip1._transferERC20ToContract" -> "ERC20Interface.transferFrom" [ color = "orange" ];
  "LockProxyPip1._transferERC20FromContract" -> "ERC20Interface.transfer" [ color = "orange" ];
  "LockProxyPip1._serializeTxArgs" -> "ZeroCopySink.WriteVarBytes" [ color = "orange" ];
  "LockProxyPip1._serializeTxArgs" -> "ZeroCopySink.WriteVarBytes" [ color = "orange" ];
  "LockProxyPip1._serializeTxArgs" -> "ZeroCopySink.WriteVarBytes" [ color = "orange" ];
  "LockProxyPip1._serializeTxArgs" -> "ZeroCopySink.WriteUint255" [ color = "orange" ];
  "LockProxyPip1._serializeTxArgs" -> "ZeroCopySink.WriteUint255" [ color = "orange" ];
  "LockProxyPip1._serializeTxArgs" -> "ZeroCopySink.WriteVarBytes" [ color = "orange" ];
  "LockProxyPip1._serializeRegisterAssetTxArgs" -> "ZeroCopySink.WriteVarBytes" [ color = "orange" ];
  "LockProxyPip1._serializeRegisterAssetTxArgs" -> "ZeroCopySink.WriteVarBytes" [ color = "orange" ];
  "LockProxyPip1._deserializeRegisterAssetTxArgs" -> "ZeroCopySource.NextVarBytes" [ color = "orange" ];
  "LockProxyPip1._deserializeRegisterAssetTxArgs" -> "ZeroCopySource.NextVarBytes" [ color = "orange" ];
  "LockProxyPip1._deserializeTxArgs" -> "ZeroCopySource.NextVarBytes" [ color = "orange" ];
  "LockProxyPip1._deserializeTxArgs" -> "ZeroCopySource.NextVarBytes" [ color = "orange" ];
  "LockProxyPip1._deserializeTxArgs" -> "ZeroCopySource.NextVarBytes" [ color = "orange" ];
  "LockProxyPip1._deserializeTxArgs" -> "ZeroCopySource.NextUint255" [ color = "orange" ];
  "LockProxyPip1._deserializeTxArgs" -> "ZeroCopySource.NextUint255" [ color = "orange" ];
  "LockProxyPip1._deserializeTxArgs" -> "ZeroCopySource.NextVarBytes" [ color = "orange" ];


rankdir=LR
node [shape=plaintext]
subgraph cluster_01 { 
label = "Legend";
key [label=<<table border="0" cellpadding="2" cellspacing="0" cellborder="0">
  <tr><td align="right" port="i1">Internal Call</td></tr>
  <tr><td align="right" port="i2">External Call</td></tr>
  <tr><td align="right" port="i2">Custom Error Call</td></tr>
  <tr><td align="right" port="i3">Defined Contract</td></tr>
  <tr><td align="right" port="i4">Undefined Contract</td></tr>
  </table>>]
key2 [label=<<table border="0" cellpadding="2" cellspacing="0" cellborder="0">
  <tr><td port="i1">&nbsp;&nbsp;&nbsp;</td></tr>
  <tr><td port="i2">&nbsp;&nbsp;&nbsp;</td></tr>
  <tr><td port="i3" bgcolor="lightgray">&nbsp;&nbsp;&nbsp;</td></tr>
  <tr><td port="i4">
    <table border="1" cellborder="0" cellspacing="0" cellpadding="7" color="lightgray">
      <tr>
       <td></td>
      </tr>
     </table>
  </td></tr>
  </table>>]
key:i1:e -> key2:i1:w [color="green"]
key:i2:e -> key2:i2:w [color="orange"]
key:i2:e -> key2:i2:w [color="red"]
}
}

