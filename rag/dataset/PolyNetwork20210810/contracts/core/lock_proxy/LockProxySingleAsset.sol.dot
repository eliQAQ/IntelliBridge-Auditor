digraph G {
  graph [ ratio = "auto", page = "100", compound =true ];
subgraph "clusterbridgeAsset" {
  graph [ label = "bridgeAsset", color = "lightgray", style = "filled", bgcolor = "lightgray" ];
  "bridgeAsset.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "bridgeAsset.onlyBridge" [ label = "onlyBridge", color = "yellow" ];
  "bridgeAsset.mint" [ label = "mint", color = "green" ];
  "bridgeAsset.burnFrom" [ label = "burnFrom", color = "green" ];
  "bridgeAsset._msgSender" [ label = "_msgSender" ];
  "bridgeAsset._mint" [ label = "_mint" ];
  "bridgeAsset._burnFrom" [ label = "_burnFrom" ];
}

subgraph "clusterLockProxySingleAsset" {
  graph [ label = "LockProxySingleAsset", color = "lightgray", style = "filled", bgcolor = "lightgray" ];
  "LockProxySingleAsset.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "LockProxySingleAsset.onlyManagerContract" [ label = "onlyManagerContract", color = "yellow" ];
  "LockProxySingleAsset.setManagerProxy" [ label = "setManagerProxy", color = "green" ];
  "LockProxySingleAsset.bindProxyHash" [ label = "bindProxyHash", color = "green" ];
  "LockProxySingleAsset.lock" [ label = "lock", color = "green" ];
  "LockProxySingleAsset.unlock" [ label = "unlock", color = "green" ];
  "LockProxySingleAsset._serializeTxArgs" [ label = "_serializeTxArgs" ];
  "LockProxySingleAsset._deserializeTxArgs" [ label = "_deserializeTxArgs" ];
  "LockProxySingleAsset.address" [ label = "address" ];
  "LockProxySingleAsset.IEthCrossChainManagerProxy" [ label = "IEthCrossChainManagerProxy" ];
  "LockProxySingleAsset._msgSender" [ label = "_msgSender" ];
  "LockProxySingleAsset.IEthCrossChainManager" [ label = "IEthCrossChainManager" ];
}

subgraph "clusterIEthCrossChainManagerProxy" {
  graph [ label = "IEthCrossChainManagerProxy", color = "lightgray" ];
  "IEthCrossChainManagerProxy.getEthCrossChainManager" [ label = "getEthCrossChainManager" ];
}

subgraph "clusterIEthCrossChainManager" {
  graph [ label = "IEthCrossChainManager", color = "lightgray" ];
  "IEthCrossChainManager.crossChain" [ label = "crossChain" ];
}

subgraph "clusterUtils" {
  graph [ label = "Utils", color = "lightgray" ];
  "Utils.equalStorage" [ label = "equalStorage" ];
  "Utils.bytesToAddress" [ label = "bytesToAddress" ];
}

subgraph "clusterZeroCopySink" {
  graph [ label = "ZeroCopySink", color = "lightgray" ];
  "ZeroCopySink.WriteVarBytes" [ label = "WriteVarBytes" ];
  "ZeroCopySink.WriteUint255" [ label = "WriteUint255" ];
}

subgraph "clusterZeroCopySource" {
  graph [ label = "ZeroCopySource", color = "lightgray" ];
  "ZeroCopySource.NextVarBytes" [ label = "NextVarBytes" ];
  "ZeroCopySource.NextUint255" [ label = "NextUint255" ];
}

  "bridgeAsset.onlyBridge";
  "bridgeAsset._msgSender";
  "bridgeAsset.mint";
  "bridgeAsset._mint";
  "bridgeAsset.burnFrom";
  "bridgeAsset._burnFrom";
  "LockProxySingleAsset.<Constructor>";
  "LockProxySingleAsset.address";
  "LockProxySingleAsset.onlyManagerContract";
  "LockProxySingleAsset.IEthCrossChainManagerProxy";
  "LockProxySingleAsset._msgSender";
  "IEthCrossChainManagerProxy.getEthCrossChainManager";
  "LockProxySingleAsset.lock";
  "LockProxySingleAsset._serializeTxArgs";
  "LockProxySingleAsset.IEthCrossChainManager";
  "IEthCrossChainManager.crossChain";
  "LockProxySingleAsset.unlock";
  "LockProxySingleAsset._deserializeTxArgs";
  "Utils.equalStorage";
  "Utils.bytesToAddress";
  "ZeroCopySink.WriteVarBytes";
  "ZeroCopySink.WriteUint255";
  "ZeroCopySource.NextVarBytes";
  "ZeroCopySource.NextUint255";
  "bridgeAsset.onlyBridge" -> "bridgeAsset._msgSender" [ color = "green" ];
  "bridgeAsset.mint" -> "bridgeAsset._mint" [ color = "green" ];
  "bridgeAsset.burnFrom" -> "bridgeAsset._burnFrom" [ color = "green" ];
  "LockProxySingleAsset.<Constructor>" -> "LockProxySingleAsset.address" [ color = "green" ];
  "LockProxySingleAsset.onlyManagerContract" -> "LockProxySingleAsset.IEthCrossChainManagerProxy" [ color = "green" ];
  "LockProxySingleAsset.onlyManagerContract" -> "LockProxySingleAsset._msgSender" [ color = "green" ];
  "LockProxySingleAsset.onlyManagerContract" -> "IEthCrossChainManagerProxy.getEthCrossChainManager" [ color = "orange" ];
  "LockProxySingleAsset.lock" -> "LockProxySingleAsset._msgSender" [ color = "green" ];
  "LockProxySingleAsset.lock" -> "LockProxySingleAsset._serializeTxArgs" [ color = "green" ];
  "LockProxySingleAsset.lock" -> "LockProxySingleAsset.IEthCrossChainManagerProxy" [ color = "green" ];
  "LockProxySingleAsset.lock" -> "IEthCrossChainManagerProxy.getEthCrossChainManager" [ color = "orange" ];
  "LockProxySingleAsset.lock" -> "LockProxySingleAsset.IEthCrossChainManager" [ color = "green" ];
  "LockProxySingleAsset.lock" -> "IEthCrossChainManager.crossChain" [ color = "orange" ];
  "LockProxySingleAsset.lock" -> "LockProxySingleAsset.address" [ color = "green" ];
  "LockProxySingleAsset.lock" -> "LockProxySingleAsset._msgSender" [ color = "green" ];
  "LockProxySingleAsset.unlock" -> "LockProxySingleAsset._deserializeTxArgs" [ color = "green" ];
  "LockProxySingleAsset.unlock" -> "Utils.equalStorage" [ color = "orange" ];
  "LockProxySingleAsset.unlock" -> "Utils.bytesToAddress" [ color = "orange" ];
  "LockProxySingleAsset.unlock" -> "LockProxySingleAsset.address" [ color = "green" ];
  "LockProxySingleAsset._serializeTxArgs" -> "ZeroCopySink.WriteVarBytes" [ color = "orange" ];
  "LockProxySingleAsset._serializeTxArgs" -> "ZeroCopySink.WriteUint255" [ color = "orange" ];
  "LockProxySingleAsset._deserializeTxArgs" -> "ZeroCopySource.NextVarBytes" [ color = "orange" ];
  "LockProxySingleAsset._deserializeTxArgs" -> "ZeroCopySource.NextUint255" [ color = "orange" ];


rankdir=LR
node [shape=plaintext]
subgraph cluster_01 { 
label = "Legend";
key [label=<<table border="0" cellpadding="2" cellspacing="0" cellborder="0">
  <tr><td align="right" port="i1">Internal Call</td></tr>
  <tr><td align="right" port="i2">External Call</td></tr>
  <tr><td align="right" port="i2">Custom Error Call</td></tr>
  <tr><td align="right" port="i3">Defined Contract</td></tr>
  <tr><td align="right" port="i4">Undefined Contract</td></tr>
  </table>>]
key2 [label=<<table border="0" cellpadding="2" cellspacing="0" cellborder="0">
  <tr><td port="i1">&nbsp;&nbsp;&nbsp;</td></tr>
  <tr><td port="i2">&nbsp;&nbsp;&nbsp;</td></tr>
  <tr><td port="i3" bgcolor="lightgray">&nbsp;&nbsp;&nbsp;</td></tr>
  <tr><td port="i4">
    <table border="1" cellborder="0" cellspacing="0" cellpadding="7" color="lightgray">
      <tr>
       <td></td>
      </tr>
     </table>
  </td></tr>
  </table>>]
key:i1:e -> key2:i1:w [color="green"]
key:i2:e -> key2:i2:w [color="orange"]
key:i2:e -> key2:i2:w [color="red"]
}
}

